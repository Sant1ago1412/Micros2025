
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001243c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080125e0  080125e0  000135e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a74  08012a74  000142cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012a74  08012a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a7c  08012a7c  000142cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a7c  08012a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012a80  08012a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  08012a84  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001850  200002cc  08012d50  000142cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b1c  08012d50  00014b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e839  00000000  00000000  000142fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004882  00000000  00000000  00032b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  000373b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cc  00000000  00000000  00038e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000836d  00000000  00000000  0003a35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220a9  00000000  00000000  000426c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4602  00000000  00000000  00064772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108d74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000860c  00000000  00000000  00108db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001113c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080125c4 	.word	0x080125c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	080125c4 	.word	0x080125c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <ADC_Filter>:
 *      Author: santi
 */

#include "ADC.h"

void ADC_Filter(s_ADC *adcValues){
 8001030:	b490      	push	{r4, r7}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

	static uint8_t index=0;
	static uint16_t Buffer[8][8];

	if(adcValues->newValue==1){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800103e:	2b01      	cmp	r3, #1
 8001040:	d158      	bne.n	80010f4 <ADC_Filter+0xc4>
		adcValues->newValue=0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		for(uint8_t channel = 0; channel < NUM_CHANNELS; channel++){
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e041      	b.n	80010d4 <ADC_Filter+0xa4>
			adcValues->Sumatoria[channel] -= Buffer[index][channel];
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <ADC_Filter+0xd0>)
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	4611      	mov	r1, r2
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	4828      	ldr	r0, [pc, #160]	@ (8001104 <ADC_Filter+0xd4>)
 8001064:	00c9      	lsls	r1, r1, #3
 8001066:	440a      	add	r2, r1
 8001068:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800106c:	4611      	mov	r1, r2
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	1a59      	subs	r1, r3, r1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			adcValues->Sumatoria[channel] += adcValues->raw_Data[channel];
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	7bf9      	ldrb	r1, [r7, #15]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800108c:	4611      	mov	r1, r2
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	4419      	add	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			Buffer[index][channel] = adcValues->raw_Data[channel];
 800109a:	7bf9      	ldrb	r1, [r7, #15]
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <ADC_Filter+0xd0>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461c      	mov	r4, r3
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 80010aa:	4916      	ldr	r1, [pc, #88]	@ (8001104 <ADC_Filter+0xd4>)
 80010ac:	00e2      	lsls	r2, r4, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	4602      	mov	r2, r0
 80010b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adcValues->filteredData[channel] = (adcValues->Sumatoria[channel] / 8);
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	b299      	uxth	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(uint8_t channel = 0; channel < NUM_CHANNELS; channel++){
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d9ba      	bls.n	8001050 <ADC_Filter+0x20>
		}

		index++;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <ADC_Filter+0xd0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <ADC_Filter+0xd0>)
 80010e4:	701a      	strb	r2, [r3, #0]
		if(index>7)
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <ADC_Filter+0xd0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d902      	bls.n	80010f4 <ADC_Filter+0xc4>
			index=0;
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <ADC_Filter+0xd0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	}
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc90      	pop	{r4, r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200002e8 	.word	0x200002e8
 8001104:	200002ec 	.word	0x200002ec

08001108 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <ESP01_WriteRX+0x38>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	b291      	uxth	r1, r2
 800111a:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <ESP01_WriteRX+0x38>)
 800111c:	8011      	strh	r1, [r2, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <ESP01_WriteRX+0x3c>)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <ESP01_WriteRX+0x38>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	2b80      	cmp	r3, #128	@ 0x80
 800112c:	d102      	bne.n	8001134 <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <ESP01_WriteRX+0x38>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	200003fc 	.word	0x200003fc
 8001144:	2000037c 	.word	0x2000037c

08001148 <ESP01_Timeout10ms>:
	ESP01ChangeState = NULL;
	ESP01DbgStr = NULL;
}


void ESP01_Timeout10ms(){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <ESP01_Timeout10ms+0x54>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <ESP01_Timeout10ms+0x54>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3b01      	subs	r3, #1
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <ESP01_Timeout10ms+0x54>)
 800115c:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <ESP01_Timeout10ms+0x58>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <ESP01_Timeout10ms+0x58>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <ESP01_Timeout10ms+0x58>)
 800116e:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <ESP01_Timeout10ms+0x58>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <ESP01_Timeout10ms+0x5c>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <ESP01_Timeout10ms+0x60>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <ESP01_Timeout10ms+0x60>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3b01      	subs	r3, #1
 800118c:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <ESP01_Timeout10ms+0x60>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000036c 	.word	0x2000036c
 80011a0:	20000370 	.word	0x20000370
 80011a4:	20000378 	.word	0x20000378
 80011a8:	20000374 	.word	0x20000374

080011ac <UP_initprotocol>:
int16_t valuem2;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;
static void (*aPtrFunADC)(uint8_t *buf) = NULL;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]

	datosCom->bufferRx = malloc(ringbuff);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00c fe98 	bl	800def0 <malloc>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
	datosCom->bufferTx = malloc(ringbuff);
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00c fe90 	bl	800def0 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]
	datosComLib=datosCom;
 80011d8:	4a03      	ldr	r2, [pc, #12]	@ (80011e8 <UP_initprotocol+0x3c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000040c 	.word	0x2000040c

080011ec <UP_sendInfo>:

void UP_sendInfo(_eEstadoMEFcmd CMD,uint8_t *bufferAux,uint8_t bytes){
 80011ec:	b490      	push	{r4, r7}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001202:	2300      	movs	r3, #0
 8001204:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001208:	2300      	movs	r3, #0
 800120a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800120e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001218:	3330      	adds	r3, #48	@ 0x30
 800121a:	443b      	add	r3, r7
 800121c:	2255      	movs	r2, #85	@ 0x55
 800121e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 8001222:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800122c:	3330      	adds	r3, #48	@ 0x30
 800122e:	443b      	add	r3, r7
 8001230:	224e      	movs	r2, #78	@ 0x4e
 8001232:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8001236:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001240:	3330      	adds	r3, #48	@ 0x30
 8001242:	443b      	add	r3, r7
 8001244:	2245      	movs	r2, #69	@ 0x45
 8001246:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 800124a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001254:	3330      	adds	r3, #48	@ 0x30
 8001256:	443b      	add	r3, r7
 8001258:	2252      	movs	r2, #82	@ 0x52
 800125a:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes+2;
 800125e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001268:	4619      	mov	r1, r3
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	3302      	adds	r3, #2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8001274:	443b      	add	r3, r7
 8001276:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800127a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001284:	3330      	adds	r3, #48	@ 0x30
 8001286:	443b      	add	r3, r7
 8001288:	223a      	movs	r2, #58	@ 0x3a
 800128a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=CMD;
 800128e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001298:	3330      	adds	r3, #48	@ 0x30
 800129a:	443b      	add	r3, r7
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80012a8:	e012      	b.n	80012d0 <UP_sendInfo+0xe4>
        bufAux[indiceAux++] = bufferAux[i];
 80012aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	441a      	add	r2, r3
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b6:	1c59      	adds	r1, r3, #1
 80012b8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	3330      	adds	r3, #48	@ 0x30
 80012c0:	443b      	add	r3, r7
 80012c2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes; i++)
 80012c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012ca:	3301      	adds	r3, #1
 80012cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80012d0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3e7      	bcc.n	80012aa <UP_sendInfo+0xbe>

    cks=0;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80012e6:	e022      	b.n	800132e <UP_sendInfo+0x142>
        cks^= bufAux[i];
 80012e8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012ec:	3330      	adds	r3, #48	@ 0x30
 80012ee:	443b      	add	r3, r7
 80012f0:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80012f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012f8:	4053      	eors	r3, r2
 80012fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 80012fe:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <UP_sendInfo+0x180>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68d8      	ldr	r0, [r3, #12]
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <UP_sendInfo+0x180>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	795a      	ldrb	r2, [r3, #5]
 800130e:	1c54      	adds	r4, r2, #1
 8001310:	b2e4      	uxtb	r4, r4
 8001312:	715c      	strb	r4, [r3, #5]
 8001314:	4613      	mov	r3, r2
 8001316:	4403      	add	r3, r0
 8001318:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800131c:	443a      	add	r2, r7
 800131e:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8001322:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8001324:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001328:	3301      	adds	r3, #1
 800132a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800132e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001336:	429a      	cmp	r2, r3
 8001338:	d3d6      	bcc.n	80012e8 <UP_sendInfo+0xfc>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <UP_sendInfo+0x180>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68d9      	ldr	r1, [r3, #12]
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <UP_sendInfo+0x180>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	795a      	ldrb	r2, [r3, #5]
 8001346:	1c50      	adds	r0, r2, #1
 8001348:	b2c0      	uxtb	r0, r0
 800134a:	7158      	strb	r0, [r3, #5]
 800134c:	4613      	mov	r3, r2
 800134e:	440b      	add	r3, r1
 8001350:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001354:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <UP_sendInfo+0x180>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800135e:	741a      	strb	r2, [r3, #16]

}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	@ 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bc90      	pop	{r4, r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000040c 	.word	0x2000040c

08001370 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	78db      	ldrb	r3, [r3, #3]
 800137c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800137e:	e0e2      	b.n	8001546 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8001380:	4b76      	ldr	r3, [pc, #472]	@ (800155c <UP_decodeHeader+0x1ec>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b06      	cmp	r3, #6
 8001386:	f200 80d7 	bhi.w	8001538 <UP_decodeHeader+0x1c8>
 800138a:	a201      	add	r2, pc, #4	@ (adr r2, 8001390 <UP_decodeHeader+0x20>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013ad 	.word	0x080013ad
 8001394:	080013d5 	.word	0x080013d5
 8001398:	08001409 	.word	0x08001409
 800139c:	0800143d 	.word	0x0800143d
 80013a0:	08001471 	.word	0x08001471
 80013a4:	08001499 	.word	0x08001499
 80013a8:	080014db 	.word	0x080014db
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	791b      	ldrb	r3, [r3, #4]
 80013b4:	1c59      	adds	r1, r3, #1
 80013b6:	b2c8      	uxtb	r0, r1
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	7108      	strb	r0, [r1, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b55      	cmp	r3, #85	@ 0x55
 80013c2:	f040 80bd 	bne.w	8001540 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80013c6:	4b65      	ldr	r3, [pc, #404]	@ (800155c <UP_decodeHeader+0x1ec>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80013d2:	e0b5      	b.n	8001540 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	1c59      	adds	r1, r3, #1
 80013de:	b2c8      	uxtb	r0, r1
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	7108      	strb	r0, [r1, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80013ea:	d103      	bne.n	80013f4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80013ec:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <UP_decodeHeader+0x1ec>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80013f2:	e0a8      	b.n	8001546 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	791b      	ldrb	r3, [r3, #4]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8001400:	4b56      	ldr	r3, [pc, #344]	@ (800155c <UP_decodeHeader+0x1ec>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
                break;
 8001406:	e09e      	b.n	8001546 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	1c59      	adds	r1, r3, #1
 8001412:	b2c8      	uxtb	r0, r1
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	7108      	strb	r0, [r1, #4]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b45      	cmp	r3, #69	@ 0x45
 800141e:	d103      	bne.n	8001428 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8001420:	4b4e      	ldr	r3, [pc, #312]	@ (800155c <UP_decodeHeader+0x1ec>)
 8001422:	2203      	movs	r2, #3
 8001424:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8001426:	e08e      	b.n	8001546 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	791b      	ldrb	r3, [r3, #4]
 800142c:	3b01      	subs	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8001434:	4b49      	ldr	r3, [pc, #292]	@ (800155c <UP_decodeHeader+0x1ec>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
                break;
 800143a:	e084      	b.n	8001546 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	1c59      	adds	r1, r3, #1
 8001446:	b2c8      	uxtb	r0, r1
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	7108      	strb	r0, [r1, #4]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b52      	cmp	r3, #82	@ 0x52
 8001452:	d103      	bne.n	800145c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8001454:	4b41      	ldr	r3, [pc, #260]	@ (800155c <UP_decodeHeader+0x1ec>)
 8001456:	2204      	movs	r2, #4
 8001458:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800145a:	e074      	b.n	8001546 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	3b01      	subs	r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8001468:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <UP_decodeHeader+0x1ec>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
            break;
 800146e:	e06a      	b.n	8001546 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791a      	ldrb	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	1c59      	adds	r1, r3, #1
 8001482:	b2c8      	uxtb	r0, r1
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	7108      	strb	r0, [r1, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <UP_decodeHeader+0x1f0>)
 800148e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8001490:	4b32      	ldr	r3, [pc, #200]	@ (800155c <UP_decodeHeader+0x1ec>)
 8001492:	2205      	movs	r2, #5
 8001494:	701a      	strb	r2, [r3, #0]
                break;
 8001496:	e056      	b.n	8001546 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	1c59      	adds	r1, r3, #1
 80014a2:	b2c8      	uxtb	r0, r1
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	7108      	strb	r0, [r1, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80014ae:	d10a      	bne.n	80014c6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80014b0:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <UP_decodeHeader+0x1ec>)
 80014b2:	2206      	movs	r2, #6
 80014b4:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <UP_decodeHeader+0x1f0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80014c4:	e03f      	b.n	8001546 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	791b      	ldrb	r3, [r3, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80014d2:	4b22      	ldr	r3, [pc, #136]	@ (800155c <UP_decodeHeader+0x1ec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
                break;
 80014d8:	e035      	b.n	8001546 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80014da:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <UP_decodeHeader+0x1f0>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d90f      	bls.n	8001502 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	791b      	ldrb	r3, [r3, #4]
 80014ea:	1c59      	adds	r1, r3, #1
 80014ec:	b2c8      	uxtb	r0, r1
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	7108      	strb	r0, [r1, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	4053      	eors	r3, r2
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <UP_decodeHeader+0x1f0>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	3b01      	subs	r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <UP_decodeHeader+0x1f0>)
 800150c:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <UP_decodeHeader+0x1f0>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d116      	bne.n	8001544 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <UP_decodeHeader+0x1ec>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	789a      	ldrb	r2, [r3, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	7909      	ldrb	r1, [r1, #4]
 8001528:	440b      	add	r3, r1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d109      	bne.n	8001544 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f817 	bl	8001564 <UP_decodeData>
                    }
                }

                break;
 8001536:	e005      	b.n	8001544 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <UP_decodeHeader+0x1ec>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
                break;
 800153e:	e002      	b.n	8001546 <UP_decodeHeader+0x1d6>
                break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <UP_decodeHeader+0x1d6>
                break;
 8001544:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	429a      	cmp	r2, r3
 800154e:	f47f af17 	bne.w	8001380 <UP_decodeHeader+0x10>
        }
    }
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000408 	.word	0x20000408
 8001560:	20000414 	.word	0x20000414

08001564 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[30], indiceAux=0,bytes=0;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001572:	2300      	movs	r3, #0
 8001574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	3302      	adds	r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	3bf0      	subs	r3, #240	@ 0xf0
 8001588:	2b05      	cmp	r3, #5
 800158a:	f200 8084 	bhi.w	8001696 <UP_decodeData+0x132>
 800158e:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <UP_decodeData+0x30>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015c9 	.word	0x080015c9
 800159c:	080015e5 	.word	0x080015e5
 80015a0:	080015fb 	.word	0x080015fb
 80015a4:	0800166d 	.word	0x0800166d
 80015a8:	08001683 	.word	0x08001683
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80015ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80015b6:	3328      	adds	r3, #40	@ 0x28
 80015b8:	443b      	add	r3, r7
 80015ba:	22f0      	movs	r2, #240	@ 0xf0
 80015bc:	f803 2c20 	strb.w	r2, [r3, #-32]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80015c0:	2302      	movs	r3, #2
 80015c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 80015c6:	e074      	b.n	80016b2 <UP_decodeData+0x14e>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80015c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80015d2:	3328      	adds	r3, #40	@ 0x28
 80015d4:	443b      	add	r3, r7
 80015d6:	22f1      	movs	r2, #241	@ 0xf1
 80015d8:	f803 2c20 	strb.w	r2, [r3, #-32]
		bytes=0x02;
 80015dc:	2302      	movs	r3, #2
 80015de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 80015e2:	e066      	b.n	80016b2 <UP_decodeData+0x14e>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80015e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80015ee:	3328      	adds	r3, #40	@ 0x28
 80015f0:	443b      	add	r3, r7
 80015f2:	22f2      	movs	r2, #242	@ 0xf2
 80015f4:	f803 2c20 	strb.w	r2, [r3, #-32]
//		bytes=;

    break;
 80015f8:	e05b      	b.n	80016b2 <UP_decodeData+0x14e>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80015fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8001604:	3328      	adds	r3, #40	@ 0x28
 8001606:	443b      	add	r3, r7
 8001608:	22f3      	movs	r2, #243	@ 0xf3
 800160a:	f803 2c20 	strb.w	r2, [r3, #-32]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	3303      	adds	r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <UP_decodeData+0x174>)
 800161e:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	3304      	adds	r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	4b2a      	ldr	r3, [pc, #168]	@ (80016d8 <UP_decodeData+0x174>)
 8001630:	705a      	strb	r2, [r3, #1]
    	casts.u8[2]=datosComLib->bufferRx[datosComLib->indexStart+5];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	3305      	adds	r3, #5
 800163c:	4413      	add	r3, r2
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <UP_decodeData+0x174>)
 8001642:	709a      	strb	r2, [r3, #2]
        casts.u8[3]=datosComLib->bufferRx[datosComLib->indexStart+6];
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	3306      	adds	r3, #6
 800164e:	4413      	add	r3, r2
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <UP_decodeData+0x174>)
 8001654:	70da      	strb	r2, [r3, #3]
    	valuem1 = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <UP_decodeData+0x174>)
 8001658:	f9b3 2000 	ldrsh.w	r2, [r3]
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <UP_decodeData+0x178>)
 800165e:	801a      	strh	r2, [r3, #0]
    	valuem2 = casts.i16[1];
 8001660:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <UP_decodeData+0x174>)
 8001662:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001666:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <UP_decodeData+0x17c>)
 8001668:	801a      	strh	r2, [r3, #0]

    break;
 800166a:	e022      	b.n	80016b2 <UP_decodeData+0x14e>

    case MPUDATA:

    	bufAux[indiceAux++]=MPUDATA;
 800166c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8001676:	3328      	adds	r3, #40	@ 0x28
 8001678:	443b      	add	r3, r7
 800167a:	22f4      	movs	r2, #244	@ 0xf4
 800167c:	f803 2c20 	strb.w	r2, [r3, #-32]
    break;
 8001680:	e017      	b.n	80016b2 <UP_decodeData+0x14e>
    case ADCVALUES:

    	aPtrFunADC(&bufAux[0]);
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <UP_decodeData+0x180>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	4610      	mov	r0, r2
 800168c:	4798      	blx	r3

    	bytes=0x10;
 800168e:	2310      	movs	r3, #16
 8001690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 8001694:	e00d      	b.n	80016b2 <UP_decodeData+0x14e>
    default:

        bufAux[indiceAux++]=0xFF;
 8001696:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80016a0:	3328      	adds	r3, #40	@ 0x28
 80016a2:	443b      	add	r3, r7
 80016a4:	22ff      	movs	r2, #255	@ 0xff
 80016a6:	f803 2c20 	strb.w	r2, [r3, #-32]
        bytes=0x02;
 80016aa:	2302      	movs	r3, #2
 80016ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    break;
 80016b0:	bf00      	nop
    }

    UP_sendInfo(datosComLib->bufferRx[datosComLib->indexStart+2],bufAux,bytes);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	3302      	adds	r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80016c4:	f107 0108 	add.w	r1, r7, #8
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fd8f 	bl	80011ec <UP_sendInfo>
}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	@ 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000400 	.word	0x20000400
 80016dc:	20000404 	.word	0x20000404
 80016e0:	20000406 	.word	0x20000406
 80016e4:	20000410 	.word	0x20000410

080016e8 <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	81fb      	strh	r3, [r7, #14]
 80016f8:	e016      	b.n	8001728 <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	441a      	add	r2, r3
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <UP_datafromUSB+0x58>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	490e      	ldr	r1, [pc, #56]	@ (8001740 <UP_datafromUSB+0x58>)
 8001708:	6809      	ldr	r1, [r1, #0]
 800170a:	78c9      	ldrb	r1, [r1, #3]
 800170c:	b2c9      	uxtb	r1, r1
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <UP_datafromUSB+0x58>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	78da      	ldrb	r2, [r3, #3]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	3201      	adds	r2, #1
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	3301      	adds	r3, #1
 8001726:	81fb      	strh	r3, [r7, #14]
 8001728:	89fa      	ldrh	r2, [r7, #14]
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3e4      	bcc.n	80016fa <UP_datafromUSB+0x12>
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000040c 	.word	0x2000040c

08001744 <ret_eng_Values>:

int16_t ret_eng_Values(uint8_t eng){
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	if(eng)
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <ret_eng_Values+0x18>
		return valuem1;
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <ret_eng_Values+0x2c>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	e002      	b.n	8001762 <ret_eng_Values+0x1e>
	else
		return valuem2;
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <ret_eng_Values+0x30>)
 800175e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000404 	.word	0x20000404
 8001774:	20000406 	.word	0x20000406

08001778 <UP_attachData>:
void UP_attachData(void(*ptrGetADCValues)(uint8_t *buf)){
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	aPtrFunADC=ptrGetADCValues;
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <UP_attachData+0x1c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000410 	.word	0x20000410

08001798 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	809a      	strh	r2, [r3, #4]

}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <en_HandlerENG>:

void en_HandlerENG(_sEng *engines,int32_t newspeed,uint8_t freno){
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	4613      	mov	r3, r2
 80017ce:	71fb      	strb	r3, [r7, #7]

	if(newspeed==engines->speed)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	4293      	cmp	r3, r2
 80017da:	d031      	beq.n	8001840 <en_HandlerENG+0x7e>
		return;
	if(freno==1){
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d103      	bne.n	80017ea <en_HandlerENG+0x28>
		engines->estado=BRAKE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2203      	movs	r2, #3
 80017e6:	709a      	strb	r2, [r3, #2]
		return;
 80017e8:	e02b      	b.n	8001842 <en_HandlerENG+0x80>
	}
	if(newspeed>engines->maxSpeed)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	889b      	ldrh	r3, [r3, #4]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4293      	cmp	r3, r2
 80017f4:	dd02      	ble.n	80017fc <en_HandlerENG+0x3a>
		newspeed=engines->maxSpeed;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	60bb      	str	r3, [r7, #8]
	//agregar el caso anterior para negativo
	if(newspeed<0){
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da09      	bge.n	8001816 <en_HandlerENG+0x54>
		engines->estado= BACK;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	709a      	strb	r2, [r3, #2]
		engines->speed= -newspeed;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	b29b      	uxth	r3, r3
 800180c:	425b      	negs	r3, r3
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	801a      	strh	r2, [r3, #0]
 8001814:	e015      	b.n	8001842 <en_HandlerENG+0x80>
	}else if(newspeed>0){
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	dd07      	ble.n	800182c <en_HandlerENG+0x6a>
		engines->estado= FRONT;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	709a      	strb	r2, [r3, #2]
		engines->speed= newspeed;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	801a      	strh	r2, [r3, #0]
 800182a:	e00a      	b.n	8001842 <en_HandlerENG+0x80>
	}else if(newspeed==0){
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d107      	bne.n	8001842 <en_HandlerENG+0x80>
		engines->estado= FREE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2202      	movs	r2, #2
 8001836:	709a      	strb	r2, [r3, #2]
		engines->speed= 0;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	801a      	strh	r2, [r3, #0]
 800183e:	e000      	b.n	8001842 <en_HandlerENG+0x80>
		return;
 8001840:	bf00      	nop
	}

}
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_ADC_ConvCpltCallback>:
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	adcValues.newValue=1;
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	20000868 	.word	0x20000868

0800186c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d104      	bne.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001880:	7813      	ldrb	r3, [r2, #0]
 8001882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001886:	7013      	strb	r3, [r2, #0]
//	if (htim->Instance == TIM10) {
//		MPU6050_Read_All(&mpuValues);
//		mpuValues.DMAREADY=1;
//		SSD1306_DMAREADY(0);
//	}
	if(htim->Instance == TIM9){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x40>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d104      	bne.n	800189c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValues.raw_Data, 8);
 8001892:	2208      	movs	r2, #8
 8001894:	4906      	ldr	r1, [pc, #24]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001896:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001898:	f001 fb92 	bl	8002fc0 <HAL_ADC_Start_DMA>
	}
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40014800 	.word	0x40014800
 80018a8:	20000850 	.word	0x20000850
 80018ac:	40014000 	.word	0x40014000
 80018b0:	20000868 	.word	0x20000868
 80018b4:	20000418 	.word	0x20000418

080018b8 <HAL_UART_RxCpltCallback>:

void setESP01_CHPD(uint8_t val){
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <HAL_UART_RxCpltCallback+0x30>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10a      	bne.n	80018e0 <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.AT_Rx_data);
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_UART_RxCpltCallback+0x34>)
 80018cc:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fc19 	bl	8001108 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	4905      	ldr	r1, [pc, #20]	@ (80018f0 <HAL_UART_RxCpltCallback+0x38>)
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <HAL_UART_RxCpltCallback+0x3c>)
 80018dc:	f007 fb14 	bl	8008f08 <HAL_UART_Receive_IT>

	}
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40011000 	.word	0x40011000
 80018ec:	200008ac 	.word	0x200008ac
 80018f0:	200009d8 	.word	0x200009d8
 80018f4:	200006f4 	.word	0x200006f4

080018f8 <task10ms>:
//			}
//		}
//	}
//}

void task10ms(){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;
//	uint16_t buffaux[8];

	ESP01_Timeout10ms();
 80018fc:	f7ff fc24 	bl	8001148 <ESP01_Timeout10ms>

	if(ticker%10==0){
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <task10ms+0x7c>)
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <task10ms+0x80>)
 8001906:	fba3 1302 	umull	r1, r3, r3, r2
 800190a:	08d9      	lsrs	r1, r3, #3
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d104      	bne.n	8001926 <task10ms+0x2e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800191c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001920:	4816      	ldr	r0, [pc, #88]	@ (800197c <task10ms+0x84>)
 8001922:	f002 fdd8 	bl	80044d6 <HAL_GPIO_TogglePin>
//		UP_sendInfo(ADCVALUES,(uint8_t*)&buffaux, 17);
//
//		SSD1306_Task();
//		SSD1306_RefreshReady();
	}
	if(ticker%100==0){
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <task10ms+0x7c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4a15      	ldr	r2, [pc, #84]	@ (8001980 <task10ms+0x88>)
 800192c:	fba2 1203 	umull	r1, r2, r2, r3
 8001930:	0952      	lsrs	r2, r2, #5
 8001932:	2164      	movs	r1, #100	@ 0x64
 8001934:	fb01 f202 	mul.w	r2, r1, r2
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <task10ms+0x5c>

		UP_sendInfo(TEXT, datosComSerie.auxBuffer, strlen((char*)datosComSerie.auxBuffer));
 8001940:	4810      	ldr	r0, [pc, #64]	@ (8001984 <task10ms+0x8c>)
 8001942:	f7fe fc9d 	bl	8000280 <strlen>
 8001946:	4603      	mov	r3, r0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	490d      	ldr	r1, [pc, #52]	@ (8001984 <task10ms+0x8c>)
 800194e:	20f2      	movs	r0, #242	@ 0xf2
 8001950:	f7ff fc4c 	bl	80011ec <UP_sendInfo>
	}
	if(ticker>250){
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <task10ms+0x7c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2bfa      	cmp	r3, #250	@ 0xfa
 800195a:	d902      	bls.n	8001962 <task10ms+0x6a>
//		if(!SISINIT){
//			SSD1306_Clear();
//		}
//		SISINIT=TRUE;
		ticker=0;
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <task10ms+0x7c>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <task10ms+0x7c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b02      	ldr	r3, [pc, #8]	@ (8001974 <task10ms+0x7c>)
 800196c:	701a      	strb	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200009dc 	.word	0x200009dc
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	40020800 	.word	0x40020800
 8001980:	51eb851f 	.word	0x51eb851f
 8001984:	2000074e 	.word	0x2000074e

08001988 <Engines_task>:

void Engines_task(){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	en_HandlerENG(&motorR, ret_eng_Values(0), 0);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fed9 	bl	8001744 <ret_eng_Values>
 8001992:	4603      	mov	r3, r0
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	484e      	ldr	r0, [pc, #312]	@ (8001ad4 <Engines_task+0x14c>)
 800199a:	f7ff ff12 	bl	80017c2 <en_HandlerENG>
	en_HandlerENG(&motorL, ret_eng_Values(1), 0);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fed0 	bl	8001744 <ret_eng_Values>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2200      	movs	r2, #0
 80019a8:	4619      	mov	r1, r3
 80019aa:	484b      	ldr	r0, [pc, #300]	@ (8001ad8 <Engines_task+0x150>)
 80019ac:	f7ff ff09 	bl	80017c2 <en_HandlerENG>

	switch(motorL.estado){
 80019b0:	4b49      	ldr	r3, [pc, #292]	@ (8001ad8 <Engines_task+0x150>)
 80019b2:	789b      	ldrb	r3, [r3, #2]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d83b      	bhi.n	8001a30 <Engines_task+0xa8>
 80019b8:	a201      	add	r2, pc, #4	@ (adr r2, 80019c0 <Engines_task+0x38>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019e9 	.word	0x080019e9
 80019c4:	08001a01 	.word	0x08001a01
 80019c8:	08001a19 	.word	0x08001a19
 80019cc:	080019d1 	.word	0x080019d1
		case BRAKE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2108      	movs	r1, #8
 80019d4:	4841      	ldr	r0, [pc, #260]	@ (8001adc <Engines_task+0x154>)
 80019d6:	f002 fd65 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e0:	483f      	ldr	r0, [pc, #252]	@ (8001ae0 <Engines_task+0x158>)
 80019e2:	f002 fd5f 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 80019e6:	e024      	b.n	8001a32 <Engines_task+0xaa>

		case FRONT:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2108      	movs	r1, #8
 80019ec:	483b      	ldr	r0, [pc, #236]	@ (8001adc <Engines_task+0x154>)
 80019ee:	f002 fd59 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f8:	4839      	ldr	r0, [pc, #228]	@ (8001ae0 <Engines_task+0x158>)
 80019fa:	f002 fd53 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 80019fe:	e018      	b.n	8001a32 <Engines_task+0xaa>

		case BACK:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2108      	movs	r1, #8
 8001a04:	4835      	ldr	r0, [pc, #212]	@ (8001adc <Engines_task+0x154>)
 8001a06:	f002 fd4d 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a10:	4833      	ldr	r0, [pc, #204]	@ (8001ae0 <Engines_task+0x158>)
 8001a12:	f002 fd47 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 8001a16:	e00c      	b.n	8001a32 <Engines_task+0xaa>

		case FREE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	482f      	ldr	r0, [pc, #188]	@ (8001adc <Engines_task+0x154>)
 8001a1e:	f002 fd41 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a28:	482d      	ldr	r0, [pc, #180]	@ (8001ae0 <Engines_task+0x158>)
 8001a2a:	f002 fd3b 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 8001a2e:	e000      	b.n	8001a32 <Engines_task+0xaa>
		default:
			break;
 8001a30:	bf00      	nop
	}
	switch(motorR.estado){
 8001a32:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <Engines_task+0x14c>)
 8001a34:	789b      	ldrb	r3, [r3, #2]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d83e      	bhi.n	8001ab8 <Engines_task+0x130>
 8001a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a40 <Engines_task+0xb8>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a6b 	.word	0x08001a6b
 8001a44:	08001a85 	.word	0x08001a85
 8001a48:	08001a9f 	.word	0x08001a9f
 8001a4c:	08001a51 	.word	0x08001a51
		case BRAKE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a56:	4822      	ldr	r0, [pc, #136]	@ (8001ae0 <Engines_task+0x158>)
 8001a58:	f002 fd24 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a62:	481f      	ldr	r0, [pc, #124]	@ (8001ae0 <Engines_task+0x158>)
 8001a64:	f002 fd1e 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 8001a68:	e027      	b.n	8001aba <Engines_task+0x132>

		case FRONT:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a70:	481b      	ldr	r0, [pc, #108]	@ (8001ae0 <Engines_task+0x158>)
 8001a72:	f002 fd17 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a7c:	4818      	ldr	r0, [pc, #96]	@ (8001ae0 <Engines_task+0x158>)
 8001a7e:	f002 fd11 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 8001a82:	e01a      	b.n	8001aba <Engines_task+0x132>

		case BACK:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a8a:	4815      	ldr	r0, [pc, #84]	@ (8001ae0 <Engines_task+0x158>)
 8001a8c:	f002 fd0a 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a96:	4812      	ldr	r0, [pc, #72]	@ (8001ae0 <Engines_task+0x158>)
 8001a98:	f002 fd04 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 8001a9c:	e00d      	b.n	8001aba <Engines_task+0x132>

		case FREE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aa4:	480e      	ldr	r0, [pc, #56]	@ (8001ae0 <Engines_task+0x158>)
 8001aa6:	f002 fcfd 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <Engines_task+0x158>)
 8001ab2:	f002 fcf7 	bl	80044a4 <HAL_GPIO_WritePin>
			break;
 8001ab6:	e000      	b.n	8001aba <Engines_task+0x132>
		default:
			break;
 8001ab8:	bf00      	nop
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motorL.speed);
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <Engines_task+0x150>)
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <Engines_task+0x15c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motorR.speed);
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <Engines_task+0x14c>)
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <Engines_task+0x15c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000085c 	.word	0x2000085c
 8001ad8:	20000854 	.word	0x20000854
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	200005d4 	.word	0x200005d4

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aec:	f001 f87e 	bl	8002bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af0:	f000 f872 	bl	8001bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af4:	f000 fb26 	bl	8002144 <MX_GPIO_Init>
  MX_DMA_Init();
 8001af8:	f000 fae6 	bl	80020c8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001afc:	f00b fc7a 	bl	800d3f4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001b00:	f000 f9b4 	bl	8001e6c <MX_TIM3_Init>
  MX_TIM11_Init();
 8001b04:	f000 fa92 	bl	800202c <MX_TIM11_Init>
  MX_ADC1_Init();
 8001b08:	f000 f8ce 	bl	8001ca8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b0c:	f000 f980 	bl	8001e10 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001b10:	f000 fa68 	bl	8001fe4 <MX_TIM10_Init>
  MX_TIM9_Init();
 8001b14:	f000 fa2c 	bl	8001f70 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8001b18:	f000 faac 	bl	8002074 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001b1c:	4823      	ldr	r0, [pc, #140]	@ (8001bac <main+0xc4>)
 8001b1e:	f006 fa41 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001b22:	4823      	ldr	r0, [pc, #140]	@ (8001bb0 <main+0xc8>)
 8001b24:	f006 fa3e 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001b28:	4822      	ldr	r0, [pc, #136]	@ (8001bb4 <main+0xcc>)
 8001b2a:	f006 fa3b 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001b2e:	4822      	ldr	r0, [pc, #136]	@ (8001bb8 <main+0xd0>)
 8001b30:	f006 fa38 	bl	8007fa4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b34:	2104      	movs	r1, #4
 8001b36:	481d      	ldr	r0, [pc, #116]	@ (8001bac <main+0xc4>)
 8001b38:	f006 faf0 	bl	800811c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	481b      	ldr	r0, [pc, #108]	@ (8001bac <main+0xc4>)
 8001b40:	f006 faec 	bl	800811c <HAL_TIM_PWM_Start>
//  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
//  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
//  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
//  SSD1306_Init();
//  MPU6050_Init(&mpuValues);
  CDC_AttachRxData(&UP_datafromUSB);
 8001b44:	481d      	ldr	r0, [pc, #116]	@ (8001bbc <main+0xd4>)
 8001b46:	f00b fda9 	bl	800d69c <CDC_AttachRxData>
  myFlags.allFlags=0;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <main+0xd8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8001b50:	2100      	movs	r1, #0
 8001b52:	481c      	ldr	r0, [pc, #112]	@ (8001bc4 <main+0xdc>)
 8001b54:	f7ff fb2a 	bl	80011ac <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <main+0xc4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	4819      	ldr	r0, [pc, #100]	@ (8001bc8 <main+0xe0>)
 8001b64:	f7ff fe18 	bl	8001798 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <main+0xc4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	4816      	ldr	r0, [pc, #88]	@ (8001bcc <main+0xe4>)
 8001b74:	f7ff fe10 	bl	8001798 <en_InitENG>
  UP_attachData(&Get_ADCValues);
 8001b78:	4815      	ldr	r0, [pc, #84]	@ (8001bd0 <main+0xe8>)
 8001b7a:	f7ff fdfd 	bl	8001778 <UP_attachData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <main+0xd8>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <main+0xb6>
		 task10ms();
 8001b8c:	f7ff feb4 	bl	80018f8 <task10ms>
		 IS10MS=FALSE;
 8001b90:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <main+0xd8>)
 8001b92:	7813      	ldrb	r3, [r2, #0]
 8001b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b98:	7013      	strb	r3, [r2, #0]
		 Engines_task();
 8001b9a:	f7ff fef5 	bl	8001988 <Engines_task>
	  }
//	MPU6050_MAF(&mpuValues);
	UP_comunicationsTask(&datosComSerie);
 8001b9e:	4809      	ldr	r0, [pc, #36]	@ (8001bc4 <main+0xdc>)
 8001ba0:	f000 fb5c 	bl	800225c <UP_comunicationsTask>
	ADC_Filter(&adcValues);
 8001ba4:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <main+0xec>)
 8001ba6:	f7ff fa43 	bl	8001030 <ADC_Filter>
	  if(IS10MS){
 8001baa:	e7e8      	b.n	8001b7e <main+0x96>
 8001bac:	200005d4 	.word	0x200005d4
 8001bb0:	200006ac 	.word	0x200006ac
 8001bb4:	20000664 	.word	0x20000664
 8001bb8:	2000061c 	.word	0x2000061c
 8001bbc:	080016e9 	.word	0x080016e9
 8001bc0:	20000850 	.word	0x20000850
 8001bc4:	2000073c 	.word	0x2000073c
 8001bc8:	20000854 	.word	0x20000854
 8001bcc:	2000085c 	.word	0x2000085c
 8001bd0:	080022f1 	.word	0x080022f1
 8001bd4:	20000868 	.word	0x20000868

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	@ 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	@ 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00d f9c3 	bl	800ef72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <SystemClock_Config+0xc8>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <SystemClock_Config+0xc8>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <SystemClock_Config+0xc8>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c48:	2319      	movs	r3, #25
 8001c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c4c:	23c0      	movs	r3, #192	@ 0xc0
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c54:	2304      	movs	r3, #4
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fcf9 	bl	8007654 <HAL_RCC_OscConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c68:	f000 fb78 	bl	800235c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2103      	movs	r1, #3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 ff5b 	bl	8007b44 <HAL_RCC_ClockConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c94:	f000 fb62 	bl	800235c <Error_Handler>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3750      	adds	r7, #80	@ 0x50
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cae:	463b      	mov	r3, r7
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cba:	4b52      	ldr	r3, [pc, #328]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cbc:	4a52      	ldr	r2, [pc, #328]	@ (8001e08 <MX_ADC1_Init+0x160>)
 8001cbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cc0:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001cce:	4b4d      	ldr	r3, [pc, #308]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cda:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ce2:	4b48      	ldr	r3, [pc, #288]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ce8:	4b46      	ldr	r3, [pc, #280]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cea:	4a48      	ldr	r2, [pc, #288]	@ (8001e0c <MX_ADC1_Init+0x164>)
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cee:	4b45      	ldr	r3, [pc, #276]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001cf4:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cfa:	4b42      	ldr	r3, [pc, #264]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d02:	4b40      	ldr	r3, [pc, #256]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d08:	483e      	ldr	r0, [pc, #248]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001d0a:	f001 f805 	bl	8002d18 <HAL_ADC_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d14:	f000 fb22 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001d20:	2303      	movs	r3, #3
 8001d22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d24:	463b      	mov	r3, r7
 8001d26:	4619      	mov	r1, r3
 8001d28:	4836      	ldr	r0, [pc, #216]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001d2a:	f001 fa5b 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d34:	f000 fb12 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	482f      	ldr	r0, [pc, #188]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001d46:	f001 fa4d 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d50:	f000 fb04 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d54:	2303      	movs	r3, #3
 8001d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4828      	ldr	r0, [pc, #160]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001d62:	f001 fa3f 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001d6c:	f000 faf6 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d70:	2304      	movs	r3, #4
 8001d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d74:	2304      	movs	r3, #4
 8001d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4821      	ldr	r0, [pc, #132]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001d7e:	f001 fa31 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001d88:	f000 fae8 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001d90:	2305      	movs	r3, #5
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	481a      	ldr	r0, [pc, #104]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001d9a:	f001 fa23 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001da4:	f000 fada 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001da8:	2306      	movs	r3, #6
 8001daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001dac:	2306      	movs	r3, #6
 8001dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001db6:	f001 fa15 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001dc0:	f000 facc 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001dc8:	2307      	movs	r3, #7
 8001dca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001dd2:	f001 fa07 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001ddc:	f000 fabe 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001de0:	2308      	movs	r3, #8
 8001de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001de4:	2308      	movs	r3, #8
 8001de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_ADC1_Init+0x15c>)
 8001dee:	f001 f9f9 	bl	80031e4 <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001df8:	f000 fab0 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000418 	.word	0x20000418
 8001e08:	40012000 	.word	0x40012000
 8001e0c:	0f000001 	.word	0x0f000001

08001e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e16:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <MX_I2C1_Init+0x54>)
 8001e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e1c:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <MX_I2C1_Init+0x58>)
 8001e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e4e:	f002 fb5d 	bl	800450c <HAL_I2C_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e58:	f000 fa80 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200004c0 	.word	0x200004c0
 8001e64:	40005400 	.word	0x40005400
 8001e68:	00061a80 	.word	0x00061a80

08001e6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08e      	sub	sp, #56	@ 0x38
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
 8001e98:	615a      	str	r2, [r3, #20]
 8001e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001e9e:	4a33      	ldr	r2, [pc, #204]	@ (8001f6c <MX_TIM3_Init+0x100>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001ea2:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001eae:	4b2e      	ldr	r3, [pc, #184]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001eb0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001eb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ec2:	4829      	ldr	r0, [pc, #164]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001ec4:	f006 f81e 	bl	8007f04 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ece:	f000 fa45 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ed8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4822      	ldr	r0, [pc, #136]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001ee0:	f006 fb7e 	bl	80085e0 <HAL_TIM_ConfigClockSource>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eea:	f000 fa37 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001eee:	481e      	ldr	r0, [pc, #120]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001ef0:	f006 f8ba 	bl	8008068 <HAL_TIM_PWM_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001efa:	f000 fa2f 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4816      	ldr	r0, [pc, #88]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001f0e:	f006 ff29 	bl	8008d64 <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f18:	f000 fa20 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f1c:	2360      	movs	r3, #96	@ 0x60
 8001f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001f34:	f006 fa92 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f3e:	f000 fa0d 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2204      	movs	r2, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4807      	ldr	r0, [pc, #28]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001f4a:	f006 fa87 	bl	800845c <HAL_TIM_PWM_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001f54:	f000 fa02 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f58:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <MX_TIM3_Init+0xfc>)
 8001f5a:	f000 fc0b 	bl	8002774 <HAL_TIM_MspPostInit>

}
 8001f5e:	bf00      	nop
 8001f60:	3738      	adds	r7, #56	@ 0x38
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200005d4 	.word	0x200005d4
 8001f6c:	40000400 	.word	0x40000400

08001f70 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f76:	463b      	mov	r3, r7
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f82:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001f84:	4a16      	ldr	r2, [pc, #88]	@ (8001fe0 <MX_TIM9_Init+0x70>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001f88:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 23999;
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001f96:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001f9a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001faa:	f005 ffab 	bl	8007f04 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001fb4:	f000 f9d2 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fbc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_TIM9_Init+0x6c>)
 8001fc4:	f006 fb0c 	bl	80085e0 <HAL_TIM_ConfigClockSource>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001fce:	f000 f9c5 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000061c 	.word	0x2000061c
 8001fe0:	40014000 	.word	0x40014000

08001fe4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <MX_TIM10_Init+0x40>)
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <MX_TIM10_Init+0x44>)
 8001fec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 47;
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <MX_TIM10_Init+0x40>)
 8001ff0:	222f      	movs	r2, #47	@ 0x2f
 8001ff2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <MX_TIM10_Init+0x40>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <MX_TIM10_Init+0x40>)
 8001ffc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002000:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <MX_TIM10_Init+0x40>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <MX_TIM10_Init+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_TIM10_Init+0x40>)
 8002010:	f005 ff78 	bl	8007f04 <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800201a:	f000 f99f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000664 	.word	0x20000664
 8002028:	40014400 	.word	0x40014400

0800202c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002030:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <MX_TIM11_Init+0x40>)
 8002032:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <MX_TIM11_Init+0x44>)
 8002034:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8002036:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <MX_TIM11_Init+0x40>)
 8002038:	225f      	movs	r2, #95	@ 0x5f
 800203a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <MX_TIM11_Init+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <MX_TIM11_Init+0x40>)
 8002044:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002048:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204a:	4b08      	ldr	r3, [pc, #32]	@ (800206c <MX_TIM11_Init+0x40>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <MX_TIM11_Init+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	@ (800206c <MX_TIM11_Init+0x40>)
 8002058:	f005 ff54 	bl	8007f04 <HAL_TIM_Base_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002062:	f000 f97b 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200006ac 	.word	0x200006ac
 8002070:	40014800 	.word	0x40014800

08002074 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <MX_USART1_UART_Init+0x50>)
 800207c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <MX_USART1_UART_Init+0x4c>)
 80020ac:	f006 fedc 	bl	8008e68 <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020b6:	f000 f951 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200006f4 	.word	0x200006f4
 80020c4:	40011000 	.word	0x40011000

080020c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <MX_DMA_Init+0x78>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002140 <MX_DMA_Init+0x78>)
 80020d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <MX_DMA_Init+0x78>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <MX_DMA_Init+0x78>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a13      	ldr	r2, [pc, #76]	@ (8002140 <MX_DMA_Init+0x78>)
 80020f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <MX_DMA_Init+0x78>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	200b      	movs	r0, #11
 800210c:	f001 fbff 	bl	800390e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002110:	200b      	movs	r0, #11
 8002112:	f001 fc18 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	200c      	movs	r0, #12
 800211c:	f001 fbf7 	bl	800390e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002120:	200c      	movs	r0, #12
 8002122:	f001 fc10 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2038      	movs	r0, #56	@ 0x38
 800212c:	f001 fbef 	bl	800390e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002130:	2038      	movs	r0, #56	@ 0x38
 8002132:	f001 fc08 	bl	8003946 <HAL_NVIC_EnableIRQ>

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <MX_GPIO_Init+0x108>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a3a      	ldr	r2, [pc, #232]	@ (800224c <MX_GPIO_Init+0x108>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b38      	ldr	r3, [pc, #224]	@ (800224c <MX_GPIO_Init+0x108>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b34      	ldr	r3, [pc, #208]	@ (800224c <MX_GPIO_Init+0x108>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a33      	ldr	r2, [pc, #204]	@ (800224c <MX_GPIO_Init+0x108>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b31      	ldr	r3, [pc, #196]	@ (800224c <MX_GPIO_Init+0x108>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <MX_GPIO_Init+0x108>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a2c      	ldr	r2, [pc, #176]	@ (800224c <MX_GPIO_Init+0x108>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <MX_GPIO_Init+0x108>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b26      	ldr	r3, [pc, #152]	@ (800224c <MX_GPIO_Init+0x108>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a25      	ldr	r2, [pc, #148]	@ (800224c <MX_GPIO_Init+0x108>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b23      	ldr	r3, [pc, #140]	@ (800224c <MX_GPIO_Init+0x108>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021d0:	481f      	ldr	r0, [pc, #124]	@ (8002250 <MX_GPIO_Init+0x10c>)
 80021d2:	f002 f967 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_EN_Pin|Out1_1_Pin, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	210c      	movs	r1, #12
 80021da:	481e      	ldr	r0, [pc, #120]	@ (8002254 <MX_GPIO_Init+0x110>)
 80021dc:	f002 f962 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80021e6:	481c      	ldr	r0, [pc, #112]	@ (8002258 <MX_GPIO_Init+0x114>)
 80021e8:	f002 f95c 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4812      	ldr	r0, [pc, #72]	@ (8002250 <MX_GPIO_Init+0x10c>)
 8002206:	f001 ffc9 	bl	800419c <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin Out1_1_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|Out1_1_Pin;
 800220a:	230c      	movs	r3, #12
 800220c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	480c      	ldr	r0, [pc, #48]	@ (8002254 <MX_GPIO_Init+0x110>)
 8002222:	f001 ffbb 	bl	800419c <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 8002226:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 800222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4806      	ldr	r0, [pc, #24]	@ (8002258 <MX_GPIO_Init+0x114>)
 8002240:	f001 ffac 	bl	800419c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	@ 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40020800 	.word	0x40020800
 8002254:	40020400 	.word	0x40020400
 8002258:	40020000 	.word	0x40020000

0800225c <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	791a      	ldrb	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	78db      	ldrb	r3, [r3, #3]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	d007      	beq.n	8002282 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff f87c 	bl	8001370 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	78db      	ldrb	r3, [r3, #3]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	799a      	ldrb	r2, [r3, #6]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	795b      	ldrb	r3, [r3, #5]
 800228a:	429a      	cmp	r2, r3
 800228c:	d02b      	beq.n	80022e6 <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	795a      	ldrb	r2, [r3, #5]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	799b      	ldrb	r3, [r3, #6]
 8002296:	429a      	cmp	r2, r3
 8002298:	d908      	bls.n	80022ac <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	795a      	ldrb	r2, [r3, #5]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	799b      	ldrb	r3, [r3, #6]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	741a      	strb	r2, [r3, #16]
 80022aa:	e006      	b.n	80022ba <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	799b      	ldrb	r3, [r3, #6]
 80022b0:	f1c3 0304 	rsb	r3, r3, #4
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	7992      	ldrb	r2, [r2, #6]
 80022c2:	441a      	add	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7c1b      	ldrb	r3, [r3, #16]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f00b f9ae 	bl	800d62c <CDC_Transmit_FS>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	799a      	ldrb	r2, [r3, #6]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7c1b      	ldrb	r3, [r3, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <Get_ADCValues>:
	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
	return 1;

}

void Get_ADCValues(uint8_t *buf){
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

	uint8_t j=0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0;i<7;i++){
 80022fc:	2300      	movs	r3, #0
 80022fe:	73bb      	strb	r3, [r7, #14]
 8002300:	e01e      	b.n	8002340 <Get_ADCValues+0x50>
		casts1.i16[0]=adcValues.filteredData[i];
 8002302:	7bbb      	ldrb	r3, [r7, #14]
 8002304:	4a13      	ldr	r2, [pc, #76]	@ (8002354 <Get_ADCValues+0x64>)
 8002306:	3308      	adds	r3, #8
 8002308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800230c:	b21a      	sxth	r2, r3
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <Get_ADCValues+0x68>)
 8002310:	801a      	strh	r2, [r3, #0]
		buf[j*2]=casts1.u8[0];
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	461a      	mov	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	4a0e      	ldr	r2, [pc, #56]	@ (8002358 <Get_ADCValues+0x68>)
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	701a      	strb	r2, [r3, #0]
		buf[1+j*2]=casts1.u8[1];
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	3301      	adds	r3, #1
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <Get_ADCValues+0x68>)
 8002330:	7852      	ldrb	r2, [r2, #1]
 8002332:	701a      	strb	r2, [r3, #0]
		j++;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3301      	adds	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<7;i++){
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	3301      	adds	r3, #1
 800233e:	73bb      	strb	r3, [r7, #14]
 8002340:	7bbb      	ldrb	r3, [r7, #14]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d9dd      	bls.n	8002302 <Get_ADCValues+0x12>
	}

}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20000868 	.word	0x20000868
 8002358:	20000864 	.word	0x20000864

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <Error_Handler+0x8>

08002368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <HAL_MspInit+0x58>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <HAL_MspInit+0x58>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237c:	6453      	str	r3, [r2, #68]	@ 0x44
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_MspInit+0x58>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <HAL_MspInit+0x58>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <HAL_MspInit+0x58>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	6413      	str	r3, [r2, #64]	@ 0x40
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_MspInit+0x58>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2051      	movs	r0, #81	@ 0x51
 80023ac:	f001 faaf 	bl	800390e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80023b0:	2051      	movs	r0, #81	@ 0x51
 80023b2:	f001 fac8 	bl	8003946 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a3f      	ldr	r2, [pc, #252]	@ (80024e0 <HAL_ADC_MspInit+0x11c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d178      	bne.n	80024d8 <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	4a3d      	ldr	r2, [pc, #244]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f6:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a36      	ldr	r2, [pc, #216]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a2f      	ldr	r2, [pc, #188]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <HAL_ADC_MspInit+0x120>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800243a:	23fe      	movs	r3, #254	@ 0xfe
 800243c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243e:	2303      	movs	r3, #3
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4826      	ldr	r0, [pc, #152]	@ (80024e8 <HAL_ADC_MspInit+0x124>)
 800244e:	f001 fea5 	bl	800419c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002452:	2301      	movs	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002456:	2303      	movs	r3, #3
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4821      	ldr	r0, [pc, #132]	@ (80024ec <HAL_ADC_MspInit+0x128>)
 8002466:	f001 fe99 	bl	800419c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800246a:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 800246c:	4a21      	ldr	r2, [pc, #132]	@ (80024f4 <HAL_ADC_MspInit+0x130>)
 800246e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002470:	4b1f      	ldr	r3, [pc, #124]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002476:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800247c:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 8002484:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002488:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 800248c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002490:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 8002494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002498:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024ac:	4810      	ldr	r0, [pc, #64]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 80024ae:	f001 fa65 	bl	800397c <HAL_DMA_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80024b8:	f7ff ff50 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a0c      	ldr	r2, [pc, #48]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 80024c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80024c2:	4a0b      	ldr	r2, [pc, #44]	@ (80024f0 <HAL_ADC_MspInit+0x12c>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2100      	movs	r1, #0
 80024cc:	2012      	movs	r0, #18
 80024ce:	f001 fa1e 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024d2:	2012      	movs	r0, #18
 80024d4:	f001 fa37 	bl	8003946 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	@ 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40012000 	.word	0x40012000
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020400 	.word	0x40020400
 80024f0:	20000460 	.word	0x20000460
 80024f4:	40026410 	.word	0x40026410

080024f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a4f      	ldr	r2, [pc, #316]	@ (8002654 <HAL_I2C_MspInit+0x15c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f040 8098 	bne.w	800264c <HAL_I2C_MspInit+0x154>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	4b4d      	ldr	r3, [pc, #308]	@ (8002658 <HAL_I2C_MspInit+0x160>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	4a4c      	ldr	r2, [pc, #304]	@ (8002658 <HAL_I2C_MspInit+0x160>)
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	6313      	str	r3, [r2, #48]	@ 0x30
 800252c:	4b4a      	ldr	r3, [pc, #296]	@ (8002658 <HAL_I2C_MspInit+0x160>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002538:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254a:	2304      	movs	r3, #4
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	4841      	ldr	r0, [pc, #260]	@ (800265c <HAL_I2C_MspInit+0x164>)
 8002556:	f001 fe21 	bl	800419c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <HAL_I2C_MspInit+0x160>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a3d      	ldr	r2, [pc, #244]	@ (8002658 <HAL_I2C_MspInit+0x160>)
 8002564:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HAL_I2C_MspInit+0x160>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002576:	4b3a      	ldr	r3, [pc, #232]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 8002578:	4a3a      	ldr	r2, [pc, #232]	@ (8002664 <HAL_I2C_MspInit+0x16c>)
 800257a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800257c:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002582:	4b37      	ldr	r3, [pc, #220]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 8002584:	2240      	movs	r2, #64	@ 0x40
 8002586:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002588:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800258e:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 8002590:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002594:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002596:	4b32      	ldr	r3, [pc, #200]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259c:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80025a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80025b4:	482a      	ldr	r0, [pc, #168]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 80025b6:	f001 f9e1 	bl	800397c <HAL_DMA_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80025c0:	f7ff fecc 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a26      	ldr	r2, [pc, #152]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025ca:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <HAL_I2C_MspInit+0x168>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80025d0:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 80025d2:	4a26      	ldr	r2, [pc, #152]	@ (800266c <HAL_I2C_MspInit+0x174>)
 80025d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 80025d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025de:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e4:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 80025ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 8002600:	2200      	movs	r2, #0
 8002602:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 8002606:	2200      	movs	r2, #0
 8002608:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800260a:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 800260c:	2200      	movs	r2, #0
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002610:	4815      	ldr	r0, [pc, #84]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 8002612:	f001 f9b3 	bl	800397c <HAL_DMA_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 800261c:	f7ff fe9e 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 8002624:	639a      	str	r2, [r3, #56]	@ 0x38
 8002626:	4a10      	ldr	r2, [pc, #64]	@ (8002668 <HAL_I2C_MspInit+0x170>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	201f      	movs	r0, #31
 8002632:	f001 f96c 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002636:	201f      	movs	r0, #31
 8002638:	f001 f985 	bl	8003946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2020      	movs	r0, #32
 8002642:	f001 f964 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002646:	2020      	movs	r0, #32
 8002648:	f001 f97d 	bl	8003946 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800264c:	bf00      	nop
 800264e:	3728      	adds	r7, #40	@ 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40005400 	.word	0x40005400
 8002658:	40023800 	.word	0x40023800
 800265c:	40020400 	.word	0x40020400
 8002660:	20000514 	.word	0x20000514
 8002664:	40026028 	.word	0x40026028
 8002668:	20000574 	.word	0x20000574
 800266c:	40026010 	.word	0x40026010

08002670 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a38      	ldr	r2, [pc, #224]	@ (8002760 <HAL_TIM_Base_MspInit+0xf0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d116      	bne.n	80026b0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	4b37      	ldr	r3, [pc, #220]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	4a36      	ldr	r2, [pc, #216]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	6413      	str	r3, [r2, #64]	@ 0x40
 8002692:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	201d      	movs	r0, #29
 80026a4:	f001 f933 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026a8:	201d      	movs	r0, #29
 80026aa:	f001 f94c 	bl	8003946 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 80026ae:	e052      	b.n	8002756 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002768 <HAL_TIM_Base_MspInit+0xf8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d116      	bne.n	80026e8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b29      	ldr	r3, [pc, #164]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a28      	ldr	r2, [pc, #160]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b26      	ldr	r3, [pc, #152]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2018      	movs	r0, #24
 80026dc:	f001 f917 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026e0:	2018      	movs	r0, #24
 80026e2:	f001 f930 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 80026e6:	e036      	b.n	8002756 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1f      	ldr	r2, [pc, #124]	@ (800276c <HAL_TIM_Base_MspInit+0xfc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d116      	bne.n	8002720 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002700:	6453      	str	r3, [r2, #68]	@ 0x44
 8002702:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	2019      	movs	r0, #25
 8002714:	f001 f8fb 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002718:	2019      	movs	r0, #25
 800271a:	f001 f914 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 800271e:	e01a      	b.n	8002756 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a12      	ldr	r2, [pc, #72]	@ (8002770 <HAL_TIM_Base_MspInit+0x100>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d115      	bne.n	8002756 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002738:	6453      	str	r3, [r2, #68]	@ 0x44
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_TIM_Base_MspInit+0xf4>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	201a      	movs	r0, #26
 800274c:	f001 f8df 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002750:	201a      	movs	r0, #26
 8002752:	f001 f8f8 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40000400 	.word	0x40000400
 8002764:	40023800 	.word	0x40023800
 8002768:	40014000 	.word	0x40014000
 800276c:	40014400 	.word	0x40014400
 8002770:	40014800 	.word	0x40014800

08002774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <HAL_TIM_MspPostInit+0x68>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d11d      	bne.n	80027d2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <HAL_TIM_MspPostInit+0x6c>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <HAL_TIM_MspPostInit+0x6c>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_TIM_MspPostInit+0x6c>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 80027b2:	2330      	movs	r3, #48	@ 0x30
 80027b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027c2:	2302      	movs	r3, #2
 80027c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <HAL_TIM_MspPostInit+0x70>)
 80027ce:	f001 fce5 	bl	800419c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020400 	.word	0x40020400

080027e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_UART_MspInit+0x94>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d133      	bne.n	8002872 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_UART_MspInit+0x98>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	4a1b      	ldr	r2, [pc, #108]	@ (8002880 <HAL_UART_MspInit+0x98>)
 8002814:	f043 0310 	orr.w	r3, r3, #16
 8002818:	6453      	str	r3, [r2, #68]	@ 0x44
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_UART_MspInit+0x98>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <HAL_UART_MspInit+0x98>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	4a14      	ldr	r2, [pc, #80]	@ (8002880 <HAL_UART_MspInit+0x98>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6313      	str	r3, [r2, #48]	@ 0x30
 8002836:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <HAL_UART_MspInit+0x98>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002842:	23c0      	movs	r3, #192	@ 0xc0
 8002844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002852:	2307      	movs	r3, #7
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	4809      	ldr	r0, [pc, #36]	@ (8002884 <HAL_UART_MspInit+0x9c>)
 800285e:	f001 fc9d 	bl	800419c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	2025      	movs	r0, #37	@ 0x25
 8002868:	f001 f851 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800286c:	2025      	movs	r0, #37	@ 0x25
 800286e:	f001 f86a 	bl	8003946 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002872:	bf00      	nop
 8002874:	3728      	adds	r7, #40	@ 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40011000 	.word	0x40011000
 8002880:	40023800 	.word	0x40023800
 8002884:	40020400 	.word	0x40020400

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <NMI_Handler+0x4>

08002890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <HardFault_Handler+0x4>

08002898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <MemManage_Handler+0x4>

080028a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <BusFault_Handler+0x4>

080028a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <UsageFault_Handler+0x4>

080028b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028de:	f000 f9d7 	bl	8002c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <DMA1_Stream0_IRQHandler+0x10>)
 80028ee:	f001 f9dd 	bl	8003cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000574 	.word	0x20000574

080028fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <DMA1_Stream1_IRQHandler+0x10>)
 8002902:	f001 f9d3 	bl	8003cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000514 	.word	0x20000514

08002910 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <ADC_IRQHandler+0x10>)
 8002916:	f000 fa42 	bl	8002d9e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000418 	.word	0x20000418

08002924 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800292a:	f005 fca7 	bl	800827c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000061c 	.word	0x2000061c

08002938 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800293e:	f005 fc9d 	bl	800827c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000664 	.word	0x20000664

0800294c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002952:	f005 fc93 	bl	800827c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200006ac 	.word	0x200006ac

08002960 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <TIM3_IRQHandler+0x10>)
 8002966:	f005 fc89 	bl	800827c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200005d4 	.word	0x200005d4

08002974 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <I2C1_EV_IRQHandler+0x10>)
 800297a:	f001 ff20 	bl	80047be <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200004c0 	.word	0x200004c0

08002988 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <I2C1_ER_IRQHandler+0x10>)
 800298e:	f002 f887 	bl	8004aa0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200004c0 	.word	0x200004c0

0800299c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029a0:	4802      	ldr	r0, [pc, #8]	@ (80029ac <USART1_IRQHandler+0x10>)
 80029a2:	f006 fad7 	bl	8008f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200006f4 	.word	0x200006f4

080029b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <DMA2_Stream0_IRQHandler+0x10>)
 80029b6:	f001 f979 	bl	8003cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000460 	.word	0x20000460

080029c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <OTG_FS_IRQHandler+0x10>)
 80029ca:	f003 fd34 	bl	8006436 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200012cc 	.word	0x200012cc

080029d8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  return 1;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_kill>:

int _kill(int pid, int sig)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a00:	f00c fb1a 	bl	800f038 <__errno>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2216      	movs	r2, #22
 8002a08:	601a      	str	r2, [r3, #0]
  return -1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_exit>:

void _exit (int status)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffe7 	bl	80029f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <_exit+0x12>

08002a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e00a      	b.n	8002a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a3e:	f3af 8000 	nop.w
 8002a42:	4601      	mov	r1, r0
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	60ba      	str	r2, [r7, #8]
 8002a4a:	b2ca      	uxtb	r2, r1
 8002a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	dbf0      	blt.n	8002a3e <_read+0x12>
  }

  return len;
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e009      	b.n	8002a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60ba      	str	r2, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf1      	blt.n	8002a78 <_write+0x12>
  }
  return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_close>:

int _close(int file)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_isatty>:

int _isatty(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b10:	4a14      	ldr	r2, [pc, #80]	@ (8002b64 <_sbrk+0x5c>)
 8002b12:	4b15      	ldr	r3, [pc, #84]	@ (8002b68 <_sbrk+0x60>)
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <_sbrk+0x64>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <_sbrk+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b38:	f00c fa7e 	bl	800f038 <__errno>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	220c      	movs	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	e009      	b.n	8002b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4e:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	4a05      	ldr	r2, [pc, #20]	@ (8002b6c <_sbrk+0x64>)
 8002b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20020000 	.word	0x20020000
 8002b68:	00000400 	.word	0x00000400
 8002b6c:	200009e0 	.word	0x200009e0
 8002b70:	20001b20 	.word	0x20001b20

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <SystemInit+0x20>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7e:	4a05      	ldr	r2, [pc, #20]	@ (8002b94 <SystemInit+0x20>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <Reset_Handler>:
 8002b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bd0 <LoopFillZerobss+0xe>
 8002b9c:	f7ff ffea 	bl	8002b74 <SystemInit>
 8002ba0:	480c      	ldr	r0, [pc, #48]	@ (8002bd4 <LoopFillZerobss+0x12>)
 8002ba2:	490d      	ldr	r1, [pc, #52]	@ (8002bd8 <LoopFillZerobss+0x16>)
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <LoopFillZerobss+0x1a>)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:
 8002baa:	58d4      	ldr	r4, [r2, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:
 8002bb0:	18c4      	adds	r4, r0, r3
 8002bb2:	428c      	cmp	r4, r1
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <LoopFillZerobss+0x1e>)
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002be4 <LoopFillZerobss+0x22>)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:
 8002bc2:	42a2      	cmp	r2, r4
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>
 8002bc6:	f00c fa3d 	bl	800f044 <__libc_init_array>
 8002bca:	f7fe ff8d 	bl	8001ae8 <main>
 8002bce:	4770      	bx	lr
 8002bd0:	20020000 	.word	0x20020000
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	200002cc 	.word	0x200002cc
 8002bdc:	08012a84 	.word	0x08012a84
 8002be0:	200002cc 	.word	0x200002cc
 8002be4:	20001b1c 	.word	0x20001b1c

08002be8 <DMA1_Stream2_IRQHandler>:
 8002be8:	e7fe      	b.n	8002be8 <DMA1_Stream2_IRQHandler>
	...

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c2c <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <HAL_Init+0x40>)
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <HAL_Init+0x40>)
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_Init+0x40>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c14:	2003      	movs	r0, #3
 8002c16:	f000 fe6f 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1a:	200f      	movs	r0, #15
 8002c1c:	f000 f808 	bl	8002c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c20:	f7ff fba2 	bl	8002368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023c00 	.word	0x40023c00

08002c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_InitTick+0x54>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_InitTick+0x58>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fe87 	bl	8003962 <HAL_SYSTICK_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00e      	b.n	8002c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d80a      	bhi.n	8002c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c64:	2200      	movs	r2, #0
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f000 fe4f 	bl	800390e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c70:	4a06      	ldr	r2, [pc, #24]	@ (8002c8c <HAL_InitTick+0x5c>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_IncTick+0x20>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_IncTick+0x24>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	@ (8002cb4 <HAL_IncTick+0x24>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	200009e4 	.word	0x200009e4

08002cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return uwTick;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_GetTick+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	200009e4 	.word	0x200009e4

08002cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff ffee 	bl	8002cb8 <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d005      	beq.n	8002cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <HAL_Delay+0x44>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cf6:	bf00      	nop
 8002cf8:	f7ff ffde 	bl	8002cb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d8f7      	bhi.n	8002cf8 <HAL_Delay+0x28>
  {
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000008 	.word	0x20000008

08002d18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e033      	b.n	8002d96 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fb44 	bl	80023c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d5e:	f023 0302 	bic.w	r3, r3, #2
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb6c 	bl	8003448 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d86:	e001      	b.n	8002d8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d049      	beq.n	8002e68 <HAL_ADC_IRQHandler+0xca>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d046      	beq.n	8002e68 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12b      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d127      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d119      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0220 	bic.w	r2, r2, #32
 8002e32:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe fcf7 	bl	800184c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0212 	mvn.w	r2, #18
 8002e66:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e76:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d057      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x190>
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d054      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d139      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d12b      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d124      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d119      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ef8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fc10 	bl	8003744 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 020c 	mvn.w	r2, #12
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x1d6>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d014      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10d      	bne.n	8002f74 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f929 	bl	80031bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f06f 0201 	mvn.w	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f82:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x218>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0220 	mvn.w	r2, #32
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f912 	bl	80031d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0220 	mvn.w	r2, #32
 8002fb4:	601a      	str	r2, [r3, #0]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_Start_DMA+0x22>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0d0      	b.n	8003184 <HAL_ADC_Start_DMA+0x1c4>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d018      	beq.n	800302a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003008:	4b60      	ldr	r3, [pc, #384]	@ (800318c <HAL_ADC_Start_DMA+0x1cc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a60      	ldr	r2, [pc, #384]	@ (8003190 <HAL_ADC_Start_DMA+0x1d0>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0c9a      	lsrs	r2, r3, #18
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800301c:	e002      	b.n	8003024 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	3b01      	subs	r3, #1
 8003022:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f9      	bne.n	800301e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003038:	d107      	bne.n	800304a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003048:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 8088 	bne.w	800316a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003084:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003098:	d106      	bne.n	80030a8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f023 0206 	bic.w	r2, r3, #6
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80030a6:	e002      	b.n	80030ae <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b6:	4b37      	ldr	r3, [pc, #220]	@ (8003194 <HAL_ADC_Start_DMA+0x1d4>)
 80030b8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	4a36      	ldr	r2, [pc, #216]	@ (8003198 <HAL_ADC_Start_DMA+0x1d8>)
 80030c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	4a35      	ldr	r2, [pc, #212]	@ (800319c <HAL_ADC_Start_DMA+0x1dc>)
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	4a34      	ldr	r2, [pc, #208]	@ (80031a0 <HAL_ADC_Start_DMA+0x1e0>)
 80030d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80030da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80030ea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030fa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	334c      	adds	r3, #76	@ 0x4c
 8003106:	4619      	mov	r1, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f000 fce4 	bl	8003ad8 <HAL_DMA_Start_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10f      	bne.n	8003140 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d129      	bne.n	8003182 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	e020      	b.n	8003182 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a17      	ldr	r2, [pc, #92]	@ (80031a4 <HAL_ADC_Start_DMA+0x1e4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d11b      	bne.n	8003182 <HAL_ADC_Start_DMA+0x1c2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d114      	bne.n	8003182 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	e00b      	b.n	8003182 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f043 0210 	orr.w	r2, r3, #16
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003182:	7ffb      	ldrb	r3, [r7, #31]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000000 	.word	0x20000000
 8003190:	431bde83 	.word	0x431bde83
 8003194:	40012300 	.word	0x40012300
 8003198:	08003641 	.word	0x08003641
 800319c:	080036fb 	.word	0x080036fb
 80031a0:	08003717 	.word	0x08003717
 80031a4:	40012000 	.word	0x40012000

080031a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x1c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e113      	b.n	8003428 <HAL_ADC_ConfigChannel+0x244>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d925      	bls.n	800325c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	3b1e      	subs	r3, #30
 8003226:	2207      	movs	r2, #7
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43da      	mvns	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	400a      	ands	r2, r1
 8003234:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68d9      	ldr	r1, [r3, #12]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	4618      	mov	r0, r3
 8003248:	4603      	mov	r3, r0
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4403      	add	r3, r0
 800324e:	3b1e      	subs	r3, #30
 8003250:	409a      	lsls	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	e022      	b.n	80032a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6919      	ldr	r1, [r3, #16]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	2207      	movs	r2, #7
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	400a      	ands	r2, r1
 800327e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	4618      	mov	r0, r3
 8003292:	4603      	mov	r3, r0
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4403      	add	r3, r0
 8003298:	409a      	lsls	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d824      	bhi.n	80032f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3b05      	subs	r3, #5
 80032bc:	221f      	movs	r2, #31
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	400a      	ands	r2, r1
 80032ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	3b05      	subs	r3, #5
 80032e6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80032f2:	e04c      	b.n	800338e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d824      	bhi.n	8003346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	3b23      	subs	r3, #35	@ 0x23
 800330e:	221f      	movs	r2, #31
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43da      	mvns	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	400a      	ands	r2, r1
 800331c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	4618      	mov	r0, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	3b23      	subs	r3, #35	@ 0x23
 8003338:	fa00 f203 	lsl.w	r2, r0, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
 8003344:	e023      	b.n	800338e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	3b41      	subs	r3, #65	@ 0x41
 8003358:	221f      	movs	r2, #31
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	400a      	ands	r2, r1
 8003366:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b41      	subs	r3, #65	@ 0x41
 8003382:	fa00 f203 	lsl.w	r2, r0, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800338e:	4b29      	ldr	r3, [pc, #164]	@ (8003434 <HAL_ADC_ConfigChannel+0x250>)
 8003390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a28      	ldr	r2, [pc, #160]	@ (8003438 <HAL_ADC_ConfigChannel+0x254>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10f      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1d8>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b12      	cmp	r3, #18
 80033a2:	d10b      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_ADC_ConfigChannel+0x254>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12b      	bne.n	800341e <HAL_ADC_ConfigChannel+0x23a>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_ADC_ConfigChannel+0x258>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <HAL_ADC_ConfigChannel+0x1f4>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b11      	cmp	r3, #17
 80033d6:	d122      	bne.n	800341e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a11      	ldr	r2, [pc, #68]	@ (800343c <HAL_ADC_ConfigChannel+0x258>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d111      	bne.n	800341e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033fa:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <HAL_ADC_ConfigChannel+0x25c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a11      	ldr	r2, [pc, #68]	@ (8003444 <HAL_ADC_ConfigChannel+0x260>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	0c9a      	lsrs	r2, r3, #18
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003410:	e002      	b.n	8003418 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3b01      	subs	r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f9      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40012300 	.word	0x40012300
 8003438:	40012000 	.word	0x40012000
 800343c:	10000012 	.word	0x10000012
 8003440:	20000000 	.word	0x20000000
 8003444:	431bde83 	.word	0x431bde83

08003448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003450:	4b79      	ldr	r3, [pc, #484]	@ (8003638 <ADC_Init+0x1f0>)
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	431a      	orrs	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800347c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80034a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6899      	ldr	r1, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	4a58      	ldr	r2, [pc, #352]	@ (800363c <ADC_Init+0x1f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	e00f      	b.n	8003546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003544:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0202 	bic.w	r2, r2, #2
 8003554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7e1b      	ldrb	r3, [r3, #24]
 8003560:	005a      	lsls	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01b      	beq.n	80035ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003582:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	3b01      	subs	r3, #1
 80035a0:	035a      	lsls	r2, r3, #13
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e007      	b.n	80035bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80035ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	051a      	lsls	r2, r3, #20
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6899      	ldr	r1, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035fe:	025a      	lsls	r2, r3, #9
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	029a      	lsls	r2, r3, #10
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40012300 	.word	0x40012300
 800363c:	0f000001 	.word	0x0f000001

08003640 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003656:	2b00      	cmp	r3, #0
 8003658:	d13c      	bne.n	80036d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d12b      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	d127      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003694:	2b00      	cmp	r3, #0
 8003696:	d119      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0220 	bic.w	r2, r2, #32
 80036a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7fe f8bd 	bl	800184c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036d2:	e00e      	b.n	80036f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff fd75 	bl	80031d0 <HAL_ADC_ErrorCallback>
}
 80036e6:	e004      	b.n	80036f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7ff fd4d 	bl	80031a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2240      	movs	r2, #64	@ 0x40
 8003728:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fd4a 	bl	80031d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003768:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db0b      	blt.n	80037e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4907      	ldr	r1, [pc, #28]	@ (80037f4 <__NVIC_EnableIRQ+0x38>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2001      	movs	r0, #1
 80037de:	fa00 f202 	lsl.w	r2, r0, r2
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	@ (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	@ (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf28      	it	cs
 800386a:	2304      	movcs	r3, #4
 800386c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3304      	adds	r3, #4
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <NVIC_EncodePriority+0x30>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b03      	subs	r3, #3
 800387a:	e000      	b.n	800387e <NVIC_EncodePriority+0x32>
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	f04f 32ff 	mov.w	r2, #4294967295
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003894:	f04f 31ff 	mov.w	r1, #4294967295
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43d9      	mvns	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	4313      	orrs	r3, r2
         );
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	@ 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c4:	d301      	bcc.n	80038ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00f      	b.n	80038ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <SysTick_Config+0x40>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d2:	210f      	movs	r1, #15
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	f7ff ff8e 	bl	80037f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038dc:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <SysTick_Config+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <SysTick_Config+0x40>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff29 	bl	8003758 <__NVIC_SetPriorityGrouping>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff3e 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff8e 	bl	800384c <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5d 	bl	80037f8 <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff31 	bl	80037bc <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa2 	bl	80038b4 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003988:	f7ff f996 	bl	8002cb8 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e099      	b.n	8003acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b8:	e00f      	b.n	80039da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ba:	f7ff f97d 	bl	8002cb8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d908      	bls.n	80039da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2203      	movs	r2, #3
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e078      	b.n	8003acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e8      	bne.n	80039ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4b38      	ldr	r3, [pc, #224]	@ (8003ad4 <HAL_DMA_Init+0x158>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d107      	bne.n	8003a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0307 	bic.w	r3, r3, #7
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d117      	bne.n	8003a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fb0f 	bl	80040a4 <DMA_CheckFifoParam>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e016      	b.n	8003acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fac6 	bl	8004038 <DMA_CalcBaseAndBitshift>
 8003aac:	4603      	mov	r3, r0
 8003aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab4:	223f      	movs	r2, #63	@ 0x3f
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	f010803f 	.word	0xf010803f

08003ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_DMA_Start_IT+0x26>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e040      	b.n	8003b80 <HAL_DMA_Start_IT+0xa8>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d12f      	bne.n	8003b72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fa58 	bl	8003fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	223f      	movs	r2, #63	@ 0x3f
 8003b32:	409a      	lsls	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0216 	orr.w	r2, r2, #22
 8003b46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0208 	orr.w	r2, r2, #8
 8003b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e005      	b.n	8003b7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b96:	f7ff f88f 	bl	8002cb8 <HAL_GetTick>
 8003b9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d008      	beq.n	8003bba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2280      	movs	r2, #128	@ 0x80
 8003bac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e052      	b.n	8003c60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0216 	bic.w	r2, r2, #22
 8003bc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <HAL_DMA_Abort+0x62>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0208 	bic.w	r2, r2, #8
 8003bf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c0a:	e013      	b.n	8003c34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c0c:	f7ff f854 	bl	8002cb8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d90c      	bls.n	8003c34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2203      	movs	r2, #3
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e015      	b.n	8003c60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e4      	bne.n	8003c0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c46:	223f      	movs	r2, #63	@ 0x3f
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d004      	beq.n	8003c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2280      	movs	r2, #128	@ 0x80
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e00c      	b.n	8003ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2205      	movs	r2, #5
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8003ef4 <HAL_DMA_IRQHandler+0x248>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef8 <HAL_DMA_IRQHandler+0x24c>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0a9b      	lsrs	r3, r3, #10
 8003cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01a      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d04:	2208      	movs	r2, #8
 8003d06:	409a      	lsls	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d10:	f043 0201 	orr.w	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d012      	beq.n	8003d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	f043 0202 	orr.w	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	2204      	movs	r2, #4
 8003d54:	409a      	lsls	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d012      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	2204      	movs	r2, #4
 8003d72:	409a      	lsls	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	f043 0204 	orr.w	r2, r3, #4
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	2210      	movs	r2, #16
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d043      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d03c      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	2210      	movs	r2, #16
 8003da8:	409a      	lsls	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d108      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d024      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
 8003dda:	e01f      	b.n	8003e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01b      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
 8003dec:	e016      	b.n	8003e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0208 	bic.w	r2, r2, #8
 8003e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e20:	2220      	movs	r2, #32
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 808f 	beq.w	8003f4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8087 	beq.w	8003f4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e42:	2220      	movs	r2, #32
 8003e44:	409a      	lsls	r2, r3
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d136      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0216 	bic.w	r2, r2, #22
 8003e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x1da>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0208 	bic.w	r2, r2, #8
 8003e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	223f      	movs	r2, #63	@ 0x3f
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d07e      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
        }
        return;
 8003ec2:	e079      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01d      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d031      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e02c      	b.n	8003f4c <HAL_DMA_IRQHandler+0x2a0>
 8003ef2:	bf00      	nop
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d023      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
 8003f0c:	e01e      	b.n	8003f4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10f      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0210 	bic.w	r2, r2, #16
 8003f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d032      	beq.n	8003fba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d022      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2205      	movs	r2, #5
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d307      	bcc.n	8003f94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f2      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x2cc>
 8003f92:	e000      	b.n	8003f96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
 8003fb6:	e000      	b.n	8003fba <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fb8:	bf00      	nop
    }
  }
}
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fce:	b2db      	uxtb	r3, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b40      	cmp	r3, #64	@ 0x40
 8004008:	d108      	bne.n	800401c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800401a:	e007      	b.n	800402c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	60da      	str	r2, [r3, #12]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	3b10      	subs	r3, #16
 8004048:	4a14      	ldr	r2, [pc, #80]	@ (800409c <DMA_CalcBaseAndBitshift+0x64>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004052:	4a13      	ldr	r2, [pc, #76]	@ (80040a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d909      	bls.n	800407a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	659a      	str	r2, [r3, #88]	@ 0x58
 8004078:	e007      	b.n	800408a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	aaaaaaab 	.word	0xaaaaaaab
 80040a0:	08012640 	.word	0x08012640

080040a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d11f      	bne.n	80040fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d856      	bhi.n	8004172 <DMA_CheckFifoParam+0xce>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <DMA_CheckFifoParam+0x28>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040ef 	.word	0x080040ef
 80040d4:	080040dd 	.word	0x080040dd
 80040d8:	08004173 	.word	0x08004173
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d046      	beq.n	8004176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ec:	e043      	b.n	8004176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f6:	d140      	bne.n	800417a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fc:	e03d      	b.n	800417a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004106:	d121      	bne.n	800414c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d837      	bhi.n	800417e <DMA_CheckFifoParam+0xda>
 800410e:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <DMA_CheckFifoParam+0x70>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004125 	.word	0x08004125
 8004118:	0800412b 	.word	0x0800412b
 800411c:	08004125 	.word	0x08004125
 8004120:	0800413d 	.word	0x0800413d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      break;
 8004128:	e030      	b.n	800418c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d025      	beq.n	8004182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413a:	e022      	b.n	8004182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004144:	d11f      	bne.n	8004186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800414a:	e01c      	b.n	8004186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d903      	bls.n	800415a <DMA_CheckFifoParam+0xb6>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d003      	beq.n	8004160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004158:	e018      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      break;
 800415e:	e015      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00e      	beq.n	800418a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      break;
 8004170:	e00b      	b.n	800418a <DMA_CheckFifoParam+0xe6>
      break;
 8004172:	bf00      	nop
 8004174:	e00a      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      break;
 8004176:	bf00      	nop
 8004178:	e008      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
 800417c:	e006      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      break;
 800417e:	bf00      	nop
 8004180:	e004      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
 8004184:	e002      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      break;   
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <DMA_CheckFifoParam+0xe8>
      break;
 800418a:	bf00      	nop
    }
  } 
  
  return status; 
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop

0800419c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	@ 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e159      	b.n	800446c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041b8:	2201      	movs	r2, #1
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	f040 8148 	bne.w	8004466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d005      	beq.n	80041ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d130      	bne.n	8004250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2203      	movs	r2, #3
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004224:	2201      	movs	r2, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 0201 	and.w	r2, r3, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b03      	cmp	r3, #3
 800425a:	d017      	beq.n	800428c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	2203      	movs	r2, #3
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d123      	bne.n	80042e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	08da      	lsrs	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3208      	adds	r2, #8
 80042a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	220f      	movs	r2, #15
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	08da      	lsrs	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3208      	adds	r2, #8
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0203 	and.w	r2, r3, #3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a2 	beq.w	8004466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	4b57      	ldr	r3, [pc, #348]	@ (8004484 <HAL_GPIO_Init+0x2e8>)
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	4a56      	ldr	r2, [pc, #344]	@ (8004484 <HAL_GPIO_Init+0x2e8>)
 800432c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004330:	6453      	str	r3, [r2, #68]	@ 0x44
 8004332:	4b54      	ldr	r3, [pc, #336]	@ (8004484 <HAL_GPIO_Init+0x2e8>)
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800433e:	4a52      	ldr	r2, [pc, #328]	@ (8004488 <HAL_GPIO_Init+0x2ec>)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	3302      	adds	r3, #2
 8004346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	220f      	movs	r2, #15
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a49      	ldr	r2, [pc, #292]	@ (800448c <HAL_GPIO_Init+0x2f0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d019      	beq.n	800439e <HAL_GPIO_Init+0x202>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a48      	ldr	r2, [pc, #288]	@ (8004490 <HAL_GPIO_Init+0x2f4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_GPIO_Init+0x1fe>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a47      	ldr	r2, [pc, #284]	@ (8004494 <HAL_GPIO_Init+0x2f8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00d      	beq.n	8004396 <HAL_GPIO_Init+0x1fa>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <HAL_GPIO_Init+0x2fc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <HAL_GPIO_Init+0x1f6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a45      	ldr	r2, [pc, #276]	@ (800449c <HAL_GPIO_Init+0x300>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_GPIO_Init+0x1f2>
 800438a:	2304      	movs	r3, #4
 800438c:	e008      	b.n	80043a0 <HAL_GPIO_Init+0x204>
 800438e:	2307      	movs	r3, #7
 8004390:	e006      	b.n	80043a0 <HAL_GPIO_Init+0x204>
 8004392:	2303      	movs	r3, #3
 8004394:	e004      	b.n	80043a0 <HAL_GPIO_Init+0x204>
 8004396:	2302      	movs	r3, #2
 8004398:	e002      	b.n	80043a0 <HAL_GPIO_Init+0x204>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_GPIO_Init+0x204>
 800439e:	2300      	movs	r3, #0
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	f002 0203 	and.w	r2, r2, #3
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	4093      	lsls	r3, r2
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b0:	4935      	ldr	r1, [pc, #212]	@ (8004488 <HAL_GPIO_Init+0x2ec>)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	3302      	adds	r3, #2
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043be:	4b38      	ldr	r3, [pc, #224]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043e2:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043e8:	4b2d      	ldr	r3, [pc, #180]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800440c:	4a24      	ldr	r2, [pc, #144]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004412:	4b23      	ldr	r3, [pc, #140]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004436:	4a1a      	ldr	r2, [pc, #104]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800443c:	4b18      	ldr	r3, [pc, #96]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004460:	4a0f      	ldr	r2, [pc, #60]	@ (80044a0 <HAL_GPIO_Init+0x304>)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b0f      	cmp	r3, #15
 8004470:	f67f aea2 	bls.w	80041b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	3724      	adds	r7, #36	@ 0x24
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	40013800 	.word	0x40013800
 800448c:	40020000 	.word	0x40020000
 8004490:	40020400 	.word	0x40020400
 8004494:	40020800 	.word	0x40020800
 8004498:	40020c00 	.word	0x40020c00
 800449c:	40021000 	.word	0x40021000
 80044a0:	40013c00 	.word	0x40013c00

080044a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
 80044b0:	4613      	mov	r3, r2
 80044b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b4:	787b      	ldrb	r3, [r7, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044c0:	e003      	b.n	80044ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	041a      	lsls	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	041a      	lsls	r2, r3, #16
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43d9      	mvns	r1, r3
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	400b      	ands	r3, r1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	619a      	str	r2, [r3, #24]
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e12b      	b.n	8004776 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fd ffe0 	bl	80024f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2224      	movs	r2, #36	@ 0x24
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800455e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800456e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004570:	f003 fca0 	bl	8007eb4 <HAL_RCC_GetPCLK1Freq>
 8004574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4a81      	ldr	r2, [pc, #516]	@ (8004780 <HAL_I2C_Init+0x274>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d807      	bhi.n	8004590 <HAL_I2C_Init+0x84>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a80      	ldr	r2, [pc, #512]	@ (8004784 <HAL_I2C_Init+0x278>)
 8004584:	4293      	cmp	r3, r2
 8004586:	bf94      	ite	ls
 8004588:	2301      	movls	r3, #1
 800458a:	2300      	movhi	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e006      	b.n	800459e <HAL_I2C_Init+0x92>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a7d      	ldr	r2, [pc, #500]	@ (8004788 <HAL_I2C_Init+0x27c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	bf94      	ite	ls
 8004598:	2301      	movls	r3, #1
 800459a:	2300      	movhi	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0e7      	b.n	8004776 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a78      	ldr	r2, [pc, #480]	@ (800478c <HAL_I2C_Init+0x280>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	0c9b      	lsrs	r3, r3, #18
 80045b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004780 <HAL_I2C_Init+0x274>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d802      	bhi.n	80045e0 <HAL_I2C_Init+0xd4>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3301      	adds	r3, #1
 80045de:	e009      	b.n	80045f4 <HAL_I2C_Init+0xe8>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	4a69      	ldr	r2, [pc, #420]	@ (8004790 <HAL_I2C_Init+0x284>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	3301      	adds	r3, #1
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004606:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	495c      	ldr	r1, [pc, #368]	@ (8004780 <HAL_I2C_Init+0x274>)
 8004610:	428b      	cmp	r3, r1
 8004612:	d819      	bhi.n	8004648 <HAL_I2C_Init+0x13c>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e59      	subs	r1, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004622:	1c59      	adds	r1, r3, #1
 8004624:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004628:	400b      	ands	r3, r1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_I2C_Init+0x138>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1e59      	subs	r1, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fbb1 f3f3 	udiv	r3, r1, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004642:	e051      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 8004644:	2304      	movs	r3, #4
 8004646:	e04f      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d111      	bne.n	8004674 <HAL_I2C_Init+0x168>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1e58      	subs	r0, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	440b      	add	r3, r1
 800465e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004662:	3301      	adds	r3, #1
 8004664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e012      	b.n	800469a <HAL_I2C_Init+0x18e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e58      	subs	r0, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	0099      	lsls	r1, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Init+0x196>
 800469e:	2301      	movs	r3, #1
 80046a0:	e022      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10e      	bne.n	80046c8 <HAL_I2C_Init+0x1bc>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1e58      	subs	r0, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	440b      	add	r3, r1
 80046b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c6:	e00f      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1e58      	subs	r0, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	0099      	lsls	r1, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	fbb0 f3f3 	udiv	r3, r0, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	6809      	ldr	r1, [r1, #0]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004716:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6911      	ldr	r1, [r2, #16]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	430b      	orrs	r3, r1
 800472a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	000186a0 	.word	0x000186a0
 8004784:	001e847f 	.word	0x001e847f
 8004788:	003d08ff 	.word	0x003d08ff
 800478c:	431bde83 	.word	0x431bde83
 8004790:	10624dd3 	.word	0x10624dd3

08004794 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a6:	2b80      	cmp	r3, #128	@ 0x80
 80047a8:	d103      	bne.n	80047b2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	611a      	str	r2, [r3, #16]
  }
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b088      	sub	sp, #32
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d003      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x38>
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	f040 80c1 	bne.w	8004978 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10d      	bne.n	800482c <HAL_I2C_EV_IRQHandler+0x6e>
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004816:	d003      	beq.n	8004820 <HAL_I2C_EV_IRQHandler+0x62>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800481e:	d101      	bne.n	8004824 <HAL_I2C_EV_IRQHandler+0x66>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x68>
 8004824:	2300      	movs	r3, #0
 8004826:	2b01      	cmp	r3, #1
 8004828:	f000 8132 	beq.w	8004a90 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00c      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x92>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	0a5b      	lsrs	r3, r3, #9
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 fc98 	bl	8006178 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fd9b 	bl	8005384 <I2C_Master_SB>
 800484e:	e092      	b.n	8004976 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	08db      	lsrs	r3, r3, #3
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <HAL_I2C_EV_IRQHandler+0xb2>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	0a5b      	lsrs	r3, r3, #9
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fe11 	bl	8005490 <I2C_Master_ADD10>
 800486e:	e082      	b.n	8004976 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0xd2>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	0a5b      	lsrs	r3, r3, #9
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fe2b 	bl	80054e4 <I2C_Master_ADDR>
 800488e:	e072      	b.n	8004976 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03b      	beq.n	8004914 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048aa:	f000 80f3 	beq.w	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	09db      	lsrs	r3, r3, #7
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00f      	beq.n	80048da <HAL_I2C_EV_IRQHandler+0x11c>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0a9b      	lsrs	r3, r3, #10
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_I2C_EV_IRQHandler+0x11c>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9f3 	bl	8004cbe <I2C_MasterTransmit_TXE>
 80048d8:	e04d      	b.n	8004976 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80d6 	beq.w	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	0a5b      	lsrs	r3, r3, #9
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80cf 	beq.w	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	2b21      	cmp	r3, #33	@ 0x21
 80048fa:	d103      	bne.n	8004904 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa7a 	bl	8004df6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004902:	e0c7      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	f040 80c4 	bne.w	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fae8 	bl	8004ee2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004912:	e0bf      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004922:	f000 80b7 	beq.w	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00f      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x194>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	0a9b      	lsrs	r3, r3, #10
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x194>
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb61 	bl	8005012 <I2C_MasterReceive_RXNE>
 8004950:	e011      	b.n	8004976 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 809a 	beq.w	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	0a5b      	lsrs	r3, r3, #9
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8093 	beq.w	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fc17 	bl	80051a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004974:	e08e      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004976:	e08d      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e007      	b.n	800499a <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x20e>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	0a5b      	lsrs	r3, r3, #9
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80049c2:	69b9      	ldr	r1, [r7, #24]
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 ffdc 	bl	8005982 <I2C_Slave_ADDR>
 80049ca:	e066      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_I2C_EV_IRQHandler+0x22e>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	0a5b      	lsrs	r3, r3, #9
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 f817 	bl	8005a18 <I2C_Slave_STOPF>
 80049ea:	e056      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049ec:	7bbb      	ldrb	r3, [r7, #14]
 80049ee:	2b21      	cmp	r3, #33	@ 0x21
 80049f0:	d002      	beq.n	80049f8 <HAL_I2C_EV_IRQHandler+0x23a>
 80049f2:	7bbb      	ldrb	r3, [r7, #14]
 80049f4:	2b29      	cmp	r3, #41	@ 0x29
 80049f6:	d125      	bne.n	8004a44 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	09db      	lsrs	r3, r3, #7
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00f      	beq.n	8004a24 <HAL_I2C_EV_IRQHandler+0x266>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d009      	beq.n	8004a24 <HAL_I2C_EV_IRQHandler+0x266>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d103      	bne.n	8004a24 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fef2 	bl	8005806 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a22:	e039      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d033      	beq.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2da>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	0a5b      	lsrs	r3, r3, #9
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02d      	beq.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 ff1f 	bl	8005880 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a42:	e029      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00f      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	0a9b      	lsrs	r3, r3, #10
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 ff2a 	bl	80058c2 <I2C_SlaveReceive_RXNE>
 8004a6e:	e014      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00e      	beq.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	0a5b      	lsrs	r3, r3, #9
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 ff58 	bl	800593e <I2C_SlaveReceive_BTF>
 8004a8e:	e004      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004a90:	bf00      	nop
 8004a92:	e002      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a98:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	@ 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ac2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <HAL_I2C_ER_IRQHandler+0x4e>
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004aec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	0a5b      	lsrs	r3, r3, #9
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00e      	beq.n	8004b18 <HAL_I2C_ER_IRQHandler+0x78>
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	f043 0302 	orr.w	r3, r3, #2
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004b16:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	0a9b      	lsrs	r3, r3, #10
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d03f      	beq.n	8004ba4 <HAL_I2C_ER_IRQHandler+0x104>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d039      	beq.n	8004ba4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004b30:	7efb      	ldrb	r3, [r7, #27]
 8004b32:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b42:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b48:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b4a:	7ebb      	ldrb	r3, [r7, #26]
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d112      	bne.n	8004b76 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	2b21      	cmp	r3, #33	@ 0x21
 8004b5a:	d008      	beq.n	8004b6e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b5c:	7cfb      	ldrb	r3, [r7, #19]
 8004b5e:	2b29      	cmp	r3, #41	@ 0x29
 8004b60:	d005      	beq.n	8004b6e <HAL_I2C_ER_IRQHandler+0xce>
 8004b62:	7cfb      	ldrb	r3, [r7, #19]
 8004b64:	2b28      	cmp	r3, #40	@ 0x28
 8004b66:	d106      	bne.n	8004b76 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b21      	cmp	r3, #33	@ 0x21
 8004b6c:	d103      	bne.n	8004b76 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f001 f882 	bl	8005c78 <I2C_Slave_AF>
 8004b74:	e016      	b.n	8004ba4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b7e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	f043 0304 	orr.w	r3, r3, #4
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b88:	7efb      	ldrb	r3, [r7, #27]
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d002      	beq.n	8004b94 <HAL_I2C_ER_IRQHandler+0xf4>
 8004b8e:	7efb      	ldrb	r3, [r7, #27]
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d107      	bne.n	8004ba4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	0adb      	lsrs	r3, r3, #11
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <HAL_I2C_ER_IRQHandler+0x12e>
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	f043 0308 	orr.w	r3, r3, #8
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004bcc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f001 f8bd 	bl	8005d60 <I2C_ITError>
  }
}
 8004be6:	bf00      	nop
 8004be8:	3728      	adds	r7, #40	@ 0x28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70fb      	strb	r3, [r7, #3]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ccc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d150      	bne.n	8004d86 <I2C_MasterTransmit_TXE+0xc8>
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b21      	cmp	r3, #33	@ 0x21
 8004ce8:	d14d      	bne.n	8004d86 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d01d      	beq.n	8004d2c <I2C_MasterTransmit_TXE+0x6e>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d01a      	beq.n	8004d2c <I2C_MasterTransmit_TXE+0x6e>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cfc:	d016      	beq.n	8004d2c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d0c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2211      	movs	r2, #17
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff62 	bl	8004bee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d2a:	e060      	b.n	8004dee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d3a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d4a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b40      	cmp	r3, #64	@ 0x40
 8004d64:	d107      	bne.n	8004d76 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ff7d 	bl	8004c6e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d74:	e03b      	b.n	8004dee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ff35 	bl	8004bee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d84:	e033      	b.n	8004dee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b21      	cmp	r3, #33	@ 0x21
 8004d8a:	d005      	beq.n	8004d98 <I2C_MasterTransmit_TXE+0xda>
 8004d8c:	7bbb      	ldrb	r3, [r7, #14]
 8004d8e:	2b40      	cmp	r3, #64	@ 0x40
 8004d90:	d12d      	bne.n	8004dee <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b22      	cmp	r3, #34	@ 0x22
 8004d96:	d12a      	bne.n	8004dee <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004db2:	e01c      	b.n	8004dee <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b40      	cmp	r3, #64	@ 0x40
 8004dbe:	d103      	bne.n	8004dc8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f88e 	bl	8004ee2 <I2C_MemoryTransmit_TXE_BTF>
}
 8004dc6:	e012      	b.n	8004dee <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	781a      	ldrb	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004dec:	e7ff      	b.n	8004dee <I2C_MasterTransmit_TXE+0x130>
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b21      	cmp	r3, #33	@ 0x21
 8004e0e:	d164      	bne.n	8004eda <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d012      	beq.n	8004e40 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e3e:	e04c      	b.n	8004eda <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d01d      	beq.n	8004e82 <I2C_MasterTransmit_BTF+0x8c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d01a      	beq.n	8004e82 <I2C_MasterTransmit_BTF+0x8c>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e52:	d016      	beq.n	8004e82 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e62:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2211      	movs	r2, #17
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff feb7 	bl	8004bee <HAL_I2C_MasterTxCpltCallback>
}
 8004e80:	e02b      	b.n	8004eda <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e90:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ea0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b40      	cmp	r3, #64	@ 0x40
 8004eba:	d107      	bne.n	8004ecc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fed2 	bl	8004c6e <HAL_I2C_MemTxCpltCallback>
}
 8004eca:	e006      	b.n	8004eda <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff fe8a 	bl	8004bee <HAL_I2C_MasterTxCpltCallback>
}
 8004eda:	bf00      	nop
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11d      	bne.n	8004f36 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10b      	bne.n	8004f1a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004f18:	e077      	b.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	121b      	asrs	r3, r3, #8
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004f34:	e069      	b.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10b      	bne.n	8004f56 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004f54:	e059      	b.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d152      	bne.n	8005004 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b22      	cmp	r3, #34	@ 0x22
 8004f62:	d10d      	bne.n	8004f80 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f72:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004f7e:	e044      	b.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d015      	beq.n	8004fb6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b21      	cmp	r3, #33	@ 0x21
 8004f8e:	d112      	bne.n	8004fb6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004fb4:	e029      	b.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d124      	bne.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b21      	cmp	r3, #33	@ 0x21
 8004fc4:	d121      	bne.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fd4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fe36 	bl	8004c6e <HAL_I2C_MemTxCpltCallback>
}
 8005002:	e002      	b.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff fbc5 	bl	8004794 <I2C_Flush_DR>
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b22      	cmp	r3, #34	@ 0x22
 8005024:	f040 80b9 	bne.w	800519a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d921      	bls.n	8005080 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b03      	cmp	r3, #3
 800506a:	f040 8096 	bne.w	800519a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800507c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800507e:	e08c      	b.n	800519a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	2b02      	cmp	r3, #2
 8005086:	d07f      	beq.n	8005188 <I2C_MasterReceive_RXNE+0x176>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d002      	beq.n	8005094 <I2C_MasterReceive_RXNE+0x82>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d179      	bne.n	8005188 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 f83d 	bl	8006114 <I2C_WaitOnSTOPRequestThroughIT>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d14c      	bne.n	800513a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d10a      	bne.n	8005110 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fdba 	bl	8004c82 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800510e:	e044      	b.n	800519a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b08      	cmp	r3, #8
 800511c:	d002      	beq.n	8005124 <I2C_MasterReceive_RXNE+0x112>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b20      	cmp	r3, #32
 8005122:	d103      	bne.n	800512c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
 800512a:	e002      	b.n	8005132 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2212      	movs	r2, #18
 8005130:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fd65 	bl	8004c02 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005138:	e02f      	b.n	800519a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005148:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fd88 	bl	8004c96 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005186:	e008      	b.n	800519a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005196:	605a      	str	r2, [r3, #4]
}
 8005198:	e7ff      	b.n	800519a <I2C_MasterReceive_RXNE+0x188>
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d11b      	bne.n	80051f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80051f0:	e0c4      	b.n	800537c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d129      	bne.n	8005250 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d00a      	beq.n	8005228 <I2C_MasterReceive_BTF+0x86>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d007      	beq.n	8005228 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005226:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800524e:	e095      	b.n	800537c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d17d      	bne.n	8005356 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d002      	beq.n	8005266 <I2C_MasterReceive_BTF+0xc4>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b10      	cmp	r3, #16
 8005264:	d108      	bne.n	8005278 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e016      	b.n	80052a6 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b04      	cmp	r3, #4
 800527c:	d002      	beq.n	8005284 <I2C_MasterReceive_BTF+0xe2>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d108      	bne.n	8005296 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e007      	b.n	80052a6 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005300:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b40      	cmp	r3, #64	@ 0x40
 8005314:	d10a      	bne.n	800532c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fcac 	bl	8004c82 <HAL_I2C_MemRxCpltCallback>
}
 800532a:	e027      	b.n	800537c <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b08      	cmp	r3, #8
 8005338:	d002      	beq.n	8005340 <I2C_MasterReceive_BTF+0x19e>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b20      	cmp	r3, #32
 800533e:	d103      	bne.n	8005348 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30
 8005346:	e002      	b.n	800534e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2212      	movs	r2, #18
 800534c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fc57 	bl	8004c02 <HAL_I2C_MasterRxCpltCallback>
}
 8005354:	e012      	b.n	800537c <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b40      	cmp	r3, #64	@ 0x40
 8005396:	d117      	bne.n	80053c8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053b0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80053b2:	e067      	b.n	8005484 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]
}
 80053c6:	e05d      	b.n	8005484 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053d0:	d133      	bne.n	800543a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b21      	cmp	r3, #33	@ 0x21
 80053dc:	d109      	bne.n	80053f2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053ee:	611a      	str	r2, [r3, #16]
 80053f0:	e008      	b.n	8005404 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <I2C_Master_SB+0x92>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d108      	bne.n	8005428 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d032      	beq.n	8005484 <I2C_Master_SB+0x100>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d02d      	beq.n	8005484 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005436:	605a      	str	r2, [r3, #4]
}
 8005438:	e024      	b.n	8005484 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10e      	bne.n	8005460 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	b29b      	uxth	r3, r3
 8005448:	11db      	asrs	r3, r3, #7
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0306 	and.w	r3, r3, #6
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f063 030f 	orn	r3, r3, #15
 8005456:	b2da      	uxtb	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	611a      	str	r2, [r3, #16]
}
 800545e:	e011      	b.n	8005484 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10d      	bne.n	8005484 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546c:	b29b      	uxth	r3, r3
 800546e:	11db      	asrs	r3, r3, #7
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0306 	and.w	r3, r3, #6
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f063 030e 	orn	r3, r3, #14
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549c:	b2da      	uxtb	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <I2C_Master_ADD10+0x26>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d108      	bne.n	80054c8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <I2C_Master_ADD10+0x48>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d6:	605a      	str	r2, [r3, #4]
  }
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b091      	sub	sp, #68	@ 0x44
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b22      	cmp	r3, #34	@ 0x22
 800550c:	f040 8169 	bne.w	80057e2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <I2C_Master_ADDR+0x54>
 8005518:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d10b      	bne.n	8005538 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005520:	2300      	movs	r3, #0
 8005522:	633b      	str	r3, [r7, #48]	@ 0x30
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	e160      	b.n	80057fa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11d      	bne.n	800557c <I2C_Master_ADDR+0x98>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005548:	d118      	bne.n	800557c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554a:	2300      	movs	r3, #0
 800554c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800556e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	651a      	str	r2, [r3, #80]	@ 0x50
 800557a:	e13e      	b.n	80057fa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d113      	bne.n	80055ae <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005586:	2300      	movs	r3, #0
 8005588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e115      	b.n	80057da <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 808a 	bne.w	80056ce <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055c0:	d137      	bne.n	8005632 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e0:	d113      	bne.n	800560a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	e0e7      	b.n	80057da <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560a:	2300      	movs	r3, #0
 800560c:	623b      	str	r3, [r7, #32]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e0d3      	b.n	80057da <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005634:	2b08      	cmp	r3, #8
 8005636:	d02e      	beq.n	8005696 <I2C_Master_ADDR+0x1b2>
 8005638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563a:	2b20      	cmp	r3, #32
 800563c:	d02b      	beq.n	8005696 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	2b12      	cmp	r3, #18
 8005642:	d102      	bne.n	800564a <I2C_Master_ADDR+0x166>
 8005644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005646:	2b01      	cmp	r3, #1
 8005648:	d125      	bne.n	8005696 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	2b04      	cmp	r3, #4
 800564e:	d00e      	beq.n	800566e <I2C_Master_ADDR+0x18a>
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	2b02      	cmp	r3, #2
 8005654:	d00b      	beq.n	800566e <I2C_Master_ADDR+0x18a>
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	2b10      	cmp	r3, #16
 800565a:	d008      	beq.n	800566e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e007      	b.n	800567e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800567c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	e0a1      	b.n	80057da <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e085      	b.n	80057da <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d14d      	bne.n	8005774 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d016      	beq.n	800570c <I2C_Master_ADDR+0x228>
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d013      	beq.n	800570c <I2C_Master_ADDR+0x228>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d010      	beq.n	800570c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e007      	b.n	800571c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800571a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800572a:	d117      	bne.n	800575c <I2C_Master_ADDR+0x278>
 800572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005732:	d00b      	beq.n	800574c <I2C_Master_ADDR+0x268>
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	2b01      	cmp	r3, #1
 8005738:	d008      	beq.n	800574c <I2C_Master_ADDR+0x268>
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	2b08      	cmp	r3, #8
 800573e:	d005      	beq.n	800574c <I2C_Master_ADDR+0x268>
 8005740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005742:	2b10      	cmp	r3, #16
 8005744:	d002      	beq.n	800574c <I2C_Master_ADDR+0x268>
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	2b20      	cmp	r3, #32
 800574a:	d107      	bne.n	800575c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800575a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	e032      	b.n	80057da <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005782:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005792:	d117      	bne.n	80057c4 <I2C_Master_ADDR+0x2e0>
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800579a:	d00b      	beq.n	80057b4 <I2C_Master_ADDR+0x2d0>
 800579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d008      	beq.n	80057b4 <I2C_Master_ADDR+0x2d0>
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d005      	beq.n	80057b4 <I2C_Master_ADDR+0x2d0>
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d002      	beq.n	80057b4 <I2C_Master_ADDR+0x2d0>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d107      	bne.n	80057c4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057c2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80057e0:	e00b      	b.n	80057fa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
}
 80057f8:	e7ff      	b.n	80057fa <I2C_Master_ADDR+0x316>
 80057fa:	bf00      	nop
 80057fc:	3744      	adds	r7, #68	@ 0x44
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005814:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d02b      	beq.n	8005878 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d114      	bne.n	8005878 <I2C_SlaveTransmit_TXE+0x72>
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b29      	cmp	r3, #41	@ 0x29
 8005852:	d111      	bne.n	8005878 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005862:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2221      	movs	r2, #33	@ 0x21
 8005868:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2228      	movs	r2, #40	@ 0x28
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f9cf 	bl	8004c16 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d011      	beq.n	80058b6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02c      	beq.n	8005936 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d114      	bne.n	8005936 <I2C_SlaveReceive_RXNE+0x74>
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005910:	d111      	bne.n	8005936 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005920:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2222      	movs	r2, #34	@ 0x22
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2228      	movs	r2, #40	@ 0x28
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff f97a 	bl	8004c2a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d012      	beq.n	8005976 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800599c:	2b28      	cmp	r3, #40	@ 0x28
 800599e:	d127      	bne.n	80059f0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ae:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	81bb      	strh	r3, [r7, #12]
 80059d2:	e002      	b.n	80059da <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80059e2:	89ba      	ldrh	r2, [r7, #12]
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff f928 	bl	8004c3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80059ee:	e00e      	b.n	8005a0e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a74:	d172      	bne.n	8005b5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b22      	cmp	r3, #34	@ 0x22
 8005a7a:	d002      	beq.n	8005a82 <I2C_Slave_STOPF+0x6a>
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a80:	d135      	bne.n	8005aee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ab4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fa80 	bl	8003fc0 <HAL_DMA_GetState>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d049      	beq.n	8005b5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	4a69      	ldr	r2, [pc, #420]	@ (8005c70 <I2C_Slave_STOPF+0x258>)
 8005acc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe f8c8 	bl	8003c68 <HAL_DMA_Abort_IT>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d03d      	beq.n	8005b5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005aec:	e035      	b.n	8005b5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fa4a 	bl	8003fc0 <HAL_DMA_GetState>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d014      	beq.n	8005b5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b36:	4a4e      	ldr	r2, [pc, #312]	@ (8005c70 <I2C_Slave_STOPF+0x258>)
 8005b38:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe f892 	bl	8003c68 <HAL_DMA_Abort_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	e000      	b.n	8005b5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d03e      	beq.n	8005be4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d112      	bne.n	8005b9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b40      	cmp	r3, #64	@ 0x40
 8005ba6:	d112      	bne.n	8005bce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	f043 0204 	orr.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f8b7 	bl	8005d60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005bf2:	e039      	b.n	8005c68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf8:	d109      	bne.n	8005c0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2228      	movs	r2, #40	@ 0x28
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff f80e 	bl	8004c2a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b28      	cmp	r3, #40	@ 0x28
 8005c18:	d111      	bne.n	8005c3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	@ (8005c74 <I2C_Slave_STOPF+0x25c>)
 8005c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff f80f 	bl	8004c5a <HAL_I2C_ListenCpltCallback>
}
 8005c3c:	e014      	b.n	8005c68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c42:	2b22      	cmp	r3, #34	@ 0x22
 8005c44:	d002      	beq.n	8005c4c <I2C_Slave_STOPF+0x234>
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	2b22      	cmp	r3, #34	@ 0x22
 8005c4a:	d10d      	bne.n	8005c68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe ffe1 	bl	8004c2a <HAL_I2C_SlaveRxCpltCallback>
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	08005fc5 	.word	0x08005fc5
 8005c74:	ffff0000 	.word	0xffff0000

08005c78 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c86:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d002      	beq.n	8005c9a <I2C_Slave_AF+0x22>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d129      	bne.n	8005cee <I2C_Slave_AF+0x76>
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b28      	cmp	r3, #40	@ 0x28
 8005c9e:	d126      	bne.n	8005cee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d5c <I2C_Slave_AF+0xe4>)
 8005ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cb4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cbe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fe ffb7 	bl	8004c5a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005cec:	e031      	b.n	8005d52 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b21      	cmp	r3, #33	@ 0x21
 8005cf2:	d129      	bne.n	8005d48 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a19      	ldr	r2, [pc, #100]	@ (8005d5c <I2C_Slave_AF+0xe4>)
 8005cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2221      	movs	r2, #33	@ 0x21
 8005cfe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d1e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d38:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fe fd2a 	bl	8004794 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fe ff68 	bl	8004c16 <HAL_I2C_SlaveTxCpltCallback>
}
 8005d46:	e004      	b.n	8005d52 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d50:	615a      	str	r2, [r3, #20]
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	ffff0000 	.word	0xffff0000

08005d60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d002      	beq.n	8005d84 <I2C_ITError+0x24>
 8005d7e:	7bbb      	ldrb	r3, [r7, #14]
 8005d80:	2b40      	cmp	r3, #64	@ 0x40
 8005d82:	d10a      	bne.n	8005d9a <I2C_ITError+0x3a>
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b22      	cmp	r3, #34	@ 0x22
 8005d88:	d107      	bne.n	8005d9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005da0:	2b28      	cmp	r3, #40	@ 0x28
 8005da2:	d107      	bne.n	8005db4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2228      	movs	r2, #40	@ 0x28
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005db2:	e015      	b.n	8005de0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dc2:	d00a      	beq.n	8005dda <I2C_ITError+0x7a>
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b60      	cmp	r3, #96	@ 0x60
 8005dc8:	d007      	beq.n	8005dda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dee:	d162      	bne.n	8005eb6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d020      	beq.n	8005e50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e12:	4a6a      	ldr	r2, [pc, #424]	@ (8005fbc <I2C_ITError+0x25c>)
 8005e14:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd ff24 	bl	8003c68 <HAL_DMA_Abort_IT>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8089 	beq.w	8005f3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4798      	blx	r3
 8005e4e:	e074      	b.n	8005f3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e54:	4a59      	ldr	r2, [pc, #356]	@ (8005fbc <I2C_ITError+0x25c>)
 8005e56:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fd ff03 	bl	8003c68 <HAL_DMA_Abort_IT>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d068      	beq.n	8005f3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e72:	2b40      	cmp	r3, #64	@ 0x40
 8005e74:	d10b      	bne.n	8005e8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
 8005eb4:	e041      	b.n	8005f3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b60      	cmp	r3, #96	@ 0x60
 8005ec0:	d125      	bne.n	8005f0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eda:	2b40      	cmp	r3, #64	@ 0x40
 8005edc:	d10b      	bne.n	8005ef6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fe fecf 	bl	8004caa <HAL_I2C_AbortCpltCallback>
 8005f0c:	e015      	b.n	8005f3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f18:	2b40      	cmp	r3, #64	@ 0x40
 8005f1a:	d10b      	bne.n	8005f34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fe feae 	bl	8004c96 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10e      	bne.n	8005f68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d104      	bne.n	8005f68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d113      	bne.n	8005fb4 <I2C_ITError+0x254>
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	2b28      	cmp	r3, #40	@ 0x28
 8005f90:	d110      	bne.n	8005fb4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc0 <I2C_ITError+0x260>)
 8005f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fe fe53 	bl	8004c5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	08005fc5 	.word	0x08005fc5
 8005fc0:	ffff0000 	.word	0xffff0000

08005fc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fde:	4b4b      	ldr	r3, [pc, #300]	@ (800610c <I2C_DMAAbort+0x148>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	08db      	lsrs	r3, r3, #3
 8005fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8006110 <I2C_DMAAbort+0x14c>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0a1a      	lsrs	r2, r3, #8
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	00da      	lsls	r2, r3, #3
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800600a:	e00a      	b.n	8006022 <I2C_DMAAbort+0x5e>
    }
    count--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3b01      	subs	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800601c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006020:	d0ea      	beq.n	8005ff8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602e:	2200      	movs	r2, #0
 8006030:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	2200      	movs	r2, #0
 8006040:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006050:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2200      	movs	r2, #0
 8006056:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006064:	2200      	movs	r2, #0
 8006066:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	2200      	movs	r2, #0
 8006076:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b60      	cmp	r3, #96	@ 0x60
 8006092:	d10e      	bne.n	80060b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2200      	movs	r2, #0
 80060a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	f7fe fdfd 	bl	8004caa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060b0:	e027      	b.n	8006102 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060b2:	7cfb      	ldrb	r3, [r7, #19]
 80060b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80060b8:	2b28      	cmp	r3, #40	@ 0x28
 80060ba:	d117      	bne.n	80060ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2200      	movs	r2, #0
 80060e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2228      	movs	r2, #40	@ 0x28
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80060ea:	e007      	b.n	80060fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80060fc:	6978      	ldr	r0, [r7, #20]
 80060fe:	f7fe fdca 	bl	8004c96 <HAL_I2C_ErrorCallback>
}
 8006102:	bf00      	nop
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000000 	.word	0x20000000
 8006110:	14f8b589 	.word	0x14f8b589

08006114 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006120:	4b13      	ldr	r3, [pc, #76]	@ (8006170 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	08db      	lsrs	r3, r3, #3
 8006126:	4a13      	ldr	r2, [pc, #76]	@ (8006174 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	0a1a      	lsrs	r2, r3, #8
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b01      	subs	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e008      	b.n	8006164 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800615c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006160:	d0e9      	beq.n	8006136 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20000000 	.word	0x20000000
 8006174:	14f8b589 	.word	0x14f8b589

08006178 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006188:	d103      	bne.n	8006192 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006190:	e007      	b.n	80061a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800619a:	d102      	bne.n	80061a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2208      	movs	r2, #8
 80061a0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af02      	add	r7, sp, #8
 80061b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e101      	b.n	80063c4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f007 fb7e 	bl	800d8dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2203      	movs	r2, #3
 80061e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ee:	d102      	bne.n	80061f6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f003 fed3 	bl	8009fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	7c1a      	ldrb	r2, [r3, #16]
 8006208:	f88d 2000 	strb.w	r2, [sp]
 800620c:	3304      	adds	r3, #4
 800620e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006210:	f003 fdb2 	bl	8009d78 <USB_CoreInit>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0ce      	b.n	80063c4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f003 fecb 	bl	8009fc8 <USB_SetCurrentMode>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0bf      	b.n	80063c4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e04a      	b.n	80062e0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800624a:	7bfa      	ldrb	r2, [r7, #15]
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	3315      	adds	r3, #21
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800625e:	7bfa      	ldrb	r2, [r7, #15]
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	440b      	add	r3, r1
 800626c:	3314      	adds	r3, #20
 800626e:	7bfa      	ldrb	r2, [r7, #15]
 8006270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006272:	7bfa      	ldrb	r2, [r7, #15]
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	b298      	uxth	r0, r3
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	332e      	adds	r3, #46	@ 0x2e
 8006286:	4602      	mov	r2, r0
 8006288:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	3318      	adds	r3, #24
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800629e:	7bfa      	ldrb	r2, [r7, #15]
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	331c      	adds	r3, #28
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062b2:	7bfa      	ldrb	r2, [r7, #15]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	3320      	adds	r3, #32
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062c6:	7bfa      	ldrb	r2, [r7, #15]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	3324      	adds	r3, #36	@ 0x24
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	3301      	adds	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	791b      	ldrb	r3, [r3, #4]
 80062e4:	7bfa      	ldrb	r2, [r7, #15]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d3af      	bcc.n	800624a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
 80062ee:	e044      	b.n	800637a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062f0:	7bfa      	ldrb	r2, [r7, #15]
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	4613      	mov	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006306:	7bfa      	ldrb	r2, [r7, #15]
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800631c:	7bfa      	ldrb	r2, [r7, #15]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	3301      	adds	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	791b      	ldrb	r3, [r3, #4]
 800637e:	7bfa      	ldrb	r2, [r7, #15]
 8006380:	429a      	cmp	r2, r3
 8006382:	d3b5      	bcc.n	80062f0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7c1a      	ldrb	r2, [r3, #16]
 800638c:	f88d 2000 	strb.w	r2, [sp]
 8006390:	3304      	adds	r3, #4
 8006392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006394:	f003 fe64 	bl	800a060 <USB_DevInit>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e00c      	b.n	80063c4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f004 feae 	bl	800b11e <USB_DevDisconnect>

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_PCD_Start+0x1c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e022      	b.n	800642e <HAL_PCD_Start+0x62>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006400:	2b01      	cmp	r3, #1
 8006402:	d105      	bne.n	8006410 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f003 fdb5 	bl	8009f84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f004 fe5c 	bl	800b0dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006436:	b590      	push	{r4, r7, lr}
 8006438:	b08d      	sub	sp, #52	@ 0x34
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f004 ff1a 	bl	800b286 <USB_GetMode>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 848c 	bne.w	8006d72 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f004 fe7e 	bl	800b160 <USB_ReadInterrupts>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8482 	beq.w	8006d70 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f004 fe6b 	bl	800b160 <USB_ReadInterrupts>
 800648a:	4603      	mov	r3, r0
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d107      	bne.n	80064a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f002 0202 	and.w	r2, r2, #2
 80064a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f004 fe59 	bl	800b160 <USB_ReadInterrupts>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d161      	bne.n	800657c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0210 	bic.w	r2, r2, #16
 80064c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80064ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064f2:	d124      	bne.n	800653e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d035      	beq.n	800656c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	091b      	lsrs	r3, r3, #4
 8006508:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800650a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800650e:	b29b      	uxth	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	6a38      	ldr	r0, [r7, #32]
 8006514:	f004 fc90 	bl	800ae38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	091b      	lsrs	r3, r3, #4
 8006520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006524:	441a      	add	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006536:	441a      	add	r2, r3
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	615a      	str	r2, [r3, #20]
 800653c:	e016      	b.n	800656c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006544:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006548:	d110      	bne.n	800656c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006550:	2208      	movs	r2, #8
 8006552:	4619      	mov	r1, r3
 8006554:	6a38      	ldr	r0, [r7, #32]
 8006556:	f004 fc6f 	bl	800ae38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006566:	441a      	add	r2, r3
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0210 	orr.w	r2, r2, #16
 800657a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f004 fded 	bl	800b160 <USB_ReadInterrupts>
 8006586:	4603      	mov	r3, r0
 8006588:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800658c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006590:	f040 80a7 	bne.w	80066e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	f004 fdf2 	bl	800b186 <USB_ReadDevAllOutEpInterrupt>
 80065a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80065a4:	e099      	b.n	80066da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 808e 	beq.w	80066ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f004 fe16 	bl	800b1ee <USB_ReadDevOutEPInterrupt>
 80065c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065da:	461a      	mov	r2, r3
 80065dc:	2301      	movs	r3, #1
 80065de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80065e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fea4 	bl	8007330 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fe:	461a      	mov	r2, r3
 8006600:	2308      	movs	r3, #8
 8006602:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 ff7a 	bl	8007500 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f003 0310 	and.w	r3, r3, #16
 8006612:	2b00      	cmp	r3, #0
 8006614:	d008      	beq.n	8006628 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006622:	461a      	mov	r2, r3
 8006624:	2310      	movs	r3, #16
 8006626:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d030      	beq.n	8006694 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663a:	2b80      	cmp	r3, #128	@ 0x80
 800663c:	d109      	bne.n	8006652 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800664c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006650:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	4413      	add	r3, r2
 8006664:	3304      	adds	r3, #4
 8006666:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d108      	bne.n	8006682 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f007 fa29 	bl	800dad4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668e:	461a      	mov	r2, r3
 8006690:	2302      	movs	r3, #2
 8006692:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066aa:	461a      	mov	r2, r3
 80066ac:	2320      	movs	r3, #32
 80066ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c6:	461a      	mov	r2, r3
 80066c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	3301      	adds	r3, #1
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f47f af62 	bne.w	80065a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f004 fd3a 	bl	800b160 <USB_ReadInterrupts>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066f6:	f040 80db 	bne.w	80068b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f004 fd5b 	bl	800b1ba <USB_ReadDevAllInEpInterrupt>
 8006704:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800670a:	e0cd      	b.n	80068a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80c2 	beq.w	800689c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f004 fd81 	bl	800b22a <USB_ReadDevInEPInterrupt>
 8006728:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d057      	beq.n	80067e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	2201      	movs	r2, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	43db      	mvns	r3, r3
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006754:	4013      	ands	r3, r2
 8006756:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	461a      	mov	r2, r3
 8006766:	2301      	movs	r3, #1
 8006768:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	799b      	ldrb	r3, [r3, #6]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d132      	bne.n	80067d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006776:	4613      	mov	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	3320      	adds	r3, #32
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006788:	4613      	mov	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4403      	add	r3, r0
 8006792:	331c      	adds	r3, #28
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4419      	add	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4403      	add	r3, r0
 80067a6:	3320      	adds	r3, #32
 80067a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d113      	bne.n	80067d8 <HAL_PCD_IRQHandler+0x3a2>
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b4:	4613      	mov	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	3324      	adds	r3, #36	@ 0x24
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d108      	bne.n	80067d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067d0:	461a      	mov	r2, r3
 80067d2:	2101      	movs	r1, #1
 80067d4:	f004 fd88 	bl	800b2e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f007 f8fd 	bl	800d9de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fa:	461a      	mov	r2, r3
 80067fc:	2308      	movs	r3, #8
 80067fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006816:	461a      	mov	r2, r3
 8006818:	2310      	movs	r3, #16
 800681a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006832:	461a      	mov	r2, r3
 8006834:	2340      	movs	r3, #64	@ 0x40
 8006836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d023      	beq.n	800688a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006842:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006844:	6a38      	ldr	r0, [r7, #32]
 8006846:	f003 fd6f 	bl	800a328 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800684a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	3310      	adds	r3, #16
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	3304      	adds	r3, #4
 800685c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	78db      	ldrb	r3, [r3, #3]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d108      	bne.n	8006878 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2200      	movs	r2, #0
 800686a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	b2db      	uxtb	r3, r3
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f007 f940 	bl	800daf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006884:	461a      	mov	r2, r3
 8006886:	2302      	movs	r3, #2
 8006888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fcbd 	bl	8007216 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	3301      	adds	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f47f af2e 	bne.w	800670c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f004 fc53 	bl	800b160 <USB_ReadInterrupts>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068c4:	d122      	bne.n	800690c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d108      	bne.n	80068f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80068ec:	2100      	movs	r1, #0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fea4 	bl	800763c <HAL_PCDEx_LPM_Callback>
 80068f4:	e002      	b.n	80068fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f007 f8de 	bl	800dab8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800690a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f004 fc25 	bl	800b160 <USB_ReadInterrupts>
 8006916:	4603      	mov	r3, r0
 8006918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800691c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006920:	d112      	bne.n	8006948 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d102      	bne.n	8006938 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f007 f89a 	bl	800da6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006946:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f004 fc07 	bl	800b160 <USB_ReadInterrupts>
 8006952:	4603      	mov	r3, r0
 8006954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800695c:	f040 80b7 	bne.w	8006ace <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2110      	movs	r1, #16
 800697a:	4618      	mov	r0, r3
 800697c:	f003 fcd4 	bl	800a328 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006984:	e046      	b.n	8006a14 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006992:	461a      	mov	r2, r3
 8006994:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006998:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80069ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c6:	461a      	mov	r2, r3
 80069c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	3301      	adds	r3, #1
 8006a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	791b      	ldrb	r3, [r3, #4]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d3b2      	bcc.n	8006986 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a2e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006a32:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	7bdb      	ldrb	r3, [r3, #15]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d016      	beq.n	8006a6a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a4c:	f043 030b 	orr.w	r3, r3, #11
 8006a50:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a62:	f043 030b 	orr.w	r3, r3, #11
 8006a66:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a68:	e015      	b.n	8006a96 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006a7c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006a80:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a90:	f043 030b 	orr.w	r3, r3, #11
 8006a94:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aa4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006aa8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f004 fc15 	bl	800b2e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695a      	ldr	r2, [r3, #20]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f004 fb44 	bl	800b160 <USB_ReadInterrupts>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ae2:	d123      	bne.n	8006b2c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f004 fbda 	bl	800b2a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f003 fc91 	bl	800a41a <USB_GetDevSpeed>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681c      	ldr	r4, [r3, #0]
 8006b04:	f001 f9ca 	bl	8007e9c <HAL_RCC_GetHCLKFreq>
 8006b08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4620      	mov	r0, r4
 8006b12:	f003 f995 	bl	8009e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f006 ff89 	bl	800da2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f004 fb15 	bl	800b160 <USB_ReadInterrupts>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d10a      	bne.n	8006b56 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f006 ff66 	bl	800da12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f002 0208 	and.w	r2, r2, #8
 8006b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f004 fb00 	bl	800b160 <USB_ReadInterrupts>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b66:	2b80      	cmp	r3, #128	@ 0x80
 8006b68:	d123      	bne.n	8006bb2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b76:	2301      	movs	r3, #1
 8006b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b7a:	e014      	b.n	8006ba6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d105      	bne.n	8006ba0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fb0a 	bl	80071b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	791b      	ldrb	r3, [r3, #4]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d3e4      	bcc.n	8006b7c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f004 fad2 	bl	800b160 <USB_ReadInterrupts>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bc6:	d13c      	bne.n	8006c42 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bc8:	2301      	movs	r3, #1
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bcc:	e02b      	b.n	8006c26 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be2:	4613      	mov	r3, r2
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	3318      	adds	r3, #24
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d115      	bne.n	8006c20 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006bf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da12      	bge.n	8006c20 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bfe:	4613      	mov	r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	3317      	adds	r3, #23
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 faca 	bl	80071b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	3301      	adds	r3, #1
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	791b      	ldrb	r3, [r3, #4]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d3cd      	bcc.n	8006bce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f004 fa8a 	bl	800b160 <USB_ReadInterrupts>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c56:	d156      	bne.n	8006d06 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c58:	2301      	movs	r3, #1
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5c:	e045      	b.n	8006cea <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c72:	4613      	mov	r3, r2
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d12e      	bne.n	8006ce4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da2b      	bge.n	8006ce4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	0c1a      	lsrs	r2, r3, #16
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006c96:	4053      	eors	r3, r2
 8006c98:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d121      	bne.n	8006ce4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ce0:	6053      	str	r3, [r2, #4]
            break;
 8006ce2:	e008      	b.n	8006cf6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d3b3      	bcc.n	8006c5e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f004 fa28 	bl	800b160 <USB_ReadInterrupts>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1a:	d10a      	bne.n	8006d32 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f006 fefd 	bl	800db1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f004 fa12 	bl	800b160 <USB_ReadInterrupts>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d115      	bne.n	8006d72 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f006 feed 	bl	800db38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6859      	ldr	r1, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e000      	b.n	8006d72 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006d70:	bf00      	nop
    }
  }
}
 8006d72:	3734      	adds	r7, #52	@ 0x34
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd90      	pop	{r4, r7, pc}

08006d78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_PCD_SetAddress+0x1a>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e012      	b.n	8006db8 <HAL_PCD_SetAddress+0x40>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f004 f971 	bl	800b090 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4603      	mov	r3, r0
 8006dd0:	70fb      	strb	r3, [r7, #3]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	803b      	strh	r3, [r7, #0]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da0f      	bge.n	8006e06 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	f003 020f 	and.w	r2, r3, #15
 8006dec:	4613      	mov	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	3310      	adds	r3, #16
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4413      	add	r3, r2
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	705a      	strb	r2, [r3, #1]
 8006e04:	e00f      	b.n	8006e26 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	f003 020f 	and.w	r2, r3, #15
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006e32:	883b      	ldrh	r3, [r7, #0]
 8006e34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	78ba      	ldrb	r2, [r7, #2]
 8006e40:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e54:	78bb      	ldrb	r3, [r7, #2]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d102      	bne.n	8006e60 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_PCD_EP_Open+0xae>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e00e      	b.n	8006e8c <HAL_PCD_EP_Open+0xcc>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f003 faf1 	bl	800a464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	da0f      	bge.n	8006ec8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	f003 020f 	and.w	r2, r3, #15
 8006eae:	4613      	mov	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	3310      	adds	r3, #16
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	705a      	strb	r2, [r3, #1]
 8006ec6:	e00f      	b.n	8006ee8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	f003 020f 	and.w	r2, r3, #15
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	3304      	adds	r3, #4
 8006ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_PCD_EP_Close+0x6e>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e00e      	b.n	8006f20 <HAL_PCD_EP_Close+0x8c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f003 fb2f 	bl	800a574 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	460b      	mov	r3, r1
 8006f36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	f003 020f 	and.w	r2, r3, #15
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3304      	adds	r3, #4
 8006f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2200      	movs	r2, #0
 8006f62:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	799b      	ldrb	r3, [r3, #6]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d102      	bne.n	8006f84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	799b      	ldrb	r3, [r3, #6]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6979      	ldr	r1, [r7, #20]
 8006f90:	f003 fbcc 	bl	800a72c <USB_EPStartXfer>

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006fc0:	681b      	ldr	r3, [r3, #0]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	3310      	adds	r3, #16
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2201      	movs	r2, #1
 800700c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	b2da      	uxtb	r2, r3
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	799b      	ldrb	r3, [r3, #6]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d102      	bne.n	8007028 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	799b      	ldrb	r3, [r3, #6]
 8007030:	461a      	mov	r2, r3
 8007032:	6979      	ldr	r1, [r7, #20]
 8007034:	f003 fb7a 	bl	800a72c <USB_EPStartXfer>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7912      	ldrb	r2, [r2, #4]
 8007058:	4293      	cmp	r3, r2
 800705a:	d901      	bls.n	8007060 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e04f      	b.n	8007100 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007064:	2b00      	cmp	r3, #0
 8007066:	da0f      	bge.n	8007088 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	f003 020f 	and.w	r2, r3, #15
 800706e:	4613      	mov	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	3310      	adds	r3, #16
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	3304      	adds	r3, #4
 800707e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	705a      	strb	r2, [r3, #1]
 8007086:	e00d      	b.n	80070a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	4613      	mov	r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	4413      	add	r3, r2
 800709a:	3304      	adds	r3, #4
 800709c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_PCD_EP_SetStall+0x82>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e01d      	b.n	8007100 <HAL_PCD_EP_SetStall+0xbe>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68f9      	ldr	r1, [r7, #12]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f003 ff08 	bl	800aee8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7999      	ldrb	r1, [r3, #6]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070f0:	461a      	mov	r2, r3
 80070f2:	f004 f8f9 	bl	800b2e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	7912      	ldrb	r2, [r2, #4]
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e042      	b.n	80071ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800712a:	2b00      	cmp	r3, #0
 800712c:	da0f      	bge.n	800714e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	4613      	mov	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4413      	add	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	3310      	adds	r3, #16
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	3304      	adds	r3, #4
 8007144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	705a      	strb	r2, [r3, #1]
 800714c:	e00f      	b.n	800716e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	f003 020f 	and.w	r2, r3, #15
 8007154:	4613      	mov	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	4413      	add	r3, r2
 8007164:	3304      	adds	r3, #4
 8007166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	b2da      	uxtb	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_PCD_EP_ClrStall+0x86>
 800718a:	2302      	movs	r3, #2
 800718c:	e00e      	b.n	80071ac <HAL_PCD_EP_ClrStall+0xa4>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	4618      	mov	r0, r3
 800719e:	f003 ff11 	bl	800afc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80071c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da0c      	bge.n	80071e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	f003 020f 	and.w	r2, r3, #15
 80071ce:	4613      	mov	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	3310      	adds	r3, #16
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	4413      	add	r3, r2
 80071dc:	3304      	adds	r3, #4
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	e00c      	b.n	80071fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	f003 020f 	and.w	r2, r3, #15
 80071e8:	4613      	mov	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4413      	add	r3, r2
 80071f8:	3304      	adds	r3, #4
 80071fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68f9      	ldr	r1, [r7, #12]
 8007202:	4618      	mov	r0, r3
 8007204:	f003 fd30 	bl	800ac68 <USB_EPStopXfer>
 8007208:	4603      	mov	r3, r0
 800720a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800720c:	7afb      	ldrb	r3, [r7, #11]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b08a      	sub	sp, #40	@ 0x28
 800721a:	af02      	add	r7, sp, #8
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	3310      	adds	r3, #16
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	4413      	add	r3, r2
 800723a:	3304      	adds	r3, #4
 800723c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	695a      	ldr	r2, [r3, #20]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	d901      	bls.n	800724e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e06b      	b.n	8007326 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	429a      	cmp	r2, r3
 8007262:	d902      	bls.n	800726a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3303      	adds	r3, #3
 800726e:	089b      	lsrs	r3, r3, #2
 8007270:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007272:	e02a      	b.n	80072ca <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	429a      	cmp	r2, r3
 8007288:	d902      	bls.n	8007290 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	3303      	adds	r3, #3
 8007294:	089b      	lsrs	r3, r3, #2
 8007296:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	68d9      	ldr	r1, [r3, #12]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	4603      	mov	r3, r0
 80072ac:	6978      	ldr	r0, [r7, #20]
 80072ae:	f003 fd85 	bl	800adbc <USB_WritePacket>

    ep->xfer_buff  += len;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d809      	bhi.n	80072f4 <PCD_WriteEmptyTxFifo+0xde>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	695a      	ldr	r2, [r3, #20]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d203      	bcs.n	80072f4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1bf      	bne.n	8007274 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d811      	bhi.n	8007324 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	43db      	mvns	r3, r3
 800731a:	6939      	ldr	r1, [r7, #16]
 800731c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007320:	4013      	ands	r3, r2
 8007322:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	333c      	adds	r3, #60	@ 0x3c
 8007348:	3304      	adds	r3, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	799b      	ldrb	r3, [r3, #6]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d17b      	bne.n	800745e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d015      	beq.n	800739c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	4a61      	ldr	r2, [pc, #388]	@ (80074f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	f240 80b9 	bls.w	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80b3 	beq.w	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007392:	461a      	mov	r2, r3
 8007394:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007398:	6093      	str	r3, [r2, #8]
 800739a:	e0a7      	b.n	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b2:	461a      	mov	r2, r3
 80073b4:	2320      	movs	r3, #32
 80073b6:	6093      	str	r3, [r2, #8]
 80073b8:	e098      	b.n	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 8093 	bne.w	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4a4b      	ldr	r2, [pc, #300]	@ (80074f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d90f      	bls.n	80073ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e4:	461a      	mov	r2, r3
 80073e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ea:	6093      	str	r3, [r2, #8]
 80073ec:	e07e      	b.n	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4613      	mov	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	4413      	add	r3, r2
 8007400:	3304      	adds	r3, #4
 8007402:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1a      	ldr	r2, [r3, #32]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	0159      	lsls	r1, r3, #5
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	440b      	add	r3, r1
 8007410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800741a:	1ad2      	subs	r2, r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d114      	bne.n	8007450 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007438:	461a      	mov	r2, r3
 800743a:	2101      	movs	r1, #1
 800743c:	f003 ff54 	bl	800b2e8 <USB_EP0_OutStart>
 8007440:	e006      	b.n	8007450 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	441a      	add	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f006 faa6 	bl	800d9a8 <HAL_PCD_DataOutStageCallback>
 800745c:	e046      	b.n	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	4a26      	ldr	r2, [pc, #152]	@ (80074fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d124      	bne.n	80074b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00a      	beq.n	8007486 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800747c:	461a      	mov	r2, r3
 800747e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007482:	6093      	str	r3, [r2, #8]
 8007484:	e032      	b.n	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749c:	461a      	mov	r2, r3
 800749e:	2320      	movs	r3, #32
 80074a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f006 fa7d 	bl	800d9a8 <HAL_PCD_DataOutStageCallback>
 80074ae:	e01d      	b.n	80074ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d114      	bne.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	4613      	mov	r3, r2
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	440b      	add	r3, r1
 80074c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d108      	bne.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074d8:	461a      	mov	r2, r3
 80074da:	2100      	movs	r1, #0
 80074dc:	f003 ff04 	bl	800b2e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f006 fa5e 	bl	800d9a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	4f54300a 	.word	0x4f54300a
 80074fc:	4f54310a 	.word	0x4f54310a

08007500 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	333c      	adds	r3, #60	@ 0x3c
 8007518:	3304      	adds	r3, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4a15      	ldr	r2, [pc, #84]	@ (8007588 <PCD_EP_OutSetupPacket_int+0x88>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d90e      	bls.n	8007554 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800753c:	2b00      	cmp	r3, #0
 800753e:	d009      	beq.n	8007554 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754c:	461a      	mov	r2, r3
 800754e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007552:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f006 fa15 	bl	800d984 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a0a      	ldr	r2, [pc, #40]	@ (8007588 <PCD_EP_OutSetupPacket_int+0x88>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d90c      	bls.n	800757c <PCD_EP_OutSetupPacket_int+0x7c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	799b      	ldrb	r3, [r3, #6]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d108      	bne.n	800757c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007574:	461a      	mov	r2, r3
 8007576:	2101      	movs	r1, #1
 8007578:	f003 feb6 	bl	800b2e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	4f54300a 	.word	0x4f54300a

0800758c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
 8007598:	4613      	mov	r3, r2
 800759a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80075aa:	883b      	ldrh	r3, [r7, #0]
 80075ac:	0419      	lsls	r1, r3, #16
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80075b8:	e028      	b.n	800760c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	0c1b      	lsrs	r3, r3, #16
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	4413      	add	r3, r2
 80075c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
 80075cc:	e00d      	b.n	80075ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	3340      	adds	r3, #64	@ 0x40
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	0c1b      	lsrs	r3, r3, #16
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	3301      	adds	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
 80075ea:	7bfa      	ldrb	r2, [r7, #15]
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d3ec      	bcc.n	80075ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075f4:	883b      	ldrh	r3, [r7, #0]
 80075f6:	0418      	lsls	r0, r3, #16
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6819      	ldr	r1, [r3, #0]
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	3b01      	subs	r3, #1
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	4302      	orrs	r2, r0
 8007604:	3340      	adds	r3, #64	@ 0x40
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	887a      	ldrh	r2, [r7, #2]
 800762c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e267      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d075      	beq.n	800775e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007672:	4b88      	ldr	r3, [pc, #544]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
 800767a:	2b04      	cmp	r3, #4
 800767c:	d00c      	beq.n	8007698 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800767e:	4b85      	ldr	r3, [pc, #532]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007686:	2b08      	cmp	r3, #8
 8007688:	d112      	bne.n	80076b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800768a:	4b82      	ldr	r3, [pc, #520]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007696:	d10b      	bne.n	80076b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007698:	4b7e      	ldr	r3, [pc, #504]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05b      	beq.n	800775c <HAL_RCC_OscConfig+0x108>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d157      	bne.n	800775c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e242      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b8:	d106      	bne.n	80076c8 <HAL_RCC_OscConfig+0x74>
 80076ba:	4b76      	ldr	r3, [pc, #472]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a75      	ldr	r2, [pc, #468]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e01d      	b.n	8007704 <HAL_RCC_OscConfig+0xb0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076d0:	d10c      	bne.n	80076ec <HAL_RCC_OscConfig+0x98>
 80076d2:	4b70      	ldr	r3, [pc, #448]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6f      	ldr	r2, [pc, #444]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	4b6d      	ldr	r3, [pc, #436]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a6c      	ldr	r2, [pc, #432]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	e00b      	b.n	8007704 <HAL_RCC_OscConfig+0xb0>
 80076ec:	4b69      	ldr	r3, [pc, #420]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a68      	ldr	r2, [pc, #416]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	4b66      	ldr	r3, [pc, #408]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a65      	ldr	r2, [pc, #404]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80076fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d013      	beq.n	8007734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770c:	f7fb fad4 	bl	8002cb8 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007714:	f7fb fad0 	bl	8002cb8 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b64      	cmp	r3, #100	@ 0x64
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e207      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007726:	4b5b      	ldr	r3, [pc, #364]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f0      	beq.n	8007714 <HAL_RCC_OscConfig+0xc0>
 8007732:	e014      	b.n	800775e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007734:	f7fb fac0 	bl	8002cb8 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800773c:	f7fb fabc 	bl	8002cb8 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b64      	cmp	r3, #100	@ 0x64
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e1f3      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800774e:	4b51      	ldr	r3, [pc, #324]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0xe8>
 800775a:	e000      	b.n	800775e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800775c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d063      	beq.n	8007832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800776a:	4b4a      	ldr	r3, [pc, #296]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007776:	4b47      	ldr	r3, [pc, #284]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800777e:	2b08      	cmp	r3, #8
 8007780:	d11c      	bne.n	80077bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007782:	4b44      	ldr	r3, [pc, #272]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d116      	bne.n	80077bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800778e:	4b41      	ldr	r3, [pc, #260]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_RCC_OscConfig+0x152>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d001      	beq.n	80077a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e1c7      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4937      	ldr	r1, [pc, #220]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ba:	e03a      	b.n	8007832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077c4:	4b34      	ldr	r3, [pc, #208]	@ (8007898 <HAL_RCC_OscConfig+0x244>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ca:	f7fb fa75 	bl	8002cb8 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d2:	f7fb fa71 	bl	8002cb8 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e1a8      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077f0:	4b28      	ldr	r3, [pc, #160]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4925      	ldr	r1, [pc, #148]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007800:	4313      	orrs	r3, r2
 8007802:	600b      	str	r3, [r1, #0]
 8007804:	e015      	b.n	8007832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007806:	4b24      	ldr	r3, [pc, #144]	@ (8007898 <HAL_RCC_OscConfig+0x244>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7fb fa54 	bl	8002cb8 <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007814:	f7fb fa50 	bl	8002cb8 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e187      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007826:	4b1b      	ldr	r3, [pc, #108]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f0      	bne.n	8007814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d036      	beq.n	80078ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007846:	4b15      	ldr	r3, [pc, #84]	@ (800789c <HAL_RCC_OscConfig+0x248>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784c:	f7fb fa34 	bl	8002cb8 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007854:	f7fb fa30 	bl	8002cb8 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e167      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007866:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <HAL_RCC_OscConfig+0x240>)
 8007868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x200>
 8007872:	e01b      	b.n	80078ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007874:	4b09      	ldr	r3, [pc, #36]	@ (800789c <HAL_RCC_OscConfig+0x248>)
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800787a:	f7fb fa1d 	bl	8002cb8 <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007880:	e00e      	b.n	80078a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007882:	f7fb fa19 	bl	8002cb8 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d907      	bls.n	80078a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e150      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
 8007894:	40023800 	.word	0x40023800
 8007898:	42470000 	.word	0x42470000
 800789c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078a0:	4b88      	ldr	r3, [pc, #544]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80078a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1ea      	bne.n	8007882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8097 	beq.w	80079e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ba:	2300      	movs	r3, #0
 80078bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078be:	4b81      	ldr	r3, [pc, #516]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80078c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10f      	bne.n	80078ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ca:	2300      	movs	r3, #0
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	4b7d      	ldr	r3, [pc, #500]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	4a7c      	ldr	r2, [pc, #496]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80078d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80078da:	4b7a      	ldr	r3, [pc, #488]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e2:	60bb      	str	r3, [r7, #8]
 80078e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ea:	4b77      	ldr	r3, [pc, #476]	@ (8007ac8 <HAL_RCC_OscConfig+0x474>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d118      	bne.n	8007928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078f6:	4b74      	ldr	r3, [pc, #464]	@ (8007ac8 <HAL_RCC_OscConfig+0x474>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a73      	ldr	r2, [pc, #460]	@ (8007ac8 <HAL_RCC_OscConfig+0x474>)
 80078fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007902:	f7fb f9d9 	bl	8002cb8 <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007908:	e008      	b.n	800791c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800790a:	f7fb f9d5 	bl	8002cb8 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e10c      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800791c:	4b6a      	ldr	r3, [pc, #424]	@ (8007ac8 <HAL_RCC_OscConfig+0x474>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0f0      	beq.n	800790a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d106      	bne.n	800793e <HAL_RCC_OscConfig+0x2ea>
 8007930:	4b64      	ldr	r3, [pc, #400]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007934:	4a63      	ldr	r2, [pc, #396]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	6713      	str	r3, [r2, #112]	@ 0x70
 800793c:	e01c      	b.n	8007978 <HAL_RCC_OscConfig+0x324>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2b05      	cmp	r3, #5
 8007944:	d10c      	bne.n	8007960 <HAL_RCC_OscConfig+0x30c>
 8007946:	4b5f      	ldr	r3, [pc, #380]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800794a:	4a5e      	ldr	r2, [pc, #376]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 800794c:	f043 0304 	orr.w	r3, r3, #4
 8007950:	6713      	str	r3, [r2, #112]	@ 0x70
 8007952:	4b5c      	ldr	r3, [pc, #368]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007956:	4a5b      	ldr	r2, [pc, #364]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	6713      	str	r3, [r2, #112]	@ 0x70
 800795e:	e00b      	b.n	8007978 <HAL_RCC_OscConfig+0x324>
 8007960:	4b58      	ldr	r3, [pc, #352]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007964:	4a57      	ldr	r2, [pc, #348]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007966:	f023 0301 	bic.w	r3, r3, #1
 800796a:	6713      	str	r3, [r2, #112]	@ 0x70
 800796c:	4b55      	ldr	r3, [pc, #340]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007970:	4a54      	ldr	r2, [pc, #336]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007972:	f023 0304 	bic.w	r3, r3, #4
 8007976:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d015      	beq.n	80079ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007980:	f7fb f99a 	bl	8002cb8 <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007986:	e00a      	b.n	800799e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007988:	f7fb f996 	bl	8002cb8 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007996:	4293      	cmp	r3, r2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e0cb      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799e:	4b49      	ldr	r3, [pc, #292]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0ee      	beq.n	8007988 <HAL_RCC_OscConfig+0x334>
 80079aa:	e014      	b.n	80079d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ac:	f7fb f984 	bl	8002cb8 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b2:	e00a      	b.n	80079ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b4:	f7fb f980 	bl	8002cb8 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e0b5      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ca:	4b3e      	ldr	r3, [pc, #248]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80079cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1ee      	bne.n	80079b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d105      	bne.n	80079e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079dc:	4b39      	ldr	r3, [pc, #228]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80079de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e0:	4a38      	ldr	r2, [pc, #224]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80079e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80a1 	beq.w	8007b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079f2:	4b34      	ldr	r3, [pc, #208]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 030c 	and.w	r3, r3, #12
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d05c      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d141      	bne.n	8007a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a06:	4b31      	ldr	r3, [pc, #196]	@ (8007acc <HAL_RCC_OscConfig+0x478>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0c:	f7fb f954 	bl	8002cb8 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a14:	f7fb f950 	bl	8002cb8 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e087      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a26:	4b27      	ldr	r3, [pc, #156]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f0      	bne.n	8007a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69da      	ldr	r2, [r3, #28]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	019b      	lsls	r3, r3, #6
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	061b      	lsls	r3, r3, #24
 8007a56:	491b      	ldr	r1, [pc, #108]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007acc <HAL_RCC_OscConfig+0x478>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a62:	f7fb f929 	bl	8002cb8 <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6a:	f7fb f925 	bl	8002cb8 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e05c      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7c:	4b11      	ldr	r3, [pc, #68]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0f0      	beq.n	8007a6a <HAL_RCC_OscConfig+0x416>
 8007a88:	e054      	b.n	8007b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8a:	4b10      	ldr	r3, [pc, #64]	@ (8007acc <HAL_RCC_OscConfig+0x478>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a90:	f7fb f912 	bl	8002cb8 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a98:	f7fb f90e 	bl	8002cb8 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e045      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aaa:	4b06      	ldr	r3, [pc, #24]	@ (8007ac4 <HAL_RCC_OscConfig+0x470>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f0      	bne.n	8007a98 <HAL_RCC_OscConfig+0x444>
 8007ab6:	e03d      	b.n	8007b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d107      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e038      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	40007000 	.word	0x40007000
 8007acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b40 <HAL_RCC_OscConfig+0x4ec>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d028      	beq.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d121      	bne.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d11a      	bne.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d111      	bne.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d107      	bne.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d001      	beq.n	8007b34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	40023800 	.word	0x40023800

08007b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0cc      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b58:	4b68      	ldr	r3, [pc, #416]	@ (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d90c      	bls.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b65      	ldr	r3, [pc, #404]	@ (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b63      	ldr	r3, [pc, #396]	@ (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0b8      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d020      	beq.n	8007bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b98:	4b59      	ldr	r3, [pc, #356]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4a58      	ldr	r2, [pc, #352]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bb0:	4b53      	ldr	r3, [pc, #332]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a52      	ldr	r2, [pc, #328]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bbc:	4b50      	ldr	r3, [pc, #320]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	494d      	ldr	r1, [pc, #308]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d044      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d107      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007be2:	4b47      	ldr	r3, [pc, #284]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d119      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e07f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d107      	bne.n	8007c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c02:	4b3f      	ldr	r3, [pc, #252]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e06f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c12:	4b3b      	ldr	r3, [pc, #236]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e067      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c22:	4b37      	ldr	r3, [pc, #220]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f023 0203 	bic.w	r2, r3, #3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4934      	ldr	r1, [pc, #208]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c34:	f7fb f840 	bl	8002cb8 <HAL_GetTick>
 8007c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3a:	e00a      	b.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c3c:	f7fb f83c 	bl	8002cb8 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e04f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c52:	4b2b      	ldr	r3, [pc, #172]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 020c 	and.w	r2, r3, #12
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d1eb      	bne.n	8007c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c64:	4b25      	ldr	r3, [pc, #148]	@ (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d20c      	bcs.n	8007c8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c72:	4b22      	ldr	r3, [pc, #136]	@ (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7a:	4b20      	ldr	r3, [pc, #128]	@ (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d001      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e032      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c98:	4b19      	ldr	r3, [pc, #100]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	4916      	ldr	r1, [pc, #88]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cb6:	4b12      	ldr	r3, [pc, #72]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	490e      	ldr	r1, [pc, #56]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cca:	f000 f821 	bl	8007d10 <HAL_RCC_GetSysClockFreq>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	091b      	lsrs	r3, r3, #4
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	490a      	ldr	r1, [pc, #40]	@ (8007d04 <HAL_RCC_ClockConfig+0x1c0>)
 8007cdc:	5ccb      	ldrb	r3, [r1, r3]
 8007cde:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce2:	4a09      	ldr	r2, [pc, #36]	@ (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007ce6:	4b09      	ldr	r3, [pc, #36]	@ (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fa ffa0 	bl	8002c30 <HAL_InitTick>

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40023c00 	.word	0x40023c00
 8007d00:	40023800 	.word	0x40023800
 8007d04:	08012628 	.word	0x08012628
 8007d08:	20000000 	.word	0x20000000
 8007d0c:	20000004 	.word	0x20000004

08007d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d14:	b090      	sub	sp, #64	@ 0x40
 8007d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d28:	4b59      	ldr	r3, [pc, #356]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 030c 	and.w	r3, r3, #12
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d00d      	beq.n	8007d50 <HAL_RCC_GetSysClockFreq+0x40>
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	f200 80a1 	bhi.w	8007e7c <HAL_RCC_GetSysClockFreq+0x16c>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_RCC_GetSysClockFreq+0x34>
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d003      	beq.n	8007d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8007d42:	e09b      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d44:	4b53      	ldr	r3, [pc, #332]	@ (8007e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d48:	e09b      	b.n	8007e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d4a:	4b53      	ldr	r3, [pc, #332]	@ (8007e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d4e:	e098      	b.n	8007e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d50:	4b4f      	ldr	r3, [pc, #316]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d028      	beq.n	8007db8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d66:	4b4a      	ldr	r3, [pc, #296]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	099b      	lsrs	r3, r3, #6
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	623b      	str	r3, [r7, #32]
 8007d70:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4b47      	ldr	r3, [pc, #284]	@ (8007e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d7c:	fb03 f201 	mul.w	r2, r3, r1
 8007d80:	2300      	movs	r3, #0
 8007d82:	fb00 f303 	mul.w	r3, r0, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	4a43      	ldr	r2, [pc, #268]	@ (8007e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d8a:	fba0 1202 	umull	r1, r2, r0, r2
 8007d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d90:	460a      	mov	r2, r1
 8007d92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d96:	4413      	add	r3, r2
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	61fa      	str	r2, [r7, #28]
 8007da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007daa:	f7f8 ff75 	bl	8000c98 <__aeabi_uldivmod>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4613      	mov	r3, r2
 8007db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007db6:	e053      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007db8:	4b35      	ldr	r3, [pc, #212]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	099b      	lsrs	r3, r3, #6
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	617a      	str	r2, [r7, #20]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007dca:	f04f 0b00 	mov.w	fp, #0
 8007dce:	4652      	mov	r2, sl
 8007dd0:	465b      	mov	r3, fp
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f04f 0100 	mov.w	r1, #0
 8007dda:	0159      	lsls	r1, r3, #5
 8007ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007de0:	0150      	lsls	r0, r2, #5
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	ebb2 080a 	subs.w	r8, r2, sl
 8007dea:	eb63 090b 	sbc.w	r9, r3, fp
 8007dee:	f04f 0200 	mov.w	r2, #0
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007dfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007dfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e02:	ebb2 0408 	subs.w	r4, r2, r8
 8007e06:	eb63 0509 	sbc.w	r5, r3, r9
 8007e0a:	f04f 0200 	mov.w	r2, #0
 8007e0e:	f04f 0300 	mov.w	r3, #0
 8007e12:	00eb      	lsls	r3, r5, #3
 8007e14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e18:	00e2      	lsls	r2, r4, #3
 8007e1a:	4614      	mov	r4, r2
 8007e1c:	461d      	mov	r5, r3
 8007e1e:	eb14 030a 	adds.w	r3, r4, sl
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	eb45 030b 	adc.w	r3, r5, fp
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e36:	4629      	mov	r1, r5
 8007e38:	028b      	lsls	r3, r1, #10
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e40:	4621      	mov	r1, r4
 8007e42:	028a      	lsls	r2, r1, #10
 8007e44:	4610      	mov	r0, r2
 8007e46:	4619      	mov	r1, r3
 8007e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	60bb      	str	r3, [r7, #8]
 8007e4e:	60fa      	str	r2, [r7, #12]
 8007e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e54:	f7f8 ff20 	bl	8000c98 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007e60:	4b0b      	ldr	r3, [pc, #44]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007e70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e7a:	e002      	b.n	8007e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e7c:	4b05      	ldr	r3, [pc, #20]	@ (8007e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3740      	adds	r7, #64	@ 0x40
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e8e:	bf00      	nop
 8007e90:	40023800 	.word	0x40023800
 8007e94:	00f42400 	.word	0x00f42400
 8007e98:	017d7840 	.word	0x017d7840

08007e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ea0:	4b03      	ldr	r3, [pc, #12]	@ (8007eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000000 	.word	0x20000000

08007eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007eb8:	f7ff fff0 	bl	8007e9c <HAL_RCC_GetHCLKFreq>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	0a9b      	lsrs	r3, r3, #10
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	4903      	ldr	r1, [pc, #12]	@ (8007ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eca:	5ccb      	ldrb	r3, [r1, r3]
 8007ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40023800 	.word	0x40023800
 8007ed8:	08012638 	.word	0x08012638

08007edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ee0:	f7ff ffdc 	bl	8007e9c <HAL_RCC_GetHCLKFreq>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	4b05      	ldr	r3, [pc, #20]	@ (8007efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	0b5b      	lsrs	r3, r3, #13
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	4903      	ldr	r1, [pc, #12]	@ (8007f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ef2:	5ccb      	ldrb	r3, [r1, r3]
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40023800 	.word	0x40023800
 8007f00:	08012638 	.word	0x08012638

08007f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e041      	b.n	8007f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d106      	bne.n	8007f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7fa fba0 	bl	8002670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f000 fc3c 	bl	80087c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e044      	b.n	8008046 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8008054 <HAL_TIM_Base_Start_IT+0xb0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d018      	beq.n	8008010 <HAL_TIM_Base_Start_IT+0x6c>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe6:	d013      	beq.n	8008010 <HAL_TIM_Base_Start_IT+0x6c>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1a      	ldr	r2, [pc, #104]	@ (8008058 <HAL_TIM_Base_Start_IT+0xb4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00e      	beq.n	8008010 <HAL_TIM_Base_Start_IT+0x6c>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a19      	ldr	r2, [pc, #100]	@ (800805c <HAL_TIM_Base_Start_IT+0xb8>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d009      	beq.n	8008010 <HAL_TIM_Base_Start_IT+0x6c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a17      	ldr	r2, [pc, #92]	@ (8008060 <HAL_TIM_Base_Start_IT+0xbc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d004      	beq.n	8008010 <HAL_TIM_Base_Start_IT+0x6c>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a16      	ldr	r2, [pc, #88]	@ (8008064 <HAL_TIM_Base_Start_IT+0xc0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d111      	bne.n	8008034 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b06      	cmp	r3, #6
 8008020:	d010      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0201 	orr.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008032:	e007      	b.n	8008044 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40010000 	.word	0x40010000
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800
 8008060:	40000c00 	.word	0x40000c00
 8008064:	40014000 	.word	0x40014000

08008068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e041      	b.n	80080fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d106      	bne.n	8008094 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f839 	bl	8008106 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	f000 fb8a 	bl	80087c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
	...

0800811c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d109      	bne.n	8008140 <HAL_TIM_PWM_Start+0x24>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b01      	cmp	r3, #1
 8008136:	bf14      	ite	ne
 8008138:	2301      	movne	r3, #1
 800813a:	2300      	moveq	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	e022      	b.n	8008186 <HAL_TIM_PWM_Start+0x6a>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b04      	cmp	r3, #4
 8008144:	d109      	bne.n	800815a <HAL_TIM_PWM_Start+0x3e>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b01      	cmp	r3, #1
 8008150:	bf14      	ite	ne
 8008152:	2301      	movne	r3, #1
 8008154:	2300      	moveq	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	e015      	b.n	8008186 <HAL_TIM_PWM_Start+0x6a>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b08      	cmp	r3, #8
 800815e:	d109      	bne.n	8008174 <HAL_TIM_PWM_Start+0x58>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b01      	cmp	r3, #1
 800816a:	bf14      	ite	ne
 800816c:	2301      	movne	r3, #1
 800816e:	2300      	moveq	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	e008      	b.n	8008186 <HAL_TIM_PWM_Start+0x6a>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	bf14      	ite	ne
 8008180:	2301      	movne	r3, #1
 8008182:	2300      	moveq	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e068      	b.n	8008260 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <HAL_TIM_PWM_Start+0x82>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800819c:	e013      	b.n	80081c6 <HAL_TIM_PWM_Start+0xaa>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d104      	bne.n	80081ae <HAL_TIM_PWM_Start+0x92>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081ac:	e00b      	b.n	80081c6 <HAL_TIM_PWM_Start+0xaa>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d104      	bne.n	80081be <HAL_TIM_PWM_Start+0xa2>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081bc:	e003      	b.n	80081c6 <HAL_TIM_PWM_Start+0xaa>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2201      	movs	r2, #1
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fda2 	bl	8008d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a23      	ldr	r2, [pc, #140]	@ (8008268 <HAL_TIM_PWM_Start+0x14c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d107      	bne.n	80081ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008268 <HAL_TIM_PWM_Start+0x14c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d018      	beq.n	800822a <HAL_TIM_PWM_Start+0x10e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008200:	d013      	beq.n	800822a <HAL_TIM_PWM_Start+0x10e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a19      	ldr	r2, [pc, #100]	@ (800826c <HAL_TIM_PWM_Start+0x150>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00e      	beq.n	800822a <HAL_TIM_PWM_Start+0x10e>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a17      	ldr	r2, [pc, #92]	@ (8008270 <HAL_TIM_PWM_Start+0x154>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_TIM_PWM_Start+0x10e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a16      	ldr	r2, [pc, #88]	@ (8008274 <HAL_TIM_PWM_Start+0x158>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d004      	beq.n	800822a <HAL_TIM_PWM_Start+0x10e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a14      	ldr	r2, [pc, #80]	@ (8008278 <HAL_TIM_PWM_Start+0x15c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d111      	bne.n	800824e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b06      	cmp	r3, #6
 800823a:	d010      	beq.n	800825e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824c:	e007      	b.n	800825e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0201 	orr.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	40010000 	.word	0x40010000
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00
 8008278:	40014000 	.word	0x40014000

0800827c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d020      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01b      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f06f 0202 	mvn.w	r2, #2
 80082b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa5b 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 80082cc:	e005      	b.n	80082da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa4d 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fa5e 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d020      	beq.n	800832c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01b      	beq.n	800832c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0204 	mvn.w	r2, #4
 80082fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa35 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 8008318:	e005      	b.n	8008326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa27 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa38 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f003 0308 	and.w	r3, r3, #8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d020      	beq.n	8008378 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01b      	beq.n	8008378 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0208 	mvn.w	r2, #8
 8008348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2204      	movs	r2, #4
 800834e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa0f 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 8008364:	e005      	b.n	8008372 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa01 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fa12 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0310 	and.w	r3, r3, #16
 800837e:	2b00      	cmp	r3, #0
 8008380:	d020      	beq.n	80083c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01b      	beq.n	80083c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0210 	mvn.w	r2, #16
 8008394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2208      	movs	r2, #8
 800839a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f9e9 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 80083b0:	e005      	b.n	80083be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9db 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f9ec 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f06f 0201 	mvn.w	r2, #1
 80083e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f9 fa42 	bl	800186c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00c      	beq.n	800840c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fd24 	bl	8008e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00c      	beq.n	8008430 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d007      	beq.n	8008430 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f9bd 	bl	80087aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00c      	beq.n	8008454 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0220 	mvn.w	r2, #32
 800844c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fcf6 	bl	8008e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008476:	2302      	movs	r3, #2
 8008478:	e0ae      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b0c      	cmp	r3, #12
 8008486:	f200 809f 	bhi.w	80085c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800848a:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084c5 	.word	0x080084c5
 8008494:	080085c9 	.word	0x080085c9
 8008498:	080085c9 	.word	0x080085c9
 800849c:	080085c9 	.word	0x080085c9
 80084a0:	08008505 	.word	0x08008505
 80084a4:	080085c9 	.word	0x080085c9
 80084a8:	080085c9 	.word	0x080085c9
 80084ac:	080085c9 	.word	0x080085c9
 80084b0:	08008547 	.word	0x08008547
 80084b4:	080085c9 	.word	0x080085c9
 80084b8:	080085c9 	.word	0x080085c9
 80084bc:	080085c9 	.word	0x080085c9
 80084c0:	08008587 	.word	0x08008587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f9fe 	bl	80088cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0208 	orr.w	r2, r2, #8
 80084de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699a      	ldr	r2, [r3, #24]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0204 	bic.w	r2, r2, #4
 80084ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6999      	ldr	r1, [r3, #24]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	619a      	str	r2, [r3, #24]
      break;
 8008502:	e064      	b.n	80085ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68b9      	ldr	r1, [r7, #8]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fa44 	bl	8008998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800851e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800852e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6999      	ldr	r1, [r3, #24]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	021a      	lsls	r2, r3, #8
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	619a      	str	r2, [r3, #24]
      break;
 8008544:	e043      	b.n	80085ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68b9      	ldr	r1, [r7, #8]
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fa8f 	bl	8008a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0208 	orr.w	r2, r2, #8
 8008560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69da      	ldr	r2, [r3, #28]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0204 	bic.w	r2, r2, #4
 8008570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69d9      	ldr	r1, [r3, #28]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	61da      	str	r2, [r3, #28]
      break;
 8008584:	e023      	b.n	80085ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fad9 	bl	8008b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69d9      	ldr	r1, [r3, #28]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	021a      	lsls	r2, r3, #8
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	61da      	str	r2, [r3, #28]
      break;
 80085c6:	e002      	b.n	80085ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	75fb      	strb	r3, [r7, #23]
      break;
 80085cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIM_ConfigClockSource+0x1c>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e0b4      	b.n	8008766 <HAL_TIM_ConfigClockSource+0x186>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800861a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008634:	d03e      	beq.n	80086b4 <HAL_TIM_ConfigClockSource+0xd4>
 8008636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800863a:	f200 8087 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x16c>
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008642:	f000 8086 	beq.w	8008752 <HAL_TIM_ConfigClockSource+0x172>
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864a:	d87f      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
 800864c:	2b70      	cmp	r3, #112	@ 0x70
 800864e:	d01a      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0xa6>
 8008650:	2b70      	cmp	r3, #112	@ 0x70
 8008652:	d87b      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b60      	cmp	r3, #96	@ 0x60
 8008656:	d050      	beq.n	80086fa <HAL_TIM_ConfigClockSource+0x11a>
 8008658:	2b60      	cmp	r3, #96	@ 0x60
 800865a:	d877      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
 800865c:	2b50      	cmp	r3, #80	@ 0x50
 800865e:	d03c      	beq.n	80086da <HAL_TIM_ConfigClockSource+0xfa>
 8008660:	2b50      	cmp	r3, #80	@ 0x50
 8008662:	d873      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b40      	cmp	r3, #64	@ 0x40
 8008666:	d058      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x13a>
 8008668:	2b40      	cmp	r3, #64	@ 0x40
 800866a:	d86f      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	2b30      	cmp	r3, #48	@ 0x30
 800866e:	d064      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x15a>
 8008670:	2b30      	cmp	r3, #48	@ 0x30
 8008672:	d86b      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
 8008674:	2b20      	cmp	r3, #32
 8008676:	d060      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x15a>
 8008678:	2b20      	cmp	r3, #32
 800867a:	d867      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
 800867c:	2b00      	cmp	r3, #0
 800867e:	d05c      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x15a>
 8008680:	2b10      	cmp	r3, #16
 8008682:	d05a      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x15a>
 8008684:	e062      	b.n	800874c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008696:	f000 fb1f 	bl	8008cd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	609a      	str	r2, [r3, #8]
      break;
 80086b2:	e04f      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086c4:	f000 fb08 	bl	8008cd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086d6:	609a      	str	r2, [r3, #8]
      break;
 80086d8:	e03c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e6:	461a      	mov	r2, r3
 80086e8:	f000 fa7c 	bl	8008be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2150      	movs	r1, #80	@ 0x50
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fad5 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 80086f8:	e02c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008706:	461a      	mov	r2, r3
 8008708:	f000 fa9b 	bl	8008c42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2160      	movs	r1, #96	@ 0x60
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fac5 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 8008718:	e01c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008726:	461a      	mov	r2, r3
 8008728:	f000 fa5c 	bl	8008be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2140      	movs	r1, #64	@ 0x40
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fab5 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 8008738:	e00c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f000 faac 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 800874a:	e003      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
      break;
 8008750:	e000      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a37      	ldr	r2, [pc, #220]	@ (80088b0 <TIM_Base_SetConfig+0xf0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00f      	beq.n	80087f8 <TIM_Base_SetConfig+0x38>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087de:	d00b      	beq.n	80087f8 <TIM_Base_SetConfig+0x38>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a34      	ldr	r2, [pc, #208]	@ (80088b4 <TIM_Base_SetConfig+0xf4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d007      	beq.n	80087f8 <TIM_Base_SetConfig+0x38>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a33      	ldr	r2, [pc, #204]	@ (80088b8 <TIM_Base_SetConfig+0xf8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_Base_SetConfig+0x38>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a32      	ldr	r2, [pc, #200]	@ (80088bc <TIM_Base_SetConfig+0xfc>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d108      	bne.n	800880a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a28      	ldr	r2, [pc, #160]	@ (80088b0 <TIM_Base_SetConfig+0xf0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01b      	beq.n	800884a <TIM_Base_SetConfig+0x8a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008818:	d017      	beq.n	800884a <TIM_Base_SetConfig+0x8a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a25      	ldr	r2, [pc, #148]	@ (80088b4 <TIM_Base_SetConfig+0xf4>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <TIM_Base_SetConfig+0x8a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a24      	ldr	r2, [pc, #144]	@ (80088b8 <TIM_Base_SetConfig+0xf8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00f      	beq.n	800884a <TIM_Base_SetConfig+0x8a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a23      	ldr	r2, [pc, #140]	@ (80088bc <TIM_Base_SetConfig+0xfc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00b      	beq.n	800884a <TIM_Base_SetConfig+0x8a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a22      	ldr	r2, [pc, #136]	@ (80088c0 <TIM_Base_SetConfig+0x100>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d007      	beq.n	800884a <TIM_Base_SetConfig+0x8a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a21      	ldr	r2, [pc, #132]	@ (80088c4 <TIM_Base_SetConfig+0x104>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <TIM_Base_SetConfig+0x8a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a20      	ldr	r2, [pc, #128]	@ (80088c8 <TIM_Base_SetConfig+0x108>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d108      	bne.n	800885c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a0c      	ldr	r2, [pc, #48]	@ (80088b0 <TIM_Base_SetConfig+0xf0>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d103      	bne.n	800888a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f043 0204 	orr.w	r2, r3, #4
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	601a      	str	r2, [r3, #0]
}
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40010000 	.word	0x40010000
 80088b4:	40000400 	.word	0x40000400
 80088b8:	40000800 	.word	0x40000800
 80088bc:	40000c00 	.word	0x40000c00
 80088c0:	40014000 	.word	0x40014000
 80088c4:	40014400 	.word	0x40014400
 80088c8:	40014800 	.word	0x40014800

080088cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	f023 0201 	bic.w	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f023 0302 	bic.w	r3, r3, #2
 8008914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a1c      	ldr	r2, [pc, #112]	@ (8008994 <TIM_OC1_SetConfig+0xc8>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d10c      	bne.n	8008942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 0308 	bic.w	r3, r3, #8
 800892e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a13      	ldr	r2, [pc, #76]	@ (8008994 <TIM_OC1_SetConfig+0xc8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d111      	bne.n	800896e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	621a      	str	r2, [r3, #32]
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	40010000 	.word	0x40010000

08008998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	f023 0210 	bic.w	r2, r3, #16
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	4313      	orrs	r3, r2
 80089da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 0320 	bic.w	r3, r3, #32
 80089e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a6c <TIM_OC2_SetConfig+0xd4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d10d      	bne.n	8008a14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a15      	ldr	r2, [pc, #84]	@ (8008a6c <TIM_OC2_SetConfig+0xd4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d113      	bne.n	8008a44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000

08008a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b40 <TIM_OC3_SetConfig+0xd0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d10d      	bne.n	8008aea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a14      	ldr	r2, [pc, #80]	@ (8008b40 <TIM_OC3_SetConfig+0xd0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d113      	bne.n	8008b1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	621a      	str	r2, [r3, #32]
}
 8008b34:	bf00      	nop
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	40010000 	.word	0x40010000

08008b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a10      	ldr	r2, [pc, #64]	@ (8008be0 <TIM_OC4_SetConfig+0x9c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d109      	bne.n	8008bb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	019b      	lsls	r3, r3, #6
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	621a      	str	r2, [r3, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40010000 	.word	0x40010000

08008be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	f023 0201 	bic.w	r2, r3, #1
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f023 030a 	bic.w	r3, r3, #10
 8008c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b087      	sub	sp, #28
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	f023 0210 	bic.w	r2, r3, #16
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	031b      	lsls	r3, r3, #12
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	621a      	str	r2, [r3, #32]
}
 8008c96:	bf00      	nop
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f043 0307 	orr.w	r3, r3, #7
 8008cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	609a      	str	r2, [r3, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	021a      	lsls	r2, r3, #8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	609a      	str	r2, [r3, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	371c      	adds	r7, #28
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f003 031f 	and.w	r3, r3, #31
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a1a      	ldr	r2, [r3, #32]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	401a      	ands	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a1a      	ldr	r2, [r3, #32]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d50:	431a      	orrs	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
	...

08008d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e050      	b.n	8008e1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a1c      	ldr	r2, [pc, #112]	@ (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d018      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc8:	d013      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a18      	ldr	r2, [pc, #96]	@ (8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00e      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a16      	ldr	r2, [pc, #88]	@ (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d009      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a15      	ldr	r2, [pc, #84]	@ (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d004      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a13      	ldr	r2, [pc, #76]	@ (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d10c      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	40000400 	.word	0x40000400
 8008e34:	40000800 	.word	0x40000800
 8008e38:	40000c00 	.word	0x40000c00
 8008e3c:	40014000 	.word	0x40014000

08008e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e042      	b.n	8008f00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7f9 fcaa 	bl	80027e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2224      	movs	r2, #36	@ 0x24
 8008e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fcef 	bl	8009890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695a      	ldr	r2, [r3, #20]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	d112      	bne.n	8008f48 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <HAL_UART_Receive_IT+0x26>
 8008f28:	88fb      	ldrh	r3, [r7, #6]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e00b      	b.n	8008f4a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f38:	88fb      	ldrh	r3, [r7, #6]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 fad2 	bl	80094e8 <UART_Start_Receive_IT>
 8008f44:	4603      	mov	r3, r0
 8008f46:	e000      	b.n	8008f4a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008f48:	2302      	movs	r3, #2
  }
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b0ba      	sub	sp, #232	@ 0xe8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8a:	f003 030f 	and.w	r3, r3, #15
 8008f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10f      	bne.n	8008fba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f9e:	f003 0320 	and.w	r3, r3, #32
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <HAL_UART_IRQHandler+0x66>
 8008fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fbae 	bl	8009714 <UART_Receive_IT>
      return;
 8008fb8:	e273      	b.n	80094a2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 80de 	beq.w	8009180 <HAL_UART_IRQHandler+0x22c>
 8008fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 80d1 	beq.w	8009180 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00b      	beq.n	8009002 <HAL_UART_IRQHandler+0xae>
 8008fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffa:	f043 0201 	orr.w	r2, r3, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <HAL_UART_IRQHandler+0xd2>
 800900e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800901e:	f043 0202 	orr.w	r2, r3, #2
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00b      	beq.n	800904a <HAL_UART_IRQHandler+0xf6>
 8009032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d005      	beq.n	800904a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009042:	f043 0204 	orr.w	r2, r3, #4
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800904a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800904e:	f003 0308 	and.w	r3, r3, #8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d011      	beq.n	800907a <HAL_UART_IRQHandler+0x126>
 8009056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	d105      	bne.n	800906e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d005      	beq.n	800907a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009072:	f043 0208 	orr.w	r2, r3, #8
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 820a 	beq.w	8009498 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	d008      	beq.n	80090a2 <HAL_UART_IRQHandler+0x14e>
 8009090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009094:	f003 0320 	and.w	r3, r3, #32
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fb39 	bl	8009714 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ac:	2b40      	cmp	r3, #64	@ 0x40
 80090ae:	bf0c      	ite	eq
 80090b0:	2301      	moveq	r3, #1
 80090b2:	2300      	movne	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090be:	f003 0308 	and.w	r3, r3, #8
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d103      	bne.n	80090ce <HAL_UART_IRQHandler+0x17a>
 80090c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d04f      	beq.n	800916e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa44 	bl	800955c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090de:	2b40      	cmp	r3, #64	@ 0x40
 80090e0:	d141      	bne.n	8009166 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3314      	adds	r3, #20
 80090e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009100:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3314      	adds	r3, #20
 800910a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800910e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009112:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800911a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1d9      	bne.n	80090e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d013      	beq.n	800915e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913a:	4a8a      	ldr	r2, [pc, #552]	@ (8009364 <HAL_UART_IRQHandler+0x410>)
 800913c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009142:	4618      	mov	r0, r3
 8009144:	f7fa fd90 	bl	8003c68 <HAL_DMA_Abort_IT>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d016      	beq.n	800917c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800915c:	e00e      	b.n	800917c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f9ac 	bl	80094bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009164:	e00a      	b.n	800917c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f9a8 	bl	80094bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916c:	e006      	b.n	800917c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f9a4 	bl	80094bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800917a:	e18d      	b.n	8009498 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917c:	bf00      	nop
    return;
 800917e:	e18b      	b.n	8009498 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009184:	2b01      	cmp	r3, #1
 8009186:	f040 8167 	bne.w	8009458 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800918a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918e:	f003 0310 	and.w	r3, r3, #16
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8160 	beq.w	8009458 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800919c:	f003 0310 	and.w	r3, r3, #16
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 8159 	beq.w	8009458 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091a6:	2300      	movs	r3, #0
 80091a8:	60bb      	str	r3, [r7, #8]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60bb      	str	r3, [r7, #8]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	60bb      	str	r3, [r7, #8]
 80091ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c6:	2b40      	cmp	r3, #64	@ 0x40
 80091c8:	f040 80ce 	bne.w	8009368 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80a9 	beq.w	8009334 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091ea:	429a      	cmp	r2, r3
 80091ec:	f080 80a2 	bcs.w	8009334 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009202:	f000 8088 	beq.w	8009316 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	330c      	adds	r3, #12
 800920c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800921c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009232:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800923e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800924a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1d9      	bne.n	8009206 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3314      	adds	r3, #20
 8009258:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009262:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3314      	adds	r3, #20
 8009272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009276:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800927a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800927e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e1      	bne.n	8009252 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3314      	adds	r3, #20
 8009294:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800929e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3314      	adds	r3, #20
 80092ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e3      	bne.n	800928e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092e6:	f023 0310 	bic.w	r3, r3, #16
 80092ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80092f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80092fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e3      	bne.n	80092d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009310:	4618      	mov	r0, r3
 8009312:	f7fa fc39 	bl	8003b88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2202      	movs	r2, #2
 800931a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009324:	b29b      	uxth	r3, r3
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	b29b      	uxth	r3, r3
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f8cf 	bl	80094d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009332:	e0b3      	b.n	800949c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800933c:	429a      	cmp	r2, r3
 800933e:	f040 80ad 	bne.w	800949c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800934c:	f040 80a6 	bne.w	800949c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8b7 	bl	80094d0 <HAL_UARTEx_RxEventCallback>
      return;
 8009362:	e09b      	b.n	800949c <HAL_UART_IRQHandler+0x548>
 8009364:	08009623 	.word	0x08009623
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009370:	b29b      	uxth	r3, r3
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 808e 	beq.w	80094a0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 8089 	beq.w	80094a0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	330c      	adds	r3, #12
 8009394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800939e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	330c      	adds	r3, #12
 80093ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80093b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80093b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e3      	bne.n	800938e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3314      	adds	r3, #20
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	623b      	str	r3, [r7, #32]
   return(result);
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3314      	adds	r3, #20
 80093e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80093ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f2:	e841 2300 	strex	r3, r2, [r1]
 80093f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e3      	bne.n	80093c6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2220      	movs	r2, #32
 8009402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	330c      	adds	r3, #12
 8009412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	60fb      	str	r3, [r7, #12]
   return(result);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 0310 	bic.w	r3, r3, #16
 8009422:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	330c      	adds	r3, #12
 800942c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009430:	61fa      	str	r2, [r7, #28]
 8009432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	69b9      	ldr	r1, [r7, #24]
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	617b      	str	r3, [r7, #20]
   return(result);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e3      	bne.n	800940c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800944a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f83d 	bl	80094d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009456:	e023      	b.n	80094a0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800945c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009460:	2b00      	cmp	r3, #0
 8009462:	d009      	beq.n	8009478 <HAL_UART_IRQHandler+0x524>
 8009464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f8e7 	bl	8009644 <UART_Transmit_IT>
    return;
 8009476:	e014      	b.n	80094a2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00e      	beq.n	80094a2 <HAL_UART_IRQHandler+0x54e>
 8009484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800948c:	2b00      	cmp	r3, #0
 800948e:	d008      	beq.n	80094a2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f927 	bl	80096e4 <UART_EndTransmit_IT>
    return;
 8009496:	e004      	b.n	80094a2 <HAL_UART_IRQHandler+0x54e>
    return;
 8009498:	bf00      	nop
 800949a:	e002      	b.n	80094a2 <HAL_UART_IRQHandler+0x54e>
      return;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <HAL_UART_IRQHandler+0x54e>
      return;
 80094a0:	bf00      	nop
  }
}
 80094a2:	37e8      	adds	r7, #232	@ 0xe8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	4613      	mov	r3, r2
 80094f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	88fa      	ldrh	r2, [r7, #6]
 8009500:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	88fa      	ldrh	r2, [r7, #6]
 8009506:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2222      	movs	r2, #34	@ 0x22
 8009512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800952c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695a      	ldr	r2, [r3, #20]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0201 	orr.w	r2, r2, #1
 800953c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0220 	orr.w	r2, r2, #32
 800954c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b095      	sub	sp, #84	@ 0x54
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800957a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	330c      	adds	r3, #12
 8009582:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009584:	643a      	str	r2, [r7, #64]	@ 0x40
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800958a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e5      	bne.n	8009564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3314      	adds	r3, #20
 800959e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f023 0301 	bic.w	r3, r3, #1
 80095ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3314      	adds	r3, #20
 80095b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e5      	bne.n	8009598 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d119      	bne.n	8009608 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	330c      	adds	r3, #12
 80095da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f023 0310 	bic.w	r3, r3, #16
 80095ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	330c      	adds	r3, #12
 80095f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f4:	61ba      	str	r2, [r7, #24]
 80095f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6979      	ldr	r1, [r7, #20]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	e841 2300 	strex	r3, r2, [r1]
 8009600:	613b      	str	r3, [r7, #16]
   return(result);
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e5      	bne.n	80095d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009616:	bf00      	nop
 8009618:	3754      	adds	r7, #84	@ 0x54
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff ff40 	bl	80094bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b21      	cmp	r3, #33	@ 0x21
 8009656:	d13e      	bne.n	80096d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009660:	d114      	bne.n	800968c <UART_Transmit_IT+0x48>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d110      	bne.n	800968c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800967e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	1c9a      	adds	r2, r3, #2
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	621a      	str	r2, [r3, #32]
 800968a:	e008      	b.n	800969e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	1c59      	adds	r1, r3, #1
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6211      	str	r1, [r2, #32]
 8009696:	781a      	ldrb	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4619      	mov	r1, r3
 80096ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10f      	bne.n	80096d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68da      	ldr	r2, [r3, #12]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e000      	b.n	80096d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096d6:	2302      	movs	r3, #2
  }
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2220      	movs	r2, #32
 8009700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff fecf 	bl	80094a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08c      	sub	sp, #48	@ 0x30
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b22      	cmp	r3, #34	@ 0x22
 800972e:	f040 80aa 	bne.w	8009886 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800973a:	d115      	bne.n	8009768 <UART_Receive_IT+0x54>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d111      	bne.n	8009768 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009748:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009756:	b29a      	uxth	r2, r3
 8009758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009760:	1c9a      	adds	r2, r3, #2
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	629a      	str	r2, [r3, #40]	@ 0x28
 8009766:	e024      	b.n	80097b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009776:	d007      	beq.n	8009788 <UART_Receive_IT+0x74>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <UART_Receive_IT+0x82>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d106      	bne.n	8009796 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	b2da      	uxtb	r2, r3
 8009790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	e008      	b.n	80097a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	3b01      	subs	r3, #1
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	4619      	mov	r1, r3
 80097c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d15d      	bne.n	8009882 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0220 	bic.w	r2, r2, #32
 80097d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68da      	ldr	r2, [r3, #12]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695a      	ldr	r2, [r3, #20]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0201 	bic.w	r2, r2, #1
 80097f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009808:	2b01      	cmp	r3, #1
 800980a:	d135      	bne.n	8009878 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	330c      	adds	r3, #12
 8009818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	613b      	str	r3, [r7, #16]
   return(result);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f023 0310 	bic.w	r3, r3, #16
 8009828:	627b      	str	r3, [r7, #36]	@ 0x24
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	330c      	adds	r3, #12
 8009830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009832:	623a      	str	r2, [r7, #32]
 8009834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	69f9      	ldr	r1, [r7, #28]
 8009838:	6a3a      	ldr	r2, [r7, #32]
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b10      	cmp	r3, #16
 8009852:	d10a      	bne.n	800986a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fe2d 	bl	80094d0 <HAL_UARTEx_RxEventCallback>
 8009876:	e002      	b.n	800987e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7f8 f81d 	bl	80018b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	e002      	b.n	8009888 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	e000      	b.n	8009888 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009886:	2302      	movs	r3, #2
  }
}
 8009888:	4618      	mov	r0, r3
 800988a:	3730      	adds	r7, #48	@ 0x30
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009894:	b0c0      	sub	sp, #256	@ 0x100
 8009896:	af00      	add	r7, sp, #0
 8009898:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800989c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80098a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ac:	68d9      	ldr	r1, [r3, #12]
 80098ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	ea40 0301 	orr.w	r3, r0, r1
 80098b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	431a      	orrs	r2, r3
 80098c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80098e8:	f021 010c 	bic.w	r1, r1, #12
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098f6:	430b      	orrs	r3, r1
 80098f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990a:	6999      	ldr	r1, [r3, #24]
 800990c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	ea40 0301 	orr.w	r3, r0, r1
 8009916:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b8f      	ldr	r3, [pc, #572]	@ (8009b5c <UART_SetConfig+0x2cc>)
 8009920:	429a      	cmp	r2, r3
 8009922:	d005      	beq.n	8009930 <UART_SetConfig+0xa0>
 8009924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4b8d      	ldr	r3, [pc, #564]	@ (8009b60 <UART_SetConfig+0x2d0>)
 800992c:	429a      	cmp	r2, r3
 800992e:	d104      	bne.n	800993a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009930:	f7fe fad4 	bl	8007edc <HAL_RCC_GetPCLK2Freq>
 8009934:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009938:	e003      	b.n	8009942 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800993a:	f7fe fabb 	bl	8007eb4 <HAL_RCC_GetPCLK1Freq>
 800993e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800994c:	f040 810c 	bne.w	8009b68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009954:	2200      	movs	r2, #0
 8009956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800995a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800995e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009962:	4622      	mov	r2, r4
 8009964:	462b      	mov	r3, r5
 8009966:	1891      	adds	r1, r2, r2
 8009968:	65b9      	str	r1, [r7, #88]	@ 0x58
 800996a:	415b      	adcs	r3, r3
 800996c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800996e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009972:	4621      	mov	r1, r4
 8009974:	eb12 0801 	adds.w	r8, r2, r1
 8009978:	4629      	mov	r1, r5
 800997a:	eb43 0901 	adc.w	r9, r3, r1
 800997e:	f04f 0200 	mov.w	r2, #0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800998a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800998e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009992:	4690      	mov	r8, r2
 8009994:	4699      	mov	r9, r3
 8009996:	4623      	mov	r3, r4
 8009998:	eb18 0303 	adds.w	r3, r8, r3
 800999c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099a0:	462b      	mov	r3, r5
 80099a2:	eb49 0303 	adc.w	r3, r9, r3
 80099a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80099ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099be:	460b      	mov	r3, r1
 80099c0:	18db      	adds	r3, r3, r3
 80099c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80099c4:	4613      	mov	r3, r2
 80099c6:	eb42 0303 	adc.w	r3, r2, r3
 80099ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80099cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80099d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80099d4:	f7f7 f960 	bl	8000c98 <__aeabi_uldivmod>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4b61      	ldr	r3, [pc, #388]	@ (8009b64 <UART_SetConfig+0x2d4>)
 80099de:	fba3 2302 	umull	r2, r3, r3, r2
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	011c      	lsls	r4, r3, #4
 80099e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099ea:	2200      	movs	r2, #0
 80099ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80099f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80099f8:	4642      	mov	r2, r8
 80099fa:	464b      	mov	r3, r9
 80099fc:	1891      	adds	r1, r2, r2
 80099fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009a00:	415b      	adcs	r3, r3
 8009a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009a08:	4641      	mov	r1, r8
 8009a0a:	eb12 0a01 	adds.w	sl, r2, r1
 8009a0e:	4649      	mov	r1, r9
 8009a10:	eb43 0b01 	adc.w	fp, r3, r1
 8009a14:	f04f 0200 	mov.w	r2, #0
 8009a18:	f04f 0300 	mov.w	r3, #0
 8009a1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a28:	4692      	mov	sl, r2
 8009a2a:	469b      	mov	fp, r3
 8009a2c:	4643      	mov	r3, r8
 8009a2e:	eb1a 0303 	adds.w	r3, sl, r3
 8009a32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a36:	464b      	mov	r3, r9
 8009a38:	eb4b 0303 	adc.w	r3, fp, r3
 8009a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009a50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a54:	460b      	mov	r3, r1
 8009a56:	18db      	adds	r3, r3, r3
 8009a58:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	eb42 0303 	adc.w	r3, r2, r3
 8009a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009a66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009a6a:	f7f7 f915 	bl	8000c98 <__aeabi_uldivmod>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4611      	mov	r1, r2
 8009a74:	4b3b      	ldr	r3, [pc, #236]	@ (8009b64 <UART_SetConfig+0x2d4>)
 8009a76:	fba3 2301 	umull	r2, r3, r3, r1
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	2264      	movs	r2, #100	@ 0x64
 8009a7e:	fb02 f303 	mul.w	r3, r2, r3
 8009a82:	1acb      	subs	r3, r1, r3
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009a8a:	4b36      	ldr	r3, [pc, #216]	@ (8009b64 <UART_SetConfig+0x2d4>)
 8009a8c:	fba3 2302 	umull	r2, r3, r3, r2
 8009a90:	095b      	lsrs	r3, r3, #5
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009a98:	441c      	add	r4, r3
 8009a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009aa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009aa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009aac:	4642      	mov	r2, r8
 8009aae:	464b      	mov	r3, r9
 8009ab0:	1891      	adds	r1, r2, r2
 8009ab2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009ab4:	415b      	adcs	r3, r3
 8009ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009abc:	4641      	mov	r1, r8
 8009abe:	1851      	adds	r1, r2, r1
 8009ac0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	414b      	adcs	r3, r1
 8009ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac8:	f04f 0200 	mov.w	r2, #0
 8009acc:	f04f 0300 	mov.w	r3, #0
 8009ad0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ad4:	4659      	mov	r1, fp
 8009ad6:	00cb      	lsls	r3, r1, #3
 8009ad8:	4651      	mov	r1, sl
 8009ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ade:	4651      	mov	r1, sl
 8009ae0:	00ca      	lsls	r2, r1, #3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4642      	mov	r2, r8
 8009aea:	189b      	adds	r3, r3, r2
 8009aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009af0:	464b      	mov	r3, r9
 8009af2:	460a      	mov	r2, r1
 8009af4:	eb42 0303 	adc.w	r3, r2, r3
 8009af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009b0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b10:	460b      	mov	r3, r1
 8009b12:	18db      	adds	r3, r3, r3
 8009b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b16:	4613      	mov	r3, r2
 8009b18:	eb42 0303 	adc.w	r3, r2, r3
 8009b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009b26:	f7f7 f8b7 	bl	8000c98 <__aeabi_uldivmod>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b64 <UART_SetConfig+0x2d4>)
 8009b30:	fba3 1302 	umull	r1, r3, r3, r2
 8009b34:	095b      	lsrs	r3, r3, #5
 8009b36:	2164      	movs	r1, #100	@ 0x64
 8009b38:	fb01 f303 	mul.w	r3, r1, r3
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	3332      	adds	r3, #50	@ 0x32
 8009b42:	4a08      	ldr	r2, [pc, #32]	@ (8009b64 <UART_SetConfig+0x2d4>)
 8009b44:	fba2 2303 	umull	r2, r3, r2, r3
 8009b48:	095b      	lsrs	r3, r3, #5
 8009b4a:	f003 0207 	and.w	r2, r3, #7
 8009b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4422      	add	r2, r4
 8009b56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b58:	e106      	b.n	8009d68 <UART_SetConfig+0x4d8>
 8009b5a:	bf00      	nop
 8009b5c:	40011000 	.word	0x40011000
 8009b60:	40011400 	.word	0x40011400
 8009b64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009b76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009b7a:	4642      	mov	r2, r8
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	1891      	adds	r1, r2, r2
 8009b80:	6239      	str	r1, [r7, #32]
 8009b82:	415b      	adcs	r3, r3
 8009b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b8a:	4641      	mov	r1, r8
 8009b8c:	1854      	adds	r4, r2, r1
 8009b8e:	4649      	mov	r1, r9
 8009b90:	eb43 0501 	adc.w	r5, r3, r1
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	f04f 0300 	mov.w	r3, #0
 8009b9c:	00eb      	lsls	r3, r5, #3
 8009b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ba2:	00e2      	lsls	r2, r4, #3
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	4643      	mov	r3, r8
 8009baa:	18e3      	adds	r3, r4, r3
 8009bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bb0:	464b      	mov	r3, r9
 8009bb2:	eb45 0303 	adc.w	r3, r5, r3
 8009bb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	f04f 0300 	mov.w	r3, #0
 8009bd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	008b      	lsls	r3, r1, #2
 8009bda:	4621      	mov	r1, r4
 8009bdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009be0:	4621      	mov	r1, r4
 8009be2:	008a      	lsls	r2, r1, #2
 8009be4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009be8:	f7f7 f856 	bl	8000c98 <__aeabi_uldivmod>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4b60      	ldr	r3, [pc, #384]	@ (8009d74 <UART_SetConfig+0x4e4>)
 8009bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	011c      	lsls	r4, r3, #4
 8009bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	464b      	mov	r3, r9
 8009c10:	1891      	adds	r1, r2, r2
 8009c12:	61b9      	str	r1, [r7, #24]
 8009c14:	415b      	adcs	r3, r3
 8009c16:	61fb      	str	r3, [r7, #28]
 8009c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c1c:	4641      	mov	r1, r8
 8009c1e:	1851      	adds	r1, r2, r1
 8009c20:	6139      	str	r1, [r7, #16]
 8009c22:	4649      	mov	r1, r9
 8009c24:	414b      	adcs	r3, r1
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	f04f 0200 	mov.w	r2, #0
 8009c2c:	f04f 0300 	mov.w	r3, #0
 8009c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c34:	4659      	mov	r1, fp
 8009c36:	00cb      	lsls	r3, r1, #3
 8009c38:	4651      	mov	r1, sl
 8009c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c3e:	4651      	mov	r1, sl
 8009c40:	00ca      	lsls	r2, r1, #3
 8009c42:	4610      	mov	r0, r2
 8009c44:	4619      	mov	r1, r3
 8009c46:	4603      	mov	r3, r0
 8009c48:	4642      	mov	r2, r8
 8009c4a:	189b      	adds	r3, r3, r2
 8009c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c50:	464b      	mov	r3, r9
 8009c52:	460a      	mov	r2, r1
 8009c54:	eb42 0303 	adc.w	r3, r2, r3
 8009c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009c68:	f04f 0200 	mov.w	r2, #0
 8009c6c:	f04f 0300 	mov.w	r3, #0
 8009c70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009c74:	4649      	mov	r1, r9
 8009c76:	008b      	lsls	r3, r1, #2
 8009c78:	4641      	mov	r1, r8
 8009c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c7e:	4641      	mov	r1, r8
 8009c80:	008a      	lsls	r2, r1, #2
 8009c82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009c86:	f7f7 f807 	bl	8000c98 <__aeabi_uldivmod>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	4b38      	ldr	r3, [pc, #224]	@ (8009d74 <UART_SetConfig+0x4e4>)
 8009c92:	fba3 2301 	umull	r2, r3, r3, r1
 8009c96:	095b      	lsrs	r3, r3, #5
 8009c98:	2264      	movs	r2, #100	@ 0x64
 8009c9a:	fb02 f303 	mul.w	r3, r2, r3
 8009c9e:	1acb      	subs	r3, r1, r3
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	3332      	adds	r3, #50	@ 0x32
 8009ca4:	4a33      	ldr	r2, [pc, #204]	@ (8009d74 <UART_SetConfig+0x4e4>)
 8009ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8009caa:	095b      	lsrs	r3, r3, #5
 8009cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cb0:	441c      	add	r4, r3
 8009cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cba:	677a      	str	r2, [r7, #116]	@ 0x74
 8009cbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009cc0:	4642      	mov	r2, r8
 8009cc2:	464b      	mov	r3, r9
 8009cc4:	1891      	adds	r1, r2, r2
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	415b      	adcs	r3, r3
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cd0:	4641      	mov	r1, r8
 8009cd2:	1851      	adds	r1, r2, r1
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	414b      	adcs	r3, r1
 8009cda:	607b      	str	r3, [r7, #4]
 8009cdc:	f04f 0200 	mov.w	r2, #0
 8009ce0:	f04f 0300 	mov.w	r3, #0
 8009ce4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ce8:	4659      	mov	r1, fp
 8009cea:	00cb      	lsls	r3, r1, #3
 8009cec:	4651      	mov	r1, sl
 8009cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cf2:	4651      	mov	r1, sl
 8009cf4:	00ca      	lsls	r2, r1, #3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4642      	mov	r2, r8
 8009cfe:	189b      	adds	r3, r3, r2
 8009d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d02:	464b      	mov	r3, r9
 8009d04:	460a      	mov	r2, r1
 8009d06:	eb42 0303 	adc.w	r3, r2, r3
 8009d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d16:	667a      	str	r2, [r7, #100]	@ 0x64
 8009d18:	f04f 0200 	mov.w	r2, #0
 8009d1c:	f04f 0300 	mov.w	r3, #0
 8009d20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009d24:	4649      	mov	r1, r9
 8009d26:	008b      	lsls	r3, r1, #2
 8009d28:	4641      	mov	r1, r8
 8009d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d2e:	4641      	mov	r1, r8
 8009d30:	008a      	lsls	r2, r1, #2
 8009d32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d36:	f7f6 ffaf 	bl	8000c98 <__aeabi_uldivmod>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <UART_SetConfig+0x4e4>)
 8009d40:	fba3 1302 	umull	r1, r3, r3, r2
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	2164      	movs	r1, #100	@ 0x64
 8009d48:	fb01 f303 	mul.w	r3, r1, r3
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	3332      	adds	r3, #50	@ 0x32
 8009d52:	4a08      	ldr	r2, [pc, #32]	@ (8009d74 <UART_SetConfig+0x4e4>)
 8009d54:	fba2 2303 	umull	r2, r3, r2, r3
 8009d58:	095b      	lsrs	r3, r3, #5
 8009d5a:	f003 020f 	and.w	r2, r3, #15
 8009d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4422      	add	r2, r4
 8009d66:	609a      	str	r2, [r3, #8]
}
 8009d68:	bf00      	nop
 8009d6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d74:	51eb851f 	.word	0x51eb851f

08009d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d78:	b084      	sub	sp, #16
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	f107 001c 	add.w	r0, r7, #28
 8009d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d123      	bne.n	8009dda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009dba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d105      	bne.n	8009dce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 fae8 	bl	800b3a4 <USB_CoreReset>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]
 8009dd8:	e01b      	b.n	8009e12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 fadc 	bl	800b3a4 <USB_CoreReset>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009df0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d106      	bne.n	8009e06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e04:	e005      	b.n	8009e12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e12:	7fbb      	ldrb	r3, [r7, #30]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d10b      	bne.n	8009e30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f043 0206 	orr.w	r2, r3, #6
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f043 0220 	orr.w	r2, r3, #32
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e3c:	b004      	add	sp, #16
 8009e3e:	4770      	bx	lr

08009e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d165      	bne.n	8009f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4a41      	ldr	r2, [pc, #260]	@ (8009f5c <USB_SetTurnaroundTime+0x11c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d906      	bls.n	8009e6a <USB_SetTurnaroundTime+0x2a>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4a40      	ldr	r2, [pc, #256]	@ (8009f60 <USB_SetTurnaroundTime+0x120>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d202      	bcs.n	8009e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e64:	230f      	movs	r3, #15
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	e062      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8009f60 <USB_SetTurnaroundTime+0x120>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d306      	bcc.n	8009e80 <USB_SetTurnaroundTime+0x40>
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4a3b      	ldr	r2, [pc, #236]	@ (8009f64 <USB_SetTurnaroundTime+0x124>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d202      	bcs.n	8009e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e7a:	230e      	movs	r3, #14
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	e057      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4a38      	ldr	r2, [pc, #224]	@ (8009f64 <USB_SetTurnaroundTime+0x124>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d306      	bcc.n	8009e96 <USB_SetTurnaroundTime+0x56>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4a37      	ldr	r2, [pc, #220]	@ (8009f68 <USB_SetTurnaroundTime+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d202      	bcs.n	8009e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009e90:	230d      	movs	r3, #13
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	e04c      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a33      	ldr	r2, [pc, #204]	@ (8009f68 <USB_SetTurnaroundTime+0x128>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d306      	bcc.n	8009eac <USB_SetTurnaroundTime+0x6c>
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4a32      	ldr	r2, [pc, #200]	@ (8009f6c <USB_SetTurnaroundTime+0x12c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d802      	bhi.n	8009eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	e041      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4a2f      	ldr	r2, [pc, #188]	@ (8009f6c <USB_SetTurnaroundTime+0x12c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d906      	bls.n	8009ec2 <USB_SetTurnaroundTime+0x82>
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8009f70 <USB_SetTurnaroundTime+0x130>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d802      	bhi.n	8009ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ebc:	230b      	movs	r3, #11
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e036      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8009f70 <USB_SetTurnaroundTime+0x130>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d906      	bls.n	8009ed8 <USB_SetTurnaroundTime+0x98>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a29      	ldr	r2, [pc, #164]	@ (8009f74 <USB_SetTurnaroundTime+0x134>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d802      	bhi.n	8009ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ed2:	230a      	movs	r3, #10
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	e02b      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4a26      	ldr	r2, [pc, #152]	@ (8009f74 <USB_SetTurnaroundTime+0x134>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d906      	bls.n	8009eee <USB_SetTurnaroundTime+0xae>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4a25      	ldr	r2, [pc, #148]	@ (8009f78 <USB_SetTurnaroundTime+0x138>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d202      	bcs.n	8009eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ee8:	2309      	movs	r3, #9
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e020      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4a21      	ldr	r2, [pc, #132]	@ (8009f78 <USB_SetTurnaroundTime+0x138>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d306      	bcc.n	8009f04 <USB_SetTurnaroundTime+0xc4>
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	4a20      	ldr	r2, [pc, #128]	@ (8009f7c <USB_SetTurnaroundTime+0x13c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d802      	bhi.n	8009f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009efe:	2308      	movs	r3, #8
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	e015      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4a1d      	ldr	r2, [pc, #116]	@ (8009f7c <USB_SetTurnaroundTime+0x13c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d906      	bls.n	8009f1a <USB_SetTurnaroundTime+0xda>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009f80 <USB_SetTurnaroundTime+0x140>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d202      	bcs.n	8009f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f14:	2307      	movs	r3, #7
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e00a      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f1a:	2306      	movs	r3, #6
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e007      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f26:	2309      	movs	r3, #9
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e001      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f2c:	2309      	movs	r3, #9
 8009f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	029b      	lsls	r3, r3, #10
 8009f44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	371c      	adds	r7, #28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	00d8acbf 	.word	0x00d8acbf
 8009f60:	00e4e1c0 	.word	0x00e4e1c0
 8009f64:	00f42400 	.word	0x00f42400
 8009f68:	01067380 	.word	0x01067380
 8009f6c:	011a499f 	.word	0x011a499f
 8009f70:	01312cff 	.word	0x01312cff
 8009f74:	014ca43f 	.word	0x014ca43f
 8009f78:	016e3600 	.word	0x016e3600
 8009f7c:	01a6ab1f 	.word	0x01a6ab1f
 8009f80:	01e84800 	.word	0x01e84800

08009f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f043 0201 	orr.w	r2, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f023 0201 	bic.w	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d115      	bne.n	800a016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ff6:	200a      	movs	r0, #10
 8009ff8:	f7f8 fe6a 	bl	8002cd0 <HAL_Delay>
      ms += 10U;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	330a      	adds	r3, #10
 800a000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 f93f 	bl	800b286 <USB_GetMode>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d01e      	beq.n	800a04c <USB_SetCurrentMode+0x84>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2bc7      	cmp	r3, #199	@ 0xc7
 800a012:	d9f0      	bls.n	8009ff6 <USB_SetCurrentMode+0x2e>
 800a014:	e01a      	b.n	800a04c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d115      	bne.n	800a048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a028:	200a      	movs	r0, #10
 800a02a:	f7f8 fe51 	bl	8002cd0 <HAL_Delay>
      ms += 10U;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	330a      	adds	r3, #10
 800a032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f926 	bl	800b286 <USB_GetMode>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <USB_SetCurrentMode+0x84>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2bc7      	cmp	r3, #199	@ 0xc7
 800a044:	d9f0      	bls.n	800a028 <USB_SetCurrentMode+0x60>
 800a046:	e001      	b.n	800a04c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e005      	b.n	800a058 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a050:	d101      	bne.n	800a056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a060:	b084      	sub	sp, #16
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a06e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a07a:	2300      	movs	r3, #0
 800a07c:	613b      	str	r3, [r7, #16]
 800a07e:	e009      	b.n	800a094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	3340      	adds	r3, #64	@ 0x40
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3301      	adds	r3, #1
 800a092:	613b      	str	r3, [r7, #16]
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b0e      	cmp	r3, #14
 800a098:	d9f2      	bls.n	800a080 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a09a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11c      	bne.n	800a0dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0da:	e00b      	b.n	800a0f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a100:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a104:	2b01      	cmp	r3, #1
 800a106:	d10d      	bne.n	800a124 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d104      	bne.n	800a11a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a110:	2100      	movs	r1, #0
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f968 	bl	800a3e8 <USB_SetDevSpeed>
 800a118:	e008      	b.n	800a12c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a11a:	2101      	movs	r1, #1
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f963 	bl	800a3e8 <USB_SetDevSpeed>
 800a122:	e003      	b.n	800a12c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a124:	2103      	movs	r1, #3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f95e 	bl	800a3e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a12c:	2110      	movs	r1, #16
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f8fa 	bl	800a328 <USB_FlushTxFifo>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f924 	bl	800a38c <USB_FlushRxFifo>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a154:	461a      	mov	r2, r3
 800a156:	2300      	movs	r3, #0
 800a158:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a160:	461a      	mov	r2, r3
 800a162:	2300      	movs	r3, #0
 800a164:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a16c:	461a      	mov	r2, r3
 800a16e:	2300      	movs	r3, #0
 800a170:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a172:	2300      	movs	r3, #0
 800a174:	613b      	str	r3, [r7, #16]
 800a176:	e043      	b.n	800a200 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a18a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a18e:	d118      	bne.n	800a1c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10a      	bne.n	800a1ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	e013      	b.n	800a1d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	e008      	b.n	800a1d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	613b      	str	r3, [r7, #16]
 800a200:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a204:	461a      	mov	r2, r3
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	4293      	cmp	r3, r2
 800a20a:	d3b5      	bcc.n	800a178 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
 800a210:	e043      	b.n	800a29a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a228:	d118      	bne.n	800a25c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23c:	461a      	mov	r2, r3
 800a23e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	e013      	b.n	800a26e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a252:	461a      	mov	r2, r3
 800a254:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	e008      	b.n	800a26e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a268:	461a      	mov	r2, r3
 800a26a:	2300      	movs	r3, #0
 800a26c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27a:	461a      	mov	r2, r3
 800a27c:	2300      	movs	r3, #0
 800a27e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28c:	461a      	mov	r2, r3
 800a28e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	3301      	adds	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a29e:	461a      	mov	r2, r3
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d3b5      	bcc.n	800a212 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a2c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d105      	bne.n	800a2dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	f043 0210 	orr.w	r2, r3, #16
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	699a      	ldr	r2, [r3, #24]
 800a2e0:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <USB_DevInit+0x2c4>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d005      	beq.n	800a2fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	f043 0208 	orr.w	r2, r3, #8
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a300:	2b01      	cmp	r3, #1
 800a302:	d107      	bne.n	800a314 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a30c:	f043 0304 	orr.w	r3, r3, #4
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a314:	7dfb      	ldrb	r3, [r7, #23]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a320:	b004      	add	sp, #16
 800a322:	4770      	bx	lr
 800a324:	803c3800 	.word	0x803c3800

0800a328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3301      	adds	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a342:	d901      	bls.n	800a348 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	e01b      	b.n	800a380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	daf2      	bge.n	800a336 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	019b      	lsls	r3, r3, #6
 800a358:	f043 0220 	orr.w	r2, r3, #32
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a36c:	d901      	bls.n	800a372 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e006      	b.n	800a380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	2b20      	cmp	r3, #32
 800a37c:	d0f0      	beq.n	800a360 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3a4:	d901      	bls.n	800a3aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e018      	b.n	800a3dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	daf2      	bge.n	800a398 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2210      	movs	r2, #16
 800a3ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3c8:	d901      	bls.n	800a3ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e006      	b.n	800a3dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0310 	and.w	r3, r3, #16
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d0f0      	beq.n	800a3bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a408:	4313      	orrs	r3, r2
 800a40a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b087      	sub	sp, #28
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f003 0306 	and.w	r3, r3, #6
 800a432:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d102      	bne.n	800a440 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a43a:	2300      	movs	r3, #0
 800a43c:	75fb      	strb	r3, [r7, #23]
 800a43e:	e00a      	b.n	800a456 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d002      	beq.n	800a44c <USB_GetDevSpeed+0x32>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b06      	cmp	r3, #6
 800a44a:	d102      	bne.n	800a452 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a44c:	2302      	movs	r3, #2
 800a44e:	75fb      	strb	r3, [r7, #23]
 800a450:	e001      	b.n	800a456 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a452:	230f      	movs	r3, #15
 800a454:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	371c      	adds	r7, #28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	785b      	ldrb	r3, [r3, #1]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d13a      	bne.n	800a4f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a486:	69da      	ldr	r2, [r3, #28]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	f003 030f 	and.w	r3, r3, #15
 800a490:	2101      	movs	r1, #1
 800a492:	fa01 f303 	lsl.w	r3, r1, r3
 800a496:	b29b      	uxth	r3, r3
 800a498:	68f9      	ldr	r1, [r7, #12]
 800a49a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d155      	bne.n	800a564 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	791b      	ldrb	r3, [r3, #4]
 800a4d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	059b      	lsls	r3, r3, #22
 800a4da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	0151      	lsls	r1, r2, #5
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	440a      	add	r2, r1
 800a4e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	e036      	b.n	800a564 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4fc:	69da      	ldr	r2, [r3, #28]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	2101      	movs	r1, #1
 800a508:	fa01 f303 	lsl.w	r3, r1, r3
 800a50c:	041b      	lsls	r3, r3, #16
 800a50e:	68f9      	ldr	r1, [r7, #12]
 800a510:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a514:	4313      	orrs	r3, r2
 800a516:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d11a      	bne.n	800a564 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	791b      	ldrb	r3, [r3, #4]
 800a548:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a54a:	430b      	orrs	r3, r1
 800a54c:	4313      	orrs	r3, r2
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	0151      	lsls	r1, r2, #5
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	440a      	add	r2, r1
 800a556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a55a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a55e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a562:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
	...

0800a574 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d161      	bne.n	800a654 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5a6:	d11f      	bne.n	800a5e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a5c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	0151      	lsls	r1, r2, #5
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	440a      	add	r2, r1
 800a5de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	43db      	mvns	r3, r3
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a608:	4013      	ands	r3, r2
 800a60a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 030f 	and.w	r3, r3, #15
 800a61c:	2101      	movs	r1, #1
 800a61e:	fa01 f303 	lsl.w	r3, r1, r3
 800a622:	b29b      	uxth	r3, r3
 800a624:	43db      	mvns	r3, r3
 800a626:	68f9      	ldr	r1, [r7, #12]
 800a628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a62c:	4013      	ands	r3, r2
 800a62e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	0159      	lsls	r1, r3, #5
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	440b      	add	r3, r1
 800a646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a64a:	4619      	mov	r1, r3
 800a64c:	4b35      	ldr	r3, [pc, #212]	@ (800a724 <USB_DeactivateEndpoint+0x1b0>)
 800a64e:	4013      	ands	r3, r2
 800a650:	600b      	str	r3, [r1, #0]
 800a652:	e060      	b.n	800a716 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a66a:	d11f      	bne.n	800a6ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	440a      	add	r2, r1
 800a682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a686:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a68a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	f003 030f 	and.w	r3, r3, #15
 800a6bc:	2101      	movs	r1, #1
 800a6be:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c2:	041b      	lsls	r3, r3, #16
 800a6c4:	43db      	mvns	r3, r3
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d6:	69da      	ldr	r2, [r3, #28]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	f003 030f 	and.w	r3, r3, #15
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e6:	041b      	lsls	r3, r3, #16
 800a6e8:	43db      	mvns	r3, r3
 800a6ea:	68f9      	ldr	r1, [r7, #12]
 800a6ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	0159      	lsls	r1, r3, #5
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	440b      	add	r3, r1
 800a70a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70e:	4619      	mov	r1, r3
 800a710:	4b05      	ldr	r3, [pc, #20]	@ (800a728 <USB_DeactivateEndpoint+0x1b4>)
 800a712:	4013      	ands	r3, r2
 800a714:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	ec337800 	.word	0xec337800
 800a728:	eff37800 	.word	0xeff37800

0800a72c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	@ 0x28
 800a730:	af02      	add	r7, sp, #8
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	f040 817f 	bne.w	800aa4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d132      	bne.n	800a7bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	69fa      	ldr	r2, [r7, #28]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a770:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a774:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	69fa      	ldr	r2, [r7, #28]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a794:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7b4:	0cdb      	lsrs	r3, r3, #19
 800a7b6:	04db      	lsls	r3, r3, #19
 800a7b8:	6113      	str	r3, [r2, #16]
 800a7ba:	e097      	b.n	800a8ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7d6:	0cdb      	lsrs	r3, r3, #19
 800a7d8:	04db      	lsls	r3, r3, #19
 800a7da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	0151      	lsls	r1, r2, #5
 800a7ee:	69fa      	ldr	r2, [r7, #28]
 800a7f0:	440a      	add	r2, r1
 800a7f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a7fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a7fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d11a      	bne.n	800a83c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	691a      	ldr	r2, [r3, #16]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d903      	bls.n	800a81a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	4413      	add	r3, r2
 800a822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	0151      	lsls	r1, r2, #5
 800a82c:	69fa      	ldr	r2, [r7, #28]
 800a82e:	440a      	add	r2, r1
 800a830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a838:	6113      	str	r3, [r2, #16]
 800a83a:	e044      	b.n	800a8c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	691a      	ldr	r2, [r3, #16]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	4413      	add	r3, r2
 800a846:	1e5a      	subs	r2, r3, #1
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a850:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a85e:	691a      	ldr	r2, [r3, #16]
 800a860:	8afb      	ldrh	r3, [r7, #22]
 800a862:	04d9      	lsls	r1, r3, #19
 800a864:	4ba4      	ldr	r3, [pc, #656]	@ (800aaf8 <USB_EPStartXfer+0x3cc>)
 800a866:	400b      	ands	r3, r1
 800a868:	69b9      	ldr	r1, [r7, #24]
 800a86a:	0148      	lsls	r0, r1, #5
 800a86c:	69f9      	ldr	r1, [r7, #28]
 800a86e:	4401      	add	r1, r0
 800a870:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a874:	4313      	orrs	r3, r2
 800a876:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	791b      	ldrb	r3, [r3, #4]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d122      	bne.n	800a8c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	015a      	lsls	r2, r3, #5
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	4413      	add	r3, r2
 800a888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	0151      	lsls	r1, r2, #5
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	440a      	add	r2, r1
 800a896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a89a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a89e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	015a      	lsls	r2, r3, #5
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ac:	691a      	ldr	r2, [r3, #16]
 800a8ae:	8afb      	ldrh	r3, [r7, #22]
 800a8b0:	075b      	lsls	r3, r3, #29
 800a8b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a8b6:	69b9      	ldr	r1, [r7, #24]
 800a8b8:	0148      	lsls	r0, r1, #5
 800a8ba:	69f9      	ldr	r1, [r7, #28]
 800a8bc:	4401      	add	r1, r0
 800a8be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d2:	691a      	ldr	r2, [r3, #16]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8dc:	69b9      	ldr	r1, [r7, #24]
 800a8de:	0148      	lsls	r0, r1, #5
 800a8e0:	69f9      	ldr	r1, [r7, #28]
 800a8e2:	4401      	add	r1, r0
 800a8e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d14b      	bne.n	800a98a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	4413      	add	r3, r2
 800a902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a906:	461a      	mov	r2, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	791b      	ldrb	r3, [r3, #4]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d128      	bne.n	800a968 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a922:	2b00      	cmp	r3, #0
 800a924:	d110      	bne.n	800a948 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	69ba      	ldr	r2, [r7, #24]
 800a936:	0151      	lsls	r1, r2, #5
 800a938:	69fa      	ldr	r2, [r7, #28]
 800a93a:	440a      	add	r2, r1
 800a93c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a940:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	e00f      	b.n	800a968 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	0151      	lsls	r1, r2, #5
 800a95a:	69fa      	ldr	r2, [r7, #28]
 800a95c:	440a      	add	r2, r1
 800a95e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a966:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	0151      	lsls	r1, r2, #5
 800a97a:	69fa      	ldr	r2, [r7, #28]
 800a97c:	440a      	add	r2, r1
 800a97e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a982:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	e166      	b.n	800ac58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a9a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	791b      	ldrb	r3, [r3, #4]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d015      	beq.n	800a9de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 814e 	beq.w	800ac58 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 030f 	and.w	r3, r3, #15
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d2:	69f9      	ldr	r1, [r7, #28]
 800a9d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	634b      	str	r3, [r1, #52]	@ 0x34
 800a9dc:	e13c      	b.n	800ac58 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d110      	bne.n	800aa10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	015a      	lsls	r2, r3, #5
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	0151      	lsls	r1, r2, #5
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	440a      	add	r2, r1
 800aa04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa0c:	6013      	str	r3, [r2, #0]
 800aa0e:	e00f      	b.n	800aa30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	69ba      	ldr	r2, [r7, #24]
 800aa20:	0151      	lsls	r1, r2, #5
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	440a      	add	r2, r1
 800aa26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	68d9      	ldr	r1, [r3, #12]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	b298      	uxth	r0, r3
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	4603      	mov	r3, r0
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 f9b9 	bl	800adbc <USB_WritePacket>
 800aa4a:	e105      	b.n	800ac58 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	69fa      	ldr	r2, [r7, #28]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa66:	0cdb      	lsrs	r3, r3, #19
 800aa68:	04db      	lsls	r3, r3, #19
 800aa6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	69fa      	ldr	r2, [r7, #28]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d132      	bne.n	800aafc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	689a      	ldr	r2, [r3, #8]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	689a      	ldr	r2, [r3, #8]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaba:	691a      	ldr	r2, [r3, #16]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aac4:	69b9      	ldr	r1, [r7, #24]
 800aac6:	0148      	lsls	r0, r1, #5
 800aac8:	69f9      	ldr	r1, [r7, #28]
 800aaca:	4401      	add	r1, r0
 800aacc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aad0:	4313      	orrs	r3, r2
 800aad2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	69ba      	ldr	r2, [r7, #24]
 800aae4:	0151      	lsls	r1, r2, #5
 800aae6:	69fa      	ldr	r2, [r7, #28]
 800aae8:	440a      	add	r2, r1
 800aaea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaf2:	6113      	str	r3, [r2, #16]
 800aaf4:	e062      	b.n	800abbc <USB_EPStartXfer+0x490>
 800aaf6:	bf00      	nop
 800aaf8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d123      	bne.n	800ab4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab10:	691a      	ldr	r2, [r3, #16]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab1a:	69b9      	ldr	r1, [r7, #24]
 800ab1c:	0148      	lsls	r0, r1, #5
 800ab1e:	69f9      	ldr	r1, [r7, #28]
 800ab20:	4401      	add	r1, r0
 800ab22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab26:	4313      	orrs	r3, r2
 800ab28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	69fa      	ldr	r2, [r7, #28]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab48:	6113      	str	r3, [r2, #16]
 800ab4a:	e037      	b.n	800abbc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	4413      	add	r3, r2
 800ab56:	1e5a      	subs	r2, r3, #1
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	8afa      	ldrh	r2, [r7, #22]
 800ab68:	fb03 f202 	mul.w	r2, r3, r2
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7c:	691a      	ldr	r2, [r3, #16]
 800ab7e:	8afb      	ldrh	r3, [r7, #22]
 800ab80:	04d9      	lsls	r1, r3, #19
 800ab82:	4b38      	ldr	r3, [pc, #224]	@ (800ac64 <USB_EPStartXfer+0x538>)
 800ab84:	400b      	ands	r3, r1
 800ab86:	69b9      	ldr	r1, [r7, #24]
 800ab88:	0148      	lsls	r0, r1, #5
 800ab8a:	69f9      	ldr	r1, [r7, #28]
 800ab8c:	4401      	add	r1, r0
 800ab8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab92:	4313      	orrs	r3, r2
 800ab94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aba2:	691a      	ldr	r2, [r3, #16]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	6a1b      	ldr	r3, [r3, #32]
 800aba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abac:	69b9      	ldr	r1, [r7, #24]
 800abae:	0148      	lsls	r0, r1, #5
 800abb0:	69f9      	ldr	r1, [r7, #28]
 800abb2:	4401      	add	r1, r0
 800abb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800abb8:	4313      	orrs	r3, r2
 800abba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d10d      	bne.n	800abde <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d009      	beq.n	800abde <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	68d9      	ldr	r1, [r3, #12]
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abda:	460a      	mov	r2, r1
 800abdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	791b      	ldrb	r3, [r3, #4]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d128      	bne.n	800ac38 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d110      	bne.n	800ac18 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	0151      	lsls	r1, r2, #5
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	440a      	add	r2, r1
 800ac0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	e00f      	b.n	800ac38 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	69ba      	ldr	r2, [r7, #24]
 800ac28:	0151      	lsls	r1, r2, #5
 800ac2a:	69fa      	ldr	r2, [r7, #28]
 800ac2c:	440a      	add	r2, r1
 800ac2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	1ff80000 	.word	0x1ff80000

0800ac68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	785b      	ldrb	r3, [r3, #1]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d14a      	bne.n	800ad1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac9e:	f040 8086 	bne.w	800adae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	7812      	ldrb	r2, [r2, #0]
 800acb6:	0151      	lsls	r1, r2, #5
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	440a      	add	r2, r1
 800acbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800acc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	015a      	lsls	r2, r3, #5
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	7812      	ldrb	r2, [r2, #0]
 800acda:	0151      	lsls	r1, r2, #5
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	440a      	add	r2, r1
 800ace0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ace4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ace8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3301      	adds	r3, #1
 800acee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d902      	bls.n	800ad00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	75fb      	strb	r3, [r7, #23]
          break;
 800acfe:	e056      	b.n	800adae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad18:	d0e7      	beq.n	800acea <USB_EPStopXfer+0x82>
 800ad1a:	e048      	b.n	800adae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad34:	d13b      	bne.n	800adae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	7812      	ldrb	r2, [r2, #0]
 800ad4a:	0151      	lsls	r1, r2, #5
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	440a      	add	r2, r1
 800ad50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	0151      	lsls	r1, r2, #5
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	440a      	add	r2, r1
 800ad74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3301      	adds	r3, #1
 800ad82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d902      	bls.n	800ad94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	75fb      	strb	r3, [r7, #23]
          break;
 800ad92:	e00c      	b.n	800adae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ada8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adac:	d0e7      	beq.n	800ad7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800adae:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	371c      	adds	r7, #28
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b089      	sub	sp, #36	@ 0x24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4611      	mov	r1, r2
 800adc8:	461a      	mov	r2, r3
 800adca:	460b      	mov	r3, r1
 800adcc:	71fb      	strb	r3, [r7, #7]
 800adce:	4613      	mov	r3, r2
 800add0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800adda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d123      	bne.n	800ae2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ade2:	88bb      	ldrh	r3, [r7, #4]
 800ade4:	3303      	adds	r3, #3
 800ade6:	089b      	lsrs	r3, r3, #2
 800ade8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800adea:	2300      	movs	r3, #0
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	e018      	b.n	800ae22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800adf0:	79fb      	ldrb	r3, [r7, #7]
 800adf2:	031a      	lsls	r2, r3, #12
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adfc:	461a      	mov	r2, r3
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	3301      	adds	r3, #1
 800ae08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	3301      	adds	r3, #1
 800ae14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	61bb      	str	r3, [r7, #24]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d3e2      	bcc.n	800adf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3724      	adds	r7, #36	@ 0x24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b08b      	sub	sp, #44	@ 0x2c
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	4613      	mov	r3, r2
 800ae44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ae4e:	88fb      	ldrh	r3, [r7, #6]
 800ae50:	089b      	lsrs	r3, r3, #2
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	f003 0303 	and.w	r3, r3, #3
 800ae5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ae5e:	2300      	movs	r3, #0
 800ae60:	623b      	str	r3, [r7, #32]
 800ae62:	e014      	b.n	800ae8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae72:	3301      	adds	r3, #1
 800ae74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae78:	3301      	adds	r3, #1
 800ae7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7e:	3301      	adds	r3, #1
 800ae80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	3301      	adds	r3, #1
 800ae86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	623b      	str	r3, [r7, #32]
 800ae8e:	6a3a      	ldr	r2, [r7, #32]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d3e6      	bcc.n	800ae64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ae96:	8bfb      	ldrh	r3, [r7, #30]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01e      	beq.n	800aeda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aea6:	461a      	mov	r2, r3
 800aea8:	f107 0310 	add.w	r3, r7, #16
 800aeac:	6812      	ldr	r2, [r2, #0]
 800aeae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	fa22 f303 	lsr.w	r3, r2, r3
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec0:	701a      	strb	r2, [r3, #0]
      i++;
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	3301      	adds	r3, #1
 800aec6:	623b      	str	r3, [r7, #32]
      pDest++;
 800aec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeca:	3301      	adds	r3, #1
 800aecc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aece:	8bfb      	ldrh	r3, [r7, #30]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aed4:	8bfb      	ldrh	r3, [r7, #30]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1ea      	bne.n	800aeb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aedc:	4618      	mov	r0, r3
 800aede:	372c      	adds	r7, #44	@ 0x2c
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	785b      	ldrb	r3, [r3, #1]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d12c      	bne.n	800af5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	db12      	blt.n	800af3c <USB_EPSetStall+0x54>
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00f      	beq.n	800af3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	015a      	lsls	r2, r3, #5
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4413      	add	r3, r2
 800af24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	0151      	lsls	r1, r2, #5
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	440a      	add	r2, r1
 800af32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	0151      	lsls	r1, r2, #5
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	440a      	add	r2, r1
 800af52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	e02b      	b.n	800afb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	4413      	add	r3, r2
 800af66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	db12      	blt.n	800af96 <USB_EPSetStall+0xae>
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00f      	beq.n	800af96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	015a      	lsls	r2, r3, #5
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	4413      	add	r3, r2
 800af9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	0151      	lsls	r1, r2, #5
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	440a      	add	r2, r1
 800afac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d128      	bne.n	800b032 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	0151      	lsls	r1, r2, #5
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	440a      	add	r2, r1
 800aff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800affa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800affe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	791b      	ldrb	r3, [r3, #4]
 800b004:	2b03      	cmp	r3, #3
 800b006:	d003      	beq.n	800b010 <USB_EPClearStall+0x4c>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	791b      	ldrb	r3, [r3, #4]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d138      	bne.n	800b082 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	0151      	lsls	r1, r2, #5
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	440a      	add	r2, r1
 800b026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b02a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	e027      	b.n	800b082 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	0151      	lsls	r1, r2, #5
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	440a      	add	r2, r1
 800b048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b04c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b050:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	791b      	ldrb	r3, [r3, #4]
 800b056:	2b03      	cmp	r3, #3
 800b058:	d003      	beq.n	800b062 <USB_EPClearStall+0x9e>
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	791b      	ldrb	r3, [r3, #4]
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d10f      	bne.n	800b082 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	015a      	lsls	r2, r3, #5
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	4413      	add	r3, r2
 800b06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	0151      	lsls	r1, r2, #5
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	440a      	add	r2, r1
 800b078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b07c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b080:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b0b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	011b      	lsls	r3, r3, #4
 800b0c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b0c4:	68f9      	ldr	r1, [r7, #12]
 800b0c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b10a:	f023 0302 	bic.w	r3, r3, #2
 800b10e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b11e:	b480      	push	{r7}
 800b120:	b085      	sub	sp, #20
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b14c:	f043 0302 	orr.w	r3, r3, #2
 800b150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4013      	ands	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b178:	68fb      	ldr	r3, [r7, #12]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b186:	b480      	push	{r7}
 800b188:	b085      	sub	sp, #20
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	0c1b      	lsrs	r3, r3, #16
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	b29b      	uxth	r3, r3
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b085      	sub	sp, #20
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b1fe:	78fb      	ldrb	r3, [r7, #3]
 800b200:	015a      	lsls	r2, r3, #5
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4413      	add	r3, r2
 800b206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	4013      	ands	r3, r2
 800b21a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b21c:	68bb      	ldr	r3, [r7, #8]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b087      	sub	sp, #28
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b24a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b24c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b24e:	78fb      	ldrb	r3, [r7, #3]
 800b250:	f003 030f 	and.w	r3, r3, #15
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	fa22 f303 	lsr.w	r3, r2, r3
 800b25a:	01db      	lsls	r3, r3, #7
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	4313      	orrs	r3, r2
 800b262:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b264:	78fb      	ldrb	r3, [r7, #3]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	4013      	ands	r3, r2
 800b276:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b278:	68bb      	ldr	r3, [r7, #8]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	f003 0301 	and.w	r3, r3, #1
}
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b2c0:	f023 0307 	bic.w	r3, r3, #7
 800b2c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	333c      	adds	r3, #60	@ 0x3c
 800b2fe:	3304      	adds	r3, #4
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	4a26      	ldr	r2, [pc, #152]	@ (800b3a0 <USB_EP0_OutStart+0xb8>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d90a      	bls.n	800b322 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b31c:	d101      	bne.n	800b322 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	e037      	b.n	800b392 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b328:	461a      	mov	r2, r3
 800b32a:	2300      	movs	r3, #0
 800b32c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b33c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	697a      	ldr	r2, [r7, #20]
 800b34c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b350:	f043 0318 	orr.w	r3, r3, #24
 800b354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	697a      	ldr	r2, [r7, #20]
 800b360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b364:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b368:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d10f      	bne.n	800b390 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b376:	461a      	mov	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b38a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b38e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	4f54300a 	.word	0x4f54300a

0800b3a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3bc:	d901      	bls.n	800b3c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e022      	b.n	800b408 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	daf2      	bge.n	800b3b0 <USB_CoreReset+0xc>

  count = 10U;
 800b3ca:	230a      	movs	r3, #10
 800b3cc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b3ce:	e002      	b.n	800b3d6 <USB_CoreReset+0x32>
  {
    count--;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f9      	bne.n	800b3d0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	f043 0201 	orr.w	r2, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3f4:	d901      	bls.n	800b3fa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e006      	b.n	800b408 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b01      	cmp	r3, #1
 800b404:	d0f0      	beq.n	800b3e8 <USB_CoreReset+0x44>

  return HAL_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USBD_CDC_Init>:
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70fb      	strb	r3, [r7, #3]
 800b420:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b424:	f002 fd20 	bl	800de68 <USBD_static_malloc>
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <USBD_CDC_Init+0x30>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	32b0      	adds	r2, #176	@ 0xb0
 800b43a:	2100      	movs	r1, #0
 800b43c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b440:	2302      	movs	r3, #2
 800b442:	e0d4      	b.n	800b5ee <USBD_CDC_Init+0x1da>
 800b444:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b448:	2100      	movs	r1, #0
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f003 fd91 	bl	800ef72 <memset>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	32b0      	adds	r2, #176	@ 0xb0
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	32b0      	adds	r2, #176	@ 0xb0
 800b46a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	7c1b      	ldrb	r3, [r3, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d138      	bne.n	800b4ee <USBD_CDC_Init+0xda>
 800b47c:	4b5e      	ldr	r3, [pc, #376]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b47e:	7819      	ldrb	r1, [r3, #0]
 800b480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b484:	2202      	movs	r2, #2
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f002 fbcb 	bl	800dc22 <USBD_LL_OpenEP>
 800b48c:	4b5a      	ldr	r3, [pc, #360]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 020f 	and.w	r2, r3, #15
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	440b      	add	r3, r1
 800b4a0:	3323      	adds	r3, #35	@ 0x23
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	4b55      	ldr	r3, [pc, #340]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b4a8:	7819      	ldrb	r1, [r3, #0]
 800b4aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f002 fbb6 	bl	800dc22 <USBD_LL_OpenEP>
 800b4b6:	4b51      	ldr	r3, [pc, #324]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	f003 020f 	and.w	r2, r3, #15
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	440b      	add	r3, r1
 800b4ca:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	f003 020f 	and.w	r2, r3, #15
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	440b      	add	r3, r1
 800b4e6:	331c      	adds	r3, #28
 800b4e8:	2210      	movs	r2, #16
 800b4ea:	601a      	str	r2, [r3, #0]
 800b4ec:	e035      	b.n	800b55a <USBD_CDC_Init+0x146>
 800b4ee:	4b42      	ldr	r3, [pc, #264]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b4f0:	7819      	ldrb	r1, [r3, #0]
 800b4f2:	2340      	movs	r3, #64	@ 0x40
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f002 fb93 	bl	800dc22 <USBD_LL_OpenEP>
 800b4fc:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	f003 020f 	and.w	r2, r3, #15
 800b504:	6879      	ldr	r1, [r7, #4]
 800b506:	4613      	mov	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	440b      	add	r3, r1
 800b510:	3323      	adds	r3, #35	@ 0x23
 800b512:	2201      	movs	r2, #1
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	4b39      	ldr	r3, [pc, #228]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b518:	7819      	ldrb	r1, [r3, #0]
 800b51a:	2340      	movs	r3, #64	@ 0x40
 800b51c:	2202      	movs	r2, #2
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f002 fb7f 	bl	800dc22 <USBD_LL_OpenEP>
 800b524:	4b35      	ldr	r3, [pc, #212]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	f003 020f 	and.w	r2, r3, #15
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b53c:	2201      	movs	r2, #1
 800b53e:	701a      	strb	r2, [r3, #0]
 800b540:	4b2f      	ldr	r3, [pc, #188]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	f003 020f 	and.w	r2, r3, #15
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	331c      	adds	r3, #28
 800b556:	2210      	movs	r2, #16
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	4b29      	ldr	r3, [pc, #164]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b55c:	7819      	ldrb	r1, [r3, #0]
 800b55e:	2308      	movs	r3, #8
 800b560:	2203      	movs	r2, #3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f002 fb5d 	bl	800dc22 <USBD_LL_OpenEP>
 800b568:	4b25      	ldr	r3, [pc, #148]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 020f 	and.w	r2, r3, #15
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	3323      	adds	r3, #35	@ 0x23
 800b57e:	2201      	movs	r2, #1
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	33b0      	adds	r3, #176	@ 0xb0
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4798      	blx	r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <USBD_CDC_Init+0x1a8>
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e018      	b.n	800b5ee <USBD_CDC_Init+0x1da>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7c1b      	ldrb	r3, [r3, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <USBD_CDC_Init+0x1c6>
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b5c6:	7819      	ldrb	r1, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f002 fc14 	bl	800de00 <USBD_LL_PrepareReceive>
 800b5d8:	e008      	b.n	800b5ec <USBD_CDC_Init+0x1d8>
 800b5da:	4b08      	ldr	r3, [pc, #32]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b5dc:	7819      	ldrb	r1, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5e4:	2340      	movs	r3, #64	@ 0x40
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f002 fc0a 	bl	800de00 <USBD_LL_PrepareReceive>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000093 	.word	0x20000093
 800b5fc:	20000094 	.word	0x20000094
 800b600:	20000095 	.word	0x20000095

0800b604 <USBD_CDC_DeInit>:
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	70fb      	strb	r3, [r7, #3]
 800b610:	4b3a      	ldr	r3, [pc, #232]	@ (800b6fc <USBD_CDC_DeInit+0xf8>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f002 fb29 	bl	800dc6e <USBD_LL_CloseEP>
 800b61c:	4b37      	ldr	r3, [pc, #220]	@ (800b6fc <USBD_CDC_DeInit+0xf8>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	f003 020f 	and.w	r2, r3, #15
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	3323      	adds	r3, #35	@ 0x23
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	4b32      	ldr	r3, [pc, #200]	@ (800b700 <USBD_CDC_DeInit+0xfc>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f002 fb16 	bl	800dc6e <USBD_LL_CloseEP>
 800b642:	4b2f      	ldr	r3, [pc, #188]	@ (800b700 <USBD_CDC_DeInit+0xfc>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	f003 020f 	and.w	r2, r3, #15
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b65a:	2200      	movs	r2, #0
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	4b29      	ldr	r3, [pc, #164]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f002 fb02 	bl	800dc6e <USBD_LL_CloseEP>
 800b66a:	4b26      	ldr	r3, [pc, #152]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f003 020f 	and.w	r2, r3, #15
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	440b      	add	r3, r1
 800b67e:	3323      	adds	r3, #35	@ 0x23
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
 800b684:	4b1f      	ldr	r3, [pc, #124]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 020f 	and.w	r2, r3, #15
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	440b      	add	r3, r1
 800b698:	331c      	adds	r3, #28
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32b0      	adds	r2, #176	@ 0xb0
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d01f      	beq.n	800b6f0 <USBD_CDC_DeInit+0xec>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	33b0      	adds	r3, #176	@ 0xb0
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	4798      	blx	r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	32b0      	adds	r2, #176	@ 0xb0
 800b6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f002 fbd6 	bl	800de84 <USBD_static_free>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32b0      	adds	r2, #176	@ 0xb0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20000093 	.word	0x20000093
 800b700:	20000094 	.word	0x20000094
 800b704:	20000095 	.word	0x20000095

0800b708 <USBD_CDC_Setup>:
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	32b0      	adds	r2, #176	@ 0xb0
 800b71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b720:	613b      	str	r3, [r7, #16]
 800b722:	2300      	movs	r3, #0
 800b724:	737b      	strb	r3, [r7, #13]
 800b726:	2300      	movs	r3, #0
 800b728:	817b      	strh	r3, [r7, #10]
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <USBD_CDC_Setup+0x30>
 800b734:	2303      	movs	r3, #3
 800b736:	e0bf      	b.n	800b8b8 <USBD_CDC_Setup+0x1b0>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b740:	2b00      	cmp	r3, #0
 800b742:	d050      	beq.n	800b7e6 <USBD_CDC_Setup+0xde>
 800b744:	2b20      	cmp	r3, #32
 800b746:	f040 80af 	bne.w	800b8a8 <USBD_CDC_Setup+0x1a0>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	88db      	ldrh	r3, [r3, #6]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d03a      	beq.n	800b7c8 <USBD_CDC_Setup+0xc0>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	b25b      	sxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	da1b      	bge.n	800b794 <USBD_CDC_Setup+0x8c>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	33b0      	adds	r3, #176	@ 0xb0
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	7850      	ldrb	r0, [r2, #1]
 800b772:	6939      	ldr	r1, [r7, #16]
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	88d2      	ldrh	r2, [r2, #6]
 800b778:	4798      	blx	r3
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	88db      	ldrh	r3, [r3, #6]
 800b77e:	2b07      	cmp	r3, #7
 800b780:	bf28      	it	cs
 800b782:	2307      	movcs	r3, #7
 800b784:	81fb      	strh	r3, [r7, #14]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	89fa      	ldrh	r2, [r7, #14]
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 fda9 	bl	800d2e4 <USBD_CtlSendData>
 800b792:	e090      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	785a      	ldrb	r2, [r3, #1]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	88db      	ldrh	r3, [r3, #6]
 800b7a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b7a4:	d803      	bhi.n	800b7ae <USBD_CDC_Setup+0xa6>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	88db      	ldrh	r3, [r3, #6]
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	e000      	b.n	800b7b0 <USBD_CDC_Setup+0xa8>
 800b7ae:	2240      	movs	r2, #64	@ 0x40
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
 800b7b6:	6939      	ldr	r1, [r7, #16]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 fdbe 	bl	800d342 <USBD_CtlPrepareRx>
 800b7c6:	e076      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	33b0      	adds	r3, #176	@ 0xb0
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	7850      	ldrb	r0, [r2, #1]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	4798      	blx	r3
 800b7e4:	e067      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	785b      	ldrb	r3, [r3, #1]
 800b7ea:	2b0b      	cmp	r3, #11
 800b7ec:	d851      	bhi.n	800b892 <USBD_CDC_Setup+0x18a>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <USBD_CDC_Setup+0xec>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b825 	.word	0x0800b825
 800b7f8:	0800b8a1 	.word	0x0800b8a1
 800b7fc:	0800b893 	.word	0x0800b893
 800b800:	0800b893 	.word	0x0800b893
 800b804:	0800b893 	.word	0x0800b893
 800b808:	0800b893 	.word	0x0800b893
 800b80c:	0800b893 	.word	0x0800b893
 800b810:	0800b893 	.word	0x0800b893
 800b814:	0800b893 	.word	0x0800b893
 800b818:	0800b893 	.word	0x0800b893
 800b81c:	0800b84f 	.word	0x0800b84f
 800b820:	0800b879 	.word	0x0800b879
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d107      	bne.n	800b840 <USBD_CDC_Setup+0x138>
 800b830:	f107 030a 	add.w	r3, r7, #10
 800b834:	2202      	movs	r2, #2
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 fd53 	bl	800d2e4 <USBD_CtlSendData>
 800b83e:	e032      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 fcd1 	bl	800d1ea <USBD_CtlError>
 800b848:	2303      	movs	r3, #3
 800b84a:	75fb      	strb	r3, [r7, #23]
 800b84c:	e02b      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b03      	cmp	r3, #3
 800b858:	d107      	bne.n	800b86a <USBD_CDC_Setup+0x162>
 800b85a:	f107 030d 	add.w	r3, r7, #13
 800b85e:	2201      	movs	r2, #1
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fd3e 	bl	800d2e4 <USBD_CtlSendData>
 800b868:	e01d      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 fcbc 	bl	800d1ea <USBD_CtlError>
 800b872:	2303      	movs	r3, #3
 800b874:	75fb      	strb	r3, [r7, #23]
 800b876:	e016      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b03      	cmp	r3, #3
 800b882:	d00f      	beq.n	800b8a4 <USBD_CDC_Setup+0x19c>
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f001 fcaf 	bl	800d1ea <USBD_CtlError>
 800b88c:	2303      	movs	r3, #3
 800b88e:	75fb      	strb	r3, [r7, #23]
 800b890:	e008      	b.n	800b8a4 <USBD_CDC_Setup+0x19c>
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 fca8 	bl	800d1ea <USBD_CtlError>
 800b89a:	2303      	movs	r3, #3
 800b89c:	75fb      	strb	r3, [r7, #23]
 800b89e:	e002      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
 800b8a0:	bf00      	nop
 800b8a2:	e008      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
 800b8a4:	bf00      	nop
 800b8a6:	e006      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 fc9d 	bl	800d1ea <USBD_CtlError>
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	75fb      	strb	r3, [r7, #23]
 800b8b4:	bf00      	nop
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_CDC_DataIn>:
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	70fb      	strb	r3, [r7, #3]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	32b0      	adds	r2, #176	@ 0xb0
 800b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <USBD_CDC_DataIn+0x2a>
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e065      	b.n	800b9b6 <USBD_CDC_DataIn+0xf6>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	32b0      	adds	r2, #176	@ 0xb0
 800b8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f8:	60bb      	str	r3, [r7, #8]
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	440b      	add	r3, r1
 800b90c:	3314      	adds	r3, #20
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d02f      	beq.n	800b974 <USBD_CDC_DataIn+0xb4>
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	f003 020f 	and.w	r2, r3, #15
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	3314      	adds	r3, #20
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	f003 010f 	and.w	r1, r3, #15
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	460b      	mov	r3, r1
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	440b      	add	r3, r1
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4403      	add	r3, r0
 800b93c:	331c      	adds	r3, #28
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	fbb2 f1f3 	udiv	r1, r2, r3
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d112      	bne.n	800b974 <USBD_CDC_DataIn+0xb4>
 800b94e:	78fb      	ldrb	r3, [r7, #3]
 800b950:	f003 020f 	and.w	r2, r3, #15
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	440b      	add	r3, r1
 800b960:	3314      	adds	r3, #20
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	78f9      	ldrb	r1, [r7, #3]
 800b968:	2300      	movs	r3, #0
 800b96a:	2200      	movs	r2, #0
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f002 fa26 	bl	800ddbe <USBD_LL_Transmit>
 800b972:	e01f      	b.n	800b9b4 <USBD_CDC_DataIn+0xf4>
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	33b0      	adds	r3, #176	@ 0xb0
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d010      	beq.n	800b9b4 <USBD_CDC_DataIn+0xf4>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	33b0      	adds	r3, #176	@ 0xb0
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b9b0:	78fa      	ldrb	r2, [r7, #3]
 800b9b2:	4798      	blx	r3
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_CDC_DataOut>:
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	32b0      	adds	r2, #176	@ 0xb0
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	32b0      	adds	r2, #176	@ 0xb0
 800b9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <USBD_CDC_DataOut+0x32>
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e01a      	b.n	800ba26 <USBD_CDC_DataOut+0x68>
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f002 fa24 	bl	800de42 <USBD_LL_GetRxDataSize>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	33b0      	adds	r3, #176	@ 0xb0
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ba20:	4611      	mov	r1, r2
 800ba22:	4798      	blx	r3
 800ba24:	2300      	movs	r3, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBD_CDC_EP0_RxReady>:
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	32b0      	adds	r2, #176	@ 0xb0
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <USBD_CDC_EP0_RxReady+0x22>
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e024      	b.n	800ba9a <USBD_CDC_EP0_RxReady+0x6c>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	33b0      	adds	r3, #176	@ 0xb0
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d019      	beq.n	800ba98 <USBD_CDC_EP0_RxReady+0x6a>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ba6a:	2bff      	cmp	r3, #255	@ 0xff
 800ba6c:	d014      	beq.n	800ba98 <USBD_CDC_EP0_RxReady+0x6a>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	33b0      	adds	r3, #176	@ 0xb0
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 800ba86:	68f9      	ldr	r1, [r7, #12]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 800ba8e:	4798      	blx	r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	22ff      	movs	r2, #255	@ 0xff
 800ba94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 800ba98:	2300      	movs	r3, #0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
	...

0800baa4 <USBD_CDC_GetFSCfgDesc>:
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	2182      	movs	r1, #130	@ 0x82
 800baae:	4818      	ldr	r0, [pc, #96]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bab0:	f000 fd62 	bl	800c578 <USBD_GetEpDesc>
 800bab4:	6178      	str	r0, [r7, #20]
 800bab6:	2101      	movs	r1, #1
 800bab8:	4815      	ldr	r0, [pc, #84]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800baba:	f000 fd5d 	bl	800c578 <USBD_GetEpDesc>
 800babe:	6138      	str	r0, [r7, #16]
 800bac0:	2181      	movs	r1, #129	@ 0x81
 800bac2:	4813      	ldr	r0, [pc, #76]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bac4:	f000 fd58 	bl	800c578 <USBD_GetEpDesc>
 800bac8:	60f8      	str	r0, [r7, #12]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <USBD_CDC_GetFSCfgDesc+0x32>
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2210      	movs	r2, #16
 800bad4:	719a      	strb	r2, [r3, #6]
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d006      	beq.n	800baea <USBD_CDC_GetFSCfgDesc+0x46>
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2200      	movs	r2, #0
 800bae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bae4:	711a      	strb	r2, [r3, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	715a      	strb	r2, [r3, #5]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <USBD_CDC_GetFSCfgDesc+0x5a>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baf8:	711a      	strb	r2, [r3, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	715a      	strb	r2, [r3, #5]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2243      	movs	r2, #67	@ 0x43
 800bb02:	801a      	strh	r2, [r3, #0]
 800bb04:	4b02      	ldr	r3, [pc, #8]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000050 	.word	0x20000050

0800bb14 <USBD_CDC_GetHSCfgDesc>:
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	2182      	movs	r1, #130	@ 0x82
 800bb1e:	4818      	ldr	r0, [pc, #96]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb20:	f000 fd2a 	bl	800c578 <USBD_GetEpDesc>
 800bb24:	6178      	str	r0, [r7, #20]
 800bb26:	2101      	movs	r1, #1
 800bb28:	4815      	ldr	r0, [pc, #84]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb2a:	f000 fd25 	bl	800c578 <USBD_GetEpDesc>
 800bb2e:	6138      	str	r0, [r7, #16]
 800bb30:	2181      	movs	r1, #129	@ 0x81
 800bb32:	4813      	ldr	r0, [pc, #76]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb34:	f000 fd20 	bl	800c578 <USBD_GetEpDesc>
 800bb38:	60f8      	str	r0, [r7, #12]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <USBD_CDC_GetHSCfgDesc+0x32>
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2210      	movs	r2, #16
 800bb44:	719a      	strb	r2, [r3, #6]
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d006      	beq.n	800bb5a <USBD_CDC_GetHSCfgDesc+0x46>
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	711a      	strb	r2, [r3, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f042 0202 	orr.w	r2, r2, #2
 800bb58:	715a      	strb	r2, [r3, #5]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <USBD_CDC_GetHSCfgDesc+0x5a>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	711a      	strb	r2, [r3, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f042 0202 	orr.w	r2, r2, #2
 800bb6c:	715a      	strb	r2, [r3, #5]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2243      	movs	r2, #67	@ 0x43
 800bb72:	801a      	strh	r2, [r3, #0]
 800bb74:	4b02      	ldr	r3, [pc, #8]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000050 	.word	0x20000050

0800bb84 <USBD_CDC_GetOtherSpeedCfgDesc>:
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	2182      	movs	r1, #130	@ 0x82
 800bb8e:	4818      	ldr	r0, [pc, #96]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bb90:	f000 fcf2 	bl	800c578 <USBD_GetEpDesc>
 800bb94:	6178      	str	r0, [r7, #20]
 800bb96:	2101      	movs	r1, #1
 800bb98:	4815      	ldr	r0, [pc, #84]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bb9a:	f000 fced 	bl	800c578 <USBD_GetEpDesc>
 800bb9e:	6138      	str	r0, [r7, #16]
 800bba0:	2181      	movs	r1, #129	@ 0x81
 800bba2:	4813      	ldr	r0, [pc, #76]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bba4:	f000 fce8 	bl	800c578 <USBD_GetEpDesc>
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	719a      	strb	r2, [r3, #6]
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d006      	beq.n	800bbca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbc4:	711a      	strb	r2, [r3, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	715a      	strb	r2, [r3, #5]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbd8:	711a      	strb	r2, [r3, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	715a      	strb	r2, [r3, #5]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2243      	movs	r2, #67	@ 0x43
 800bbe2:	801a      	strh	r2, [r3, #0]
 800bbe4:	4b02      	ldr	r3, [pc, #8]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000050 	.word	0x20000050

0800bbf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	220a      	movs	r2, #10
 800bc00:	801a      	strh	r2, [r3, #0]
 800bc02:	4b03      	ldr	r3, [pc, #12]	@ (800bc10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	2000000c 	.word	0x2000000c

0800bc14 <USBD_CDC_RegisterInterface>:
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <USBD_CDC_RegisterInterface+0x14>
 800bc24:	2303      	movs	r3, #3
 800bc26:	e009      	b.n	800bc3c <USBD_CDC_RegisterInterface+0x28>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	33b0      	adds	r3, #176	@ 0xb0
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	605a      	str	r2, [r3, #4]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <USBD_CDC_SetTxBuffer>:
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	32b0      	adds	r2, #176	@ 0xb0
 800bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc62:	617b      	str	r3, [r7, #20]
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <USBD_CDC_SetTxBuffer+0x26>
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e008      	b.n	800bc80 <USBD_CDC_SetTxBuffer+0x38>
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4618      	mov	r0, r3
 800bc82:	371c      	adds	r7, #28
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <USBD_CDC_SetRxBuffer>:
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	32b0      	adds	r2, #176	@ 0xb0
 800bca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <USBD_CDC_SetRxBuffer+0x24>
 800bcac:	2303      	movs	r3, #3
 800bcae:	e004      	b.n	800bcba <USBD_CDC_SetRxBuffer+0x2e>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <USBD_CDC_TransmitPacket>:
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	32b0      	adds	r2, #176	@ 0xb0
 800bcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcde:	60bb      	str	r3, [r7, #8]
 800bce0:	2301      	movs	r3, #1
 800bce2:	73fb      	strb	r3, [r7, #15]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d101      	bne.n	800bcee <USBD_CDC_TransmitPacket+0x26>
 800bcea:	2303      	movs	r3, #3
 800bcec:	e025      	b.n	800bd3a <USBD_CDC_TransmitPacket+0x72>
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d11f      	bne.n	800bd38 <USBD_CDC_TransmitPacket+0x70>
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800bd00:	4b10      	ldr	r3, [pc, #64]	@ (800bd44 <USBD_CDC_TransmitPacket+0x7c>)
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f003 020f 	and.w	r2, r3, #15
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	4613      	mov	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4403      	add	r3, r0
 800bd1a:	3314      	adds	r3, #20
 800bd1c:	6019      	str	r1, [r3, #0]
 800bd1e:	4b09      	ldr	r3, [pc, #36]	@ (800bd44 <USBD_CDC_TransmitPacket+0x7c>)
 800bd20:	7819      	ldrb	r1, [r3, #0]
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f002 f845 	bl	800ddbe <USBD_LL_Transmit>
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20000093 	.word	0x20000093

0800bd48 <USBD_CDC_ReceivePacket>:
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	32b0      	adds	r2, #176	@ 0xb0
 800bd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	32b0      	adds	r2, #176	@ 0xb0
 800bd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <USBD_CDC_ReceivePacket+0x2e>
 800bd72:	2303      	movs	r3, #3
 800bd74:	e018      	b.n	800bda8 <USBD_CDC_ReceivePacket+0x60>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	7c1b      	ldrb	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <USBD_CDC_ReceivePacket+0x4c>
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb0 <USBD_CDC_ReceivePacket+0x68>)
 800bd80:	7819      	ldrb	r1, [r3, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f002 f837 	bl	800de00 <USBD_LL_PrepareReceive>
 800bd92:	e008      	b.n	800bda6 <USBD_CDC_ReceivePacket+0x5e>
 800bd94:	4b06      	ldr	r3, [pc, #24]	@ (800bdb0 <USBD_CDC_ReceivePacket+0x68>)
 800bd96:	7819      	ldrb	r1, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd9e:	2340      	movs	r3, #64	@ 0x40
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f002 f82d 	bl	800de00 <USBD_LL_PrepareReceive>
 800bda6:	2300      	movs	r3, #0
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	20000094 	.word	0x20000094

0800bdb4 <USBD_Init>:
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	71fb      	strb	r3, [r7, #7]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d101      	bne.n	800bdcc <USBD_Init+0x18>
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e01f      	b.n	800be0c <USBD_Init+0x58>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <USBD_Init+0x3e>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	79fa      	ldrb	r2, [r7, #7]
 800bdfe:	701a      	strb	r2, [r3, #0]
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f001 fea7 	bl	800db54 <USBD_LL_Init>
 800be06:	4603      	mov	r3, r0
 800be08:	75fb      	strb	r3, [r7, #23]
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_RegisterClass>:
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	2300      	movs	r3, #0
 800be20:	81fb      	strh	r3, [r7, #14]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <USBD_RegisterClass+0x18>
 800be28:	2303      	movs	r3, #3
 800be2a:	e025      	b.n	800be78 <USBD_RegisterClass+0x64>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	32ae      	adds	r2, #174	@ 0xae
 800be3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00f      	beq.n	800be68 <USBD_RegisterClass+0x54>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	32ae      	adds	r2, #174	@ 0xae
 800be52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be58:	f107 020e 	add.w	r2, r7, #14
 800be5c:	4610      	mov	r0, r2
 800be5e:	4798      	blx	r3
 800be60:	4602      	mov	r2, r0
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
 800be76:	2300      	movs	r3, #0
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <USBD_Start>:
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 feaf 	bl	800dbec <USBD_LL_Start>
 800be8e:	4603      	mov	r3, r0
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBD_RunTestMode>:
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	2300      	movs	r3, #0
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <USBD_SetClassConfig>:
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	460b      	mov	r3, r1
 800beb8:	70fb      	strb	r3, [r7, #3]
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d009      	beq.n	800bedc <USBD_SetClassConfig+0x2e>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	4611      	mov	r1, r2
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	4798      	blx	r3
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <USBD_ClrClassConfig>:
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b084      	sub	sp, #16
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	460b      	mov	r3, r1
 800bef0:	70fb      	strb	r3, [r7, #3]
 800bef2:	2300      	movs	r3, #0
 800bef4:	73fb      	strb	r3, [r7, #15]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	78fa      	ldrb	r2, [r7, #3]
 800bf00:	4611      	mov	r1, r2
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	4798      	blx	r3
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <USBD_ClrClassConfig+0x2a>
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	73fb      	strb	r3, [r7, #15]
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_LL_SetupStage>:
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f001 f922 	bl	800d176 <USBD_ParseSetupRequest>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bf40:	461a      	mov	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf4e:	f003 031f 	and.w	r3, r3, #31
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d01a      	beq.n	800bf8c <USBD_LL_SetupStage+0x72>
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d822      	bhi.n	800bfa0 <USBD_LL_SetupStage+0x86>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <USBD_LL_SetupStage+0x4a>
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d00a      	beq.n	800bf78 <USBD_LL_SetupStage+0x5e>
 800bf62:	e01d      	b.n	800bfa0 <USBD_LL_SetupStage+0x86>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fb77 	bl	800c660 <USBD_StdDevReq>
 800bf72:	4603      	mov	r3, r0
 800bf74:	73fb      	strb	r3, [r7, #15]
 800bf76:	e020      	b.n	800bfba <USBD_LL_SetupStage+0xa0>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fbdf 	bl	800c744 <USBD_StdItfReq>
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
 800bf8a:	e016      	b.n	800bfba <USBD_LL_SetupStage+0xa0>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fc41 	bl	800c81c <USBD_StdEPReq>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	73fb      	strb	r3, [r7, #15]
 800bf9e:	e00c      	b.n	800bfba <USBD_LL_SetupStage+0xa0>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bfa6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f001 fe7c 	bl	800dcac <USBD_LL_StallEP>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73fb      	strb	r3, [r7, #15]
 800bfb8:	bf00      	nop
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBD_LL_DataOutStage>:
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	72fb      	strb	r3, [r7, #11]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	75fb      	strb	r3, [r7, #23]
 800bfd6:	7afb      	ldrb	r3, [r7, #11]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d177      	bne.n	800c0cc <USBD_LL_DataOutStage+0x108>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bfe2:	613b      	str	r3, [r7, #16]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	f040 80a1 	bne.w	800c132 <USBD_LL_DataOutStage+0x16e>
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	8992      	ldrh	r2, [r2, #12]
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d91c      	bls.n	800c036 <USBD_LL_DataOutStage+0x72>
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	8992      	ldrh	r2, [r2, #12]
 800c004:	1a9a      	subs	r2, r3, r2
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	605a      	str	r2, [r3, #4]
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	8992      	ldrh	r2, [r2, #12]
 800c012:	441a      	add	r2, r3
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	611a      	str	r2, [r3, #16]
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	6919      	ldr	r1, [r3, #16]
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	899b      	ldrh	r3, [r3, #12]
 800c020:	461a      	mov	r2, r3
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	4293      	cmp	r3, r2
 800c028:	bf38      	it	cc
 800c02a:	4613      	movcc	r3, r2
 800c02c:	461a      	mov	r2, r3
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f001 f9a8 	bl	800d384 <USBD_CtlContinueRx>
 800c034:	e07d      	b.n	800c132 <USBD_LL_DataOutStage+0x16e>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c03c:	f003 031f 	and.w	r3, r3, #31
 800c040:	2b02      	cmp	r3, #2
 800c042:	d014      	beq.n	800c06e <USBD_LL_DataOutStage+0xaa>
 800c044:	2b02      	cmp	r3, #2
 800c046:	d81d      	bhi.n	800c084 <USBD_LL_DataOutStage+0xc0>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <USBD_LL_DataOutStage+0x8e>
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d003      	beq.n	800c058 <USBD_LL_DataOutStage+0x94>
 800c050:	e018      	b.n	800c084 <USBD_LL_DataOutStage+0xc0>
 800c052:	2300      	movs	r3, #0
 800c054:	75bb      	strb	r3, [r7, #22]
 800c056:	e018      	b.n	800c08a <USBD_LL_DataOutStage+0xc6>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	4619      	mov	r1, r3
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f000 fa6e 	bl	800c544 <USBD_CoreFindIF>
 800c068:	4603      	mov	r3, r0
 800c06a:	75bb      	strb	r3, [r7, #22]
 800c06c:	e00d      	b.n	800c08a <USBD_LL_DataOutStage+0xc6>
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c074:	b2db      	uxtb	r3, r3
 800c076:	4619      	mov	r1, r3
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f000 fa70 	bl	800c55e <USBD_CoreFindEP>
 800c07e:	4603      	mov	r3, r0
 800c080:	75bb      	strb	r3, [r7, #22]
 800c082:	e002      	b.n	800c08a <USBD_LL_DataOutStage+0xc6>
 800c084:	2300      	movs	r3, #0
 800c086:	75bb      	strb	r3, [r7, #22]
 800c088:	bf00      	nop
 800c08a:	7dbb      	ldrb	r3, [r7, #22]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d119      	bne.n	800c0c4 <USBD_LL_DataOutStage+0x100>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d113      	bne.n	800c0c4 <USBD_LL_DataOutStage+0x100>
 800c09c:	7dba      	ldrb	r2, [r7, #22]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	32ae      	adds	r2, #174	@ 0xae
 800c0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <USBD_LL_DataOutStage+0x100>
 800c0ac:	7dba      	ldrb	r2, [r7, #22]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 800c0b4:	7dba      	ldrb	r2, [r7, #22]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	32ae      	adds	r2, #174	@ 0xae
 800c0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	4798      	blx	r3
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f001 f96e 	bl	800d3a6 <USBD_CtlSendStatus>
 800c0ca:	e032      	b.n	800c132 <USBD_LL_DataOutStage+0x16e>
 800c0cc:	7afb      	ldrb	r3, [r7, #11]
 800c0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f000 fa41 	bl	800c55e <USBD_CoreFindEP>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75bb      	strb	r3, [r7, #22]
 800c0e0:	7dbb      	ldrb	r3, [r7, #22]
 800c0e2:	2bff      	cmp	r3, #255	@ 0xff
 800c0e4:	d025      	beq.n	800c132 <USBD_LL_DataOutStage+0x16e>
 800c0e6:	7dbb      	ldrb	r3, [r7, #22]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d122      	bne.n	800c132 <USBD_LL_DataOutStage+0x16e>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d117      	bne.n	800c128 <USBD_LL_DataOutStage+0x164>
 800c0f8:	7dba      	ldrb	r2, [r7, #22]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	32ae      	adds	r2, #174	@ 0xae
 800c0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00f      	beq.n	800c128 <USBD_LL_DataOutStage+0x164>
 800c108:	7dba      	ldrb	r2, [r7, #22]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 800c110:	7dba      	ldrb	r2, [r7, #22]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	32ae      	adds	r2, #174	@ 0xae
 800c116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	7afa      	ldrb	r2, [r7, #11]
 800c11e:	4611      	mov	r1, r2
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	4798      	blx	r3
 800c124:	4603      	mov	r3, r0
 800c126:	75fb      	strb	r3, [r7, #23]
 800c128:	7dfb      	ldrb	r3, [r7, #23]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <USBD_LL_DataOutStage+0x16e>
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
 800c130:	e000      	b.n	800c134 <USBD_LL_DataOutStage+0x170>
 800c132:	2300      	movs	r3, #0
 800c134:	4618      	mov	r0, r3
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBD_LL_DataInStage>:
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	460b      	mov	r3, r1
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	72fb      	strb	r3, [r7, #11]
 800c14a:	7afb      	ldrb	r3, [r7, #11]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d178      	bne.n	800c242 <USBD_LL_DataInStage+0x106>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3314      	adds	r3, #20
 800c154:	613b      	str	r3, [r7, #16]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	d163      	bne.n	800c228 <USBD_LL_DataInStage+0xec>
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	8992      	ldrh	r2, [r2, #12]
 800c168:	4293      	cmp	r3, r2
 800c16a:	d91c      	bls.n	800c1a6 <USBD_LL_DataInStage+0x6a>
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	8992      	ldrh	r2, [r2, #12]
 800c174:	1a9a      	subs	r2, r3, r2
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	605a      	str	r2, [r3, #4]
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	8992      	ldrh	r2, [r2, #12]
 800c182:	441a      	add	r2, r3
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	611a      	str	r2, [r3, #16]
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6919      	ldr	r1, [r3, #16]
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	461a      	mov	r2, r3
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f001 f8c4 	bl	800d320 <USBD_CtlContinueSendData>
 800c198:	2300      	movs	r3, #0
 800c19a:	2200      	movs	r2, #0
 800c19c:	2100      	movs	r1, #0
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f001 fe2e 	bl	800de00 <USBD_LL_PrepareReceive>
 800c1a4:	e040      	b.n	800c228 <USBD_LL_DataInStage+0xec>
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	899b      	ldrh	r3, [r3, #12]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d11c      	bne.n	800c1ee <USBD_LL_DataInStage+0xb2>
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	8992      	ldrh	r2, [r2, #12]
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d316      	bcc.n	800c1ee <USBD_LL_DataInStage+0xb2>
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d20f      	bcs.n	800c1ee <USBD_LL_DataInStage+0xb2>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f001 f8a4 	bl	800d320 <USBD_CtlContinueSendData>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f001 fe0a 	bl	800de00 <USBD_LL_PrepareReceive>
 800c1ec:	e01c      	b.n	800c228 <USBD_LL_DataInStage+0xec>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d10f      	bne.n	800c21a <USBD_LL_DataInStage+0xde>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d009      	beq.n	800c21a <USBD_LL_DataInStage+0xde>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	4798      	blx	r3
 800c21a:	2180      	movs	r1, #128	@ 0x80
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f001 fd45 	bl	800dcac <USBD_LL_StallEP>
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f001 f8d2 	bl	800d3cc <USBD_CtlReceiveStatus>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d03a      	beq.n	800c2a8 <USBD_LL_DataInStage+0x16c>
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7ff fe30 	bl	800be98 <USBD_RunTestMode>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c240:	e032      	b.n	800c2a8 <USBD_LL_DataInStage+0x16c>
 800c242:	7afb      	ldrb	r3, [r7, #11]
 800c244:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	4619      	mov	r1, r3
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 f986 	bl	800c55e <USBD_CoreFindEP>
 800c252:	4603      	mov	r3, r0
 800c254:	75fb      	strb	r3, [r7, #23]
 800c256:	7dfb      	ldrb	r3, [r7, #23]
 800c258:	2bff      	cmp	r3, #255	@ 0xff
 800c25a:	d025      	beq.n	800c2a8 <USBD_LL_DataInStage+0x16c>
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d122      	bne.n	800c2a8 <USBD_LL_DataInStage+0x16c>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d11c      	bne.n	800c2a8 <USBD_LL_DataInStage+0x16c>
 800c26e:	7dfa      	ldrb	r2, [r7, #23]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	32ae      	adds	r2, #174	@ 0xae
 800c274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d014      	beq.n	800c2a8 <USBD_LL_DataInStage+0x16c>
 800c27e:	7dfa      	ldrb	r2, [r7, #23]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 800c286:	7dfa      	ldrb	r2, [r7, #23]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	32ae      	adds	r2, #174	@ 0xae
 800c28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	7afa      	ldrb	r2, [r7, #11]
 800c294:	4611      	mov	r1, r2
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	4798      	blx	r3
 800c29a:	4603      	mov	r3, r0
 800c29c:	75bb      	strb	r3, [r7, #22]
 800c29e:	7dbb      	ldrb	r3, [r7, #22]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <USBD_LL_DataInStage+0x16c>
 800c2a4:	7dbb      	ldrb	r3, [r7, #22]
 800c2a6:	e000      	b.n	800c2aa <USBD_LL_DataInStage+0x16e>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBD_LL_Reset>:
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	605a      	str	r2, [r3, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d014      	beq.n	800c318 <USBD_LL_Reset+0x66>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00e      	beq.n	800c318 <USBD_LL_Reset+0x66>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	6852      	ldr	r2, [r2, #4]
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	4611      	mov	r1, r2
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	4798      	blx	r3
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <USBD_LL_Reset+0x66>
 800c314:	2303      	movs	r3, #3
 800c316:	73fb      	strb	r3, [r7, #15]
 800c318:	2340      	movs	r3, #64	@ 0x40
 800c31a:	2200      	movs	r2, #0
 800c31c:	2100      	movs	r1, #0
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f001 fc7f 	bl	800dc22 <USBD_LL_OpenEP>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2240      	movs	r2, #64	@ 0x40
 800c330:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
 800c334:	2340      	movs	r3, #64	@ 0x40
 800c336:	2200      	movs	r2, #0
 800c338:	2180      	movs	r1, #128	@ 0x80
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 fc71 	bl	800dc22 <USBD_LL_OpenEP>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2240      	movs	r2, #64	@ 0x40
 800c34c:	841a      	strh	r2, [r3, #32]
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <USBD_LL_SetSpeed>:
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	70fb      	strb	r3, [r7, #3]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	78fa      	ldrb	r2, [r7, #3]
 800c368:	741a      	strb	r2, [r3, #16]
 800c36a:	2300      	movs	r3, #0
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <USBD_LL_Suspend>:
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c386:	b2db      	uxtb	r3, r3
 800c388:	2b04      	cmp	r3, #4
 800c38a:	d006      	beq.n	800c39a <USBD_LL_Suspend+0x22>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c392:	b2da      	uxtb	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2204      	movs	r2, #4
 800c39e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <USBD_LL_Resume>:
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b04      	cmp	r3, #4
 800c3c2:	d106      	bne.n	800c3d2 <USBD_LL_Resume+0x22>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USBD_LL_SOF>:
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d110      	bne.n	800c416 <USBD_LL_SOF+0x36>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00b      	beq.n	800c416 <USBD_LL_SOF+0x36>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c404:	69db      	ldr	r3, [r3, #28]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <USBD_LL_SOF+0x36>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c410:	69db      	ldr	r3, [r3, #28]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	4798      	blx	r3
 800c416:	2300      	movs	r3, #0
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_LL_IsoINIncomplete>:
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	32ae      	adds	r2, #174	@ 0xae
 800c436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <USBD_LL_IsoINIncomplete+0x22>
 800c43e:	2303      	movs	r3, #3
 800c440:	e01c      	b.n	800c47c <USBD_LL_IsoINIncomplete+0x5c>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d115      	bne.n	800c47a <USBD_LL_IsoINIncomplete+0x5a>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	32ae      	adds	r2, #174	@ 0xae
 800c458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45c:	6a1b      	ldr	r3, [r3, #32]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00b      	beq.n	800c47a <USBD_LL_IsoINIncomplete+0x5a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	32ae      	adds	r2, #174	@ 0xae
 800c46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	78fa      	ldrb	r2, [r7, #3]
 800c474:	4611      	mov	r1, r2
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	4798      	blx	r3
 800c47a:	2300      	movs	r3, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_LL_IsoOUTIncomplete>:
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	460b      	mov	r3, r1
 800c48e:	70fb      	strb	r3, [r7, #3]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	32ae      	adds	r2, #174	@ 0xae
 800c49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <USBD_LL_IsoOUTIncomplete+0x22>
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	e01c      	b.n	800c4e0 <USBD_LL_IsoOUTIncomplete+0x5c>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d115      	bne.n	800c4de <USBD_LL_IsoOUTIncomplete+0x5a>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	32ae      	adds	r2, #174	@ 0xae
 800c4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00b      	beq.n	800c4de <USBD_LL_IsoOUTIncomplete+0x5a>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	32ae      	adds	r2, #174	@ 0xae
 800c4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d6:	78fa      	ldrb	r2, [r7, #3]
 800c4d8:	4611      	mov	r1, r2
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	4798      	blx	r3
 800c4de:	2300      	movs	r3, #0
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <USBD_LL_DevConnected>:
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	370c      	adds	r7, #12
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <USBD_LL_DevDisconnected>:
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	2300      	movs	r3, #0
 800c508:	73fb      	strb	r3, [r7, #15]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00e      	beq.n	800c53a <USBD_LL_DevDisconnected+0x3c>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6852      	ldr	r2, [r2, #4]
 800c528:	b2d2      	uxtb	r2, r2
 800c52a:	4611      	mov	r1, r2
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	4798      	blx	r3
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <USBD_LL_DevDisconnected+0x3c>
 800c536:	2303      	movs	r3, #3
 800c538:	73fb      	strb	r3, [r7, #15]
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_CoreFindIF>:
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
 800c550:	2300      	movs	r3, #0
 800c552:	4618      	mov	r0, r3
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <USBD_CoreFindEP>:
 800c55e:	b480      	push	{r7}
 800c560:	b083      	sub	sp, #12
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	460b      	mov	r3, r1
 800c568:	70fb      	strb	r3, [r7, #3]
 800c56a:	2300      	movs	r3, #0
 800c56c:	4618      	mov	r0, r3
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <USBD_GetEpDesc>:
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	70fb      	strb	r3, [r7, #3]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	2300      	movs	r3, #0
 800c58e:	613b      	str	r3, [r7, #16]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	885b      	ldrh	r3, [r3, #2]
 800c594:	b29b      	uxth	r3, r3
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	7812      	ldrb	r2, [r2, #0]
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d91f      	bls.n	800c5de <USBD_GetEpDesc+0x66>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	817b      	strh	r3, [r7, #10]
 800c5a4:	e013      	b.n	800c5ce <USBD_GetEpDesc+0x56>
 800c5a6:	f107 030a 	add.w	r3, r7, #10
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6978      	ldr	r0, [r7, #20]
 800c5ae:	f000 f81b 	bl	800c5e8 <USBD_GetNextDesc>
 800c5b2:	6178      	str	r0, [r7, #20]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	785b      	ldrb	r3, [r3, #1]
 800c5b8:	2b05      	cmp	r3, #5
 800c5ba:	d108      	bne.n	800c5ce <USBD_GetEpDesc+0x56>
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	613b      	str	r3, [r7, #16]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	789b      	ldrb	r3, [r3, #2]
 800c5c4:	78fa      	ldrb	r2, [r7, #3]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d008      	beq.n	800c5dc <USBD_GetEpDesc+0x64>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	613b      	str	r3, [r7, #16]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	885b      	ldrh	r3, [r3, #2]
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	897b      	ldrh	r3, [r7, #10]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d8e5      	bhi.n	800c5a6 <USBD_GetEpDesc+0x2e>
 800c5da:	e000      	b.n	800c5de <USBD_GetEpDesc+0x66>
 800c5dc:	bf00      	nop
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3718      	adds	r7, #24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_GetNextDesc>:
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60fb      	str	r3, [r7, #12]
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	7812      	ldrb	r2, [r2, #0]
 800c5fe:	4413      	add	r3, r2
 800c600:	b29a      	uxth	r2, r3
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	801a      	strh	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4413      	add	r3, r2
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	4618      	mov	r0, r3
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <SWAPBYTE>:
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	827b      	strh	r3, [r7, #18]
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	3301      	adds	r3, #1
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	823b      	strh	r3, [r7, #16]
 800c63e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c642:	021b      	lsls	r3, r3, #8
 800c644:	b21a      	sxth	r2, r3
 800c646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	b21b      	sxth	r3, r3
 800c64e:	81fb      	strh	r3, [r7, #14]
 800c650:	89fb      	ldrh	r3, [r7, #14]
 800c652:	4618      	mov	r0, r3
 800c654:	371c      	adds	r7, #28
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
	...

0800c660 <USBD_StdDevReq>:
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
 800c66a:	2300      	movs	r3, #0
 800c66c:	73fb      	strb	r3, [r7, #15]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c676:	2b40      	cmp	r3, #64	@ 0x40
 800c678:	d005      	beq.n	800c686 <USBD_StdDevReq+0x26>
 800c67a:	2b40      	cmp	r3, #64	@ 0x40
 800c67c:	d857      	bhi.n	800c72e <USBD_StdDevReq+0xce>
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00f      	beq.n	800c6a2 <USBD_StdDevReq+0x42>
 800c682:	2b20      	cmp	r3, #32
 800c684:	d153      	bne.n	800c72e <USBD_StdDevReq+0xce>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	32ae      	adds	r2, #174	@ 0xae
 800c690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	4798      	blx	r3
 800c69c:	4603      	mov	r3, r0
 800c69e:	73fb      	strb	r3, [r7, #15]
 800c6a0:	e04a      	b.n	800c738 <USBD_StdDevReq+0xd8>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	785b      	ldrb	r3, [r3, #1]
 800c6a6:	2b09      	cmp	r3, #9
 800c6a8:	d83b      	bhi.n	800c722 <USBD_StdDevReq+0xc2>
 800c6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b0 <USBD_StdDevReq+0x50>)
 800c6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b0:	0800c705 	.word	0x0800c705
 800c6b4:	0800c719 	.word	0x0800c719
 800c6b8:	0800c723 	.word	0x0800c723
 800c6bc:	0800c70f 	.word	0x0800c70f
 800c6c0:	0800c723 	.word	0x0800c723
 800c6c4:	0800c6e3 	.word	0x0800c6e3
 800c6c8:	0800c6d9 	.word	0x0800c6d9
 800c6cc:	0800c723 	.word	0x0800c723
 800c6d0:	0800c6fb 	.word	0x0800c6fb
 800c6d4:	0800c6ed 	.word	0x0800c6ed
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fa3e 	bl	800cb5c <USBD_GetDescriptor>
 800c6e0:	e024      	b.n	800c72c <USBD_StdDevReq+0xcc>
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fba3 	bl	800ce30 <USBD_SetAddress>
 800c6ea:	e01f      	b.n	800c72c <USBD_StdDevReq+0xcc>
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fbe2 	bl	800ceb8 <USBD_SetConfig>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
 800c6f8:	e018      	b.n	800c72c <USBD_StdDevReq+0xcc>
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fc85 	bl	800d00c <USBD_GetConfig>
 800c702:	e013      	b.n	800c72c <USBD_StdDevReq+0xcc>
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fcb6 	bl	800d078 <USBD_GetStatus>
 800c70c:	e00e      	b.n	800c72c <USBD_StdDevReq+0xcc>
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fce5 	bl	800d0e0 <USBD_SetFeature>
 800c716:	e009      	b.n	800c72c <USBD_StdDevReq+0xcc>
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fd09 	bl	800d132 <USBD_ClrFeature>
 800c720:	e004      	b.n	800c72c <USBD_StdDevReq+0xcc>
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fd60 	bl	800d1ea <USBD_CtlError>
 800c72a:	bf00      	nop
 800c72c:	e004      	b.n	800c738 <USBD_StdDevReq+0xd8>
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fd5a 	bl	800d1ea <USBD_CtlError>
 800c736:	bf00      	nop
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop

0800c744 <USBD_StdItfReq>:
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c75a:	2b40      	cmp	r3, #64	@ 0x40
 800c75c:	d005      	beq.n	800c76a <USBD_StdItfReq+0x26>
 800c75e:	2b40      	cmp	r3, #64	@ 0x40
 800c760:	d852      	bhi.n	800c808 <USBD_StdItfReq+0xc4>
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <USBD_StdItfReq+0x26>
 800c766:	2b20      	cmp	r3, #32
 800c768:	d14e      	bne.n	800c808 <USBD_StdItfReq+0xc4>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c770:	b2db      	uxtb	r3, r3
 800c772:	3b01      	subs	r3, #1
 800c774:	2b02      	cmp	r3, #2
 800c776:	d840      	bhi.n	800c7fa <USBD_StdItfReq+0xb6>
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	889b      	ldrh	r3, [r3, #4]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d836      	bhi.n	800c7f0 <USBD_StdItfReq+0xac>
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	889b      	ldrh	r3, [r3, #4]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7ff feda 	bl	800c544 <USBD_CoreFindIF>
 800c790:	4603      	mov	r3, r0
 800c792:	73bb      	strb	r3, [r7, #14]
 800c794:	7bbb      	ldrb	r3, [r7, #14]
 800c796:	2bff      	cmp	r3, #255	@ 0xff
 800c798:	d01d      	beq.n	800c7d6 <USBD_StdItfReq+0x92>
 800c79a:	7bbb      	ldrb	r3, [r7, #14]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d11a      	bne.n	800c7d6 <USBD_StdItfReq+0x92>
 800c7a0:	7bba      	ldrb	r2, [r7, #14]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	32ae      	adds	r2, #174	@ 0xae
 800c7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00f      	beq.n	800c7d0 <USBD_StdItfReq+0x8c>
 800c7b0:	7bba      	ldrb	r2, [r7, #14]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 800c7b8:	7bba      	ldrb	r2, [r7, #14]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	32ae      	adds	r2, #174	@ 0xae
 800c7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	4798      	blx	r3
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	73fb      	strb	r3, [r7, #15]
 800c7ce:	e004      	b.n	800c7da <USBD_StdItfReq+0x96>
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	73fb      	strb	r3, [r7, #15]
 800c7d4:	e001      	b.n	800c7da <USBD_StdItfReq+0x96>
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	73fb      	strb	r3, [r7, #15]
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	88db      	ldrh	r3, [r3, #6]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d110      	bne.n	800c804 <USBD_StdItfReq+0xc0>
 800c7e2:	7bfb      	ldrb	r3, [r7, #15]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10d      	bne.n	800c804 <USBD_StdItfReq+0xc0>
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fddc 	bl	800d3a6 <USBD_CtlSendStatus>
 800c7ee:	e009      	b.n	800c804 <USBD_StdItfReq+0xc0>
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fcf9 	bl	800d1ea <USBD_CtlError>
 800c7f8:	e004      	b.n	800c804 <USBD_StdItfReq+0xc0>
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fcf4 	bl	800d1ea <USBD_CtlError>
 800c802:	e000      	b.n	800c806 <USBD_StdItfReq+0xc2>
 800c804:	bf00      	nop
 800c806:	e004      	b.n	800c812 <USBD_StdItfReq+0xce>
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fced 	bl	800d1ea <USBD_CtlError>
 800c810:	bf00      	nop
 800c812:	7bfb      	ldrb	r3, [r7, #15]
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBD_StdEPReq>:
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
 800c826:	2300      	movs	r3, #0
 800c828:	73fb      	strb	r3, [r7, #15]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	889b      	ldrh	r3, [r3, #4]
 800c82e:	73bb      	strb	r3, [r7, #14]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c838:	2b40      	cmp	r3, #64	@ 0x40
 800c83a:	d007      	beq.n	800c84c <USBD_StdEPReq+0x30>
 800c83c:	2b40      	cmp	r3, #64	@ 0x40
 800c83e:	f200 8181 	bhi.w	800cb44 <USBD_StdEPReq+0x328>
 800c842:	2b00      	cmp	r3, #0
 800c844:	d02a      	beq.n	800c89c <USBD_StdEPReq+0x80>
 800c846:	2b20      	cmp	r3, #32
 800c848:	f040 817c 	bne.w	800cb44 <USBD_StdEPReq+0x328>
 800c84c:	7bbb      	ldrb	r3, [r7, #14]
 800c84e:	4619      	mov	r1, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff fe84 	bl	800c55e <USBD_CoreFindEP>
 800c856:	4603      	mov	r3, r0
 800c858:	737b      	strb	r3, [r7, #13]
 800c85a:	7b7b      	ldrb	r3, [r7, #13]
 800c85c:	2bff      	cmp	r3, #255	@ 0xff
 800c85e:	f000 8176 	beq.w	800cb4e <USBD_StdEPReq+0x332>
 800c862:	7b7b      	ldrb	r3, [r7, #13]
 800c864:	2b00      	cmp	r3, #0
 800c866:	f040 8172 	bne.w	800cb4e <USBD_StdEPReq+0x332>
 800c86a:	7b7a      	ldrb	r2, [r7, #13]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 800c872:	7b7a      	ldrb	r2, [r7, #13]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	32ae      	adds	r2, #174	@ 0xae
 800c878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f000 8165 	beq.w	800cb4e <USBD_StdEPReq+0x332>
 800c884:	7b7a      	ldrb	r2, [r7, #13]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	32ae      	adds	r2, #174	@ 0xae
 800c88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	4798      	blx	r3
 800c896:	4603      	mov	r3, r0
 800c898:	73fb      	strb	r3, [r7, #15]
 800c89a:	e158      	b.n	800cb4e <USBD_StdEPReq+0x332>
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	785b      	ldrb	r3, [r3, #1]
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	d008      	beq.n	800c8b6 <USBD_StdEPReq+0x9a>
 800c8a4:	2b03      	cmp	r3, #3
 800c8a6:	f300 8147 	bgt.w	800cb38 <USBD_StdEPReq+0x31c>
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 809b 	beq.w	800c9e6 <USBD_StdEPReq+0x1ca>
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d03c      	beq.n	800c92e <USBD_StdEPReq+0x112>
 800c8b4:	e140      	b.n	800cb38 <USBD_StdEPReq+0x31c>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d002      	beq.n	800c8c8 <USBD_StdEPReq+0xac>
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d016      	beq.n	800c8f4 <USBD_StdEPReq+0xd8>
 800c8c6:	e02c      	b.n	800c922 <USBD_StdEPReq+0x106>
 800c8c8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00d      	beq.n	800c8ea <USBD_StdEPReq+0xce>
 800c8ce:	7bbb      	ldrb	r3, [r7, #14]
 800c8d0:	2b80      	cmp	r3, #128	@ 0x80
 800c8d2:	d00a      	beq.n	800c8ea <USBD_StdEPReq+0xce>
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 f9e7 	bl	800dcac <USBD_LL_StallEP>
 800c8de:	2180      	movs	r1, #128	@ 0x80
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f001 f9e3 	bl	800dcac <USBD_LL_StallEP>
 800c8e6:	bf00      	nop
 800c8e8:	e020      	b.n	800c92c <USBD_StdEPReq+0x110>
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fc7c 	bl	800d1ea <USBD_CtlError>
 800c8f2:	e01b      	b.n	800c92c <USBD_StdEPReq+0x110>
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	885b      	ldrh	r3, [r3, #2]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10e      	bne.n	800c91a <USBD_StdEPReq+0xfe>
 800c8fc:	7bbb      	ldrb	r3, [r7, #14]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00b      	beq.n	800c91a <USBD_StdEPReq+0xfe>
 800c902:	7bbb      	ldrb	r3, [r7, #14]
 800c904:	2b80      	cmp	r3, #128	@ 0x80
 800c906:	d008      	beq.n	800c91a <USBD_StdEPReq+0xfe>
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	88db      	ldrh	r3, [r3, #6]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d104      	bne.n	800c91a <USBD_StdEPReq+0xfe>
 800c910:	7bbb      	ldrb	r3, [r7, #14]
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 f9c9 	bl	800dcac <USBD_LL_StallEP>
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fd43 	bl	800d3a6 <USBD_CtlSendStatus>
 800c920:	e004      	b.n	800c92c <USBD_StdEPReq+0x110>
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fc60 	bl	800d1ea <USBD_CtlError>
 800c92a:	bf00      	nop
 800c92c:	e109      	b.n	800cb42 <USBD_StdEPReq+0x326>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2b02      	cmp	r3, #2
 800c938:	d002      	beq.n	800c940 <USBD_StdEPReq+0x124>
 800c93a:	2b03      	cmp	r3, #3
 800c93c:	d016      	beq.n	800c96c <USBD_StdEPReq+0x150>
 800c93e:	e04b      	b.n	800c9d8 <USBD_StdEPReq+0x1bc>
 800c940:	7bbb      	ldrb	r3, [r7, #14]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00d      	beq.n	800c962 <USBD_StdEPReq+0x146>
 800c946:	7bbb      	ldrb	r3, [r7, #14]
 800c948:	2b80      	cmp	r3, #128	@ 0x80
 800c94a:	d00a      	beq.n	800c962 <USBD_StdEPReq+0x146>
 800c94c:	7bbb      	ldrb	r3, [r7, #14]
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f001 f9ab 	bl	800dcac <USBD_LL_StallEP>
 800c956:	2180      	movs	r1, #128	@ 0x80
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f001 f9a7 	bl	800dcac <USBD_LL_StallEP>
 800c95e:	bf00      	nop
 800c960:	e040      	b.n	800c9e4 <USBD_StdEPReq+0x1c8>
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fc40 	bl	800d1ea <USBD_CtlError>
 800c96a:	e03b      	b.n	800c9e4 <USBD_StdEPReq+0x1c8>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	885b      	ldrh	r3, [r3, #2]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d136      	bne.n	800c9e2 <USBD_StdEPReq+0x1c6>
 800c974:	7bbb      	ldrb	r3, [r7, #14]
 800c976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <USBD_StdEPReq+0x16c>
 800c97e:	7bbb      	ldrb	r3, [r7, #14]
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 f9b1 	bl	800dcea <USBD_LL_ClearStallEP>
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fd0c 	bl	800d3a6 <USBD_CtlSendStatus>
 800c98e:	7bbb      	ldrb	r3, [r7, #14]
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7ff fde3 	bl	800c55e <USBD_CoreFindEP>
 800c998:	4603      	mov	r3, r0
 800c99a:	737b      	strb	r3, [r7, #13]
 800c99c:	7b7b      	ldrb	r3, [r7, #13]
 800c99e:	2bff      	cmp	r3, #255	@ 0xff
 800c9a0:	d01f      	beq.n	800c9e2 <USBD_StdEPReq+0x1c6>
 800c9a2:	7b7b      	ldrb	r3, [r7, #13]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11c      	bne.n	800c9e2 <USBD_StdEPReq+0x1c6>
 800c9a8:	7b7a      	ldrb	r2, [r7, #13]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 800c9b0:	7b7a      	ldrb	r2, [r7, #13]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	32ae      	adds	r2, #174	@ 0xae
 800c9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d010      	beq.n	800c9e2 <USBD_StdEPReq+0x1c6>
 800c9c0:	7b7a      	ldrb	r2, [r7, #13]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	32ae      	adds	r2, #174	@ 0xae
 800c9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	4798      	blx	r3
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73fb      	strb	r3, [r7, #15]
 800c9d6:	e004      	b.n	800c9e2 <USBD_StdEPReq+0x1c6>
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fc05 	bl	800d1ea <USBD_CtlError>
 800c9e0:	e000      	b.n	800c9e4 <USBD_StdEPReq+0x1c8>
 800c9e2:	bf00      	nop
 800c9e4:	e0ad      	b.n	800cb42 <USBD_StdEPReq+0x326>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d002      	beq.n	800c9f8 <USBD_StdEPReq+0x1dc>
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	d033      	beq.n	800ca5e <USBD_StdEPReq+0x242>
 800c9f6:	e099      	b.n	800cb2c <USBD_StdEPReq+0x310>
 800c9f8:	7bbb      	ldrb	r3, [r7, #14]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d007      	beq.n	800ca0e <USBD_StdEPReq+0x1f2>
 800c9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ca00:	2b80      	cmp	r3, #128	@ 0x80
 800ca02:	d004      	beq.n	800ca0e <USBD_StdEPReq+0x1f2>
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fbef 	bl	800d1ea <USBD_CtlError>
 800ca0c:	e093      	b.n	800cb36 <USBD_StdEPReq+0x31a>
 800ca0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	da0b      	bge.n	800ca2e <USBD_StdEPReq+0x212>
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
 800ca18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4413      	add	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	3310      	adds	r3, #16
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4413      	add	r3, r2
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	e00b      	b.n	800ca46 <USBD_StdEPReq+0x22a>
 800ca2e:	7bbb      	ldrb	r3, [r7, #14]
 800ca30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	4413      	add	r3, r2
 800ca44:	3304      	adds	r3, #4
 800ca46:	60bb      	str	r3, [r7, #8]
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	739a      	strb	r2, [r3, #14]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	330e      	adds	r3, #14
 800ca52:	2202      	movs	r2, #2
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fc44 	bl	800d2e4 <USBD_CtlSendData>
 800ca5c:	e06b      	b.n	800cb36 <USBD_StdEPReq+0x31a>
 800ca5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	da11      	bge.n	800ca8a <USBD_StdEPReq+0x26e>
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	f003 020f 	and.w	r2, r3, #15
 800ca6c:	6879      	ldr	r1, [r7, #4]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	440b      	add	r3, r1
 800ca78:	3323      	adds	r3, #35	@ 0x23
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d117      	bne.n	800cab0 <USBD_StdEPReq+0x294>
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fbb1 	bl	800d1ea <USBD_CtlError>
 800ca88:	e055      	b.n	800cb36 <USBD_StdEPReq+0x31a>
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	f003 020f 	and.w	r2, r3, #15
 800ca90:	6879      	ldr	r1, [r7, #4]
 800ca92:	4613      	mov	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	440b      	add	r3, r1
 800ca9c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d104      	bne.n	800cab0 <USBD_StdEPReq+0x294>
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fb9e 	bl	800d1ea <USBD_CtlError>
 800caae:	e042      	b.n	800cb36 <USBD_StdEPReq+0x31a>
 800cab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	da0b      	bge.n	800cad0 <USBD_StdEPReq+0x2b4>
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	3310      	adds	r3, #16
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	4413      	add	r3, r2
 800cacc:	3304      	adds	r3, #4
 800cace:	e00b      	b.n	800cae8 <USBD_StdEPReq+0x2cc>
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cad6:	4613      	mov	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4413      	add	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	4413      	add	r3, r2
 800cae6:	3304      	adds	r3, #4
 800cae8:	60bb      	str	r3, [r7, #8]
 800caea:	7bbb      	ldrb	r3, [r7, #14]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <USBD_StdEPReq+0x2da>
 800caf0:	7bbb      	ldrb	r3, [r7, #14]
 800caf2:	2b80      	cmp	r3, #128	@ 0x80
 800caf4:	d103      	bne.n	800cafe <USBD_StdEPReq+0x2e2>
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2200      	movs	r2, #0
 800cafa:	739a      	strb	r2, [r3, #14]
 800cafc:	e00e      	b.n	800cb1c <USBD_StdEPReq+0x300>
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f001 f910 	bl	800dd28 <USBD_LL_IsStallEP>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d003      	beq.n	800cb16 <USBD_StdEPReq+0x2fa>
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2201      	movs	r2, #1
 800cb12:	739a      	strb	r2, [r3, #14]
 800cb14:	e002      	b.n	800cb1c <USBD_StdEPReq+0x300>
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	739a      	strb	r2, [r3, #14]
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	330e      	adds	r3, #14
 800cb20:	2202      	movs	r2, #2
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fbdd 	bl	800d2e4 <USBD_CtlSendData>
 800cb2a:	e004      	b.n	800cb36 <USBD_StdEPReq+0x31a>
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 fb5b 	bl	800d1ea <USBD_CtlError>
 800cb34:	bf00      	nop
 800cb36:	e004      	b.n	800cb42 <USBD_StdEPReq+0x326>
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fb55 	bl	800d1ea <USBD_CtlError>
 800cb40:	bf00      	nop
 800cb42:	e005      	b.n	800cb50 <USBD_StdEPReq+0x334>
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fb4f 	bl	800d1ea <USBD_CtlError>
 800cb4c:	e000      	b.n	800cb50 <USBD_StdEPReq+0x334>
 800cb4e:	bf00      	nop
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <USBD_GetDescriptor>:
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
 800cb66:	2300      	movs	r3, #0
 800cb68:	813b      	strh	r3, [r7, #8]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60fb      	str	r3, [r7, #12]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	72fb      	strb	r3, [r7, #11]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	885b      	ldrh	r3, [r3, #2]
 800cb76:	0a1b      	lsrs	r3, r3, #8
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	2b06      	cmp	r3, #6
 800cb7e:	f200 8128 	bhi.w	800cdd2 <USBD_GetDescriptor+0x276>
 800cb82:	a201      	add	r2, pc, #4	@ (adr r2, 800cb88 <USBD_GetDescriptor+0x2c>)
 800cb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb88:	0800cba5 	.word	0x0800cba5
 800cb8c:	0800cbbd 	.word	0x0800cbbd
 800cb90:	0800cbfd 	.word	0x0800cbfd
 800cb94:	0800cdd3 	.word	0x0800cdd3
 800cb98:	0800cdd3 	.word	0x0800cdd3
 800cb9c:	0800cd73 	.word	0x0800cd73
 800cba0:	0800cd9f 	.word	0x0800cd9f
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	7c12      	ldrb	r2, [r2, #16]
 800cbb0:	f107 0108 	add.w	r1, r7, #8
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	4798      	blx	r3
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	e112      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7c1b      	ldrb	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10d      	bne.n	800cbe0 <USBD_GetDescriptor+0x84>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbcc:	f107 0208 	add.w	r2, r7, #8
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	2202      	movs	r2, #2
 800cbdc:	701a      	strb	r2, [r3, #0]
 800cbde:	e100      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe8:	f107 0208 	add.w	r2, r7, #8
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	701a      	strb	r2, [r3, #0]
 800cbfa:	e0f2      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	885b      	ldrh	r3, [r3, #2]
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b05      	cmp	r3, #5
 800cc04:	f200 80ac 	bhi.w	800cd60 <USBD_GetDescriptor+0x204>
 800cc08:	a201      	add	r2, pc, #4	@ (adr r2, 800cc10 <USBD_GetDescriptor+0xb4>)
 800cc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0e:	bf00      	nop
 800cc10:	0800cc29 	.word	0x0800cc29
 800cc14:	0800cc5d 	.word	0x0800cc5d
 800cc18:	0800cc91 	.word	0x0800cc91
 800cc1c:	0800ccc5 	.word	0x0800ccc5
 800cc20:	0800ccf9 	.word	0x0800ccf9
 800cc24:	0800cd2d 	.word	0x0800cd2d
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00b      	beq.n	800cc4c <USBD_GetDescriptor+0xf0>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	7c12      	ldrb	r2, [r2, #16]
 800cc40:	f107 0108 	add.w	r1, r7, #8
 800cc44:	4610      	mov	r0, r2
 800cc46:	4798      	blx	r3
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	e091      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 facb 	bl	800d1ea <USBD_CtlError>
 800cc54:	7afb      	ldrb	r3, [r7, #11]
 800cc56:	3301      	adds	r3, #1
 800cc58:	72fb      	strb	r3, [r7, #11]
 800cc5a:	e089      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00b      	beq.n	800cc80 <USBD_GetDescriptor+0x124>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	7c12      	ldrb	r2, [r2, #16]
 800cc74:	f107 0108 	add.w	r1, r7, #8
 800cc78:	4610      	mov	r0, r2
 800cc7a:	4798      	blx	r3
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	e077      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fab1 	bl	800d1ea <USBD_CtlError>
 800cc88:	7afb      	ldrb	r3, [r7, #11]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	72fb      	strb	r3, [r7, #11]
 800cc8e:	e06f      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00b      	beq.n	800ccb4 <USBD_GetDescriptor+0x158>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	7c12      	ldrb	r2, [r2, #16]
 800cca8:	f107 0108 	add.w	r1, r7, #8
 800ccac:	4610      	mov	r0, r2
 800ccae:	4798      	blx	r3
 800ccb0:	60f8      	str	r0, [r7, #12]
 800ccb2:	e05d      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fa97 	bl	800d1ea <USBD_CtlError>
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	72fb      	strb	r3, [r7, #11]
 800ccc2:	e055      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00b      	beq.n	800cce8 <USBD_GetDescriptor+0x18c>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	7c12      	ldrb	r2, [r2, #16]
 800ccdc:	f107 0108 	add.w	r1, r7, #8
 800cce0:	4610      	mov	r0, r2
 800cce2:	4798      	blx	r3
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	e043      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fa7d 	bl	800d1ea <USBD_CtlError>
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	72fb      	strb	r3, [r7, #11]
 800ccf6:	e03b      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00b      	beq.n	800cd1c <USBD_GetDescriptor+0x1c0>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	7c12      	ldrb	r2, [r2, #16]
 800cd10:	f107 0108 	add.w	r1, r7, #8
 800cd14:	4610      	mov	r0, r2
 800cd16:	4798      	blx	r3
 800cd18:	60f8      	str	r0, [r7, #12]
 800cd1a:	e029      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa63 	bl	800d1ea <USBD_CtlError>
 800cd24:	7afb      	ldrb	r3, [r7, #11]
 800cd26:	3301      	adds	r3, #1
 800cd28:	72fb      	strb	r3, [r7, #11]
 800cd2a:	e021      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00b      	beq.n	800cd50 <USBD_GetDescriptor+0x1f4>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	7c12      	ldrb	r2, [r2, #16]
 800cd44:	f107 0108 	add.w	r1, r7, #8
 800cd48:	4610      	mov	r0, r2
 800cd4a:	4798      	blx	r3
 800cd4c:	60f8      	str	r0, [r7, #12]
 800cd4e:	e00f      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fa49 	bl	800d1ea <USBD_CtlError>
 800cd58:	7afb      	ldrb	r3, [r7, #11]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	72fb      	strb	r3, [r7, #11]
 800cd5e:	e007      	b.n	800cd70 <USBD_GetDescriptor+0x214>
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fa41 	bl	800d1ea <USBD_CtlError>
 800cd68:	7afb      	ldrb	r3, [r7, #11]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	72fb      	strb	r3, [r7, #11]
 800cd6e:	bf00      	nop
 800cd70:	e037      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	7c1b      	ldrb	r3, [r3, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d109      	bne.n	800cd8e <USBD_GetDescriptor+0x232>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd82:	f107 0208 	add.w	r2, r7, #8
 800cd86:	4610      	mov	r0, r2
 800cd88:	4798      	blx	r3
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	e029      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fa2a 	bl	800d1ea <USBD_CtlError>
 800cd96:	7afb      	ldrb	r3, [r7, #11]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	72fb      	strb	r3, [r7, #11]
 800cd9c:	e021      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7c1b      	ldrb	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10d      	bne.n	800cdc2 <USBD_GetDescriptor+0x266>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdae:	f107 0208 	add.w	r2, r7, #8
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	4798      	blx	r3
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	2207      	movs	r2, #7
 800cdbe:	701a      	strb	r2, [r3, #0]
 800cdc0:	e00f      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fa10 	bl	800d1ea <USBD_CtlError>
 800cdca:	7afb      	ldrb	r3, [r7, #11]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	72fb      	strb	r3, [r7, #11]
 800cdd0:	e007      	b.n	800cde2 <USBD_GetDescriptor+0x286>
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fa08 	bl	800d1ea <USBD_CtlError>
 800cdda:	7afb      	ldrb	r3, [r7, #11]
 800cddc:	3301      	adds	r3, #1
 800cdde:	72fb      	strb	r3, [r7, #11]
 800cde0:	bf00      	nop
 800cde2:	7afb      	ldrb	r3, [r7, #11]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d11e      	bne.n	800ce26 <USBD_GetDescriptor+0x2ca>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	88db      	ldrh	r3, [r3, #6]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d016      	beq.n	800ce1e <USBD_GetDescriptor+0x2c2>
 800cdf0:	893b      	ldrh	r3, [r7, #8]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00e      	beq.n	800ce14 <USBD_GetDescriptor+0x2b8>
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	88da      	ldrh	r2, [r3, #6]
 800cdfa:	893b      	ldrh	r3, [r7, #8]
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	bf28      	it	cs
 800ce00:	4613      	movcs	r3, r2
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	813b      	strh	r3, [r7, #8]
 800ce06:	893b      	ldrh	r3, [r7, #8]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	68f9      	ldr	r1, [r7, #12]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fa69 	bl	800d2e4 <USBD_CtlSendData>
 800ce12:	e009      	b.n	800ce28 <USBD_GetDescriptor+0x2cc>
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f9e7 	bl	800d1ea <USBD_CtlError>
 800ce1c:	e004      	b.n	800ce28 <USBD_GetDescriptor+0x2cc>
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fac1 	bl	800d3a6 <USBD_CtlSendStatus>
 800ce24:	e000      	b.n	800ce28 <USBD_GetDescriptor+0x2cc>
 800ce26:	bf00      	nop
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop

0800ce30 <USBD_SetAddress>:
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	889b      	ldrh	r3, [r3, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d131      	bne.n	800cea6 <USBD_SetAddress+0x76>
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	88db      	ldrh	r3, [r3, #6]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d12d      	bne.n	800cea6 <USBD_SetAddress+0x76>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	885b      	ldrh	r3, [r3, #2]
 800ce4e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce50:	d829      	bhi.n	800cea6 <USBD_SetAddress+0x76>
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce5c:	73fb      	strb	r3, [r7, #15]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d104      	bne.n	800ce74 <USBD_SetAddress+0x44>
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 f9bc 	bl	800d1ea <USBD_CtlError>
 800ce72:	e01d      	b.n	800ceb0 <USBD_SetAddress+0x80>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	7bfa      	ldrb	r2, [r7, #15]
 800ce78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 ff7d 	bl	800dd80 <USBD_LL_SetUSBAddress>
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fa8d 	bl	800d3a6 <USBD_CtlSendStatus>
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d004      	beq.n	800ce9c <USBD_SetAddress+0x6c>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2202      	movs	r2, #2
 800ce96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800ce9a:	e009      	b.n	800ceb0 <USBD_SetAddress+0x80>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800cea4:	e004      	b.n	800ceb0 <USBD_SetAddress+0x80>
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f99e 	bl	800d1ea <USBD_CtlError>
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_SetConfig>:
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	885b      	ldrh	r3, [r3, #2]
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	4b4e      	ldr	r3, [pc, #312]	@ (800d008 <USBD_SetConfig+0x150>)
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	4b4d      	ldr	r3, [pc, #308]	@ (800d008 <USBD_SetConfig+0x150>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d905      	bls.n	800cee4 <USBD_SetConfig+0x2c>
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f985 	bl	800d1ea <USBD_CtlError>
 800cee0:	2303      	movs	r3, #3
 800cee2:	e08c      	b.n	800cffe <USBD_SetConfig+0x146>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d002      	beq.n	800cef6 <USBD_SetConfig+0x3e>
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d029      	beq.n	800cf48 <USBD_SetConfig+0x90>
 800cef4:	e075      	b.n	800cfe2 <USBD_SetConfig+0x12a>
 800cef6:	4b44      	ldr	r3, [pc, #272]	@ (800d008 <USBD_SetConfig+0x150>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d020      	beq.n	800cf40 <USBD_SetConfig+0x88>
 800cefe:	4b42      	ldr	r3, [pc, #264]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	605a      	str	r2, [r3, #4]
 800cf08:	4b3f      	ldr	r3, [pc, #252]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7fe ffcd 	bl	800beae <USBD_SetClassConfig>
 800cf14:	4603      	mov	r3, r0
 800cf16:	73fb      	strb	r3, [r7, #15]
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d008      	beq.n	800cf30 <USBD_SetConfig+0x78>
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f962 	bl	800d1ea <USBD_CtlError>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2202      	movs	r2, #2
 800cf2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800cf2e:	e065      	b.n	800cffc <USBD_SetConfig+0x144>
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 fa38 	bl	800d3a6 <USBD_CtlSendStatus>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800cf3e:	e05d      	b.n	800cffc <USBD_SetConfig+0x144>
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 fa30 	bl	800d3a6 <USBD_CtlSendStatus>
 800cf46:	e059      	b.n	800cffc <USBD_SetConfig+0x144>
 800cf48:	4b2f      	ldr	r3, [pc, #188]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d112      	bne.n	800cf76 <USBD_SetConfig+0xbe>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800cf58:	4b2b      	ldr	r3, [pc, #172]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	605a      	str	r2, [r3, #4]
 800cf62:	4b29      	ldr	r3, [pc, #164]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7fe ffbc 	bl	800bee6 <USBD_ClrClassConfig>
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fa19 	bl	800d3a6 <USBD_CtlSendStatus>
 800cf74:	e042      	b.n	800cffc <USBD_SetConfig+0x144>
 800cf76:	4b24      	ldr	r3, [pc, #144]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d02a      	beq.n	800cfda <USBD_SetConfig+0x122>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7fe ffaa 	bl	800bee6 <USBD_ClrClassConfig>
 800cf92:	4b1d      	ldr	r3, [pc, #116]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	605a      	str	r2, [r3, #4]
 800cf9c:	4b1a      	ldr	r3, [pc, #104]	@ (800d008 <USBD_SetConfig+0x150>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7fe ff83 	bl	800beae <USBD_SetClassConfig>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	73fb      	strb	r3, [r7, #15]
 800cfac:	7bfb      	ldrb	r3, [r7, #15]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00f      	beq.n	800cfd2 <USBD_SetConfig+0x11a>
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f918 	bl	800d1ea <USBD_CtlError>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7fe ff8f 	bl	800bee6 <USBD_ClrClassConfig>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2202      	movs	r2, #2
 800cfcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800cfd0:	e014      	b.n	800cffc <USBD_SetConfig+0x144>
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f9e7 	bl	800d3a6 <USBD_CtlSendStatus>
 800cfd8:	e010      	b.n	800cffc <USBD_SetConfig+0x144>
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f9e3 	bl	800d3a6 <USBD_CtlSendStatus>
 800cfe0:	e00c      	b.n	800cffc <USBD_SetConfig+0x144>
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 f900 	bl	800d1ea <USBD_CtlError>
 800cfea:	4b07      	ldr	r3, [pc, #28]	@ (800d008 <USBD_SetConfig+0x150>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7fe ff78 	bl	800bee6 <USBD_ClrClassConfig>
 800cff6:	2303      	movs	r3, #3
 800cff8:	73fb      	strb	r3, [r7, #15]
 800cffa:	bf00      	nop
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	200009e8 	.word	0x200009e8

0800d00c <USBD_GetConfig>:
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	88db      	ldrh	r3, [r3, #6]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d004      	beq.n	800d028 <USBD_GetConfig+0x1c>
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f8e2 	bl	800d1ea <USBD_CtlError>
 800d026:	e023      	b.n	800d070 <USBD_GetConfig+0x64>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b02      	cmp	r3, #2
 800d032:	dc02      	bgt.n	800d03a <USBD_GetConfig+0x2e>
 800d034:	2b00      	cmp	r3, #0
 800d036:	dc03      	bgt.n	800d040 <USBD_GetConfig+0x34>
 800d038:	e015      	b.n	800d066 <USBD_GetConfig+0x5a>
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	d00b      	beq.n	800d056 <USBD_GetConfig+0x4a>
 800d03e:	e012      	b.n	800d066 <USBD_GetConfig+0x5a>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	609a      	str	r2, [r3, #8]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	3308      	adds	r3, #8
 800d04a:	2201      	movs	r2, #1
 800d04c:	4619      	mov	r1, r3
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f948 	bl	800d2e4 <USBD_CtlSendData>
 800d054:	e00c      	b.n	800d070 <USBD_GetConfig+0x64>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	3304      	adds	r3, #4
 800d05a:	2201      	movs	r2, #1
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f940 	bl	800d2e4 <USBD_CtlSendData>
 800d064:	e004      	b.n	800d070 <USBD_GetConfig+0x64>
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f8be 	bl	800d1ea <USBD_CtlError>
 800d06e:	bf00      	nop
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBD_GetStatus>:
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	3b01      	subs	r3, #1
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d81e      	bhi.n	800d0ce <USBD_GetStatus+0x56>
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	88db      	ldrh	r3, [r3, #6]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d004      	beq.n	800d0a2 <USBD_GetStatus+0x2a>
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f8a5 	bl	800d1ea <USBD_CtlError>
 800d0a0:	e01a      	b.n	800d0d8 <USBD_GetStatus+0x60>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	60da      	str	r2, [r3, #12]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d005      	beq.n	800d0be <USBD_GetStatus+0x46>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f043 0202 	orr.w	r2, r3, #2
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	60da      	str	r2, [r3, #12]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	330c      	adds	r3, #12
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 f90c 	bl	800d2e4 <USBD_CtlSendData>
 800d0cc:	e004      	b.n	800d0d8 <USBD_GetStatus+0x60>
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f88a 	bl	800d1ea <USBD_CtlError>
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <USBD_SetFeature>:
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	885b      	ldrh	r3, [r3, #2]
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d107      	bne.n	800d102 <USBD_SetFeature+0x22>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f953 	bl	800d3a6 <USBD_CtlSendStatus>
 800d100:	e013      	b.n	800d12a <USBD_SetFeature+0x4a>
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	885b      	ldrh	r3, [r3, #2]
 800d106:	2b02      	cmp	r3, #2
 800d108:	d10b      	bne.n	800d122 <USBD_SetFeature+0x42>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	889b      	ldrh	r3, [r3, #4]
 800d10e:	0a1b      	lsrs	r3, r3, #8
 800d110:	b29b      	uxth	r3, r3
 800d112:	b2da      	uxtb	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f943 	bl	800d3a6 <USBD_CtlSendStatus>
 800d120:	e003      	b.n	800d12a <USBD_SetFeature+0x4a>
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f860 	bl	800d1ea <USBD_CtlError>
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_ClrFeature>:
 800d132:	b580      	push	{r7, lr}
 800d134:	b082      	sub	sp, #8
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	6039      	str	r1, [r7, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d142:	b2db      	uxtb	r3, r3
 800d144:	3b01      	subs	r3, #1
 800d146:	2b02      	cmp	r3, #2
 800d148:	d80b      	bhi.n	800d162 <USBD_ClrFeature+0x30>
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	885b      	ldrh	r3, [r3, #2]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d10c      	bne.n	800d16c <USBD_ClrFeature+0x3a>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f923 	bl	800d3a6 <USBD_CtlSendStatus>
 800d160:	e004      	b.n	800d16c <USBD_ClrFeature+0x3a>
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f840 	bl	800d1ea <USBD_CtlError>
 800d16a:	e000      	b.n	800d16e <USBD_ClrFeature+0x3c>
 800d16c:	bf00      	nop
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <USBD_ParseSetupRequest>:
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	6039      	str	r1, [r7, #0]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	781a      	ldrb	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	701a      	strb	r2, [r3, #0]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3301      	adds	r3, #1
 800d190:	60fb      	str	r3, [r7, #12]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	781a      	ldrb	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	705a      	strb	r2, [r3, #1]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	3301      	adds	r3, #1
 800d19e:	60fb      	str	r3, [r7, #12]
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff fa3d 	bl	800c620 <SWAPBYTE>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	805a      	strh	r2, [r3, #2]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	60fb      	str	r3, [r7, #12]
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f7ff fa30 	bl	800c620 <SWAPBYTE>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	809a      	strh	r2, [r3, #4]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	60fb      	str	r3, [r7, #12]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f7ff fa23 	bl	800c620 <SWAPBYTE>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	461a      	mov	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	80da      	strh	r2, [r3, #6]
 800d1e2:	bf00      	nop
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_CtlError>:
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b082      	sub	sp, #8
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	6039      	str	r1, [r7, #0]
 800d1f4:	2180      	movs	r1, #128	@ 0x80
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 fd58 	bl	800dcac <USBD_LL_StallEP>
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fd54 	bl	800dcac <USBD_LL_StallEP>
 800d204:	bf00      	nop
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <USBD_GetString>:
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
 800d218:	2300      	movs	r3, #0
 800d21a:	75fb      	strb	r3, [r7, #23]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d042      	beq.n	800d2a8 <USBD_GetString+0x9c>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	613b      	str	r3, [r7, #16]
 800d226:	6938      	ldr	r0, [r7, #16]
 800d228:	f000 f842 	bl	800d2b0 <USBD_GetLen>
 800d22c:	4603      	mov	r3, r0
 800d22e:	3301      	adds	r3, #1
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d236:	d808      	bhi.n	800d24a <USBD_GetString+0x3e>
 800d238:	6938      	ldr	r0, [r7, #16]
 800d23a:	f000 f839 	bl	800d2b0 <USBD_GetLen>
 800d23e:	4603      	mov	r3, r0
 800d240:	3301      	adds	r3, #1
 800d242:	b29b      	uxth	r3, r3
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	b29a      	uxth	r2, r3
 800d248:	e001      	b.n	800d24e <USBD_GetString+0x42>
 800d24a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	801a      	strh	r2, [r3, #0]
 800d252:	7dfb      	ldrb	r3, [r7, #23]
 800d254:	68ba      	ldr	r2, [r7, #8]
 800d256:	4413      	add	r3, r2
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	7812      	ldrb	r2, [r2, #0]
 800d25c:	701a      	strb	r2, [r3, #0]
 800d25e:	7dfb      	ldrb	r3, [r7, #23]
 800d260:	3301      	adds	r3, #1
 800d262:	75fb      	strb	r3, [r7, #23]
 800d264:	7dfb      	ldrb	r3, [r7, #23]
 800d266:	68ba      	ldr	r2, [r7, #8]
 800d268:	4413      	add	r3, r2
 800d26a:	2203      	movs	r2, #3
 800d26c:	701a      	strb	r2, [r3, #0]
 800d26e:	7dfb      	ldrb	r3, [r7, #23]
 800d270:	3301      	adds	r3, #1
 800d272:	75fb      	strb	r3, [r7, #23]
 800d274:	e013      	b.n	800d29e <USBD_GetString+0x92>
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	4413      	add	r3, r2
 800d27c:	693a      	ldr	r2, [r7, #16]
 800d27e:	7812      	ldrb	r2, [r2, #0]
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	3301      	adds	r3, #1
 800d286:	613b      	str	r3, [r7, #16]
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	3301      	adds	r3, #1
 800d28c:	75fb      	strb	r3, [r7, #23]
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	4413      	add	r3, r2
 800d294:	2200      	movs	r2, #0
 800d296:	701a      	strb	r2, [r3, #0]
 800d298:	7dfb      	ldrb	r3, [r7, #23]
 800d29a:	3301      	adds	r3, #1
 800d29c:	75fb      	strb	r3, [r7, #23]
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1e7      	bne.n	800d276 <USBD_GetString+0x6a>
 800d2a6:	e000      	b.n	800d2aa <USBD_GetString+0x9e>
 800d2a8:	bf00      	nop
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <USBD_GetLen>:
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	60bb      	str	r3, [r7, #8]
 800d2c0:	e005      	b.n	800d2ce <USBD_GetLen+0x1e>
 800d2c2:	7bfb      	ldrb	r3, [r7, #15]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	73fb      	strb	r3, [r7, #15]
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	60bb      	str	r3, [r7, #8]
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1f5      	bne.n	800d2c2 <USBD_GetLen+0x12>
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <USBD_CtlSendData>:
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	615a      	str	r2, [r3, #20]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	625a      	str	r2, [r3, #36]	@ 0x24
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	619a      	str	r2, [r3, #24]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	2100      	movs	r1, #0
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f000 fd54 	bl	800ddbe <USBD_LL_Transmit>
 800d316:	2300      	movs	r3, #0
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <USBD_CtlContinueSendData>:
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	2100      	movs	r1, #0
 800d332:	68f8      	ldr	r0, [r7, #12]
 800d334:	f000 fd43 	bl	800ddbe <USBD_LL_Transmit>
 800d338:	2300      	movs	r3, #0
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <USBD_CtlPrepareRx>:
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	60b9      	str	r1, [r7, #8]
 800d34c:	607a      	str	r2, [r7, #4]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2203      	movs	r2, #3
 800d352:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	2100      	movs	r1, #0
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 fd43 	bl	800de00 <USBD_LL_PrepareReceive>
 800d37a:	2300      	movs	r3, #0
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <USBD_CtlContinueRx>:
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	2100      	movs	r1, #0
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f000 fd32 	bl	800de00 <USBD_LL_PrepareReceive>
 800d39c:	2300      	movs	r3, #0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <USBD_CtlSendStatus>:
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2204      	movs	r2, #4
 800d3b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fcfe 	bl	800ddbe <USBD_LL_Transmit>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBD_CtlReceiveStatus>:
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2205      	movs	r2, #5
 800d3d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800d3dc:	2300      	movs	r3, #0
 800d3de:	2200      	movs	r2, #0
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fd0c 	bl	800de00 <USBD_LL_PrepareReceive>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
	...

0800d3f4 <MX_USB_DEVICE_Init>:
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	4912      	ldr	r1, [pc, #72]	@ (800d444 <MX_USB_DEVICE_Init+0x50>)
 800d3fc:	4812      	ldr	r0, [pc, #72]	@ (800d448 <MX_USB_DEVICE_Init+0x54>)
 800d3fe:	f7fe fcd9 	bl	800bdb4 <USBD_Init>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <MX_USB_DEVICE_Init+0x18>
 800d408:	f7f4 ffa8 	bl	800235c <Error_Handler>
 800d40c:	490f      	ldr	r1, [pc, #60]	@ (800d44c <MX_USB_DEVICE_Init+0x58>)
 800d40e:	480e      	ldr	r0, [pc, #56]	@ (800d448 <MX_USB_DEVICE_Init+0x54>)
 800d410:	f7fe fd00 	bl	800be14 <USBD_RegisterClass>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <MX_USB_DEVICE_Init+0x2a>
 800d41a:	f7f4 ff9f 	bl	800235c <Error_Handler>
 800d41e:	490c      	ldr	r1, [pc, #48]	@ (800d450 <MX_USB_DEVICE_Init+0x5c>)
 800d420:	4809      	ldr	r0, [pc, #36]	@ (800d448 <MX_USB_DEVICE_Init+0x54>)
 800d422:	f7fe fbf7 	bl	800bc14 <USBD_CDC_RegisterInterface>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <MX_USB_DEVICE_Init+0x3c>
 800d42c:	f7f4 ff96 	bl	800235c <Error_Handler>
 800d430:	4805      	ldr	r0, [pc, #20]	@ (800d448 <MX_USB_DEVICE_Init+0x54>)
 800d432:	f7fe fd25 	bl	800be80 <USBD_Start>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <MX_USB_DEVICE_Init+0x4c>
 800d43c:	f7f4 ff8e 	bl	800235c <Error_Handler>
 800d440:	bf00      	nop
 800d442:	bd80      	pop	{r7, pc}
 800d444:	200000b4 	.word	0x200000b4
 800d448:	200009ec 	.word	0x200009ec
 800d44c:	20000018 	.word	0x20000018
 800d450:	200000a0 	.word	0x200000a0

0800d454 <CDC_Init_FS>:
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
 800d458:	2200      	movs	r2, #0
 800d45a:	4905      	ldr	r1, [pc, #20]	@ (800d470 <CDC_Init_FS+0x1c>)
 800d45c:	4805      	ldr	r0, [pc, #20]	@ (800d474 <CDC_Init_FS+0x20>)
 800d45e:	f7fe fbf3 	bl	800bc48 <USBD_CDC_SetTxBuffer>
 800d462:	4905      	ldr	r1, [pc, #20]	@ (800d478 <CDC_Init_FS+0x24>)
 800d464:	4803      	ldr	r0, [pc, #12]	@ (800d474 <CDC_Init_FS+0x20>)
 800d466:	f7fe fc11 	bl	800bc8c <USBD_CDC_SetRxBuffer>
 800d46a:	2300      	movs	r3, #0
 800d46c:	4618      	mov	r0, r3
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20000ec8 	.word	0x20000ec8
 800d474:	200009ec 	.word	0x200009ec
 800d478:	20000cc8 	.word	0x20000cc8

0800d47c <CDC_DeInit_FS>:
 800d47c:	b480      	push	{r7}
 800d47e:	af00      	add	r7, sp, #0
 800d480:	2300      	movs	r3, #0
 800d482:	4618      	mov	r0, r3
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <CDC_Control_FS>:
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	6039      	str	r1, [r7, #0]
 800d496:	71fb      	strb	r3, [r7, #7]
 800d498:	4613      	mov	r3, r2
 800d49a:	80bb      	strh	r3, [r7, #4]
 800d49c:	79fb      	ldrb	r3, [r7, #7]
 800d49e:	2b23      	cmp	r3, #35	@ 0x23
 800d4a0:	f200 8098 	bhi.w	800d5d4 <CDC_Control_FS+0x148>
 800d4a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d4ac <CDC_Control_FS+0x20>)
 800d4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4aa:	bf00      	nop
 800d4ac:	0800d5d5 	.word	0x0800d5d5
 800d4b0:	0800d5d5 	.word	0x0800d5d5
 800d4b4:	0800d5d5 	.word	0x0800d5d5
 800d4b8:	0800d5d5 	.word	0x0800d5d5
 800d4bc:	0800d5d5 	.word	0x0800d5d5
 800d4c0:	0800d5d5 	.word	0x0800d5d5
 800d4c4:	0800d5d5 	.word	0x0800d5d5
 800d4c8:	0800d5d5 	.word	0x0800d5d5
 800d4cc:	0800d5d5 	.word	0x0800d5d5
 800d4d0:	0800d5d5 	.word	0x0800d5d5
 800d4d4:	0800d5d5 	.word	0x0800d5d5
 800d4d8:	0800d5d5 	.word	0x0800d5d5
 800d4dc:	0800d5d5 	.word	0x0800d5d5
 800d4e0:	0800d5d5 	.word	0x0800d5d5
 800d4e4:	0800d5d5 	.word	0x0800d5d5
 800d4e8:	0800d5d5 	.word	0x0800d5d5
 800d4ec:	0800d5d5 	.word	0x0800d5d5
 800d4f0:	0800d5d5 	.word	0x0800d5d5
 800d4f4:	0800d5d5 	.word	0x0800d5d5
 800d4f8:	0800d5d5 	.word	0x0800d5d5
 800d4fc:	0800d5d5 	.word	0x0800d5d5
 800d500:	0800d5d5 	.word	0x0800d5d5
 800d504:	0800d5d5 	.word	0x0800d5d5
 800d508:	0800d5d5 	.word	0x0800d5d5
 800d50c:	0800d5d5 	.word	0x0800d5d5
 800d510:	0800d5d5 	.word	0x0800d5d5
 800d514:	0800d5d5 	.word	0x0800d5d5
 800d518:	0800d5d5 	.word	0x0800d5d5
 800d51c:	0800d5d5 	.word	0x0800d5d5
 800d520:	0800d5d5 	.word	0x0800d5d5
 800d524:	0800d5d5 	.word	0x0800d5d5
 800d528:	0800d5d5 	.word	0x0800d5d5
 800d52c:	0800d53d 	.word	0x0800d53d
 800d530:	0800d581 	.word	0x0800d581
 800d534:	0800d5d5 	.word	0x0800d5d5
 800d538:	0800d5d5 	.word	0x0800d5d5
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	461a      	mov	r2, r3
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	3301      	adds	r3, #1
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	431a      	orrs	r2, r3
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	3302      	adds	r3, #2
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	041b      	lsls	r3, r3, #16
 800d554:	431a      	orrs	r2, r3
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	3303      	adds	r3, #3
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	061b      	lsls	r3, r3, #24
 800d55e:	4313      	orrs	r3, r2
 800d560:	461a      	mov	r2, r3
 800d562:	4b20      	ldr	r3, [pc, #128]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	791a      	ldrb	r2, [r3, #4]
 800d56a:	4b1e      	ldr	r3, [pc, #120]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d56c:	711a      	strb	r2, [r3, #4]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	795a      	ldrb	r2, [r3, #5]
 800d572:	4b1c      	ldr	r3, [pc, #112]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d574:	715a      	strb	r2, [r3, #5]
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	799a      	ldrb	r2, [r3, #6]
 800d57a:	4b1a      	ldr	r3, [pc, #104]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d57c:	719a      	strb	r2, [r3, #6]
 800d57e:	e02a      	b.n	800d5d6 <CDC_Control_FS+0x14a>
 800d580:	4b18      	ldr	r3, [pc, #96]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	b2da      	uxtb	r2, r3
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	701a      	strb	r2, [r3, #0]
 800d58a:	4b16      	ldr	r3, [pc, #88]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	0a1a      	lsrs	r2, r3, #8
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	3301      	adds	r3, #1
 800d594:	b2d2      	uxtb	r2, r2
 800d596:	701a      	strb	r2, [r3, #0]
 800d598:	4b12      	ldr	r3, [pc, #72]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	0c1a      	lsrs	r2, r3, #16
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	3302      	adds	r3, #2
 800d5a2:	b2d2      	uxtb	r2, r2
 800d5a4:	701a      	strb	r2, [r3, #0]
 800d5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	0e1a      	lsrs	r2, r3, #24
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	3303      	adds	r3, #3
 800d5b0:	b2d2      	uxtb	r2, r2
 800d5b2:	701a      	strb	r2, [r3, #0]
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	4a0a      	ldr	r2, [pc, #40]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d5ba:	7912      	ldrb	r2, [r2, #4]
 800d5bc:	701a      	strb	r2, [r3, #0]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	3305      	adds	r3, #5
 800d5c2:	4a08      	ldr	r2, [pc, #32]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d5c4:	7952      	ldrb	r2, [r2, #5]
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	3306      	adds	r3, #6
 800d5cc:	4a05      	ldr	r2, [pc, #20]	@ (800d5e4 <CDC_Control_FS+0x158>)
 800d5ce:	7992      	ldrb	r2, [r2, #6]
 800d5d0:	701a      	strb	r2, [r3, #0]
 800d5d2:	e000      	b.n	800d5d6 <CDC_Control_FS+0x14a>
 800d5d4:	bf00      	nop
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr
 800d5e4:	20000098 	.word	0x20000098

0800d5e8 <CDC_Receive_FS>:
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d624 <CDC_Receive_FS+0x3c>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d007      	beq.n	800d60a <CDC_Receive_FS+0x22>
 800d5fa:	4b0a      	ldr	r3, [pc, #40]	@ (800d624 <CDC_Receive_FS+0x3c>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	6812      	ldr	r2, [r2, #0]
 800d602:	b292      	uxth	r2, r2
 800d604:	4611      	mov	r1, r2
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	4798      	blx	r3
 800d60a:	6879      	ldr	r1, [r7, #4]
 800d60c:	4806      	ldr	r0, [pc, #24]	@ (800d628 <CDC_Receive_FS+0x40>)
 800d60e:	f7fe fb3d 	bl	800bc8c <USBD_CDC_SetRxBuffer>
 800d612:	4805      	ldr	r0, [pc, #20]	@ (800d628 <CDC_Receive_FS+0x40>)
 800d614:	f7fe fb98 	bl	800bd48 <USBD_CDC_ReceivePacket>
 800d618:	2300      	movs	r3, #0
 800d61a:	4618      	mov	r0, r3
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	200010c8 	.word	0x200010c8
 800d628:	200009ec 	.word	0x200009ec

0800d62c <CDC_Transmit_FS>:
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	807b      	strh	r3, [r7, #2]
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]
 800d63c:	4b0d      	ldr	r3, [pc, #52]	@ (800d674 <CDC_Transmit_FS+0x48>)
 800d63e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d642:	60bb      	str	r3, [r7, #8]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <CDC_Transmit_FS+0x26>
 800d64e:	2301      	movs	r3, #1
 800d650:	e00b      	b.n	800d66a <CDC_Transmit_FS+0x3e>
 800d652:	887b      	ldrh	r3, [r7, #2]
 800d654:	461a      	mov	r2, r3
 800d656:	6879      	ldr	r1, [r7, #4]
 800d658:	4806      	ldr	r0, [pc, #24]	@ (800d674 <CDC_Transmit_FS+0x48>)
 800d65a:	f7fe faf5 	bl	800bc48 <USBD_CDC_SetTxBuffer>
 800d65e:	4805      	ldr	r0, [pc, #20]	@ (800d674 <CDC_Transmit_FS+0x48>)
 800d660:	f7fe fb32 	bl	800bcc8 <USBD_CDC_TransmitPacket>
 800d664:	4603      	mov	r3, r0
 800d666:	73fb      	strb	r3, [r7, #15]
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	200009ec 	.word	0x200009ec

0800d678 <CDC_TransmitCplt_FS>:
 800d678:	b480      	push	{r7}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	4613      	mov	r3, r2
 800d684:	71fb      	strb	r3, [r7, #7]
 800d686:	2300      	movs	r3, #0
 800d688:	75fb      	strb	r3, [r7, #23]
 800d68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d68e:	4618      	mov	r0, r3
 800d690:	371c      	adds	r7, #28
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
	...

0800d69c <CDC_AttachRxData>:
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	4a04      	ldr	r2, [pc, #16]	@ (800d6b8 <CDC_AttachRxData+0x1c>)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6013      	str	r3, [r2, #0]
 800d6aa:	bf00      	nop
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	200010c8 	.word	0x200010c8

0800d6bc <USBD_FS_DeviceDescriptor>:
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	6039      	str	r1, [r7, #0]
 800d6c6:	71fb      	strb	r3, [r7, #7]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	2212      	movs	r2, #18
 800d6cc:	801a      	strh	r2, [r3, #0]
 800d6ce:	4b03      	ldr	r3, [pc, #12]	@ (800d6dc <USBD_FS_DeviceDescriptor+0x20>)
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	200000d0 	.word	0x200000d0

0800d6e0 <USBD_FS_LangIDStrDescriptor>:
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2204      	movs	r2, #4
 800d6f0:	801a      	strh	r2, [r3, #0]
 800d6f2:	4b03      	ldr	r3, [pc, #12]	@ (800d700 <USBD_FS_LangIDStrDescriptor+0x20>)
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	200000e4 	.word	0x200000e4

0800d704 <USBD_FS_ProductStrDescriptor>:
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	4603      	mov	r3, r0
 800d70c:	6039      	str	r1, [r7, #0]
 800d70e:	71fb      	strb	r3, [r7, #7]
 800d710:	79fb      	ldrb	r3, [r7, #7]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d105      	bne.n	800d722 <USBD_FS_ProductStrDescriptor+0x1e>
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	4907      	ldr	r1, [pc, #28]	@ (800d738 <USBD_FS_ProductStrDescriptor+0x34>)
 800d71a:	4808      	ldr	r0, [pc, #32]	@ (800d73c <USBD_FS_ProductStrDescriptor+0x38>)
 800d71c:	f7ff fd76 	bl	800d20c <USBD_GetString>
 800d720:	e004      	b.n	800d72c <USBD_FS_ProductStrDescriptor+0x28>
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	4904      	ldr	r1, [pc, #16]	@ (800d738 <USBD_FS_ProductStrDescriptor+0x34>)
 800d726:	4805      	ldr	r0, [pc, #20]	@ (800d73c <USBD_FS_ProductStrDescriptor+0x38>)
 800d728:	f7ff fd70 	bl	800d20c <USBD_GetString>
 800d72c:	4b02      	ldr	r3, [pc, #8]	@ (800d738 <USBD_FS_ProductStrDescriptor+0x34>)
 800d72e:	4618      	mov	r0, r3
 800d730:	3708      	adds	r7, #8
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	200010cc 	.word	0x200010cc
 800d73c:	080125e0 	.word	0x080125e0

0800d740 <USBD_FS_ManufacturerStrDescriptor>:
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	6039      	str	r1, [r7, #0]
 800d74a:	71fb      	strb	r3, [r7, #7]
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	4904      	ldr	r1, [pc, #16]	@ (800d760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d750:	4804      	ldr	r0, [pc, #16]	@ (800d764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d752:	f7ff fd5b 	bl	800d20c <USBD_GetString>
 800d756:	4b02      	ldr	r3, [pc, #8]	@ (800d760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	200010cc 	.word	0x200010cc
 800d764:	080125f8 	.word	0x080125f8

0800d768 <USBD_FS_SerialStrDescriptor>:
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	6039      	str	r1, [r7, #0]
 800d772:	71fb      	strb	r3, [r7, #7]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	221a      	movs	r2, #26
 800d778:	801a      	strh	r2, [r3, #0]
 800d77a:	f000 f843 	bl	800d804 <Get_SerialNum>
 800d77e:	4b02      	ldr	r3, [pc, #8]	@ (800d788 <USBD_FS_SerialStrDescriptor+0x20>)
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	200000e8 	.word	0x200000e8

0800d78c <USBD_FS_ConfigStrDescriptor>:
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	6039      	str	r1, [r7, #0]
 800d796:	71fb      	strb	r3, [r7, #7]
 800d798:	79fb      	ldrb	r3, [r7, #7]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d105      	bne.n	800d7aa <USBD_FS_ConfigStrDescriptor+0x1e>
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	4907      	ldr	r1, [pc, #28]	@ (800d7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7a2:	4808      	ldr	r0, [pc, #32]	@ (800d7c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7a4:	f7ff fd32 	bl	800d20c <USBD_GetString>
 800d7a8:	e004      	b.n	800d7b4 <USBD_FS_ConfigStrDescriptor+0x28>
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	4904      	ldr	r1, [pc, #16]	@ (800d7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7ae:	4805      	ldr	r0, [pc, #20]	@ (800d7c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7b0:	f7ff fd2c 	bl	800d20c <USBD_GetString>
 800d7b4:	4b02      	ldr	r3, [pc, #8]	@ (800d7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	200010cc 	.word	0x200010cc
 800d7c4:	0801260c 	.word	0x0801260c

0800d7c8 <USBD_FS_InterfaceStrDescriptor>:
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	6039      	str	r1, [r7, #0]
 800d7d2:	71fb      	strb	r3, [r7, #7]
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
 800d7da:	683a      	ldr	r2, [r7, #0]
 800d7dc:	4907      	ldr	r1, [pc, #28]	@ (800d7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7de:	4808      	ldr	r0, [pc, #32]	@ (800d800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7e0:	f7ff fd14 	bl	800d20c <USBD_GetString>
 800d7e4:	e004      	b.n	800d7f0 <USBD_FS_InterfaceStrDescriptor+0x28>
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	4904      	ldr	r1, [pc, #16]	@ (800d7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7ea:	4805      	ldr	r0, [pc, #20]	@ (800d800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7ec:	f7ff fd0e 	bl	800d20c <USBD_GetString>
 800d7f0:	4b02      	ldr	r3, [pc, #8]	@ (800d7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	200010cc 	.word	0x200010cc
 800d800:	08012618 	.word	0x08012618

0800d804 <Get_SerialNum>:
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4b0f      	ldr	r3, [pc, #60]	@ (800d848 <Get_SerialNum+0x44>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	4b0e      	ldr	r3, [pc, #56]	@ (800d84c <Get_SerialNum+0x48>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	60bb      	str	r3, [r7, #8]
 800d816:	4b0e      	ldr	r3, [pc, #56]	@ (800d850 <Get_SerialNum+0x4c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	607b      	str	r3, [r7, #4]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4413      	add	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d009      	beq.n	800d83e <Get_SerialNum+0x3a>
 800d82a:	2208      	movs	r2, #8
 800d82c:	4909      	ldr	r1, [pc, #36]	@ (800d854 <Get_SerialNum+0x50>)
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f000 f814 	bl	800d85c <IntToUnicode>
 800d834:	2204      	movs	r2, #4
 800d836:	4908      	ldr	r1, [pc, #32]	@ (800d858 <Get_SerialNum+0x54>)
 800d838:	68b8      	ldr	r0, [r7, #8]
 800d83a:	f000 f80f 	bl	800d85c <IntToUnicode>
 800d83e:	bf00      	nop
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	1fff7a10 	.word	0x1fff7a10
 800d84c:	1fff7a14 	.word	0x1fff7a14
 800d850:	1fff7a18 	.word	0x1fff7a18
 800d854:	200000ea 	.word	0x200000ea
 800d858:	200000fa 	.word	0x200000fa

0800d85c <IntToUnicode>:
 800d85c:	b480      	push	{r7}
 800d85e:	b087      	sub	sp, #28
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	4613      	mov	r3, r2
 800d868:	71fb      	strb	r3, [r7, #7]
 800d86a:	2300      	movs	r3, #0
 800d86c:	75fb      	strb	r3, [r7, #23]
 800d86e:	2300      	movs	r3, #0
 800d870:	75fb      	strb	r3, [r7, #23]
 800d872:	e027      	b.n	800d8c4 <IntToUnicode+0x68>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	0f1b      	lsrs	r3, r3, #28
 800d878:	2b09      	cmp	r3, #9
 800d87a:	d80b      	bhi.n	800d894 <IntToUnicode+0x38>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	0f1b      	lsrs	r3, r3, #28
 800d880:	b2da      	uxtb	r2, r3
 800d882:	7dfb      	ldrb	r3, [r7, #23]
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	4619      	mov	r1, r3
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	440b      	add	r3, r1
 800d88c:	3230      	adds	r2, #48	@ 0x30
 800d88e:	b2d2      	uxtb	r2, r2
 800d890:	701a      	strb	r2, [r3, #0]
 800d892:	e00a      	b.n	800d8aa <IntToUnicode+0x4e>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	0f1b      	lsrs	r3, r3, #28
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	005b      	lsls	r3, r3, #1
 800d89e:	4619      	mov	r1, r3
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	440b      	add	r3, r1
 800d8a4:	3237      	adds	r2, #55	@ 0x37
 800d8a6:	b2d2      	uxtb	r2, r2
 800d8a8:	701a      	strb	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	011b      	lsls	r3, r3, #4
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	701a      	strb	r2, [r3, #0]
 800d8be:	7dfb      	ldrb	r3, [r7, #23]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	75fb      	strb	r3, [r7, #23]
 800d8c4:	7dfa      	ldrb	r2, [r7, #23]
 800d8c6:	79fb      	ldrb	r3, [r7, #7]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d3d3      	bcc.n	800d874 <IntToUnicode+0x18>
 800d8cc:	bf00      	nop
 800d8ce:	bf00      	nop
 800d8d0:	371c      	adds	r7, #28
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
	...

0800d8dc <HAL_PCD_MspInit>:
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b08a      	sub	sp, #40	@ 0x28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	f107 0314 	add.w	r3, r7, #20
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	605a      	str	r2, [r3, #4]
 800d8ee:	609a      	str	r2, [r3, #8]
 800d8f0:	60da      	str	r2, [r3, #12]
 800d8f2:	611a      	str	r2, [r3, #16]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d8fc:	d13a      	bne.n	800d974 <HAL_PCD_MspInit+0x98>
 800d8fe:	2300      	movs	r3, #0
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	4b1e      	ldr	r3, [pc, #120]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d906:	4a1d      	ldr	r2, [pc, #116]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d908:	f043 0301 	orr.w	r3, r3, #1
 800d90c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d90e:	4b1b      	ldr	r3, [pc, #108]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d912:	f003 0301 	and.w	r3, r3, #1
 800d916:	613b      	str	r3, [r7, #16]
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	2302      	movs	r3, #2
 800d922:	61bb      	str	r3, [r7, #24]
 800d924:	2300      	movs	r3, #0
 800d926:	61fb      	str	r3, [r7, #28]
 800d928:	2303      	movs	r3, #3
 800d92a:	623b      	str	r3, [r7, #32]
 800d92c:	230a      	movs	r3, #10
 800d92e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d930:	f107 0314 	add.w	r3, r7, #20
 800d934:	4619      	mov	r1, r3
 800d936:	4812      	ldr	r0, [pc, #72]	@ (800d980 <HAL_PCD_MspInit+0xa4>)
 800d938:	f7f6 fc30 	bl	800419c <HAL_GPIO_Init>
 800d93c:	4b0f      	ldr	r3, [pc, #60]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d940:	4a0e      	ldr	r2, [pc, #56]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d946:	6353      	str	r3, [r2, #52]	@ 0x34
 800d948:	2300      	movs	r3, #0
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	4b0b      	ldr	r3, [pc, #44]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d94e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d950:	4a0a      	ldr	r2, [pc, #40]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d956:	6453      	str	r3, [r2, #68]	@ 0x44
 800d958:	4b08      	ldr	r3, [pc, #32]	@ (800d97c <HAL_PCD_MspInit+0xa0>)
 800d95a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d95c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d960:	60fb      	str	r3, [r7, #12]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2200      	movs	r2, #0
 800d966:	2100      	movs	r1, #0
 800d968:	2043      	movs	r0, #67	@ 0x43
 800d96a:	f7f5 ffd0 	bl	800390e <HAL_NVIC_SetPriority>
 800d96e:	2043      	movs	r0, #67	@ 0x43
 800d970:	f7f5 ffe9 	bl	8003946 <HAL_NVIC_EnableIRQ>
 800d974:	bf00      	nop
 800d976:	3728      	adds	r7, #40	@ 0x28
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	40023800 	.word	0x40023800
 800d980:	40020000 	.word	0x40020000

0800d984 <HAL_PCD_SetupStageCallback>:
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d998:	4619      	mov	r1, r3
 800d99a:	4610      	mov	r0, r2
 800d99c:	f7fe fabd 	bl	800bf1a <USBD_LL_SetupStage>
 800d9a0:	bf00      	nop
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <HAL_PCD_DataOutStageCallback>:
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d9ba:	78fa      	ldrb	r2, [r7, #3]
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	00db      	lsls	r3, r3, #3
 800d9c2:	4413      	add	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	440b      	add	r3, r1
 800d9c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	f7fe faf7 	bl	800bfc4 <USBD_LL_DataOutStage>
 800d9d6:	bf00      	nop
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <HAL_PCD_DataInStageCallback>:
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b082      	sub	sp, #8
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d9f0:	78fa      	ldrb	r2, [r7, #3]
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	440b      	add	r3, r1
 800d9fe:	3320      	adds	r3, #32
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	78fb      	ldrb	r3, [r7, #3]
 800da04:	4619      	mov	r1, r3
 800da06:	f7fe fb99 	bl	800c13c <USBD_LL_DataInStage>
 800da0a:	bf00      	nop
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <HAL_PCD_SOFCallback>:
 800da12:	b580      	push	{r7, lr}
 800da14:	b082      	sub	sp, #8
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da20:	4618      	mov	r0, r3
 800da22:	f7fe fcdd 	bl	800c3e0 <USBD_LL_SOF>
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <HAL_PCD_ResetCallback>:
 800da2e:	b580      	push	{r7, lr}
 800da30:	b084      	sub	sp, #16
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	2301      	movs	r3, #1
 800da38:	73fb      	strb	r3, [r7, #15]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	79db      	ldrb	r3, [r3, #7]
 800da3e:	2b02      	cmp	r3, #2
 800da40:	d001      	beq.n	800da46 <HAL_PCD_ResetCallback+0x18>
 800da42:	f7f4 fc8b 	bl	800235c <Error_Handler>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da4c:	7bfa      	ldrb	r2, [r7, #15]
 800da4e:	4611      	mov	r1, r2
 800da50:	4618      	mov	r0, r3
 800da52:	f7fe fc81 	bl	800c358 <USBD_LL_SetSpeed>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fe fc28 	bl	800c2b2 <USBD_LL_Reset>
 800da62:	bf00      	nop
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
	...

0800da6c <HAL_PCD_SuspendCallback>:
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe fc7c 	bl	800c378 <USBD_LL_Suspend>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	6812      	ldr	r2, [r2, #0]
 800da8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800da92:	f043 0301 	orr.w	r3, r3, #1
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	7adb      	ldrb	r3, [r3, #11]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d005      	beq.n	800daac <HAL_PCD_SuspendCallback+0x40>
 800daa0:	4b04      	ldr	r3, [pc, #16]	@ (800dab4 <HAL_PCD_SuspendCallback+0x48>)
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	4a03      	ldr	r2, [pc, #12]	@ (800dab4 <HAL_PCD_SuspendCallback+0x48>)
 800daa6:	f043 0306 	orr.w	r3, r3, #6
 800daaa:	6113      	str	r3, [r2, #16]
 800daac:	bf00      	nop
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	e000ed00 	.word	0xe000ed00

0800dab8 <HAL_PCD_ResumeCallback>:
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fe fc72 	bl	800c3b0 <USBD_LL_Resume>
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HAL_PCD_ISOOUTIncompleteCallback>:
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dae6:	78fa      	ldrb	r2, [r7, #3]
 800dae8:	4611      	mov	r1, r2
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe fcca 	bl	800c484 <USBD_LL_IsoOUTIncomplete>
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <HAL_PCD_ISOINIncompleteCallback>:
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	70fb      	strb	r3, [r7, #3]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db0a:	78fa      	ldrb	r2, [r7, #3]
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe fc86 	bl	800c420 <USBD_LL_IsoINIncomplete>
 800db14:	bf00      	nop
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <HAL_PCD_ConnectCallback>:
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fe fcdc 	bl	800c4e8 <USBD_LL_DevConnected>
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <HAL_PCD_DisconnectCallback>:
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db46:	4618      	mov	r0, r3
 800db48:	f7fe fcd9 	bl	800c4fe <USBD_LL_DevDisconnected>
 800db4c:	bf00      	nop
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <USBD_LL_Init>:
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d13c      	bne.n	800dbde <USBD_LL_Init+0x8a>
 800db64:	4a20      	ldr	r2, [pc, #128]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4a1e      	ldr	r2, [pc, #120]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db70:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
 800db74:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	4b1a      	ldr	r3, [pc, #104]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db7e:	2204      	movs	r2, #4
 800db80:	711a      	strb	r2, [r3, #4]
 800db82:	4b19      	ldr	r3, [pc, #100]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db84:	2202      	movs	r2, #2
 800db86:	71da      	strb	r2, [r3, #7]
 800db88:	4b17      	ldr	r3, [pc, #92]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	719a      	strb	r2, [r3, #6]
 800db8e:	4b16      	ldr	r3, [pc, #88]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db90:	2202      	movs	r2, #2
 800db92:	725a      	strb	r2, [r3, #9]
 800db94:	4b14      	ldr	r3, [pc, #80]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db96:	2200      	movs	r2, #0
 800db98:	729a      	strb	r2, [r3, #10]
 800db9a:	4b13      	ldr	r3, [pc, #76]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	72da      	strb	r2, [r3, #11]
 800dba0:	4b11      	ldr	r3, [pc, #68]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	731a      	strb	r2, [r3, #12]
 800dba6:	4b10      	ldr	r3, [pc, #64]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	739a      	strb	r2, [r3, #14]
 800dbac:	4b0e      	ldr	r3, [pc, #56]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	73da      	strb	r2, [r3, #15]
 800dbb2:	480d      	ldr	r0, [pc, #52]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800dbb4:	f7f8 fafb 	bl	80061ae <HAL_PCD_Init>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <USBD_LL_Init+0x6e>
 800dbbe:	f7f4 fbcd 	bl	800235c <Error_Handler>
 800dbc2:	2180      	movs	r1, #128	@ 0x80
 800dbc4:	4808      	ldr	r0, [pc, #32]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800dbc6:	f7f9 fd28 	bl	800761a <HAL_PCDEx_SetRxFiFo>
 800dbca:	2240      	movs	r2, #64	@ 0x40
 800dbcc:	2100      	movs	r1, #0
 800dbce:	4806      	ldr	r0, [pc, #24]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800dbd0:	f7f9 fcdc 	bl	800758c <HAL_PCDEx_SetTxFiFo>
 800dbd4:	2280      	movs	r2, #128	@ 0x80
 800dbd6:	2101      	movs	r1, #1
 800dbd8:	4803      	ldr	r0, [pc, #12]	@ (800dbe8 <USBD_LL_Init+0x94>)
 800dbda:	f7f9 fcd7 	bl	800758c <HAL_PCDEx_SetTxFiFo>
 800dbde:	2300      	movs	r3, #0
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	200012cc 	.word	0x200012cc

0800dbec <USBD_LL_Start>:
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73fb      	strb	r3, [r7, #15]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73bb      	strb	r3, [r7, #14]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7f8 fbe2 	bl	80063cc <HAL_PCD_Start>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73fb      	strb	r3, [r7, #15]
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 f942 	bl	800de98 <USBD_Get_USB_Status>
 800dc14:	4603      	mov	r3, r0
 800dc16:	73bb      	strb	r3, [r7, #14]
 800dc18:	7bbb      	ldrb	r3, [r7, #14]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <USBD_LL_OpenEP>:
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b084      	sub	sp, #16
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	461a      	mov	r2, r3
 800dc30:	4603      	mov	r3, r0
 800dc32:	70fb      	strb	r3, [r7, #3]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70bb      	strb	r3, [r7, #2]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	803b      	strh	r3, [r7, #0]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	73fb      	strb	r3, [r7, #15]
 800dc40:	2300      	movs	r3, #0
 800dc42:	73bb      	strb	r3, [r7, #14]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc4a:	78bb      	ldrb	r3, [r7, #2]
 800dc4c:	883a      	ldrh	r2, [r7, #0]
 800dc4e:	78f9      	ldrb	r1, [r7, #3]
 800dc50:	f7f9 f8b6 	bl	8006dc0 <HAL_PCD_EP_Open>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73fb      	strb	r3, [r7, #15]
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 f91c 	bl	800de98 <USBD_Get_USB_Status>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73bb      	strb	r3, [r7, #14]
 800dc64:	7bbb      	ldrb	r3, [r7, #14]
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <USBD_LL_CloseEP>:
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b084      	sub	sp, #16
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
 800dc76:	460b      	mov	r3, r1
 800dc78:	70fb      	strb	r3, [r7, #3]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	73fb      	strb	r3, [r7, #15]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	73bb      	strb	r3, [r7, #14]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc88:	78fa      	ldrb	r2, [r7, #3]
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7f9 f901 	bl	8006e94 <HAL_PCD_EP_Close>
 800dc92:	4603      	mov	r3, r0
 800dc94:	73fb      	strb	r3, [r7, #15]
 800dc96:	7bfb      	ldrb	r3, [r7, #15]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 f8fd 	bl	800de98 <USBD_Get_USB_Status>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	73bb      	strb	r3, [r7, #14]
 800dca2:	7bbb      	ldrb	r3, [r7, #14]
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <USBD_LL_StallEP>:
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	73bb      	strb	r3, [r7, #14]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcc6:	78fa      	ldrb	r2, [r7, #3]
 800dcc8:	4611      	mov	r1, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7f9 f9b9 	bl	8007042 <HAL_PCD_EP_SetStall>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	73fb      	strb	r3, [r7, #15]
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 f8de 	bl	800de98 <USBD_Get_USB_Status>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73bb      	strb	r3, [r7, #14]
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <USBD_LL_ClearStallEP>:
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b084      	sub	sp, #16
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	70fb      	strb	r3, [r7, #3]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73bb      	strb	r3, [r7, #14]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd04:	78fa      	ldrb	r2, [r7, #3]
 800dd06:	4611      	mov	r1, r2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f9 f9fd 	bl	8007108 <HAL_PCD_EP_ClrStall>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	73fb      	strb	r3, [r7, #15]
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 f8bf 	bl	800de98 <USBD_Get_USB_Status>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73bb      	strb	r3, [r7, #14]
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	4618      	mov	r0, r3
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <USBD_LL_IsStallEP>:
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	460b      	mov	r3, r1
 800dd32:	70fb      	strb	r3, [r7, #3]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	da0b      	bge.n	800dd5c <USBD_LL_IsStallEP+0x34>
 800dd44:	78fb      	ldrb	r3, [r7, #3]
 800dd46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd4a:	68f9      	ldr	r1, [r7, #12]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	00db      	lsls	r3, r3, #3
 800dd50:	4413      	add	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	440b      	add	r3, r1
 800dd56:	3316      	adds	r3, #22
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	e00b      	b.n	800dd74 <USBD_LL_IsStallEP+0x4c>
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd62:	68f9      	ldr	r1, [r7, #12]
 800dd64:	4613      	mov	r3, r2
 800dd66:	00db      	lsls	r3, r3, #3
 800dd68:	4413      	add	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	440b      	add	r3, r1
 800dd6e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <USBD_LL_SetUSBAddress>:
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	70fb      	strb	r3, [r7, #3]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73fb      	strb	r3, [r7, #15]
 800dd90:	2300      	movs	r3, #0
 800dd92:	73bb      	strb	r3, [r7, #14]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd9a:	78fa      	ldrb	r2, [r7, #3]
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f8 ffea 	bl	8006d78 <HAL_PCD_SetAddress>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73fb      	strb	r3, [r7, #15]
 800dda8:	7bfb      	ldrb	r3, [r7, #15]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 f874 	bl	800de98 <USBD_Get_USB_Status>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	73bb      	strb	r3, [r7, #14]
 800ddb4:	7bbb      	ldrb	r3, [r7, #14]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <USBD_LL_Transmit>:
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b086      	sub	sp, #24
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	60f8      	str	r0, [r7, #12]
 800ddc6:	607a      	str	r2, [r7, #4]
 800ddc8:	603b      	str	r3, [r7, #0]
 800ddca:	460b      	mov	r3, r1
 800ddcc:	72fb      	strb	r3, [r7, #11]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	75fb      	strb	r3, [r7, #23]
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	75bb      	strb	r3, [r7, #22]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dddc:	7af9      	ldrb	r1, [r7, #11]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	f7f9 f8f4 	bl	8006fce <HAL_PCD_EP_Transmit>
 800dde6:	4603      	mov	r3, r0
 800dde8:	75fb      	strb	r3, [r7, #23]
 800ddea:	7dfb      	ldrb	r3, [r7, #23]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 f853 	bl	800de98 <USBD_Get_USB_Status>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	75bb      	strb	r3, [r7, #22]
 800ddf6:	7dbb      	ldrb	r3, [r7, #22]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3718      	adds	r7, #24
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <USBD_LL_PrepareReceive>:
 800de00:	b580      	push	{r7, lr}
 800de02:	b086      	sub	sp, #24
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	607a      	str	r2, [r7, #4]
 800de0a:	603b      	str	r3, [r7, #0]
 800de0c:	460b      	mov	r3, r1
 800de0e:	72fb      	strb	r3, [r7, #11]
 800de10:	2300      	movs	r3, #0
 800de12:	75fb      	strb	r3, [r7, #23]
 800de14:	2300      	movs	r3, #0
 800de16:	75bb      	strb	r3, [r7, #22]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de1e:	7af9      	ldrb	r1, [r7, #11]
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	f7f9 f880 	bl	8006f28 <HAL_PCD_EP_Receive>
 800de28:	4603      	mov	r3, r0
 800de2a:	75fb      	strb	r3, [r7, #23]
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 f832 	bl	800de98 <USBD_Get_USB_Status>
 800de34:	4603      	mov	r3, r0
 800de36:	75bb      	strb	r3, [r7, #22]
 800de38:	7dbb      	ldrb	r3, [r7, #22]
 800de3a:	4618      	mov	r0, r3
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <USBD_LL_GetRxDataSize>:
 800de42:	b580      	push	{r7, lr}
 800de44:	b082      	sub	sp, #8
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	460b      	mov	r3, r1
 800de4c:	70fb      	strb	r3, [r7, #3]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de54:	78fa      	ldrb	r2, [r7, #3]
 800de56:	4611      	mov	r1, r2
 800de58:	4618      	mov	r0, r3
 800de5a:	f7f9 f8a0 	bl	8006f9e <HAL_PCD_EP_GetRxCount>
 800de5e:	4603      	mov	r3, r0
 800de60:	4618      	mov	r0, r3
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <USBD_static_malloc>:
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	4b03      	ldr	r3, [pc, #12]	@ (800de80 <USBD_static_malloc+0x18>)
 800de72:	4618      	mov	r0, r3
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	200017b0 	.word	0x200017b0

0800de84 <USBD_static_free>:
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <USBD_Get_USB_Status>:
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	71fb      	strb	r3, [r7, #7]
 800dea2:	2300      	movs	r3, #0
 800dea4:	73fb      	strb	r3, [r7, #15]
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	2b03      	cmp	r3, #3
 800deaa:	d817      	bhi.n	800dedc <USBD_Get_USB_Status+0x44>
 800deac:	a201      	add	r2, pc, #4	@ (adr r2, 800deb4 <USBD_Get_USB_Status+0x1c>)
 800deae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb2:	bf00      	nop
 800deb4:	0800dec5 	.word	0x0800dec5
 800deb8:	0800decb 	.word	0x0800decb
 800debc:	0800ded1 	.word	0x0800ded1
 800dec0:	0800ded7 	.word	0x0800ded7
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
 800dec8:	e00b      	b.n	800dee2 <USBD_Get_USB_Status+0x4a>
 800deca:	2303      	movs	r3, #3
 800decc:	73fb      	strb	r3, [r7, #15]
 800dece:	e008      	b.n	800dee2 <USBD_Get_USB_Status+0x4a>
 800ded0:	2301      	movs	r3, #1
 800ded2:	73fb      	strb	r3, [r7, #15]
 800ded4:	e005      	b.n	800dee2 <USBD_Get_USB_Status+0x4a>
 800ded6:	2303      	movs	r3, #3
 800ded8:	73fb      	strb	r3, [r7, #15]
 800deda:	e002      	b.n	800dee2 <USBD_Get_USB_Status+0x4a>
 800dedc:	2303      	movs	r3, #3
 800dede:	73fb      	strb	r3, [r7, #15]
 800dee0:	bf00      	nop
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
 800dee4:	4618      	mov	r0, r3
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <malloc>:
 800def0:	4b02      	ldr	r3, [pc, #8]	@ (800defc <malloc+0xc>)
 800def2:	4601      	mov	r1, r0
 800def4:	6818      	ldr	r0, [r3, #0]
 800def6:	f000 b825 	b.w	800df44 <_malloc_r>
 800defa:	bf00      	nop
 800defc:	20000110 	.word	0x20000110

0800df00 <sbrk_aligned>:
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	4e0f      	ldr	r6, [pc, #60]	@ (800df40 <sbrk_aligned+0x40>)
 800df04:	460c      	mov	r4, r1
 800df06:	6831      	ldr	r1, [r6, #0]
 800df08:	4605      	mov	r5, r0
 800df0a:	b911      	cbnz	r1, 800df12 <sbrk_aligned+0x12>
 800df0c:	f001 f872 	bl	800eff4 <_sbrk_r>
 800df10:	6030      	str	r0, [r6, #0]
 800df12:	4621      	mov	r1, r4
 800df14:	4628      	mov	r0, r5
 800df16:	f001 f86d 	bl	800eff4 <_sbrk_r>
 800df1a:	1c43      	adds	r3, r0, #1
 800df1c:	d103      	bne.n	800df26 <sbrk_aligned+0x26>
 800df1e:	f04f 34ff 	mov.w	r4, #4294967295
 800df22:	4620      	mov	r0, r4
 800df24:	bd70      	pop	{r4, r5, r6, pc}
 800df26:	1cc4      	adds	r4, r0, #3
 800df28:	f024 0403 	bic.w	r4, r4, #3
 800df2c:	42a0      	cmp	r0, r4
 800df2e:	d0f8      	beq.n	800df22 <sbrk_aligned+0x22>
 800df30:	1a21      	subs	r1, r4, r0
 800df32:	4628      	mov	r0, r5
 800df34:	f001 f85e 	bl	800eff4 <_sbrk_r>
 800df38:	3001      	adds	r0, #1
 800df3a:	d1f2      	bne.n	800df22 <sbrk_aligned+0x22>
 800df3c:	e7ef      	b.n	800df1e <sbrk_aligned+0x1e>
 800df3e:	bf00      	nop
 800df40:	200019d0 	.word	0x200019d0

0800df44 <_malloc_r>:
 800df44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df48:	1ccd      	adds	r5, r1, #3
 800df4a:	f025 0503 	bic.w	r5, r5, #3
 800df4e:	3508      	adds	r5, #8
 800df50:	2d0c      	cmp	r5, #12
 800df52:	bf38      	it	cc
 800df54:	250c      	movcc	r5, #12
 800df56:	2d00      	cmp	r5, #0
 800df58:	4606      	mov	r6, r0
 800df5a:	db01      	blt.n	800df60 <_malloc_r+0x1c>
 800df5c:	42a9      	cmp	r1, r5
 800df5e:	d904      	bls.n	800df6a <_malloc_r+0x26>
 800df60:	230c      	movs	r3, #12
 800df62:	6033      	str	r3, [r6, #0]
 800df64:	2000      	movs	r0, #0
 800df66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e040 <_malloc_r+0xfc>
 800df6e:	f000 f869 	bl	800e044 <__malloc_lock>
 800df72:	f8d8 3000 	ldr.w	r3, [r8]
 800df76:	461c      	mov	r4, r3
 800df78:	bb44      	cbnz	r4, 800dfcc <_malloc_r+0x88>
 800df7a:	4629      	mov	r1, r5
 800df7c:	4630      	mov	r0, r6
 800df7e:	f7ff ffbf 	bl	800df00 <sbrk_aligned>
 800df82:	1c43      	adds	r3, r0, #1
 800df84:	4604      	mov	r4, r0
 800df86:	d158      	bne.n	800e03a <_malloc_r+0xf6>
 800df88:	f8d8 4000 	ldr.w	r4, [r8]
 800df8c:	4627      	mov	r7, r4
 800df8e:	2f00      	cmp	r7, #0
 800df90:	d143      	bne.n	800e01a <_malloc_r+0xd6>
 800df92:	2c00      	cmp	r4, #0
 800df94:	d04b      	beq.n	800e02e <_malloc_r+0xea>
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	4639      	mov	r1, r7
 800df9a:	4630      	mov	r0, r6
 800df9c:	eb04 0903 	add.w	r9, r4, r3
 800dfa0:	f001 f828 	bl	800eff4 <_sbrk_r>
 800dfa4:	4581      	cmp	r9, r0
 800dfa6:	d142      	bne.n	800e02e <_malloc_r+0xea>
 800dfa8:	6821      	ldr	r1, [r4, #0]
 800dfaa:	1a6d      	subs	r5, r5, r1
 800dfac:	4629      	mov	r1, r5
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f7ff ffa6 	bl	800df00 <sbrk_aligned>
 800dfb4:	3001      	adds	r0, #1
 800dfb6:	d03a      	beq.n	800e02e <_malloc_r+0xea>
 800dfb8:	6823      	ldr	r3, [r4, #0]
 800dfba:	442b      	add	r3, r5
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	bb62      	cbnz	r2, 800e020 <_malloc_r+0xdc>
 800dfc6:	f8c8 7000 	str.w	r7, [r8]
 800dfca:	e00f      	b.n	800dfec <_malloc_r+0xa8>
 800dfcc:	6822      	ldr	r2, [r4, #0]
 800dfce:	1b52      	subs	r2, r2, r5
 800dfd0:	d420      	bmi.n	800e014 <_malloc_r+0xd0>
 800dfd2:	2a0b      	cmp	r2, #11
 800dfd4:	d917      	bls.n	800e006 <_malloc_r+0xc2>
 800dfd6:	1961      	adds	r1, r4, r5
 800dfd8:	42a3      	cmp	r3, r4
 800dfda:	6025      	str	r5, [r4, #0]
 800dfdc:	bf18      	it	ne
 800dfde:	6059      	strne	r1, [r3, #4]
 800dfe0:	6863      	ldr	r3, [r4, #4]
 800dfe2:	bf08      	it	eq
 800dfe4:	f8c8 1000 	streq.w	r1, [r8]
 800dfe8:	5162      	str	r2, [r4, r5]
 800dfea:	604b      	str	r3, [r1, #4]
 800dfec:	4630      	mov	r0, r6
 800dfee:	f000 f82f 	bl	800e050 <__malloc_unlock>
 800dff2:	f104 000b 	add.w	r0, r4, #11
 800dff6:	1d23      	adds	r3, r4, #4
 800dff8:	f020 0007 	bic.w	r0, r0, #7
 800dffc:	1ac2      	subs	r2, r0, r3
 800dffe:	bf1c      	itt	ne
 800e000:	1a1b      	subne	r3, r3, r0
 800e002:	50a3      	strne	r3, [r4, r2]
 800e004:	e7af      	b.n	800df66 <_malloc_r+0x22>
 800e006:	6862      	ldr	r2, [r4, #4]
 800e008:	42a3      	cmp	r3, r4
 800e00a:	bf0c      	ite	eq
 800e00c:	f8c8 2000 	streq.w	r2, [r8]
 800e010:	605a      	strne	r2, [r3, #4]
 800e012:	e7eb      	b.n	800dfec <_malloc_r+0xa8>
 800e014:	4623      	mov	r3, r4
 800e016:	6864      	ldr	r4, [r4, #4]
 800e018:	e7ae      	b.n	800df78 <_malloc_r+0x34>
 800e01a:	463c      	mov	r4, r7
 800e01c:	687f      	ldr	r7, [r7, #4]
 800e01e:	e7b6      	b.n	800df8e <_malloc_r+0x4a>
 800e020:	461a      	mov	r2, r3
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	42a3      	cmp	r3, r4
 800e026:	d1fb      	bne.n	800e020 <_malloc_r+0xdc>
 800e028:	2300      	movs	r3, #0
 800e02a:	6053      	str	r3, [r2, #4]
 800e02c:	e7de      	b.n	800dfec <_malloc_r+0xa8>
 800e02e:	230c      	movs	r3, #12
 800e030:	6033      	str	r3, [r6, #0]
 800e032:	4630      	mov	r0, r6
 800e034:	f000 f80c 	bl	800e050 <__malloc_unlock>
 800e038:	e794      	b.n	800df64 <_malloc_r+0x20>
 800e03a:	6005      	str	r5, [r0, #0]
 800e03c:	e7d6      	b.n	800dfec <_malloc_r+0xa8>
 800e03e:	bf00      	nop
 800e040:	200019d4 	.word	0x200019d4

0800e044 <__malloc_lock>:
 800e044:	4801      	ldr	r0, [pc, #4]	@ (800e04c <__malloc_lock+0x8>)
 800e046:	f001 b822 	b.w	800f08e <__retarget_lock_acquire_recursive>
 800e04a:	bf00      	nop
 800e04c:	20001b18 	.word	0x20001b18

0800e050 <__malloc_unlock>:
 800e050:	4801      	ldr	r0, [pc, #4]	@ (800e058 <__malloc_unlock+0x8>)
 800e052:	f001 b81d 	b.w	800f090 <__retarget_lock_release_recursive>
 800e056:	bf00      	nop
 800e058:	20001b18 	.word	0x20001b18

0800e05c <__cvt>:
 800e05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e060:	ec57 6b10 	vmov	r6, r7, d0
 800e064:	2f00      	cmp	r7, #0
 800e066:	460c      	mov	r4, r1
 800e068:	4619      	mov	r1, r3
 800e06a:	463b      	mov	r3, r7
 800e06c:	bfbb      	ittet	lt
 800e06e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e072:	461f      	movlt	r7, r3
 800e074:	2300      	movge	r3, #0
 800e076:	232d      	movlt	r3, #45	@ 0x2d
 800e078:	700b      	strb	r3, [r1, #0]
 800e07a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e07c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e080:	4691      	mov	r9, r2
 800e082:	f023 0820 	bic.w	r8, r3, #32
 800e086:	bfbc      	itt	lt
 800e088:	4632      	movlt	r2, r6
 800e08a:	4616      	movlt	r6, r2
 800e08c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e090:	d005      	beq.n	800e09e <__cvt+0x42>
 800e092:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e096:	d100      	bne.n	800e09a <__cvt+0x3e>
 800e098:	3401      	adds	r4, #1
 800e09a:	2102      	movs	r1, #2
 800e09c:	e000      	b.n	800e0a0 <__cvt+0x44>
 800e09e:	2103      	movs	r1, #3
 800e0a0:	ab03      	add	r3, sp, #12
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	ab02      	add	r3, sp, #8
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	ec47 6b10 	vmov	d0, r6, r7
 800e0ac:	4653      	mov	r3, sl
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	f001 f88e 	bl	800f1d0 <_dtoa_r>
 800e0b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	d119      	bne.n	800e0f0 <__cvt+0x94>
 800e0bc:	f019 0f01 	tst.w	r9, #1
 800e0c0:	d00e      	beq.n	800e0e0 <__cvt+0x84>
 800e0c2:	eb00 0904 	add.w	r9, r0, r4
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0d2:	b108      	cbz	r0, 800e0d8 <__cvt+0x7c>
 800e0d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0d8:	2230      	movs	r2, #48	@ 0x30
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	454b      	cmp	r3, r9
 800e0de:	d31e      	bcc.n	800e11e <__cvt+0xc2>
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0e4:	1b5b      	subs	r3, r3, r5
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	6013      	str	r3, [r2, #0]
 800e0ea:	b004      	add	sp, #16
 800e0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0f4:	eb00 0904 	add.w	r9, r0, r4
 800e0f8:	d1e5      	bne.n	800e0c6 <__cvt+0x6a>
 800e0fa:	7803      	ldrb	r3, [r0, #0]
 800e0fc:	2b30      	cmp	r3, #48	@ 0x30
 800e0fe:	d10a      	bne.n	800e116 <__cvt+0xba>
 800e100:	2200      	movs	r2, #0
 800e102:	2300      	movs	r3, #0
 800e104:	4630      	mov	r0, r6
 800e106:	4639      	mov	r1, r7
 800e108:	f7f2 fce6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e10c:	b918      	cbnz	r0, 800e116 <__cvt+0xba>
 800e10e:	f1c4 0401 	rsb	r4, r4, #1
 800e112:	f8ca 4000 	str.w	r4, [sl]
 800e116:	f8da 3000 	ldr.w	r3, [sl]
 800e11a:	4499      	add	r9, r3
 800e11c:	e7d3      	b.n	800e0c6 <__cvt+0x6a>
 800e11e:	1c59      	adds	r1, r3, #1
 800e120:	9103      	str	r1, [sp, #12]
 800e122:	701a      	strb	r2, [r3, #0]
 800e124:	e7d9      	b.n	800e0da <__cvt+0x7e>

0800e126 <__exponent>:
 800e126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e128:	2900      	cmp	r1, #0
 800e12a:	bfba      	itte	lt
 800e12c:	4249      	neglt	r1, r1
 800e12e:	232d      	movlt	r3, #45	@ 0x2d
 800e130:	232b      	movge	r3, #43	@ 0x2b
 800e132:	2909      	cmp	r1, #9
 800e134:	7002      	strb	r2, [r0, #0]
 800e136:	7043      	strb	r3, [r0, #1]
 800e138:	dd29      	ble.n	800e18e <__exponent+0x68>
 800e13a:	f10d 0307 	add.w	r3, sp, #7
 800e13e:	461d      	mov	r5, r3
 800e140:	270a      	movs	r7, #10
 800e142:	461a      	mov	r2, r3
 800e144:	fbb1 f6f7 	udiv	r6, r1, r7
 800e148:	fb07 1416 	mls	r4, r7, r6, r1
 800e14c:	3430      	adds	r4, #48	@ 0x30
 800e14e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e152:	460c      	mov	r4, r1
 800e154:	2c63      	cmp	r4, #99	@ 0x63
 800e156:	f103 33ff 	add.w	r3, r3, #4294967295
 800e15a:	4631      	mov	r1, r6
 800e15c:	dcf1      	bgt.n	800e142 <__exponent+0x1c>
 800e15e:	3130      	adds	r1, #48	@ 0x30
 800e160:	1e94      	subs	r4, r2, #2
 800e162:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e166:	1c41      	adds	r1, r0, #1
 800e168:	4623      	mov	r3, r4
 800e16a:	42ab      	cmp	r3, r5
 800e16c:	d30a      	bcc.n	800e184 <__exponent+0x5e>
 800e16e:	f10d 0309 	add.w	r3, sp, #9
 800e172:	1a9b      	subs	r3, r3, r2
 800e174:	42ac      	cmp	r4, r5
 800e176:	bf88      	it	hi
 800e178:	2300      	movhi	r3, #0
 800e17a:	3302      	adds	r3, #2
 800e17c:	4403      	add	r3, r0
 800e17e:	1a18      	subs	r0, r3, r0
 800e180:	b003      	add	sp, #12
 800e182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e184:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e188:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e18c:	e7ed      	b.n	800e16a <__exponent+0x44>
 800e18e:	2330      	movs	r3, #48	@ 0x30
 800e190:	3130      	adds	r1, #48	@ 0x30
 800e192:	7083      	strb	r3, [r0, #2]
 800e194:	70c1      	strb	r1, [r0, #3]
 800e196:	1d03      	adds	r3, r0, #4
 800e198:	e7f1      	b.n	800e17e <__exponent+0x58>
	...

0800e19c <_printf_float>:
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	b08d      	sub	sp, #52	@ 0x34
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e1a8:	4616      	mov	r6, r2
 800e1aa:	461f      	mov	r7, r3
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	f000 fee9 	bl	800ef84 <_localeconv_r>
 800e1b2:	6803      	ldr	r3, [r0, #0]
 800e1b4:	9304      	str	r3, [sp, #16]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f2 f862 	bl	8000280 <strlen>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e1c4:	9005      	str	r0, [sp, #20]
 800e1c6:	3307      	adds	r3, #7
 800e1c8:	f023 0307 	bic.w	r3, r3, #7
 800e1cc:	f103 0208 	add.w	r2, r3, #8
 800e1d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e1d4:	f8d4 b000 	ldr.w	fp, [r4]
 800e1d8:	f8c8 2000 	str.w	r2, [r8]
 800e1dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e1e4:	9307      	str	r3, [sp, #28]
 800e1e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1f2:	4b9c      	ldr	r3, [pc, #624]	@ (800e464 <_printf_float+0x2c8>)
 800e1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f8:	f7f2 fca0 	bl	8000b3c <__aeabi_dcmpun>
 800e1fc:	bb70      	cbnz	r0, 800e25c <_printf_float+0xc0>
 800e1fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e202:	4b98      	ldr	r3, [pc, #608]	@ (800e464 <_printf_float+0x2c8>)
 800e204:	f04f 32ff 	mov.w	r2, #4294967295
 800e208:	f7f2 fc7a 	bl	8000b00 <__aeabi_dcmple>
 800e20c:	bb30      	cbnz	r0, 800e25c <_printf_float+0xc0>
 800e20e:	2200      	movs	r2, #0
 800e210:	2300      	movs	r3, #0
 800e212:	4640      	mov	r0, r8
 800e214:	4649      	mov	r1, r9
 800e216:	f7f2 fc69 	bl	8000aec <__aeabi_dcmplt>
 800e21a:	b110      	cbz	r0, 800e222 <_printf_float+0x86>
 800e21c:	232d      	movs	r3, #45	@ 0x2d
 800e21e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e222:	4a91      	ldr	r2, [pc, #580]	@ (800e468 <_printf_float+0x2cc>)
 800e224:	4b91      	ldr	r3, [pc, #580]	@ (800e46c <_printf_float+0x2d0>)
 800e226:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e22a:	bf8c      	ite	hi
 800e22c:	4690      	movhi	r8, r2
 800e22e:	4698      	movls	r8, r3
 800e230:	2303      	movs	r3, #3
 800e232:	6123      	str	r3, [r4, #16]
 800e234:	f02b 0304 	bic.w	r3, fp, #4
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	f04f 0900 	mov.w	r9, #0
 800e23e:	9700      	str	r7, [sp, #0]
 800e240:	4633      	mov	r3, r6
 800e242:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e244:	4621      	mov	r1, r4
 800e246:	4628      	mov	r0, r5
 800e248:	f000 f9d2 	bl	800e5f0 <_printf_common>
 800e24c:	3001      	adds	r0, #1
 800e24e:	f040 808d 	bne.w	800e36c <_printf_float+0x1d0>
 800e252:	f04f 30ff 	mov.w	r0, #4294967295
 800e256:	b00d      	add	sp, #52	@ 0x34
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	4642      	mov	r2, r8
 800e25e:	464b      	mov	r3, r9
 800e260:	4640      	mov	r0, r8
 800e262:	4649      	mov	r1, r9
 800e264:	f7f2 fc6a 	bl	8000b3c <__aeabi_dcmpun>
 800e268:	b140      	cbz	r0, 800e27c <_printf_float+0xe0>
 800e26a:	464b      	mov	r3, r9
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	bfbc      	itt	lt
 800e270:	232d      	movlt	r3, #45	@ 0x2d
 800e272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e276:	4a7e      	ldr	r2, [pc, #504]	@ (800e470 <_printf_float+0x2d4>)
 800e278:	4b7e      	ldr	r3, [pc, #504]	@ (800e474 <_printf_float+0x2d8>)
 800e27a:	e7d4      	b.n	800e226 <_printf_float+0x8a>
 800e27c:	6863      	ldr	r3, [r4, #4]
 800e27e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e282:	9206      	str	r2, [sp, #24]
 800e284:	1c5a      	adds	r2, r3, #1
 800e286:	d13b      	bne.n	800e300 <_printf_float+0x164>
 800e288:	2306      	movs	r3, #6
 800e28a:	6063      	str	r3, [r4, #4]
 800e28c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e290:	2300      	movs	r3, #0
 800e292:	6022      	str	r2, [r4, #0]
 800e294:	9303      	str	r3, [sp, #12]
 800e296:	ab0a      	add	r3, sp, #40	@ 0x28
 800e298:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e29c:	ab09      	add	r3, sp, #36	@ 0x24
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	6861      	ldr	r1, [r4, #4]
 800e2a2:	ec49 8b10 	vmov	d0, r8, r9
 800e2a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	f7ff fed6 	bl	800e05c <__cvt>
 800e2b0:	9b06      	ldr	r3, [sp, #24]
 800e2b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2b4:	2b47      	cmp	r3, #71	@ 0x47
 800e2b6:	4680      	mov	r8, r0
 800e2b8:	d129      	bne.n	800e30e <_printf_float+0x172>
 800e2ba:	1cc8      	adds	r0, r1, #3
 800e2bc:	db02      	blt.n	800e2c4 <_printf_float+0x128>
 800e2be:	6863      	ldr	r3, [r4, #4]
 800e2c0:	4299      	cmp	r1, r3
 800e2c2:	dd41      	ble.n	800e348 <_printf_float+0x1ac>
 800e2c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e2c8:	fa5f fa8a 	uxtb.w	sl, sl
 800e2cc:	3901      	subs	r1, #1
 800e2ce:	4652      	mov	r2, sl
 800e2d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e2d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e2d6:	f7ff ff26 	bl	800e126 <__exponent>
 800e2da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2dc:	1813      	adds	r3, r2, r0
 800e2de:	2a01      	cmp	r2, #1
 800e2e0:	4681      	mov	r9, r0
 800e2e2:	6123      	str	r3, [r4, #16]
 800e2e4:	dc02      	bgt.n	800e2ec <_printf_float+0x150>
 800e2e6:	6822      	ldr	r2, [r4, #0]
 800e2e8:	07d2      	lsls	r2, r2, #31
 800e2ea:	d501      	bpl.n	800e2f0 <_printf_float+0x154>
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	6123      	str	r3, [r4, #16]
 800e2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d0a2      	beq.n	800e23e <_printf_float+0xa2>
 800e2f8:	232d      	movs	r3, #45	@ 0x2d
 800e2fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2fe:	e79e      	b.n	800e23e <_printf_float+0xa2>
 800e300:	9a06      	ldr	r2, [sp, #24]
 800e302:	2a47      	cmp	r2, #71	@ 0x47
 800e304:	d1c2      	bne.n	800e28c <_printf_float+0xf0>
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1c0      	bne.n	800e28c <_printf_float+0xf0>
 800e30a:	2301      	movs	r3, #1
 800e30c:	e7bd      	b.n	800e28a <_printf_float+0xee>
 800e30e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e312:	d9db      	bls.n	800e2cc <_printf_float+0x130>
 800e314:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e318:	d118      	bne.n	800e34c <_printf_float+0x1b0>
 800e31a:	2900      	cmp	r1, #0
 800e31c:	6863      	ldr	r3, [r4, #4]
 800e31e:	dd0b      	ble.n	800e338 <_printf_float+0x19c>
 800e320:	6121      	str	r1, [r4, #16]
 800e322:	b913      	cbnz	r3, 800e32a <_printf_float+0x18e>
 800e324:	6822      	ldr	r2, [r4, #0]
 800e326:	07d0      	lsls	r0, r2, #31
 800e328:	d502      	bpl.n	800e330 <_printf_float+0x194>
 800e32a:	3301      	adds	r3, #1
 800e32c:	440b      	add	r3, r1
 800e32e:	6123      	str	r3, [r4, #16]
 800e330:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e332:	f04f 0900 	mov.w	r9, #0
 800e336:	e7db      	b.n	800e2f0 <_printf_float+0x154>
 800e338:	b913      	cbnz	r3, 800e340 <_printf_float+0x1a4>
 800e33a:	6822      	ldr	r2, [r4, #0]
 800e33c:	07d2      	lsls	r2, r2, #31
 800e33e:	d501      	bpl.n	800e344 <_printf_float+0x1a8>
 800e340:	3302      	adds	r3, #2
 800e342:	e7f4      	b.n	800e32e <_printf_float+0x192>
 800e344:	2301      	movs	r3, #1
 800e346:	e7f2      	b.n	800e32e <_printf_float+0x192>
 800e348:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e34e:	4299      	cmp	r1, r3
 800e350:	db05      	blt.n	800e35e <_printf_float+0x1c2>
 800e352:	6823      	ldr	r3, [r4, #0]
 800e354:	6121      	str	r1, [r4, #16]
 800e356:	07d8      	lsls	r0, r3, #31
 800e358:	d5ea      	bpl.n	800e330 <_printf_float+0x194>
 800e35a:	1c4b      	adds	r3, r1, #1
 800e35c:	e7e7      	b.n	800e32e <_printf_float+0x192>
 800e35e:	2900      	cmp	r1, #0
 800e360:	bfd4      	ite	le
 800e362:	f1c1 0202 	rsble	r2, r1, #2
 800e366:	2201      	movgt	r2, #1
 800e368:	4413      	add	r3, r2
 800e36a:	e7e0      	b.n	800e32e <_printf_float+0x192>
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	055a      	lsls	r2, r3, #21
 800e370:	d407      	bmi.n	800e382 <_printf_float+0x1e6>
 800e372:	6923      	ldr	r3, [r4, #16]
 800e374:	4642      	mov	r2, r8
 800e376:	4631      	mov	r1, r6
 800e378:	4628      	mov	r0, r5
 800e37a:	47b8      	blx	r7
 800e37c:	3001      	adds	r0, #1
 800e37e:	d12b      	bne.n	800e3d8 <_printf_float+0x23c>
 800e380:	e767      	b.n	800e252 <_printf_float+0xb6>
 800e382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e386:	f240 80dd 	bls.w	800e544 <_printf_float+0x3a8>
 800e38a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e38e:	2200      	movs	r2, #0
 800e390:	2300      	movs	r3, #0
 800e392:	f7f2 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 800e396:	2800      	cmp	r0, #0
 800e398:	d033      	beq.n	800e402 <_printf_float+0x266>
 800e39a:	4a37      	ldr	r2, [pc, #220]	@ (800e478 <_printf_float+0x2dc>)
 800e39c:	2301      	movs	r3, #1
 800e39e:	4631      	mov	r1, r6
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	47b8      	blx	r7
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	f43f af54 	beq.w	800e252 <_printf_float+0xb6>
 800e3aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e3ae:	4543      	cmp	r3, r8
 800e3b0:	db02      	blt.n	800e3b8 <_printf_float+0x21c>
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	07d8      	lsls	r0, r3, #31
 800e3b6:	d50f      	bpl.n	800e3d8 <_printf_float+0x23c>
 800e3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4628      	mov	r0, r5
 800e3c0:	47b8      	blx	r7
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	f43f af45 	beq.w	800e252 <_printf_float+0xb6>
 800e3c8:	f04f 0900 	mov.w	r9, #0
 800e3cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3d0:	f104 0a1a 	add.w	sl, r4, #26
 800e3d4:	45c8      	cmp	r8, r9
 800e3d6:	dc09      	bgt.n	800e3ec <_printf_float+0x250>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	079b      	lsls	r3, r3, #30
 800e3dc:	f100 8103 	bmi.w	800e5e6 <_printf_float+0x44a>
 800e3e0:	68e0      	ldr	r0, [r4, #12]
 800e3e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3e4:	4298      	cmp	r0, r3
 800e3e6:	bfb8      	it	lt
 800e3e8:	4618      	movlt	r0, r3
 800e3ea:	e734      	b.n	800e256 <_printf_float+0xba>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	4652      	mov	r2, sl
 800e3f0:	4631      	mov	r1, r6
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47b8      	blx	r7
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	f43f af2b 	beq.w	800e252 <_printf_float+0xb6>
 800e3fc:	f109 0901 	add.w	r9, r9, #1
 800e400:	e7e8      	b.n	800e3d4 <_printf_float+0x238>
 800e402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e404:	2b00      	cmp	r3, #0
 800e406:	dc39      	bgt.n	800e47c <_printf_float+0x2e0>
 800e408:	4a1b      	ldr	r2, [pc, #108]	@ (800e478 <_printf_float+0x2dc>)
 800e40a:	2301      	movs	r3, #1
 800e40c:	4631      	mov	r1, r6
 800e40e:	4628      	mov	r0, r5
 800e410:	47b8      	blx	r7
 800e412:	3001      	adds	r0, #1
 800e414:	f43f af1d 	beq.w	800e252 <_printf_float+0xb6>
 800e418:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e41c:	ea59 0303 	orrs.w	r3, r9, r3
 800e420:	d102      	bne.n	800e428 <_printf_float+0x28c>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	07d9      	lsls	r1, r3, #31
 800e426:	d5d7      	bpl.n	800e3d8 <_printf_float+0x23c>
 800e428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e42c:	4631      	mov	r1, r6
 800e42e:	4628      	mov	r0, r5
 800e430:	47b8      	blx	r7
 800e432:	3001      	adds	r0, #1
 800e434:	f43f af0d 	beq.w	800e252 <_printf_float+0xb6>
 800e438:	f04f 0a00 	mov.w	sl, #0
 800e43c:	f104 0b1a 	add.w	fp, r4, #26
 800e440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e442:	425b      	negs	r3, r3
 800e444:	4553      	cmp	r3, sl
 800e446:	dc01      	bgt.n	800e44c <_printf_float+0x2b0>
 800e448:	464b      	mov	r3, r9
 800e44a:	e793      	b.n	800e374 <_printf_float+0x1d8>
 800e44c:	2301      	movs	r3, #1
 800e44e:	465a      	mov	r2, fp
 800e450:	4631      	mov	r1, r6
 800e452:	4628      	mov	r0, r5
 800e454:	47b8      	blx	r7
 800e456:	3001      	adds	r0, #1
 800e458:	f43f aefb 	beq.w	800e252 <_printf_float+0xb6>
 800e45c:	f10a 0a01 	add.w	sl, sl, #1
 800e460:	e7ee      	b.n	800e440 <_printf_float+0x2a4>
 800e462:	bf00      	nop
 800e464:	7fefffff 	.word	0x7fefffff
 800e468:	0801264c 	.word	0x0801264c
 800e46c:	08012648 	.word	0x08012648
 800e470:	08012654 	.word	0x08012654
 800e474:	08012650 	.word	0x08012650
 800e478:	08012658 	.word	0x08012658
 800e47c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e47e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e482:	4553      	cmp	r3, sl
 800e484:	bfa8      	it	ge
 800e486:	4653      	movge	r3, sl
 800e488:	2b00      	cmp	r3, #0
 800e48a:	4699      	mov	r9, r3
 800e48c:	dc36      	bgt.n	800e4fc <_printf_float+0x360>
 800e48e:	f04f 0b00 	mov.w	fp, #0
 800e492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e496:	f104 021a 	add.w	r2, r4, #26
 800e49a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e49c:	9306      	str	r3, [sp, #24]
 800e49e:	eba3 0309 	sub.w	r3, r3, r9
 800e4a2:	455b      	cmp	r3, fp
 800e4a4:	dc31      	bgt.n	800e50a <_printf_float+0x36e>
 800e4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a8:	459a      	cmp	sl, r3
 800e4aa:	dc3a      	bgt.n	800e522 <_printf_float+0x386>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	07da      	lsls	r2, r3, #31
 800e4b0:	d437      	bmi.n	800e522 <_printf_float+0x386>
 800e4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4b4:	ebaa 0903 	sub.w	r9, sl, r3
 800e4b8:	9b06      	ldr	r3, [sp, #24]
 800e4ba:	ebaa 0303 	sub.w	r3, sl, r3
 800e4be:	4599      	cmp	r9, r3
 800e4c0:	bfa8      	it	ge
 800e4c2:	4699      	movge	r9, r3
 800e4c4:	f1b9 0f00 	cmp.w	r9, #0
 800e4c8:	dc33      	bgt.n	800e532 <_printf_float+0x396>
 800e4ca:	f04f 0800 	mov.w	r8, #0
 800e4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4d2:	f104 0b1a 	add.w	fp, r4, #26
 800e4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d8:	ebaa 0303 	sub.w	r3, sl, r3
 800e4dc:	eba3 0309 	sub.w	r3, r3, r9
 800e4e0:	4543      	cmp	r3, r8
 800e4e2:	f77f af79 	ble.w	800e3d8 <_printf_float+0x23c>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	465a      	mov	r2, fp
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	47b8      	blx	r7
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	f43f aeae 	beq.w	800e252 <_printf_float+0xb6>
 800e4f6:	f108 0801 	add.w	r8, r8, #1
 800e4fa:	e7ec      	b.n	800e4d6 <_printf_float+0x33a>
 800e4fc:	4642      	mov	r2, r8
 800e4fe:	4631      	mov	r1, r6
 800e500:	4628      	mov	r0, r5
 800e502:	47b8      	blx	r7
 800e504:	3001      	adds	r0, #1
 800e506:	d1c2      	bne.n	800e48e <_printf_float+0x2f2>
 800e508:	e6a3      	b.n	800e252 <_printf_float+0xb6>
 800e50a:	2301      	movs	r3, #1
 800e50c:	4631      	mov	r1, r6
 800e50e:	4628      	mov	r0, r5
 800e510:	9206      	str	r2, [sp, #24]
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	f43f ae9c 	beq.w	800e252 <_printf_float+0xb6>
 800e51a:	9a06      	ldr	r2, [sp, #24]
 800e51c:	f10b 0b01 	add.w	fp, fp, #1
 800e520:	e7bb      	b.n	800e49a <_printf_float+0x2fe>
 800e522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e526:	4631      	mov	r1, r6
 800e528:	4628      	mov	r0, r5
 800e52a:	47b8      	blx	r7
 800e52c:	3001      	adds	r0, #1
 800e52e:	d1c0      	bne.n	800e4b2 <_printf_float+0x316>
 800e530:	e68f      	b.n	800e252 <_printf_float+0xb6>
 800e532:	9a06      	ldr	r2, [sp, #24]
 800e534:	464b      	mov	r3, r9
 800e536:	4442      	add	r2, r8
 800e538:	4631      	mov	r1, r6
 800e53a:	4628      	mov	r0, r5
 800e53c:	47b8      	blx	r7
 800e53e:	3001      	adds	r0, #1
 800e540:	d1c3      	bne.n	800e4ca <_printf_float+0x32e>
 800e542:	e686      	b.n	800e252 <_printf_float+0xb6>
 800e544:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e548:	f1ba 0f01 	cmp.w	sl, #1
 800e54c:	dc01      	bgt.n	800e552 <_printf_float+0x3b6>
 800e54e:	07db      	lsls	r3, r3, #31
 800e550:	d536      	bpl.n	800e5c0 <_printf_float+0x424>
 800e552:	2301      	movs	r3, #1
 800e554:	4642      	mov	r2, r8
 800e556:	4631      	mov	r1, r6
 800e558:	4628      	mov	r0, r5
 800e55a:	47b8      	blx	r7
 800e55c:	3001      	adds	r0, #1
 800e55e:	f43f ae78 	beq.w	800e252 <_printf_float+0xb6>
 800e562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e566:	4631      	mov	r1, r6
 800e568:	4628      	mov	r0, r5
 800e56a:	47b8      	blx	r7
 800e56c:	3001      	adds	r0, #1
 800e56e:	f43f ae70 	beq.w	800e252 <_printf_float+0xb6>
 800e572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e576:	2200      	movs	r2, #0
 800e578:	2300      	movs	r3, #0
 800e57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e57e:	f7f2 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 800e582:	b9c0      	cbnz	r0, 800e5b6 <_printf_float+0x41a>
 800e584:	4653      	mov	r3, sl
 800e586:	f108 0201 	add.w	r2, r8, #1
 800e58a:	4631      	mov	r1, r6
 800e58c:	4628      	mov	r0, r5
 800e58e:	47b8      	blx	r7
 800e590:	3001      	adds	r0, #1
 800e592:	d10c      	bne.n	800e5ae <_printf_float+0x412>
 800e594:	e65d      	b.n	800e252 <_printf_float+0xb6>
 800e596:	2301      	movs	r3, #1
 800e598:	465a      	mov	r2, fp
 800e59a:	4631      	mov	r1, r6
 800e59c:	4628      	mov	r0, r5
 800e59e:	47b8      	blx	r7
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	f43f ae56 	beq.w	800e252 <_printf_float+0xb6>
 800e5a6:	f108 0801 	add.w	r8, r8, #1
 800e5aa:	45d0      	cmp	r8, sl
 800e5ac:	dbf3      	blt.n	800e596 <_printf_float+0x3fa>
 800e5ae:	464b      	mov	r3, r9
 800e5b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e5b4:	e6df      	b.n	800e376 <_printf_float+0x1da>
 800e5b6:	f04f 0800 	mov.w	r8, #0
 800e5ba:	f104 0b1a 	add.w	fp, r4, #26
 800e5be:	e7f4      	b.n	800e5aa <_printf_float+0x40e>
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	4642      	mov	r2, r8
 800e5c4:	e7e1      	b.n	800e58a <_printf_float+0x3ee>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	464a      	mov	r2, r9
 800e5ca:	4631      	mov	r1, r6
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	47b8      	blx	r7
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	f43f ae3e 	beq.w	800e252 <_printf_float+0xb6>
 800e5d6:	f108 0801 	add.w	r8, r8, #1
 800e5da:	68e3      	ldr	r3, [r4, #12]
 800e5dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5de:	1a5b      	subs	r3, r3, r1
 800e5e0:	4543      	cmp	r3, r8
 800e5e2:	dcf0      	bgt.n	800e5c6 <_printf_float+0x42a>
 800e5e4:	e6fc      	b.n	800e3e0 <_printf_float+0x244>
 800e5e6:	f04f 0800 	mov.w	r8, #0
 800e5ea:	f104 0919 	add.w	r9, r4, #25
 800e5ee:	e7f4      	b.n	800e5da <_printf_float+0x43e>

0800e5f0 <_printf_common>:
 800e5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5f4:	4616      	mov	r6, r2
 800e5f6:	4698      	mov	r8, r3
 800e5f8:	688a      	ldr	r2, [r1, #8]
 800e5fa:	690b      	ldr	r3, [r1, #16]
 800e5fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e600:	4293      	cmp	r3, r2
 800e602:	bfb8      	it	lt
 800e604:	4613      	movlt	r3, r2
 800e606:	6033      	str	r3, [r6, #0]
 800e608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e60c:	4607      	mov	r7, r0
 800e60e:	460c      	mov	r4, r1
 800e610:	b10a      	cbz	r2, 800e616 <_printf_common+0x26>
 800e612:	3301      	adds	r3, #1
 800e614:	6033      	str	r3, [r6, #0]
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	0699      	lsls	r1, r3, #26
 800e61a:	bf42      	ittt	mi
 800e61c:	6833      	ldrmi	r3, [r6, #0]
 800e61e:	3302      	addmi	r3, #2
 800e620:	6033      	strmi	r3, [r6, #0]
 800e622:	6825      	ldr	r5, [r4, #0]
 800e624:	f015 0506 	ands.w	r5, r5, #6
 800e628:	d106      	bne.n	800e638 <_printf_common+0x48>
 800e62a:	f104 0a19 	add.w	sl, r4, #25
 800e62e:	68e3      	ldr	r3, [r4, #12]
 800e630:	6832      	ldr	r2, [r6, #0]
 800e632:	1a9b      	subs	r3, r3, r2
 800e634:	42ab      	cmp	r3, r5
 800e636:	dc26      	bgt.n	800e686 <_printf_common+0x96>
 800e638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e63c:	6822      	ldr	r2, [r4, #0]
 800e63e:	3b00      	subs	r3, #0
 800e640:	bf18      	it	ne
 800e642:	2301      	movne	r3, #1
 800e644:	0692      	lsls	r2, r2, #26
 800e646:	d42b      	bmi.n	800e6a0 <_printf_common+0xb0>
 800e648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e64c:	4641      	mov	r1, r8
 800e64e:	4638      	mov	r0, r7
 800e650:	47c8      	blx	r9
 800e652:	3001      	adds	r0, #1
 800e654:	d01e      	beq.n	800e694 <_printf_common+0xa4>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	6922      	ldr	r2, [r4, #16]
 800e65a:	f003 0306 	and.w	r3, r3, #6
 800e65e:	2b04      	cmp	r3, #4
 800e660:	bf02      	ittt	eq
 800e662:	68e5      	ldreq	r5, [r4, #12]
 800e664:	6833      	ldreq	r3, [r6, #0]
 800e666:	1aed      	subeq	r5, r5, r3
 800e668:	68a3      	ldr	r3, [r4, #8]
 800e66a:	bf0c      	ite	eq
 800e66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e670:	2500      	movne	r5, #0
 800e672:	4293      	cmp	r3, r2
 800e674:	bfc4      	itt	gt
 800e676:	1a9b      	subgt	r3, r3, r2
 800e678:	18ed      	addgt	r5, r5, r3
 800e67a:	2600      	movs	r6, #0
 800e67c:	341a      	adds	r4, #26
 800e67e:	42b5      	cmp	r5, r6
 800e680:	d11a      	bne.n	800e6b8 <_printf_common+0xc8>
 800e682:	2000      	movs	r0, #0
 800e684:	e008      	b.n	800e698 <_printf_common+0xa8>
 800e686:	2301      	movs	r3, #1
 800e688:	4652      	mov	r2, sl
 800e68a:	4641      	mov	r1, r8
 800e68c:	4638      	mov	r0, r7
 800e68e:	47c8      	blx	r9
 800e690:	3001      	adds	r0, #1
 800e692:	d103      	bne.n	800e69c <_printf_common+0xac>
 800e694:	f04f 30ff 	mov.w	r0, #4294967295
 800e698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e69c:	3501      	adds	r5, #1
 800e69e:	e7c6      	b.n	800e62e <_printf_common+0x3e>
 800e6a0:	18e1      	adds	r1, r4, r3
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	2030      	movs	r0, #48	@ 0x30
 800e6a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6aa:	4422      	add	r2, r4
 800e6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6b4:	3302      	adds	r3, #2
 800e6b6:	e7c7      	b.n	800e648 <_printf_common+0x58>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	4641      	mov	r1, r8
 800e6be:	4638      	mov	r0, r7
 800e6c0:	47c8      	blx	r9
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d0e6      	beq.n	800e694 <_printf_common+0xa4>
 800e6c6:	3601      	adds	r6, #1
 800e6c8:	e7d9      	b.n	800e67e <_printf_common+0x8e>
	...

0800e6cc <_printf_i>:
 800e6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d0:	7e0f      	ldrb	r7, [r1, #24]
 800e6d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6d4:	2f78      	cmp	r7, #120	@ 0x78
 800e6d6:	4691      	mov	r9, r2
 800e6d8:	4680      	mov	r8, r0
 800e6da:	460c      	mov	r4, r1
 800e6dc:	469a      	mov	sl, r3
 800e6de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e6e2:	d807      	bhi.n	800e6f4 <_printf_i+0x28>
 800e6e4:	2f62      	cmp	r7, #98	@ 0x62
 800e6e6:	d80a      	bhi.n	800e6fe <_printf_i+0x32>
 800e6e8:	2f00      	cmp	r7, #0
 800e6ea:	f000 80d1 	beq.w	800e890 <_printf_i+0x1c4>
 800e6ee:	2f58      	cmp	r7, #88	@ 0x58
 800e6f0:	f000 80b8 	beq.w	800e864 <_printf_i+0x198>
 800e6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6fc:	e03a      	b.n	800e774 <_printf_i+0xa8>
 800e6fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e702:	2b15      	cmp	r3, #21
 800e704:	d8f6      	bhi.n	800e6f4 <_printf_i+0x28>
 800e706:	a101      	add	r1, pc, #4	@ (adr r1, 800e70c <_printf_i+0x40>)
 800e708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e70c:	0800e765 	.word	0x0800e765
 800e710:	0800e779 	.word	0x0800e779
 800e714:	0800e6f5 	.word	0x0800e6f5
 800e718:	0800e6f5 	.word	0x0800e6f5
 800e71c:	0800e6f5 	.word	0x0800e6f5
 800e720:	0800e6f5 	.word	0x0800e6f5
 800e724:	0800e779 	.word	0x0800e779
 800e728:	0800e6f5 	.word	0x0800e6f5
 800e72c:	0800e6f5 	.word	0x0800e6f5
 800e730:	0800e6f5 	.word	0x0800e6f5
 800e734:	0800e6f5 	.word	0x0800e6f5
 800e738:	0800e877 	.word	0x0800e877
 800e73c:	0800e7a3 	.word	0x0800e7a3
 800e740:	0800e831 	.word	0x0800e831
 800e744:	0800e6f5 	.word	0x0800e6f5
 800e748:	0800e6f5 	.word	0x0800e6f5
 800e74c:	0800e899 	.word	0x0800e899
 800e750:	0800e6f5 	.word	0x0800e6f5
 800e754:	0800e7a3 	.word	0x0800e7a3
 800e758:	0800e6f5 	.word	0x0800e6f5
 800e75c:	0800e6f5 	.word	0x0800e6f5
 800e760:	0800e839 	.word	0x0800e839
 800e764:	6833      	ldr	r3, [r6, #0]
 800e766:	1d1a      	adds	r2, r3, #4
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6032      	str	r2, [r6, #0]
 800e76c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e774:	2301      	movs	r3, #1
 800e776:	e09c      	b.n	800e8b2 <_printf_i+0x1e6>
 800e778:	6833      	ldr	r3, [r6, #0]
 800e77a:	6820      	ldr	r0, [r4, #0]
 800e77c:	1d19      	adds	r1, r3, #4
 800e77e:	6031      	str	r1, [r6, #0]
 800e780:	0606      	lsls	r6, r0, #24
 800e782:	d501      	bpl.n	800e788 <_printf_i+0xbc>
 800e784:	681d      	ldr	r5, [r3, #0]
 800e786:	e003      	b.n	800e790 <_printf_i+0xc4>
 800e788:	0645      	lsls	r5, r0, #25
 800e78a:	d5fb      	bpl.n	800e784 <_printf_i+0xb8>
 800e78c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e790:	2d00      	cmp	r5, #0
 800e792:	da03      	bge.n	800e79c <_printf_i+0xd0>
 800e794:	232d      	movs	r3, #45	@ 0x2d
 800e796:	426d      	negs	r5, r5
 800e798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e79c:	4858      	ldr	r0, [pc, #352]	@ (800e900 <_printf_i+0x234>)
 800e79e:	230a      	movs	r3, #10
 800e7a0:	e011      	b.n	800e7c6 <_printf_i+0xfa>
 800e7a2:	6821      	ldr	r1, [r4, #0]
 800e7a4:	6833      	ldr	r3, [r6, #0]
 800e7a6:	0608      	lsls	r0, r1, #24
 800e7a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7ac:	d402      	bmi.n	800e7b4 <_printf_i+0xe8>
 800e7ae:	0649      	lsls	r1, r1, #25
 800e7b0:	bf48      	it	mi
 800e7b2:	b2ad      	uxthmi	r5, r5
 800e7b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7b6:	4852      	ldr	r0, [pc, #328]	@ (800e900 <_printf_i+0x234>)
 800e7b8:	6033      	str	r3, [r6, #0]
 800e7ba:	bf14      	ite	ne
 800e7bc:	230a      	movne	r3, #10
 800e7be:	2308      	moveq	r3, #8
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e7c6:	6866      	ldr	r6, [r4, #4]
 800e7c8:	60a6      	str	r6, [r4, #8]
 800e7ca:	2e00      	cmp	r6, #0
 800e7cc:	db05      	blt.n	800e7da <_printf_i+0x10e>
 800e7ce:	6821      	ldr	r1, [r4, #0]
 800e7d0:	432e      	orrs	r6, r5
 800e7d2:	f021 0104 	bic.w	r1, r1, #4
 800e7d6:	6021      	str	r1, [r4, #0]
 800e7d8:	d04b      	beq.n	800e872 <_printf_i+0x1a6>
 800e7da:	4616      	mov	r6, r2
 800e7dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7e0:	fb03 5711 	mls	r7, r3, r1, r5
 800e7e4:	5dc7      	ldrb	r7, [r0, r7]
 800e7e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7ea:	462f      	mov	r7, r5
 800e7ec:	42bb      	cmp	r3, r7
 800e7ee:	460d      	mov	r5, r1
 800e7f0:	d9f4      	bls.n	800e7dc <_printf_i+0x110>
 800e7f2:	2b08      	cmp	r3, #8
 800e7f4:	d10b      	bne.n	800e80e <_printf_i+0x142>
 800e7f6:	6823      	ldr	r3, [r4, #0]
 800e7f8:	07df      	lsls	r7, r3, #31
 800e7fa:	d508      	bpl.n	800e80e <_printf_i+0x142>
 800e7fc:	6923      	ldr	r3, [r4, #16]
 800e7fe:	6861      	ldr	r1, [r4, #4]
 800e800:	4299      	cmp	r1, r3
 800e802:	bfde      	ittt	le
 800e804:	2330      	movle	r3, #48	@ 0x30
 800e806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e80a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e80e:	1b92      	subs	r2, r2, r6
 800e810:	6122      	str	r2, [r4, #16]
 800e812:	f8cd a000 	str.w	sl, [sp]
 800e816:	464b      	mov	r3, r9
 800e818:	aa03      	add	r2, sp, #12
 800e81a:	4621      	mov	r1, r4
 800e81c:	4640      	mov	r0, r8
 800e81e:	f7ff fee7 	bl	800e5f0 <_printf_common>
 800e822:	3001      	adds	r0, #1
 800e824:	d14a      	bne.n	800e8bc <_printf_i+0x1f0>
 800e826:	f04f 30ff 	mov.w	r0, #4294967295
 800e82a:	b004      	add	sp, #16
 800e82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e830:	6823      	ldr	r3, [r4, #0]
 800e832:	f043 0320 	orr.w	r3, r3, #32
 800e836:	6023      	str	r3, [r4, #0]
 800e838:	4832      	ldr	r0, [pc, #200]	@ (800e904 <_printf_i+0x238>)
 800e83a:	2778      	movs	r7, #120	@ 0x78
 800e83c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e840:	6823      	ldr	r3, [r4, #0]
 800e842:	6831      	ldr	r1, [r6, #0]
 800e844:	061f      	lsls	r7, r3, #24
 800e846:	f851 5b04 	ldr.w	r5, [r1], #4
 800e84a:	d402      	bmi.n	800e852 <_printf_i+0x186>
 800e84c:	065f      	lsls	r7, r3, #25
 800e84e:	bf48      	it	mi
 800e850:	b2ad      	uxthmi	r5, r5
 800e852:	6031      	str	r1, [r6, #0]
 800e854:	07d9      	lsls	r1, r3, #31
 800e856:	bf44      	itt	mi
 800e858:	f043 0320 	orrmi.w	r3, r3, #32
 800e85c:	6023      	strmi	r3, [r4, #0]
 800e85e:	b11d      	cbz	r5, 800e868 <_printf_i+0x19c>
 800e860:	2310      	movs	r3, #16
 800e862:	e7ad      	b.n	800e7c0 <_printf_i+0xf4>
 800e864:	4826      	ldr	r0, [pc, #152]	@ (800e900 <_printf_i+0x234>)
 800e866:	e7e9      	b.n	800e83c <_printf_i+0x170>
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	f023 0320 	bic.w	r3, r3, #32
 800e86e:	6023      	str	r3, [r4, #0]
 800e870:	e7f6      	b.n	800e860 <_printf_i+0x194>
 800e872:	4616      	mov	r6, r2
 800e874:	e7bd      	b.n	800e7f2 <_printf_i+0x126>
 800e876:	6833      	ldr	r3, [r6, #0]
 800e878:	6825      	ldr	r5, [r4, #0]
 800e87a:	6961      	ldr	r1, [r4, #20]
 800e87c:	1d18      	adds	r0, r3, #4
 800e87e:	6030      	str	r0, [r6, #0]
 800e880:	062e      	lsls	r6, r5, #24
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	d501      	bpl.n	800e88a <_printf_i+0x1be>
 800e886:	6019      	str	r1, [r3, #0]
 800e888:	e002      	b.n	800e890 <_printf_i+0x1c4>
 800e88a:	0668      	lsls	r0, r5, #25
 800e88c:	d5fb      	bpl.n	800e886 <_printf_i+0x1ba>
 800e88e:	8019      	strh	r1, [r3, #0]
 800e890:	2300      	movs	r3, #0
 800e892:	6123      	str	r3, [r4, #16]
 800e894:	4616      	mov	r6, r2
 800e896:	e7bc      	b.n	800e812 <_printf_i+0x146>
 800e898:	6833      	ldr	r3, [r6, #0]
 800e89a:	1d1a      	adds	r2, r3, #4
 800e89c:	6032      	str	r2, [r6, #0]
 800e89e:	681e      	ldr	r6, [r3, #0]
 800e8a0:	6862      	ldr	r2, [r4, #4]
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f7f1 fc9b 	bl	80001e0 <memchr>
 800e8aa:	b108      	cbz	r0, 800e8b0 <_printf_i+0x1e4>
 800e8ac:	1b80      	subs	r0, r0, r6
 800e8ae:	6060      	str	r0, [r4, #4]
 800e8b0:	6863      	ldr	r3, [r4, #4]
 800e8b2:	6123      	str	r3, [r4, #16]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8ba:	e7aa      	b.n	800e812 <_printf_i+0x146>
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	4632      	mov	r2, r6
 800e8c0:	4649      	mov	r1, r9
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	47d0      	blx	sl
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	d0ad      	beq.n	800e826 <_printf_i+0x15a>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	079b      	lsls	r3, r3, #30
 800e8ce:	d413      	bmi.n	800e8f8 <_printf_i+0x22c>
 800e8d0:	68e0      	ldr	r0, [r4, #12]
 800e8d2:	9b03      	ldr	r3, [sp, #12]
 800e8d4:	4298      	cmp	r0, r3
 800e8d6:	bfb8      	it	lt
 800e8d8:	4618      	movlt	r0, r3
 800e8da:	e7a6      	b.n	800e82a <_printf_i+0x15e>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	4632      	mov	r2, r6
 800e8e0:	4649      	mov	r1, r9
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	47d0      	blx	sl
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	d09d      	beq.n	800e826 <_printf_i+0x15a>
 800e8ea:	3501      	adds	r5, #1
 800e8ec:	68e3      	ldr	r3, [r4, #12]
 800e8ee:	9903      	ldr	r1, [sp, #12]
 800e8f0:	1a5b      	subs	r3, r3, r1
 800e8f2:	42ab      	cmp	r3, r5
 800e8f4:	dcf2      	bgt.n	800e8dc <_printf_i+0x210>
 800e8f6:	e7eb      	b.n	800e8d0 <_printf_i+0x204>
 800e8f8:	2500      	movs	r5, #0
 800e8fa:	f104 0619 	add.w	r6, r4, #25
 800e8fe:	e7f5      	b.n	800e8ec <_printf_i+0x220>
 800e900:	0801265a 	.word	0x0801265a
 800e904:	0801266b 	.word	0x0801266b

0800e908 <_scanf_float>:
 800e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	b087      	sub	sp, #28
 800e90e:	4691      	mov	r9, r2
 800e910:	9303      	str	r3, [sp, #12]
 800e912:	688b      	ldr	r3, [r1, #8]
 800e914:	1e5a      	subs	r2, r3, #1
 800e916:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e91a:	bf81      	itttt	hi
 800e91c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e920:	eb03 0b05 	addhi.w	fp, r3, r5
 800e924:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e928:	608b      	strhi	r3, [r1, #8]
 800e92a:	680b      	ldr	r3, [r1, #0]
 800e92c:	460a      	mov	r2, r1
 800e92e:	f04f 0500 	mov.w	r5, #0
 800e932:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e936:	f842 3b1c 	str.w	r3, [r2], #28
 800e93a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e93e:	4680      	mov	r8, r0
 800e940:	460c      	mov	r4, r1
 800e942:	bf98      	it	ls
 800e944:	f04f 0b00 	movls.w	fp, #0
 800e948:	9201      	str	r2, [sp, #4]
 800e94a:	4616      	mov	r6, r2
 800e94c:	46aa      	mov	sl, r5
 800e94e:	462f      	mov	r7, r5
 800e950:	9502      	str	r5, [sp, #8]
 800e952:	68a2      	ldr	r2, [r4, #8]
 800e954:	b15a      	cbz	r2, 800e96e <_scanf_float+0x66>
 800e956:	f8d9 3000 	ldr.w	r3, [r9]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	2b4e      	cmp	r3, #78	@ 0x4e
 800e95e:	d863      	bhi.n	800ea28 <_scanf_float+0x120>
 800e960:	2b40      	cmp	r3, #64	@ 0x40
 800e962:	d83b      	bhi.n	800e9dc <_scanf_float+0xd4>
 800e964:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e968:	b2c8      	uxtb	r0, r1
 800e96a:	280e      	cmp	r0, #14
 800e96c:	d939      	bls.n	800e9e2 <_scanf_float+0xda>
 800e96e:	b11f      	cbz	r7, 800e978 <_scanf_float+0x70>
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e976:	6023      	str	r3, [r4, #0]
 800e978:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e97c:	f1ba 0f01 	cmp.w	sl, #1
 800e980:	f200 8114 	bhi.w	800ebac <_scanf_float+0x2a4>
 800e984:	9b01      	ldr	r3, [sp, #4]
 800e986:	429e      	cmp	r6, r3
 800e988:	f200 8105 	bhi.w	800eb96 <_scanf_float+0x28e>
 800e98c:	2001      	movs	r0, #1
 800e98e:	b007      	add	sp, #28
 800e990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e994:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e998:	2a0d      	cmp	r2, #13
 800e99a:	d8e8      	bhi.n	800e96e <_scanf_float+0x66>
 800e99c:	a101      	add	r1, pc, #4	@ (adr r1, 800e9a4 <_scanf_float+0x9c>)
 800e99e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e9a2:	bf00      	nop
 800e9a4:	0800eaed 	.word	0x0800eaed
 800e9a8:	0800e96f 	.word	0x0800e96f
 800e9ac:	0800e96f 	.word	0x0800e96f
 800e9b0:	0800e96f 	.word	0x0800e96f
 800e9b4:	0800eb49 	.word	0x0800eb49
 800e9b8:	0800eb23 	.word	0x0800eb23
 800e9bc:	0800e96f 	.word	0x0800e96f
 800e9c0:	0800e96f 	.word	0x0800e96f
 800e9c4:	0800eafb 	.word	0x0800eafb
 800e9c8:	0800e96f 	.word	0x0800e96f
 800e9cc:	0800e96f 	.word	0x0800e96f
 800e9d0:	0800e96f 	.word	0x0800e96f
 800e9d4:	0800e96f 	.word	0x0800e96f
 800e9d8:	0800eab7 	.word	0x0800eab7
 800e9dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e9e0:	e7da      	b.n	800e998 <_scanf_float+0x90>
 800e9e2:	290e      	cmp	r1, #14
 800e9e4:	d8c3      	bhi.n	800e96e <_scanf_float+0x66>
 800e9e6:	a001      	add	r0, pc, #4	@ (adr r0, 800e9ec <_scanf_float+0xe4>)
 800e9e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e9ec:	0800eaa7 	.word	0x0800eaa7
 800e9f0:	0800e96f 	.word	0x0800e96f
 800e9f4:	0800eaa7 	.word	0x0800eaa7
 800e9f8:	0800eb37 	.word	0x0800eb37
 800e9fc:	0800e96f 	.word	0x0800e96f
 800ea00:	0800ea49 	.word	0x0800ea49
 800ea04:	0800ea8d 	.word	0x0800ea8d
 800ea08:	0800ea8d 	.word	0x0800ea8d
 800ea0c:	0800ea8d 	.word	0x0800ea8d
 800ea10:	0800ea8d 	.word	0x0800ea8d
 800ea14:	0800ea8d 	.word	0x0800ea8d
 800ea18:	0800ea8d 	.word	0x0800ea8d
 800ea1c:	0800ea8d 	.word	0x0800ea8d
 800ea20:	0800ea8d 	.word	0x0800ea8d
 800ea24:	0800ea8d 	.word	0x0800ea8d
 800ea28:	2b6e      	cmp	r3, #110	@ 0x6e
 800ea2a:	d809      	bhi.n	800ea40 <_scanf_float+0x138>
 800ea2c:	2b60      	cmp	r3, #96	@ 0x60
 800ea2e:	d8b1      	bhi.n	800e994 <_scanf_float+0x8c>
 800ea30:	2b54      	cmp	r3, #84	@ 0x54
 800ea32:	d07b      	beq.n	800eb2c <_scanf_float+0x224>
 800ea34:	2b59      	cmp	r3, #89	@ 0x59
 800ea36:	d19a      	bne.n	800e96e <_scanf_float+0x66>
 800ea38:	2d07      	cmp	r5, #7
 800ea3a:	d198      	bne.n	800e96e <_scanf_float+0x66>
 800ea3c:	2508      	movs	r5, #8
 800ea3e:	e02f      	b.n	800eaa0 <_scanf_float+0x198>
 800ea40:	2b74      	cmp	r3, #116	@ 0x74
 800ea42:	d073      	beq.n	800eb2c <_scanf_float+0x224>
 800ea44:	2b79      	cmp	r3, #121	@ 0x79
 800ea46:	e7f6      	b.n	800ea36 <_scanf_float+0x12e>
 800ea48:	6821      	ldr	r1, [r4, #0]
 800ea4a:	05c8      	lsls	r0, r1, #23
 800ea4c:	d51e      	bpl.n	800ea8c <_scanf_float+0x184>
 800ea4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ea52:	6021      	str	r1, [r4, #0]
 800ea54:	3701      	adds	r7, #1
 800ea56:	f1bb 0f00 	cmp.w	fp, #0
 800ea5a:	d003      	beq.n	800ea64 <_scanf_float+0x15c>
 800ea5c:	3201      	adds	r2, #1
 800ea5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea62:	60a2      	str	r2, [r4, #8]
 800ea64:	68a3      	ldr	r3, [r4, #8]
 800ea66:	3b01      	subs	r3, #1
 800ea68:	60a3      	str	r3, [r4, #8]
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	6123      	str	r3, [r4, #16]
 800ea70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea74:	3b01      	subs	r3, #1
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f8c9 3004 	str.w	r3, [r9, #4]
 800ea7c:	f340 8082 	ble.w	800eb84 <_scanf_float+0x27c>
 800ea80:	f8d9 3000 	ldr.w	r3, [r9]
 800ea84:	3301      	adds	r3, #1
 800ea86:	f8c9 3000 	str.w	r3, [r9]
 800ea8a:	e762      	b.n	800e952 <_scanf_float+0x4a>
 800ea8c:	eb1a 0105 	adds.w	r1, sl, r5
 800ea90:	f47f af6d 	bne.w	800e96e <_scanf_float+0x66>
 800ea94:	6822      	ldr	r2, [r4, #0]
 800ea96:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ea9a:	6022      	str	r2, [r4, #0]
 800ea9c:	460d      	mov	r5, r1
 800ea9e:	468a      	mov	sl, r1
 800eaa0:	f806 3b01 	strb.w	r3, [r6], #1
 800eaa4:	e7de      	b.n	800ea64 <_scanf_float+0x15c>
 800eaa6:	6822      	ldr	r2, [r4, #0]
 800eaa8:	0610      	lsls	r0, r2, #24
 800eaaa:	f57f af60 	bpl.w	800e96e <_scanf_float+0x66>
 800eaae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eab2:	6022      	str	r2, [r4, #0]
 800eab4:	e7f4      	b.n	800eaa0 <_scanf_float+0x198>
 800eab6:	f1ba 0f00 	cmp.w	sl, #0
 800eaba:	d10c      	bne.n	800ead6 <_scanf_float+0x1ce>
 800eabc:	b977      	cbnz	r7, 800eadc <_scanf_float+0x1d4>
 800eabe:	6822      	ldr	r2, [r4, #0]
 800eac0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eac4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eac8:	d108      	bne.n	800eadc <_scanf_float+0x1d4>
 800eaca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eace:	6022      	str	r2, [r4, #0]
 800ead0:	f04f 0a01 	mov.w	sl, #1
 800ead4:	e7e4      	b.n	800eaa0 <_scanf_float+0x198>
 800ead6:	f1ba 0f02 	cmp.w	sl, #2
 800eada:	d050      	beq.n	800eb7e <_scanf_float+0x276>
 800eadc:	2d01      	cmp	r5, #1
 800eade:	d002      	beq.n	800eae6 <_scanf_float+0x1de>
 800eae0:	2d04      	cmp	r5, #4
 800eae2:	f47f af44 	bne.w	800e96e <_scanf_float+0x66>
 800eae6:	3501      	adds	r5, #1
 800eae8:	b2ed      	uxtb	r5, r5
 800eaea:	e7d9      	b.n	800eaa0 <_scanf_float+0x198>
 800eaec:	f1ba 0f01 	cmp.w	sl, #1
 800eaf0:	f47f af3d 	bne.w	800e96e <_scanf_float+0x66>
 800eaf4:	f04f 0a02 	mov.w	sl, #2
 800eaf8:	e7d2      	b.n	800eaa0 <_scanf_float+0x198>
 800eafa:	b975      	cbnz	r5, 800eb1a <_scanf_float+0x212>
 800eafc:	2f00      	cmp	r7, #0
 800eafe:	f47f af37 	bne.w	800e970 <_scanf_float+0x68>
 800eb02:	6822      	ldr	r2, [r4, #0]
 800eb04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eb08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eb0c:	f040 8103 	bne.w	800ed16 <_scanf_float+0x40e>
 800eb10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb14:	6022      	str	r2, [r4, #0]
 800eb16:	2501      	movs	r5, #1
 800eb18:	e7c2      	b.n	800eaa0 <_scanf_float+0x198>
 800eb1a:	2d03      	cmp	r5, #3
 800eb1c:	d0e3      	beq.n	800eae6 <_scanf_float+0x1de>
 800eb1e:	2d05      	cmp	r5, #5
 800eb20:	e7df      	b.n	800eae2 <_scanf_float+0x1da>
 800eb22:	2d02      	cmp	r5, #2
 800eb24:	f47f af23 	bne.w	800e96e <_scanf_float+0x66>
 800eb28:	2503      	movs	r5, #3
 800eb2a:	e7b9      	b.n	800eaa0 <_scanf_float+0x198>
 800eb2c:	2d06      	cmp	r5, #6
 800eb2e:	f47f af1e 	bne.w	800e96e <_scanf_float+0x66>
 800eb32:	2507      	movs	r5, #7
 800eb34:	e7b4      	b.n	800eaa0 <_scanf_float+0x198>
 800eb36:	6822      	ldr	r2, [r4, #0]
 800eb38:	0591      	lsls	r1, r2, #22
 800eb3a:	f57f af18 	bpl.w	800e96e <_scanf_float+0x66>
 800eb3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eb42:	6022      	str	r2, [r4, #0]
 800eb44:	9702      	str	r7, [sp, #8]
 800eb46:	e7ab      	b.n	800eaa0 <_scanf_float+0x198>
 800eb48:	6822      	ldr	r2, [r4, #0]
 800eb4a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800eb4e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eb52:	d005      	beq.n	800eb60 <_scanf_float+0x258>
 800eb54:	0550      	lsls	r0, r2, #21
 800eb56:	f57f af0a 	bpl.w	800e96e <_scanf_float+0x66>
 800eb5a:	2f00      	cmp	r7, #0
 800eb5c:	f000 80db 	beq.w	800ed16 <_scanf_float+0x40e>
 800eb60:	0591      	lsls	r1, r2, #22
 800eb62:	bf58      	it	pl
 800eb64:	9902      	ldrpl	r1, [sp, #8]
 800eb66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb6a:	bf58      	it	pl
 800eb6c:	1a79      	subpl	r1, r7, r1
 800eb6e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800eb72:	bf58      	it	pl
 800eb74:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb78:	6022      	str	r2, [r4, #0]
 800eb7a:	2700      	movs	r7, #0
 800eb7c:	e790      	b.n	800eaa0 <_scanf_float+0x198>
 800eb7e:	f04f 0a03 	mov.w	sl, #3
 800eb82:	e78d      	b.n	800eaa0 <_scanf_float+0x198>
 800eb84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb88:	4649      	mov	r1, r9
 800eb8a:	4640      	mov	r0, r8
 800eb8c:	4798      	blx	r3
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	f43f aedf 	beq.w	800e952 <_scanf_float+0x4a>
 800eb94:	e6eb      	b.n	800e96e <_scanf_float+0x66>
 800eb96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb9e:	464a      	mov	r2, r9
 800eba0:	4640      	mov	r0, r8
 800eba2:	4798      	blx	r3
 800eba4:	6923      	ldr	r3, [r4, #16]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	6123      	str	r3, [r4, #16]
 800ebaa:	e6eb      	b.n	800e984 <_scanf_float+0x7c>
 800ebac:	1e6b      	subs	r3, r5, #1
 800ebae:	2b06      	cmp	r3, #6
 800ebb0:	d824      	bhi.n	800ebfc <_scanf_float+0x2f4>
 800ebb2:	2d02      	cmp	r5, #2
 800ebb4:	d836      	bhi.n	800ec24 <_scanf_float+0x31c>
 800ebb6:	9b01      	ldr	r3, [sp, #4]
 800ebb8:	429e      	cmp	r6, r3
 800ebba:	f67f aee7 	bls.w	800e98c <_scanf_float+0x84>
 800ebbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebc6:	464a      	mov	r2, r9
 800ebc8:	4640      	mov	r0, r8
 800ebca:	4798      	blx	r3
 800ebcc:	6923      	ldr	r3, [r4, #16]
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	6123      	str	r3, [r4, #16]
 800ebd2:	e7f0      	b.n	800ebb6 <_scanf_float+0x2ae>
 800ebd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebd8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ebdc:	464a      	mov	r2, r9
 800ebde:	4640      	mov	r0, r8
 800ebe0:	4798      	blx	r3
 800ebe2:	6923      	ldr	r3, [r4, #16]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	6123      	str	r3, [r4, #16]
 800ebe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebec:	fa5f fa8a 	uxtb.w	sl, sl
 800ebf0:	f1ba 0f02 	cmp.w	sl, #2
 800ebf4:	d1ee      	bne.n	800ebd4 <_scanf_float+0x2cc>
 800ebf6:	3d03      	subs	r5, #3
 800ebf8:	b2ed      	uxtb	r5, r5
 800ebfa:	1b76      	subs	r6, r6, r5
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	05da      	lsls	r2, r3, #23
 800ec00:	d530      	bpl.n	800ec64 <_scanf_float+0x35c>
 800ec02:	055b      	lsls	r3, r3, #21
 800ec04:	d511      	bpl.n	800ec2a <_scanf_float+0x322>
 800ec06:	9b01      	ldr	r3, [sp, #4]
 800ec08:	429e      	cmp	r6, r3
 800ec0a:	f67f aebf 	bls.w	800e98c <_scanf_float+0x84>
 800ec0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec16:	464a      	mov	r2, r9
 800ec18:	4640      	mov	r0, r8
 800ec1a:	4798      	blx	r3
 800ec1c:	6923      	ldr	r3, [r4, #16]
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	6123      	str	r3, [r4, #16]
 800ec22:	e7f0      	b.n	800ec06 <_scanf_float+0x2fe>
 800ec24:	46aa      	mov	sl, r5
 800ec26:	46b3      	mov	fp, r6
 800ec28:	e7de      	b.n	800ebe8 <_scanf_float+0x2e0>
 800ec2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ec2e:	6923      	ldr	r3, [r4, #16]
 800ec30:	2965      	cmp	r1, #101	@ 0x65
 800ec32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec36:	f106 35ff 	add.w	r5, r6, #4294967295
 800ec3a:	6123      	str	r3, [r4, #16]
 800ec3c:	d00c      	beq.n	800ec58 <_scanf_float+0x350>
 800ec3e:	2945      	cmp	r1, #69	@ 0x45
 800ec40:	d00a      	beq.n	800ec58 <_scanf_float+0x350>
 800ec42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec46:	464a      	mov	r2, r9
 800ec48:	4640      	mov	r0, r8
 800ec4a:	4798      	blx	r3
 800ec4c:	6923      	ldr	r3, [r4, #16]
 800ec4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ec52:	3b01      	subs	r3, #1
 800ec54:	1eb5      	subs	r5, r6, #2
 800ec56:	6123      	str	r3, [r4, #16]
 800ec58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec5c:	464a      	mov	r2, r9
 800ec5e:	4640      	mov	r0, r8
 800ec60:	4798      	blx	r3
 800ec62:	462e      	mov	r6, r5
 800ec64:	6822      	ldr	r2, [r4, #0]
 800ec66:	f012 0210 	ands.w	r2, r2, #16
 800ec6a:	d001      	beq.n	800ec70 <_scanf_float+0x368>
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	e68e      	b.n	800e98e <_scanf_float+0x86>
 800ec70:	7032      	strb	r2, [r6, #0]
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ec78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec7c:	d125      	bne.n	800ecca <_scanf_float+0x3c2>
 800ec7e:	9b02      	ldr	r3, [sp, #8]
 800ec80:	429f      	cmp	r7, r3
 800ec82:	d00a      	beq.n	800ec9a <_scanf_float+0x392>
 800ec84:	1bda      	subs	r2, r3, r7
 800ec86:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ec8a:	429e      	cmp	r6, r3
 800ec8c:	bf28      	it	cs
 800ec8e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ec92:	4922      	ldr	r1, [pc, #136]	@ (800ed1c <_scanf_float+0x414>)
 800ec94:	4630      	mov	r0, r6
 800ec96:	f000 f907 	bl	800eea8 <siprintf>
 800ec9a:	9901      	ldr	r1, [sp, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4640      	mov	r0, r8
 800eca0:	f002 fb5e 	bl	8011360 <_strtod_r>
 800eca4:	9b03      	ldr	r3, [sp, #12]
 800eca6:	6821      	ldr	r1, [r4, #0]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f011 0f02 	tst.w	r1, #2
 800ecae:	ec57 6b10 	vmov	r6, r7, d0
 800ecb2:	f103 0204 	add.w	r2, r3, #4
 800ecb6:	d015      	beq.n	800ece4 <_scanf_float+0x3dc>
 800ecb8:	9903      	ldr	r1, [sp, #12]
 800ecba:	600a      	str	r2, [r1, #0]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	e9c3 6700 	strd	r6, r7, [r3]
 800ecc2:	68e3      	ldr	r3, [r4, #12]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	60e3      	str	r3, [r4, #12]
 800ecc8:	e7d0      	b.n	800ec6c <_scanf_float+0x364>
 800ecca:	9b04      	ldr	r3, [sp, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d0e4      	beq.n	800ec9a <_scanf_float+0x392>
 800ecd0:	9905      	ldr	r1, [sp, #20]
 800ecd2:	230a      	movs	r3, #10
 800ecd4:	3101      	adds	r1, #1
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	f002 fbc2 	bl	8011460 <_strtol_r>
 800ecdc:	9b04      	ldr	r3, [sp, #16]
 800ecde:	9e05      	ldr	r6, [sp, #20]
 800ece0:	1ac2      	subs	r2, r0, r3
 800ece2:	e7d0      	b.n	800ec86 <_scanf_float+0x37e>
 800ece4:	f011 0f04 	tst.w	r1, #4
 800ece8:	9903      	ldr	r1, [sp, #12]
 800ecea:	600a      	str	r2, [r1, #0]
 800ecec:	d1e6      	bne.n	800ecbc <_scanf_float+0x3b4>
 800ecee:	681d      	ldr	r5, [r3, #0]
 800ecf0:	4632      	mov	r2, r6
 800ecf2:	463b      	mov	r3, r7
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	f7f1 ff20 	bl	8000b3c <__aeabi_dcmpun>
 800ecfc:	b128      	cbz	r0, 800ed0a <_scanf_float+0x402>
 800ecfe:	4808      	ldr	r0, [pc, #32]	@ (800ed20 <_scanf_float+0x418>)
 800ed00:	f000 f9d6 	bl	800f0b0 <nanf>
 800ed04:	ed85 0a00 	vstr	s0, [r5]
 800ed08:	e7db      	b.n	800ecc2 <_scanf_float+0x3ba>
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	f7f1 ff73 	bl	8000bf8 <__aeabi_d2f>
 800ed12:	6028      	str	r0, [r5, #0]
 800ed14:	e7d5      	b.n	800ecc2 <_scanf_float+0x3ba>
 800ed16:	2700      	movs	r7, #0
 800ed18:	e62e      	b.n	800e978 <_scanf_float+0x70>
 800ed1a:	bf00      	nop
 800ed1c:	0801267c 	.word	0x0801267c
 800ed20:	080127bd 	.word	0x080127bd

0800ed24 <std>:
 800ed24:	2300      	movs	r3, #0
 800ed26:	b510      	push	{r4, lr}
 800ed28:	4604      	mov	r4, r0
 800ed2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ed2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed32:	6083      	str	r3, [r0, #8]
 800ed34:	8181      	strh	r1, [r0, #12]
 800ed36:	6643      	str	r3, [r0, #100]	@ 0x64
 800ed38:	81c2      	strh	r2, [r0, #14]
 800ed3a:	6183      	str	r3, [r0, #24]
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	2208      	movs	r2, #8
 800ed40:	305c      	adds	r0, #92	@ 0x5c
 800ed42:	f000 f916 	bl	800ef72 <memset>
 800ed46:	4b0d      	ldr	r3, [pc, #52]	@ (800ed7c <std+0x58>)
 800ed48:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed80 <std+0x5c>)
 800ed4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed84 <std+0x60>)
 800ed50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed52:	4b0d      	ldr	r3, [pc, #52]	@ (800ed88 <std+0x64>)
 800ed54:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed56:	4b0d      	ldr	r3, [pc, #52]	@ (800ed8c <std+0x68>)
 800ed58:	6224      	str	r4, [r4, #32]
 800ed5a:	429c      	cmp	r4, r3
 800ed5c:	d006      	beq.n	800ed6c <std+0x48>
 800ed5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed62:	4294      	cmp	r4, r2
 800ed64:	d002      	beq.n	800ed6c <std+0x48>
 800ed66:	33d0      	adds	r3, #208	@ 0xd0
 800ed68:	429c      	cmp	r4, r3
 800ed6a:	d105      	bne.n	800ed78 <std+0x54>
 800ed6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed74:	f000 b98a 	b.w	800f08c <__retarget_lock_init_recursive>
 800ed78:	bd10      	pop	{r4, pc}
 800ed7a:	bf00      	nop
 800ed7c:	0800eeed 	.word	0x0800eeed
 800ed80:	0800ef0f 	.word	0x0800ef0f
 800ed84:	0800ef47 	.word	0x0800ef47
 800ed88:	0800ef6b 	.word	0x0800ef6b
 800ed8c:	200019d8 	.word	0x200019d8

0800ed90 <stdio_exit_handler>:
 800ed90:	4a02      	ldr	r2, [pc, #8]	@ (800ed9c <stdio_exit_handler+0xc>)
 800ed92:	4903      	ldr	r1, [pc, #12]	@ (800eda0 <stdio_exit_handler+0x10>)
 800ed94:	4803      	ldr	r0, [pc, #12]	@ (800eda4 <stdio_exit_handler+0x14>)
 800ed96:	f000 b869 	b.w	800ee6c <_fwalk_sglue>
 800ed9a:	bf00      	nop
 800ed9c:	20000104 	.word	0x20000104
 800eda0:	0801181d 	.word	0x0801181d
 800eda4:	20000114 	.word	0x20000114

0800eda8 <cleanup_stdio>:
 800eda8:	6841      	ldr	r1, [r0, #4]
 800edaa:	4b0c      	ldr	r3, [pc, #48]	@ (800eddc <cleanup_stdio+0x34>)
 800edac:	4299      	cmp	r1, r3
 800edae:	b510      	push	{r4, lr}
 800edb0:	4604      	mov	r4, r0
 800edb2:	d001      	beq.n	800edb8 <cleanup_stdio+0x10>
 800edb4:	f002 fd32 	bl	801181c <_fflush_r>
 800edb8:	68a1      	ldr	r1, [r4, #8]
 800edba:	4b09      	ldr	r3, [pc, #36]	@ (800ede0 <cleanup_stdio+0x38>)
 800edbc:	4299      	cmp	r1, r3
 800edbe:	d002      	beq.n	800edc6 <cleanup_stdio+0x1e>
 800edc0:	4620      	mov	r0, r4
 800edc2:	f002 fd2b 	bl	801181c <_fflush_r>
 800edc6:	68e1      	ldr	r1, [r4, #12]
 800edc8:	4b06      	ldr	r3, [pc, #24]	@ (800ede4 <cleanup_stdio+0x3c>)
 800edca:	4299      	cmp	r1, r3
 800edcc:	d004      	beq.n	800edd8 <cleanup_stdio+0x30>
 800edce:	4620      	mov	r0, r4
 800edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd4:	f002 bd22 	b.w	801181c <_fflush_r>
 800edd8:	bd10      	pop	{r4, pc}
 800edda:	bf00      	nop
 800eddc:	200019d8 	.word	0x200019d8
 800ede0:	20001a40 	.word	0x20001a40
 800ede4:	20001aa8 	.word	0x20001aa8

0800ede8 <global_stdio_init.part.0>:
 800ede8:	b510      	push	{r4, lr}
 800edea:	4b0b      	ldr	r3, [pc, #44]	@ (800ee18 <global_stdio_init.part.0+0x30>)
 800edec:	4c0b      	ldr	r4, [pc, #44]	@ (800ee1c <global_stdio_init.part.0+0x34>)
 800edee:	4a0c      	ldr	r2, [pc, #48]	@ (800ee20 <global_stdio_init.part.0+0x38>)
 800edf0:	601a      	str	r2, [r3, #0]
 800edf2:	4620      	mov	r0, r4
 800edf4:	2200      	movs	r2, #0
 800edf6:	2104      	movs	r1, #4
 800edf8:	f7ff ff94 	bl	800ed24 <std>
 800edfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ee00:	2201      	movs	r2, #1
 800ee02:	2109      	movs	r1, #9
 800ee04:	f7ff ff8e 	bl	800ed24 <std>
 800ee08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee12:	2112      	movs	r1, #18
 800ee14:	f7ff bf86 	b.w	800ed24 <std>
 800ee18:	20001b10 	.word	0x20001b10
 800ee1c:	200019d8 	.word	0x200019d8
 800ee20:	0800ed91 	.word	0x0800ed91

0800ee24 <__sfp_lock_acquire>:
 800ee24:	4801      	ldr	r0, [pc, #4]	@ (800ee2c <__sfp_lock_acquire+0x8>)
 800ee26:	f000 b932 	b.w	800f08e <__retarget_lock_acquire_recursive>
 800ee2a:	bf00      	nop
 800ee2c:	20001b19 	.word	0x20001b19

0800ee30 <__sfp_lock_release>:
 800ee30:	4801      	ldr	r0, [pc, #4]	@ (800ee38 <__sfp_lock_release+0x8>)
 800ee32:	f000 b92d 	b.w	800f090 <__retarget_lock_release_recursive>
 800ee36:	bf00      	nop
 800ee38:	20001b19 	.word	0x20001b19

0800ee3c <__sinit>:
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	f7ff fff0 	bl	800ee24 <__sfp_lock_acquire>
 800ee44:	6a23      	ldr	r3, [r4, #32]
 800ee46:	b11b      	cbz	r3, 800ee50 <__sinit+0x14>
 800ee48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee4c:	f7ff bff0 	b.w	800ee30 <__sfp_lock_release>
 800ee50:	4b04      	ldr	r3, [pc, #16]	@ (800ee64 <__sinit+0x28>)
 800ee52:	6223      	str	r3, [r4, #32]
 800ee54:	4b04      	ldr	r3, [pc, #16]	@ (800ee68 <__sinit+0x2c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1f5      	bne.n	800ee48 <__sinit+0xc>
 800ee5c:	f7ff ffc4 	bl	800ede8 <global_stdio_init.part.0>
 800ee60:	e7f2      	b.n	800ee48 <__sinit+0xc>
 800ee62:	bf00      	nop
 800ee64:	0800eda9 	.word	0x0800eda9
 800ee68:	20001b10 	.word	0x20001b10

0800ee6c <_fwalk_sglue>:
 800ee6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee70:	4607      	mov	r7, r0
 800ee72:	4688      	mov	r8, r1
 800ee74:	4614      	mov	r4, r2
 800ee76:	2600      	movs	r6, #0
 800ee78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ee80:	d505      	bpl.n	800ee8e <_fwalk_sglue+0x22>
 800ee82:	6824      	ldr	r4, [r4, #0]
 800ee84:	2c00      	cmp	r4, #0
 800ee86:	d1f7      	bne.n	800ee78 <_fwalk_sglue+0xc>
 800ee88:	4630      	mov	r0, r6
 800ee8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee8e:	89ab      	ldrh	r3, [r5, #12]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d907      	bls.n	800eea4 <_fwalk_sglue+0x38>
 800ee94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	d003      	beq.n	800eea4 <_fwalk_sglue+0x38>
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	4638      	mov	r0, r7
 800eea0:	47c0      	blx	r8
 800eea2:	4306      	orrs	r6, r0
 800eea4:	3568      	adds	r5, #104	@ 0x68
 800eea6:	e7e9      	b.n	800ee7c <_fwalk_sglue+0x10>

0800eea8 <siprintf>:
 800eea8:	b40e      	push	{r1, r2, r3}
 800eeaa:	b510      	push	{r4, lr}
 800eeac:	b09d      	sub	sp, #116	@ 0x74
 800eeae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eeb0:	9002      	str	r0, [sp, #8]
 800eeb2:	9006      	str	r0, [sp, #24]
 800eeb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eeb8:	480a      	ldr	r0, [pc, #40]	@ (800eee4 <siprintf+0x3c>)
 800eeba:	9107      	str	r1, [sp, #28]
 800eebc:	9104      	str	r1, [sp, #16]
 800eebe:	490a      	ldr	r1, [pc, #40]	@ (800eee8 <siprintf+0x40>)
 800eec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eec4:	9105      	str	r1, [sp, #20]
 800eec6:	2400      	movs	r4, #0
 800eec8:	a902      	add	r1, sp, #8
 800eeca:	6800      	ldr	r0, [r0, #0]
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eed0:	f002 fb24 	bl	801151c <_svfiprintf_r>
 800eed4:	9b02      	ldr	r3, [sp, #8]
 800eed6:	701c      	strb	r4, [r3, #0]
 800eed8:	b01d      	add	sp, #116	@ 0x74
 800eeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eede:	b003      	add	sp, #12
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	20000110 	.word	0x20000110
 800eee8:	ffff0208 	.word	0xffff0208

0800eeec <__sread>:
 800eeec:	b510      	push	{r4, lr}
 800eeee:	460c      	mov	r4, r1
 800eef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef4:	f000 f86c 	bl	800efd0 <_read_r>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	bfab      	itete	ge
 800eefc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eefe:	89a3      	ldrhlt	r3, [r4, #12]
 800ef00:	181b      	addge	r3, r3, r0
 800ef02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ef06:	bfac      	ite	ge
 800ef08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ef0a:	81a3      	strhlt	r3, [r4, #12]
 800ef0c:	bd10      	pop	{r4, pc}

0800ef0e <__swrite>:
 800ef0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef12:	461f      	mov	r7, r3
 800ef14:	898b      	ldrh	r3, [r1, #12]
 800ef16:	05db      	lsls	r3, r3, #23
 800ef18:	4605      	mov	r5, r0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	4616      	mov	r6, r2
 800ef1e:	d505      	bpl.n	800ef2c <__swrite+0x1e>
 800ef20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef24:	2302      	movs	r3, #2
 800ef26:	2200      	movs	r2, #0
 800ef28:	f000 f840 	bl	800efac <_lseek_r>
 800ef2c:	89a3      	ldrh	r3, [r4, #12]
 800ef2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef36:	81a3      	strh	r3, [r4, #12]
 800ef38:	4632      	mov	r2, r6
 800ef3a:	463b      	mov	r3, r7
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef42:	f000 b867 	b.w	800f014 <_write_r>

0800ef46 <__sseek>:
 800ef46:	b510      	push	{r4, lr}
 800ef48:	460c      	mov	r4, r1
 800ef4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef4e:	f000 f82d 	bl	800efac <_lseek_r>
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	89a3      	ldrh	r3, [r4, #12]
 800ef56:	bf15      	itete	ne
 800ef58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef62:	81a3      	strheq	r3, [r4, #12]
 800ef64:	bf18      	it	ne
 800ef66:	81a3      	strhne	r3, [r4, #12]
 800ef68:	bd10      	pop	{r4, pc}

0800ef6a <__sclose>:
 800ef6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef6e:	f000 b80d 	b.w	800ef8c <_close_r>

0800ef72 <memset>:
 800ef72:	4402      	add	r2, r0
 800ef74:	4603      	mov	r3, r0
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d100      	bne.n	800ef7c <memset+0xa>
 800ef7a:	4770      	bx	lr
 800ef7c:	f803 1b01 	strb.w	r1, [r3], #1
 800ef80:	e7f9      	b.n	800ef76 <memset+0x4>
	...

0800ef84 <_localeconv_r>:
 800ef84:	4800      	ldr	r0, [pc, #0]	@ (800ef88 <_localeconv_r+0x4>)
 800ef86:	4770      	bx	lr
 800ef88:	20000250 	.word	0x20000250

0800ef8c <_close_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4d06      	ldr	r5, [pc, #24]	@ (800efa8 <_close_r+0x1c>)
 800ef90:	2300      	movs	r3, #0
 800ef92:	4604      	mov	r4, r0
 800ef94:	4608      	mov	r0, r1
 800ef96:	602b      	str	r3, [r5, #0]
 800ef98:	f7f3 fd81 	bl	8002a9e <_close>
 800ef9c:	1c43      	adds	r3, r0, #1
 800ef9e:	d102      	bne.n	800efa6 <_close_r+0x1a>
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	b103      	cbz	r3, 800efa6 <_close_r+0x1a>
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	bd38      	pop	{r3, r4, r5, pc}
 800efa8:	20001b14 	.word	0x20001b14

0800efac <_lseek_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	4d07      	ldr	r5, [pc, #28]	@ (800efcc <_lseek_r+0x20>)
 800efb0:	4604      	mov	r4, r0
 800efb2:	4608      	mov	r0, r1
 800efb4:	4611      	mov	r1, r2
 800efb6:	2200      	movs	r2, #0
 800efb8:	602a      	str	r2, [r5, #0]
 800efba:	461a      	mov	r2, r3
 800efbc:	f7f3 fd96 	bl	8002aec <_lseek>
 800efc0:	1c43      	adds	r3, r0, #1
 800efc2:	d102      	bne.n	800efca <_lseek_r+0x1e>
 800efc4:	682b      	ldr	r3, [r5, #0]
 800efc6:	b103      	cbz	r3, 800efca <_lseek_r+0x1e>
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	bd38      	pop	{r3, r4, r5, pc}
 800efcc:	20001b14 	.word	0x20001b14

0800efd0 <_read_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	4d07      	ldr	r5, [pc, #28]	@ (800eff0 <_read_r+0x20>)
 800efd4:	4604      	mov	r4, r0
 800efd6:	4608      	mov	r0, r1
 800efd8:	4611      	mov	r1, r2
 800efda:	2200      	movs	r2, #0
 800efdc:	602a      	str	r2, [r5, #0]
 800efde:	461a      	mov	r2, r3
 800efe0:	f7f3 fd24 	bl	8002a2c <_read>
 800efe4:	1c43      	adds	r3, r0, #1
 800efe6:	d102      	bne.n	800efee <_read_r+0x1e>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	b103      	cbz	r3, 800efee <_read_r+0x1e>
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	bd38      	pop	{r3, r4, r5, pc}
 800eff0:	20001b14 	.word	0x20001b14

0800eff4 <_sbrk_r>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	4d06      	ldr	r5, [pc, #24]	@ (800f010 <_sbrk_r+0x1c>)
 800eff8:	2300      	movs	r3, #0
 800effa:	4604      	mov	r4, r0
 800effc:	4608      	mov	r0, r1
 800effe:	602b      	str	r3, [r5, #0]
 800f000:	f7f3 fd82 	bl	8002b08 <_sbrk>
 800f004:	1c43      	adds	r3, r0, #1
 800f006:	d102      	bne.n	800f00e <_sbrk_r+0x1a>
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	b103      	cbz	r3, 800f00e <_sbrk_r+0x1a>
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	20001b14 	.word	0x20001b14

0800f014 <_write_r>:
 800f014:	b538      	push	{r3, r4, r5, lr}
 800f016:	4d07      	ldr	r5, [pc, #28]	@ (800f034 <_write_r+0x20>)
 800f018:	4604      	mov	r4, r0
 800f01a:	4608      	mov	r0, r1
 800f01c:	4611      	mov	r1, r2
 800f01e:	2200      	movs	r2, #0
 800f020:	602a      	str	r2, [r5, #0]
 800f022:	461a      	mov	r2, r3
 800f024:	f7f3 fd1f 	bl	8002a66 <_write>
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	d102      	bne.n	800f032 <_write_r+0x1e>
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	b103      	cbz	r3, 800f032 <_write_r+0x1e>
 800f030:	6023      	str	r3, [r4, #0]
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	20001b14 	.word	0x20001b14

0800f038 <__errno>:
 800f038:	4b01      	ldr	r3, [pc, #4]	@ (800f040 <__errno+0x8>)
 800f03a:	6818      	ldr	r0, [r3, #0]
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop
 800f040:	20000110 	.word	0x20000110

0800f044 <__libc_init_array>:
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	4d0d      	ldr	r5, [pc, #52]	@ (800f07c <__libc_init_array+0x38>)
 800f048:	4c0d      	ldr	r4, [pc, #52]	@ (800f080 <__libc_init_array+0x3c>)
 800f04a:	1b64      	subs	r4, r4, r5
 800f04c:	10a4      	asrs	r4, r4, #2
 800f04e:	2600      	movs	r6, #0
 800f050:	42a6      	cmp	r6, r4
 800f052:	d109      	bne.n	800f068 <__libc_init_array+0x24>
 800f054:	4d0b      	ldr	r5, [pc, #44]	@ (800f084 <__libc_init_array+0x40>)
 800f056:	4c0c      	ldr	r4, [pc, #48]	@ (800f088 <__libc_init_array+0x44>)
 800f058:	f003 fab4 	bl	80125c4 <_init>
 800f05c:	1b64      	subs	r4, r4, r5
 800f05e:	10a4      	asrs	r4, r4, #2
 800f060:	2600      	movs	r6, #0
 800f062:	42a6      	cmp	r6, r4
 800f064:	d105      	bne.n	800f072 <__libc_init_array+0x2e>
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	f855 3b04 	ldr.w	r3, [r5], #4
 800f06c:	4798      	blx	r3
 800f06e:	3601      	adds	r6, #1
 800f070:	e7ee      	b.n	800f050 <__libc_init_array+0xc>
 800f072:	f855 3b04 	ldr.w	r3, [r5], #4
 800f076:	4798      	blx	r3
 800f078:	3601      	adds	r6, #1
 800f07a:	e7f2      	b.n	800f062 <__libc_init_array+0x1e>
 800f07c:	08012a7c 	.word	0x08012a7c
 800f080:	08012a7c 	.word	0x08012a7c
 800f084:	08012a7c 	.word	0x08012a7c
 800f088:	08012a80 	.word	0x08012a80

0800f08c <__retarget_lock_init_recursive>:
 800f08c:	4770      	bx	lr

0800f08e <__retarget_lock_acquire_recursive>:
 800f08e:	4770      	bx	lr

0800f090 <__retarget_lock_release_recursive>:
 800f090:	4770      	bx	lr

0800f092 <memcpy>:
 800f092:	440a      	add	r2, r1
 800f094:	4291      	cmp	r1, r2
 800f096:	f100 33ff 	add.w	r3, r0, #4294967295
 800f09a:	d100      	bne.n	800f09e <memcpy+0xc>
 800f09c:	4770      	bx	lr
 800f09e:	b510      	push	{r4, lr}
 800f0a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0a8:	4291      	cmp	r1, r2
 800f0aa:	d1f9      	bne.n	800f0a0 <memcpy+0xe>
 800f0ac:	bd10      	pop	{r4, pc}
	...

0800f0b0 <nanf>:
 800f0b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f0b8 <nanf+0x8>
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	7fc00000 	.word	0x7fc00000

0800f0bc <quorem>:
 800f0bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c0:	6903      	ldr	r3, [r0, #16]
 800f0c2:	690c      	ldr	r4, [r1, #16]
 800f0c4:	42a3      	cmp	r3, r4
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	db7e      	blt.n	800f1c8 <quorem+0x10c>
 800f0ca:	3c01      	subs	r4, #1
 800f0cc:	f101 0814 	add.w	r8, r1, #20
 800f0d0:	00a3      	lsls	r3, r4, #2
 800f0d2:	f100 0514 	add.w	r5, r0, #20
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0dc:	9301      	str	r3, [sp, #4]
 800f0de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f0e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f0ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800f0f2:	d32e      	bcc.n	800f152 <quorem+0x96>
 800f0f4:	f04f 0a00 	mov.w	sl, #0
 800f0f8:	46c4      	mov	ip, r8
 800f0fa:	46ae      	mov	lr, r5
 800f0fc:	46d3      	mov	fp, sl
 800f0fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f102:	b298      	uxth	r0, r3
 800f104:	fb06 a000 	mla	r0, r6, r0, sl
 800f108:	0c02      	lsrs	r2, r0, #16
 800f10a:	0c1b      	lsrs	r3, r3, #16
 800f10c:	fb06 2303 	mla	r3, r6, r3, r2
 800f110:	f8de 2000 	ldr.w	r2, [lr]
 800f114:	b280      	uxth	r0, r0
 800f116:	b292      	uxth	r2, r2
 800f118:	1a12      	subs	r2, r2, r0
 800f11a:	445a      	add	r2, fp
 800f11c:	f8de 0000 	ldr.w	r0, [lr]
 800f120:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f124:	b29b      	uxth	r3, r3
 800f126:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f12a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f12e:	b292      	uxth	r2, r2
 800f130:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f134:	45e1      	cmp	r9, ip
 800f136:	f84e 2b04 	str.w	r2, [lr], #4
 800f13a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f13e:	d2de      	bcs.n	800f0fe <quorem+0x42>
 800f140:	9b00      	ldr	r3, [sp, #0]
 800f142:	58eb      	ldr	r3, [r5, r3]
 800f144:	b92b      	cbnz	r3, 800f152 <quorem+0x96>
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	3b04      	subs	r3, #4
 800f14a:	429d      	cmp	r5, r3
 800f14c:	461a      	mov	r2, r3
 800f14e:	d32f      	bcc.n	800f1b0 <quorem+0xf4>
 800f150:	613c      	str	r4, [r7, #16]
 800f152:	4638      	mov	r0, r7
 800f154:	f001 f912 	bl	801037c <__mcmp>
 800f158:	2800      	cmp	r0, #0
 800f15a:	db25      	blt.n	800f1a8 <quorem+0xec>
 800f15c:	4629      	mov	r1, r5
 800f15e:	2000      	movs	r0, #0
 800f160:	f858 2b04 	ldr.w	r2, [r8], #4
 800f164:	f8d1 c000 	ldr.w	ip, [r1]
 800f168:	fa1f fe82 	uxth.w	lr, r2
 800f16c:	fa1f f38c 	uxth.w	r3, ip
 800f170:	eba3 030e 	sub.w	r3, r3, lr
 800f174:	4403      	add	r3, r0
 800f176:	0c12      	lsrs	r2, r2, #16
 800f178:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f17c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f180:	b29b      	uxth	r3, r3
 800f182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f186:	45c1      	cmp	r9, r8
 800f188:	f841 3b04 	str.w	r3, [r1], #4
 800f18c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f190:	d2e6      	bcs.n	800f160 <quorem+0xa4>
 800f192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f19a:	b922      	cbnz	r2, 800f1a6 <quorem+0xea>
 800f19c:	3b04      	subs	r3, #4
 800f19e:	429d      	cmp	r5, r3
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	d30b      	bcc.n	800f1bc <quorem+0x100>
 800f1a4:	613c      	str	r4, [r7, #16]
 800f1a6:	3601      	adds	r6, #1
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	b003      	add	sp, #12
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b0:	6812      	ldr	r2, [r2, #0]
 800f1b2:	3b04      	subs	r3, #4
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	d1cb      	bne.n	800f150 <quorem+0x94>
 800f1b8:	3c01      	subs	r4, #1
 800f1ba:	e7c6      	b.n	800f14a <quorem+0x8e>
 800f1bc:	6812      	ldr	r2, [r2, #0]
 800f1be:	3b04      	subs	r3, #4
 800f1c0:	2a00      	cmp	r2, #0
 800f1c2:	d1ef      	bne.n	800f1a4 <quorem+0xe8>
 800f1c4:	3c01      	subs	r4, #1
 800f1c6:	e7ea      	b.n	800f19e <quorem+0xe2>
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	e7ee      	b.n	800f1aa <quorem+0xee>
 800f1cc:	0000      	movs	r0, r0
	...

0800f1d0 <_dtoa_r>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	69c7      	ldr	r7, [r0, #28]
 800f1d6:	b097      	sub	sp, #92	@ 0x5c
 800f1d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f1dc:	ec55 4b10 	vmov	r4, r5, d0
 800f1e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f1e2:	9107      	str	r1, [sp, #28]
 800f1e4:	4681      	mov	r9, r0
 800f1e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f1e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f1ea:	b97f      	cbnz	r7, 800f20c <_dtoa_r+0x3c>
 800f1ec:	2010      	movs	r0, #16
 800f1ee:	f7fe fe7f 	bl	800def0 <malloc>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	f8c9 001c 	str.w	r0, [r9, #28]
 800f1f8:	b920      	cbnz	r0, 800f204 <_dtoa_r+0x34>
 800f1fa:	4ba9      	ldr	r3, [pc, #676]	@ (800f4a0 <_dtoa_r+0x2d0>)
 800f1fc:	21ef      	movs	r1, #239	@ 0xef
 800f1fe:	48a9      	ldr	r0, [pc, #676]	@ (800f4a4 <_dtoa_r+0x2d4>)
 800f200:	f002 fb6a 	bl	80118d8 <__assert_func>
 800f204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f208:	6007      	str	r7, [r0, #0]
 800f20a:	60c7      	str	r7, [r0, #12]
 800f20c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f210:	6819      	ldr	r1, [r3, #0]
 800f212:	b159      	cbz	r1, 800f22c <_dtoa_r+0x5c>
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	604a      	str	r2, [r1, #4]
 800f218:	2301      	movs	r3, #1
 800f21a:	4093      	lsls	r3, r2
 800f21c:	608b      	str	r3, [r1, #8]
 800f21e:	4648      	mov	r0, r9
 800f220:	f000 fe30 	bl	800fe84 <_Bfree>
 800f224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f228:	2200      	movs	r2, #0
 800f22a:	601a      	str	r2, [r3, #0]
 800f22c:	1e2b      	subs	r3, r5, #0
 800f22e:	bfb9      	ittee	lt
 800f230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f234:	9305      	strlt	r3, [sp, #20]
 800f236:	2300      	movge	r3, #0
 800f238:	6033      	strge	r3, [r6, #0]
 800f23a:	9f05      	ldr	r7, [sp, #20]
 800f23c:	4b9a      	ldr	r3, [pc, #616]	@ (800f4a8 <_dtoa_r+0x2d8>)
 800f23e:	bfbc      	itt	lt
 800f240:	2201      	movlt	r2, #1
 800f242:	6032      	strlt	r2, [r6, #0]
 800f244:	43bb      	bics	r3, r7
 800f246:	d112      	bne.n	800f26e <_dtoa_r+0x9e>
 800f248:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f24a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f254:	4323      	orrs	r3, r4
 800f256:	f000 855a 	beq.w	800fd0e <_dtoa_r+0xb3e>
 800f25a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f25c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f4bc <_dtoa_r+0x2ec>
 800f260:	2b00      	cmp	r3, #0
 800f262:	f000 855c 	beq.w	800fd1e <_dtoa_r+0xb4e>
 800f266:	f10a 0303 	add.w	r3, sl, #3
 800f26a:	f000 bd56 	b.w	800fd1a <_dtoa_r+0xb4a>
 800f26e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f272:	2200      	movs	r2, #0
 800f274:	ec51 0b17 	vmov	r0, r1, d7
 800f278:	2300      	movs	r3, #0
 800f27a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f27e:	f7f1 fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f282:	4680      	mov	r8, r0
 800f284:	b158      	cbz	r0, 800f29e <_dtoa_r+0xce>
 800f286:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f288:	2301      	movs	r3, #1
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f28e:	b113      	cbz	r3, 800f296 <_dtoa_r+0xc6>
 800f290:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f292:	4b86      	ldr	r3, [pc, #536]	@ (800f4ac <_dtoa_r+0x2dc>)
 800f294:	6013      	str	r3, [r2, #0]
 800f296:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f4c0 <_dtoa_r+0x2f0>
 800f29a:	f000 bd40 	b.w	800fd1e <_dtoa_r+0xb4e>
 800f29e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f2a2:	aa14      	add	r2, sp, #80	@ 0x50
 800f2a4:	a915      	add	r1, sp, #84	@ 0x54
 800f2a6:	4648      	mov	r0, r9
 800f2a8:	f001 f988 	bl	80105bc <__d2b>
 800f2ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f2b0:	9002      	str	r0, [sp, #8]
 800f2b2:	2e00      	cmp	r6, #0
 800f2b4:	d078      	beq.n	800f3a8 <_dtoa_r+0x1d8>
 800f2b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f2c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f2c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f2cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	4b76      	ldr	r3, [pc, #472]	@ (800f4b0 <_dtoa_r+0x2e0>)
 800f2d6:	f7f0 ffdf 	bl	8000298 <__aeabi_dsub>
 800f2da:	a36b      	add	r3, pc, #428	@ (adr r3, 800f488 <_dtoa_r+0x2b8>)
 800f2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e0:	f7f1 f992 	bl	8000608 <__aeabi_dmul>
 800f2e4:	a36a      	add	r3, pc, #424	@ (adr r3, 800f490 <_dtoa_r+0x2c0>)
 800f2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ea:	f7f0 ffd7 	bl	800029c <__adddf3>
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	f7f1 f91e 	bl	8000534 <__aeabi_i2d>
 800f2f8:	a367      	add	r3, pc, #412	@ (adr r3, 800f498 <_dtoa_r+0x2c8>)
 800f2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fe:	f7f1 f983 	bl	8000608 <__aeabi_dmul>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4620      	mov	r0, r4
 800f308:	4629      	mov	r1, r5
 800f30a:	f7f0 ffc7 	bl	800029c <__adddf3>
 800f30e:	4604      	mov	r4, r0
 800f310:	460d      	mov	r5, r1
 800f312:	f7f1 fc29 	bl	8000b68 <__aeabi_d2iz>
 800f316:	2200      	movs	r2, #0
 800f318:	4607      	mov	r7, r0
 800f31a:	2300      	movs	r3, #0
 800f31c:	4620      	mov	r0, r4
 800f31e:	4629      	mov	r1, r5
 800f320:	f7f1 fbe4 	bl	8000aec <__aeabi_dcmplt>
 800f324:	b140      	cbz	r0, 800f338 <_dtoa_r+0x168>
 800f326:	4638      	mov	r0, r7
 800f328:	f7f1 f904 	bl	8000534 <__aeabi_i2d>
 800f32c:	4622      	mov	r2, r4
 800f32e:	462b      	mov	r3, r5
 800f330:	f7f1 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f334:	b900      	cbnz	r0, 800f338 <_dtoa_r+0x168>
 800f336:	3f01      	subs	r7, #1
 800f338:	2f16      	cmp	r7, #22
 800f33a:	d852      	bhi.n	800f3e2 <_dtoa_r+0x212>
 800f33c:	4b5d      	ldr	r3, [pc, #372]	@ (800f4b4 <_dtoa_r+0x2e4>)
 800f33e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f34a:	f7f1 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d049      	beq.n	800f3e6 <_dtoa_r+0x216>
 800f352:	3f01      	subs	r7, #1
 800f354:	2300      	movs	r3, #0
 800f356:	9310      	str	r3, [sp, #64]	@ 0x40
 800f358:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f35a:	1b9b      	subs	r3, r3, r6
 800f35c:	1e5a      	subs	r2, r3, #1
 800f35e:	bf45      	ittet	mi
 800f360:	f1c3 0301 	rsbmi	r3, r3, #1
 800f364:	9300      	strmi	r3, [sp, #0]
 800f366:	2300      	movpl	r3, #0
 800f368:	2300      	movmi	r3, #0
 800f36a:	9206      	str	r2, [sp, #24]
 800f36c:	bf54      	ite	pl
 800f36e:	9300      	strpl	r3, [sp, #0]
 800f370:	9306      	strmi	r3, [sp, #24]
 800f372:	2f00      	cmp	r7, #0
 800f374:	db39      	blt.n	800f3ea <_dtoa_r+0x21a>
 800f376:	9b06      	ldr	r3, [sp, #24]
 800f378:	970d      	str	r7, [sp, #52]	@ 0x34
 800f37a:	443b      	add	r3, r7
 800f37c:	9306      	str	r3, [sp, #24]
 800f37e:	2300      	movs	r3, #0
 800f380:	9308      	str	r3, [sp, #32]
 800f382:	9b07      	ldr	r3, [sp, #28]
 800f384:	2b09      	cmp	r3, #9
 800f386:	d863      	bhi.n	800f450 <_dtoa_r+0x280>
 800f388:	2b05      	cmp	r3, #5
 800f38a:	bfc4      	itt	gt
 800f38c:	3b04      	subgt	r3, #4
 800f38e:	9307      	strgt	r3, [sp, #28]
 800f390:	9b07      	ldr	r3, [sp, #28]
 800f392:	f1a3 0302 	sub.w	r3, r3, #2
 800f396:	bfcc      	ite	gt
 800f398:	2400      	movgt	r4, #0
 800f39a:	2401      	movle	r4, #1
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	d863      	bhi.n	800f468 <_dtoa_r+0x298>
 800f3a0:	e8df f003 	tbb	[pc, r3]
 800f3a4:	2b375452 	.word	0x2b375452
 800f3a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f3ac:	441e      	add	r6, r3
 800f3ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f3b2:	2b20      	cmp	r3, #32
 800f3b4:	bfc1      	itttt	gt
 800f3b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f3ba:	409f      	lslgt	r7, r3
 800f3bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f3c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f3c4:	bfd6      	itet	le
 800f3c6:	f1c3 0320 	rsble	r3, r3, #32
 800f3ca:	ea47 0003 	orrgt.w	r0, r7, r3
 800f3ce:	fa04 f003 	lslle.w	r0, r4, r3
 800f3d2:	f7f1 f89f 	bl	8000514 <__aeabi_ui2d>
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f3dc:	3e01      	subs	r6, #1
 800f3de:	9212      	str	r2, [sp, #72]	@ 0x48
 800f3e0:	e776      	b.n	800f2d0 <_dtoa_r+0x100>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e7b7      	b.n	800f356 <_dtoa_r+0x186>
 800f3e6:	9010      	str	r0, [sp, #64]	@ 0x40
 800f3e8:	e7b6      	b.n	800f358 <_dtoa_r+0x188>
 800f3ea:	9b00      	ldr	r3, [sp, #0]
 800f3ec:	1bdb      	subs	r3, r3, r7
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	427b      	negs	r3, r7
 800f3f2:	9308      	str	r3, [sp, #32]
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f3f8:	e7c3      	b.n	800f382 <_dtoa_r+0x1b2>
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f400:	eb07 0b03 	add.w	fp, r7, r3
 800f404:	f10b 0301 	add.w	r3, fp, #1
 800f408:	2b01      	cmp	r3, #1
 800f40a:	9303      	str	r3, [sp, #12]
 800f40c:	bfb8      	it	lt
 800f40e:	2301      	movlt	r3, #1
 800f410:	e006      	b.n	800f420 <_dtoa_r+0x250>
 800f412:	2301      	movs	r3, #1
 800f414:	9309      	str	r3, [sp, #36]	@ 0x24
 800f416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dd28      	ble.n	800f46e <_dtoa_r+0x29e>
 800f41c:	469b      	mov	fp, r3
 800f41e:	9303      	str	r3, [sp, #12]
 800f420:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f424:	2100      	movs	r1, #0
 800f426:	2204      	movs	r2, #4
 800f428:	f102 0514 	add.w	r5, r2, #20
 800f42c:	429d      	cmp	r5, r3
 800f42e:	d926      	bls.n	800f47e <_dtoa_r+0x2ae>
 800f430:	6041      	str	r1, [r0, #4]
 800f432:	4648      	mov	r0, r9
 800f434:	f000 fce6 	bl	800fe04 <_Balloc>
 800f438:	4682      	mov	sl, r0
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d142      	bne.n	800f4c4 <_dtoa_r+0x2f4>
 800f43e:	4b1e      	ldr	r3, [pc, #120]	@ (800f4b8 <_dtoa_r+0x2e8>)
 800f440:	4602      	mov	r2, r0
 800f442:	f240 11af 	movw	r1, #431	@ 0x1af
 800f446:	e6da      	b.n	800f1fe <_dtoa_r+0x2e>
 800f448:	2300      	movs	r3, #0
 800f44a:	e7e3      	b.n	800f414 <_dtoa_r+0x244>
 800f44c:	2300      	movs	r3, #0
 800f44e:	e7d5      	b.n	800f3fc <_dtoa_r+0x22c>
 800f450:	2401      	movs	r4, #1
 800f452:	2300      	movs	r3, #0
 800f454:	9307      	str	r3, [sp, #28]
 800f456:	9409      	str	r4, [sp, #36]	@ 0x24
 800f458:	f04f 3bff 	mov.w	fp, #4294967295
 800f45c:	2200      	movs	r2, #0
 800f45e:	f8cd b00c 	str.w	fp, [sp, #12]
 800f462:	2312      	movs	r3, #18
 800f464:	920c      	str	r2, [sp, #48]	@ 0x30
 800f466:	e7db      	b.n	800f420 <_dtoa_r+0x250>
 800f468:	2301      	movs	r3, #1
 800f46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f46c:	e7f4      	b.n	800f458 <_dtoa_r+0x288>
 800f46e:	f04f 0b01 	mov.w	fp, #1
 800f472:	f8cd b00c 	str.w	fp, [sp, #12]
 800f476:	465b      	mov	r3, fp
 800f478:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f47c:	e7d0      	b.n	800f420 <_dtoa_r+0x250>
 800f47e:	3101      	adds	r1, #1
 800f480:	0052      	lsls	r2, r2, #1
 800f482:	e7d1      	b.n	800f428 <_dtoa_r+0x258>
 800f484:	f3af 8000 	nop.w
 800f488:	636f4361 	.word	0x636f4361
 800f48c:	3fd287a7 	.word	0x3fd287a7
 800f490:	8b60c8b3 	.word	0x8b60c8b3
 800f494:	3fc68a28 	.word	0x3fc68a28
 800f498:	509f79fb 	.word	0x509f79fb
 800f49c:	3fd34413 	.word	0x3fd34413
 800f4a0:	0801268e 	.word	0x0801268e
 800f4a4:	080126a5 	.word	0x080126a5
 800f4a8:	7ff00000 	.word	0x7ff00000
 800f4ac:	08012659 	.word	0x08012659
 800f4b0:	3ff80000 	.word	0x3ff80000
 800f4b4:	08012858 	.word	0x08012858
 800f4b8:	080126fd 	.word	0x080126fd
 800f4bc:	0801268a 	.word	0x0801268a
 800f4c0:	08012658 	.word	0x08012658
 800f4c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f4c8:	6018      	str	r0, [r3, #0]
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	2b0e      	cmp	r3, #14
 800f4ce:	f200 80a1 	bhi.w	800f614 <_dtoa_r+0x444>
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	f000 809e 	beq.w	800f614 <_dtoa_r+0x444>
 800f4d8:	2f00      	cmp	r7, #0
 800f4da:	dd33      	ble.n	800f544 <_dtoa_r+0x374>
 800f4dc:	4b9c      	ldr	r3, [pc, #624]	@ (800f750 <_dtoa_r+0x580>)
 800f4de:	f007 020f 	and.w	r2, r7, #15
 800f4e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4e6:	ed93 7b00 	vldr	d7, [r3]
 800f4ea:	05f8      	lsls	r0, r7, #23
 800f4ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f4f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f4f4:	d516      	bpl.n	800f524 <_dtoa_r+0x354>
 800f4f6:	4b97      	ldr	r3, [pc, #604]	@ (800f754 <_dtoa_r+0x584>)
 800f4f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f4fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f500:	f7f1 f9ac 	bl	800085c <__aeabi_ddiv>
 800f504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f508:	f004 040f 	and.w	r4, r4, #15
 800f50c:	2603      	movs	r6, #3
 800f50e:	4d91      	ldr	r5, [pc, #580]	@ (800f754 <_dtoa_r+0x584>)
 800f510:	b954      	cbnz	r4, 800f528 <_dtoa_r+0x358>
 800f512:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f51a:	f7f1 f99f 	bl	800085c <__aeabi_ddiv>
 800f51e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f522:	e028      	b.n	800f576 <_dtoa_r+0x3a6>
 800f524:	2602      	movs	r6, #2
 800f526:	e7f2      	b.n	800f50e <_dtoa_r+0x33e>
 800f528:	07e1      	lsls	r1, r4, #31
 800f52a:	d508      	bpl.n	800f53e <_dtoa_r+0x36e>
 800f52c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f530:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f534:	f7f1 f868 	bl	8000608 <__aeabi_dmul>
 800f538:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f53c:	3601      	adds	r6, #1
 800f53e:	1064      	asrs	r4, r4, #1
 800f540:	3508      	adds	r5, #8
 800f542:	e7e5      	b.n	800f510 <_dtoa_r+0x340>
 800f544:	f000 80af 	beq.w	800f6a6 <_dtoa_r+0x4d6>
 800f548:	427c      	negs	r4, r7
 800f54a:	4b81      	ldr	r3, [pc, #516]	@ (800f750 <_dtoa_r+0x580>)
 800f54c:	4d81      	ldr	r5, [pc, #516]	@ (800f754 <_dtoa_r+0x584>)
 800f54e:	f004 020f 	and.w	r2, r4, #15
 800f552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f55e:	f7f1 f853 	bl	8000608 <__aeabi_dmul>
 800f562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f566:	1124      	asrs	r4, r4, #4
 800f568:	2300      	movs	r3, #0
 800f56a:	2602      	movs	r6, #2
 800f56c:	2c00      	cmp	r4, #0
 800f56e:	f040 808f 	bne.w	800f690 <_dtoa_r+0x4c0>
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1d3      	bne.n	800f51e <_dtoa_r+0x34e>
 800f576:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	f000 8094 	beq.w	800f6aa <_dtoa_r+0x4da>
 800f582:	4b75      	ldr	r3, [pc, #468]	@ (800f758 <_dtoa_r+0x588>)
 800f584:	2200      	movs	r2, #0
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f1 faaf 	bl	8000aec <__aeabi_dcmplt>
 800f58e:	2800      	cmp	r0, #0
 800f590:	f000 808b 	beq.w	800f6aa <_dtoa_r+0x4da>
 800f594:	9b03      	ldr	r3, [sp, #12]
 800f596:	2b00      	cmp	r3, #0
 800f598:	f000 8087 	beq.w	800f6aa <_dtoa_r+0x4da>
 800f59c:	f1bb 0f00 	cmp.w	fp, #0
 800f5a0:	dd34      	ble.n	800f60c <_dtoa_r+0x43c>
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	4b6d      	ldr	r3, [pc, #436]	@ (800f75c <_dtoa_r+0x58c>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	f7f1 f82d 	bl	8000608 <__aeabi_dmul>
 800f5ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5b2:	f107 38ff 	add.w	r8, r7, #4294967295
 800f5b6:	3601      	adds	r6, #1
 800f5b8:	465c      	mov	r4, fp
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f7f0 ffba 	bl	8000534 <__aeabi_i2d>
 800f5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5c4:	f7f1 f820 	bl	8000608 <__aeabi_dmul>
 800f5c8:	4b65      	ldr	r3, [pc, #404]	@ (800f760 <_dtoa_r+0x590>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f7f0 fe66 	bl	800029c <__adddf3>
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f5d6:	2c00      	cmp	r4, #0
 800f5d8:	d16a      	bne.n	800f6b0 <_dtoa_r+0x4e0>
 800f5da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5de:	4b61      	ldr	r3, [pc, #388]	@ (800f764 <_dtoa_r+0x594>)
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	f7f0 fe59 	bl	8000298 <__aeabi_dsub>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f5ee:	462a      	mov	r2, r5
 800f5f0:	4633      	mov	r3, r6
 800f5f2:	f7f1 fa99 	bl	8000b28 <__aeabi_dcmpgt>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f040 8298 	bne.w	800fb2c <_dtoa_r+0x95c>
 800f5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f600:	462a      	mov	r2, r5
 800f602:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f606:	f7f1 fa71 	bl	8000aec <__aeabi_dcmplt>
 800f60a:	bb38      	cbnz	r0, 800f65c <_dtoa_r+0x48c>
 800f60c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f610:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f614:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f616:	2b00      	cmp	r3, #0
 800f618:	f2c0 8157 	blt.w	800f8ca <_dtoa_r+0x6fa>
 800f61c:	2f0e      	cmp	r7, #14
 800f61e:	f300 8154 	bgt.w	800f8ca <_dtoa_r+0x6fa>
 800f622:	4b4b      	ldr	r3, [pc, #300]	@ (800f750 <_dtoa_r+0x580>)
 800f624:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f628:	ed93 7b00 	vldr	d7, [r3]
 800f62c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f62e:	2b00      	cmp	r3, #0
 800f630:	ed8d 7b00 	vstr	d7, [sp]
 800f634:	f280 80e5 	bge.w	800f802 <_dtoa_r+0x632>
 800f638:	9b03      	ldr	r3, [sp, #12]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f300 80e1 	bgt.w	800f802 <_dtoa_r+0x632>
 800f640:	d10c      	bne.n	800f65c <_dtoa_r+0x48c>
 800f642:	4b48      	ldr	r3, [pc, #288]	@ (800f764 <_dtoa_r+0x594>)
 800f644:	2200      	movs	r2, #0
 800f646:	ec51 0b17 	vmov	r0, r1, d7
 800f64a:	f7f0 ffdd 	bl	8000608 <__aeabi_dmul>
 800f64e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f652:	f7f1 fa5f 	bl	8000b14 <__aeabi_dcmpge>
 800f656:	2800      	cmp	r0, #0
 800f658:	f000 8266 	beq.w	800fb28 <_dtoa_r+0x958>
 800f65c:	2400      	movs	r4, #0
 800f65e:	4625      	mov	r5, r4
 800f660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f662:	4656      	mov	r6, sl
 800f664:	ea6f 0803 	mvn.w	r8, r3
 800f668:	2700      	movs	r7, #0
 800f66a:	4621      	mov	r1, r4
 800f66c:	4648      	mov	r0, r9
 800f66e:	f000 fc09 	bl	800fe84 <_Bfree>
 800f672:	2d00      	cmp	r5, #0
 800f674:	f000 80bd 	beq.w	800f7f2 <_dtoa_r+0x622>
 800f678:	b12f      	cbz	r7, 800f686 <_dtoa_r+0x4b6>
 800f67a:	42af      	cmp	r7, r5
 800f67c:	d003      	beq.n	800f686 <_dtoa_r+0x4b6>
 800f67e:	4639      	mov	r1, r7
 800f680:	4648      	mov	r0, r9
 800f682:	f000 fbff 	bl	800fe84 <_Bfree>
 800f686:	4629      	mov	r1, r5
 800f688:	4648      	mov	r0, r9
 800f68a:	f000 fbfb 	bl	800fe84 <_Bfree>
 800f68e:	e0b0      	b.n	800f7f2 <_dtoa_r+0x622>
 800f690:	07e2      	lsls	r2, r4, #31
 800f692:	d505      	bpl.n	800f6a0 <_dtoa_r+0x4d0>
 800f694:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f698:	f7f0 ffb6 	bl	8000608 <__aeabi_dmul>
 800f69c:	3601      	adds	r6, #1
 800f69e:	2301      	movs	r3, #1
 800f6a0:	1064      	asrs	r4, r4, #1
 800f6a2:	3508      	adds	r5, #8
 800f6a4:	e762      	b.n	800f56c <_dtoa_r+0x39c>
 800f6a6:	2602      	movs	r6, #2
 800f6a8:	e765      	b.n	800f576 <_dtoa_r+0x3a6>
 800f6aa:	9c03      	ldr	r4, [sp, #12]
 800f6ac:	46b8      	mov	r8, r7
 800f6ae:	e784      	b.n	800f5ba <_dtoa_r+0x3ea>
 800f6b0:	4b27      	ldr	r3, [pc, #156]	@ (800f750 <_dtoa_r+0x580>)
 800f6b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f6b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f6bc:	4454      	add	r4, sl
 800f6be:	2900      	cmp	r1, #0
 800f6c0:	d054      	beq.n	800f76c <_dtoa_r+0x59c>
 800f6c2:	4929      	ldr	r1, [pc, #164]	@ (800f768 <_dtoa_r+0x598>)
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	f7f1 f8c9 	bl	800085c <__aeabi_ddiv>
 800f6ca:	4633      	mov	r3, r6
 800f6cc:	462a      	mov	r2, r5
 800f6ce:	f7f0 fde3 	bl	8000298 <__aeabi_dsub>
 800f6d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f6d6:	4656      	mov	r6, sl
 800f6d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6dc:	f7f1 fa44 	bl	8000b68 <__aeabi_d2iz>
 800f6e0:	4605      	mov	r5, r0
 800f6e2:	f7f0 ff27 	bl	8000534 <__aeabi_i2d>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6ee:	f7f0 fdd3 	bl	8000298 <__aeabi_dsub>
 800f6f2:	3530      	adds	r5, #48	@ 0x30
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f6fc:	f806 5b01 	strb.w	r5, [r6], #1
 800f700:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f704:	f7f1 f9f2 	bl	8000aec <__aeabi_dcmplt>
 800f708:	2800      	cmp	r0, #0
 800f70a:	d172      	bne.n	800f7f2 <_dtoa_r+0x622>
 800f70c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f710:	4911      	ldr	r1, [pc, #68]	@ (800f758 <_dtoa_r+0x588>)
 800f712:	2000      	movs	r0, #0
 800f714:	f7f0 fdc0 	bl	8000298 <__aeabi_dsub>
 800f718:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f71c:	f7f1 f9e6 	bl	8000aec <__aeabi_dcmplt>
 800f720:	2800      	cmp	r0, #0
 800f722:	f040 80b4 	bne.w	800f88e <_dtoa_r+0x6be>
 800f726:	42a6      	cmp	r6, r4
 800f728:	f43f af70 	beq.w	800f60c <_dtoa_r+0x43c>
 800f72c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f730:	4b0a      	ldr	r3, [pc, #40]	@ (800f75c <_dtoa_r+0x58c>)
 800f732:	2200      	movs	r2, #0
 800f734:	f7f0 ff68 	bl	8000608 <__aeabi_dmul>
 800f738:	4b08      	ldr	r3, [pc, #32]	@ (800f75c <_dtoa_r+0x58c>)
 800f73a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f73e:	2200      	movs	r2, #0
 800f740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f744:	f7f0 ff60 	bl	8000608 <__aeabi_dmul>
 800f748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f74c:	e7c4      	b.n	800f6d8 <_dtoa_r+0x508>
 800f74e:	bf00      	nop
 800f750:	08012858 	.word	0x08012858
 800f754:	08012830 	.word	0x08012830
 800f758:	3ff00000 	.word	0x3ff00000
 800f75c:	40240000 	.word	0x40240000
 800f760:	401c0000 	.word	0x401c0000
 800f764:	40140000 	.word	0x40140000
 800f768:	3fe00000 	.word	0x3fe00000
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	f7f0 ff4a 	bl	8000608 <__aeabi_dmul>
 800f774:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f778:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f77a:	4656      	mov	r6, sl
 800f77c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f780:	f7f1 f9f2 	bl	8000b68 <__aeabi_d2iz>
 800f784:	4605      	mov	r5, r0
 800f786:	f7f0 fed5 	bl	8000534 <__aeabi_i2d>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f792:	f7f0 fd81 	bl	8000298 <__aeabi_dsub>
 800f796:	3530      	adds	r5, #48	@ 0x30
 800f798:	f806 5b01 	strb.w	r5, [r6], #1
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	42a6      	cmp	r6, r4
 800f7a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f7a6:	f04f 0200 	mov.w	r2, #0
 800f7aa:	d124      	bne.n	800f7f6 <_dtoa_r+0x626>
 800f7ac:	4baf      	ldr	r3, [pc, #700]	@ (800fa6c <_dtoa_r+0x89c>)
 800f7ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f7b2:	f7f0 fd73 	bl	800029c <__adddf3>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7be:	f7f1 f9b3 	bl	8000b28 <__aeabi_dcmpgt>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d163      	bne.n	800f88e <_dtoa_r+0x6be>
 800f7c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f7ca:	49a8      	ldr	r1, [pc, #672]	@ (800fa6c <_dtoa_r+0x89c>)
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	f7f0 fd63 	bl	8000298 <__aeabi_dsub>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7da:	f7f1 f987 	bl	8000aec <__aeabi_dcmplt>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f43f af14 	beq.w	800f60c <_dtoa_r+0x43c>
 800f7e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f7e6:	1e73      	subs	r3, r6, #1
 800f7e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f7ee:	2b30      	cmp	r3, #48	@ 0x30
 800f7f0:	d0f8      	beq.n	800f7e4 <_dtoa_r+0x614>
 800f7f2:	4647      	mov	r7, r8
 800f7f4:	e03b      	b.n	800f86e <_dtoa_r+0x69e>
 800f7f6:	4b9e      	ldr	r3, [pc, #632]	@ (800fa70 <_dtoa_r+0x8a0>)
 800f7f8:	f7f0 ff06 	bl	8000608 <__aeabi_dmul>
 800f7fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f800:	e7bc      	b.n	800f77c <_dtoa_r+0x5ac>
 800f802:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f806:	4656      	mov	r6, sl
 800f808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f80c:	4620      	mov	r0, r4
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f1 f824 	bl	800085c <__aeabi_ddiv>
 800f814:	f7f1 f9a8 	bl	8000b68 <__aeabi_d2iz>
 800f818:	4680      	mov	r8, r0
 800f81a:	f7f0 fe8b 	bl	8000534 <__aeabi_i2d>
 800f81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f822:	f7f0 fef1 	bl	8000608 <__aeabi_dmul>
 800f826:	4602      	mov	r2, r0
 800f828:	460b      	mov	r3, r1
 800f82a:	4620      	mov	r0, r4
 800f82c:	4629      	mov	r1, r5
 800f82e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f832:	f7f0 fd31 	bl	8000298 <__aeabi_dsub>
 800f836:	f806 4b01 	strb.w	r4, [r6], #1
 800f83a:	9d03      	ldr	r5, [sp, #12]
 800f83c:	eba6 040a 	sub.w	r4, r6, sl
 800f840:	42a5      	cmp	r5, r4
 800f842:	4602      	mov	r2, r0
 800f844:	460b      	mov	r3, r1
 800f846:	d133      	bne.n	800f8b0 <_dtoa_r+0x6e0>
 800f848:	f7f0 fd28 	bl	800029c <__adddf3>
 800f84c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f850:	4604      	mov	r4, r0
 800f852:	460d      	mov	r5, r1
 800f854:	f7f1 f968 	bl	8000b28 <__aeabi_dcmpgt>
 800f858:	b9c0      	cbnz	r0, 800f88c <_dtoa_r+0x6bc>
 800f85a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f85e:	4620      	mov	r0, r4
 800f860:	4629      	mov	r1, r5
 800f862:	f7f1 f939 	bl	8000ad8 <__aeabi_dcmpeq>
 800f866:	b110      	cbz	r0, 800f86e <_dtoa_r+0x69e>
 800f868:	f018 0f01 	tst.w	r8, #1
 800f86c:	d10e      	bne.n	800f88c <_dtoa_r+0x6bc>
 800f86e:	9902      	ldr	r1, [sp, #8]
 800f870:	4648      	mov	r0, r9
 800f872:	f000 fb07 	bl	800fe84 <_Bfree>
 800f876:	2300      	movs	r3, #0
 800f878:	7033      	strb	r3, [r6, #0]
 800f87a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f87c:	3701      	adds	r7, #1
 800f87e:	601f      	str	r7, [r3, #0]
 800f880:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f882:	2b00      	cmp	r3, #0
 800f884:	f000 824b 	beq.w	800fd1e <_dtoa_r+0xb4e>
 800f888:	601e      	str	r6, [r3, #0]
 800f88a:	e248      	b.n	800fd1e <_dtoa_r+0xb4e>
 800f88c:	46b8      	mov	r8, r7
 800f88e:	4633      	mov	r3, r6
 800f890:	461e      	mov	r6, r3
 800f892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f896:	2a39      	cmp	r2, #57	@ 0x39
 800f898:	d106      	bne.n	800f8a8 <_dtoa_r+0x6d8>
 800f89a:	459a      	cmp	sl, r3
 800f89c:	d1f8      	bne.n	800f890 <_dtoa_r+0x6c0>
 800f89e:	2230      	movs	r2, #48	@ 0x30
 800f8a0:	f108 0801 	add.w	r8, r8, #1
 800f8a4:	f88a 2000 	strb.w	r2, [sl]
 800f8a8:	781a      	ldrb	r2, [r3, #0]
 800f8aa:	3201      	adds	r2, #1
 800f8ac:	701a      	strb	r2, [r3, #0]
 800f8ae:	e7a0      	b.n	800f7f2 <_dtoa_r+0x622>
 800f8b0:	4b6f      	ldr	r3, [pc, #444]	@ (800fa70 <_dtoa_r+0x8a0>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f7f0 fea8 	bl	8000608 <__aeabi_dmul>
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	4604      	mov	r4, r0
 800f8be:	460d      	mov	r5, r1
 800f8c0:	f7f1 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d09f      	beq.n	800f808 <_dtoa_r+0x638>
 800f8c8:	e7d1      	b.n	800f86e <_dtoa_r+0x69e>
 800f8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8cc:	2a00      	cmp	r2, #0
 800f8ce:	f000 80ea 	beq.w	800faa6 <_dtoa_r+0x8d6>
 800f8d2:	9a07      	ldr	r2, [sp, #28]
 800f8d4:	2a01      	cmp	r2, #1
 800f8d6:	f300 80cd 	bgt.w	800fa74 <_dtoa_r+0x8a4>
 800f8da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f8dc:	2a00      	cmp	r2, #0
 800f8de:	f000 80c1 	beq.w	800fa64 <_dtoa_r+0x894>
 800f8e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f8e6:	9c08      	ldr	r4, [sp, #32]
 800f8e8:	9e00      	ldr	r6, [sp, #0]
 800f8ea:	9a00      	ldr	r2, [sp, #0]
 800f8ec:	441a      	add	r2, r3
 800f8ee:	9200      	str	r2, [sp, #0]
 800f8f0:	9a06      	ldr	r2, [sp, #24]
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	441a      	add	r2, r3
 800f8f6:	4648      	mov	r0, r9
 800f8f8:	9206      	str	r2, [sp, #24]
 800f8fa:	f000 fbc1 	bl	8010080 <__i2b>
 800f8fe:	4605      	mov	r5, r0
 800f900:	b166      	cbz	r6, 800f91c <_dtoa_r+0x74c>
 800f902:	9b06      	ldr	r3, [sp, #24]
 800f904:	2b00      	cmp	r3, #0
 800f906:	dd09      	ble.n	800f91c <_dtoa_r+0x74c>
 800f908:	42b3      	cmp	r3, r6
 800f90a:	9a00      	ldr	r2, [sp, #0]
 800f90c:	bfa8      	it	ge
 800f90e:	4633      	movge	r3, r6
 800f910:	1ad2      	subs	r2, r2, r3
 800f912:	9200      	str	r2, [sp, #0]
 800f914:	9a06      	ldr	r2, [sp, #24]
 800f916:	1af6      	subs	r6, r6, r3
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	9306      	str	r3, [sp, #24]
 800f91c:	9b08      	ldr	r3, [sp, #32]
 800f91e:	b30b      	cbz	r3, 800f964 <_dtoa_r+0x794>
 800f920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 80c6 	beq.w	800fab4 <_dtoa_r+0x8e4>
 800f928:	2c00      	cmp	r4, #0
 800f92a:	f000 80c0 	beq.w	800faae <_dtoa_r+0x8de>
 800f92e:	4629      	mov	r1, r5
 800f930:	4622      	mov	r2, r4
 800f932:	4648      	mov	r0, r9
 800f934:	f000 fc5c 	bl	80101f0 <__pow5mult>
 800f938:	9a02      	ldr	r2, [sp, #8]
 800f93a:	4601      	mov	r1, r0
 800f93c:	4605      	mov	r5, r0
 800f93e:	4648      	mov	r0, r9
 800f940:	f000 fbb4 	bl	80100ac <__multiply>
 800f944:	9902      	ldr	r1, [sp, #8]
 800f946:	4680      	mov	r8, r0
 800f948:	4648      	mov	r0, r9
 800f94a:	f000 fa9b 	bl	800fe84 <_Bfree>
 800f94e:	9b08      	ldr	r3, [sp, #32]
 800f950:	1b1b      	subs	r3, r3, r4
 800f952:	9308      	str	r3, [sp, #32]
 800f954:	f000 80b1 	beq.w	800faba <_dtoa_r+0x8ea>
 800f958:	9a08      	ldr	r2, [sp, #32]
 800f95a:	4641      	mov	r1, r8
 800f95c:	4648      	mov	r0, r9
 800f95e:	f000 fc47 	bl	80101f0 <__pow5mult>
 800f962:	9002      	str	r0, [sp, #8]
 800f964:	2101      	movs	r1, #1
 800f966:	4648      	mov	r0, r9
 800f968:	f000 fb8a 	bl	8010080 <__i2b>
 800f96c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f96e:	4604      	mov	r4, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 81d8 	beq.w	800fd26 <_dtoa_r+0xb56>
 800f976:	461a      	mov	r2, r3
 800f978:	4601      	mov	r1, r0
 800f97a:	4648      	mov	r0, r9
 800f97c:	f000 fc38 	bl	80101f0 <__pow5mult>
 800f980:	9b07      	ldr	r3, [sp, #28]
 800f982:	2b01      	cmp	r3, #1
 800f984:	4604      	mov	r4, r0
 800f986:	f300 809f 	bgt.w	800fac8 <_dtoa_r+0x8f8>
 800f98a:	9b04      	ldr	r3, [sp, #16]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f040 8097 	bne.w	800fac0 <_dtoa_r+0x8f0>
 800f992:	9b05      	ldr	r3, [sp, #20]
 800f994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f040 8093 	bne.w	800fac4 <_dtoa_r+0x8f4>
 800f99e:	9b05      	ldr	r3, [sp, #20]
 800f9a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f9a4:	0d1b      	lsrs	r3, r3, #20
 800f9a6:	051b      	lsls	r3, r3, #20
 800f9a8:	b133      	cbz	r3, 800f9b8 <_dtoa_r+0x7e8>
 800f9aa:	9b00      	ldr	r3, [sp, #0]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	9b06      	ldr	r3, [sp, #24]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	9306      	str	r3, [sp, #24]
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	9308      	str	r3, [sp, #32]
 800f9ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 81b8 	beq.w	800fd32 <_dtoa_r+0xb62>
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f9c8:	6918      	ldr	r0, [r3, #16]
 800f9ca:	f000 fb0d 	bl	800ffe8 <__hi0bits>
 800f9ce:	f1c0 0020 	rsb	r0, r0, #32
 800f9d2:	9b06      	ldr	r3, [sp, #24]
 800f9d4:	4418      	add	r0, r3
 800f9d6:	f010 001f 	ands.w	r0, r0, #31
 800f9da:	f000 8082 	beq.w	800fae2 <_dtoa_r+0x912>
 800f9de:	f1c0 0320 	rsb	r3, r0, #32
 800f9e2:	2b04      	cmp	r3, #4
 800f9e4:	dd73      	ble.n	800face <_dtoa_r+0x8fe>
 800f9e6:	9b00      	ldr	r3, [sp, #0]
 800f9e8:	f1c0 001c 	rsb	r0, r0, #28
 800f9ec:	4403      	add	r3, r0
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	9b06      	ldr	r3, [sp, #24]
 800f9f2:	4403      	add	r3, r0
 800f9f4:	4406      	add	r6, r0
 800f9f6:	9306      	str	r3, [sp, #24]
 800f9f8:	9b00      	ldr	r3, [sp, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	dd05      	ble.n	800fa0a <_dtoa_r+0x83a>
 800f9fe:	9902      	ldr	r1, [sp, #8]
 800fa00:	461a      	mov	r2, r3
 800fa02:	4648      	mov	r0, r9
 800fa04:	f000 fc4e 	bl	80102a4 <__lshift>
 800fa08:	9002      	str	r0, [sp, #8]
 800fa0a:	9b06      	ldr	r3, [sp, #24]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dd05      	ble.n	800fa1c <_dtoa_r+0x84c>
 800fa10:	4621      	mov	r1, r4
 800fa12:	461a      	mov	r2, r3
 800fa14:	4648      	mov	r0, r9
 800fa16:	f000 fc45 	bl	80102a4 <__lshift>
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d061      	beq.n	800fae6 <_dtoa_r+0x916>
 800fa22:	9802      	ldr	r0, [sp, #8]
 800fa24:	4621      	mov	r1, r4
 800fa26:	f000 fca9 	bl	801037c <__mcmp>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	da5b      	bge.n	800fae6 <_dtoa_r+0x916>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	9902      	ldr	r1, [sp, #8]
 800fa32:	220a      	movs	r2, #10
 800fa34:	4648      	mov	r0, r9
 800fa36:	f000 fa47 	bl	800fec8 <__multadd>
 800fa3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa3c:	9002      	str	r0, [sp, #8]
 800fa3e:	f107 38ff 	add.w	r8, r7, #4294967295
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 8177 	beq.w	800fd36 <_dtoa_r+0xb66>
 800fa48:	4629      	mov	r1, r5
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	220a      	movs	r2, #10
 800fa4e:	4648      	mov	r0, r9
 800fa50:	f000 fa3a 	bl	800fec8 <__multadd>
 800fa54:	f1bb 0f00 	cmp.w	fp, #0
 800fa58:	4605      	mov	r5, r0
 800fa5a:	dc6f      	bgt.n	800fb3c <_dtoa_r+0x96c>
 800fa5c:	9b07      	ldr	r3, [sp, #28]
 800fa5e:	2b02      	cmp	r3, #2
 800fa60:	dc49      	bgt.n	800faf6 <_dtoa_r+0x926>
 800fa62:	e06b      	b.n	800fb3c <_dtoa_r+0x96c>
 800fa64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fa66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fa6a:	e73c      	b.n	800f8e6 <_dtoa_r+0x716>
 800fa6c:	3fe00000 	.word	0x3fe00000
 800fa70:	40240000 	.word	0x40240000
 800fa74:	9b03      	ldr	r3, [sp, #12]
 800fa76:	1e5c      	subs	r4, r3, #1
 800fa78:	9b08      	ldr	r3, [sp, #32]
 800fa7a:	42a3      	cmp	r3, r4
 800fa7c:	db09      	blt.n	800fa92 <_dtoa_r+0x8c2>
 800fa7e:	1b1c      	subs	r4, r3, r4
 800fa80:	9b03      	ldr	r3, [sp, #12]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f6bf af30 	bge.w	800f8e8 <_dtoa_r+0x718>
 800fa88:	9b00      	ldr	r3, [sp, #0]
 800fa8a:	9a03      	ldr	r2, [sp, #12]
 800fa8c:	1a9e      	subs	r6, r3, r2
 800fa8e:	2300      	movs	r3, #0
 800fa90:	e72b      	b.n	800f8ea <_dtoa_r+0x71a>
 800fa92:	9b08      	ldr	r3, [sp, #32]
 800fa94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa96:	9408      	str	r4, [sp, #32]
 800fa98:	1ae3      	subs	r3, r4, r3
 800fa9a:	441a      	add	r2, r3
 800fa9c:	9e00      	ldr	r6, [sp, #0]
 800fa9e:	9b03      	ldr	r3, [sp, #12]
 800faa0:	920d      	str	r2, [sp, #52]	@ 0x34
 800faa2:	2400      	movs	r4, #0
 800faa4:	e721      	b.n	800f8ea <_dtoa_r+0x71a>
 800faa6:	9c08      	ldr	r4, [sp, #32]
 800faa8:	9e00      	ldr	r6, [sp, #0]
 800faaa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800faac:	e728      	b.n	800f900 <_dtoa_r+0x730>
 800faae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fab2:	e751      	b.n	800f958 <_dtoa_r+0x788>
 800fab4:	9a08      	ldr	r2, [sp, #32]
 800fab6:	9902      	ldr	r1, [sp, #8]
 800fab8:	e750      	b.n	800f95c <_dtoa_r+0x78c>
 800faba:	f8cd 8008 	str.w	r8, [sp, #8]
 800fabe:	e751      	b.n	800f964 <_dtoa_r+0x794>
 800fac0:	2300      	movs	r3, #0
 800fac2:	e779      	b.n	800f9b8 <_dtoa_r+0x7e8>
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	e777      	b.n	800f9b8 <_dtoa_r+0x7e8>
 800fac8:	2300      	movs	r3, #0
 800faca:	9308      	str	r3, [sp, #32]
 800facc:	e779      	b.n	800f9c2 <_dtoa_r+0x7f2>
 800face:	d093      	beq.n	800f9f8 <_dtoa_r+0x828>
 800fad0:	9a00      	ldr	r2, [sp, #0]
 800fad2:	331c      	adds	r3, #28
 800fad4:	441a      	add	r2, r3
 800fad6:	9200      	str	r2, [sp, #0]
 800fad8:	9a06      	ldr	r2, [sp, #24]
 800fada:	441a      	add	r2, r3
 800fadc:	441e      	add	r6, r3
 800fade:	9206      	str	r2, [sp, #24]
 800fae0:	e78a      	b.n	800f9f8 <_dtoa_r+0x828>
 800fae2:	4603      	mov	r3, r0
 800fae4:	e7f4      	b.n	800fad0 <_dtoa_r+0x900>
 800fae6:	9b03      	ldr	r3, [sp, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	46b8      	mov	r8, r7
 800faec:	dc20      	bgt.n	800fb30 <_dtoa_r+0x960>
 800faee:	469b      	mov	fp, r3
 800faf0:	9b07      	ldr	r3, [sp, #28]
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	dd1e      	ble.n	800fb34 <_dtoa_r+0x964>
 800faf6:	f1bb 0f00 	cmp.w	fp, #0
 800fafa:	f47f adb1 	bne.w	800f660 <_dtoa_r+0x490>
 800fafe:	4621      	mov	r1, r4
 800fb00:	465b      	mov	r3, fp
 800fb02:	2205      	movs	r2, #5
 800fb04:	4648      	mov	r0, r9
 800fb06:	f000 f9df 	bl	800fec8 <__multadd>
 800fb0a:	4601      	mov	r1, r0
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	9802      	ldr	r0, [sp, #8]
 800fb10:	f000 fc34 	bl	801037c <__mcmp>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	f77f ada3 	ble.w	800f660 <_dtoa_r+0x490>
 800fb1a:	4656      	mov	r6, sl
 800fb1c:	2331      	movs	r3, #49	@ 0x31
 800fb1e:	f806 3b01 	strb.w	r3, [r6], #1
 800fb22:	f108 0801 	add.w	r8, r8, #1
 800fb26:	e59f      	b.n	800f668 <_dtoa_r+0x498>
 800fb28:	9c03      	ldr	r4, [sp, #12]
 800fb2a:	46b8      	mov	r8, r7
 800fb2c:	4625      	mov	r5, r4
 800fb2e:	e7f4      	b.n	800fb1a <_dtoa_r+0x94a>
 800fb30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fb34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f000 8101 	beq.w	800fd3e <_dtoa_r+0xb6e>
 800fb3c:	2e00      	cmp	r6, #0
 800fb3e:	dd05      	ble.n	800fb4c <_dtoa_r+0x97c>
 800fb40:	4629      	mov	r1, r5
 800fb42:	4632      	mov	r2, r6
 800fb44:	4648      	mov	r0, r9
 800fb46:	f000 fbad 	bl	80102a4 <__lshift>
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	9b08      	ldr	r3, [sp, #32]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d05c      	beq.n	800fc0c <_dtoa_r+0xa3c>
 800fb52:	6869      	ldr	r1, [r5, #4]
 800fb54:	4648      	mov	r0, r9
 800fb56:	f000 f955 	bl	800fe04 <_Balloc>
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	b928      	cbnz	r0, 800fb6a <_dtoa_r+0x99a>
 800fb5e:	4b82      	ldr	r3, [pc, #520]	@ (800fd68 <_dtoa_r+0xb98>)
 800fb60:	4602      	mov	r2, r0
 800fb62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fb66:	f7ff bb4a 	b.w	800f1fe <_dtoa_r+0x2e>
 800fb6a:	692a      	ldr	r2, [r5, #16]
 800fb6c:	3202      	adds	r2, #2
 800fb6e:	0092      	lsls	r2, r2, #2
 800fb70:	f105 010c 	add.w	r1, r5, #12
 800fb74:	300c      	adds	r0, #12
 800fb76:	f7ff fa8c 	bl	800f092 <memcpy>
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	4631      	mov	r1, r6
 800fb7e:	4648      	mov	r0, r9
 800fb80:	f000 fb90 	bl	80102a4 <__lshift>
 800fb84:	f10a 0301 	add.w	r3, sl, #1
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	eb0a 030b 	add.w	r3, sl, fp
 800fb8e:	9308      	str	r3, [sp, #32]
 800fb90:	9b04      	ldr	r3, [sp, #16]
 800fb92:	f003 0301 	and.w	r3, r3, #1
 800fb96:	462f      	mov	r7, r5
 800fb98:	9306      	str	r3, [sp, #24]
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	9b00      	ldr	r3, [sp, #0]
 800fb9e:	9802      	ldr	r0, [sp, #8]
 800fba0:	4621      	mov	r1, r4
 800fba2:	f103 3bff 	add.w	fp, r3, #4294967295
 800fba6:	f7ff fa89 	bl	800f0bc <quorem>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	3330      	adds	r3, #48	@ 0x30
 800fbae:	9003      	str	r0, [sp, #12]
 800fbb0:	4639      	mov	r1, r7
 800fbb2:	9802      	ldr	r0, [sp, #8]
 800fbb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbb6:	f000 fbe1 	bl	801037c <__mcmp>
 800fbba:	462a      	mov	r2, r5
 800fbbc:	9004      	str	r0, [sp, #16]
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4648      	mov	r0, r9
 800fbc2:	f000 fbf7 	bl	80103b4 <__mdiff>
 800fbc6:	68c2      	ldr	r2, [r0, #12]
 800fbc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbca:	4606      	mov	r6, r0
 800fbcc:	bb02      	cbnz	r2, 800fc10 <_dtoa_r+0xa40>
 800fbce:	4601      	mov	r1, r0
 800fbd0:	9802      	ldr	r0, [sp, #8]
 800fbd2:	f000 fbd3 	bl	801037c <__mcmp>
 800fbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd8:	4602      	mov	r2, r0
 800fbda:	4631      	mov	r1, r6
 800fbdc:	4648      	mov	r0, r9
 800fbde:	920c      	str	r2, [sp, #48]	@ 0x30
 800fbe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbe2:	f000 f94f 	bl	800fe84 <_Bfree>
 800fbe6:	9b07      	ldr	r3, [sp, #28]
 800fbe8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fbea:	9e00      	ldr	r6, [sp, #0]
 800fbec:	ea42 0103 	orr.w	r1, r2, r3
 800fbf0:	9b06      	ldr	r3, [sp, #24]
 800fbf2:	4319      	orrs	r1, r3
 800fbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf6:	d10d      	bne.n	800fc14 <_dtoa_r+0xa44>
 800fbf8:	2b39      	cmp	r3, #57	@ 0x39
 800fbfa:	d027      	beq.n	800fc4c <_dtoa_r+0xa7c>
 800fbfc:	9a04      	ldr	r2, [sp, #16]
 800fbfe:	2a00      	cmp	r2, #0
 800fc00:	dd01      	ble.n	800fc06 <_dtoa_r+0xa36>
 800fc02:	9b03      	ldr	r3, [sp, #12]
 800fc04:	3331      	adds	r3, #49	@ 0x31
 800fc06:	f88b 3000 	strb.w	r3, [fp]
 800fc0a:	e52e      	b.n	800f66a <_dtoa_r+0x49a>
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	e7b9      	b.n	800fb84 <_dtoa_r+0x9b4>
 800fc10:	2201      	movs	r2, #1
 800fc12:	e7e2      	b.n	800fbda <_dtoa_r+0xa0a>
 800fc14:	9904      	ldr	r1, [sp, #16]
 800fc16:	2900      	cmp	r1, #0
 800fc18:	db04      	blt.n	800fc24 <_dtoa_r+0xa54>
 800fc1a:	9807      	ldr	r0, [sp, #28]
 800fc1c:	4301      	orrs	r1, r0
 800fc1e:	9806      	ldr	r0, [sp, #24]
 800fc20:	4301      	orrs	r1, r0
 800fc22:	d120      	bne.n	800fc66 <_dtoa_r+0xa96>
 800fc24:	2a00      	cmp	r2, #0
 800fc26:	ddee      	ble.n	800fc06 <_dtoa_r+0xa36>
 800fc28:	9902      	ldr	r1, [sp, #8]
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	4648      	mov	r0, r9
 800fc30:	f000 fb38 	bl	80102a4 <__lshift>
 800fc34:	4621      	mov	r1, r4
 800fc36:	9002      	str	r0, [sp, #8]
 800fc38:	f000 fba0 	bl	801037c <__mcmp>
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	9b00      	ldr	r3, [sp, #0]
 800fc40:	dc02      	bgt.n	800fc48 <_dtoa_r+0xa78>
 800fc42:	d1e0      	bne.n	800fc06 <_dtoa_r+0xa36>
 800fc44:	07da      	lsls	r2, r3, #31
 800fc46:	d5de      	bpl.n	800fc06 <_dtoa_r+0xa36>
 800fc48:	2b39      	cmp	r3, #57	@ 0x39
 800fc4a:	d1da      	bne.n	800fc02 <_dtoa_r+0xa32>
 800fc4c:	2339      	movs	r3, #57	@ 0x39
 800fc4e:	f88b 3000 	strb.w	r3, [fp]
 800fc52:	4633      	mov	r3, r6
 800fc54:	461e      	mov	r6, r3
 800fc56:	3b01      	subs	r3, #1
 800fc58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fc5c:	2a39      	cmp	r2, #57	@ 0x39
 800fc5e:	d04e      	beq.n	800fcfe <_dtoa_r+0xb2e>
 800fc60:	3201      	adds	r2, #1
 800fc62:	701a      	strb	r2, [r3, #0]
 800fc64:	e501      	b.n	800f66a <_dtoa_r+0x49a>
 800fc66:	2a00      	cmp	r2, #0
 800fc68:	dd03      	ble.n	800fc72 <_dtoa_r+0xaa2>
 800fc6a:	2b39      	cmp	r3, #57	@ 0x39
 800fc6c:	d0ee      	beq.n	800fc4c <_dtoa_r+0xa7c>
 800fc6e:	3301      	adds	r3, #1
 800fc70:	e7c9      	b.n	800fc06 <_dtoa_r+0xa36>
 800fc72:	9a00      	ldr	r2, [sp, #0]
 800fc74:	9908      	ldr	r1, [sp, #32]
 800fc76:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fc7a:	428a      	cmp	r2, r1
 800fc7c:	d028      	beq.n	800fcd0 <_dtoa_r+0xb00>
 800fc7e:	9902      	ldr	r1, [sp, #8]
 800fc80:	2300      	movs	r3, #0
 800fc82:	220a      	movs	r2, #10
 800fc84:	4648      	mov	r0, r9
 800fc86:	f000 f91f 	bl	800fec8 <__multadd>
 800fc8a:	42af      	cmp	r7, r5
 800fc8c:	9002      	str	r0, [sp, #8]
 800fc8e:	f04f 0300 	mov.w	r3, #0
 800fc92:	f04f 020a 	mov.w	r2, #10
 800fc96:	4639      	mov	r1, r7
 800fc98:	4648      	mov	r0, r9
 800fc9a:	d107      	bne.n	800fcac <_dtoa_r+0xadc>
 800fc9c:	f000 f914 	bl	800fec8 <__multadd>
 800fca0:	4607      	mov	r7, r0
 800fca2:	4605      	mov	r5, r0
 800fca4:	9b00      	ldr	r3, [sp, #0]
 800fca6:	3301      	adds	r3, #1
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	e777      	b.n	800fb9c <_dtoa_r+0x9cc>
 800fcac:	f000 f90c 	bl	800fec8 <__multadd>
 800fcb0:	4629      	mov	r1, r5
 800fcb2:	4607      	mov	r7, r0
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	220a      	movs	r2, #10
 800fcb8:	4648      	mov	r0, r9
 800fcba:	f000 f905 	bl	800fec8 <__multadd>
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	e7f0      	b.n	800fca4 <_dtoa_r+0xad4>
 800fcc2:	f1bb 0f00 	cmp.w	fp, #0
 800fcc6:	bfcc      	ite	gt
 800fcc8:	465e      	movgt	r6, fp
 800fcca:	2601      	movle	r6, #1
 800fccc:	4456      	add	r6, sl
 800fcce:	2700      	movs	r7, #0
 800fcd0:	9902      	ldr	r1, [sp, #8]
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	4648      	mov	r0, r9
 800fcd8:	f000 fae4 	bl	80102a4 <__lshift>
 800fcdc:	4621      	mov	r1, r4
 800fcde:	9002      	str	r0, [sp, #8]
 800fce0:	f000 fb4c 	bl	801037c <__mcmp>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	dcb4      	bgt.n	800fc52 <_dtoa_r+0xa82>
 800fce8:	d102      	bne.n	800fcf0 <_dtoa_r+0xb20>
 800fcea:	9b00      	ldr	r3, [sp, #0]
 800fcec:	07db      	lsls	r3, r3, #31
 800fcee:	d4b0      	bmi.n	800fc52 <_dtoa_r+0xa82>
 800fcf0:	4633      	mov	r3, r6
 800fcf2:	461e      	mov	r6, r3
 800fcf4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcf8:	2a30      	cmp	r2, #48	@ 0x30
 800fcfa:	d0fa      	beq.n	800fcf2 <_dtoa_r+0xb22>
 800fcfc:	e4b5      	b.n	800f66a <_dtoa_r+0x49a>
 800fcfe:	459a      	cmp	sl, r3
 800fd00:	d1a8      	bne.n	800fc54 <_dtoa_r+0xa84>
 800fd02:	2331      	movs	r3, #49	@ 0x31
 800fd04:	f108 0801 	add.w	r8, r8, #1
 800fd08:	f88a 3000 	strb.w	r3, [sl]
 800fd0c:	e4ad      	b.n	800f66a <_dtoa_r+0x49a>
 800fd0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800fd6c <_dtoa_r+0xb9c>
 800fd14:	b11b      	cbz	r3, 800fd1e <_dtoa_r+0xb4e>
 800fd16:	f10a 0308 	add.w	r3, sl, #8
 800fd1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fd1c:	6013      	str	r3, [r2, #0]
 800fd1e:	4650      	mov	r0, sl
 800fd20:	b017      	add	sp, #92	@ 0x5c
 800fd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd26:	9b07      	ldr	r3, [sp, #28]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	f77f ae2e 	ble.w	800f98a <_dtoa_r+0x7ba>
 800fd2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd30:	9308      	str	r3, [sp, #32]
 800fd32:	2001      	movs	r0, #1
 800fd34:	e64d      	b.n	800f9d2 <_dtoa_r+0x802>
 800fd36:	f1bb 0f00 	cmp.w	fp, #0
 800fd3a:	f77f aed9 	ble.w	800faf0 <_dtoa_r+0x920>
 800fd3e:	4656      	mov	r6, sl
 800fd40:	9802      	ldr	r0, [sp, #8]
 800fd42:	4621      	mov	r1, r4
 800fd44:	f7ff f9ba 	bl	800f0bc <quorem>
 800fd48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800fd4c:	f806 3b01 	strb.w	r3, [r6], #1
 800fd50:	eba6 020a 	sub.w	r2, r6, sl
 800fd54:	4593      	cmp	fp, r2
 800fd56:	ddb4      	ble.n	800fcc2 <_dtoa_r+0xaf2>
 800fd58:	9902      	ldr	r1, [sp, #8]
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	220a      	movs	r2, #10
 800fd5e:	4648      	mov	r0, r9
 800fd60:	f000 f8b2 	bl	800fec8 <__multadd>
 800fd64:	9002      	str	r0, [sp, #8]
 800fd66:	e7eb      	b.n	800fd40 <_dtoa_r+0xb70>
 800fd68:	080126fd 	.word	0x080126fd
 800fd6c:	08012681 	.word	0x08012681

0800fd70 <_free_r>:
 800fd70:	b538      	push	{r3, r4, r5, lr}
 800fd72:	4605      	mov	r5, r0
 800fd74:	2900      	cmp	r1, #0
 800fd76:	d041      	beq.n	800fdfc <_free_r+0x8c>
 800fd78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd7c:	1f0c      	subs	r4, r1, #4
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	bfb8      	it	lt
 800fd82:	18e4      	addlt	r4, r4, r3
 800fd84:	f7fe f95e 	bl	800e044 <__malloc_lock>
 800fd88:	4a1d      	ldr	r2, [pc, #116]	@ (800fe00 <_free_r+0x90>)
 800fd8a:	6813      	ldr	r3, [r2, #0]
 800fd8c:	b933      	cbnz	r3, 800fd9c <_free_r+0x2c>
 800fd8e:	6063      	str	r3, [r4, #4]
 800fd90:	6014      	str	r4, [r2, #0]
 800fd92:	4628      	mov	r0, r5
 800fd94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd98:	f7fe b95a 	b.w	800e050 <__malloc_unlock>
 800fd9c:	42a3      	cmp	r3, r4
 800fd9e:	d908      	bls.n	800fdb2 <_free_r+0x42>
 800fda0:	6820      	ldr	r0, [r4, #0]
 800fda2:	1821      	adds	r1, r4, r0
 800fda4:	428b      	cmp	r3, r1
 800fda6:	bf01      	itttt	eq
 800fda8:	6819      	ldreq	r1, [r3, #0]
 800fdaa:	685b      	ldreq	r3, [r3, #4]
 800fdac:	1809      	addeq	r1, r1, r0
 800fdae:	6021      	streq	r1, [r4, #0]
 800fdb0:	e7ed      	b.n	800fd8e <_free_r+0x1e>
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	b10b      	cbz	r3, 800fdbc <_free_r+0x4c>
 800fdb8:	42a3      	cmp	r3, r4
 800fdba:	d9fa      	bls.n	800fdb2 <_free_r+0x42>
 800fdbc:	6811      	ldr	r1, [r2, #0]
 800fdbe:	1850      	adds	r0, r2, r1
 800fdc0:	42a0      	cmp	r0, r4
 800fdc2:	d10b      	bne.n	800fddc <_free_r+0x6c>
 800fdc4:	6820      	ldr	r0, [r4, #0]
 800fdc6:	4401      	add	r1, r0
 800fdc8:	1850      	adds	r0, r2, r1
 800fdca:	4283      	cmp	r3, r0
 800fdcc:	6011      	str	r1, [r2, #0]
 800fdce:	d1e0      	bne.n	800fd92 <_free_r+0x22>
 800fdd0:	6818      	ldr	r0, [r3, #0]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	6053      	str	r3, [r2, #4]
 800fdd6:	4408      	add	r0, r1
 800fdd8:	6010      	str	r0, [r2, #0]
 800fdda:	e7da      	b.n	800fd92 <_free_r+0x22>
 800fddc:	d902      	bls.n	800fde4 <_free_r+0x74>
 800fdde:	230c      	movs	r3, #12
 800fde0:	602b      	str	r3, [r5, #0]
 800fde2:	e7d6      	b.n	800fd92 <_free_r+0x22>
 800fde4:	6820      	ldr	r0, [r4, #0]
 800fde6:	1821      	adds	r1, r4, r0
 800fde8:	428b      	cmp	r3, r1
 800fdea:	bf04      	itt	eq
 800fdec:	6819      	ldreq	r1, [r3, #0]
 800fdee:	685b      	ldreq	r3, [r3, #4]
 800fdf0:	6063      	str	r3, [r4, #4]
 800fdf2:	bf04      	itt	eq
 800fdf4:	1809      	addeq	r1, r1, r0
 800fdf6:	6021      	streq	r1, [r4, #0]
 800fdf8:	6054      	str	r4, [r2, #4]
 800fdfa:	e7ca      	b.n	800fd92 <_free_r+0x22>
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	bf00      	nop
 800fe00:	200019d4 	.word	0x200019d4

0800fe04 <_Balloc>:
 800fe04:	b570      	push	{r4, r5, r6, lr}
 800fe06:	69c6      	ldr	r6, [r0, #28]
 800fe08:	4604      	mov	r4, r0
 800fe0a:	460d      	mov	r5, r1
 800fe0c:	b976      	cbnz	r6, 800fe2c <_Balloc+0x28>
 800fe0e:	2010      	movs	r0, #16
 800fe10:	f7fe f86e 	bl	800def0 <malloc>
 800fe14:	4602      	mov	r2, r0
 800fe16:	61e0      	str	r0, [r4, #28]
 800fe18:	b920      	cbnz	r0, 800fe24 <_Balloc+0x20>
 800fe1a:	4b18      	ldr	r3, [pc, #96]	@ (800fe7c <_Balloc+0x78>)
 800fe1c:	4818      	ldr	r0, [pc, #96]	@ (800fe80 <_Balloc+0x7c>)
 800fe1e:	216b      	movs	r1, #107	@ 0x6b
 800fe20:	f001 fd5a 	bl	80118d8 <__assert_func>
 800fe24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe28:	6006      	str	r6, [r0, #0]
 800fe2a:	60c6      	str	r6, [r0, #12]
 800fe2c:	69e6      	ldr	r6, [r4, #28]
 800fe2e:	68f3      	ldr	r3, [r6, #12]
 800fe30:	b183      	cbz	r3, 800fe54 <_Balloc+0x50>
 800fe32:	69e3      	ldr	r3, [r4, #28]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe3a:	b9b8      	cbnz	r0, 800fe6c <_Balloc+0x68>
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	fa01 f605 	lsl.w	r6, r1, r5
 800fe42:	1d72      	adds	r2, r6, #5
 800fe44:	0092      	lsls	r2, r2, #2
 800fe46:	4620      	mov	r0, r4
 800fe48:	f001 fd64 	bl	8011914 <_calloc_r>
 800fe4c:	b160      	cbz	r0, 800fe68 <_Balloc+0x64>
 800fe4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe52:	e00e      	b.n	800fe72 <_Balloc+0x6e>
 800fe54:	2221      	movs	r2, #33	@ 0x21
 800fe56:	2104      	movs	r1, #4
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f001 fd5b 	bl	8011914 <_calloc_r>
 800fe5e:	69e3      	ldr	r3, [r4, #28]
 800fe60:	60f0      	str	r0, [r6, #12]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d1e4      	bne.n	800fe32 <_Balloc+0x2e>
 800fe68:	2000      	movs	r0, #0
 800fe6a:	bd70      	pop	{r4, r5, r6, pc}
 800fe6c:	6802      	ldr	r2, [r0, #0]
 800fe6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe72:	2300      	movs	r3, #0
 800fe74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe78:	e7f7      	b.n	800fe6a <_Balloc+0x66>
 800fe7a:	bf00      	nop
 800fe7c:	0801268e 	.word	0x0801268e
 800fe80:	0801270e 	.word	0x0801270e

0800fe84 <_Bfree>:
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	69c6      	ldr	r6, [r0, #28]
 800fe88:	4605      	mov	r5, r0
 800fe8a:	460c      	mov	r4, r1
 800fe8c:	b976      	cbnz	r6, 800feac <_Bfree+0x28>
 800fe8e:	2010      	movs	r0, #16
 800fe90:	f7fe f82e 	bl	800def0 <malloc>
 800fe94:	4602      	mov	r2, r0
 800fe96:	61e8      	str	r0, [r5, #28]
 800fe98:	b920      	cbnz	r0, 800fea4 <_Bfree+0x20>
 800fe9a:	4b09      	ldr	r3, [pc, #36]	@ (800fec0 <_Bfree+0x3c>)
 800fe9c:	4809      	ldr	r0, [pc, #36]	@ (800fec4 <_Bfree+0x40>)
 800fe9e:	218f      	movs	r1, #143	@ 0x8f
 800fea0:	f001 fd1a 	bl	80118d8 <__assert_func>
 800fea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fea8:	6006      	str	r6, [r0, #0]
 800feaa:	60c6      	str	r6, [r0, #12]
 800feac:	b13c      	cbz	r4, 800febe <_Bfree+0x3a>
 800feae:	69eb      	ldr	r3, [r5, #28]
 800feb0:	6862      	ldr	r2, [r4, #4]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800feb8:	6021      	str	r1, [r4, #0]
 800feba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800febe:	bd70      	pop	{r4, r5, r6, pc}
 800fec0:	0801268e 	.word	0x0801268e
 800fec4:	0801270e 	.word	0x0801270e

0800fec8 <__multadd>:
 800fec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fecc:	690d      	ldr	r5, [r1, #16]
 800fece:	4607      	mov	r7, r0
 800fed0:	460c      	mov	r4, r1
 800fed2:	461e      	mov	r6, r3
 800fed4:	f101 0c14 	add.w	ip, r1, #20
 800fed8:	2000      	movs	r0, #0
 800feda:	f8dc 3000 	ldr.w	r3, [ip]
 800fede:	b299      	uxth	r1, r3
 800fee0:	fb02 6101 	mla	r1, r2, r1, r6
 800fee4:	0c1e      	lsrs	r6, r3, #16
 800fee6:	0c0b      	lsrs	r3, r1, #16
 800fee8:	fb02 3306 	mla	r3, r2, r6, r3
 800feec:	b289      	uxth	r1, r1
 800feee:	3001      	adds	r0, #1
 800fef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fef4:	4285      	cmp	r5, r0
 800fef6:	f84c 1b04 	str.w	r1, [ip], #4
 800fefa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fefe:	dcec      	bgt.n	800feda <__multadd+0x12>
 800ff00:	b30e      	cbz	r6, 800ff46 <__multadd+0x7e>
 800ff02:	68a3      	ldr	r3, [r4, #8]
 800ff04:	42ab      	cmp	r3, r5
 800ff06:	dc19      	bgt.n	800ff3c <__multadd+0x74>
 800ff08:	6861      	ldr	r1, [r4, #4]
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	3101      	adds	r1, #1
 800ff0e:	f7ff ff79 	bl	800fe04 <_Balloc>
 800ff12:	4680      	mov	r8, r0
 800ff14:	b928      	cbnz	r0, 800ff22 <__multadd+0x5a>
 800ff16:	4602      	mov	r2, r0
 800ff18:	4b0c      	ldr	r3, [pc, #48]	@ (800ff4c <__multadd+0x84>)
 800ff1a:	480d      	ldr	r0, [pc, #52]	@ (800ff50 <__multadd+0x88>)
 800ff1c:	21ba      	movs	r1, #186	@ 0xba
 800ff1e:	f001 fcdb 	bl	80118d8 <__assert_func>
 800ff22:	6922      	ldr	r2, [r4, #16]
 800ff24:	3202      	adds	r2, #2
 800ff26:	f104 010c 	add.w	r1, r4, #12
 800ff2a:	0092      	lsls	r2, r2, #2
 800ff2c:	300c      	adds	r0, #12
 800ff2e:	f7ff f8b0 	bl	800f092 <memcpy>
 800ff32:	4621      	mov	r1, r4
 800ff34:	4638      	mov	r0, r7
 800ff36:	f7ff ffa5 	bl	800fe84 <_Bfree>
 800ff3a:	4644      	mov	r4, r8
 800ff3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff40:	3501      	adds	r5, #1
 800ff42:	615e      	str	r6, [r3, #20]
 800ff44:	6125      	str	r5, [r4, #16]
 800ff46:	4620      	mov	r0, r4
 800ff48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4c:	080126fd 	.word	0x080126fd
 800ff50:	0801270e 	.word	0x0801270e

0800ff54 <__s2b>:
 800ff54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff58:	460c      	mov	r4, r1
 800ff5a:	4615      	mov	r5, r2
 800ff5c:	461f      	mov	r7, r3
 800ff5e:	2209      	movs	r2, #9
 800ff60:	3308      	adds	r3, #8
 800ff62:	4606      	mov	r6, r0
 800ff64:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff68:	2100      	movs	r1, #0
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	db09      	blt.n	800ff84 <__s2b+0x30>
 800ff70:	4630      	mov	r0, r6
 800ff72:	f7ff ff47 	bl	800fe04 <_Balloc>
 800ff76:	b940      	cbnz	r0, 800ff8a <__s2b+0x36>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	4b19      	ldr	r3, [pc, #100]	@ (800ffe0 <__s2b+0x8c>)
 800ff7c:	4819      	ldr	r0, [pc, #100]	@ (800ffe4 <__s2b+0x90>)
 800ff7e:	21d3      	movs	r1, #211	@ 0xd3
 800ff80:	f001 fcaa 	bl	80118d8 <__assert_func>
 800ff84:	0052      	lsls	r2, r2, #1
 800ff86:	3101      	adds	r1, #1
 800ff88:	e7f0      	b.n	800ff6c <__s2b+0x18>
 800ff8a:	9b08      	ldr	r3, [sp, #32]
 800ff8c:	6143      	str	r3, [r0, #20]
 800ff8e:	2d09      	cmp	r5, #9
 800ff90:	f04f 0301 	mov.w	r3, #1
 800ff94:	6103      	str	r3, [r0, #16]
 800ff96:	dd16      	ble.n	800ffc6 <__s2b+0x72>
 800ff98:	f104 0909 	add.w	r9, r4, #9
 800ff9c:	46c8      	mov	r8, r9
 800ff9e:	442c      	add	r4, r5
 800ffa0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ffa4:	4601      	mov	r1, r0
 800ffa6:	3b30      	subs	r3, #48	@ 0x30
 800ffa8:	220a      	movs	r2, #10
 800ffaa:	4630      	mov	r0, r6
 800ffac:	f7ff ff8c 	bl	800fec8 <__multadd>
 800ffb0:	45a0      	cmp	r8, r4
 800ffb2:	d1f5      	bne.n	800ffa0 <__s2b+0x4c>
 800ffb4:	f1a5 0408 	sub.w	r4, r5, #8
 800ffb8:	444c      	add	r4, r9
 800ffba:	1b2d      	subs	r5, r5, r4
 800ffbc:	1963      	adds	r3, r4, r5
 800ffbe:	42bb      	cmp	r3, r7
 800ffc0:	db04      	blt.n	800ffcc <__s2b+0x78>
 800ffc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffc6:	340a      	adds	r4, #10
 800ffc8:	2509      	movs	r5, #9
 800ffca:	e7f6      	b.n	800ffba <__s2b+0x66>
 800ffcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ffd0:	4601      	mov	r1, r0
 800ffd2:	3b30      	subs	r3, #48	@ 0x30
 800ffd4:	220a      	movs	r2, #10
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	f7ff ff76 	bl	800fec8 <__multadd>
 800ffdc:	e7ee      	b.n	800ffbc <__s2b+0x68>
 800ffde:	bf00      	nop
 800ffe0:	080126fd 	.word	0x080126fd
 800ffe4:	0801270e 	.word	0x0801270e

0800ffe8 <__hi0bits>:
 800ffe8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ffec:	4603      	mov	r3, r0
 800ffee:	bf36      	itet	cc
 800fff0:	0403      	lslcc	r3, r0, #16
 800fff2:	2000      	movcs	r0, #0
 800fff4:	2010      	movcc	r0, #16
 800fff6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fffa:	bf3c      	itt	cc
 800fffc:	021b      	lslcc	r3, r3, #8
 800fffe:	3008      	addcc	r0, #8
 8010000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010004:	bf3c      	itt	cc
 8010006:	011b      	lslcc	r3, r3, #4
 8010008:	3004      	addcc	r0, #4
 801000a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801000e:	bf3c      	itt	cc
 8010010:	009b      	lslcc	r3, r3, #2
 8010012:	3002      	addcc	r0, #2
 8010014:	2b00      	cmp	r3, #0
 8010016:	db05      	blt.n	8010024 <__hi0bits+0x3c>
 8010018:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801001c:	f100 0001 	add.w	r0, r0, #1
 8010020:	bf08      	it	eq
 8010022:	2020      	moveq	r0, #32
 8010024:	4770      	bx	lr

08010026 <__lo0bits>:
 8010026:	6803      	ldr	r3, [r0, #0]
 8010028:	4602      	mov	r2, r0
 801002a:	f013 0007 	ands.w	r0, r3, #7
 801002e:	d00b      	beq.n	8010048 <__lo0bits+0x22>
 8010030:	07d9      	lsls	r1, r3, #31
 8010032:	d421      	bmi.n	8010078 <__lo0bits+0x52>
 8010034:	0798      	lsls	r0, r3, #30
 8010036:	bf49      	itett	mi
 8010038:	085b      	lsrmi	r3, r3, #1
 801003a:	089b      	lsrpl	r3, r3, #2
 801003c:	2001      	movmi	r0, #1
 801003e:	6013      	strmi	r3, [r2, #0]
 8010040:	bf5c      	itt	pl
 8010042:	6013      	strpl	r3, [r2, #0]
 8010044:	2002      	movpl	r0, #2
 8010046:	4770      	bx	lr
 8010048:	b299      	uxth	r1, r3
 801004a:	b909      	cbnz	r1, 8010050 <__lo0bits+0x2a>
 801004c:	0c1b      	lsrs	r3, r3, #16
 801004e:	2010      	movs	r0, #16
 8010050:	b2d9      	uxtb	r1, r3
 8010052:	b909      	cbnz	r1, 8010058 <__lo0bits+0x32>
 8010054:	3008      	adds	r0, #8
 8010056:	0a1b      	lsrs	r3, r3, #8
 8010058:	0719      	lsls	r1, r3, #28
 801005a:	bf04      	itt	eq
 801005c:	091b      	lsreq	r3, r3, #4
 801005e:	3004      	addeq	r0, #4
 8010060:	0799      	lsls	r1, r3, #30
 8010062:	bf04      	itt	eq
 8010064:	089b      	lsreq	r3, r3, #2
 8010066:	3002      	addeq	r0, #2
 8010068:	07d9      	lsls	r1, r3, #31
 801006a:	d403      	bmi.n	8010074 <__lo0bits+0x4e>
 801006c:	085b      	lsrs	r3, r3, #1
 801006e:	f100 0001 	add.w	r0, r0, #1
 8010072:	d003      	beq.n	801007c <__lo0bits+0x56>
 8010074:	6013      	str	r3, [r2, #0]
 8010076:	4770      	bx	lr
 8010078:	2000      	movs	r0, #0
 801007a:	4770      	bx	lr
 801007c:	2020      	movs	r0, #32
 801007e:	4770      	bx	lr

08010080 <__i2b>:
 8010080:	b510      	push	{r4, lr}
 8010082:	460c      	mov	r4, r1
 8010084:	2101      	movs	r1, #1
 8010086:	f7ff febd 	bl	800fe04 <_Balloc>
 801008a:	4602      	mov	r2, r0
 801008c:	b928      	cbnz	r0, 801009a <__i2b+0x1a>
 801008e:	4b05      	ldr	r3, [pc, #20]	@ (80100a4 <__i2b+0x24>)
 8010090:	4805      	ldr	r0, [pc, #20]	@ (80100a8 <__i2b+0x28>)
 8010092:	f240 1145 	movw	r1, #325	@ 0x145
 8010096:	f001 fc1f 	bl	80118d8 <__assert_func>
 801009a:	2301      	movs	r3, #1
 801009c:	6144      	str	r4, [r0, #20]
 801009e:	6103      	str	r3, [r0, #16]
 80100a0:	bd10      	pop	{r4, pc}
 80100a2:	bf00      	nop
 80100a4:	080126fd 	.word	0x080126fd
 80100a8:	0801270e 	.word	0x0801270e

080100ac <__multiply>:
 80100ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b0:	4617      	mov	r7, r2
 80100b2:	690a      	ldr	r2, [r1, #16]
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	bfa8      	it	ge
 80100ba:	463b      	movge	r3, r7
 80100bc:	4689      	mov	r9, r1
 80100be:	bfa4      	itt	ge
 80100c0:	460f      	movge	r7, r1
 80100c2:	4699      	movge	r9, r3
 80100c4:	693d      	ldr	r5, [r7, #16]
 80100c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	6879      	ldr	r1, [r7, #4]
 80100ce:	eb05 060a 	add.w	r6, r5, sl
 80100d2:	42b3      	cmp	r3, r6
 80100d4:	b085      	sub	sp, #20
 80100d6:	bfb8      	it	lt
 80100d8:	3101      	addlt	r1, #1
 80100da:	f7ff fe93 	bl	800fe04 <_Balloc>
 80100de:	b930      	cbnz	r0, 80100ee <__multiply+0x42>
 80100e0:	4602      	mov	r2, r0
 80100e2:	4b41      	ldr	r3, [pc, #260]	@ (80101e8 <__multiply+0x13c>)
 80100e4:	4841      	ldr	r0, [pc, #260]	@ (80101ec <__multiply+0x140>)
 80100e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80100ea:	f001 fbf5 	bl	80118d8 <__assert_func>
 80100ee:	f100 0414 	add.w	r4, r0, #20
 80100f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80100f6:	4623      	mov	r3, r4
 80100f8:	2200      	movs	r2, #0
 80100fa:	4573      	cmp	r3, lr
 80100fc:	d320      	bcc.n	8010140 <__multiply+0x94>
 80100fe:	f107 0814 	add.w	r8, r7, #20
 8010102:	f109 0114 	add.w	r1, r9, #20
 8010106:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801010a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801010e:	9302      	str	r3, [sp, #8]
 8010110:	1beb      	subs	r3, r5, r7
 8010112:	3b15      	subs	r3, #21
 8010114:	f023 0303 	bic.w	r3, r3, #3
 8010118:	3304      	adds	r3, #4
 801011a:	3715      	adds	r7, #21
 801011c:	42bd      	cmp	r5, r7
 801011e:	bf38      	it	cc
 8010120:	2304      	movcc	r3, #4
 8010122:	9301      	str	r3, [sp, #4]
 8010124:	9b02      	ldr	r3, [sp, #8]
 8010126:	9103      	str	r1, [sp, #12]
 8010128:	428b      	cmp	r3, r1
 801012a:	d80c      	bhi.n	8010146 <__multiply+0x9a>
 801012c:	2e00      	cmp	r6, #0
 801012e:	dd03      	ble.n	8010138 <__multiply+0x8c>
 8010130:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010134:	2b00      	cmp	r3, #0
 8010136:	d055      	beq.n	80101e4 <__multiply+0x138>
 8010138:	6106      	str	r6, [r0, #16]
 801013a:	b005      	add	sp, #20
 801013c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010140:	f843 2b04 	str.w	r2, [r3], #4
 8010144:	e7d9      	b.n	80100fa <__multiply+0x4e>
 8010146:	f8b1 a000 	ldrh.w	sl, [r1]
 801014a:	f1ba 0f00 	cmp.w	sl, #0
 801014e:	d01f      	beq.n	8010190 <__multiply+0xe4>
 8010150:	46c4      	mov	ip, r8
 8010152:	46a1      	mov	r9, r4
 8010154:	2700      	movs	r7, #0
 8010156:	f85c 2b04 	ldr.w	r2, [ip], #4
 801015a:	f8d9 3000 	ldr.w	r3, [r9]
 801015e:	fa1f fb82 	uxth.w	fp, r2
 8010162:	b29b      	uxth	r3, r3
 8010164:	fb0a 330b 	mla	r3, sl, fp, r3
 8010168:	443b      	add	r3, r7
 801016a:	f8d9 7000 	ldr.w	r7, [r9]
 801016e:	0c12      	lsrs	r2, r2, #16
 8010170:	0c3f      	lsrs	r7, r7, #16
 8010172:	fb0a 7202 	mla	r2, sl, r2, r7
 8010176:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801017a:	b29b      	uxth	r3, r3
 801017c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010180:	4565      	cmp	r5, ip
 8010182:	f849 3b04 	str.w	r3, [r9], #4
 8010186:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801018a:	d8e4      	bhi.n	8010156 <__multiply+0xaa>
 801018c:	9b01      	ldr	r3, [sp, #4]
 801018e:	50e7      	str	r7, [r4, r3]
 8010190:	9b03      	ldr	r3, [sp, #12]
 8010192:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010196:	3104      	adds	r1, #4
 8010198:	f1b9 0f00 	cmp.w	r9, #0
 801019c:	d020      	beq.n	80101e0 <__multiply+0x134>
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	4647      	mov	r7, r8
 80101a2:	46a4      	mov	ip, r4
 80101a4:	f04f 0a00 	mov.w	sl, #0
 80101a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80101ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80101b0:	fb09 220b 	mla	r2, r9, fp, r2
 80101b4:	4452      	add	r2, sl
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101bc:	f84c 3b04 	str.w	r3, [ip], #4
 80101c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80101c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80101cc:	fb09 330a 	mla	r3, r9, sl, r3
 80101d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80101d4:	42bd      	cmp	r5, r7
 80101d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101da:	d8e5      	bhi.n	80101a8 <__multiply+0xfc>
 80101dc:	9a01      	ldr	r2, [sp, #4]
 80101de:	50a3      	str	r3, [r4, r2]
 80101e0:	3404      	adds	r4, #4
 80101e2:	e79f      	b.n	8010124 <__multiply+0x78>
 80101e4:	3e01      	subs	r6, #1
 80101e6:	e7a1      	b.n	801012c <__multiply+0x80>
 80101e8:	080126fd 	.word	0x080126fd
 80101ec:	0801270e 	.word	0x0801270e

080101f0 <__pow5mult>:
 80101f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101f4:	4615      	mov	r5, r2
 80101f6:	f012 0203 	ands.w	r2, r2, #3
 80101fa:	4607      	mov	r7, r0
 80101fc:	460e      	mov	r6, r1
 80101fe:	d007      	beq.n	8010210 <__pow5mult+0x20>
 8010200:	4c25      	ldr	r4, [pc, #148]	@ (8010298 <__pow5mult+0xa8>)
 8010202:	3a01      	subs	r2, #1
 8010204:	2300      	movs	r3, #0
 8010206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801020a:	f7ff fe5d 	bl	800fec8 <__multadd>
 801020e:	4606      	mov	r6, r0
 8010210:	10ad      	asrs	r5, r5, #2
 8010212:	d03d      	beq.n	8010290 <__pow5mult+0xa0>
 8010214:	69fc      	ldr	r4, [r7, #28]
 8010216:	b97c      	cbnz	r4, 8010238 <__pow5mult+0x48>
 8010218:	2010      	movs	r0, #16
 801021a:	f7fd fe69 	bl	800def0 <malloc>
 801021e:	4602      	mov	r2, r0
 8010220:	61f8      	str	r0, [r7, #28]
 8010222:	b928      	cbnz	r0, 8010230 <__pow5mult+0x40>
 8010224:	4b1d      	ldr	r3, [pc, #116]	@ (801029c <__pow5mult+0xac>)
 8010226:	481e      	ldr	r0, [pc, #120]	@ (80102a0 <__pow5mult+0xb0>)
 8010228:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801022c:	f001 fb54 	bl	80118d8 <__assert_func>
 8010230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010234:	6004      	str	r4, [r0, #0]
 8010236:	60c4      	str	r4, [r0, #12]
 8010238:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801023c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010240:	b94c      	cbnz	r4, 8010256 <__pow5mult+0x66>
 8010242:	f240 2171 	movw	r1, #625	@ 0x271
 8010246:	4638      	mov	r0, r7
 8010248:	f7ff ff1a 	bl	8010080 <__i2b>
 801024c:	2300      	movs	r3, #0
 801024e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010252:	4604      	mov	r4, r0
 8010254:	6003      	str	r3, [r0, #0]
 8010256:	f04f 0900 	mov.w	r9, #0
 801025a:	07eb      	lsls	r3, r5, #31
 801025c:	d50a      	bpl.n	8010274 <__pow5mult+0x84>
 801025e:	4631      	mov	r1, r6
 8010260:	4622      	mov	r2, r4
 8010262:	4638      	mov	r0, r7
 8010264:	f7ff ff22 	bl	80100ac <__multiply>
 8010268:	4631      	mov	r1, r6
 801026a:	4680      	mov	r8, r0
 801026c:	4638      	mov	r0, r7
 801026e:	f7ff fe09 	bl	800fe84 <_Bfree>
 8010272:	4646      	mov	r6, r8
 8010274:	106d      	asrs	r5, r5, #1
 8010276:	d00b      	beq.n	8010290 <__pow5mult+0xa0>
 8010278:	6820      	ldr	r0, [r4, #0]
 801027a:	b938      	cbnz	r0, 801028c <__pow5mult+0x9c>
 801027c:	4622      	mov	r2, r4
 801027e:	4621      	mov	r1, r4
 8010280:	4638      	mov	r0, r7
 8010282:	f7ff ff13 	bl	80100ac <__multiply>
 8010286:	6020      	str	r0, [r4, #0]
 8010288:	f8c0 9000 	str.w	r9, [r0]
 801028c:	4604      	mov	r4, r0
 801028e:	e7e4      	b.n	801025a <__pow5mult+0x6a>
 8010290:	4630      	mov	r0, r6
 8010292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010296:	bf00      	nop
 8010298:	08012820 	.word	0x08012820
 801029c:	0801268e 	.word	0x0801268e
 80102a0:	0801270e 	.word	0x0801270e

080102a4 <__lshift>:
 80102a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102a8:	460c      	mov	r4, r1
 80102aa:	6849      	ldr	r1, [r1, #4]
 80102ac:	6923      	ldr	r3, [r4, #16]
 80102ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102b2:	68a3      	ldr	r3, [r4, #8]
 80102b4:	4607      	mov	r7, r0
 80102b6:	4691      	mov	r9, r2
 80102b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80102bc:	f108 0601 	add.w	r6, r8, #1
 80102c0:	42b3      	cmp	r3, r6
 80102c2:	db0b      	blt.n	80102dc <__lshift+0x38>
 80102c4:	4638      	mov	r0, r7
 80102c6:	f7ff fd9d 	bl	800fe04 <_Balloc>
 80102ca:	4605      	mov	r5, r0
 80102cc:	b948      	cbnz	r0, 80102e2 <__lshift+0x3e>
 80102ce:	4602      	mov	r2, r0
 80102d0:	4b28      	ldr	r3, [pc, #160]	@ (8010374 <__lshift+0xd0>)
 80102d2:	4829      	ldr	r0, [pc, #164]	@ (8010378 <__lshift+0xd4>)
 80102d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80102d8:	f001 fafe 	bl	80118d8 <__assert_func>
 80102dc:	3101      	adds	r1, #1
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	e7ee      	b.n	80102c0 <__lshift+0x1c>
 80102e2:	2300      	movs	r3, #0
 80102e4:	f100 0114 	add.w	r1, r0, #20
 80102e8:	f100 0210 	add.w	r2, r0, #16
 80102ec:	4618      	mov	r0, r3
 80102ee:	4553      	cmp	r3, sl
 80102f0:	db33      	blt.n	801035a <__lshift+0xb6>
 80102f2:	6920      	ldr	r0, [r4, #16]
 80102f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102f8:	f104 0314 	add.w	r3, r4, #20
 80102fc:	f019 091f 	ands.w	r9, r9, #31
 8010300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010308:	d02b      	beq.n	8010362 <__lshift+0xbe>
 801030a:	f1c9 0e20 	rsb	lr, r9, #32
 801030e:	468a      	mov	sl, r1
 8010310:	2200      	movs	r2, #0
 8010312:	6818      	ldr	r0, [r3, #0]
 8010314:	fa00 f009 	lsl.w	r0, r0, r9
 8010318:	4310      	orrs	r0, r2
 801031a:	f84a 0b04 	str.w	r0, [sl], #4
 801031e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010322:	459c      	cmp	ip, r3
 8010324:	fa22 f20e 	lsr.w	r2, r2, lr
 8010328:	d8f3      	bhi.n	8010312 <__lshift+0x6e>
 801032a:	ebac 0304 	sub.w	r3, ip, r4
 801032e:	3b15      	subs	r3, #21
 8010330:	f023 0303 	bic.w	r3, r3, #3
 8010334:	3304      	adds	r3, #4
 8010336:	f104 0015 	add.w	r0, r4, #21
 801033a:	4560      	cmp	r0, ip
 801033c:	bf88      	it	hi
 801033e:	2304      	movhi	r3, #4
 8010340:	50ca      	str	r2, [r1, r3]
 8010342:	b10a      	cbz	r2, 8010348 <__lshift+0xa4>
 8010344:	f108 0602 	add.w	r6, r8, #2
 8010348:	3e01      	subs	r6, #1
 801034a:	4638      	mov	r0, r7
 801034c:	612e      	str	r6, [r5, #16]
 801034e:	4621      	mov	r1, r4
 8010350:	f7ff fd98 	bl	800fe84 <_Bfree>
 8010354:	4628      	mov	r0, r5
 8010356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035a:	f842 0f04 	str.w	r0, [r2, #4]!
 801035e:	3301      	adds	r3, #1
 8010360:	e7c5      	b.n	80102ee <__lshift+0x4a>
 8010362:	3904      	subs	r1, #4
 8010364:	f853 2b04 	ldr.w	r2, [r3], #4
 8010368:	f841 2f04 	str.w	r2, [r1, #4]!
 801036c:	459c      	cmp	ip, r3
 801036e:	d8f9      	bhi.n	8010364 <__lshift+0xc0>
 8010370:	e7ea      	b.n	8010348 <__lshift+0xa4>
 8010372:	bf00      	nop
 8010374:	080126fd 	.word	0x080126fd
 8010378:	0801270e 	.word	0x0801270e

0801037c <__mcmp>:
 801037c:	690a      	ldr	r2, [r1, #16]
 801037e:	4603      	mov	r3, r0
 8010380:	6900      	ldr	r0, [r0, #16]
 8010382:	1a80      	subs	r0, r0, r2
 8010384:	b530      	push	{r4, r5, lr}
 8010386:	d10e      	bne.n	80103a6 <__mcmp+0x2a>
 8010388:	3314      	adds	r3, #20
 801038a:	3114      	adds	r1, #20
 801038c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010390:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010394:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010398:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801039c:	4295      	cmp	r5, r2
 801039e:	d003      	beq.n	80103a8 <__mcmp+0x2c>
 80103a0:	d205      	bcs.n	80103ae <__mcmp+0x32>
 80103a2:	f04f 30ff 	mov.w	r0, #4294967295
 80103a6:	bd30      	pop	{r4, r5, pc}
 80103a8:	42a3      	cmp	r3, r4
 80103aa:	d3f3      	bcc.n	8010394 <__mcmp+0x18>
 80103ac:	e7fb      	b.n	80103a6 <__mcmp+0x2a>
 80103ae:	2001      	movs	r0, #1
 80103b0:	e7f9      	b.n	80103a6 <__mcmp+0x2a>
	...

080103b4 <__mdiff>:
 80103b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b8:	4689      	mov	r9, r1
 80103ba:	4606      	mov	r6, r0
 80103bc:	4611      	mov	r1, r2
 80103be:	4648      	mov	r0, r9
 80103c0:	4614      	mov	r4, r2
 80103c2:	f7ff ffdb 	bl	801037c <__mcmp>
 80103c6:	1e05      	subs	r5, r0, #0
 80103c8:	d112      	bne.n	80103f0 <__mdiff+0x3c>
 80103ca:	4629      	mov	r1, r5
 80103cc:	4630      	mov	r0, r6
 80103ce:	f7ff fd19 	bl	800fe04 <_Balloc>
 80103d2:	4602      	mov	r2, r0
 80103d4:	b928      	cbnz	r0, 80103e2 <__mdiff+0x2e>
 80103d6:	4b3f      	ldr	r3, [pc, #252]	@ (80104d4 <__mdiff+0x120>)
 80103d8:	f240 2137 	movw	r1, #567	@ 0x237
 80103dc:	483e      	ldr	r0, [pc, #248]	@ (80104d8 <__mdiff+0x124>)
 80103de:	f001 fa7b 	bl	80118d8 <__assert_func>
 80103e2:	2301      	movs	r3, #1
 80103e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103e8:	4610      	mov	r0, r2
 80103ea:	b003      	add	sp, #12
 80103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f0:	bfbc      	itt	lt
 80103f2:	464b      	movlt	r3, r9
 80103f4:	46a1      	movlt	r9, r4
 80103f6:	4630      	mov	r0, r6
 80103f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80103fc:	bfba      	itte	lt
 80103fe:	461c      	movlt	r4, r3
 8010400:	2501      	movlt	r5, #1
 8010402:	2500      	movge	r5, #0
 8010404:	f7ff fcfe 	bl	800fe04 <_Balloc>
 8010408:	4602      	mov	r2, r0
 801040a:	b918      	cbnz	r0, 8010414 <__mdiff+0x60>
 801040c:	4b31      	ldr	r3, [pc, #196]	@ (80104d4 <__mdiff+0x120>)
 801040e:	f240 2145 	movw	r1, #581	@ 0x245
 8010412:	e7e3      	b.n	80103dc <__mdiff+0x28>
 8010414:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010418:	6926      	ldr	r6, [r4, #16]
 801041a:	60c5      	str	r5, [r0, #12]
 801041c:	f109 0310 	add.w	r3, r9, #16
 8010420:	f109 0514 	add.w	r5, r9, #20
 8010424:	f104 0e14 	add.w	lr, r4, #20
 8010428:	f100 0b14 	add.w	fp, r0, #20
 801042c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010430:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010434:	9301      	str	r3, [sp, #4]
 8010436:	46d9      	mov	r9, fp
 8010438:	f04f 0c00 	mov.w	ip, #0
 801043c:	9b01      	ldr	r3, [sp, #4]
 801043e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010442:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	fa1f f38a 	uxth.w	r3, sl
 801044c:	4619      	mov	r1, r3
 801044e:	b283      	uxth	r3, r0
 8010450:	1acb      	subs	r3, r1, r3
 8010452:	0c00      	lsrs	r0, r0, #16
 8010454:	4463      	add	r3, ip
 8010456:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801045a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801045e:	b29b      	uxth	r3, r3
 8010460:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010464:	4576      	cmp	r6, lr
 8010466:	f849 3b04 	str.w	r3, [r9], #4
 801046a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801046e:	d8e5      	bhi.n	801043c <__mdiff+0x88>
 8010470:	1b33      	subs	r3, r6, r4
 8010472:	3b15      	subs	r3, #21
 8010474:	f023 0303 	bic.w	r3, r3, #3
 8010478:	3415      	adds	r4, #21
 801047a:	3304      	adds	r3, #4
 801047c:	42a6      	cmp	r6, r4
 801047e:	bf38      	it	cc
 8010480:	2304      	movcc	r3, #4
 8010482:	441d      	add	r5, r3
 8010484:	445b      	add	r3, fp
 8010486:	461e      	mov	r6, r3
 8010488:	462c      	mov	r4, r5
 801048a:	4544      	cmp	r4, r8
 801048c:	d30e      	bcc.n	80104ac <__mdiff+0xf8>
 801048e:	f108 0103 	add.w	r1, r8, #3
 8010492:	1b49      	subs	r1, r1, r5
 8010494:	f021 0103 	bic.w	r1, r1, #3
 8010498:	3d03      	subs	r5, #3
 801049a:	45a8      	cmp	r8, r5
 801049c:	bf38      	it	cc
 801049e:	2100      	movcc	r1, #0
 80104a0:	440b      	add	r3, r1
 80104a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104a6:	b191      	cbz	r1, 80104ce <__mdiff+0x11a>
 80104a8:	6117      	str	r7, [r2, #16]
 80104aa:	e79d      	b.n	80103e8 <__mdiff+0x34>
 80104ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80104b0:	46e6      	mov	lr, ip
 80104b2:	0c08      	lsrs	r0, r1, #16
 80104b4:	fa1c fc81 	uxtah	ip, ip, r1
 80104b8:	4471      	add	r1, lr
 80104ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80104be:	b289      	uxth	r1, r1
 80104c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80104c4:	f846 1b04 	str.w	r1, [r6], #4
 80104c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80104cc:	e7dd      	b.n	801048a <__mdiff+0xd6>
 80104ce:	3f01      	subs	r7, #1
 80104d0:	e7e7      	b.n	80104a2 <__mdiff+0xee>
 80104d2:	bf00      	nop
 80104d4:	080126fd 	.word	0x080126fd
 80104d8:	0801270e 	.word	0x0801270e

080104dc <__ulp>:
 80104dc:	b082      	sub	sp, #8
 80104de:	ed8d 0b00 	vstr	d0, [sp]
 80104e2:	9a01      	ldr	r2, [sp, #4]
 80104e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010524 <__ulp+0x48>)
 80104e6:	4013      	ands	r3, r2
 80104e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	dc08      	bgt.n	8010502 <__ulp+0x26>
 80104f0:	425b      	negs	r3, r3
 80104f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80104f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80104fa:	da04      	bge.n	8010506 <__ulp+0x2a>
 80104fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010500:	4113      	asrs	r3, r2
 8010502:	2200      	movs	r2, #0
 8010504:	e008      	b.n	8010518 <__ulp+0x3c>
 8010506:	f1a2 0314 	sub.w	r3, r2, #20
 801050a:	2b1e      	cmp	r3, #30
 801050c:	bfda      	itte	le
 801050e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010512:	40da      	lsrle	r2, r3
 8010514:	2201      	movgt	r2, #1
 8010516:	2300      	movs	r3, #0
 8010518:	4619      	mov	r1, r3
 801051a:	4610      	mov	r0, r2
 801051c:	ec41 0b10 	vmov	d0, r0, r1
 8010520:	b002      	add	sp, #8
 8010522:	4770      	bx	lr
 8010524:	7ff00000 	.word	0x7ff00000

08010528 <__b2d>:
 8010528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801052c:	6906      	ldr	r6, [r0, #16]
 801052e:	f100 0814 	add.w	r8, r0, #20
 8010532:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010536:	1f37      	subs	r7, r6, #4
 8010538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801053c:	4610      	mov	r0, r2
 801053e:	f7ff fd53 	bl	800ffe8 <__hi0bits>
 8010542:	f1c0 0320 	rsb	r3, r0, #32
 8010546:	280a      	cmp	r0, #10
 8010548:	600b      	str	r3, [r1, #0]
 801054a:	491b      	ldr	r1, [pc, #108]	@ (80105b8 <__b2d+0x90>)
 801054c:	dc15      	bgt.n	801057a <__b2d+0x52>
 801054e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010552:	fa22 f30c 	lsr.w	r3, r2, ip
 8010556:	45b8      	cmp	r8, r7
 8010558:	ea43 0501 	orr.w	r5, r3, r1
 801055c:	bf34      	ite	cc
 801055e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010562:	2300      	movcs	r3, #0
 8010564:	3015      	adds	r0, #21
 8010566:	fa02 f000 	lsl.w	r0, r2, r0
 801056a:	fa23 f30c 	lsr.w	r3, r3, ip
 801056e:	4303      	orrs	r3, r0
 8010570:	461c      	mov	r4, r3
 8010572:	ec45 4b10 	vmov	d0, r4, r5
 8010576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801057a:	45b8      	cmp	r8, r7
 801057c:	bf3a      	itte	cc
 801057e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010582:	f1a6 0708 	subcc.w	r7, r6, #8
 8010586:	2300      	movcs	r3, #0
 8010588:	380b      	subs	r0, #11
 801058a:	d012      	beq.n	80105b2 <__b2d+0x8a>
 801058c:	f1c0 0120 	rsb	r1, r0, #32
 8010590:	fa23 f401 	lsr.w	r4, r3, r1
 8010594:	4082      	lsls	r2, r0
 8010596:	4322      	orrs	r2, r4
 8010598:	4547      	cmp	r7, r8
 801059a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801059e:	bf8c      	ite	hi
 80105a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80105a4:	2200      	movls	r2, #0
 80105a6:	4083      	lsls	r3, r0
 80105a8:	40ca      	lsrs	r2, r1
 80105aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80105ae:	4313      	orrs	r3, r2
 80105b0:	e7de      	b.n	8010570 <__b2d+0x48>
 80105b2:	ea42 0501 	orr.w	r5, r2, r1
 80105b6:	e7db      	b.n	8010570 <__b2d+0x48>
 80105b8:	3ff00000 	.word	0x3ff00000

080105bc <__d2b>:
 80105bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105c0:	460f      	mov	r7, r1
 80105c2:	2101      	movs	r1, #1
 80105c4:	ec59 8b10 	vmov	r8, r9, d0
 80105c8:	4616      	mov	r6, r2
 80105ca:	f7ff fc1b 	bl	800fe04 <_Balloc>
 80105ce:	4604      	mov	r4, r0
 80105d0:	b930      	cbnz	r0, 80105e0 <__d2b+0x24>
 80105d2:	4602      	mov	r2, r0
 80105d4:	4b23      	ldr	r3, [pc, #140]	@ (8010664 <__d2b+0xa8>)
 80105d6:	4824      	ldr	r0, [pc, #144]	@ (8010668 <__d2b+0xac>)
 80105d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80105dc:	f001 f97c 	bl	80118d8 <__assert_func>
 80105e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80105e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105e8:	b10d      	cbz	r5, 80105ee <__d2b+0x32>
 80105ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80105ee:	9301      	str	r3, [sp, #4]
 80105f0:	f1b8 0300 	subs.w	r3, r8, #0
 80105f4:	d023      	beq.n	801063e <__d2b+0x82>
 80105f6:	4668      	mov	r0, sp
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	f7ff fd14 	bl	8010026 <__lo0bits>
 80105fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010602:	b1d0      	cbz	r0, 801063a <__d2b+0x7e>
 8010604:	f1c0 0320 	rsb	r3, r0, #32
 8010608:	fa02 f303 	lsl.w	r3, r2, r3
 801060c:	430b      	orrs	r3, r1
 801060e:	40c2      	lsrs	r2, r0
 8010610:	6163      	str	r3, [r4, #20]
 8010612:	9201      	str	r2, [sp, #4]
 8010614:	9b01      	ldr	r3, [sp, #4]
 8010616:	61a3      	str	r3, [r4, #24]
 8010618:	2b00      	cmp	r3, #0
 801061a:	bf0c      	ite	eq
 801061c:	2201      	moveq	r2, #1
 801061e:	2202      	movne	r2, #2
 8010620:	6122      	str	r2, [r4, #16]
 8010622:	b1a5      	cbz	r5, 801064e <__d2b+0x92>
 8010624:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010628:	4405      	add	r5, r0
 801062a:	603d      	str	r5, [r7, #0]
 801062c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010630:	6030      	str	r0, [r6, #0]
 8010632:	4620      	mov	r0, r4
 8010634:	b003      	add	sp, #12
 8010636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801063a:	6161      	str	r1, [r4, #20]
 801063c:	e7ea      	b.n	8010614 <__d2b+0x58>
 801063e:	a801      	add	r0, sp, #4
 8010640:	f7ff fcf1 	bl	8010026 <__lo0bits>
 8010644:	9b01      	ldr	r3, [sp, #4]
 8010646:	6163      	str	r3, [r4, #20]
 8010648:	3020      	adds	r0, #32
 801064a:	2201      	movs	r2, #1
 801064c:	e7e8      	b.n	8010620 <__d2b+0x64>
 801064e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010652:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010656:	6038      	str	r0, [r7, #0]
 8010658:	6918      	ldr	r0, [r3, #16]
 801065a:	f7ff fcc5 	bl	800ffe8 <__hi0bits>
 801065e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010662:	e7e5      	b.n	8010630 <__d2b+0x74>
 8010664:	080126fd 	.word	0x080126fd
 8010668:	0801270e 	.word	0x0801270e

0801066c <__ratio>:
 801066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010670:	b085      	sub	sp, #20
 8010672:	e9cd 1000 	strd	r1, r0, [sp]
 8010676:	a902      	add	r1, sp, #8
 8010678:	f7ff ff56 	bl	8010528 <__b2d>
 801067c:	9800      	ldr	r0, [sp, #0]
 801067e:	a903      	add	r1, sp, #12
 8010680:	ec55 4b10 	vmov	r4, r5, d0
 8010684:	f7ff ff50 	bl	8010528 <__b2d>
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	6919      	ldr	r1, [r3, #16]
 801068c:	9b00      	ldr	r3, [sp, #0]
 801068e:	691b      	ldr	r3, [r3, #16]
 8010690:	1ac9      	subs	r1, r1, r3
 8010692:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010696:	1a9b      	subs	r3, r3, r2
 8010698:	ec5b ab10 	vmov	sl, fp, d0
 801069c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	bfce      	itee	gt
 80106a4:	462a      	movgt	r2, r5
 80106a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80106aa:	465a      	movle	r2, fp
 80106ac:	462f      	mov	r7, r5
 80106ae:	46d9      	mov	r9, fp
 80106b0:	bfcc      	ite	gt
 80106b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80106b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80106ba:	464b      	mov	r3, r9
 80106bc:	4652      	mov	r2, sl
 80106be:	4620      	mov	r0, r4
 80106c0:	4639      	mov	r1, r7
 80106c2:	f7f0 f8cb 	bl	800085c <__aeabi_ddiv>
 80106c6:	ec41 0b10 	vmov	d0, r0, r1
 80106ca:	b005      	add	sp, #20
 80106cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106d0 <__copybits>:
 80106d0:	3901      	subs	r1, #1
 80106d2:	b570      	push	{r4, r5, r6, lr}
 80106d4:	1149      	asrs	r1, r1, #5
 80106d6:	6914      	ldr	r4, [r2, #16]
 80106d8:	3101      	adds	r1, #1
 80106da:	f102 0314 	add.w	r3, r2, #20
 80106de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80106e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80106e6:	1f05      	subs	r5, r0, #4
 80106e8:	42a3      	cmp	r3, r4
 80106ea:	d30c      	bcc.n	8010706 <__copybits+0x36>
 80106ec:	1aa3      	subs	r3, r4, r2
 80106ee:	3b11      	subs	r3, #17
 80106f0:	f023 0303 	bic.w	r3, r3, #3
 80106f4:	3211      	adds	r2, #17
 80106f6:	42a2      	cmp	r2, r4
 80106f8:	bf88      	it	hi
 80106fa:	2300      	movhi	r3, #0
 80106fc:	4418      	add	r0, r3
 80106fe:	2300      	movs	r3, #0
 8010700:	4288      	cmp	r0, r1
 8010702:	d305      	bcc.n	8010710 <__copybits+0x40>
 8010704:	bd70      	pop	{r4, r5, r6, pc}
 8010706:	f853 6b04 	ldr.w	r6, [r3], #4
 801070a:	f845 6f04 	str.w	r6, [r5, #4]!
 801070e:	e7eb      	b.n	80106e8 <__copybits+0x18>
 8010710:	f840 3b04 	str.w	r3, [r0], #4
 8010714:	e7f4      	b.n	8010700 <__copybits+0x30>

08010716 <__any_on>:
 8010716:	f100 0214 	add.w	r2, r0, #20
 801071a:	6900      	ldr	r0, [r0, #16]
 801071c:	114b      	asrs	r3, r1, #5
 801071e:	4298      	cmp	r0, r3
 8010720:	b510      	push	{r4, lr}
 8010722:	db11      	blt.n	8010748 <__any_on+0x32>
 8010724:	dd0a      	ble.n	801073c <__any_on+0x26>
 8010726:	f011 011f 	ands.w	r1, r1, #31
 801072a:	d007      	beq.n	801073c <__any_on+0x26>
 801072c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010730:	fa24 f001 	lsr.w	r0, r4, r1
 8010734:	fa00 f101 	lsl.w	r1, r0, r1
 8010738:	428c      	cmp	r4, r1
 801073a:	d10b      	bne.n	8010754 <__any_on+0x3e>
 801073c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010740:	4293      	cmp	r3, r2
 8010742:	d803      	bhi.n	801074c <__any_on+0x36>
 8010744:	2000      	movs	r0, #0
 8010746:	bd10      	pop	{r4, pc}
 8010748:	4603      	mov	r3, r0
 801074a:	e7f7      	b.n	801073c <__any_on+0x26>
 801074c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010750:	2900      	cmp	r1, #0
 8010752:	d0f5      	beq.n	8010740 <__any_on+0x2a>
 8010754:	2001      	movs	r0, #1
 8010756:	e7f6      	b.n	8010746 <__any_on+0x30>

08010758 <sulp>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	4604      	mov	r4, r0
 801075c:	460d      	mov	r5, r1
 801075e:	ec45 4b10 	vmov	d0, r4, r5
 8010762:	4616      	mov	r6, r2
 8010764:	f7ff feba 	bl	80104dc <__ulp>
 8010768:	ec51 0b10 	vmov	r0, r1, d0
 801076c:	b17e      	cbz	r6, 801078e <sulp+0x36>
 801076e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010772:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010776:	2b00      	cmp	r3, #0
 8010778:	dd09      	ble.n	801078e <sulp+0x36>
 801077a:	051b      	lsls	r3, r3, #20
 801077c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010780:	2400      	movs	r4, #0
 8010782:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010786:	4622      	mov	r2, r4
 8010788:	462b      	mov	r3, r5
 801078a:	f7ef ff3d 	bl	8000608 <__aeabi_dmul>
 801078e:	ec41 0b10 	vmov	d0, r0, r1
 8010792:	bd70      	pop	{r4, r5, r6, pc}
 8010794:	0000      	movs	r0, r0
	...

08010798 <_strtod_l>:
 8010798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079c:	b09f      	sub	sp, #124	@ 0x7c
 801079e:	460c      	mov	r4, r1
 80107a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80107a2:	2200      	movs	r2, #0
 80107a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80107a6:	9005      	str	r0, [sp, #20]
 80107a8:	f04f 0a00 	mov.w	sl, #0
 80107ac:	f04f 0b00 	mov.w	fp, #0
 80107b0:	460a      	mov	r2, r1
 80107b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80107b4:	7811      	ldrb	r1, [r2, #0]
 80107b6:	292b      	cmp	r1, #43	@ 0x2b
 80107b8:	d04a      	beq.n	8010850 <_strtod_l+0xb8>
 80107ba:	d838      	bhi.n	801082e <_strtod_l+0x96>
 80107bc:	290d      	cmp	r1, #13
 80107be:	d832      	bhi.n	8010826 <_strtod_l+0x8e>
 80107c0:	2908      	cmp	r1, #8
 80107c2:	d832      	bhi.n	801082a <_strtod_l+0x92>
 80107c4:	2900      	cmp	r1, #0
 80107c6:	d03b      	beq.n	8010840 <_strtod_l+0xa8>
 80107c8:	2200      	movs	r2, #0
 80107ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80107cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80107ce:	782a      	ldrb	r2, [r5, #0]
 80107d0:	2a30      	cmp	r2, #48	@ 0x30
 80107d2:	f040 80b2 	bne.w	801093a <_strtod_l+0x1a2>
 80107d6:	786a      	ldrb	r2, [r5, #1]
 80107d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80107dc:	2a58      	cmp	r2, #88	@ 0x58
 80107de:	d16e      	bne.n	80108be <_strtod_l+0x126>
 80107e0:	9302      	str	r3, [sp, #8]
 80107e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107e4:	9301      	str	r3, [sp, #4]
 80107e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	4a8f      	ldr	r2, [pc, #572]	@ (8010a28 <_strtod_l+0x290>)
 80107ec:	9805      	ldr	r0, [sp, #20]
 80107ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80107f0:	a919      	add	r1, sp, #100	@ 0x64
 80107f2:	f001 f90b 	bl	8011a0c <__gethex>
 80107f6:	f010 060f 	ands.w	r6, r0, #15
 80107fa:	4604      	mov	r4, r0
 80107fc:	d005      	beq.n	801080a <_strtod_l+0x72>
 80107fe:	2e06      	cmp	r6, #6
 8010800:	d128      	bne.n	8010854 <_strtod_l+0xbc>
 8010802:	3501      	adds	r5, #1
 8010804:	2300      	movs	r3, #0
 8010806:	9519      	str	r5, [sp, #100]	@ 0x64
 8010808:	930e      	str	r3, [sp, #56]	@ 0x38
 801080a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801080c:	2b00      	cmp	r3, #0
 801080e:	f040 858e 	bne.w	801132e <_strtod_l+0xb96>
 8010812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010814:	b1cb      	cbz	r3, 801084a <_strtod_l+0xb2>
 8010816:	4652      	mov	r2, sl
 8010818:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801081c:	ec43 2b10 	vmov	d0, r2, r3
 8010820:	b01f      	add	sp, #124	@ 0x7c
 8010822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010826:	2920      	cmp	r1, #32
 8010828:	d1ce      	bne.n	80107c8 <_strtod_l+0x30>
 801082a:	3201      	adds	r2, #1
 801082c:	e7c1      	b.n	80107b2 <_strtod_l+0x1a>
 801082e:	292d      	cmp	r1, #45	@ 0x2d
 8010830:	d1ca      	bne.n	80107c8 <_strtod_l+0x30>
 8010832:	2101      	movs	r1, #1
 8010834:	910e      	str	r1, [sp, #56]	@ 0x38
 8010836:	1c51      	adds	r1, r2, #1
 8010838:	9119      	str	r1, [sp, #100]	@ 0x64
 801083a:	7852      	ldrb	r2, [r2, #1]
 801083c:	2a00      	cmp	r2, #0
 801083e:	d1c5      	bne.n	80107cc <_strtod_l+0x34>
 8010840:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010842:	9419      	str	r4, [sp, #100]	@ 0x64
 8010844:	2b00      	cmp	r3, #0
 8010846:	f040 8570 	bne.w	801132a <_strtod_l+0xb92>
 801084a:	4652      	mov	r2, sl
 801084c:	465b      	mov	r3, fp
 801084e:	e7e5      	b.n	801081c <_strtod_l+0x84>
 8010850:	2100      	movs	r1, #0
 8010852:	e7ef      	b.n	8010834 <_strtod_l+0x9c>
 8010854:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010856:	b13a      	cbz	r2, 8010868 <_strtod_l+0xd0>
 8010858:	2135      	movs	r1, #53	@ 0x35
 801085a:	a81c      	add	r0, sp, #112	@ 0x70
 801085c:	f7ff ff38 	bl	80106d0 <__copybits>
 8010860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010862:	9805      	ldr	r0, [sp, #20]
 8010864:	f7ff fb0e 	bl	800fe84 <_Bfree>
 8010868:	3e01      	subs	r6, #1
 801086a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801086c:	2e04      	cmp	r6, #4
 801086e:	d806      	bhi.n	801087e <_strtod_l+0xe6>
 8010870:	e8df f006 	tbb	[pc, r6]
 8010874:	201d0314 	.word	0x201d0314
 8010878:	14          	.byte	0x14
 8010879:	00          	.byte	0x00
 801087a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801087e:	05e1      	lsls	r1, r4, #23
 8010880:	bf48      	it	mi
 8010882:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801088a:	0d1b      	lsrs	r3, r3, #20
 801088c:	051b      	lsls	r3, r3, #20
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1bb      	bne.n	801080a <_strtod_l+0x72>
 8010892:	f7fe fbd1 	bl	800f038 <__errno>
 8010896:	2322      	movs	r3, #34	@ 0x22
 8010898:	6003      	str	r3, [r0, #0]
 801089a:	e7b6      	b.n	801080a <_strtod_l+0x72>
 801089c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80108a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80108a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80108a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80108ac:	e7e7      	b.n	801087e <_strtod_l+0xe6>
 80108ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010a30 <_strtod_l+0x298>
 80108b2:	e7e4      	b.n	801087e <_strtod_l+0xe6>
 80108b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80108b8:	f04f 3aff 	mov.w	sl, #4294967295
 80108bc:	e7df      	b.n	801087e <_strtod_l+0xe6>
 80108be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80108c4:	785b      	ldrb	r3, [r3, #1]
 80108c6:	2b30      	cmp	r3, #48	@ 0x30
 80108c8:	d0f9      	beq.n	80108be <_strtod_l+0x126>
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d09d      	beq.n	801080a <_strtod_l+0x72>
 80108ce:	2301      	movs	r3, #1
 80108d0:	2700      	movs	r7, #0
 80108d2:	9308      	str	r3, [sp, #32]
 80108d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80108d8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80108da:	46b9      	mov	r9, r7
 80108dc:	220a      	movs	r2, #10
 80108de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80108e0:	7805      	ldrb	r5, [r0, #0]
 80108e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80108e6:	b2d9      	uxtb	r1, r3
 80108e8:	2909      	cmp	r1, #9
 80108ea:	d928      	bls.n	801093e <_strtod_l+0x1a6>
 80108ec:	494f      	ldr	r1, [pc, #316]	@ (8010a2c <_strtod_l+0x294>)
 80108ee:	2201      	movs	r2, #1
 80108f0:	f000 ffd6 	bl	80118a0 <strncmp>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d032      	beq.n	801095e <_strtod_l+0x1c6>
 80108f8:	2000      	movs	r0, #0
 80108fa:	462a      	mov	r2, r5
 80108fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80108fe:	464d      	mov	r5, r9
 8010900:	4603      	mov	r3, r0
 8010902:	2a65      	cmp	r2, #101	@ 0x65
 8010904:	d001      	beq.n	801090a <_strtod_l+0x172>
 8010906:	2a45      	cmp	r2, #69	@ 0x45
 8010908:	d114      	bne.n	8010934 <_strtod_l+0x19c>
 801090a:	b91d      	cbnz	r5, 8010914 <_strtod_l+0x17c>
 801090c:	9a08      	ldr	r2, [sp, #32]
 801090e:	4302      	orrs	r2, r0
 8010910:	d096      	beq.n	8010840 <_strtod_l+0xa8>
 8010912:	2500      	movs	r5, #0
 8010914:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010916:	1c62      	adds	r2, r4, #1
 8010918:	9219      	str	r2, [sp, #100]	@ 0x64
 801091a:	7862      	ldrb	r2, [r4, #1]
 801091c:	2a2b      	cmp	r2, #43	@ 0x2b
 801091e:	d07a      	beq.n	8010a16 <_strtod_l+0x27e>
 8010920:	2a2d      	cmp	r2, #45	@ 0x2d
 8010922:	d07e      	beq.n	8010a22 <_strtod_l+0x28a>
 8010924:	f04f 0c00 	mov.w	ip, #0
 8010928:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801092c:	2909      	cmp	r1, #9
 801092e:	f240 8085 	bls.w	8010a3c <_strtod_l+0x2a4>
 8010932:	9419      	str	r4, [sp, #100]	@ 0x64
 8010934:	f04f 0800 	mov.w	r8, #0
 8010938:	e0a5      	b.n	8010a86 <_strtod_l+0x2ee>
 801093a:	2300      	movs	r3, #0
 801093c:	e7c8      	b.n	80108d0 <_strtod_l+0x138>
 801093e:	f1b9 0f08 	cmp.w	r9, #8
 8010942:	bfd8      	it	le
 8010944:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010946:	f100 0001 	add.w	r0, r0, #1
 801094a:	bfda      	itte	le
 801094c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010950:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010952:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010956:	f109 0901 	add.w	r9, r9, #1
 801095a:	9019      	str	r0, [sp, #100]	@ 0x64
 801095c:	e7bf      	b.n	80108de <_strtod_l+0x146>
 801095e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	9219      	str	r2, [sp, #100]	@ 0x64
 8010964:	785a      	ldrb	r2, [r3, #1]
 8010966:	f1b9 0f00 	cmp.w	r9, #0
 801096a:	d03b      	beq.n	80109e4 <_strtod_l+0x24c>
 801096c:	900a      	str	r0, [sp, #40]	@ 0x28
 801096e:	464d      	mov	r5, r9
 8010970:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010974:	2b09      	cmp	r3, #9
 8010976:	d912      	bls.n	801099e <_strtod_l+0x206>
 8010978:	2301      	movs	r3, #1
 801097a:	e7c2      	b.n	8010902 <_strtod_l+0x16a>
 801097c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	9219      	str	r2, [sp, #100]	@ 0x64
 8010982:	785a      	ldrb	r2, [r3, #1]
 8010984:	3001      	adds	r0, #1
 8010986:	2a30      	cmp	r2, #48	@ 0x30
 8010988:	d0f8      	beq.n	801097c <_strtod_l+0x1e4>
 801098a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801098e:	2b08      	cmp	r3, #8
 8010990:	f200 84d2 	bhi.w	8011338 <_strtod_l+0xba0>
 8010994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010996:	900a      	str	r0, [sp, #40]	@ 0x28
 8010998:	2000      	movs	r0, #0
 801099a:	930c      	str	r3, [sp, #48]	@ 0x30
 801099c:	4605      	mov	r5, r0
 801099e:	3a30      	subs	r2, #48	@ 0x30
 80109a0:	f100 0301 	add.w	r3, r0, #1
 80109a4:	d018      	beq.n	80109d8 <_strtod_l+0x240>
 80109a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80109a8:	4419      	add	r1, r3
 80109aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80109ac:	462e      	mov	r6, r5
 80109ae:	f04f 0e0a 	mov.w	lr, #10
 80109b2:	1c71      	adds	r1, r6, #1
 80109b4:	eba1 0c05 	sub.w	ip, r1, r5
 80109b8:	4563      	cmp	r3, ip
 80109ba:	dc15      	bgt.n	80109e8 <_strtod_l+0x250>
 80109bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80109c0:	182b      	adds	r3, r5, r0
 80109c2:	2b08      	cmp	r3, #8
 80109c4:	f105 0501 	add.w	r5, r5, #1
 80109c8:	4405      	add	r5, r0
 80109ca:	dc1a      	bgt.n	8010a02 <_strtod_l+0x26a>
 80109cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80109ce:	230a      	movs	r3, #10
 80109d0:	fb03 2301 	mla	r3, r3, r1, r2
 80109d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109d6:	2300      	movs	r3, #0
 80109d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80109da:	1c51      	adds	r1, r2, #1
 80109dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80109de:	7852      	ldrb	r2, [r2, #1]
 80109e0:	4618      	mov	r0, r3
 80109e2:	e7c5      	b.n	8010970 <_strtod_l+0x1d8>
 80109e4:	4648      	mov	r0, r9
 80109e6:	e7ce      	b.n	8010986 <_strtod_l+0x1ee>
 80109e8:	2e08      	cmp	r6, #8
 80109ea:	dc05      	bgt.n	80109f8 <_strtod_l+0x260>
 80109ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80109ee:	fb0e f606 	mul.w	r6, lr, r6
 80109f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80109f4:	460e      	mov	r6, r1
 80109f6:	e7dc      	b.n	80109b2 <_strtod_l+0x21a>
 80109f8:	2910      	cmp	r1, #16
 80109fa:	bfd8      	it	le
 80109fc:	fb0e f707 	mulle.w	r7, lr, r7
 8010a00:	e7f8      	b.n	80109f4 <_strtod_l+0x25c>
 8010a02:	2b0f      	cmp	r3, #15
 8010a04:	bfdc      	itt	le
 8010a06:	230a      	movle	r3, #10
 8010a08:	fb03 2707 	mlale	r7, r3, r7, r2
 8010a0c:	e7e3      	b.n	80109d6 <_strtod_l+0x23e>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a12:	2301      	movs	r3, #1
 8010a14:	e77a      	b.n	801090c <_strtod_l+0x174>
 8010a16:	f04f 0c00 	mov.w	ip, #0
 8010a1a:	1ca2      	adds	r2, r4, #2
 8010a1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a1e:	78a2      	ldrb	r2, [r4, #2]
 8010a20:	e782      	b.n	8010928 <_strtod_l+0x190>
 8010a22:	f04f 0c01 	mov.w	ip, #1
 8010a26:	e7f8      	b.n	8010a1a <_strtod_l+0x282>
 8010a28:	08012934 	.word	0x08012934
 8010a2c:	08012767 	.word	0x08012767
 8010a30:	7ff00000 	.word	0x7ff00000
 8010a34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010a36:	1c51      	adds	r1, r2, #1
 8010a38:	9119      	str	r1, [sp, #100]	@ 0x64
 8010a3a:	7852      	ldrb	r2, [r2, #1]
 8010a3c:	2a30      	cmp	r2, #48	@ 0x30
 8010a3e:	d0f9      	beq.n	8010a34 <_strtod_l+0x29c>
 8010a40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010a44:	2908      	cmp	r1, #8
 8010a46:	f63f af75 	bhi.w	8010934 <_strtod_l+0x19c>
 8010a4a:	3a30      	subs	r2, #48	@ 0x30
 8010a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010a50:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010a52:	f04f 080a 	mov.w	r8, #10
 8010a56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010a58:	1c56      	adds	r6, r2, #1
 8010a5a:	9619      	str	r6, [sp, #100]	@ 0x64
 8010a5c:	7852      	ldrb	r2, [r2, #1]
 8010a5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010a62:	f1be 0f09 	cmp.w	lr, #9
 8010a66:	d939      	bls.n	8010adc <_strtod_l+0x344>
 8010a68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a6a:	1a76      	subs	r6, r6, r1
 8010a6c:	2e08      	cmp	r6, #8
 8010a6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010a72:	dc03      	bgt.n	8010a7c <_strtod_l+0x2e4>
 8010a74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a76:	4588      	cmp	r8, r1
 8010a78:	bfa8      	it	ge
 8010a7a:	4688      	movge	r8, r1
 8010a7c:	f1bc 0f00 	cmp.w	ip, #0
 8010a80:	d001      	beq.n	8010a86 <_strtod_l+0x2ee>
 8010a82:	f1c8 0800 	rsb	r8, r8, #0
 8010a86:	2d00      	cmp	r5, #0
 8010a88:	d14e      	bne.n	8010b28 <_strtod_l+0x390>
 8010a8a:	9908      	ldr	r1, [sp, #32]
 8010a8c:	4308      	orrs	r0, r1
 8010a8e:	f47f aebc 	bne.w	801080a <_strtod_l+0x72>
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f47f aed4 	bne.w	8010840 <_strtod_l+0xa8>
 8010a98:	2a69      	cmp	r2, #105	@ 0x69
 8010a9a:	d028      	beq.n	8010aee <_strtod_l+0x356>
 8010a9c:	dc25      	bgt.n	8010aea <_strtod_l+0x352>
 8010a9e:	2a49      	cmp	r2, #73	@ 0x49
 8010aa0:	d025      	beq.n	8010aee <_strtod_l+0x356>
 8010aa2:	2a4e      	cmp	r2, #78	@ 0x4e
 8010aa4:	f47f aecc 	bne.w	8010840 <_strtod_l+0xa8>
 8010aa8:	499a      	ldr	r1, [pc, #616]	@ (8010d14 <_strtod_l+0x57c>)
 8010aaa:	a819      	add	r0, sp, #100	@ 0x64
 8010aac:	f001 f9d0 	bl	8011e50 <__match>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	f43f aec5 	beq.w	8010840 <_strtod_l+0xa8>
 8010ab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2b28      	cmp	r3, #40	@ 0x28
 8010abc:	d12e      	bne.n	8010b1c <_strtod_l+0x384>
 8010abe:	4996      	ldr	r1, [pc, #600]	@ (8010d18 <_strtod_l+0x580>)
 8010ac0:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ac2:	a819      	add	r0, sp, #100	@ 0x64
 8010ac4:	f001 f9d8 	bl	8011e78 <__hexnan>
 8010ac8:	2805      	cmp	r0, #5
 8010aca:	d127      	bne.n	8010b1c <_strtod_l+0x384>
 8010acc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ace:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010ad2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010ad6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010ada:	e696      	b.n	801080a <_strtod_l+0x72>
 8010adc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ade:	fb08 2101 	mla	r1, r8, r1, r2
 8010ae2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010ae6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ae8:	e7b5      	b.n	8010a56 <_strtod_l+0x2be>
 8010aea:	2a6e      	cmp	r2, #110	@ 0x6e
 8010aec:	e7da      	b.n	8010aa4 <_strtod_l+0x30c>
 8010aee:	498b      	ldr	r1, [pc, #556]	@ (8010d1c <_strtod_l+0x584>)
 8010af0:	a819      	add	r0, sp, #100	@ 0x64
 8010af2:	f001 f9ad 	bl	8011e50 <__match>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f43f aea2 	beq.w	8010840 <_strtod_l+0xa8>
 8010afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010afe:	4988      	ldr	r1, [pc, #544]	@ (8010d20 <_strtod_l+0x588>)
 8010b00:	3b01      	subs	r3, #1
 8010b02:	a819      	add	r0, sp, #100	@ 0x64
 8010b04:	9319      	str	r3, [sp, #100]	@ 0x64
 8010b06:	f001 f9a3 	bl	8011e50 <__match>
 8010b0a:	b910      	cbnz	r0, 8010b12 <_strtod_l+0x37a>
 8010b0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b0e:	3301      	adds	r3, #1
 8010b10:	9319      	str	r3, [sp, #100]	@ 0x64
 8010b12:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010d30 <_strtod_l+0x598>
 8010b16:	f04f 0a00 	mov.w	sl, #0
 8010b1a:	e676      	b.n	801080a <_strtod_l+0x72>
 8010b1c:	4881      	ldr	r0, [pc, #516]	@ (8010d24 <_strtod_l+0x58c>)
 8010b1e:	f000 fed3 	bl	80118c8 <nan>
 8010b22:	ec5b ab10 	vmov	sl, fp, d0
 8010b26:	e670      	b.n	801080a <_strtod_l+0x72>
 8010b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010b2c:	eba8 0303 	sub.w	r3, r8, r3
 8010b30:	f1b9 0f00 	cmp.w	r9, #0
 8010b34:	bf08      	it	eq
 8010b36:	46a9      	moveq	r9, r5
 8010b38:	2d10      	cmp	r5, #16
 8010b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b3c:	462c      	mov	r4, r5
 8010b3e:	bfa8      	it	ge
 8010b40:	2410      	movge	r4, #16
 8010b42:	f7ef fce7 	bl	8000514 <__aeabi_ui2d>
 8010b46:	2d09      	cmp	r5, #9
 8010b48:	4682      	mov	sl, r0
 8010b4a:	468b      	mov	fp, r1
 8010b4c:	dc13      	bgt.n	8010b76 <_strtod_l+0x3de>
 8010b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f43f ae5a 	beq.w	801080a <_strtod_l+0x72>
 8010b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b58:	dd78      	ble.n	8010c4c <_strtod_l+0x4b4>
 8010b5a:	2b16      	cmp	r3, #22
 8010b5c:	dc5f      	bgt.n	8010c1e <_strtod_l+0x486>
 8010b5e:	4972      	ldr	r1, [pc, #456]	@ (8010d28 <_strtod_l+0x590>)
 8010b60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b68:	4652      	mov	r2, sl
 8010b6a:	465b      	mov	r3, fp
 8010b6c:	f7ef fd4c 	bl	8000608 <__aeabi_dmul>
 8010b70:	4682      	mov	sl, r0
 8010b72:	468b      	mov	fp, r1
 8010b74:	e649      	b.n	801080a <_strtod_l+0x72>
 8010b76:	4b6c      	ldr	r3, [pc, #432]	@ (8010d28 <_strtod_l+0x590>)
 8010b78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010b80:	f7ef fd42 	bl	8000608 <__aeabi_dmul>
 8010b84:	4682      	mov	sl, r0
 8010b86:	4638      	mov	r0, r7
 8010b88:	468b      	mov	fp, r1
 8010b8a:	f7ef fcc3 	bl	8000514 <__aeabi_ui2d>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	460b      	mov	r3, r1
 8010b92:	4650      	mov	r0, sl
 8010b94:	4659      	mov	r1, fp
 8010b96:	f7ef fb81 	bl	800029c <__adddf3>
 8010b9a:	2d0f      	cmp	r5, #15
 8010b9c:	4682      	mov	sl, r0
 8010b9e:	468b      	mov	fp, r1
 8010ba0:	ddd5      	ble.n	8010b4e <_strtod_l+0x3b6>
 8010ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ba4:	1b2c      	subs	r4, r5, r4
 8010ba6:	441c      	add	r4, r3
 8010ba8:	2c00      	cmp	r4, #0
 8010baa:	f340 8093 	ble.w	8010cd4 <_strtod_l+0x53c>
 8010bae:	f014 030f 	ands.w	r3, r4, #15
 8010bb2:	d00a      	beq.n	8010bca <_strtod_l+0x432>
 8010bb4:	495c      	ldr	r1, [pc, #368]	@ (8010d28 <_strtod_l+0x590>)
 8010bb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010bba:	4652      	mov	r2, sl
 8010bbc:	465b      	mov	r3, fp
 8010bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc2:	f7ef fd21 	bl	8000608 <__aeabi_dmul>
 8010bc6:	4682      	mov	sl, r0
 8010bc8:	468b      	mov	fp, r1
 8010bca:	f034 040f 	bics.w	r4, r4, #15
 8010bce:	d073      	beq.n	8010cb8 <_strtod_l+0x520>
 8010bd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010bd4:	dd49      	ble.n	8010c6a <_strtod_l+0x4d2>
 8010bd6:	2400      	movs	r4, #0
 8010bd8:	46a0      	mov	r8, r4
 8010bda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010bdc:	46a1      	mov	r9, r4
 8010bde:	9a05      	ldr	r2, [sp, #20]
 8010be0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010d30 <_strtod_l+0x598>
 8010be4:	2322      	movs	r3, #34	@ 0x22
 8010be6:	6013      	str	r3, [r2, #0]
 8010be8:	f04f 0a00 	mov.w	sl, #0
 8010bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f43f ae0b 	beq.w	801080a <_strtod_l+0x72>
 8010bf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010bf6:	9805      	ldr	r0, [sp, #20]
 8010bf8:	f7ff f944 	bl	800fe84 <_Bfree>
 8010bfc:	9805      	ldr	r0, [sp, #20]
 8010bfe:	4649      	mov	r1, r9
 8010c00:	f7ff f940 	bl	800fe84 <_Bfree>
 8010c04:	9805      	ldr	r0, [sp, #20]
 8010c06:	4641      	mov	r1, r8
 8010c08:	f7ff f93c 	bl	800fe84 <_Bfree>
 8010c0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c0e:	9805      	ldr	r0, [sp, #20]
 8010c10:	f7ff f938 	bl	800fe84 <_Bfree>
 8010c14:	9805      	ldr	r0, [sp, #20]
 8010c16:	4621      	mov	r1, r4
 8010c18:	f7ff f934 	bl	800fe84 <_Bfree>
 8010c1c:	e5f5      	b.n	801080a <_strtod_l+0x72>
 8010c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010c24:	4293      	cmp	r3, r2
 8010c26:	dbbc      	blt.n	8010ba2 <_strtod_l+0x40a>
 8010c28:	4c3f      	ldr	r4, [pc, #252]	@ (8010d28 <_strtod_l+0x590>)
 8010c2a:	f1c5 050f 	rsb	r5, r5, #15
 8010c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010c32:	4652      	mov	r2, sl
 8010c34:	465b      	mov	r3, fp
 8010c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c3a:	f7ef fce5 	bl	8000608 <__aeabi_dmul>
 8010c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c40:	1b5d      	subs	r5, r3, r5
 8010c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010c46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010c4a:	e78f      	b.n	8010b6c <_strtod_l+0x3d4>
 8010c4c:	3316      	adds	r3, #22
 8010c4e:	dba8      	blt.n	8010ba2 <_strtod_l+0x40a>
 8010c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c52:	eba3 0808 	sub.w	r8, r3, r8
 8010c56:	4b34      	ldr	r3, [pc, #208]	@ (8010d28 <_strtod_l+0x590>)
 8010c58:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010c5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010c60:	4650      	mov	r0, sl
 8010c62:	4659      	mov	r1, fp
 8010c64:	f7ef fdfa 	bl	800085c <__aeabi_ddiv>
 8010c68:	e782      	b.n	8010b70 <_strtod_l+0x3d8>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4f2f      	ldr	r7, [pc, #188]	@ (8010d2c <_strtod_l+0x594>)
 8010c6e:	1124      	asrs	r4, r4, #4
 8010c70:	4650      	mov	r0, sl
 8010c72:	4659      	mov	r1, fp
 8010c74:	461e      	mov	r6, r3
 8010c76:	2c01      	cmp	r4, #1
 8010c78:	dc21      	bgt.n	8010cbe <_strtod_l+0x526>
 8010c7a:	b10b      	cbz	r3, 8010c80 <_strtod_l+0x4e8>
 8010c7c:	4682      	mov	sl, r0
 8010c7e:	468b      	mov	fp, r1
 8010c80:	492a      	ldr	r1, [pc, #168]	@ (8010d2c <_strtod_l+0x594>)
 8010c82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010c86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010c8a:	4652      	mov	r2, sl
 8010c8c:	465b      	mov	r3, fp
 8010c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c92:	f7ef fcb9 	bl	8000608 <__aeabi_dmul>
 8010c96:	4b26      	ldr	r3, [pc, #152]	@ (8010d30 <_strtod_l+0x598>)
 8010c98:	460a      	mov	r2, r1
 8010c9a:	400b      	ands	r3, r1
 8010c9c:	4925      	ldr	r1, [pc, #148]	@ (8010d34 <_strtod_l+0x59c>)
 8010c9e:	428b      	cmp	r3, r1
 8010ca0:	4682      	mov	sl, r0
 8010ca2:	d898      	bhi.n	8010bd6 <_strtod_l+0x43e>
 8010ca4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010ca8:	428b      	cmp	r3, r1
 8010caa:	bf86      	itte	hi
 8010cac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010d38 <_strtod_l+0x5a0>
 8010cb0:	f04f 3aff 	movhi.w	sl, #4294967295
 8010cb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010cb8:	2300      	movs	r3, #0
 8010cba:	9308      	str	r3, [sp, #32]
 8010cbc:	e076      	b.n	8010dac <_strtod_l+0x614>
 8010cbe:	07e2      	lsls	r2, r4, #31
 8010cc0:	d504      	bpl.n	8010ccc <_strtod_l+0x534>
 8010cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cc6:	f7ef fc9f 	bl	8000608 <__aeabi_dmul>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	3601      	adds	r6, #1
 8010cce:	1064      	asrs	r4, r4, #1
 8010cd0:	3708      	adds	r7, #8
 8010cd2:	e7d0      	b.n	8010c76 <_strtod_l+0x4de>
 8010cd4:	d0f0      	beq.n	8010cb8 <_strtod_l+0x520>
 8010cd6:	4264      	negs	r4, r4
 8010cd8:	f014 020f 	ands.w	r2, r4, #15
 8010cdc:	d00a      	beq.n	8010cf4 <_strtod_l+0x55c>
 8010cde:	4b12      	ldr	r3, [pc, #72]	@ (8010d28 <_strtod_l+0x590>)
 8010ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ce4:	4650      	mov	r0, sl
 8010ce6:	4659      	mov	r1, fp
 8010ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cec:	f7ef fdb6 	bl	800085c <__aeabi_ddiv>
 8010cf0:	4682      	mov	sl, r0
 8010cf2:	468b      	mov	fp, r1
 8010cf4:	1124      	asrs	r4, r4, #4
 8010cf6:	d0df      	beq.n	8010cb8 <_strtod_l+0x520>
 8010cf8:	2c1f      	cmp	r4, #31
 8010cfa:	dd1f      	ble.n	8010d3c <_strtod_l+0x5a4>
 8010cfc:	2400      	movs	r4, #0
 8010cfe:	46a0      	mov	r8, r4
 8010d00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010d02:	46a1      	mov	r9, r4
 8010d04:	9a05      	ldr	r2, [sp, #20]
 8010d06:	2322      	movs	r3, #34	@ 0x22
 8010d08:	f04f 0a00 	mov.w	sl, #0
 8010d0c:	f04f 0b00 	mov.w	fp, #0
 8010d10:	6013      	str	r3, [r2, #0]
 8010d12:	e76b      	b.n	8010bec <_strtod_l+0x454>
 8010d14:	08012655 	.word	0x08012655
 8010d18:	08012920 	.word	0x08012920
 8010d1c:	0801264d 	.word	0x0801264d
 8010d20:	08012684 	.word	0x08012684
 8010d24:	080127bd 	.word	0x080127bd
 8010d28:	08012858 	.word	0x08012858
 8010d2c:	08012830 	.word	0x08012830
 8010d30:	7ff00000 	.word	0x7ff00000
 8010d34:	7ca00000 	.word	0x7ca00000
 8010d38:	7fefffff 	.word	0x7fefffff
 8010d3c:	f014 0310 	ands.w	r3, r4, #16
 8010d40:	bf18      	it	ne
 8010d42:	236a      	movne	r3, #106	@ 0x6a
 8010d44:	4ea9      	ldr	r6, [pc, #676]	@ (8010fec <_strtod_l+0x854>)
 8010d46:	9308      	str	r3, [sp, #32]
 8010d48:	4650      	mov	r0, sl
 8010d4a:	4659      	mov	r1, fp
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	07e7      	lsls	r7, r4, #31
 8010d50:	d504      	bpl.n	8010d5c <_strtod_l+0x5c4>
 8010d52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d56:	f7ef fc57 	bl	8000608 <__aeabi_dmul>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	1064      	asrs	r4, r4, #1
 8010d5e:	f106 0608 	add.w	r6, r6, #8
 8010d62:	d1f4      	bne.n	8010d4e <_strtod_l+0x5b6>
 8010d64:	b10b      	cbz	r3, 8010d6a <_strtod_l+0x5d2>
 8010d66:	4682      	mov	sl, r0
 8010d68:	468b      	mov	fp, r1
 8010d6a:	9b08      	ldr	r3, [sp, #32]
 8010d6c:	b1b3      	cbz	r3, 8010d9c <_strtod_l+0x604>
 8010d6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010d72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	4659      	mov	r1, fp
 8010d7a:	dd0f      	ble.n	8010d9c <_strtod_l+0x604>
 8010d7c:	2b1f      	cmp	r3, #31
 8010d7e:	dd56      	ble.n	8010e2e <_strtod_l+0x696>
 8010d80:	2b34      	cmp	r3, #52	@ 0x34
 8010d82:	bfde      	ittt	le
 8010d84:	f04f 33ff 	movle.w	r3, #4294967295
 8010d88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010d8c:	4093      	lslle	r3, r2
 8010d8e:	f04f 0a00 	mov.w	sl, #0
 8010d92:	bfcc      	ite	gt
 8010d94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010d98:	ea03 0b01 	andle.w	fp, r3, r1
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	2300      	movs	r3, #0
 8010da0:	4650      	mov	r0, sl
 8010da2:	4659      	mov	r1, fp
 8010da4:	f7ef fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d1a7      	bne.n	8010cfc <_strtod_l+0x564>
 8010dac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010db2:	9805      	ldr	r0, [sp, #20]
 8010db4:	462b      	mov	r3, r5
 8010db6:	464a      	mov	r2, r9
 8010db8:	f7ff f8cc 	bl	800ff54 <__s2b>
 8010dbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f43f af09 	beq.w	8010bd6 <_strtod_l+0x43e>
 8010dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dc8:	2a00      	cmp	r2, #0
 8010dca:	eba3 0308 	sub.w	r3, r3, r8
 8010dce:	bfa8      	it	ge
 8010dd0:	2300      	movge	r3, #0
 8010dd2:	9312      	str	r3, [sp, #72]	@ 0x48
 8010dd4:	2400      	movs	r4, #0
 8010dd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010dda:	9316      	str	r3, [sp, #88]	@ 0x58
 8010ddc:	46a0      	mov	r8, r4
 8010dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010de0:	9805      	ldr	r0, [sp, #20]
 8010de2:	6859      	ldr	r1, [r3, #4]
 8010de4:	f7ff f80e 	bl	800fe04 <_Balloc>
 8010de8:	4681      	mov	r9, r0
 8010dea:	2800      	cmp	r0, #0
 8010dec:	f43f aef7 	beq.w	8010bde <_strtod_l+0x446>
 8010df0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010df2:	691a      	ldr	r2, [r3, #16]
 8010df4:	3202      	adds	r2, #2
 8010df6:	f103 010c 	add.w	r1, r3, #12
 8010dfa:	0092      	lsls	r2, r2, #2
 8010dfc:	300c      	adds	r0, #12
 8010dfe:	f7fe f948 	bl	800f092 <memcpy>
 8010e02:	ec4b ab10 	vmov	d0, sl, fp
 8010e06:	9805      	ldr	r0, [sp, #20]
 8010e08:	aa1c      	add	r2, sp, #112	@ 0x70
 8010e0a:	a91b      	add	r1, sp, #108	@ 0x6c
 8010e0c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010e10:	f7ff fbd4 	bl	80105bc <__d2b>
 8010e14:	901a      	str	r0, [sp, #104]	@ 0x68
 8010e16:	2800      	cmp	r0, #0
 8010e18:	f43f aee1 	beq.w	8010bde <_strtod_l+0x446>
 8010e1c:	9805      	ldr	r0, [sp, #20]
 8010e1e:	2101      	movs	r1, #1
 8010e20:	f7ff f92e 	bl	8010080 <__i2b>
 8010e24:	4680      	mov	r8, r0
 8010e26:	b948      	cbnz	r0, 8010e3c <_strtod_l+0x6a4>
 8010e28:	f04f 0800 	mov.w	r8, #0
 8010e2c:	e6d7      	b.n	8010bde <_strtod_l+0x446>
 8010e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e32:	fa02 f303 	lsl.w	r3, r2, r3
 8010e36:	ea03 0a0a 	and.w	sl, r3, sl
 8010e3a:	e7af      	b.n	8010d9c <_strtod_l+0x604>
 8010e3c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010e3e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010e40:	2d00      	cmp	r5, #0
 8010e42:	bfab      	itete	ge
 8010e44:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010e46:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010e48:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010e4a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010e4c:	bfac      	ite	ge
 8010e4e:	18ef      	addge	r7, r5, r3
 8010e50:	1b5e      	sublt	r6, r3, r5
 8010e52:	9b08      	ldr	r3, [sp, #32]
 8010e54:	1aed      	subs	r5, r5, r3
 8010e56:	4415      	add	r5, r2
 8010e58:	4b65      	ldr	r3, [pc, #404]	@ (8010ff0 <_strtod_l+0x858>)
 8010e5a:	3d01      	subs	r5, #1
 8010e5c:	429d      	cmp	r5, r3
 8010e5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010e62:	da50      	bge.n	8010f06 <_strtod_l+0x76e>
 8010e64:	1b5b      	subs	r3, r3, r5
 8010e66:	2b1f      	cmp	r3, #31
 8010e68:	eba2 0203 	sub.w	r2, r2, r3
 8010e6c:	f04f 0101 	mov.w	r1, #1
 8010e70:	dc3d      	bgt.n	8010eee <_strtod_l+0x756>
 8010e72:	fa01 f303 	lsl.w	r3, r1, r3
 8010e76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010e78:	2300      	movs	r3, #0
 8010e7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8010e7c:	18bd      	adds	r5, r7, r2
 8010e7e:	9b08      	ldr	r3, [sp, #32]
 8010e80:	42af      	cmp	r7, r5
 8010e82:	4416      	add	r6, r2
 8010e84:	441e      	add	r6, r3
 8010e86:	463b      	mov	r3, r7
 8010e88:	bfa8      	it	ge
 8010e8a:	462b      	movge	r3, r5
 8010e8c:	42b3      	cmp	r3, r6
 8010e8e:	bfa8      	it	ge
 8010e90:	4633      	movge	r3, r6
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	bfc2      	ittt	gt
 8010e96:	1aed      	subgt	r5, r5, r3
 8010e98:	1af6      	subgt	r6, r6, r3
 8010e9a:	1aff      	subgt	r7, r7, r3
 8010e9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	dd16      	ble.n	8010ed0 <_strtod_l+0x738>
 8010ea2:	4641      	mov	r1, r8
 8010ea4:	9805      	ldr	r0, [sp, #20]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	f7ff f9a2 	bl	80101f0 <__pow5mult>
 8010eac:	4680      	mov	r8, r0
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d0ba      	beq.n	8010e28 <_strtod_l+0x690>
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010eb6:	9805      	ldr	r0, [sp, #20]
 8010eb8:	f7ff f8f8 	bl	80100ac <__multiply>
 8010ebc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	f43f ae8d 	beq.w	8010bde <_strtod_l+0x446>
 8010ec4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ec6:	9805      	ldr	r0, [sp, #20]
 8010ec8:	f7fe ffdc 	bl	800fe84 <_Bfree>
 8010ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ece:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ed0:	2d00      	cmp	r5, #0
 8010ed2:	dc1d      	bgt.n	8010f10 <_strtod_l+0x778>
 8010ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	dd23      	ble.n	8010f22 <_strtod_l+0x78a>
 8010eda:	4649      	mov	r1, r9
 8010edc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010ede:	9805      	ldr	r0, [sp, #20]
 8010ee0:	f7ff f986 	bl	80101f0 <__pow5mult>
 8010ee4:	4681      	mov	r9, r0
 8010ee6:	b9e0      	cbnz	r0, 8010f22 <_strtod_l+0x78a>
 8010ee8:	f04f 0900 	mov.w	r9, #0
 8010eec:	e677      	b.n	8010bde <_strtod_l+0x446>
 8010eee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010ef2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010ef6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010efa:	35e2      	adds	r5, #226	@ 0xe2
 8010efc:	fa01 f305 	lsl.w	r3, r1, r5
 8010f00:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f02:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010f04:	e7ba      	b.n	8010e7c <_strtod_l+0x6e4>
 8010f06:	2300      	movs	r3, #0
 8010f08:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010f0e:	e7b5      	b.n	8010e7c <_strtod_l+0x6e4>
 8010f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f12:	9805      	ldr	r0, [sp, #20]
 8010f14:	462a      	mov	r2, r5
 8010f16:	f7ff f9c5 	bl	80102a4 <__lshift>
 8010f1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d1d9      	bne.n	8010ed4 <_strtod_l+0x73c>
 8010f20:	e65d      	b.n	8010bde <_strtod_l+0x446>
 8010f22:	2e00      	cmp	r6, #0
 8010f24:	dd07      	ble.n	8010f36 <_strtod_l+0x79e>
 8010f26:	4649      	mov	r1, r9
 8010f28:	9805      	ldr	r0, [sp, #20]
 8010f2a:	4632      	mov	r2, r6
 8010f2c:	f7ff f9ba 	bl	80102a4 <__lshift>
 8010f30:	4681      	mov	r9, r0
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d0d8      	beq.n	8010ee8 <_strtod_l+0x750>
 8010f36:	2f00      	cmp	r7, #0
 8010f38:	dd08      	ble.n	8010f4c <_strtod_l+0x7b4>
 8010f3a:	4641      	mov	r1, r8
 8010f3c:	9805      	ldr	r0, [sp, #20]
 8010f3e:	463a      	mov	r2, r7
 8010f40:	f7ff f9b0 	bl	80102a4 <__lshift>
 8010f44:	4680      	mov	r8, r0
 8010f46:	2800      	cmp	r0, #0
 8010f48:	f43f ae49 	beq.w	8010bde <_strtod_l+0x446>
 8010f4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f4e:	9805      	ldr	r0, [sp, #20]
 8010f50:	464a      	mov	r2, r9
 8010f52:	f7ff fa2f 	bl	80103b4 <__mdiff>
 8010f56:	4604      	mov	r4, r0
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	f43f ae40 	beq.w	8010bde <_strtod_l+0x446>
 8010f5e:	68c3      	ldr	r3, [r0, #12]
 8010f60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f62:	2300      	movs	r3, #0
 8010f64:	60c3      	str	r3, [r0, #12]
 8010f66:	4641      	mov	r1, r8
 8010f68:	f7ff fa08 	bl	801037c <__mcmp>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	da45      	bge.n	8010ffc <_strtod_l+0x864>
 8010f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f72:	ea53 030a 	orrs.w	r3, r3, sl
 8010f76:	d16b      	bne.n	8011050 <_strtod_l+0x8b8>
 8010f78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d167      	bne.n	8011050 <_strtod_l+0x8b8>
 8010f80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010f84:	0d1b      	lsrs	r3, r3, #20
 8010f86:	051b      	lsls	r3, r3, #20
 8010f88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010f8c:	d960      	bls.n	8011050 <_strtod_l+0x8b8>
 8010f8e:	6963      	ldr	r3, [r4, #20]
 8010f90:	b913      	cbnz	r3, 8010f98 <_strtod_l+0x800>
 8010f92:	6923      	ldr	r3, [r4, #16]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	dd5b      	ble.n	8011050 <_strtod_l+0x8b8>
 8010f98:	4621      	mov	r1, r4
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	9805      	ldr	r0, [sp, #20]
 8010f9e:	f7ff f981 	bl	80102a4 <__lshift>
 8010fa2:	4641      	mov	r1, r8
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	f7ff f9e9 	bl	801037c <__mcmp>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	dd50      	ble.n	8011050 <_strtod_l+0x8b8>
 8010fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010fb2:	9a08      	ldr	r2, [sp, #32]
 8010fb4:	0d1b      	lsrs	r3, r3, #20
 8010fb6:	051b      	lsls	r3, r3, #20
 8010fb8:	2a00      	cmp	r2, #0
 8010fba:	d06a      	beq.n	8011092 <_strtod_l+0x8fa>
 8010fbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010fc0:	d867      	bhi.n	8011092 <_strtod_l+0x8fa>
 8010fc2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010fc6:	f67f ae9d 	bls.w	8010d04 <_strtod_l+0x56c>
 8010fca:	4b0a      	ldr	r3, [pc, #40]	@ (8010ff4 <_strtod_l+0x85c>)
 8010fcc:	4650      	mov	r0, sl
 8010fce:	4659      	mov	r1, fp
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f7ef fb19 	bl	8000608 <__aeabi_dmul>
 8010fd6:	4b08      	ldr	r3, [pc, #32]	@ (8010ff8 <_strtod_l+0x860>)
 8010fd8:	400b      	ands	r3, r1
 8010fda:	4682      	mov	sl, r0
 8010fdc:	468b      	mov	fp, r1
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f47f ae08 	bne.w	8010bf4 <_strtod_l+0x45c>
 8010fe4:	9a05      	ldr	r2, [sp, #20]
 8010fe6:	2322      	movs	r3, #34	@ 0x22
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	e603      	b.n	8010bf4 <_strtod_l+0x45c>
 8010fec:	08012948 	.word	0x08012948
 8010ff0:	fffffc02 	.word	0xfffffc02
 8010ff4:	39500000 	.word	0x39500000
 8010ff8:	7ff00000 	.word	0x7ff00000
 8010ffc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011000:	d165      	bne.n	80110ce <_strtod_l+0x936>
 8011002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011008:	b35a      	cbz	r2, 8011062 <_strtod_l+0x8ca>
 801100a:	4a9f      	ldr	r2, [pc, #636]	@ (8011288 <_strtod_l+0xaf0>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d12b      	bne.n	8011068 <_strtod_l+0x8d0>
 8011010:	9b08      	ldr	r3, [sp, #32]
 8011012:	4651      	mov	r1, sl
 8011014:	b303      	cbz	r3, 8011058 <_strtod_l+0x8c0>
 8011016:	4b9d      	ldr	r3, [pc, #628]	@ (801128c <_strtod_l+0xaf4>)
 8011018:	465a      	mov	r2, fp
 801101a:	4013      	ands	r3, r2
 801101c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011020:	f04f 32ff 	mov.w	r2, #4294967295
 8011024:	d81b      	bhi.n	801105e <_strtod_l+0x8c6>
 8011026:	0d1b      	lsrs	r3, r3, #20
 8011028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801102c:	fa02 f303 	lsl.w	r3, r2, r3
 8011030:	4299      	cmp	r1, r3
 8011032:	d119      	bne.n	8011068 <_strtod_l+0x8d0>
 8011034:	4b96      	ldr	r3, [pc, #600]	@ (8011290 <_strtod_l+0xaf8>)
 8011036:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011038:	429a      	cmp	r2, r3
 801103a:	d102      	bne.n	8011042 <_strtod_l+0x8aa>
 801103c:	3101      	adds	r1, #1
 801103e:	f43f adce 	beq.w	8010bde <_strtod_l+0x446>
 8011042:	4b92      	ldr	r3, [pc, #584]	@ (801128c <_strtod_l+0xaf4>)
 8011044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011046:	401a      	ands	r2, r3
 8011048:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801104c:	f04f 0a00 	mov.w	sl, #0
 8011050:	9b08      	ldr	r3, [sp, #32]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1b9      	bne.n	8010fca <_strtod_l+0x832>
 8011056:	e5cd      	b.n	8010bf4 <_strtod_l+0x45c>
 8011058:	f04f 33ff 	mov.w	r3, #4294967295
 801105c:	e7e8      	b.n	8011030 <_strtod_l+0x898>
 801105e:	4613      	mov	r3, r2
 8011060:	e7e6      	b.n	8011030 <_strtod_l+0x898>
 8011062:	ea53 030a 	orrs.w	r3, r3, sl
 8011066:	d0a2      	beq.n	8010fae <_strtod_l+0x816>
 8011068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801106a:	b1db      	cbz	r3, 80110a4 <_strtod_l+0x90c>
 801106c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801106e:	4213      	tst	r3, r2
 8011070:	d0ee      	beq.n	8011050 <_strtod_l+0x8b8>
 8011072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011074:	9a08      	ldr	r2, [sp, #32]
 8011076:	4650      	mov	r0, sl
 8011078:	4659      	mov	r1, fp
 801107a:	b1bb      	cbz	r3, 80110ac <_strtod_l+0x914>
 801107c:	f7ff fb6c 	bl	8010758 <sulp>
 8011080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011084:	ec53 2b10 	vmov	r2, r3, d0
 8011088:	f7ef f908 	bl	800029c <__adddf3>
 801108c:	4682      	mov	sl, r0
 801108e:	468b      	mov	fp, r1
 8011090:	e7de      	b.n	8011050 <_strtod_l+0x8b8>
 8011092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801109a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801109e:	f04f 3aff 	mov.w	sl, #4294967295
 80110a2:	e7d5      	b.n	8011050 <_strtod_l+0x8b8>
 80110a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110a6:	ea13 0f0a 	tst.w	r3, sl
 80110aa:	e7e1      	b.n	8011070 <_strtod_l+0x8d8>
 80110ac:	f7ff fb54 	bl	8010758 <sulp>
 80110b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80110b4:	ec53 2b10 	vmov	r2, r3, d0
 80110b8:	f7ef f8ee 	bl	8000298 <__aeabi_dsub>
 80110bc:	2200      	movs	r2, #0
 80110be:	2300      	movs	r3, #0
 80110c0:	4682      	mov	sl, r0
 80110c2:	468b      	mov	fp, r1
 80110c4:	f7ef fd08 	bl	8000ad8 <__aeabi_dcmpeq>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d0c1      	beq.n	8011050 <_strtod_l+0x8b8>
 80110cc:	e61a      	b.n	8010d04 <_strtod_l+0x56c>
 80110ce:	4641      	mov	r1, r8
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7ff facb 	bl	801066c <__ratio>
 80110d6:	ec57 6b10 	vmov	r6, r7, d0
 80110da:	2200      	movs	r2, #0
 80110dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80110e0:	4630      	mov	r0, r6
 80110e2:	4639      	mov	r1, r7
 80110e4:	f7ef fd0c 	bl	8000b00 <__aeabi_dcmple>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d06f      	beq.n	80111cc <_strtod_l+0xa34>
 80110ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d17a      	bne.n	80111e8 <_strtod_l+0xa50>
 80110f2:	f1ba 0f00 	cmp.w	sl, #0
 80110f6:	d158      	bne.n	80111aa <_strtod_l+0xa12>
 80110f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d15a      	bne.n	80111b8 <_strtod_l+0xa20>
 8011102:	4b64      	ldr	r3, [pc, #400]	@ (8011294 <_strtod_l+0xafc>)
 8011104:	2200      	movs	r2, #0
 8011106:	4630      	mov	r0, r6
 8011108:	4639      	mov	r1, r7
 801110a:	f7ef fcef 	bl	8000aec <__aeabi_dcmplt>
 801110e:	2800      	cmp	r0, #0
 8011110:	d159      	bne.n	80111c6 <_strtod_l+0xa2e>
 8011112:	4630      	mov	r0, r6
 8011114:	4639      	mov	r1, r7
 8011116:	4b60      	ldr	r3, [pc, #384]	@ (8011298 <_strtod_l+0xb00>)
 8011118:	2200      	movs	r2, #0
 801111a:	f7ef fa75 	bl	8000608 <__aeabi_dmul>
 801111e:	4606      	mov	r6, r0
 8011120:	460f      	mov	r7, r1
 8011122:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011126:	9606      	str	r6, [sp, #24]
 8011128:	9307      	str	r3, [sp, #28]
 801112a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801112e:	4d57      	ldr	r5, [pc, #348]	@ (801128c <_strtod_l+0xaf4>)
 8011130:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011136:	401d      	ands	r5, r3
 8011138:	4b58      	ldr	r3, [pc, #352]	@ (801129c <_strtod_l+0xb04>)
 801113a:	429d      	cmp	r5, r3
 801113c:	f040 80b2 	bne.w	80112a4 <_strtod_l+0xb0c>
 8011140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011142:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011146:	ec4b ab10 	vmov	d0, sl, fp
 801114a:	f7ff f9c7 	bl	80104dc <__ulp>
 801114e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011152:	ec51 0b10 	vmov	r0, r1, d0
 8011156:	f7ef fa57 	bl	8000608 <__aeabi_dmul>
 801115a:	4652      	mov	r2, sl
 801115c:	465b      	mov	r3, fp
 801115e:	f7ef f89d 	bl	800029c <__adddf3>
 8011162:	460b      	mov	r3, r1
 8011164:	4949      	ldr	r1, [pc, #292]	@ (801128c <_strtod_l+0xaf4>)
 8011166:	4a4e      	ldr	r2, [pc, #312]	@ (80112a0 <_strtod_l+0xb08>)
 8011168:	4019      	ands	r1, r3
 801116a:	4291      	cmp	r1, r2
 801116c:	4682      	mov	sl, r0
 801116e:	d942      	bls.n	80111f6 <_strtod_l+0xa5e>
 8011170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011172:	4b47      	ldr	r3, [pc, #284]	@ (8011290 <_strtod_l+0xaf8>)
 8011174:	429a      	cmp	r2, r3
 8011176:	d103      	bne.n	8011180 <_strtod_l+0x9e8>
 8011178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801117a:	3301      	adds	r3, #1
 801117c:	f43f ad2f 	beq.w	8010bde <_strtod_l+0x446>
 8011180:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011290 <_strtod_l+0xaf8>
 8011184:	f04f 3aff 	mov.w	sl, #4294967295
 8011188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801118a:	9805      	ldr	r0, [sp, #20]
 801118c:	f7fe fe7a 	bl	800fe84 <_Bfree>
 8011190:	9805      	ldr	r0, [sp, #20]
 8011192:	4649      	mov	r1, r9
 8011194:	f7fe fe76 	bl	800fe84 <_Bfree>
 8011198:	9805      	ldr	r0, [sp, #20]
 801119a:	4641      	mov	r1, r8
 801119c:	f7fe fe72 	bl	800fe84 <_Bfree>
 80111a0:	9805      	ldr	r0, [sp, #20]
 80111a2:	4621      	mov	r1, r4
 80111a4:	f7fe fe6e 	bl	800fe84 <_Bfree>
 80111a8:	e619      	b.n	8010dde <_strtod_l+0x646>
 80111aa:	f1ba 0f01 	cmp.w	sl, #1
 80111ae:	d103      	bne.n	80111b8 <_strtod_l+0xa20>
 80111b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f43f ada6 	beq.w	8010d04 <_strtod_l+0x56c>
 80111b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011268 <_strtod_l+0xad0>
 80111bc:	4f35      	ldr	r7, [pc, #212]	@ (8011294 <_strtod_l+0xafc>)
 80111be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111c2:	2600      	movs	r6, #0
 80111c4:	e7b1      	b.n	801112a <_strtod_l+0x992>
 80111c6:	4f34      	ldr	r7, [pc, #208]	@ (8011298 <_strtod_l+0xb00>)
 80111c8:	2600      	movs	r6, #0
 80111ca:	e7aa      	b.n	8011122 <_strtod_l+0x98a>
 80111cc:	4b32      	ldr	r3, [pc, #200]	@ (8011298 <_strtod_l+0xb00>)
 80111ce:	4630      	mov	r0, r6
 80111d0:	4639      	mov	r1, r7
 80111d2:	2200      	movs	r2, #0
 80111d4:	f7ef fa18 	bl	8000608 <__aeabi_dmul>
 80111d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111da:	4606      	mov	r6, r0
 80111dc:	460f      	mov	r7, r1
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d09f      	beq.n	8011122 <_strtod_l+0x98a>
 80111e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80111e6:	e7a0      	b.n	801112a <_strtod_l+0x992>
 80111e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011270 <_strtod_l+0xad8>
 80111ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111f0:	ec57 6b17 	vmov	r6, r7, d7
 80111f4:	e799      	b.n	801112a <_strtod_l+0x992>
 80111f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80111fa:	9b08      	ldr	r3, [sp, #32]
 80111fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1c1      	bne.n	8011188 <_strtod_l+0x9f0>
 8011204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011208:	0d1b      	lsrs	r3, r3, #20
 801120a:	051b      	lsls	r3, r3, #20
 801120c:	429d      	cmp	r5, r3
 801120e:	d1bb      	bne.n	8011188 <_strtod_l+0x9f0>
 8011210:	4630      	mov	r0, r6
 8011212:	4639      	mov	r1, r7
 8011214:	f7ef fd58 	bl	8000cc8 <__aeabi_d2lz>
 8011218:	f7ef f9c8 	bl	80005ac <__aeabi_l2d>
 801121c:	4602      	mov	r2, r0
 801121e:	460b      	mov	r3, r1
 8011220:	4630      	mov	r0, r6
 8011222:	4639      	mov	r1, r7
 8011224:	f7ef f838 	bl	8000298 <__aeabi_dsub>
 8011228:	460b      	mov	r3, r1
 801122a:	4602      	mov	r2, r0
 801122c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011230:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011236:	ea46 060a 	orr.w	r6, r6, sl
 801123a:	431e      	orrs	r6, r3
 801123c:	d06f      	beq.n	801131e <_strtod_l+0xb86>
 801123e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011278 <_strtod_l+0xae0>)
 8011240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011244:	f7ef fc52 	bl	8000aec <__aeabi_dcmplt>
 8011248:	2800      	cmp	r0, #0
 801124a:	f47f acd3 	bne.w	8010bf4 <_strtod_l+0x45c>
 801124e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011280 <_strtod_l+0xae8>)
 8011250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011258:	f7ef fc66 	bl	8000b28 <__aeabi_dcmpgt>
 801125c:	2800      	cmp	r0, #0
 801125e:	d093      	beq.n	8011188 <_strtod_l+0x9f0>
 8011260:	e4c8      	b.n	8010bf4 <_strtod_l+0x45c>
 8011262:	bf00      	nop
 8011264:	f3af 8000 	nop.w
 8011268:	00000000 	.word	0x00000000
 801126c:	bff00000 	.word	0xbff00000
 8011270:	00000000 	.word	0x00000000
 8011274:	3ff00000 	.word	0x3ff00000
 8011278:	94a03595 	.word	0x94a03595
 801127c:	3fdfffff 	.word	0x3fdfffff
 8011280:	35afe535 	.word	0x35afe535
 8011284:	3fe00000 	.word	0x3fe00000
 8011288:	000fffff 	.word	0x000fffff
 801128c:	7ff00000 	.word	0x7ff00000
 8011290:	7fefffff 	.word	0x7fefffff
 8011294:	3ff00000 	.word	0x3ff00000
 8011298:	3fe00000 	.word	0x3fe00000
 801129c:	7fe00000 	.word	0x7fe00000
 80112a0:	7c9fffff 	.word	0x7c9fffff
 80112a4:	9b08      	ldr	r3, [sp, #32]
 80112a6:	b323      	cbz	r3, 80112f2 <_strtod_l+0xb5a>
 80112a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80112ac:	d821      	bhi.n	80112f2 <_strtod_l+0xb5a>
 80112ae:	a328      	add	r3, pc, #160	@ (adr r3, 8011350 <_strtod_l+0xbb8>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	4630      	mov	r0, r6
 80112b6:	4639      	mov	r1, r7
 80112b8:	f7ef fc22 	bl	8000b00 <__aeabi_dcmple>
 80112bc:	b1a0      	cbz	r0, 80112e8 <_strtod_l+0xb50>
 80112be:	4639      	mov	r1, r7
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7ef fc79 	bl	8000bb8 <__aeabi_d2uiz>
 80112c6:	2801      	cmp	r0, #1
 80112c8:	bf38      	it	cc
 80112ca:	2001      	movcc	r0, #1
 80112cc:	f7ef f922 	bl	8000514 <__aeabi_ui2d>
 80112d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112d2:	4606      	mov	r6, r0
 80112d4:	460f      	mov	r7, r1
 80112d6:	b9fb      	cbnz	r3, 8011318 <_strtod_l+0xb80>
 80112d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80112de:	9315      	str	r3, [sp, #84]	@ 0x54
 80112e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80112e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80112e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80112ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80112ee:	1b5b      	subs	r3, r3, r5
 80112f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80112f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80112f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80112fa:	f7ff f8ef 	bl	80104dc <__ulp>
 80112fe:	4650      	mov	r0, sl
 8011300:	ec53 2b10 	vmov	r2, r3, d0
 8011304:	4659      	mov	r1, fp
 8011306:	f7ef f97f 	bl	8000608 <__aeabi_dmul>
 801130a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801130e:	f7ee ffc5 	bl	800029c <__adddf3>
 8011312:	4682      	mov	sl, r0
 8011314:	468b      	mov	fp, r1
 8011316:	e770      	b.n	80111fa <_strtod_l+0xa62>
 8011318:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801131c:	e7e0      	b.n	80112e0 <_strtod_l+0xb48>
 801131e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011358 <_strtod_l+0xbc0>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ef fbe2 	bl	8000aec <__aeabi_dcmplt>
 8011328:	e798      	b.n	801125c <_strtod_l+0xac4>
 801132a:	2300      	movs	r3, #0
 801132c:	930e      	str	r3, [sp, #56]	@ 0x38
 801132e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011332:	6013      	str	r3, [r2, #0]
 8011334:	f7ff ba6d 	b.w	8010812 <_strtod_l+0x7a>
 8011338:	2a65      	cmp	r2, #101	@ 0x65
 801133a:	f43f ab68 	beq.w	8010a0e <_strtod_l+0x276>
 801133e:	2a45      	cmp	r2, #69	@ 0x45
 8011340:	f43f ab65 	beq.w	8010a0e <_strtod_l+0x276>
 8011344:	2301      	movs	r3, #1
 8011346:	f7ff bba0 	b.w	8010a8a <_strtod_l+0x2f2>
 801134a:	bf00      	nop
 801134c:	f3af 8000 	nop.w
 8011350:	ffc00000 	.word	0xffc00000
 8011354:	41dfffff 	.word	0x41dfffff
 8011358:	94a03595 	.word	0x94a03595
 801135c:	3fcfffff 	.word	0x3fcfffff

08011360 <_strtod_r>:
 8011360:	4b01      	ldr	r3, [pc, #4]	@ (8011368 <_strtod_r+0x8>)
 8011362:	f7ff ba19 	b.w	8010798 <_strtod_l>
 8011366:	bf00      	nop
 8011368:	20000160 	.word	0x20000160

0801136c <_strtol_l.isra.0>:
 801136c:	2b24      	cmp	r3, #36	@ 0x24
 801136e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011372:	4686      	mov	lr, r0
 8011374:	4690      	mov	r8, r2
 8011376:	d801      	bhi.n	801137c <_strtol_l.isra.0+0x10>
 8011378:	2b01      	cmp	r3, #1
 801137a:	d106      	bne.n	801138a <_strtol_l.isra.0+0x1e>
 801137c:	f7fd fe5c 	bl	800f038 <__errno>
 8011380:	2316      	movs	r3, #22
 8011382:	6003      	str	r3, [r0, #0]
 8011384:	2000      	movs	r0, #0
 8011386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801138a:	4834      	ldr	r0, [pc, #208]	@ (801145c <_strtol_l.isra.0+0xf0>)
 801138c:	460d      	mov	r5, r1
 801138e:	462a      	mov	r2, r5
 8011390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011394:	5d06      	ldrb	r6, [r0, r4]
 8011396:	f016 0608 	ands.w	r6, r6, #8
 801139a:	d1f8      	bne.n	801138e <_strtol_l.isra.0+0x22>
 801139c:	2c2d      	cmp	r4, #45	@ 0x2d
 801139e:	d110      	bne.n	80113c2 <_strtol_l.isra.0+0x56>
 80113a0:	782c      	ldrb	r4, [r5, #0]
 80113a2:	2601      	movs	r6, #1
 80113a4:	1c95      	adds	r5, r2, #2
 80113a6:	f033 0210 	bics.w	r2, r3, #16
 80113aa:	d115      	bne.n	80113d8 <_strtol_l.isra.0+0x6c>
 80113ac:	2c30      	cmp	r4, #48	@ 0x30
 80113ae:	d10d      	bne.n	80113cc <_strtol_l.isra.0+0x60>
 80113b0:	782a      	ldrb	r2, [r5, #0]
 80113b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80113b6:	2a58      	cmp	r2, #88	@ 0x58
 80113b8:	d108      	bne.n	80113cc <_strtol_l.isra.0+0x60>
 80113ba:	786c      	ldrb	r4, [r5, #1]
 80113bc:	3502      	adds	r5, #2
 80113be:	2310      	movs	r3, #16
 80113c0:	e00a      	b.n	80113d8 <_strtol_l.isra.0+0x6c>
 80113c2:	2c2b      	cmp	r4, #43	@ 0x2b
 80113c4:	bf04      	itt	eq
 80113c6:	782c      	ldrbeq	r4, [r5, #0]
 80113c8:	1c95      	addeq	r5, r2, #2
 80113ca:	e7ec      	b.n	80113a6 <_strtol_l.isra.0+0x3a>
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1f6      	bne.n	80113be <_strtol_l.isra.0+0x52>
 80113d0:	2c30      	cmp	r4, #48	@ 0x30
 80113d2:	bf14      	ite	ne
 80113d4:	230a      	movne	r3, #10
 80113d6:	2308      	moveq	r3, #8
 80113d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80113dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80113e0:	2200      	movs	r2, #0
 80113e2:	fbbc f9f3 	udiv	r9, ip, r3
 80113e6:	4610      	mov	r0, r2
 80113e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80113ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80113f0:	2f09      	cmp	r7, #9
 80113f2:	d80f      	bhi.n	8011414 <_strtol_l.isra.0+0xa8>
 80113f4:	463c      	mov	r4, r7
 80113f6:	42a3      	cmp	r3, r4
 80113f8:	dd1b      	ble.n	8011432 <_strtol_l.isra.0+0xc6>
 80113fa:	1c57      	adds	r7, r2, #1
 80113fc:	d007      	beq.n	801140e <_strtol_l.isra.0+0xa2>
 80113fe:	4581      	cmp	r9, r0
 8011400:	d314      	bcc.n	801142c <_strtol_l.isra.0+0xc0>
 8011402:	d101      	bne.n	8011408 <_strtol_l.isra.0+0x9c>
 8011404:	45a2      	cmp	sl, r4
 8011406:	db11      	blt.n	801142c <_strtol_l.isra.0+0xc0>
 8011408:	fb00 4003 	mla	r0, r0, r3, r4
 801140c:	2201      	movs	r2, #1
 801140e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011412:	e7eb      	b.n	80113ec <_strtol_l.isra.0+0x80>
 8011414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011418:	2f19      	cmp	r7, #25
 801141a:	d801      	bhi.n	8011420 <_strtol_l.isra.0+0xb4>
 801141c:	3c37      	subs	r4, #55	@ 0x37
 801141e:	e7ea      	b.n	80113f6 <_strtol_l.isra.0+0x8a>
 8011420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011424:	2f19      	cmp	r7, #25
 8011426:	d804      	bhi.n	8011432 <_strtol_l.isra.0+0xc6>
 8011428:	3c57      	subs	r4, #87	@ 0x57
 801142a:	e7e4      	b.n	80113f6 <_strtol_l.isra.0+0x8a>
 801142c:	f04f 32ff 	mov.w	r2, #4294967295
 8011430:	e7ed      	b.n	801140e <_strtol_l.isra.0+0xa2>
 8011432:	1c53      	adds	r3, r2, #1
 8011434:	d108      	bne.n	8011448 <_strtol_l.isra.0+0xdc>
 8011436:	2322      	movs	r3, #34	@ 0x22
 8011438:	f8ce 3000 	str.w	r3, [lr]
 801143c:	4660      	mov	r0, ip
 801143e:	f1b8 0f00 	cmp.w	r8, #0
 8011442:	d0a0      	beq.n	8011386 <_strtol_l.isra.0+0x1a>
 8011444:	1e69      	subs	r1, r5, #1
 8011446:	e006      	b.n	8011456 <_strtol_l.isra.0+0xea>
 8011448:	b106      	cbz	r6, 801144c <_strtol_l.isra.0+0xe0>
 801144a:	4240      	negs	r0, r0
 801144c:	f1b8 0f00 	cmp.w	r8, #0
 8011450:	d099      	beq.n	8011386 <_strtol_l.isra.0+0x1a>
 8011452:	2a00      	cmp	r2, #0
 8011454:	d1f6      	bne.n	8011444 <_strtol_l.isra.0+0xd8>
 8011456:	f8c8 1000 	str.w	r1, [r8]
 801145a:	e794      	b.n	8011386 <_strtol_l.isra.0+0x1a>
 801145c:	08012971 	.word	0x08012971

08011460 <_strtol_r>:
 8011460:	f7ff bf84 	b.w	801136c <_strtol_l.isra.0>

08011464 <__ssputs_r>:
 8011464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011468:	688e      	ldr	r6, [r1, #8]
 801146a:	461f      	mov	r7, r3
 801146c:	42be      	cmp	r6, r7
 801146e:	680b      	ldr	r3, [r1, #0]
 8011470:	4682      	mov	sl, r0
 8011472:	460c      	mov	r4, r1
 8011474:	4690      	mov	r8, r2
 8011476:	d82d      	bhi.n	80114d4 <__ssputs_r+0x70>
 8011478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801147c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011480:	d026      	beq.n	80114d0 <__ssputs_r+0x6c>
 8011482:	6965      	ldr	r5, [r4, #20]
 8011484:	6909      	ldr	r1, [r1, #16]
 8011486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801148a:	eba3 0901 	sub.w	r9, r3, r1
 801148e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011492:	1c7b      	adds	r3, r7, #1
 8011494:	444b      	add	r3, r9
 8011496:	106d      	asrs	r5, r5, #1
 8011498:	429d      	cmp	r5, r3
 801149a:	bf38      	it	cc
 801149c:	461d      	movcc	r5, r3
 801149e:	0553      	lsls	r3, r2, #21
 80114a0:	d527      	bpl.n	80114f2 <__ssputs_r+0x8e>
 80114a2:	4629      	mov	r1, r5
 80114a4:	f7fc fd4e 	bl	800df44 <_malloc_r>
 80114a8:	4606      	mov	r6, r0
 80114aa:	b360      	cbz	r0, 8011506 <__ssputs_r+0xa2>
 80114ac:	6921      	ldr	r1, [r4, #16]
 80114ae:	464a      	mov	r2, r9
 80114b0:	f7fd fdef 	bl	800f092 <memcpy>
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80114ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114be:	81a3      	strh	r3, [r4, #12]
 80114c0:	6126      	str	r6, [r4, #16]
 80114c2:	6165      	str	r5, [r4, #20]
 80114c4:	444e      	add	r6, r9
 80114c6:	eba5 0509 	sub.w	r5, r5, r9
 80114ca:	6026      	str	r6, [r4, #0]
 80114cc:	60a5      	str	r5, [r4, #8]
 80114ce:	463e      	mov	r6, r7
 80114d0:	42be      	cmp	r6, r7
 80114d2:	d900      	bls.n	80114d6 <__ssputs_r+0x72>
 80114d4:	463e      	mov	r6, r7
 80114d6:	6820      	ldr	r0, [r4, #0]
 80114d8:	4632      	mov	r2, r6
 80114da:	4641      	mov	r1, r8
 80114dc:	f000 f9c6 	bl	801186c <memmove>
 80114e0:	68a3      	ldr	r3, [r4, #8]
 80114e2:	1b9b      	subs	r3, r3, r6
 80114e4:	60a3      	str	r3, [r4, #8]
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	4433      	add	r3, r6
 80114ea:	6023      	str	r3, [r4, #0]
 80114ec:	2000      	movs	r0, #0
 80114ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f2:	462a      	mov	r2, r5
 80114f4:	f000 fd6d 	bl	8011fd2 <_realloc_r>
 80114f8:	4606      	mov	r6, r0
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d1e0      	bne.n	80114c0 <__ssputs_r+0x5c>
 80114fe:	6921      	ldr	r1, [r4, #16]
 8011500:	4650      	mov	r0, sl
 8011502:	f7fe fc35 	bl	800fd70 <_free_r>
 8011506:	230c      	movs	r3, #12
 8011508:	f8ca 3000 	str.w	r3, [sl]
 801150c:	89a3      	ldrh	r3, [r4, #12]
 801150e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011512:	81a3      	strh	r3, [r4, #12]
 8011514:	f04f 30ff 	mov.w	r0, #4294967295
 8011518:	e7e9      	b.n	80114ee <__ssputs_r+0x8a>
	...

0801151c <_svfiprintf_r>:
 801151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011520:	4698      	mov	r8, r3
 8011522:	898b      	ldrh	r3, [r1, #12]
 8011524:	061b      	lsls	r3, r3, #24
 8011526:	b09d      	sub	sp, #116	@ 0x74
 8011528:	4607      	mov	r7, r0
 801152a:	460d      	mov	r5, r1
 801152c:	4614      	mov	r4, r2
 801152e:	d510      	bpl.n	8011552 <_svfiprintf_r+0x36>
 8011530:	690b      	ldr	r3, [r1, #16]
 8011532:	b973      	cbnz	r3, 8011552 <_svfiprintf_r+0x36>
 8011534:	2140      	movs	r1, #64	@ 0x40
 8011536:	f7fc fd05 	bl	800df44 <_malloc_r>
 801153a:	6028      	str	r0, [r5, #0]
 801153c:	6128      	str	r0, [r5, #16]
 801153e:	b930      	cbnz	r0, 801154e <_svfiprintf_r+0x32>
 8011540:	230c      	movs	r3, #12
 8011542:	603b      	str	r3, [r7, #0]
 8011544:	f04f 30ff 	mov.w	r0, #4294967295
 8011548:	b01d      	add	sp, #116	@ 0x74
 801154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154e:	2340      	movs	r3, #64	@ 0x40
 8011550:	616b      	str	r3, [r5, #20]
 8011552:	2300      	movs	r3, #0
 8011554:	9309      	str	r3, [sp, #36]	@ 0x24
 8011556:	2320      	movs	r3, #32
 8011558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801155c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011560:	2330      	movs	r3, #48	@ 0x30
 8011562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011700 <_svfiprintf_r+0x1e4>
 8011566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801156a:	f04f 0901 	mov.w	r9, #1
 801156e:	4623      	mov	r3, r4
 8011570:	469a      	mov	sl, r3
 8011572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011576:	b10a      	cbz	r2, 801157c <_svfiprintf_r+0x60>
 8011578:	2a25      	cmp	r2, #37	@ 0x25
 801157a:	d1f9      	bne.n	8011570 <_svfiprintf_r+0x54>
 801157c:	ebba 0b04 	subs.w	fp, sl, r4
 8011580:	d00b      	beq.n	801159a <_svfiprintf_r+0x7e>
 8011582:	465b      	mov	r3, fp
 8011584:	4622      	mov	r2, r4
 8011586:	4629      	mov	r1, r5
 8011588:	4638      	mov	r0, r7
 801158a:	f7ff ff6b 	bl	8011464 <__ssputs_r>
 801158e:	3001      	adds	r0, #1
 8011590:	f000 80a7 	beq.w	80116e2 <_svfiprintf_r+0x1c6>
 8011594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011596:	445a      	add	r2, fp
 8011598:	9209      	str	r2, [sp, #36]	@ 0x24
 801159a:	f89a 3000 	ldrb.w	r3, [sl]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 809f 	beq.w	80116e2 <_svfiprintf_r+0x1c6>
 80115a4:	2300      	movs	r3, #0
 80115a6:	f04f 32ff 	mov.w	r2, #4294967295
 80115aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115ae:	f10a 0a01 	add.w	sl, sl, #1
 80115b2:	9304      	str	r3, [sp, #16]
 80115b4:	9307      	str	r3, [sp, #28]
 80115b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80115bc:	4654      	mov	r4, sl
 80115be:	2205      	movs	r2, #5
 80115c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c4:	484e      	ldr	r0, [pc, #312]	@ (8011700 <_svfiprintf_r+0x1e4>)
 80115c6:	f7ee fe0b 	bl	80001e0 <memchr>
 80115ca:	9a04      	ldr	r2, [sp, #16]
 80115cc:	b9d8      	cbnz	r0, 8011606 <_svfiprintf_r+0xea>
 80115ce:	06d0      	lsls	r0, r2, #27
 80115d0:	bf44      	itt	mi
 80115d2:	2320      	movmi	r3, #32
 80115d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115d8:	0711      	lsls	r1, r2, #28
 80115da:	bf44      	itt	mi
 80115dc:	232b      	movmi	r3, #43	@ 0x2b
 80115de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115e2:	f89a 3000 	ldrb.w	r3, [sl]
 80115e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80115e8:	d015      	beq.n	8011616 <_svfiprintf_r+0xfa>
 80115ea:	9a07      	ldr	r2, [sp, #28]
 80115ec:	4654      	mov	r4, sl
 80115ee:	2000      	movs	r0, #0
 80115f0:	f04f 0c0a 	mov.w	ip, #10
 80115f4:	4621      	mov	r1, r4
 80115f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115fa:	3b30      	subs	r3, #48	@ 0x30
 80115fc:	2b09      	cmp	r3, #9
 80115fe:	d94b      	bls.n	8011698 <_svfiprintf_r+0x17c>
 8011600:	b1b0      	cbz	r0, 8011630 <_svfiprintf_r+0x114>
 8011602:	9207      	str	r2, [sp, #28]
 8011604:	e014      	b.n	8011630 <_svfiprintf_r+0x114>
 8011606:	eba0 0308 	sub.w	r3, r0, r8
 801160a:	fa09 f303 	lsl.w	r3, r9, r3
 801160e:	4313      	orrs	r3, r2
 8011610:	9304      	str	r3, [sp, #16]
 8011612:	46a2      	mov	sl, r4
 8011614:	e7d2      	b.n	80115bc <_svfiprintf_r+0xa0>
 8011616:	9b03      	ldr	r3, [sp, #12]
 8011618:	1d19      	adds	r1, r3, #4
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	9103      	str	r1, [sp, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	bfbb      	ittet	lt
 8011622:	425b      	neglt	r3, r3
 8011624:	f042 0202 	orrlt.w	r2, r2, #2
 8011628:	9307      	strge	r3, [sp, #28]
 801162a:	9307      	strlt	r3, [sp, #28]
 801162c:	bfb8      	it	lt
 801162e:	9204      	strlt	r2, [sp, #16]
 8011630:	7823      	ldrb	r3, [r4, #0]
 8011632:	2b2e      	cmp	r3, #46	@ 0x2e
 8011634:	d10a      	bne.n	801164c <_svfiprintf_r+0x130>
 8011636:	7863      	ldrb	r3, [r4, #1]
 8011638:	2b2a      	cmp	r3, #42	@ 0x2a
 801163a:	d132      	bne.n	80116a2 <_svfiprintf_r+0x186>
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	1d1a      	adds	r2, r3, #4
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	9203      	str	r2, [sp, #12]
 8011644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011648:	3402      	adds	r4, #2
 801164a:	9305      	str	r3, [sp, #20]
 801164c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011710 <_svfiprintf_r+0x1f4>
 8011650:	7821      	ldrb	r1, [r4, #0]
 8011652:	2203      	movs	r2, #3
 8011654:	4650      	mov	r0, sl
 8011656:	f7ee fdc3 	bl	80001e0 <memchr>
 801165a:	b138      	cbz	r0, 801166c <_svfiprintf_r+0x150>
 801165c:	9b04      	ldr	r3, [sp, #16]
 801165e:	eba0 000a 	sub.w	r0, r0, sl
 8011662:	2240      	movs	r2, #64	@ 0x40
 8011664:	4082      	lsls	r2, r0
 8011666:	4313      	orrs	r3, r2
 8011668:	3401      	adds	r4, #1
 801166a:	9304      	str	r3, [sp, #16]
 801166c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011670:	4824      	ldr	r0, [pc, #144]	@ (8011704 <_svfiprintf_r+0x1e8>)
 8011672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011676:	2206      	movs	r2, #6
 8011678:	f7ee fdb2 	bl	80001e0 <memchr>
 801167c:	2800      	cmp	r0, #0
 801167e:	d036      	beq.n	80116ee <_svfiprintf_r+0x1d2>
 8011680:	4b21      	ldr	r3, [pc, #132]	@ (8011708 <_svfiprintf_r+0x1ec>)
 8011682:	bb1b      	cbnz	r3, 80116cc <_svfiprintf_r+0x1b0>
 8011684:	9b03      	ldr	r3, [sp, #12]
 8011686:	3307      	adds	r3, #7
 8011688:	f023 0307 	bic.w	r3, r3, #7
 801168c:	3308      	adds	r3, #8
 801168e:	9303      	str	r3, [sp, #12]
 8011690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011692:	4433      	add	r3, r6
 8011694:	9309      	str	r3, [sp, #36]	@ 0x24
 8011696:	e76a      	b.n	801156e <_svfiprintf_r+0x52>
 8011698:	fb0c 3202 	mla	r2, ip, r2, r3
 801169c:	460c      	mov	r4, r1
 801169e:	2001      	movs	r0, #1
 80116a0:	e7a8      	b.n	80115f4 <_svfiprintf_r+0xd8>
 80116a2:	2300      	movs	r3, #0
 80116a4:	3401      	adds	r4, #1
 80116a6:	9305      	str	r3, [sp, #20]
 80116a8:	4619      	mov	r1, r3
 80116aa:	f04f 0c0a 	mov.w	ip, #10
 80116ae:	4620      	mov	r0, r4
 80116b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116b4:	3a30      	subs	r2, #48	@ 0x30
 80116b6:	2a09      	cmp	r2, #9
 80116b8:	d903      	bls.n	80116c2 <_svfiprintf_r+0x1a6>
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0c6      	beq.n	801164c <_svfiprintf_r+0x130>
 80116be:	9105      	str	r1, [sp, #20]
 80116c0:	e7c4      	b.n	801164c <_svfiprintf_r+0x130>
 80116c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80116c6:	4604      	mov	r4, r0
 80116c8:	2301      	movs	r3, #1
 80116ca:	e7f0      	b.n	80116ae <_svfiprintf_r+0x192>
 80116cc:	ab03      	add	r3, sp, #12
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	462a      	mov	r2, r5
 80116d2:	4b0e      	ldr	r3, [pc, #56]	@ (801170c <_svfiprintf_r+0x1f0>)
 80116d4:	a904      	add	r1, sp, #16
 80116d6:	4638      	mov	r0, r7
 80116d8:	f7fc fd60 	bl	800e19c <_printf_float>
 80116dc:	1c42      	adds	r2, r0, #1
 80116de:	4606      	mov	r6, r0
 80116e0:	d1d6      	bne.n	8011690 <_svfiprintf_r+0x174>
 80116e2:	89ab      	ldrh	r3, [r5, #12]
 80116e4:	065b      	lsls	r3, r3, #25
 80116e6:	f53f af2d 	bmi.w	8011544 <_svfiprintf_r+0x28>
 80116ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116ec:	e72c      	b.n	8011548 <_svfiprintf_r+0x2c>
 80116ee:	ab03      	add	r3, sp, #12
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	462a      	mov	r2, r5
 80116f4:	4b05      	ldr	r3, [pc, #20]	@ (801170c <_svfiprintf_r+0x1f0>)
 80116f6:	a904      	add	r1, sp, #16
 80116f8:	4638      	mov	r0, r7
 80116fa:	f7fc ffe7 	bl	800e6cc <_printf_i>
 80116fe:	e7ed      	b.n	80116dc <_svfiprintf_r+0x1c0>
 8011700:	08012769 	.word	0x08012769
 8011704:	08012773 	.word	0x08012773
 8011708:	0800e19d 	.word	0x0800e19d
 801170c:	08011465 	.word	0x08011465
 8011710:	0801276f 	.word	0x0801276f

08011714 <__sflush_r>:
 8011714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801171c:	0716      	lsls	r6, r2, #28
 801171e:	4605      	mov	r5, r0
 8011720:	460c      	mov	r4, r1
 8011722:	d454      	bmi.n	80117ce <__sflush_r+0xba>
 8011724:	684b      	ldr	r3, [r1, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	dc02      	bgt.n	8011730 <__sflush_r+0x1c>
 801172a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801172c:	2b00      	cmp	r3, #0
 801172e:	dd48      	ble.n	80117c2 <__sflush_r+0xae>
 8011730:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011732:	2e00      	cmp	r6, #0
 8011734:	d045      	beq.n	80117c2 <__sflush_r+0xae>
 8011736:	2300      	movs	r3, #0
 8011738:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801173c:	682f      	ldr	r7, [r5, #0]
 801173e:	6a21      	ldr	r1, [r4, #32]
 8011740:	602b      	str	r3, [r5, #0]
 8011742:	d030      	beq.n	80117a6 <__sflush_r+0x92>
 8011744:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011746:	89a3      	ldrh	r3, [r4, #12]
 8011748:	0759      	lsls	r1, r3, #29
 801174a:	d505      	bpl.n	8011758 <__sflush_r+0x44>
 801174c:	6863      	ldr	r3, [r4, #4]
 801174e:	1ad2      	subs	r2, r2, r3
 8011750:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011752:	b10b      	cbz	r3, 8011758 <__sflush_r+0x44>
 8011754:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011756:	1ad2      	subs	r2, r2, r3
 8011758:	2300      	movs	r3, #0
 801175a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801175c:	6a21      	ldr	r1, [r4, #32]
 801175e:	4628      	mov	r0, r5
 8011760:	47b0      	blx	r6
 8011762:	1c43      	adds	r3, r0, #1
 8011764:	89a3      	ldrh	r3, [r4, #12]
 8011766:	d106      	bne.n	8011776 <__sflush_r+0x62>
 8011768:	6829      	ldr	r1, [r5, #0]
 801176a:	291d      	cmp	r1, #29
 801176c:	d82b      	bhi.n	80117c6 <__sflush_r+0xb2>
 801176e:	4a2a      	ldr	r2, [pc, #168]	@ (8011818 <__sflush_r+0x104>)
 8011770:	40ca      	lsrs	r2, r1
 8011772:	07d6      	lsls	r6, r2, #31
 8011774:	d527      	bpl.n	80117c6 <__sflush_r+0xb2>
 8011776:	2200      	movs	r2, #0
 8011778:	6062      	str	r2, [r4, #4]
 801177a:	04d9      	lsls	r1, r3, #19
 801177c:	6922      	ldr	r2, [r4, #16]
 801177e:	6022      	str	r2, [r4, #0]
 8011780:	d504      	bpl.n	801178c <__sflush_r+0x78>
 8011782:	1c42      	adds	r2, r0, #1
 8011784:	d101      	bne.n	801178a <__sflush_r+0x76>
 8011786:	682b      	ldr	r3, [r5, #0]
 8011788:	b903      	cbnz	r3, 801178c <__sflush_r+0x78>
 801178a:	6560      	str	r0, [r4, #84]	@ 0x54
 801178c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801178e:	602f      	str	r7, [r5, #0]
 8011790:	b1b9      	cbz	r1, 80117c2 <__sflush_r+0xae>
 8011792:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011796:	4299      	cmp	r1, r3
 8011798:	d002      	beq.n	80117a0 <__sflush_r+0x8c>
 801179a:	4628      	mov	r0, r5
 801179c:	f7fe fae8 	bl	800fd70 <_free_r>
 80117a0:	2300      	movs	r3, #0
 80117a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80117a4:	e00d      	b.n	80117c2 <__sflush_r+0xae>
 80117a6:	2301      	movs	r3, #1
 80117a8:	4628      	mov	r0, r5
 80117aa:	47b0      	blx	r6
 80117ac:	4602      	mov	r2, r0
 80117ae:	1c50      	adds	r0, r2, #1
 80117b0:	d1c9      	bne.n	8011746 <__sflush_r+0x32>
 80117b2:	682b      	ldr	r3, [r5, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d0c6      	beq.n	8011746 <__sflush_r+0x32>
 80117b8:	2b1d      	cmp	r3, #29
 80117ba:	d001      	beq.n	80117c0 <__sflush_r+0xac>
 80117bc:	2b16      	cmp	r3, #22
 80117be:	d11e      	bne.n	80117fe <__sflush_r+0xea>
 80117c0:	602f      	str	r7, [r5, #0]
 80117c2:	2000      	movs	r0, #0
 80117c4:	e022      	b.n	801180c <__sflush_r+0xf8>
 80117c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117ca:	b21b      	sxth	r3, r3
 80117cc:	e01b      	b.n	8011806 <__sflush_r+0xf2>
 80117ce:	690f      	ldr	r7, [r1, #16]
 80117d0:	2f00      	cmp	r7, #0
 80117d2:	d0f6      	beq.n	80117c2 <__sflush_r+0xae>
 80117d4:	0793      	lsls	r3, r2, #30
 80117d6:	680e      	ldr	r6, [r1, #0]
 80117d8:	bf08      	it	eq
 80117da:	694b      	ldreq	r3, [r1, #20]
 80117dc:	600f      	str	r7, [r1, #0]
 80117de:	bf18      	it	ne
 80117e0:	2300      	movne	r3, #0
 80117e2:	eba6 0807 	sub.w	r8, r6, r7
 80117e6:	608b      	str	r3, [r1, #8]
 80117e8:	f1b8 0f00 	cmp.w	r8, #0
 80117ec:	dde9      	ble.n	80117c2 <__sflush_r+0xae>
 80117ee:	6a21      	ldr	r1, [r4, #32]
 80117f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80117f2:	4643      	mov	r3, r8
 80117f4:	463a      	mov	r2, r7
 80117f6:	4628      	mov	r0, r5
 80117f8:	47b0      	blx	r6
 80117fa:	2800      	cmp	r0, #0
 80117fc:	dc08      	bgt.n	8011810 <__sflush_r+0xfc>
 80117fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011806:	81a3      	strh	r3, [r4, #12]
 8011808:	f04f 30ff 	mov.w	r0, #4294967295
 801180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011810:	4407      	add	r7, r0
 8011812:	eba8 0800 	sub.w	r8, r8, r0
 8011816:	e7e7      	b.n	80117e8 <__sflush_r+0xd4>
 8011818:	20400001 	.word	0x20400001

0801181c <_fflush_r>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	690b      	ldr	r3, [r1, #16]
 8011820:	4605      	mov	r5, r0
 8011822:	460c      	mov	r4, r1
 8011824:	b913      	cbnz	r3, 801182c <_fflush_r+0x10>
 8011826:	2500      	movs	r5, #0
 8011828:	4628      	mov	r0, r5
 801182a:	bd38      	pop	{r3, r4, r5, pc}
 801182c:	b118      	cbz	r0, 8011836 <_fflush_r+0x1a>
 801182e:	6a03      	ldr	r3, [r0, #32]
 8011830:	b90b      	cbnz	r3, 8011836 <_fflush_r+0x1a>
 8011832:	f7fd fb03 	bl	800ee3c <__sinit>
 8011836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0f3      	beq.n	8011826 <_fflush_r+0xa>
 801183e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011840:	07d0      	lsls	r0, r2, #31
 8011842:	d404      	bmi.n	801184e <_fflush_r+0x32>
 8011844:	0599      	lsls	r1, r3, #22
 8011846:	d402      	bmi.n	801184e <_fflush_r+0x32>
 8011848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801184a:	f7fd fc20 	bl	800f08e <__retarget_lock_acquire_recursive>
 801184e:	4628      	mov	r0, r5
 8011850:	4621      	mov	r1, r4
 8011852:	f7ff ff5f 	bl	8011714 <__sflush_r>
 8011856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011858:	07da      	lsls	r2, r3, #31
 801185a:	4605      	mov	r5, r0
 801185c:	d4e4      	bmi.n	8011828 <_fflush_r+0xc>
 801185e:	89a3      	ldrh	r3, [r4, #12]
 8011860:	059b      	lsls	r3, r3, #22
 8011862:	d4e1      	bmi.n	8011828 <_fflush_r+0xc>
 8011864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011866:	f7fd fc13 	bl	800f090 <__retarget_lock_release_recursive>
 801186a:	e7dd      	b.n	8011828 <_fflush_r+0xc>

0801186c <memmove>:
 801186c:	4288      	cmp	r0, r1
 801186e:	b510      	push	{r4, lr}
 8011870:	eb01 0402 	add.w	r4, r1, r2
 8011874:	d902      	bls.n	801187c <memmove+0x10>
 8011876:	4284      	cmp	r4, r0
 8011878:	4623      	mov	r3, r4
 801187a:	d807      	bhi.n	801188c <memmove+0x20>
 801187c:	1e43      	subs	r3, r0, #1
 801187e:	42a1      	cmp	r1, r4
 8011880:	d008      	beq.n	8011894 <memmove+0x28>
 8011882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011886:	f803 2f01 	strb.w	r2, [r3, #1]!
 801188a:	e7f8      	b.n	801187e <memmove+0x12>
 801188c:	4402      	add	r2, r0
 801188e:	4601      	mov	r1, r0
 8011890:	428a      	cmp	r2, r1
 8011892:	d100      	bne.n	8011896 <memmove+0x2a>
 8011894:	bd10      	pop	{r4, pc}
 8011896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801189a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801189e:	e7f7      	b.n	8011890 <memmove+0x24>

080118a0 <strncmp>:
 80118a0:	b510      	push	{r4, lr}
 80118a2:	b16a      	cbz	r2, 80118c0 <strncmp+0x20>
 80118a4:	3901      	subs	r1, #1
 80118a6:	1884      	adds	r4, r0, r2
 80118a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d103      	bne.n	80118bc <strncmp+0x1c>
 80118b4:	42a0      	cmp	r0, r4
 80118b6:	d001      	beq.n	80118bc <strncmp+0x1c>
 80118b8:	2a00      	cmp	r2, #0
 80118ba:	d1f5      	bne.n	80118a8 <strncmp+0x8>
 80118bc:	1ad0      	subs	r0, r2, r3
 80118be:	bd10      	pop	{r4, pc}
 80118c0:	4610      	mov	r0, r2
 80118c2:	e7fc      	b.n	80118be <strncmp+0x1e>
 80118c4:	0000      	movs	r0, r0
	...

080118c8 <nan>:
 80118c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80118d0 <nan+0x8>
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop
 80118d0:	00000000 	.word	0x00000000
 80118d4:	7ff80000 	.word	0x7ff80000

080118d8 <__assert_func>:
 80118d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118da:	4614      	mov	r4, r2
 80118dc:	461a      	mov	r2, r3
 80118de:	4b09      	ldr	r3, [pc, #36]	@ (8011904 <__assert_func+0x2c>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4605      	mov	r5, r0
 80118e4:	68d8      	ldr	r0, [r3, #12]
 80118e6:	b14c      	cbz	r4, 80118fc <__assert_func+0x24>
 80118e8:	4b07      	ldr	r3, [pc, #28]	@ (8011908 <__assert_func+0x30>)
 80118ea:	9100      	str	r1, [sp, #0]
 80118ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118f0:	4906      	ldr	r1, [pc, #24]	@ (801190c <__assert_func+0x34>)
 80118f2:	462b      	mov	r3, r5
 80118f4:	f000 fba8 	bl	8012048 <fiprintf>
 80118f8:	f000 fbb8 	bl	801206c <abort>
 80118fc:	4b04      	ldr	r3, [pc, #16]	@ (8011910 <__assert_func+0x38>)
 80118fe:	461c      	mov	r4, r3
 8011900:	e7f3      	b.n	80118ea <__assert_func+0x12>
 8011902:	bf00      	nop
 8011904:	20000110 	.word	0x20000110
 8011908:	08012782 	.word	0x08012782
 801190c:	0801278f 	.word	0x0801278f
 8011910:	080127bd 	.word	0x080127bd

08011914 <_calloc_r>:
 8011914:	b570      	push	{r4, r5, r6, lr}
 8011916:	fba1 5402 	umull	r5, r4, r1, r2
 801191a:	b934      	cbnz	r4, 801192a <_calloc_r+0x16>
 801191c:	4629      	mov	r1, r5
 801191e:	f7fc fb11 	bl	800df44 <_malloc_r>
 8011922:	4606      	mov	r6, r0
 8011924:	b928      	cbnz	r0, 8011932 <_calloc_r+0x1e>
 8011926:	4630      	mov	r0, r6
 8011928:	bd70      	pop	{r4, r5, r6, pc}
 801192a:	220c      	movs	r2, #12
 801192c:	6002      	str	r2, [r0, #0]
 801192e:	2600      	movs	r6, #0
 8011930:	e7f9      	b.n	8011926 <_calloc_r+0x12>
 8011932:	462a      	mov	r2, r5
 8011934:	4621      	mov	r1, r4
 8011936:	f7fd fb1c 	bl	800ef72 <memset>
 801193a:	e7f4      	b.n	8011926 <_calloc_r+0x12>

0801193c <rshift>:
 801193c:	6903      	ldr	r3, [r0, #16]
 801193e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011946:	ea4f 1261 	mov.w	r2, r1, asr #5
 801194a:	f100 0414 	add.w	r4, r0, #20
 801194e:	dd45      	ble.n	80119dc <rshift+0xa0>
 8011950:	f011 011f 	ands.w	r1, r1, #31
 8011954:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011958:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801195c:	d10c      	bne.n	8011978 <rshift+0x3c>
 801195e:	f100 0710 	add.w	r7, r0, #16
 8011962:	4629      	mov	r1, r5
 8011964:	42b1      	cmp	r1, r6
 8011966:	d334      	bcc.n	80119d2 <rshift+0x96>
 8011968:	1a9b      	subs	r3, r3, r2
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	1eea      	subs	r2, r5, #3
 801196e:	4296      	cmp	r6, r2
 8011970:	bf38      	it	cc
 8011972:	2300      	movcc	r3, #0
 8011974:	4423      	add	r3, r4
 8011976:	e015      	b.n	80119a4 <rshift+0x68>
 8011978:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801197c:	f1c1 0820 	rsb	r8, r1, #32
 8011980:	40cf      	lsrs	r7, r1
 8011982:	f105 0e04 	add.w	lr, r5, #4
 8011986:	46a1      	mov	r9, r4
 8011988:	4576      	cmp	r6, lr
 801198a:	46f4      	mov	ip, lr
 801198c:	d815      	bhi.n	80119ba <rshift+0x7e>
 801198e:	1a9a      	subs	r2, r3, r2
 8011990:	0092      	lsls	r2, r2, #2
 8011992:	3a04      	subs	r2, #4
 8011994:	3501      	adds	r5, #1
 8011996:	42ae      	cmp	r6, r5
 8011998:	bf38      	it	cc
 801199a:	2200      	movcc	r2, #0
 801199c:	18a3      	adds	r3, r4, r2
 801199e:	50a7      	str	r7, [r4, r2]
 80119a0:	b107      	cbz	r7, 80119a4 <rshift+0x68>
 80119a2:	3304      	adds	r3, #4
 80119a4:	1b1a      	subs	r2, r3, r4
 80119a6:	42a3      	cmp	r3, r4
 80119a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80119ac:	bf08      	it	eq
 80119ae:	2300      	moveq	r3, #0
 80119b0:	6102      	str	r2, [r0, #16]
 80119b2:	bf08      	it	eq
 80119b4:	6143      	streq	r3, [r0, #20]
 80119b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119ba:	f8dc c000 	ldr.w	ip, [ip]
 80119be:	fa0c fc08 	lsl.w	ip, ip, r8
 80119c2:	ea4c 0707 	orr.w	r7, ip, r7
 80119c6:	f849 7b04 	str.w	r7, [r9], #4
 80119ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80119ce:	40cf      	lsrs	r7, r1
 80119d0:	e7da      	b.n	8011988 <rshift+0x4c>
 80119d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80119d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80119da:	e7c3      	b.n	8011964 <rshift+0x28>
 80119dc:	4623      	mov	r3, r4
 80119de:	e7e1      	b.n	80119a4 <rshift+0x68>

080119e0 <__hexdig_fun>:
 80119e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80119e4:	2b09      	cmp	r3, #9
 80119e6:	d802      	bhi.n	80119ee <__hexdig_fun+0xe>
 80119e8:	3820      	subs	r0, #32
 80119ea:	b2c0      	uxtb	r0, r0
 80119ec:	4770      	bx	lr
 80119ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80119f2:	2b05      	cmp	r3, #5
 80119f4:	d801      	bhi.n	80119fa <__hexdig_fun+0x1a>
 80119f6:	3847      	subs	r0, #71	@ 0x47
 80119f8:	e7f7      	b.n	80119ea <__hexdig_fun+0xa>
 80119fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80119fe:	2b05      	cmp	r3, #5
 8011a00:	d801      	bhi.n	8011a06 <__hexdig_fun+0x26>
 8011a02:	3827      	subs	r0, #39	@ 0x27
 8011a04:	e7f1      	b.n	80119ea <__hexdig_fun+0xa>
 8011a06:	2000      	movs	r0, #0
 8011a08:	4770      	bx	lr
	...

08011a0c <__gethex>:
 8011a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a10:	b085      	sub	sp, #20
 8011a12:	468a      	mov	sl, r1
 8011a14:	9302      	str	r3, [sp, #8]
 8011a16:	680b      	ldr	r3, [r1, #0]
 8011a18:	9001      	str	r0, [sp, #4]
 8011a1a:	4690      	mov	r8, r2
 8011a1c:	1c9c      	adds	r4, r3, #2
 8011a1e:	46a1      	mov	r9, r4
 8011a20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011a24:	2830      	cmp	r0, #48	@ 0x30
 8011a26:	d0fa      	beq.n	8011a1e <__gethex+0x12>
 8011a28:	eba9 0303 	sub.w	r3, r9, r3
 8011a2c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011a30:	f7ff ffd6 	bl	80119e0 <__hexdig_fun>
 8011a34:	4605      	mov	r5, r0
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d168      	bne.n	8011b0c <__gethex+0x100>
 8011a3a:	49a0      	ldr	r1, [pc, #640]	@ (8011cbc <__gethex+0x2b0>)
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	4648      	mov	r0, r9
 8011a40:	f7ff ff2e 	bl	80118a0 <strncmp>
 8011a44:	4607      	mov	r7, r0
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d167      	bne.n	8011b1a <__gethex+0x10e>
 8011a4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011a4e:	4626      	mov	r6, r4
 8011a50:	f7ff ffc6 	bl	80119e0 <__hexdig_fun>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d062      	beq.n	8011b1e <__gethex+0x112>
 8011a58:	4623      	mov	r3, r4
 8011a5a:	7818      	ldrb	r0, [r3, #0]
 8011a5c:	2830      	cmp	r0, #48	@ 0x30
 8011a5e:	4699      	mov	r9, r3
 8011a60:	f103 0301 	add.w	r3, r3, #1
 8011a64:	d0f9      	beq.n	8011a5a <__gethex+0x4e>
 8011a66:	f7ff ffbb 	bl	80119e0 <__hexdig_fun>
 8011a6a:	fab0 f580 	clz	r5, r0
 8011a6e:	096d      	lsrs	r5, r5, #5
 8011a70:	f04f 0b01 	mov.w	fp, #1
 8011a74:	464a      	mov	r2, r9
 8011a76:	4616      	mov	r6, r2
 8011a78:	3201      	adds	r2, #1
 8011a7a:	7830      	ldrb	r0, [r6, #0]
 8011a7c:	f7ff ffb0 	bl	80119e0 <__hexdig_fun>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d1f8      	bne.n	8011a76 <__gethex+0x6a>
 8011a84:	498d      	ldr	r1, [pc, #564]	@ (8011cbc <__gethex+0x2b0>)
 8011a86:	2201      	movs	r2, #1
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f7ff ff09 	bl	80118a0 <strncmp>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d13f      	bne.n	8011b12 <__gethex+0x106>
 8011a92:	b944      	cbnz	r4, 8011aa6 <__gethex+0x9a>
 8011a94:	1c74      	adds	r4, r6, #1
 8011a96:	4622      	mov	r2, r4
 8011a98:	4616      	mov	r6, r2
 8011a9a:	3201      	adds	r2, #1
 8011a9c:	7830      	ldrb	r0, [r6, #0]
 8011a9e:	f7ff ff9f 	bl	80119e0 <__hexdig_fun>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	d1f8      	bne.n	8011a98 <__gethex+0x8c>
 8011aa6:	1ba4      	subs	r4, r4, r6
 8011aa8:	00a7      	lsls	r7, r4, #2
 8011aaa:	7833      	ldrb	r3, [r6, #0]
 8011aac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011ab0:	2b50      	cmp	r3, #80	@ 0x50
 8011ab2:	d13e      	bne.n	8011b32 <__gethex+0x126>
 8011ab4:	7873      	ldrb	r3, [r6, #1]
 8011ab6:	2b2b      	cmp	r3, #43	@ 0x2b
 8011ab8:	d033      	beq.n	8011b22 <__gethex+0x116>
 8011aba:	2b2d      	cmp	r3, #45	@ 0x2d
 8011abc:	d034      	beq.n	8011b28 <__gethex+0x11c>
 8011abe:	1c71      	adds	r1, r6, #1
 8011ac0:	2400      	movs	r4, #0
 8011ac2:	7808      	ldrb	r0, [r1, #0]
 8011ac4:	f7ff ff8c 	bl	80119e0 <__hexdig_fun>
 8011ac8:	1e43      	subs	r3, r0, #1
 8011aca:	b2db      	uxtb	r3, r3
 8011acc:	2b18      	cmp	r3, #24
 8011ace:	d830      	bhi.n	8011b32 <__gethex+0x126>
 8011ad0:	f1a0 0210 	sub.w	r2, r0, #16
 8011ad4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ad8:	f7ff ff82 	bl	80119e0 <__hexdig_fun>
 8011adc:	f100 3cff 	add.w	ip, r0, #4294967295
 8011ae0:	fa5f fc8c 	uxtb.w	ip, ip
 8011ae4:	f1bc 0f18 	cmp.w	ip, #24
 8011ae8:	f04f 030a 	mov.w	r3, #10
 8011aec:	d91e      	bls.n	8011b2c <__gethex+0x120>
 8011aee:	b104      	cbz	r4, 8011af2 <__gethex+0xe6>
 8011af0:	4252      	negs	r2, r2
 8011af2:	4417      	add	r7, r2
 8011af4:	f8ca 1000 	str.w	r1, [sl]
 8011af8:	b1ed      	cbz	r5, 8011b36 <__gethex+0x12a>
 8011afa:	f1bb 0f00 	cmp.w	fp, #0
 8011afe:	bf0c      	ite	eq
 8011b00:	2506      	moveq	r5, #6
 8011b02:	2500      	movne	r5, #0
 8011b04:	4628      	mov	r0, r5
 8011b06:	b005      	add	sp, #20
 8011b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b0c:	2500      	movs	r5, #0
 8011b0e:	462c      	mov	r4, r5
 8011b10:	e7b0      	b.n	8011a74 <__gethex+0x68>
 8011b12:	2c00      	cmp	r4, #0
 8011b14:	d1c7      	bne.n	8011aa6 <__gethex+0x9a>
 8011b16:	4627      	mov	r7, r4
 8011b18:	e7c7      	b.n	8011aaa <__gethex+0x9e>
 8011b1a:	464e      	mov	r6, r9
 8011b1c:	462f      	mov	r7, r5
 8011b1e:	2501      	movs	r5, #1
 8011b20:	e7c3      	b.n	8011aaa <__gethex+0x9e>
 8011b22:	2400      	movs	r4, #0
 8011b24:	1cb1      	adds	r1, r6, #2
 8011b26:	e7cc      	b.n	8011ac2 <__gethex+0xb6>
 8011b28:	2401      	movs	r4, #1
 8011b2a:	e7fb      	b.n	8011b24 <__gethex+0x118>
 8011b2c:	fb03 0002 	mla	r0, r3, r2, r0
 8011b30:	e7ce      	b.n	8011ad0 <__gethex+0xc4>
 8011b32:	4631      	mov	r1, r6
 8011b34:	e7de      	b.n	8011af4 <__gethex+0xe8>
 8011b36:	eba6 0309 	sub.w	r3, r6, r9
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	4629      	mov	r1, r5
 8011b3e:	2b07      	cmp	r3, #7
 8011b40:	dc0a      	bgt.n	8011b58 <__gethex+0x14c>
 8011b42:	9801      	ldr	r0, [sp, #4]
 8011b44:	f7fe f95e 	bl	800fe04 <_Balloc>
 8011b48:	4604      	mov	r4, r0
 8011b4a:	b940      	cbnz	r0, 8011b5e <__gethex+0x152>
 8011b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8011cc0 <__gethex+0x2b4>)
 8011b4e:	4602      	mov	r2, r0
 8011b50:	21e4      	movs	r1, #228	@ 0xe4
 8011b52:	485c      	ldr	r0, [pc, #368]	@ (8011cc4 <__gethex+0x2b8>)
 8011b54:	f7ff fec0 	bl	80118d8 <__assert_func>
 8011b58:	3101      	adds	r1, #1
 8011b5a:	105b      	asrs	r3, r3, #1
 8011b5c:	e7ef      	b.n	8011b3e <__gethex+0x132>
 8011b5e:	f100 0a14 	add.w	sl, r0, #20
 8011b62:	2300      	movs	r3, #0
 8011b64:	4655      	mov	r5, sl
 8011b66:	469b      	mov	fp, r3
 8011b68:	45b1      	cmp	r9, r6
 8011b6a:	d337      	bcc.n	8011bdc <__gethex+0x1d0>
 8011b6c:	f845 bb04 	str.w	fp, [r5], #4
 8011b70:	eba5 050a 	sub.w	r5, r5, sl
 8011b74:	10ad      	asrs	r5, r5, #2
 8011b76:	6125      	str	r5, [r4, #16]
 8011b78:	4658      	mov	r0, fp
 8011b7a:	f7fe fa35 	bl	800ffe8 <__hi0bits>
 8011b7e:	016d      	lsls	r5, r5, #5
 8011b80:	f8d8 6000 	ldr.w	r6, [r8]
 8011b84:	1a2d      	subs	r5, r5, r0
 8011b86:	42b5      	cmp	r5, r6
 8011b88:	dd54      	ble.n	8011c34 <__gethex+0x228>
 8011b8a:	1bad      	subs	r5, r5, r6
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f7fe fdc1 	bl	8010716 <__any_on>
 8011b94:	4681      	mov	r9, r0
 8011b96:	b178      	cbz	r0, 8011bb8 <__gethex+0x1ac>
 8011b98:	1e6b      	subs	r3, r5, #1
 8011b9a:	1159      	asrs	r1, r3, #5
 8011b9c:	f003 021f 	and.w	r2, r3, #31
 8011ba0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011ba4:	f04f 0901 	mov.w	r9, #1
 8011ba8:	fa09 f202 	lsl.w	r2, r9, r2
 8011bac:	420a      	tst	r2, r1
 8011bae:	d003      	beq.n	8011bb8 <__gethex+0x1ac>
 8011bb0:	454b      	cmp	r3, r9
 8011bb2:	dc36      	bgt.n	8011c22 <__gethex+0x216>
 8011bb4:	f04f 0902 	mov.w	r9, #2
 8011bb8:	4629      	mov	r1, r5
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ff febe 	bl	801193c <rshift>
 8011bc0:	442f      	add	r7, r5
 8011bc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011bc6:	42bb      	cmp	r3, r7
 8011bc8:	da42      	bge.n	8011c50 <__gethex+0x244>
 8011bca:	9801      	ldr	r0, [sp, #4]
 8011bcc:	4621      	mov	r1, r4
 8011bce:	f7fe f959 	bl	800fe84 <_Bfree>
 8011bd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	6013      	str	r3, [r2, #0]
 8011bd8:	25a3      	movs	r5, #163	@ 0xa3
 8011bda:	e793      	b.n	8011b04 <__gethex+0xf8>
 8011bdc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011be0:	2a2e      	cmp	r2, #46	@ 0x2e
 8011be2:	d012      	beq.n	8011c0a <__gethex+0x1fe>
 8011be4:	2b20      	cmp	r3, #32
 8011be6:	d104      	bne.n	8011bf2 <__gethex+0x1e6>
 8011be8:	f845 bb04 	str.w	fp, [r5], #4
 8011bec:	f04f 0b00 	mov.w	fp, #0
 8011bf0:	465b      	mov	r3, fp
 8011bf2:	7830      	ldrb	r0, [r6, #0]
 8011bf4:	9303      	str	r3, [sp, #12]
 8011bf6:	f7ff fef3 	bl	80119e0 <__hexdig_fun>
 8011bfa:	9b03      	ldr	r3, [sp, #12]
 8011bfc:	f000 000f 	and.w	r0, r0, #15
 8011c00:	4098      	lsls	r0, r3
 8011c02:	ea4b 0b00 	orr.w	fp, fp, r0
 8011c06:	3304      	adds	r3, #4
 8011c08:	e7ae      	b.n	8011b68 <__gethex+0x15c>
 8011c0a:	45b1      	cmp	r9, r6
 8011c0c:	d8ea      	bhi.n	8011be4 <__gethex+0x1d8>
 8011c0e:	492b      	ldr	r1, [pc, #172]	@ (8011cbc <__gethex+0x2b0>)
 8011c10:	9303      	str	r3, [sp, #12]
 8011c12:	2201      	movs	r2, #1
 8011c14:	4630      	mov	r0, r6
 8011c16:	f7ff fe43 	bl	80118a0 <strncmp>
 8011c1a:	9b03      	ldr	r3, [sp, #12]
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	d1e1      	bne.n	8011be4 <__gethex+0x1d8>
 8011c20:	e7a2      	b.n	8011b68 <__gethex+0x15c>
 8011c22:	1ea9      	subs	r1, r5, #2
 8011c24:	4620      	mov	r0, r4
 8011c26:	f7fe fd76 	bl	8010716 <__any_on>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	d0c2      	beq.n	8011bb4 <__gethex+0x1a8>
 8011c2e:	f04f 0903 	mov.w	r9, #3
 8011c32:	e7c1      	b.n	8011bb8 <__gethex+0x1ac>
 8011c34:	da09      	bge.n	8011c4a <__gethex+0x23e>
 8011c36:	1b75      	subs	r5, r6, r5
 8011c38:	4621      	mov	r1, r4
 8011c3a:	9801      	ldr	r0, [sp, #4]
 8011c3c:	462a      	mov	r2, r5
 8011c3e:	f7fe fb31 	bl	80102a4 <__lshift>
 8011c42:	1b7f      	subs	r7, r7, r5
 8011c44:	4604      	mov	r4, r0
 8011c46:	f100 0a14 	add.w	sl, r0, #20
 8011c4a:	f04f 0900 	mov.w	r9, #0
 8011c4e:	e7b8      	b.n	8011bc2 <__gethex+0x1b6>
 8011c50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011c54:	42bd      	cmp	r5, r7
 8011c56:	dd6f      	ble.n	8011d38 <__gethex+0x32c>
 8011c58:	1bed      	subs	r5, r5, r7
 8011c5a:	42ae      	cmp	r6, r5
 8011c5c:	dc34      	bgt.n	8011cc8 <__gethex+0x2bc>
 8011c5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c62:	2b02      	cmp	r3, #2
 8011c64:	d022      	beq.n	8011cac <__gethex+0x2a0>
 8011c66:	2b03      	cmp	r3, #3
 8011c68:	d024      	beq.n	8011cb4 <__gethex+0x2a8>
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d115      	bne.n	8011c9a <__gethex+0x28e>
 8011c6e:	42ae      	cmp	r6, r5
 8011c70:	d113      	bne.n	8011c9a <__gethex+0x28e>
 8011c72:	2e01      	cmp	r6, #1
 8011c74:	d10b      	bne.n	8011c8e <__gethex+0x282>
 8011c76:	9a02      	ldr	r2, [sp, #8]
 8011c78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c7c:	6013      	str	r3, [r2, #0]
 8011c7e:	2301      	movs	r3, #1
 8011c80:	6123      	str	r3, [r4, #16]
 8011c82:	f8ca 3000 	str.w	r3, [sl]
 8011c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c88:	2562      	movs	r5, #98	@ 0x62
 8011c8a:	601c      	str	r4, [r3, #0]
 8011c8c:	e73a      	b.n	8011b04 <__gethex+0xf8>
 8011c8e:	1e71      	subs	r1, r6, #1
 8011c90:	4620      	mov	r0, r4
 8011c92:	f7fe fd40 	bl	8010716 <__any_on>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d1ed      	bne.n	8011c76 <__gethex+0x26a>
 8011c9a:	9801      	ldr	r0, [sp, #4]
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	f7fe f8f1 	bl	800fe84 <_Bfree>
 8011ca2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	6013      	str	r3, [r2, #0]
 8011ca8:	2550      	movs	r5, #80	@ 0x50
 8011caa:	e72b      	b.n	8011b04 <__gethex+0xf8>
 8011cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d1f3      	bne.n	8011c9a <__gethex+0x28e>
 8011cb2:	e7e0      	b.n	8011c76 <__gethex+0x26a>
 8011cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1dd      	bne.n	8011c76 <__gethex+0x26a>
 8011cba:	e7ee      	b.n	8011c9a <__gethex+0x28e>
 8011cbc:	08012767 	.word	0x08012767
 8011cc0:	080126fd 	.word	0x080126fd
 8011cc4:	080127be 	.word	0x080127be
 8011cc8:	1e6f      	subs	r7, r5, #1
 8011cca:	f1b9 0f00 	cmp.w	r9, #0
 8011cce:	d130      	bne.n	8011d32 <__gethex+0x326>
 8011cd0:	b127      	cbz	r7, 8011cdc <__gethex+0x2d0>
 8011cd2:	4639      	mov	r1, r7
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f7fe fd1e 	bl	8010716 <__any_on>
 8011cda:	4681      	mov	r9, r0
 8011cdc:	117a      	asrs	r2, r7, #5
 8011cde:	2301      	movs	r3, #1
 8011ce0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011ce4:	f007 071f 	and.w	r7, r7, #31
 8011ce8:	40bb      	lsls	r3, r7
 8011cea:	4213      	tst	r3, r2
 8011cec:	4629      	mov	r1, r5
 8011cee:	4620      	mov	r0, r4
 8011cf0:	bf18      	it	ne
 8011cf2:	f049 0902 	orrne.w	r9, r9, #2
 8011cf6:	f7ff fe21 	bl	801193c <rshift>
 8011cfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011cfe:	1b76      	subs	r6, r6, r5
 8011d00:	2502      	movs	r5, #2
 8011d02:	f1b9 0f00 	cmp.w	r9, #0
 8011d06:	d047      	beq.n	8011d98 <__gethex+0x38c>
 8011d08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d0c:	2b02      	cmp	r3, #2
 8011d0e:	d015      	beq.n	8011d3c <__gethex+0x330>
 8011d10:	2b03      	cmp	r3, #3
 8011d12:	d017      	beq.n	8011d44 <__gethex+0x338>
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	d109      	bne.n	8011d2c <__gethex+0x320>
 8011d18:	f019 0f02 	tst.w	r9, #2
 8011d1c:	d006      	beq.n	8011d2c <__gethex+0x320>
 8011d1e:	f8da 3000 	ldr.w	r3, [sl]
 8011d22:	ea49 0903 	orr.w	r9, r9, r3
 8011d26:	f019 0f01 	tst.w	r9, #1
 8011d2a:	d10e      	bne.n	8011d4a <__gethex+0x33e>
 8011d2c:	f045 0510 	orr.w	r5, r5, #16
 8011d30:	e032      	b.n	8011d98 <__gethex+0x38c>
 8011d32:	f04f 0901 	mov.w	r9, #1
 8011d36:	e7d1      	b.n	8011cdc <__gethex+0x2d0>
 8011d38:	2501      	movs	r5, #1
 8011d3a:	e7e2      	b.n	8011d02 <__gethex+0x2f6>
 8011d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d3e:	f1c3 0301 	rsb	r3, r3, #1
 8011d42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d0f0      	beq.n	8011d2c <__gethex+0x320>
 8011d4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011d4e:	f104 0314 	add.w	r3, r4, #20
 8011d52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011d56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011d5a:	f04f 0c00 	mov.w	ip, #0
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011d68:	d01b      	beq.n	8011da2 <__gethex+0x396>
 8011d6a:	3201      	adds	r2, #1
 8011d6c:	6002      	str	r2, [r0, #0]
 8011d6e:	2d02      	cmp	r5, #2
 8011d70:	f104 0314 	add.w	r3, r4, #20
 8011d74:	d13c      	bne.n	8011df0 <__gethex+0x3e4>
 8011d76:	f8d8 2000 	ldr.w	r2, [r8]
 8011d7a:	3a01      	subs	r2, #1
 8011d7c:	42b2      	cmp	r2, r6
 8011d7e:	d109      	bne.n	8011d94 <__gethex+0x388>
 8011d80:	1171      	asrs	r1, r6, #5
 8011d82:	2201      	movs	r2, #1
 8011d84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d88:	f006 061f 	and.w	r6, r6, #31
 8011d8c:	fa02 f606 	lsl.w	r6, r2, r6
 8011d90:	421e      	tst	r6, r3
 8011d92:	d13a      	bne.n	8011e0a <__gethex+0x3fe>
 8011d94:	f045 0520 	orr.w	r5, r5, #32
 8011d98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d9a:	601c      	str	r4, [r3, #0]
 8011d9c:	9b02      	ldr	r3, [sp, #8]
 8011d9e:	601f      	str	r7, [r3, #0]
 8011da0:	e6b0      	b.n	8011b04 <__gethex+0xf8>
 8011da2:	4299      	cmp	r1, r3
 8011da4:	f843 cc04 	str.w	ip, [r3, #-4]
 8011da8:	d8d9      	bhi.n	8011d5e <__gethex+0x352>
 8011daa:	68a3      	ldr	r3, [r4, #8]
 8011dac:	459b      	cmp	fp, r3
 8011dae:	db17      	blt.n	8011de0 <__gethex+0x3d4>
 8011db0:	6861      	ldr	r1, [r4, #4]
 8011db2:	9801      	ldr	r0, [sp, #4]
 8011db4:	3101      	adds	r1, #1
 8011db6:	f7fe f825 	bl	800fe04 <_Balloc>
 8011dba:	4681      	mov	r9, r0
 8011dbc:	b918      	cbnz	r0, 8011dc6 <__gethex+0x3ba>
 8011dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8011e28 <__gethex+0x41c>)
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	2184      	movs	r1, #132	@ 0x84
 8011dc4:	e6c5      	b.n	8011b52 <__gethex+0x146>
 8011dc6:	6922      	ldr	r2, [r4, #16]
 8011dc8:	3202      	adds	r2, #2
 8011dca:	f104 010c 	add.w	r1, r4, #12
 8011dce:	0092      	lsls	r2, r2, #2
 8011dd0:	300c      	adds	r0, #12
 8011dd2:	f7fd f95e 	bl	800f092 <memcpy>
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	9801      	ldr	r0, [sp, #4]
 8011dda:	f7fe f853 	bl	800fe84 <_Bfree>
 8011dde:	464c      	mov	r4, r9
 8011de0:	6923      	ldr	r3, [r4, #16]
 8011de2:	1c5a      	adds	r2, r3, #1
 8011de4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011de8:	6122      	str	r2, [r4, #16]
 8011dea:	2201      	movs	r2, #1
 8011dec:	615a      	str	r2, [r3, #20]
 8011dee:	e7be      	b.n	8011d6e <__gethex+0x362>
 8011df0:	6922      	ldr	r2, [r4, #16]
 8011df2:	455a      	cmp	r2, fp
 8011df4:	dd0b      	ble.n	8011e0e <__gethex+0x402>
 8011df6:	2101      	movs	r1, #1
 8011df8:	4620      	mov	r0, r4
 8011dfa:	f7ff fd9f 	bl	801193c <rshift>
 8011dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e02:	3701      	adds	r7, #1
 8011e04:	42bb      	cmp	r3, r7
 8011e06:	f6ff aee0 	blt.w	8011bca <__gethex+0x1be>
 8011e0a:	2501      	movs	r5, #1
 8011e0c:	e7c2      	b.n	8011d94 <__gethex+0x388>
 8011e0e:	f016 061f 	ands.w	r6, r6, #31
 8011e12:	d0fa      	beq.n	8011e0a <__gethex+0x3fe>
 8011e14:	4453      	add	r3, sl
 8011e16:	f1c6 0620 	rsb	r6, r6, #32
 8011e1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011e1e:	f7fe f8e3 	bl	800ffe8 <__hi0bits>
 8011e22:	42b0      	cmp	r0, r6
 8011e24:	dbe7      	blt.n	8011df6 <__gethex+0x3ea>
 8011e26:	e7f0      	b.n	8011e0a <__gethex+0x3fe>
 8011e28:	080126fd 	.word	0x080126fd

08011e2c <L_shift>:
 8011e2c:	f1c2 0208 	rsb	r2, r2, #8
 8011e30:	0092      	lsls	r2, r2, #2
 8011e32:	b570      	push	{r4, r5, r6, lr}
 8011e34:	f1c2 0620 	rsb	r6, r2, #32
 8011e38:	6843      	ldr	r3, [r0, #4]
 8011e3a:	6804      	ldr	r4, [r0, #0]
 8011e3c:	fa03 f506 	lsl.w	r5, r3, r6
 8011e40:	432c      	orrs	r4, r5
 8011e42:	40d3      	lsrs	r3, r2
 8011e44:	6004      	str	r4, [r0, #0]
 8011e46:	f840 3f04 	str.w	r3, [r0, #4]!
 8011e4a:	4288      	cmp	r0, r1
 8011e4c:	d3f4      	bcc.n	8011e38 <L_shift+0xc>
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}

08011e50 <__match>:
 8011e50:	b530      	push	{r4, r5, lr}
 8011e52:	6803      	ldr	r3, [r0, #0]
 8011e54:	3301      	adds	r3, #1
 8011e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e5a:	b914      	cbnz	r4, 8011e62 <__match+0x12>
 8011e5c:	6003      	str	r3, [r0, #0]
 8011e5e:	2001      	movs	r0, #1
 8011e60:	bd30      	pop	{r4, r5, pc}
 8011e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011e6a:	2d19      	cmp	r5, #25
 8011e6c:	bf98      	it	ls
 8011e6e:	3220      	addls	r2, #32
 8011e70:	42a2      	cmp	r2, r4
 8011e72:	d0f0      	beq.n	8011e56 <__match+0x6>
 8011e74:	2000      	movs	r0, #0
 8011e76:	e7f3      	b.n	8011e60 <__match+0x10>

08011e78 <__hexnan>:
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	680b      	ldr	r3, [r1, #0]
 8011e7e:	6801      	ldr	r1, [r0, #0]
 8011e80:	115e      	asrs	r6, r3, #5
 8011e82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e86:	f013 031f 	ands.w	r3, r3, #31
 8011e8a:	b087      	sub	sp, #28
 8011e8c:	bf18      	it	ne
 8011e8e:	3604      	addne	r6, #4
 8011e90:	2500      	movs	r5, #0
 8011e92:	1f37      	subs	r7, r6, #4
 8011e94:	4682      	mov	sl, r0
 8011e96:	4690      	mov	r8, r2
 8011e98:	9301      	str	r3, [sp, #4]
 8011e9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e9e:	46b9      	mov	r9, r7
 8011ea0:	463c      	mov	r4, r7
 8011ea2:	9502      	str	r5, [sp, #8]
 8011ea4:	46ab      	mov	fp, r5
 8011ea6:	784a      	ldrb	r2, [r1, #1]
 8011ea8:	1c4b      	adds	r3, r1, #1
 8011eaa:	9303      	str	r3, [sp, #12]
 8011eac:	b342      	cbz	r2, 8011f00 <__hexnan+0x88>
 8011eae:	4610      	mov	r0, r2
 8011eb0:	9105      	str	r1, [sp, #20]
 8011eb2:	9204      	str	r2, [sp, #16]
 8011eb4:	f7ff fd94 	bl	80119e0 <__hexdig_fun>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d151      	bne.n	8011f60 <__hexnan+0xe8>
 8011ebc:	9a04      	ldr	r2, [sp, #16]
 8011ebe:	9905      	ldr	r1, [sp, #20]
 8011ec0:	2a20      	cmp	r2, #32
 8011ec2:	d818      	bhi.n	8011ef6 <__hexnan+0x7e>
 8011ec4:	9b02      	ldr	r3, [sp, #8]
 8011ec6:	459b      	cmp	fp, r3
 8011ec8:	dd13      	ble.n	8011ef2 <__hexnan+0x7a>
 8011eca:	454c      	cmp	r4, r9
 8011ecc:	d206      	bcs.n	8011edc <__hexnan+0x64>
 8011ece:	2d07      	cmp	r5, #7
 8011ed0:	dc04      	bgt.n	8011edc <__hexnan+0x64>
 8011ed2:	462a      	mov	r2, r5
 8011ed4:	4649      	mov	r1, r9
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f7ff ffa8 	bl	8011e2c <L_shift>
 8011edc:	4544      	cmp	r4, r8
 8011ede:	d952      	bls.n	8011f86 <__hexnan+0x10e>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f1a4 0904 	sub.w	r9, r4, #4
 8011ee6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011eea:	f8cd b008 	str.w	fp, [sp, #8]
 8011eee:	464c      	mov	r4, r9
 8011ef0:	461d      	mov	r5, r3
 8011ef2:	9903      	ldr	r1, [sp, #12]
 8011ef4:	e7d7      	b.n	8011ea6 <__hexnan+0x2e>
 8011ef6:	2a29      	cmp	r2, #41	@ 0x29
 8011ef8:	d157      	bne.n	8011faa <__hexnan+0x132>
 8011efa:	3102      	adds	r1, #2
 8011efc:	f8ca 1000 	str.w	r1, [sl]
 8011f00:	f1bb 0f00 	cmp.w	fp, #0
 8011f04:	d051      	beq.n	8011faa <__hexnan+0x132>
 8011f06:	454c      	cmp	r4, r9
 8011f08:	d206      	bcs.n	8011f18 <__hexnan+0xa0>
 8011f0a:	2d07      	cmp	r5, #7
 8011f0c:	dc04      	bgt.n	8011f18 <__hexnan+0xa0>
 8011f0e:	462a      	mov	r2, r5
 8011f10:	4649      	mov	r1, r9
 8011f12:	4620      	mov	r0, r4
 8011f14:	f7ff ff8a 	bl	8011e2c <L_shift>
 8011f18:	4544      	cmp	r4, r8
 8011f1a:	d936      	bls.n	8011f8a <__hexnan+0x112>
 8011f1c:	f1a8 0204 	sub.w	r2, r8, #4
 8011f20:	4623      	mov	r3, r4
 8011f22:	f853 1b04 	ldr.w	r1, [r3], #4
 8011f26:	f842 1f04 	str.w	r1, [r2, #4]!
 8011f2a:	429f      	cmp	r7, r3
 8011f2c:	d2f9      	bcs.n	8011f22 <__hexnan+0xaa>
 8011f2e:	1b3b      	subs	r3, r7, r4
 8011f30:	f023 0303 	bic.w	r3, r3, #3
 8011f34:	3304      	adds	r3, #4
 8011f36:	3401      	adds	r4, #1
 8011f38:	3e03      	subs	r6, #3
 8011f3a:	42b4      	cmp	r4, r6
 8011f3c:	bf88      	it	hi
 8011f3e:	2304      	movhi	r3, #4
 8011f40:	4443      	add	r3, r8
 8011f42:	2200      	movs	r2, #0
 8011f44:	f843 2b04 	str.w	r2, [r3], #4
 8011f48:	429f      	cmp	r7, r3
 8011f4a:	d2fb      	bcs.n	8011f44 <__hexnan+0xcc>
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	b91b      	cbnz	r3, 8011f58 <__hexnan+0xe0>
 8011f50:	4547      	cmp	r7, r8
 8011f52:	d128      	bne.n	8011fa6 <__hexnan+0x12e>
 8011f54:	2301      	movs	r3, #1
 8011f56:	603b      	str	r3, [r7, #0]
 8011f58:	2005      	movs	r0, #5
 8011f5a:	b007      	add	sp, #28
 8011f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f60:	3501      	adds	r5, #1
 8011f62:	2d08      	cmp	r5, #8
 8011f64:	f10b 0b01 	add.w	fp, fp, #1
 8011f68:	dd06      	ble.n	8011f78 <__hexnan+0x100>
 8011f6a:	4544      	cmp	r4, r8
 8011f6c:	d9c1      	bls.n	8011ef2 <__hexnan+0x7a>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f74:	2501      	movs	r5, #1
 8011f76:	3c04      	subs	r4, #4
 8011f78:	6822      	ldr	r2, [r4, #0]
 8011f7a:	f000 000f 	and.w	r0, r0, #15
 8011f7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011f82:	6020      	str	r0, [r4, #0]
 8011f84:	e7b5      	b.n	8011ef2 <__hexnan+0x7a>
 8011f86:	2508      	movs	r5, #8
 8011f88:	e7b3      	b.n	8011ef2 <__hexnan+0x7a>
 8011f8a:	9b01      	ldr	r3, [sp, #4]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d0dd      	beq.n	8011f4c <__hexnan+0xd4>
 8011f90:	f1c3 0320 	rsb	r3, r3, #32
 8011f94:	f04f 32ff 	mov.w	r2, #4294967295
 8011f98:	40da      	lsrs	r2, r3
 8011f9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011f9e:	4013      	ands	r3, r2
 8011fa0:	f846 3c04 	str.w	r3, [r6, #-4]
 8011fa4:	e7d2      	b.n	8011f4c <__hexnan+0xd4>
 8011fa6:	3f04      	subs	r7, #4
 8011fa8:	e7d0      	b.n	8011f4c <__hexnan+0xd4>
 8011faa:	2004      	movs	r0, #4
 8011fac:	e7d5      	b.n	8011f5a <__hexnan+0xe2>

08011fae <__ascii_mbtowc>:
 8011fae:	b082      	sub	sp, #8
 8011fb0:	b901      	cbnz	r1, 8011fb4 <__ascii_mbtowc+0x6>
 8011fb2:	a901      	add	r1, sp, #4
 8011fb4:	b142      	cbz	r2, 8011fc8 <__ascii_mbtowc+0x1a>
 8011fb6:	b14b      	cbz	r3, 8011fcc <__ascii_mbtowc+0x1e>
 8011fb8:	7813      	ldrb	r3, [r2, #0]
 8011fba:	600b      	str	r3, [r1, #0]
 8011fbc:	7812      	ldrb	r2, [r2, #0]
 8011fbe:	1e10      	subs	r0, r2, #0
 8011fc0:	bf18      	it	ne
 8011fc2:	2001      	movne	r0, #1
 8011fc4:	b002      	add	sp, #8
 8011fc6:	4770      	bx	lr
 8011fc8:	4610      	mov	r0, r2
 8011fca:	e7fb      	b.n	8011fc4 <__ascii_mbtowc+0x16>
 8011fcc:	f06f 0001 	mvn.w	r0, #1
 8011fd0:	e7f8      	b.n	8011fc4 <__ascii_mbtowc+0x16>

08011fd2 <_realloc_r>:
 8011fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd6:	4607      	mov	r7, r0
 8011fd8:	4614      	mov	r4, r2
 8011fda:	460d      	mov	r5, r1
 8011fdc:	b921      	cbnz	r1, 8011fe8 <_realloc_r+0x16>
 8011fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe2:	4611      	mov	r1, r2
 8011fe4:	f7fb bfae 	b.w	800df44 <_malloc_r>
 8011fe8:	b92a      	cbnz	r2, 8011ff6 <_realloc_r+0x24>
 8011fea:	f7fd fec1 	bl	800fd70 <_free_r>
 8011fee:	4625      	mov	r5, r4
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff6:	f000 f840 	bl	801207a <_malloc_usable_size_r>
 8011ffa:	4284      	cmp	r4, r0
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	d802      	bhi.n	8012006 <_realloc_r+0x34>
 8012000:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012004:	d8f4      	bhi.n	8011ff0 <_realloc_r+0x1e>
 8012006:	4621      	mov	r1, r4
 8012008:	4638      	mov	r0, r7
 801200a:	f7fb ff9b 	bl	800df44 <_malloc_r>
 801200e:	4680      	mov	r8, r0
 8012010:	b908      	cbnz	r0, 8012016 <_realloc_r+0x44>
 8012012:	4645      	mov	r5, r8
 8012014:	e7ec      	b.n	8011ff0 <_realloc_r+0x1e>
 8012016:	42b4      	cmp	r4, r6
 8012018:	4622      	mov	r2, r4
 801201a:	4629      	mov	r1, r5
 801201c:	bf28      	it	cs
 801201e:	4632      	movcs	r2, r6
 8012020:	f7fd f837 	bl	800f092 <memcpy>
 8012024:	4629      	mov	r1, r5
 8012026:	4638      	mov	r0, r7
 8012028:	f7fd fea2 	bl	800fd70 <_free_r>
 801202c:	e7f1      	b.n	8012012 <_realloc_r+0x40>

0801202e <__ascii_wctomb>:
 801202e:	4603      	mov	r3, r0
 8012030:	4608      	mov	r0, r1
 8012032:	b141      	cbz	r1, 8012046 <__ascii_wctomb+0x18>
 8012034:	2aff      	cmp	r2, #255	@ 0xff
 8012036:	d904      	bls.n	8012042 <__ascii_wctomb+0x14>
 8012038:	228a      	movs	r2, #138	@ 0x8a
 801203a:	601a      	str	r2, [r3, #0]
 801203c:	f04f 30ff 	mov.w	r0, #4294967295
 8012040:	4770      	bx	lr
 8012042:	700a      	strb	r2, [r1, #0]
 8012044:	2001      	movs	r0, #1
 8012046:	4770      	bx	lr

08012048 <fiprintf>:
 8012048:	b40e      	push	{r1, r2, r3}
 801204a:	b503      	push	{r0, r1, lr}
 801204c:	4601      	mov	r1, r0
 801204e:	ab03      	add	r3, sp, #12
 8012050:	4805      	ldr	r0, [pc, #20]	@ (8012068 <fiprintf+0x20>)
 8012052:	f853 2b04 	ldr.w	r2, [r3], #4
 8012056:	6800      	ldr	r0, [r0, #0]
 8012058:	9301      	str	r3, [sp, #4]
 801205a:	f000 f83f 	bl	80120dc <_vfiprintf_r>
 801205e:	b002      	add	sp, #8
 8012060:	f85d eb04 	ldr.w	lr, [sp], #4
 8012064:	b003      	add	sp, #12
 8012066:	4770      	bx	lr
 8012068:	20000110 	.word	0x20000110

0801206c <abort>:
 801206c:	b508      	push	{r3, lr}
 801206e:	2006      	movs	r0, #6
 8012070:	f000 fa08 	bl	8012484 <raise>
 8012074:	2001      	movs	r0, #1
 8012076:	f7f0 fcce 	bl	8002a16 <_exit>

0801207a <_malloc_usable_size_r>:
 801207a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801207e:	1f18      	subs	r0, r3, #4
 8012080:	2b00      	cmp	r3, #0
 8012082:	bfbc      	itt	lt
 8012084:	580b      	ldrlt	r3, [r1, r0]
 8012086:	18c0      	addlt	r0, r0, r3
 8012088:	4770      	bx	lr

0801208a <__sfputc_r>:
 801208a:	6893      	ldr	r3, [r2, #8]
 801208c:	3b01      	subs	r3, #1
 801208e:	2b00      	cmp	r3, #0
 8012090:	b410      	push	{r4}
 8012092:	6093      	str	r3, [r2, #8]
 8012094:	da08      	bge.n	80120a8 <__sfputc_r+0x1e>
 8012096:	6994      	ldr	r4, [r2, #24]
 8012098:	42a3      	cmp	r3, r4
 801209a:	db01      	blt.n	80120a0 <__sfputc_r+0x16>
 801209c:	290a      	cmp	r1, #10
 801209e:	d103      	bne.n	80120a8 <__sfputc_r+0x1e>
 80120a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120a4:	f000 b932 	b.w	801230c <__swbuf_r>
 80120a8:	6813      	ldr	r3, [r2, #0]
 80120aa:	1c58      	adds	r0, r3, #1
 80120ac:	6010      	str	r0, [r2, #0]
 80120ae:	7019      	strb	r1, [r3, #0]
 80120b0:	4608      	mov	r0, r1
 80120b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <__sfputs_r>:
 80120b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ba:	4606      	mov	r6, r0
 80120bc:	460f      	mov	r7, r1
 80120be:	4614      	mov	r4, r2
 80120c0:	18d5      	adds	r5, r2, r3
 80120c2:	42ac      	cmp	r4, r5
 80120c4:	d101      	bne.n	80120ca <__sfputs_r+0x12>
 80120c6:	2000      	movs	r0, #0
 80120c8:	e007      	b.n	80120da <__sfputs_r+0x22>
 80120ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ce:	463a      	mov	r2, r7
 80120d0:	4630      	mov	r0, r6
 80120d2:	f7ff ffda 	bl	801208a <__sfputc_r>
 80120d6:	1c43      	adds	r3, r0, #1
 80120d8:	d1f3      	bne.n	80120c2 <__sfputs_r+0xa>
 80120da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080120dc <_vfiprintf_r>:
 80120dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e0:	460d      	mov	r5, r1
 80120e2:	b09d      	sub	sp, #116	@ 0x74
 80120e4:	4614      	mov	r4, r2
 80120e6:	4698      	mov	r8, r3
 80120e8:	4606      	mov	r6, r0
 80120ea:	b118      	cbz	r0, 80120f4 <_vfiprintf_r+0x18>
 80120ec:	6a03      	ldr	r3, [r0, #32]
 80120ee:	b90b      	cbnz	r3, 80120f4 <_vfiprintf_r+0x18>
 80120f0:	f7fc fea4 	bl	800ee3c <__sinit>
 80120f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120f6:	07d9      	lsls	r1, r3, #31
 80120f8:	d405      	bmi.n	8012106 <_vfiprintf_r+0x2a>
 80120fa:	89ab      	ldrh	r3, [r5, #12]
 80120fc:	059a      	lsls	r2, r3, #22
 80120fe:	d402      	bmi.n	8012106 <_vfiprintf_r+0x2a>
 8012100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012102:	f7fc ffc4 	bl	800f08e <__retarget_lock_acquire_recursive>
 8012106:	89ab      	ldrh	r3, [r5, #12]
 8012108:	071b      	lsls	r3, r3, #28
 801210a:	d501      	bpl.n	8012110 <_vfiprintf_r+0x34>
 801210c:	692b      	ldr	r3, [r5, #16]
 801210e:	b99b      	cbnz	r3, 8012138 <_vfiprintf_r+0x5c>
 8012110:	4629      	mov	r1, r5
 8012112:	4630      	mov	r0, r6
 8012114:	f000 f938 	bl	8012388 <__swsetup_r>
 8012118:	b170      	cbz	r0, 8012138 <_vfiprintf_r+0x5c>
 801211a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801211c:	07dc      	lsls	r4, r3, #31
 801211e:	d504      	bpl.n	801212a <_vfiprintf_r+0x4e>
 8012120:	f04f 30ff 	mov.w	r0, #4294967295
 8012124:	b01d      	add	sp, #116	@ 0x74
 8012126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801212a:	89ab      	ldrh	r3, [r5, #12]
 801212c:	0598      	lsls	r0, r3, #22
 801212e:	d4f7      	bmi.n	8012120 <_vfiprintf_r+0x44>
 8012130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012132:	f7fc ffad 	bl	800f090 <__retarget_lock_release_recursive>
 8012136:	e7f3      	b.n	8012120 <_vfiprintf_r+0x44>
 8012138:	2300      	movs	r3, #0
 801213a:	9309      	str	r3, [sp, #36]	@ 0x24
 801213c:	2320      	movs	r3, #32
 801213e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012142:	f8cd 800c 	str.w	r8, [sp, #12]
 8012146:	2330      	movs	r3, #48	@ 0x30
 8012148:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80122f8 <_vfiprintf_r+0x21c>
 801214c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012150:	f04f 0901 	mov.w	r9, #1
 8012154:	4623      	mov	r3, r4
 8012156:	469a      	mov	sl, r3
 8012158:	f813 2b01 	ldrb.w	r2, [r3], #1
 801215c:	b10a      	cbz	r2, 8012162 <_vfiprintf_r+0x86>
 801215e:	2a25      	cmp	r2, #37	@ 0x25
 8012160:	d1f9      	bne.n	8012156 <_vfiprintf_r+0x7a>
 8012162:	ebba 0b04 	subs.w	fp, sl, r4
 8012166:	d00b      	beq.n	8012180 <_vfiprintf_r+0xa4>
 8012168:	465b      	mov	r3, fp
 801216a:	4622      	mov	r2, r4
 801216c:	4629      	mov	r1, r5
 801216e:	4630      	mov	r0, r6
 8012170:	f7ff ffa2 	bl	80120b8 <__sfputs_r>
 8012174:	3001      	adds	r0, #1
 8012176:	f000 80a7 	beq.w	80122c8 <_vfiprintf_r+0x1ec>
 801217a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801217c:	445a      	add	r2, fp
 801217e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012180:	f89a 3000 	ldrb.w	r3, [sl]
 8012184:	2b00      	cmp	r3, #0
 8012186:	f000 809f 	beq.w	80122c8 <_vfiprintf_r+0x1ec>
 801218a:	2300      	movs	r3, #0
 801218c:	f04f 32ff 	mov.w	r2, #4294967295
 8012190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012194:	f10a 0a01 	add.w	sl, sl, #1
 8012198:	9304      	str	r3, [sp, #16]
 801219a:	9307      	str	r3, [sp, #28]
 801219c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80121a2:	4654      	mov	r4, sl
 80121a4:	2205      	movs	r2, #5
 80121a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121aa:	4853      	ldr	r0, [pc, #332]	@ (80122f8 <_vfiprintf_r+0x21c>)
 80121ac:	f7ee f818 	bl	80001e0 <memchr>
 80121b0:	9a04      	ldr	r2, [sp, #16]
 80121b2:	b9d8      	cbnz	r0, 80121ec <_vfiprintf_r+0x110>
 80121b4:	06d1      	lsls	r1, r2, #27
 80121b6:	bf44      	itt	mi
 80121b8:	2320      	movmi	r3, #32
 80121ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121be:	0713      	lsls	r3, r2, #28
 80121c0:	bf44      	itt	mi
 80121c2:	232b      	movmi	r3, #43	@ 0x2b
 80121c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121c8:	f89a 3000 	ldrb.w	r3, [sl]
 80121cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80121ce:	d015      	beq.n	80121fc <_vfiprintf_r+0x120>
 80121d0:	9a07      	ldr	r2, [sp, #28]
 80121d2:	4654      	mov	r4, sl
 80121d4:	2000      	movs	r0, #0
 80121d6:	f04f 0c0a 	mov.w	ip, #10
 80121da:	4621      	mov	r1, r4
 80121dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121e0:	3b30      	subs	r3, #48	@ 0x30
 80121e2:	2b09      	cmp	r3, #9
 80121e4:	d94b      	bls.n	801227e <_vfiprintf_r+0x1a2>
 80121e6:	b1b0      	cbz	r0, 8012216 <_vfiprintf_r+0x13a>
 80121e8:	9207      	str	r2, [sp, #28]
 80121ea:	e014      	b.n	8012216 <_vfiprintf_r+0x13a>
 80121ec:	eba0 0308 	sub.w	r3, r0, r8
 80121f0:	fa09 f303 	lsl.w	r3, r9, r3
 80121f4:	4313      	orrs	r3, r2
 80121f6:	9304      	str	r3, [sp, #16]
 80121f8:	46a2      	mov	sl, r4
 80121fa:	e7d2      	b.n	80121a2 <_vfiprintf_r+0xc6>
 80121fc:	9b03      	ldr	r3, [sp, #12]
 80121fe:	1d19      	adds	r1, r3, #4
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	9103      	str	r1, [sp, #12]
 8012204:	2b00      	cmp	r3, #0
 8012206:	bfbb      	ittet	lt
 8012208:	425b      	neglt	r3, r3
 801220a:	f042 0202 	orrlt.w	r2, r2, #2
 801220e:	9307      	strge	r3, [sp, #28]
 8012210:	9307      	strlt	r3, [sp, #28]
 8012212:	bfb8      	it	lt
 8012214:	9204      	strlt	r2, [sp, #16]
 8012216:	7823      	ldrb	r3, [r4, #0]
 8012218:	2b2e      	cmp	r3, #46	@ 0x2e
 801221a:	d10a      	bne.n	8012232 <_vfiprintf_r+0x156>
 801221c:	7863      	ldrb	r3, [r4, #1]
 801221e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012220:	d132      	bne.n	8012288 <_vfiprintf_r+0x1ac>
 8012222:	9b03      	ldr	r3, [sp, #12]
 8012224:	1d1a      	adds	r2, r3, #4
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	9203      	str	r2, [sp, #12]
 801222a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801222e:	3402      	adds	r4, #2
 8012230:	9305      	str	r3, [sp, #20]
 8012232:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012308 <_vfiprintf_r+0x22c>
 8012236:	7821      	ldrb	r1, [r4, #0]
 8012238:	2203      	movs	r2, #3
 801223a:	4650      	mov	r0, sl
 801223c:	f7ed ffd0 	bl	80001e0 <memchr>
 8012240:	b138      	cbz	r0, 8012252 <_vfiprintf_r+0x176>
 8012242:	9b04      	ldr	r3, [sp, #16]
 8012244:	eba0 000a 	sub.w	r0, r0, sl
 8012248:	2240      	movs	r2, #64	@ 0x40
 801224a:	4082      	lsls	r2, r0
 801224c:	4313      	orrs	r3, r2
 801224e:	3401      	adds	r4, #1
 8012250:	9304      	str	r3, [sp, #16]
 8012252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012256:	4829      	ldr	r0, [pc, #164]	@ (80122fc <_vfiprintf_r+0x220>)
 8012258:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801225c:	2206      	movs	r2, #6
 801225e:	f7ed ffbf 	bl	80001e0 <memchr>
 8012262:	2800      	cmp	r0, #0
 8012264:	d03f      	beq.n	80122e6 <_vfiprintf_r+0x20a>
 8012266:	4b26      	ldr	r3, [pc, #152]	@ (8012300 <_vfiprintf_r+0x224>)
 8012268:	bb1b      	cbnz	r3, 80122b2 <_vfiprintf_r+0x1d6>
 801226a:	9b03      	ldr	r3, [sp, #12]
 801226c:	3307      	adds	r3, #7
 801226e:	f023 0307 	bic.w	r3, r3, #7
 8012272:	3308      	adds	r3, #8
 8012274:	9303      	str	r3, [sp, #12]
 8012276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012278:	443b      	add	r3, r7
 801227a:	9309      	str	r3, [sp, #36]	@ 0x24
 801227c:	e76a      	b.n	8012154 <_vfiprintf_r+0x78>
 801227e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012282:	460c      	mov	r4, r1
 8012284:	2001      	movs	r0, #1
 8012286:	e7a8      	b.n	80121da <_vfiprintf_r+0xfe>
 8012288:	2300      	movs	r3, #0
 801228a:	3401      	adds	r4, #1
 801228c:	9305      	str	r3, [sp, #20]
 801228e:	4619      	mov	r1, r3
 8012290:	f04f 0c0a 	mov.w	ip, #10
 8012294:	4620      	mov	r0, r4
 8012296:	f810 2b01 	ldrb.w	r2, [r0], #1
 801229a:	3a30      	subs	r2, #48	@ 0x30
 801229c:	2a09      	cmp	r2, #9
 801229e:	d903      	bls.n	80122a8 <_vfiprintf_r+0x1cc>
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d0c6      	beq.n	8012232 <_vfiprintf_r+0x156>
 80122a4:	9105      	str	r1, [sp, #20]
 80122a6:	e7c4      	b.n	8012232 <_vfiprintf_r+0x156>
 80122a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80122ac:	4604      	mov	r4, r0
 80122ae:	2301      	movs	r3, #1
 80122b0:	e7f0      	b.n	8012294 <_vfiprintf_r+0x1b8>
 80122b2:	ab03      	add	r3, sp, #12
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	462a      	mov	r2, r5
 80122b8:	4b12      	ldr	r3, [pc, #72]	@ (8012304 <_vfiprintf_r+0x228>)
 80122ba:	a904      	add	r1, sp, #16
 80122bc:	4630      	mov	r0, r6
 80122be:	f7fb ff6d 	bl	800e19c <_printf_float>
 80122c2:	4607      	mov	r7, r0
 80122c4:	1c78      	adds	r0, r7, #1
 80122c6:	d1d6      	bne.n	8012276 <_vfiprintf_r+0x19a>
 80122c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80122ca:	07d9      	lsls	r1, r3, #31
 80122cc:	d405      	bmi.n	80122da <_vfiprintf_r+0x1fe>
 80122ce:	89ab      	ldrh	r3, [r5, #12]
 80122d0:	059a      	lsls	r2, r3, #22
 80122d2:	d402      	bmi.n	80122da <_vfiprintf_r+0x1fe>
 80122d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122d6:	f7fc fedb 	bl	800f090 <__retarget_lock_release_recursive>
 80122da:	89ab      	ldrh	r3, [r5, #12]
 80122dc:	065b      	lsls	r3, r3, #25
 80122de:	f53f af1f 	bmi.w	8012120 <_vfiprintf_r+0x44>
 80122e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122e4:	e71e      	b.n	8012124 <_vfiprintf_r+0x48>
 80122e6:	ab03      	add	r3, sp, #12
 80122e8:	9300      	str	r3, [sp, #0]
 80122ea:	462a      	mov	r2, r5
 80122ec:	4b05      	ldr	r3, [pc, #20]	@ (8012304 <_vfiprintf_r+0x228>)
 80122ee:	a904      	add	r1, sp, #16
 80122f0:	4630      	mov	r0, r6
 80122f2:	f7fc f9eb 	bl	800e6cc <_printf_i>
 80122f6:	e7e4      	b.n	80122c2 <_vfiprintf_r+0x1e6>
 80122f8:	08012769 	.word	0x08012769
 80122fc:	08012773 	.word	0x08012773
 8012300:	0800e19d 	.word	0x0800e19d
 8012304:	080120b9 	.word	0x080120b9
 8012308:	0801276f 	.word	0x0801276f

0801230c <__swbuf_r>:
 801230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230e:	460e      	mov	r6, r1
 8012310:	4614      	mov	r4, r2
 8012312:	4605      	mov	r5, r0
 8012314:	b118      	cbz	r0, 801231e <__swbuf_r+0x12>
 8012316:	6a03      	ldr	r3, [r0, #32]
 8012318:	b90b      	cbnz	r3, 801231e <__swbuf_r+0x12>
 801231a:	f7fc fd8f 	bl	800ee3c <__sinit>
 801231e:	69a3      	ldr	r3, [r4, #24]
 8012320:	60a3      	str	r3, [r4, #8]
 8012322:	89a3      	ldrh	r3, [r4, #12]
 8012324:	071a      	lsls	r2, r3, #28
 8012326:	d501      	bpl.n	801232c <__swbuf_r+0x20>
 8012328:	6923      	ldr	r3, [r4, #16]
 801232a:	b943      	cbnz	r3, 801233e <__swbuf_r+0x32>
 801232c:	4621      	mov	r1, r4
 801232e:	4628      	mov	r0, r5
 8012330:	f000 f82a 	bl	8012388 <__swsetup_r>
 8012334:	b118      	cbz	r0, 801233e <__swbuf_r+0x32>
 8012336:	f04f 37ff 	mov.w	r7, #4294967295
 801233a:	4638      	mov	r0, r7
 801233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801233e:	6823      	ldr	r3, [r4, #0]
 8012340:	6922      	ldr	r2, [r4, #16]
 8012342:	1a98      	subs	r0, r3, r2
 8012344:	6963      	ldr	r3, [r4, #20]
 8012346:	b2f6      	uxtb	r6, r6
 8012348:	4283      	cmp	r3, r0
 801234a:	4637      	mov	r7, r6
 801234c:	dc05      	bgt.n	801235a <__swbuf_r+0x4e>
 801234e:	4621      	mov	r1, r4
 8012350:	4628      	mov	r0, r5
 8012352:	f7ff fa63 	bl	801181c <_fflush_r>
 8012356:	2800      	cmp	r0, #0
 8012358:	d1ed      	bne.n	8012336 <__swbuf_r+0x2a>
 801235a:	68a3      	ldr	r3, [r4, #8]
 801235c:	3b01      	subs	r3, #1
 801235e:	60a3      	str	r3, [r4, #8]
 8012360:	6823      	ldr	r3, [r4, #0]
 8012362:	1c5a      	adds	r2, r3, #1
 8012364:	6022      	str	r2, [r4, #0]
 8012366:	701e      	strb	r6, [r3, #0]
 8012368:	6962      	ldr	r2, [r4, #20]
 801236a:	1c43      	adds	r3, r0, #1
 801236c:	429a      	cmp	r2, r3
 801236e:	d004      	beq.n	801237a <__swbuf_r+0x6e>
 8012370:	89a3      	ldrh	r3, [r4, #12]
 8012372:	07db      	lsls	r3, r3, #31
 8012374:	d5e1      	bpl.n	801233a <__swbuf_r+0x2e>
 8012376:	2e0a      	cmp	r6, #10
 8012378:	d1df      	bne.n	801233a <__swbuf_r+0x2e>
 801237a:	4621      	mov	r1, r4
 801237c:	4628      	mov	r0, r5
 801237e:	f7ff fa4d 	bl	801181c <_fflush_r>
 8012382:	2800      	cmp	r0, #0
 8012384:	d0d9      	beq.n	801233a <__swbuf_r+0x2e>
 8012386:	e7d6      	b.n	8012336 <__swbuf_r+0x2a>

08012388 <__swsetup_r>:
 8012388:	b538      	push	{r3, r4, r5, lr}
 801238a:	4b29      	ldr	r3, [pc, #164]	@ (8012430 <__swsetup_r+0xa8>)
 801238c:	4605      	mov	r5, r0
 801238e:	6818      	ldr	r0, [r3, #0]
 8012390:	460c      	mov	r4, r1
 8012392:	b118      	cbz	r0, 801239c <__swsetup_r+0x14>
 8012394:	6a03      	ldr	r3, [r0, #32]
 8012396:	b90b      	cbnz	r3, 801239c <__swsetup_r+0x14>
 8012398:	f7fc fd50 	bl	800ee3c <__sinit>
 801239c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123a0:	0719      	lsls	r1, r3, #28
 80123a2:	d422      	bmi.n	80123ea <__swsetup_r+0x62>
 80123a4:	06da      	lsls	r2, r3, #27
 80123a6:	d407      	bmi.n	80123b8 <__swsetup_r+0x30>
 80123a8:	2209      	movs	r2, #9
 80123aa:	602a      	str	r2, [r5, #0]
 80123ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123b0:	81a3      	strh	r3, [r4, #12]
 80123b2:	f04f 30ff 	mov.w	r0, #4294967295
 80123b6:	e033      	b.n	8012420 <__swsetup_r+0x98>
 80123b8:	0758      	lsls	r0, r3, #29
 80123ba:	d512      	bpl.n	80123e2 <__swsetup_r+0x5a>
 80123bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80123be:	b141      	cbz	r1, 80123d2 <__swsetup_r+0x4a>
 80123c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123c4:	4299      	cmp	r1, r3
 80123c6:	d002      	beq.n	80123ce <__swsetup_r+0x46>
 80123c8:	4628      	mov	r0, r5
 80123ca:	f7fd fcd1 	bl	800fd70 <_free_r>
 80123ce:	2300      	movs	r3, #0
 80123d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80123d2:	89a3      	ldrh	r3, [r4, #12]
 80123d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80123d8:	81a3      	strh	r3, [r4, #12]
 80123da:	2300      	movs	r3, #0
 80123dc:	6063      	str	r3, [r4, #4]
 80123de:	6923      	ldr	r3, [r4, #16]
 80123e0:	6023      	str	r3, [r4, #0]
 80123e2:	89a3      	ldrh	r3, [r4, #12]
 80123e4:	f043 0308 	orr.w	r3, r3, #8
 80123e8:	81a3      	strh	r3, [r4, #12]
 80123ea:	6923      	ldr	r3, [r4, #16]
 80123ec:	b94b      	cbnz	r3, 8012402 <__swsetup_r+0x7a>
 80123ee:	89a3      	ldrh	r3, [r4, #12]
 80123f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80123f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123f8:	d003      	beq.n	8012402 <__swsetup_r+0x7a>
 80123fa:	4621      	mov	r1, r4
 80123fc:	4628      	mov	r0, r5
 80123fe:	f000 f883 	bl	8012508 <__smakebuf_r>
 8012402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012406:	f013 0201 	ands.w	r2, r3, #1
 801240a:	d00a      	beq.n	8012422 <__swsetup_r+0x9a>
 801240c:	2200      	movs	r2, #0
 801240e:	60a2      	str	r2, [r4, #8]
 8012410:	6962      	ldr	r2, [r4, #20]
 8012412:	4252      	negs	r2, r2
 8012414:	61a2      	str	r2, [r4, #24]
 8012416:	6922      	ldr	r2, [r4, #16]
 8012418:	b942      	cbnz	r2, 801242c <__swsetup_r+0xa4>
 801241a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801241e:	d1c5      	bne.n	80123ac <__swsetup_r+0x24>
 8012420:	bd38      	pop	{r3, r4, r5, pc}
 8012422:	0799      	lsls	r1, r3, #30
 8012424:	bf58      	it	pl
 8012426:	6962      	ldrpl	r2, [r4, #20]
 8012428:	60a2      	str	r2, [r4, #8]
 801242a:	e7f4      	b.n	8012416 <__swsetup_r+0x8e>
 801242c:	2000      	movs	r0, #0
 801242e:	e7f7      	b.n	8012420 <__swsetup_r+0x98>
 8012430:	20000110 	.word	0x20000110

08012434 <_raise_r>:
 8012434:	291f      	cmp	r1, #31
 8012436:	b538      	push	{r3, r4, r5, lr}
 8012438:	4605      	mov	r5, r0
 801243a:	460c      	mov	r4, r1
 801243c:	d904      	bls.n	8012448 <_raise_r+0x14>
 801243e:	2316      	movs	r3, #22
 8012440:	6003      	str	r3, [r0, #0]
 8012442:	f04f 30ff 	mov.w	r0, #4294967295
 8012446:	bd38      	pop	{r3, r4, r5, pc}
 8012448:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801244a:	b112      	cbz	r2, 8012452 <_raise_r+0x1e>
 801244c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012450:	b94b      	cbnz	r3, 8012466 <_raise_r+0x32>
 8012452:	4628      	mov	r0, r5
 8012454:	f000 f830 	bl	80124b8 <_getpid_r>
 8012458:	4622      	mov	r2, r4
 801245a:	4601      	mov	r1, r0
 801245c:	4628      	mov	r0, r5
 801245e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012462:	f000 b817 	b.w	8012494 <_kill_r>
 8012466:	2b01      	cmp	r3, #1
 8012468:	d00a      	beq.n	8012480 <_raise_r+0x4c>
 801246a:	1c59      	adds	r1, r3, #1
 801246c:	d103      	bne.n	8012476 <_raise_r+0x42>
 801246e:	2316      	movs	r3, #22
 8012470:	6003      	str	r3, [r0, #0]
 8012472:	2001      	movs	r0, #1
 8012474:	e7e7      	b.n	8012446 <_raise_r+0x12>
 8012476:	2100      	movs	r1, #0
 8012478:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801247c:	4620      	mov	r0, r4
 801247e:	4798      	blx	r3
 8012480:	2000      	movs	r0, #0
 8012482:	e7e0      	b.n	8012446 <_raise_r+0x12>

08012484 <raise>:
 8012484:	4b02      	ldr	r3, [pc, #8]	@ (8012490 <raise+0xc>)
 8012486:	4601      	mov	r1, r0
 8012488:	6818      	ldr	r0, [r3, #0]
 801248a:	f7ff bfd3 	b.w	8012434 <_raise_r>
 801248e:	bf00      	nop
 8012490:	20000110 	.word	0x20000110

08012494 <_kill_r>:
 8012494:	b538      	push	{r3, r4, r5, lr}
 8012496:	4d07      	ldr	r5, [pc, #28]	@ (80124b4 <_kill_r+0x20>)
 8012498:	2300      	movs	r3, #0
 801249a:	4604      	mov	r4, r0
 801249c:	4608      	mov	r0, r1
 801249e:	4611      	mov	r1, r2
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	f7f0 faa8 	bl	80029f6 <_kill>
 80124a6:	1c43      	adds	r3, r0, #1
 80124a8:	d102      	bne.n	80124b0 <_kill_r+0x1c>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	b103      	cbz	r3, 80124b0 <_kill_r+0x1c>
 80124ae:	6023      	str	r3, [r4, #0]
 80124b0:	bd38      	pop	{r3, r4, r5, pc}
 80124b2:	bf00      	nop
 80124b4:	20001b14 	.word	0x20001b14

080124b8 <_getpid_r>:
 80124b8:	f7f0 ba95 	b.w	80029e6 <_getpid>

080124bc <__swhatbuf_r>:
 80124bc:	b570      	push	{r4, r5, r6, lr}
 80124be:	460c      	mov	r4, r1
 80124c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124c4:	2900      	cmp	r1, #0
 80124c6:	b096      	sub	sp, #88	@ 0x58
 80124c8:	4615      	mov	r5, r2
 80124ca:	461e      	mov	r6, r3
 80124cc:	da0d      	bge.n	80124ea <__swhatbuf_r+0x2e>
 80124ce:	89a3      	ldrh	r3, [r4, #12]
 80124d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80124d4:	f04f 0100 	mov.w	r1, #0
 80124d8:	bf14      	ite	ne
 80124da:	2340      	movne	r3, #64	@ 0x40
 80124dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80124e0:	2000      	movs	r0, #0
 80124e2:	6031      	str	r1, [r6, #0]
 80124e4:	602b      	str	r3, [r5, #0]
 80124e6:	b016      	add	sp, #88	@ 0x58
 80124e8:	bd70      	pop	{r4, r5, r6, pc}
 80124ea:	466a      	mov	r2, sp
 80124ec:	f000 f848 	bl	8012580 <_fstat_r>
 80124f0:	2800      	cmp	r0, #0
 80124f2:	dbec      	blt.n	80124ce <__swhatbuf_r+0x12>
 80124f4:	9901      	ldr	r1, [sp, #4]
 80124f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80124fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124fe:	4259      	negs	r1, r3
 8012500:	4159      	adcs	r1, r3
 8012502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012506:	e7eb      	b.n	80124e0 <__swhatbuf_r+0x24>

08012508 <__smakebuf_r>:
 8012508:	898b      	ldrh	r3, [r1, #12]
 801250a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801250c:	079d      	lsls	r5, r3, #30
 801250e:	4606      	mov	r6, r0
 8012510:	460c      	mov	r4, r1
 8012512:	d507      	bpl.n	8012524 <__smakebuf_r+0x1c>
 8012514:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012518:	6023      	str	r3, [r4, #0]
 801251a:	6123      	str	r3, [r4, #16]
 801251c:	2301      	movs	r3, #1
 801251e:	6163      	str	r3, [r4, #20]
 8012520:	b003      	add	sp, #12
 8012522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012524:	ab01      	add	r3, sp, #4
 8012526:	466a      	mov	r2, sp
 8012528:	f7ff ffc8 	bl	80124bc <__swhatbuf_r>
 801252c:	9f00      	ldr	r7, [sp, #0]
 801252e:	4605      	mov	r5, r0
 8012530:	4639      	mov	r1, r7
 8012532:	4630      	mov	r0, r6
 8012534:	f7fb fd06 	bl	800df44 <_malloc_r>
 8012538:	b948      	cbnz	r0, 801254e <__smakebuf_r+0x46>
 801253a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801253e:	059a      	lsls	r2, r3, #22
 8012540:	d4ee      	bmi.n	8012520 <__smakebuf_r+0x18>
 8012542:	f023 0303 	bic.w	r3, r3, #3
 8012546:	f043 0302 	orr.w	r3, r3, #2
 801254a:	81a3      	strh	r3, [r4, #12]
 801254c:	e7e2      	b.n	8012514 <__smakebuf_r+0xc>
 801254e:	89a3      	ldrh	r3, [r4, #12]
 8012550:	6020      	str	r0, [r4, #0]
 8012552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012556:	81a3      	strh	r3, [r4, #12]
 8012558:	9b01      	ldr	r3, [sp, #4]
 801255a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801255e:	b15b      	cbz	r3, 8012578 <__smakebuf_r+0x70>
 8012560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012564:	4630      	mov	r0, r6
 8012566:	f000 f81d 	bl	80125a4 <_isatty_r>
 801256a:	b128      	cbz	r0, 8012578 <__smakebuf_r+0x70>
 801256c:	89a3      	ldrh	r3, [r4, #12]
 801256e:	f023 0303 	bic.w	r3, r3, #3
 8012572:	f043 0301 	orr.w	r3, r3, #1
 8012576:	81a3      	strh	r3, [r4, #12]
 8012578:	89a3      	ldrh	r3, [r4, #12]
 801257a:	431d      	orrs	r5, r3
 801257c:	81a5      	strh	r5, [r4, #12]
 801257e:	e7cf      	b.n	8012520 <__smakebuf_r+0x18>

08012580 <_fstat_r>:
 8012580:	b538      	push	{r3, r4, r5, lr}
 8012582:	4d07      	ldr	r5, [pc, #28]	@ (80125a0 <_fstat_r+0x20>)
 8012584:	2300      	movs	r3, #0
 8012586:	4604      	mov	r4, r0
 8012588:	4608      	mov	r0, r1
 801258a:	4611      	mov	r1, r2
 801258c:	602b      	str	r3, [r5, #0]
 801258e:	f7f0 fa92 	bl	8002ab6 <_fstat>
 8012592:	1c43      	adds	r3, r0, #1
 8012594:	d102      	bne.n	801259c <_fstat_r+0x1c>
 8012596:	682b      	ldr	r3, [r5, #0]
 8012598:	b103      	cbz	r3, 801259c <_fstat_r+0x1c>
 801259a:	6023      	str	r3, [r4, #0]
 801259c:	bd38      	pop	{r3, r4, r5, pc}
 801259e:	bf00      	nop
 80125a0:	20001b14 	.word	0x20001b14

080125a4 <_isatty_r>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4d06      	ldr	r5, [pc, #24]	@ (80125c0 <_isatty_r+0x1c>)
 80125a8:	2300      	movs	r3, #0
 80125aa:	4604      	mov	r4, r0
 80125ac:	4608      	mov	r0, r1
 80125ae:	602b      	str	r3, [r5, #0]
 80125b0:	f7f0 fa91 	bl	8002ad6 <_isatty>
 80125b4:	1c43      	adds	r3, r0, #1
 80125b6:	d102      	bne.n	80125be <_isatty_r+0x1a>
 80125b8:	682b      	ldr	r3, [r5, #0]
 80125ba:	b103      	cbz	r3, 80125be <_isatty_r+0x1a>
 80125bc:	6023      	str	r3, [r4, #0]
 80125be:	bd38      	pop	{r3, r4, r5, pc}
 80125c0:	20001b14 	.word	0x20001b14

080125c4 <_init>:
 80125c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c6:	bf00      	nop
 80125c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ca:	bc08      	pop	{r3}
 80125cc:	469e      	mov	lr, r3
 80125ce:	4770      	bx	lr

080125d0 <_fini>:
 80125d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125d2:	bf00      	nop
 80125d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125d6:	bc08      	pop	{r3}
 80125d8:	469e      	mov	lr, r3
 80125da:	4770      	bx	lr
