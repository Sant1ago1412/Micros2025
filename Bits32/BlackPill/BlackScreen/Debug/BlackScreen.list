
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  0800b45c  0800b45c  0000c45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c268  0800c268  0000e160  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c268  0800c268  0000d268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c270  0800c270  0000e160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c270  0800c270  0000d270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c274  0800c274  0000d274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800c278  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d8  20000160  0800c3d8  0000e160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001838  0800c3d8  0000e838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cfe  00000000  00000000  0000e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041fb  00000000  00000000  00027e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0002c090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001234  00000000  00000000  0002d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb24  00000000  00000000  0002ea64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f07b  00000000  00000000  0004a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5be  00000000  00000000  00069603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006840  00000000  00000000  00108c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010f444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b444 	.word	0x0800b444

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800b444 	.word	0x0800b444

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00a fa9a 	bl	800aaf4 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00a fa92 	bl	800aaf4 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000184 	.word	0x20000184

080005ec <UP_sendInfo>:

void UP_sendInfo(uint8_t bufferAux[],uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000604:	2300      	movs	r3, #0
 8000606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000614:	3330      	adds	r3, #48	@ 0x30
 8000616:	443b      	add	r3, r7
 8000618:	2255      	movs	r2, #85	@ 0x55
 800061a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000628:	3330      	adds	r3, #48	@ 0x30
 800062a:	443b      	add	r3, r7
 800062c:	224e      	movs	r2, #78	@ 0x4e
 800062e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800063c:	3330      	adds	r3, #48	@ 0x30
 800063e:	443b      	add	r3, r7
 8000640:	2245      	movs	r2, #69	@ 0x45
 8000642:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000650:	3330      	adds	r3, #48	@ 0x30
 8000652:	443b      	add	r3, r7
 8000654:	2252      	movs	r2, #82	@ 0x52
 8000656:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 800065a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000664:	3330      	adds	r3, #48	@ 0x30
 8000666:	443b      	add	r3, r7
 8000668:	78fa      	ldrb	r2, [r7, #3]
 800066a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800066e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000678:	3330      	adds	r3, #48	@ 0x30
 800067a:	443b      	add	r3, r7
 800067c:	223a      	movs	r2, #58	@ 0x3a
 800067e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000688:	e012      	b.n	80006b0 <UP_sendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 800068a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	441a      	add	r2, r3
 8000692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000696:	1c59      	adds	r1, r3, #1
 8000698:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	3330      	adds	r3, #48	@ 0x30
 80006a0:	443b      	add	r3, r7
 80006a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006b0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe6      	blt.n	800068a <UP_sendInfo+0x9e>

    cks=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006c8:	e022      	b.n	8000710 <UP_sendInfo+0x124>
        cks^= bufAux[i];
 80006ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ce:	3330      	adds	r3, #48	@ 0x30
 80006d0:	443b      	add	r3, r7
 80006d2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006da:	4053      	eors	r3, r2
 80006dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 80006e0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <UP_sendInfo+0x160>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68d8      	ldr	r0, [r3, #12]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <UP_sendInfo+0x160>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	795a      	ldrb	r2, [r3, #5]
 80006f0:	1c54      	adds	r4, r2, #1
 80006f2:	b2e4      	uxtb	r4, r4
 80006f4:	715c      	strb	r4, [r3, #5]
 80006f6:	4613      	mov	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80006fe:	443a      	add	r2, r7
 8000700:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000704:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000706:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800070a:	3301      	adds	r3, #1
 800070c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000710:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d6      	bcc.n	80006ca <UP_sendInfo+0xde>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <UP_sendInfo+0x160>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <UP_sendInfo+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	795a      	ldrb	r2, [r3, #5]
 8000728:	1c50      	adds	r0, r2, #1
 800072a:	b2c0      	uxtb	r0, r0
 800072c:	7158      	strb	r0, [r3, #5]
 800072e:	4613      	mov	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000736:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <UP_sendInfo+0x160>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000740:	741a      	strb	r2, [r3, #16]

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	@ 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	20000184 	.word	0x20000184

08000750 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800075e:	e0e2      	b.n	8000926 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000760:	4b76      	ldr	r3, [pc, #472]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b06      	cmp	r3, #6
 8000766:	f200 80d7 	bhi.w	8000918 <UP_decodeHeader+0x1c8>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <UP_decodeHeader+0x20>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007b5 	.word	0x080007b5
 8000778:	080007e9 	.word	0x080007e9
 800077c:	0800081d 	.word	0x0800081d
 8000780:	08000851 	.word	0x08000851
 8000784:	08000879 	.word	0x08000879
 8000788:	080008bb 	.word	0x080008bb
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	b2c8      	uxtb	r0, r1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	7108      	strb	r0, [r1, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b55      	cmp	r3, #85	@ 0x55
 80007a2:	f040 80bd 	bne.w	8000920 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007a6:	4b65      	ldr	r3, [pc, #404]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007b2:	e0b5      	b.n	8000920 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	b2c8      	uxtb	r0, r1
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	7108      	strb	r0, [r1, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ca:	d103      	bne.n	80007d4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007d2:	e0a8      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80007e0:	4b56      	ldr	r3, [pc, #344]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
                break;
 80007e6:	e09e      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	7108      	strb	r0, [r1, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b45      	cmp	r3, #69	@ 0x45
 80007fe:	d103      	bne.n	8000808 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000806:	e08e      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	3b01      	subs	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
                break;
 800081a:	e084      	b.n	8000926 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	b2c8      	uxtb	r0, r1
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	7108      	strb	r0, [r1, #4]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b52      	cmp	r3, #82	@ 0x52
 8000832:	d103      	bne.n	800083c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800083a:	e074      	b.n	8000926 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <UP_decodeHeader+0x1ec>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
            break;
 800084e:	e06a      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	b2c8      	uxtb	r0, r1
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	7108      	strb	r0, [r1, #4]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <UP_decodeHeader+0x1f0>)
 800086e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
                break;
 8000876:	e056      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b3a      	cmp	r3, #58	@ 0x3a
 800088e:	d10a      	bne.n	80008a6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000892:	2206      	movs	r2, #6
 8000894:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <UP_decodeHeader+0x1f0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008a4:	e03f      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
                break;
 80008b8:	e035      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d90f      	bls.n	80008e2 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b2c8      	uxtb	r0, r1
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	7108      	strb	r0, [r1, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	4053      	eors	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008ec:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d116      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	789a      	ldrb	r2, [r3, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	7909      	ldrb	r1, [r1, #4]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d109      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f817 	bl	8000944 <UP_decodeData>
                    }
                }

                break;
 8000916:	e005      	b.n	8000924 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <UP_decodeHeader+0x1ec>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
                break;
 800091e:	e002      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000920:	bf00      	nop
 8000922:	e000      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000924:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	429a      	cmp	r2, r3
 800092e:	f47f af17 	bne.w	8000760 <UP_decodeHeader+0x10>
        }
    }
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000180 	.word	0x20000180
 8000940:	20000188 	.word	0x20000188

08000944 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800094c:	2300      	movs	r3, #0
 800094e:	77bb      	strb	r3, [r7, #30]
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	3302      	adds	r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2bf2      	cmp	r3, #242	@ 0xf2
 8000964:	d01f      	beq.n	80009a6 <UP_decodeData+0x62>
 8000966:	2bf2      	cmp	r3, #242	@ 0xf2
 8000968:	dc46      	bgt.n	80009f8 <UP_decodeData+0xb4>
 800096a:	2bf1      	cmp	r3, #241	@ 0xf1
 800096c:	d010      	beq.n	8000990 <UP_decodeData+0x4c>
 800096e:	2bf1      	cmp	r3, #241	@ 0xf1
 8000970:	dc42      	bgt.n	80009f8 <UP_decodeData+0xb4>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d020      	beq.n	80009b8 <UP_decodeData+0x74>
 8000976:	2bf0      	cmp	r3, #240	@ 0xf0
 8000978:	d13e      	bne.n	80009f8 <UP_decodeData+0xb4>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	77ba      	strb	r2, [r7, #30]
 8000980:	3320      	adds	r3, #32
 8000982:	443b      	add	r3, r7
 8000984:	22f0      	movs	r2, #240	@ 0xf0
 8000986:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 800098a:	2302      	movs	r3, #2
 800098c:	77fb      	strb	r3, [r7, #31]

    break;
 800098e:	e03e      	b.n	8000a0e <UP_decodeData+0xca>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8000990:	7fbb      	ldrb	r3, [r7, #30]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	77ba      	strb	r2, [r7, #30]
 8000996:	3320      	adds	r3, #32
 8000998:	443b      	add	r3, r7
 800099a:	22f1      	movs	r2, #241	@ 0xf1
 800099c:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009a0:	2302      	movs	r3, #2
 80009a2:	77fb      	strb	r3, [r7, #31]

    break;
 80009a4:	e033      	b.n	8000a0e <UP_decodeData+0xca>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	77ba      	strb	r2, [r7, #30]
 80009ac:	3320      	adds	r3, #32
 80009ae:	443b      	add	r3, r7
 80009b0:	22f2      	movs	r2, #242	@ 0xf2
 80009b2:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009b6:	e02a      	b.n	8000a0e <UP_decodeData+0xca>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009b8:	7fbb      	ldrb	r3, [r7, #30]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	77ba      	strb	r2, [r7, #30]
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	3303      	adds	r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <UP_decodeData+0xe0>)
 80009d8:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	3304      	adds	r3, #4
 80009e4:	4413      	add	r3, r2
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ea:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80009ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <UP_decodeData+0xe4>)
 80009f4:	801a      	strh	r2, [r3, #0]

    break;
 80009f6:	e00a      	b.n	8000a0e <UP_decodeData+0xca>
    default:

        bufAux[indiceAux++]=0xFF;
 80009f8:	7fbb      	ldrb	r3, [r7, #30]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	77ba      	strb	r2, [r7, #30]
 80009fe:	3320      	adds	r3, #32
 8000a00:	443b      	add	r3, r7
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	77fb      	strb	r3, [r7, #31]

    break;
 8000a0c:	bf00      	nop
    }

    UP_sendInfo(bufAux,bytes);
 8000a0e:	7ffa      	ldrb	r2, [r7, #31]
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fde8 	bl	80005ec <UP_sendInfo>
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000017c 	.word	0x2000017c
 8000a28:	20000000 	.word	0x20000000

08000a2c <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81fb      	strh	r3, [r7, #14]
 8000a3c:	e016      	b.n	8000a6c <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	441a      	add	r2, r3
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a4c:	6809      	ldr	r1, [r1, #0]
 8000a4e:	78c9      	ldrb	r1, [r1, #3]
 8000a50:	b2c9      	uxtb	r1, r1
 8000a52:	440b      	add	r3, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78da      	ldrb	r2, [r3, #3]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	3201      	adds	r2, #1
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e4      	bcc.n	8000a3e <UP_datafromUSB+0x12>
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000184 	.word	0x20000184

08000a88 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	809a      	strh	r2, [r3, #4]

}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_ADC_ConvCpltCallback>:
e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	e00c      	b.n	8000ae0 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000ac6:	7ffa      	ldrb	r2, [r7, #31]
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
 8000aca:	490b      	ldr	r1, [pc, #44]	@ (8000af8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000acc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ad0:	f107 000c 	add.w	r0, r7, #12
 8000ad4:	4909      	ldr	r1, [pc, #36]	@ (8000afc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ad6:	f00a f8c3 	bl	800ac60 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	3301      	adds	r3, #1
 8000ade:	77fb      	strb	r3, [r7, #31]
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	d9ef      	bls.n	8000ac6 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000aec:	f001 ffd5 	bl	8002a9a <HAL_GPIO_TogglePin>
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200002cc 	.word	0x200002cc
 8000afc:	0800b45c 	.word	0x0800b45c
 8000b00:	40020800 	.word	0x40020800

08000b04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
		task10ms();
 8000b16:	f000 f807 	bl	8000b28 <task10ms>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014800 	.word	0x40014800

08000b28 <task10ms>:

void task10ms(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;

	if(!SISINIT){
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <task10ms+0x70>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d110      	bne.n	8000b5c <task10ms+0x34>
		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) == HAL_OK){
 8000b3a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2178      	movs	r1, #120	@ 0x78
 8000b42:	4816      	ldr	r0, [pc, #88]	@ (8000b9c <task10ms+0x74>)
 8000b44:	f002 fb64 	bl	8003210 <HAL_I2C_IsDeviceReady>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <task10ms+0x34>
			SSD1306_Init();
 8000b4e:	f000 fb57 	bl	8001200 <SSD1306_Init>
			SISINIT=TRUE;
 8000b52:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <task10ms+0x70>)
 8000b54:	7813      	ldrb	r3, [r2, #0]
 8000b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b5a:	7013      	strb	r3, [r2, #0]
		}
	}
	if(ticker%10==0){
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <task10ms+0x78>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <task10ms+0x7c>)
 8000b62:	fba3 1302 	umull	r1, r3, r3, r2
 8000b66:	08d9      	lsrs	r1, r3, #3
 8000b68:	460b      	mov	r3, r1
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d107      	bne.n	8000b88 <task10ms+0x60>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b7c:	480a      	ldr	r0, [pc, #40]	@ (8000ba8 <task10ms+0x80>)
 8000b7e:	f001 ff8c 	bl	8002a9a <HAL_GPIO_TogglePin>
		ticker=0;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <task10ms+0x78>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <task10ms+0x78>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <task10ms+0x78>)
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002dc 	.word	0x200002dc
 8000b9c:	200001d4 	.word	0x200001d4
 8000ba0:	200002ee 	.word	0x200002ee
 8000ba4:	cccccccd 	.word	0xcccccccd
 8000ba8:	40020800 	.word	0x40020800

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 ffda 	bl	8001b68 <HAL_Init>

  /* USER CODE BEGIN Init */
   CDC_AttachRxData(&UP_datafromUSB);
 8000bb4:	482c      	ldr	r0, [pc, #176]	@ (8000c68 <main+0xbc>)
 8000bb6:	f009 fb73 	bl	800a2a0 <CDC_AttachRxData>
   myFlags.allFlags=0;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <main+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
   UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	482b      	ldr	r0, [pc, #172]	@ (8000c70 <main+0xc4>)
 8000bc4:	f7ff fcf2 	bl	80005ac <UP_initprotocol>
   en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <main+0xc8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4829      	ldr	r0, [pc, #164]	@ (8000c78 <main+0xcc>)
 8000bd4:	f7ff ff58 	bl	8000a88 <en_InitENG>
   en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <main+0xc8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	4826      	ldr	r0, [pc, #152]	@ (8000c7c <main+0xd0>)
 8000be4:	f7ff ff50 	bl	8000a88 <en_InitENG>
   Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Master_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000be8:	4925      	ldr	r1, [pc, #148]	@ (8000c80 <main+0xd4>)
 8000bea:	4826      	ldr	r0, [pc, #152]	@ (8000c84 <main+0xd8>)
 8000bec:	f000 faf2 	bl	80011d4 <Display_Set_I2C_Master_Transmit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f852 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f000 f9de 	bl	8000fb4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000bf8:	f009 f9fe 	bl	8009ff8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000bfc:	f000 f934 	bl	8000e68 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000c00:	f000 f9b4 	bl	8000f6c <MX_TIM11_Init>
  MX_ADC1_Init();
 8000c04:	f000 f8b0 	bl	8000d68 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c08:	f000 f900 	bl	8000e0c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000c0c:	4819      	ldr	r0, [pc, #100]	@ (8000c74 <main+0xc8>)
 8000c0e:	f004 ff53 	bl	8005ab8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000c12:	481d      	ldr	r0, [pc, #116]	@ (8000c88 <main+0xdc>)
 8000c14:	f004 ff50 	bl	8005ab8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4816      	ldr	r0, [pc, #88]	@ (8000c74 <main+0xc8>)
 8000c1c:	f005 f808 	bl	8005c30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c20:	2100      	movs	r1, #0
 8000c22:	4814      	ldr	r0, [pc, #80]	@ (8000c74 <main+0xc8>)
 8000c24:	f005 f804 	bl	8005c30 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UP_comunicationsTask(&datosComSerie);
 8000c28:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <main+0xc4>)
 8000c2a:	f000 fa4f 	bl	80010cc <UP_comunicationsTask>
	SSD1306_Clear();
 8000c2e:	f000 fcec 	bl	800160a <SSD1306_Clear>
		SSD1306_GotoXY(10,20);
 8000c32:	2114      	movs	r1, #20
 8000c34:	200a      	movs	r0, #10
 8000c36:	f000 fc2f 	bl	8001498 <SSD1306_GotoXY>
			SSD1306_Puts("MAYER", &Font_11x18, WHITE);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4913      	ldr	r1, [pc, #76]	@ (8000c8c <main+0xe0>)
 8000c3e:	4814      	ldr	r0, [pc, #80]	@ (8000c90 <main+0xe4>)
 8000c40:	f000 fcbe 	bl	80015c0 <SSD1306_Puts>
			SSD1306_GotoXY(15,40);
 8000c44:	2128      	movs	r1, #40	@ 0x28
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 fc26 	bl	8001498 <SSD1306_GotoXY>
			SSD1306_Puts("GAY", &Font_11x18, WHITE);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	490f      	ldr	r1, [pc, #60]	@ (8000c8c <main+0xe0>)
 8000c50:	4810      	ldr	r0, [pc, #64]	@ (8000c94 <main+0xe8>)
 8000c52:	f000 fcb5 	bl	80015c0 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000c56:	f000 fb79 	bl	800134c <SSD1306_UpdateScreen>
			HAL_Delay(10000);
 8000c5a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000c5e:	f000 fff5 	bl	8001c4c <HAL_Delay>
	UP_comunicationsTask(&datosComSerie);
 8000c62:	bf00      	nop
 8000c64:	e7e0      	b.n	8000c28 <main+0x7c>
 8000c66:	bf00      	nop
 8000c68:	08000a2d 	.word	0x08000a2d
 8000c6c:	200002dc 	.word	0x200002dc
 8000c70:	200002b8 	.word	0x200002b8
 8000c74:	20000228 	.word	0x20000228
 8000c78:	200002e0 	.word	0x200002e0
 8000c7c:	200002e8 	.word	0x200002e8
 8000c80:	08001195 	.word	0x08001195
 8000c84:	08001161 	.word	0x08001161
 8000c88:	20000270 	.word	0x20000270
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	0800b46c 	.word	0x0800b46c
 8000c94:	0800b474 	.word	0x0800b474

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	@ 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2230      	movs	r2, #48	@ 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f009 fffc 	bl	800aca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <SystemClock_Config+0xc8>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	4a26      	ldr	r2, [pc, #152]	@ (8000d60 <SystemClock_Config+0xc8>)
 8000cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ccc:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <SystemClock_Config+0xc8>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <SystemClock_Config+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a20      	ldr	r2, [pc, #128]	@ (8000d64 <SystemClock_Config+0xcc>)
 8000ce2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <SystemClock_Config+0xcc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d08:	2319      	movs	r3, #25
 8000d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d0c:	23c0      	movs	r3, #192	@ 0xc0
 8000d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 fa37 	bl	8005190 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d28:	f000 fa4e 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2103      	movs	r1, #3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fc99 	bl	8005680 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d54:	f000 fa38 	bl	80011c8 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3750      	adds	r7, #80	@ 0x50
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <MX_ADC1_Init+0x9c>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000d82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000daa:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <MX_ADC1_Init+0xa0>)
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000dca:	f000 ff63 	bl	8001c94 <HAL_ADC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 f9f8 	bl	80011c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_ADC1_Init+0x98>)
 8000dea:	f001 f8bb 	bl	8001f64 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 f9e8 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000018c 	.word	0x2000018c
 8000e04:	40012000 	.word	0x40012000
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e12:	4a13      	ldr	r2, [pc, #76]	@ (8000e60 <MX_I2C1_Init+0x54>)
 8000e14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e18:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <MX_I2C1_Init+0x58>)
 8000e1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_I2C1_Init+0x50>)
 8000e4a:	f001 fe41 	bl	8002ad0 <HAL_I2C_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e54:	f000 f9b8 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200001d4 	.word	0x200001d4
 8000e60:	40005400 	.word	0x40005400
 8000e64:	00061a80 	.word	0x00061a80

08000e68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e98:	4b32      	ldr	r3, [pc, #200]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <MX_TIM3_Init+0x100>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eac:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000eb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ebe:	4829      	ldr	r0, [pc, #164]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000ec0:	f004 fdaa 	bl	8005a18 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000eca:	f000 f97d 	bl	80011c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4822      	ldr	r0, [pc, #136]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000edc:	f005 f90a 	bl	80060f4 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ee6:	f000 f96f 	bl	80011c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eea:	481e      	ldr	r0, [pc, #120]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eec:	f004 fe46 	bl	8005b7c <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ef6:	f000 f967 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4816      	ldr	r0, [pc, #88]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f0a:	f005 fcb5 	bl	8006878 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f14:	f000 f958 	bl	80011c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	@ 0x60
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f30:	f005 f81e 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f3a:	f000 f945 	bl	80011c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2204      	movs	r2, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f46:	f005 f813 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f50:	f000 f93a 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f56:	f000 fd03 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	@ 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000228 	.word	0x20000228
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_TIM11_Init+0x40>)
 8000f72:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb0 <MX_TIM11_Init+0x44>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <MX_TIM11_Init+0x40>)
 8000f78:	225f      	movs	r2, #95	@ 0x5f
 8000f7a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_TIM11_Init+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <MX_TIM11_Init+0x40>)
 8000f84:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f88:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_TIM11_Init+0x40>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_TIM11_Init+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_TIM11_Init+0x40>)
 8000f98:	f004 fd3e 	bl	8005a18 <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000fa2:	f000 f911 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000270 	.word	0x20000270
 8000fb0:	40014800 	.word	0x40014800

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <MX_GPIO_Init+0x108>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80010bc <MX_GPIO_Init+0x108>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <MX_GPIO_Init+0x108>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b34      	ldr	r3, [pc, #208]	@ (80010bc <MX_GPIO_Init+0x108>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a33      	ldr	r2, [pc, #204]	@ (80010bc <MX_GPIO_Init+0x108>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <MX_GPIO_Init+0x108>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <MX_GPIO_Init+0x108>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a2c      	ldr	r2, [pc, #176]	@ (80010bc <MX_GPIO_Init+0x108>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <MX_GPIO_Init+0x108>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <MX_GPIO_Init+0x108>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a25      	ldr	r2, [pc, #148]	@ (80010bc <MX_GPIO_Init+0x108>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <MX_GPIO_Init+0x108>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001040:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_GPIO_Init+0x10c>)
 8001042:	f001 fd11 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 800104c:	481d      	ldr	r0, [pc, #116]	@ (80010c4 <MX_GPIO_Init+0x110>)
 800104e:	f001 fd0b 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2108      	movs	r1, #8
 8001056:	481c      	ldr	r0, [pc, #112]	@ (80010c8 <MX_GPIO_Init+0x114>)
 8001058:	f001 fd06 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4812      	ldr	r0, [pc, #72]	@ (80010c0 <MX_GPIO_Init+0x10c>)
 8001076:	f001 fb73 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 800107a:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <MX_GPIO_Init+0x110>)
 8001094:	f001 fb64 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 8001098:	2308      	movs	r3, #8
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <MX_GPIO_Init+0x114>)
 80010b0:	f001 fb56 	bl	8002760 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	@ 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400

080010cc <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	791a      	ldrb	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	78db      	ldrb	r3, [r3, #3]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	429a      	cmp	r2, r3
 80010e0:	d007      	beq.n	80010f2 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fb34 	bl	8000750 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	799a      	ldrb	r2, [r3, #6]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	795b      	ldrb	r3, [r3, #5]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d02b      	beq.n	8001156 <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	795a      	ldrb	r2, [r3, #5]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	799b      	ldrb	r3, [r3, #6]
 8001106:	429a      	cmp	r2, r3
 8001108:	d908      	bls.n	800111c <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795a      	ldrb	r2, [r3, #5]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	799b      	ldrb	r3, [r3, #6]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	741a      	strb	r2, [r3, #16]
 800111a:	e006      	b.n	800112a <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	799b      	ldrb	r3, [r3, #6]
 8001120:	f1c3 0304 	rsb	r3, r3, #4
 8001124:	b2da      	uxtb	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	7992      	ldrb	r2, [r2, #6]
 8001132:	441a      	add	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7c1b      	ldrb	r3, [r3, #16]
 8001138:	4619      	mov	r1, r3
 800113a:	4610      	mov	r0, r2
 800113c:	f009 f878 	bl	800a230 <CDC_Transmit_FS>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d107      	bne.n	8001156 <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	799a      	ldrb	r2, [r3, #6]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7c1b      	ldrb	r3, [r3, #16]
 800114e:	4413      	add	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <I2C_1_Abstract_Master_Transmit>:
e_system I2C_1_Abstract_Master_Transmit(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	4613      	mov	r3, r2
 800116e:	80bb      	strh	r3, [r7, #4]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, 0x40, 1, p_Data, _Size);
 8001170:	88f9      	ldrh	r1, [r7, #6]
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2240      	movs	r2, #64	@ 0x40
 800117e:	4804      	ldr	r0, [pc, #16]	@ (8001190 <I2C_1_Abstract_Master_Transmit+0x30>)
 8001180:	f001 fee8 	bl	8002f54 <HAL_I2C_Mem_Write_DMA>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001d4 	.word	0x200001d4

08001194 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4603      	mov	r3, r0
 80011a0:	81fb      	strh	r3, [r7, #14]
 80011a2:	4613      	mov	r3, r2
 80011a4:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80011a6:	89ba      	ldrh	r2, [r7, #12]
 80011a8:	89f9      	ldrh	r1, [r7, #14]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4613      	mov	r3, r2
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 80011b4:	f001 fdd0 	bl	8002d58 <HAL_I2C_Master_Transmit>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200001d4 	.word	0x200001d4

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <Display_Set_I2C_Master_Transmit>:
static e_system (*I2C_Master_Transmit)(uint16_t DevAddress, uint8_t *pData, uint16_t Size);
static e_system (*I2C_Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 80011de:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <Display_Set_I2C_Master_Transmit+0x24>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 80011e4:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <Display_Set_I2C_Master_Transmit+0x28>)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	6013      	str	r3, [r2, #0]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200006f0 	.word	0x200006f0
 80011fc:	200006f4 	.word	0x200006f4

08001200 <SSD1306_Init>:
        }
    }
}

void SSD1306_Init()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 8001204:	22ae      	movs	r2, #174	@ 0xae
 8001206:	2100      	movs	r1, #0
 8001208:	2078      	movs	r0, #120	@ 0x78
 800120a:	f000 fa6d 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800120e:	2220      	movs	r2, #32
 8001210:	2100      	movs	r1, #0
 8001212:	2078      	movs	r0, #120	@ 0x78
 8001214:	f000 fa68 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001218:	2210      	movs	r2, #16
 800121a:	2100      	movs	r1, #0
 800121c:	2078      	movs	r0, #120	@ 0x78
 800121e:	f000 fa63 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001222:	22b0      	movs	r2, #176	@ 0xb0
 8001224:	2100      	movs	r1, #0
 8001226:	2078      	movs	r0, #120	@ 0x78
 8001228:	f000 fa5e 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 800122c:	22c8      	movs	r2, #200	@ 0xc8
 800122e:	2100      	movs	r1, #0
 8001230:	2078      	movs	r0, #120	@ 0x78
 8001232:	f000 fa59 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	@ 0x78
 800123c:	f000 fa54 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001240:	2210      	movs	r2, #16
 8001242:	2100      	movs	r1, #0
 8001244:	2078      	movs	r0, #120	@ 0x78
 8001246:	f000 fa4f 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 800124a:	2240      	movs	r2, #64	@ 0x40
 800124c:	2100      	movs	r1, #0
 800124e:	2078      	movs	r0, #120	@ 0x78
 8001250:	f000 fa4a 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001254:	2281      	movs	r2, #129	@ 0x81
 8001256:	2100      	movs	r1, #0
 8001258:	2078      	movs	r0, #120	@ 0x78
 800125a:	f000 fa45 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800125e:	22ff      	movs	r2, #255	@ 0xff
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	@ 0x78
 8001264:	f000 fa40 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001268:	22a1      	movs	r2, #161	@ 0xa1
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	@ 0x78
 800126e:	f000 fa3b 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001272:	22a6      	movs	r2, #166	@ 0xa6
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	@ 0x78
 8001278:	f000 fa36 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 800127c:	22a8      	movs	r2, #168	@ 0xa8
 800127e:	2100      	movs	r1, #0
 8001280:	2078      	movs	r0, #120	@ 0x78
 8001282:	f000 fa31 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001286:	223f      	movs	r2, #63	@ 0x3f
 8001288:	2100      	movs	r1, #0
 800128a:	2078      	movs	r0, #120	@ 0x78
 800128c:	f000 fa2c 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8001290:	22a4      	movs	r2, #164	@ 0xa4
 8001292:	2100      	movs	r1, #0
 8001294:	2078      	movs	r0, #120	@ 0x78
 8001296:	f000 fa27 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 800129a:	22d3      	movs	r2, #211	@ 0xd3
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	@ 0x78
 80012a0:	f000 fa22 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	@ 0x78
 80012aa:	f000 fa1d 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 80012ae:	22d5      	movs	r2, #213	@ 0xd5
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	@ 0x78
 80012b4:	f000 fa18 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 80012b8:	22f0      	movs	r2, #240	@ 0xf0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	@ 0x78
 80012be:	f000 fa13 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 80012c2:	22d9      	movs	r2, #217	@ 0xd9
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	@ 0x78
 80012c8:	f000 fa0e 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 80012cc:	2222      	movs	r2, #34	@ 0x22
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	@ 0x78
 80012d2:	f000 fa09 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 80012d6:	22da      	movs	r2, #218	@ 0xda
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	@ 0x78
 80012dc:	f000 fa04 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012e0:	2212      	movs	r2, #18
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	@ 0x78
 80012e6:	f000 f9ff 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 80012ea:	22db      	movs	r2, #219	@ 0xdb
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	@ 0x78
 80012f0:	f000 f9fa 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 80012f4:	2220      	movs	r2, #32
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	@ 0x78
 80012fa:	f000 f9f5 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 80012fe:	228d      	movs	r2, #141	@ 0x8d
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	@ 0x78
 8001304:	f000 f9f0 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001308:	2214      	movs	r2, #20
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	@ 0x78
 800130e:	f000 f9eb 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8001312:	22af      	movs	r2, #175	@ 0xaf
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	@ 0x78
 8001318:	f000 f9e6 	bl	80016e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800131c:	222e      	movs	r2, #46	@ 0x2e
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	@ 0x78
 8001322:	f000 f9e1 	bl	80016e8 <ssd1306_I2C_Write>

	SSD1306_Fill(BLACK);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f83e 	bl	80013a8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800132c:	f000 f80e 	bl	800134c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SSD1306_Init+0x148>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SSD1306_Init+0x148>)
 8001338:	2200      	movs	r2, #0
 800133a:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 800133c:	4b02      	ldr	r3, [pc, #8]	@ (8001348 <SSD1306_Init+0x148>)
 800133e:	2201      	movs	r2, #1
 8001340:	715a      	strb	r2, [r3, #5]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200006f8 	.word	0x200006f8

0800134c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 8001352:	2300      	movs	r3, #0
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e01d      	b.n	8001394 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	3b50      	subs	r3, #80	@ 0x50
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	@ 0x78
 8001364:	f000 f9c0 	bl	80016e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2078      	movs	r0, #120	@ 0x78
 800136e:	f000 f9bb 	bl	80016e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001372:	2210      	movs	r2, #16
 8001374:	2100      	movs	r1, #0
 8001376:	2078      	movs	r0, #120	@ 0x78
 8001378:	f000 f9b6 	bl	80016e8 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <SSD1306_UpdateScreen+0x58>)
 8001382:	441a      	add	r2, r3
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	2140      	movs	r1, #64	@ 0x40
 8001388:	2078      	movs	r0, #120	@ 0x78
 800138a:	f000 f947 	bl	800161c <ssd1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	3301      	adds	r3, #1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b07      	cmp	r3, #7
 8001398:	d9de      	bls.n	8001358 <SSD1306_UpdateScreen+0xc>
	}
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200002f0 	.word	0x200002f0

080013a8 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <SSD1306_Fill+0x14>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <SSD1306_Fill+0x16>
 80013bc:	23ff      	movs	r3, #255	@ 0xff
 80013be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c2:	4619      	mov	r1, r3
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <SSD1306_Fill+0x2c>)
 80013c6:	f009 fc6d 	bl	800aca4 <memset>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002f0 	.word	0x200002f0

080013d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	460b      	mov	r3, r1
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80013ee:	d848      	bhi.n	8001482 <SSD1306_DrawPixel+0xaa>
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013f4:	d845      	bhi.n	8001482 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 80013f6:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <SSD1306_DrawPixel+0xb8>)
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d11a      	bne.n	8001448 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	b298      	uxth	r0, r3
 800141a:	4603      	mov	r3, r0
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	4413      	add	r3, r2
 8001420:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <SSD1306_DrawPixel+0xbc>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	b25a      	sxtb	r2, r3
 8001426:	88bb      	ldrh	r3, [r7, #4]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b259      	sxtb	r1, r3
 8001438:	88fa      	ldrh	r2, [r7, #6]
 800143a:	4603      	mov	r3, r0
 800143c:	01db      	lsls	r3, r3, #7
 800143e:	4413      	add	r3, r2
 8001440:	b2c9      	uxtb	r1, r1
 8001442:	4a14      	ldr	r2, [pc, #80]	@ (8001494 <SSD1306_DrawPixel+0xbc>)
 8001444:	54d1      	strb	r1, [r2, r3]
 8001446:	e01d      	b.n	8001484 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001448:	88fa      	ldrh	r2, [r7, #6]
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	b298      	uxth	r0, r3
 8001450:	4603      	mov	r3, r0
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	4413      	add	r3, r2
 8001456:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <SSD1306_DrawPixel+0xbc>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	b25a      	sxtb	r2, r3
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	b25b      	sxtb	r3, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	b25b      	sxtb	r3, r3
 800146e:	4013      	ands	r3, r2
 8001470:	b259      	sxtb	r1, r3
 8001472:	88fa      	ldrh	r2, [r7, #6]
 8001474:	4603      	mov	r3, r0
 8001476:	01db      	lsls	r3, r3, #7
 8001478:	4413      	add	r3, r2
 800147a:	b2c9      	uxtb	r1, r1
 800147c:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <SSD1306_DrawPixel+0xbc>)
 800147e:	54d1      	strb	r1, [r2, r3]
 8001480:	e000      	b.n	8001484 <SSD1306_DrawPixel+0xac>
		return;
 8001482:	bf00      	nop
	}
}
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200006f8 	.word	0x200006f8
 8001494:	200002f0 	.word	0x200002f0

08001498 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 80014a8:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <SSD1306_GotoXY+0x28>)
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80014ae:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <SSD1306_GotoXY+0x28>)
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	8053      	strh	r3, [r2, #2]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	200006f8 	.word	0x200006f8

080014c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 80014d4:	4b39      	ldr	r3, [pc, #228]	@ (80015bc <SSD1306_Putc+0xf8>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80014e2:	dc07      	bgt.n	80014f4 <SSD1306_Putc+0x30>
 80014e4:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <SSD1306_Putc+0xf8>)
 80014e6:	885b      	ldrh	r3, [r3, #2]
 80014e8:	461a      	mov	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	4413      	add	r3, r2
 80014f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80014f2:	dd01      	ble.n	80014f8 <SSD1306_Putc+0x34>
		return 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e05d      	b.n	80015b4 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e04b      	b.n	8001596 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	3b20      	subs	r3, #32
 8001506:	6839      	ldr	r1, [r7, #0]
 8001508:	7849      	ldrb	r1, [r1, #1]
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4619      	mov	r1, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	440b      	add	r3, r1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	e030      	b.n	8001584 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d010      	beq.n	8001554 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <SSD1306_Putc+0xf8>)
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	b298      	uxth	r0, r3
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <SSD1306_Putc+0xf8>)
 8001540:	885a      	ldrh	r2, [r3, #2]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b29b      	uxth	r3, r3
 800154a:	79ba      	ldrb	r2, [r7, #6]
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff ff43 	bl	80013d8 <SSD1306_DrawPixel>
 8001552:	e014      	b.n	800157e <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <SSD1306_Putc+0xf8>)
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b298      	uxth	r0, r3
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <SSD1306_Putc+0xf8>)
 8001562:	885a      	ldrh	r2, [r3, #2]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	b29b      	uxth	r3, r3
 8001568:	4413      	add	r3, r2
 800156a:	b299      	uxth	r1, r3
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	f7ff ff2d 	bl	80013d8 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	3301      	adds	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4293      	cmp	r3, r2
 800158e:	d3c8      	bcc.n	8001522 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	461a      	mov	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4293      	cmp	r3, r2
 80015a0:	d3ad      	bcc.n	80014fe <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <SSD1306_Putc+0xf8>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <SSD1306_Putc+0xf8>)
 80015b0:	801a      	strh	r2, [r3, #0]
	return ch;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200006f8 	.word	0x200006f8

080015c0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	4613      	mov	r3, r2
 80015cc:	71fb      	strb	r3, [r7, #7]
	while(*str)
 80015ce:	e012      	b.n	80015f6 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff73 	bl	80014c4 <SSD1306_Putc>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d002      	beq.n	80015f0 <SSD1306_Puts+0x30>
			return *str;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	e008      	b.n	8001602 <SSD1306_Puts+0x42>
		}
		str++;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3301      	adds	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
	while(*str)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1e8      	bne.n	80015d0 <SSD1306_Puts+0x10>
	}
	return *str;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	781b      	ldrb	r3, [r3, #0]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff feca 	bl	80013a8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001614:	f7ff fe9a 	bl	800134c <SSD1306_UpdateScreen>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <ssd1306_I2C_WriteMulti>:
	SSD1306_WRITECOMMAND(0x8D);
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

e_system ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b0c5      	sub	sp, #276	@ 0x114
 8001620:	af00      	add	r7, sp, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800162a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800162e:	600a      	str	r2, [r1, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001636:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800163a:	4622      	mov	r2, r4
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001642:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001646:	4602      	mov	r2, r0
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001652:	460a      	mov	r2, r1
 8001654:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800165e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001662:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001666:	7812      	ldrb	r2, [r2, #0]
 8001668:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 800166a:	2300      	movs	r3, #0
 800166c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001670:	e015      	b.n	800169e <ssd1306_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 8001672:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001676:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800167a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	441a      	add	r2, r3
 8001682:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001686:	3301      	adds	r3, #1
 8001688:	7811      	ldrb	r1, [r2, #0]
 800168a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800168e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001692:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001694:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001698:	3301      	adds	r3, #1
 800169a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800169e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016a8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d8df      	bhi.n	8001672 <ssd1306_I2C_WriteMulti+0x56>
	return I2C_Master_Transmit(address, dt, count+1);
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <ssd1306_I2C_WriteMulti+0xc8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016ba:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	b290      	uxth	r0, r2
 80016c2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016c6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	3201      	adds	r2, #1
 80016ce:	b292      	uxth	r2, r2
 80016d0:	f107 010c 	add.w	r1, r7, #12
 80016d4:	4798      	blx	r3
 80016d6:	4603      	mov	r3, r0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200006f0 	.word	0x200006f0

080016e8 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	460b      	mov	r3, r1
 80016f4:	71bb      	strb	r3, [r7, #6]
 80016f6:	4613      	mov	r3, r2
 80016f8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016fe:	797b      	ldrb	r3, [r7, #5]
 8001700:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <ssd1306_I2C_Write+0x38>)
 8001704:	681c      	ldr	r4, [r3, #0]
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	b298      	uxth	r0, r3
 800170a:	f107 010c 	add.w	r1, r7, #12
 800170e:	230a      	movs	r3, #10
 8001710:	2202      	movs	r2, #2
 8001712:	47a0      	blx	r4
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	200006f4 	.word	0x200006f4

08001724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a0f      	ldr	r2, [pc, #60]	@ (8001770 <HAL_MspInit+0x4c>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_MspInit+0x4c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	@ (8001834 <HAL_ADC_MspInit+0xc0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d149      	bne.n	800182a <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a26      	ldr	r2, [pc, #152]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_ADC_MspInit+0xc4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80017ea:	23fe      	movs	r3, #254	@ 0xfe
 80017ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	480f      	ldr	r0, [pc, #60]	@ (800183c <HAL_ADC_MspInit+0xc8>)
 80017fe:	f000 ffaf 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001802:	2301      	movs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	480a      	ldr	r0, [pc, #40]	@ (8001840 <HAL_ADC_MspInit+0xcc>)
 8001816:	f000 ffa3 	bl	8002760 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2012      	movs	r0, #18
 8001820:	f000 feb3 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001824:	2012      	movs	r0, #18
 8001826:	f000 fecc 	bl	80025c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012000 	.word	0x40012000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400

08001844 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	@ 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <HAL_I2C_MspInit+0x84>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d12b      	bne.n	80018be <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <HAL_I2C_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a17      	ldr	r2, [pc, #92]	@ (80018cc <HAL_I2C_MspInit+0x88>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_I2C_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001882:	23c0      	movs	r3, #192	@ 0xc0
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001892:	2304      	movs	r3, #4
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <HAL_I2C_MspInit+0x8c>)
 800189e:	f000 ff5f 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_I2C_MspInit+0x88>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <HAL_I2C_MspInit+0x88>)
 80018ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_I2C_MspInit+0x88>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	@ 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400

080018d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001954 <HAL_TIM_Base_MspInit+0x80>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d116      	bne.n	8001914 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_TIM_Base_MspInit+0x84>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001958 <HAL_TIM_Base_MspInit+0x84>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_TIM_Base_MspInit+0x84>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201d      	movs	r0, #29
 8001908:	f000 fe3f 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800190c:	201d      	movs	r0, #29
 800190e:	f000 fe58 	bl	80025c2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001912:	e01a      	b.n	800194a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_TIM_Base_MspInit+0x88>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d115      	bne.n	800194a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <HAL_TIM_Base_MspInit+0x84>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a0c      	ldr	r2, [pc, #48]	@ (8001958 <HAL_TIM_Base_MspInit+0x84>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_TIM_Base_MspInit+0x84>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201a      	movs	r0, #26
 8001940:	f000 fe23 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001944:	201a      	movs	r0, #26
 8001946:	f000 fe3c 	bl	80025c2 <HAL_NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40000400 	.word	0x40000400
 8001958:	40023800 	.word	0x40023800
 800195c:	40014800 	.word	0x40014800

08001960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <HAL_TIM_MspPostInit+0x68>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d11d      	bne.n	80019be <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_TIM_MspPostInit+0x6c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <HAL_TIM_MspPostInit+0x6c>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <HAL_TIM_MspPostInit+0x6c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 800199e:	2330      	movs	r3, #48	@ 0x30
 80019a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <HAL_TIM_MspPostInit+0x70>)
 80019ba:	f000 fed1 	bl	8002760 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40000400 	.word	0x40000400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <NMI_Handler+0x4>

080019dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <MemManage_Handler+0x4>

080019ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2a:	f000 f8ef 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <ADC_IRQHandler+0x10>)
 8001a3a:	f000 f96e 	bl	8001d1a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000018c 	.word	0x2000018c

08001a48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a4e:	f004 f99f 	bl	8005d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000270 	.word	0x20000270

08001a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <TIM3_IRQHandler+0x10>)
 8001a62:	f004 f995 	bl	8005d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000228 	.word	0x20000228

08001a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <OTG_FS_IRQHandler+0x10>)
 8001a76:	f002 fa7c 	bl	8003f72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000fec 	.word	0x20000fec

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f009 f90e 	bl	800acd4 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20020000 	.word	0x20020000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	20000700 	.word	0x20000700
 8001aec:	20001838 	.word	0x20001838

08001af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b18:	f7ff ffea 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b42:	f009 f8cd 	bl	800ace0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff f831 	bl	8000bac <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001b58:	0800c278 	.word	0x0800c278
  ldr r2, =_sbss
 8001b5c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001b60:	20001838 	.word	0x20001838

08001b64 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <DMA1_Stream0_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 fcef 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fdc2 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fd07 	bl	80025de <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 fccf 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	20000014 	.word	0x20000014
 8001c08:	20000010 	.word	0x20000010

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000014 	.word	0x20000014
 8001c30:	20000704 	.word	0x20000704

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000704 	.word	0x20000704

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000014 	.word	0x20000014

08001c94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e033      	b.n	8001d12 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fd5e 	bl	8001774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cda:	f023 0302 	bic.w	r3, r3, #2
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fa6e 	bl	80021c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d02:	e001      	b.n	8001d08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d049      	beq.n	8001de4 <HAL_ADC_IRQHandler+0xca>
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d046      	beq.n	8001de4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d12b      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d127      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d119      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0220 	bic.w	r2, r2, #32
 8001dae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fe6d 	bl	8000ab4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0212 	mvn.w	r2, #18
 8001de2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d057      	beq.n	8001eaa <HAL_ADC_IRQHandler+0x190>
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d054      	beq.n	8001eaa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d139      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d12b      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d124      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11d      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d119      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e74:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fa90 	bl	80023c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 020c 	mvn.w	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d017      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x1d6>
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d014      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f82a 	bl	8001f3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f06f 0201 	mvn.w	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001efe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x218>
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0220 	mvn.w	r2, #32
 8001f20:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f813 	bl	8001f4e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0220 	mvn.w	r2, #32
 8001f30:	601a      	str	r2, [r3, #0]
  }
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1c>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e113      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x244>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b09      	cmp	r3, #9
 8001f8e:	d925      	bls.n	8001fdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68d9      	ldr	r1, [r3, #12]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b1e      	subs	r3, #30
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68d9      	ldr	r1, [r3, #12]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4603      	mov	r3, r0
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4403      	add	r3, r0
 8001fce:	3b1e      	subs	r3, #30
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	e022      	b.n	8002022 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	4603      	mov	r3, r0
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4403      	add	r3, r0
 8002018:	409a      	lsls	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d824      	bhi.n	8002074 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b05      	subs	r3, #5
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b05      	subs	r3, #5
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	@ 0x34
 8002072:	e04c      	b.n	800210e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d824      	bhi.n	80020c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b23      	subs	r3, #35	@ 0x23
 800208e:	221f      	movs	r2, #31
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43da      	mvns	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	400a      	ands	r2, r1
 800209c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b23      	subs	r3, #35	@ 0x23
 80020b8:	fa00 f203 	lsl.w	r2, r0, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020c4:	e023      	b.n	800210e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b41      	subs	r3, #65	@ 0x41
 80020d8:	221f      	movs	r2, #31
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	400a      	ands	r2, r1
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	3b41      	subs	r3, #65	@ 0x41
 8002102:	fa00 f203 	lsl.w	r2, r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800210e:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <HAL_ADC_ConfigChannel+0x250>)
 8002110:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a28      	ldr	r2, [pc, #160]	@ (80021b8 <HAL_ADC_ConfigChannel+0x254>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d10f      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1d8>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b12      	cmp	r3, #18
 8002122:	d10b      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1d      	ldr	r2, [pc, #116]	@ (80021b8 <HAL_ADC_ConfigChannel+0x254>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12b      	bne.n	800219e <HAL_ADC_ConfigChannel+0x23a>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <HAL_ADC_ConfigChannel+0x258>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d003      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x1f4>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b11      	cmp	r3, #17
 8002156:	d122      	bne.n	800219e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_ADC_ConfigChannel+0x258>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d111      	bne.n	800219e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800217a:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_ADC_ConfigChannel+0x25c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a11      	ldr	r2, [pc, #68]	@ (80021c4 <HAL_ADC_ConfigChannel+0x260>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	0c9a      	lsrs	r2, r3, #18
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002190:	e002      	b.n	8002198 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3b01      	subs	r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f9      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40012300 	.word	0x40012300
 80021b8:	40012000 	.word	0x40012000
 80021bc:	10000012 	.word	0x10000012
 80021c0:	2000000c 	.word	0x2000000c
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d0:	4b79      	ldr	r3, [pc, #484]	@ (80023b8 <ADC_Init+0x1f0>)
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	021a      	lsls	r2, r3, #8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	4a58      	ldr	r2, [pc, #352]	@ (80023bc <ADC_Init+0x1f4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800226e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6899      	ldr	r1, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6899      	ldr	r1, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	e00f      	b.n	80022c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0202 	bic.w	r2, r2, #2
 80022d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7e1b      	ldrb	r3, [r3, #24]
 80022e0:	005a      	lsls	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002302:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002312:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	3b01      	subs	r3, #1
 8002320:	035a      	lsls	r2, r3, #13
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	e007      	b.n	800233c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	3b01      	subs	r3, #1
 8002358:	051a      	lsls	r2, r3, #20
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800237e:	025a      	lsls	r2, r3, #9
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	029a      	lsls	r2, r3, #10
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	609a      	str	r2, [r3, #8]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40012300 	.word	0x40012300
 80023bc:	0f000001 	.word	0x0f000001

080023c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	@ (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	@ (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	@ (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff3e 	bl	800241c <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff8e 	bl	80024c8 <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5d 	bl	8002474 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff31 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffa2 	bl	8002530 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_DMA_Start_IT+0x26>
 8002618:	2302      	movs	r3, #2
 800261a:	e040      	b.n	800269e <HAL_DMA_Start_IT+0xa8>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d12f      	bne.n	8002690 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f85c 	bl	8002702 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	223f      	movs	r2, #63	@ 0x3f
 8002650:	409a      	lsls	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0216 	orr.w	r2, r2, #22
 8002664:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0208 	orr.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e005      	b.n	800269c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002698:	2302      	movs	r3, #2
 800269a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800269c:	7dfb      	ldrb	r3, [r7, #23]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d004      	beq.n	80026c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2280      	movs	r2, #128	@ 0x80
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e00c      	b.n	80026de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2205      	movs	r2, #5
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800271e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d108      	bne.n	8002742 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002740:	e007      	b.n	8002752 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	60da      	str	r2, [r3, #12]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e159      	b.n	8002a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	f040 8148 	bne.w	8002a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d005      	beq.n	80027b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b03      	cmp	r3, #3
 800281e:	d017      	beq.n	8002850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d123      	bne.n	80028a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	69b9      	ldr	r1, [r7, #24]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a2 	beq.w	8002a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b57      	ldr	r3, [pc, #348]	@ (8002a48 <HAL_GPIO_Init+0x2e8>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	4a56      	ldr	r2, [pc, #344]	@ (8002a48 <HAL_GPIO_Init+0x2e8>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f6:	4b54      	ldr	r3, [pc, #336]	@ (8002a48 <HAL_GPIO_Init+0x2e8>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002902:	4a52      	ldr	r2, [pc, #328]	@ (8002a4c <HAL_GPIO_Init+0x2ec>)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a49      	ldr	r2, [pc, #292]	@ (8002a50 <HAL_GPIO_Init+0x2f0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x202>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a48      	ldr	r2, [pc, #288]	@ (8002a54 <HAL_GPIO_Init+0x2f4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x1fe>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a47      	ldr	r2, [pc, #284]	@ (8002a58 <HAL_GPIO_Init+0x2f8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x1fa>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a46      	ldr	r2, [pc, #280]	@ (8002a5c <HAL_GPIO_Init+0x2fc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x1f6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a45      	ldr	r2, [pc, #276]	@ (8002a60 <HAL_GPIO_Init+0x300>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x1f2>
 800294e:	2304      	movs	r3, #4
 8002950:	e008      	b.n	8002964 <HAL_GPIO_Init+0x204>
 8002952:	2307      	movs	r3, #7
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x204>
 8002956:	2303      	movs	r3, #3
 8002958:	e004      	b.n	8002964 <HAL_GPIO_Init+0x204>
 800295a:	2302      	movs	r3, #2
 800295c:	e002      	b.n	8002964 <HAL_GPIO_Init+0x204>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x204>
 8002962:	2300      	movs	r3, #0
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f002 0203 	and.w	r2, r2, #3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4093      	lsls	r3, r2
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002974:	4935      	ldr	r1, [pc, #212]	@ (8002a4c <HAL_GPIO_Init+0x2ec>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002982:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d0:	4a24      	ldr	r2, [pc, #144]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d6:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a00:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a24:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	f67f aea2 	bls.w	800277c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	400b      	ands	r3, r1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e12b      	b.n	8002d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fea4 	bl	8001844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	@ 0x24
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b34:	f002 ff5c 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8002b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a81      	ldr	r2, [pc, #516]	@ (8002d44 <HAL_I2C_Init+0x274>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d807      	bhi.n	8002b54 <HAL_I2C_Init+0x84>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a80      	ldr	r2, [pc, #512]	@ (8002d48 <HAL_I2C_Init+0x278>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	bf94      	ite	ls
 8002b4c:	2301      	movls	r3, #1
 8002b4e:	2300      	movhi	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e006      	b.n	8002b62 <HAL_I2C_Init+0x92>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a7d      	ldr	r2, [pc, #500]	@ (8002d4c <HAL_I2C_Init+0x27c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	bf94      	ite	ls
 8002b5c:	2301      	movls	r3, #1
 8002b5e:	2300      	movhi	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0e7      	b.n	8002d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a78      	ldr	r2, [pc, #480]	@ (8002d50 <HAL_I2C_Init+0x280>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0c9b      	lsrs	r3, r3, #18
 8002b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a6a      	ldr	r2, [pc, #424]	@ (8002d44 <HAL_I2C_Init+0x274>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d802      	bhi.n	8002ba4 <HAL_I2C_Init+0xd4>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	e009      	b.n	8002bb8 <HAL_I2C_Init+0xe8>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	4a69      	ldr	r2, [pc, #420]	@ (8002d54 <HAL_I2C_Init+0x284>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	495c      	ldr	r1, [pc, #368]	@ (8002d44 <HAL_I2C_Init+0x274>)
 8002bd4:	428b      	cmp	r3, r1
 8002bd6:	d819      	bhi.n	8002c0c <HAL_I2C_Init+0x13c>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e59      	subs	r1, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be6:	1c59      	adds	r1, r3, #1
 8002be8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bec:	400b      	ands	r3, r1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_I2C_Init+0x138>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1e59      	subs	r1, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c06:	e051      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e04f      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <HAL_I2C_Init+0x168>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1e58      	subs	r0, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	440b      	add	r3, r1
 8002c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e012      	b.n	8002c5e <HAL_I2C_Init+0x18e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e58      	subs	r0, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	0099      	lsls	r1, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Init+0x196>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e022      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10e      	bne.n	8002c8c <HAL_I2C_Init+0x1bc>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1e58      	subs	r0, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	440b      	add	r3, r1
 8002c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c8a:	e00f      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	6809      	ldr	r1, [r1, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6911      	ldr	r1, [r2, #16]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68d2      	ldr	r2, [r2, #12]
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	000186a0 	.word	0x000186a0
 8002d48:	001e847f 	.word	0x001e847f
 8002d4c:	003d08ff 	.word	0x003d08ff
 8002d50:	431bde83 	.word	0x431bde83
 8002d54:	10624dd3 	.word	0x10624dd3

08002d58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	817b      	strh	r3, [r7, #10]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7fe ff62 	bl	8001c34 <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	f040 80e0 	bne.w	8002f40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2319      	movs	r3, #25
 8002d86:	2201      	movs	r2, #1
 8002d88:	4970      	ldr	r1, [pc, #448]	@ (8002f4c <HAL_I2C_Master_Transmit+0x1f4>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fdd4 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	e0d3      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2C_Master_Transmit+0x50>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0cc      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d007      	beq.n	8002dce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2221      	movs	r2, #33	@ 0x21
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2210      	movs	r2, #16
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	893a      	ldrh	r2, [r7, #8]
 8002dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a50      	ldr	r2, [pc, #320]	@ (8002f50 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e10:	8979      	ldrh	r1, [r7, #10]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fb5a 	bl	80034d0 <I2C_MasterRequestWrite>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e08d      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e3c:	e066      	b.n	8002f0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	6a39      	ldr	r1, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fe92 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e06b      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_I2C_Master_Transmit+0x188>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	6a39      	ldr	r1, [r7, #32]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fe89 	bl	8003bfc <I2C_WaitOnBTFFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d107      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01a      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d194      	bne.n	8002e3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	@ 0x28
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f72:	f7fe fe5f 	bl	8001c34 <HAL_GetTick>
 8002f76:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f040 8136 	bne.w	80031f2 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f86:	4b9d      	ldr	r3, [pc, #628]	@ (80031fc <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	08db      	lsrs	r3, r3, #3
 8002f8c:	4a9c      	ldr	r2, [pc, #624]	@ (8003200 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0a1a      	lsrs	r2, r3, #8
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d112      	bne.n	8002fd2 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e110      	b.n	80031f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d0df      	beq.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Mem_Write_DMA+0x9a>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e102      	b.n	80031f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d007      	beq.n	8003014 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2221      	movs	r2, #33	@ 0x21
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800303e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a6c      	ldr	r2, [pc, #432]	@ (8003204 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003054:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003056:	897a      	ldrh	r2, [r7, #10]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800305c:	893a      	ldrh	r2, [r7, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a9 	beq.w	80031ca <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307c:	2b00      	cmp	r3, #0
 800307e:	d02a      	beq.n	80030d6 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	4a60      	ldr	r2, [pc, #384]	@ (8003208 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003086:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308c:	4a5f      	ldr	r2, [pc, #380]	@ (800320c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800308e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003094:	2200      	movs	r2, #0
 8003096:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	2200      	movs	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a4:	2200      	movs	r2, #0
 80030a6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	2200      	movs	r2, #0
 80030ae:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	4619      	mov	r1, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3310      	adds	r3, #16
 80030c0:	461a      	mov	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c6:	f7ff fa96 	bl	80025f6 <HAL_DMA_Start_IT>
 80030ca:	4603      	mov	r3, r0
 80030cc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80030ce:	7efb      	ldrb	r3, [r7, #27]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d166      	bne.n	80031a2 <HAL_I2C_Mem_Write_DMA+0x24e>
 80030d4:	e013      	b.n	80030fe <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07a      	b.n	80031f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80030fe:	88f8      	ldrh	r0, [r7, #6]
 8003100:	893a      	ldrh	r2, [r7, #8]
 8003102:	8979      	ldrh	r1, [r7, #10]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	2323      	movs	r3, #35	@ 0x23
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa60 	bl	80035d4 <I2C_RequestMemoryWrite>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d022      	beq.n	8003160 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fac1 	bl	80026a6 <HAL_DMA_Abort_IT>
 8003124:	4603      	mov	r3, r0
 8003126:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312c:	2200      	movs	r2, #0
 800312e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e049      	b.n	80031f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800319c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e028      	b.n	80031f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f043 0210 	orr.w	r2, r3, #16
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e014      	b.n	80031f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	2000000c 	.word	0x2000000c
 8003200:	14f8b589 	.word	0x14f8b589
 8003204:	ffff0000 	.word	0xffff0000
 8003208:	08003701 	.word	0x08003701
 800320c:	080038bf 	.word	0x080038bf

08003210 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	460b      	mov	r3, r1
 800321e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7fe fd08 	bl	8001c34 <HAL_GetTick>
 8003224:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	f040 8111 	bne.w	800345a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2319      	movs	r3, #25
 800323e:	2201      	movs	r2, #1
 8003240:	4988      	ldr	r1, [pc, #544]	@ (8003464 <HAL_I2C_IsDeviceReady+0x254>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fb78 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	e104      	b.n	800345c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_I2C_IsDeviceReady+0x50>
 800325c:	2302      	movs	r3, #2
 800325e:	e0fd      	b.n	800345c <HAL_I2C_IsDeviceReady+0x24c>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d007      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003294:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2224      	movs	r2, #36	@ 0x24
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a70      	ldr	r2, [pc, #448]	@ (8003468 <HAL_I2C_IsDeviceReady+0x258>)
 80032a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fb36 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e0:	d103      	bne.n	80032ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0b6      	b.n	800345c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fe fc99 	bl	8001c34 <HAL_GetTick>
 8003302:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	bf0c      	ite	eq
 8003312:	2301      	moveq	r3, #1
 8003314:	2300      	movne	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003332:	e025      	b.n	8003380 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003334:	f7fe fc7e 	bl	8001c34 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <HAL_I2C_IsDeviceReady+0x13a>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22a0      	movs	r2, #160	@ 0xa0
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2ba0      	cmp	r3, #160	@ 0xa0
 800338a:	d005      	beq.n	8003398 <HAL_I2C_IsDeviceReady+0x188>
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <HAL_I2C_IsDeviceReady+0x188>
 8003392:	7dbb      	ldrb	r3, [r7, #22]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0cd      	beq.n	8003334 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d129      	bne.n	8003402 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2319      	movs	r3, #25
 80033da:	2201      	movs	r2, #1
 80033dc:	4921      	ldr	r1, [pc, #132]	@ (8003464 <HAL_I2C_IsDeviceReady+0x254>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 faaa 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e036      	b.n	800345c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e02c      	b.n	800345c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003410:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800341a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2319      	movs	r3, #25
 8003422:	2201      	movs	r2, #1
 8003424:	490f      	ldr	r1, [pc, #60]	@ (8003464 <HAL_I2C_IsDeviceReady+0x254>)
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fa86 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e012      	b.n	800345c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	3301      	adds	r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	f4ff af32 	bcc.w	80032aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	00100002 	.word	0x00100002
 8003468:	ffff0000 	.word	0xffff0000

0800346c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d006      	beq.n	80034fa <I2C_MasterRequestWrite+0x2a>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d003      	beq.n	80034fa <I2C_MasterRequestWrite+0x2a>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034f8:	d108      	bne.n	800350c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e00b      	b.n	8003524 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	2b12      	cmp	r3, #18
 8003512:	d107      	bne.n	8003524 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fa01 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354a:	d103      	bne.n	8003554 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e035      	b.n	80035c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003560:	d108      	bne.n	8003574 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	e01b      	b.n	80035ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	11db      	asrs	r3, r3, #7
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0306 	and.w	r3, r3, #6
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f063 030f 	orn	r3, r3, #15
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	490e      	ldr	r1, [pc, #56]	@ (80035cc <I2C_MasterRequestWrite+0xfc>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa4a 	bl	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e010      	b.n	80035c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4907      	ldr	r1, [pc, #28]	@ (80035d0 <I2C_MasterRequestWrite+0x100>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fa3a 	bl	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	00010008 	.word	0x00010008
 80035d0:	00010002 	.word	0x00010002

080035d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	817b      	strh	r3, [r7, #10]
 80035e6:	460b      	mov	r3, r1
 80035e8:	813b      	strh	r3, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2200      	movs	r2, #0
 8003606:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f994 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003624:	d103      	bne.n	800362e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e05f      	b.n	80036f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003640:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	492d      	ldr	r1, [pc, #180]	@ (80036fc <I2C_RequestMemoryWrite+0x128>)
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f9ef 	bl	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04c      	b.n	80036f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003670:	6a39      	ldr	r1, [r7, #32]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa7a 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	2b04      	cmp	r3, #4
 8003684:	d107      	bne.n	8003696 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003694:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e02b      	b.n	80036f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]
 80036aa:	e021      	b.n	80036f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036ac:	893b      	ldrh	r3, [r7, #8]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036bc:	6a39      	ldr	r1, [r7, #32]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa54 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d107      	bne.n	80036e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e005      	b.n	80036f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e6:	893b      	ldrh	r3, [r7, #8]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	00010002 	.word	0x00010002

08003700 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003714:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800371c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003732:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003740:	2200      	movs	r2, #0
 8003742:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	2200      	movs	r2, #0
 8003752:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800375a:	2b21      	cmp	r3, #33	@ 0x21
 800375c:	d007      	beq.n	800376e <I2C_DMAXferCplt+0x6e>
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003764:	2b22      	cmp	r3, #34	@ 0x22
 8003766:	d131      	bne.n	80037cc <I2C_DMAXferCplt+0xcc>
 8003768:	7cbb      	ldrb	r3, [r7, #18]
 800376a:	2b20      	cmp	r3, #32
 800376c:	d12e      	bne.n	80037cc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	2b29      	cmp	r3, #41	@ 0x29
 8003788:	d10a      	bne.n	80037a0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2221      	movs	r2, #33	@ 0x21
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2228      	movs	r2, #40	@ 0x28
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003798:	6978      	ldr	r0, [r7, #20]
 800379a:	f7ff fe71 	bl	8003480 <HAL_I2C_SlaveTxCpltCallback>
 800379e:	e00c      	b.n	80037ba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80037a4:	d109      	bne.n	80037ba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2222      	movs	r2, #34	@ 0x22
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2228      	movs	r2, #40	@ 0x28
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037b4:	6978      	ldr	r0, [r7, #20]
 80037b6:	f7ff fe6d 	bl	8003494 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80037c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037ca:	e074      	b.n	80038b6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d06e      	beq.n	80038b6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003800:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003808:	d009      	beq.n	800381e <I2C_DMAXferCplt+0x11e>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d006      	beq.n	800381e <I2C_DMAXferCplt+0x11e>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003816:	d002      	beq.n	800381e <I2C_DMAXferCplt+0x11e>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b20      	cmp	r3, #32
 800381c:	d107      	bne.n	800382e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800383c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800384c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800385c:	6978      	ldr	r0, [r7, #20]
 800385e:	f7ff fe2d 	bl	80034bc <HAL_I2C_ErrorCallback>
}
 8003862:	e028      	b.n	80038b6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d10a      	bne.n	800388e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003886:	6978      	ldr	r0, [r7, #20]
 8003888:	f7ff fe0e 	bl	80034a8 <HAL_I2C_MemRxCpltCallback>
}
 800388c:	e013      	b.n	80038b6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d002      	beq.n	80038a2 <I2C_DMAXferCplt+0x1a2>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d103      	bne.n	80038aa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80038a8:	e002      	b.n	80038b0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2212      	movs	r2, #18
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80038b0:	6978      	ldr	r0, [r7, #20]
 80038b2:	f7ff fddb 	bl	800346c <HAL_I2C_MasterRxCpltCallback>
}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d8:	2200      	movs	r2, #0
 80038da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e8:	2200      	movs	r2, #0
 80038ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fe fefc 	bl	80026ea <HAL_DMA_GetError>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d01b      	beq.n	8003930 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003906:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	f043 0210 	orr.w	r2, r3, #16
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff fdc6 	bl	80034bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003948:	e048      	b.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d044      	beq.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fe f96f 	bl	8001c34 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d139      	bne.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	0c1b      	lsrs	r3, r3, #16
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10d      	bne.n	800398e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	43da      	mvns	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	e00c      	b.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d116      	bne.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e023      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10d      	bne.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	43da      	mvns	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	e00c      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d093      	beq.n	800394a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a3a:	e071      	b.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a4a:	d123      	bne.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e067      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d041      	beq.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	f7fe f8ca 	bl	8001c34 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d136      	bne.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10c      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	e00b      	b.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	43da      	mvns	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e021      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10c      	bne.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e00b      	b.n	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af6d 	bne.w	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b78:	e034      	b.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f886 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e034      	b.n	8003bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d028      	beq.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7fe f84f 	bl	8001c34 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11d      	bne.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb2:	2b80      	cmp	r3, #128	@ 0x80
 8003bb4:	d016      	beq.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e007      	b.n	8003bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bee:	2b80      	cmp	r3, #128	@ 0x80
 8003bf0:	d1c3      	bne.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c08:	e034      	b.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f83e 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e034      	b.n	8003c84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d028      	beq.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fe f807 	bl	8001c34 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d11d      	bne.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d016      	beq.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e007      	b.n	8003c84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d1c3      	bne.n	8003c0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca2:	d11b      	bne.n	8003cdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f043 0204 	orr.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e101      	b.n	8003f00 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f006 fbe2 	bl	800a4e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2203      	movs	r2, #3
 8003d20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d2a:	d102      	bne.n	8003d32 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f002 ff37 	bl	8006baa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7c1a      	ldrb	r2, [r3, #16]
 8003d44:	f88d 2000 	strb.w	r2, [sp]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4c:	f002 fe16 	bl	800697c <USB_CoreInit>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0ce      	b.n	8003f00 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 ff2f 	bl	8006bcc <USB_SetCurrentMode>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0bf      	b.n	8003f00 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e04a      	b.n	8003e1c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3315      	adds	r3, #21
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3314      	adds	r3, #20
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	b298      	uxth	r0, r3
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	332e      	adds	r3, #46	@ 0x2e
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3318      	adds	r3, #24
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	331c      	adds	r3, #28
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3320      	adds	r3, #32
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3324      	adds	r3, #36	@ 0x24
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	791b      	ldrb	r3, [r3, #4]
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3af      	bcc.n	8003d86 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	e044      	b.n	8003eb6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e6e:	7bfa      	ldrb	r2, [r7, #15]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	791b      	ldrb	r3, [r3, #4]
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d3b5      	bcc.n	8003e2c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7c1a      	ldrb	r2, [r3, #16]
 8003ec8:	f88d 2000 	strb.w	r2, [sp]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed0:	f002 fec8 	bl	8006c64 <USB_DevInit>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00c      	b.n	8003f00 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 ff12 	bl	8007d22 <USB_DevDisconnect>

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_PCD_Start+0x1c>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e022      	b.n	8003f6a <HAL_PCD_Start+0x62>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f002 fe19 	bl	8006b88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f003 fec0 	bl	8007ce0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f72:	b590      	push	{r4, r7, lr}
 8003f74:	b08d      	sub	sp, #52	@ 0x34
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f003 ff7e 	bl	8007e8a <USB_GetMode>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 848c 	bne.w	80048ae <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f003 fee2 	bl	8007d64 <USB_ReadInterrupts>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8482 	beq.w	80048ac <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f003 fecf 	bl	8007d64 <USB_ReadInterrupts>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d107      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f002 0202 	and.w	r2, r2, #2
 8003fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f003 febd 	bl	8007d64 <USB_ReadInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d161      	bne.n	80040b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0210 	bic.w	r2, r2, #16
 8004002:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	3304      	adds	r3, #4
 8004022:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800402a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800402e:	d124      	bne.n	800407a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d035      	beq.n	80040a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6a38      	ldr	r0, [r7, #32]
 8004050:	f003 fcf4 	bl	8007a3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004060:	441a      	add	r2, r3
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004072:	441a      	add	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	615a      	str	r2, [r3, #20]
 8004078:	e016      	b.n	80040a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004080:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004084:	d110      	bne.n	80040a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800408c:	2208      	movs	r2, #8
 800408e:	4619      	mov	r1, r3
 8004090:	6a38      	ldr	r0, [r7, #32]
 8004092:	f003 fcd3 	bl	8007a3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a2:	441a      	add	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0210 	orr.w	r2, r2, #16
 80040b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 fe51 	bl	8007d64 <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040cc:	f040 80a7 	bne.w	800421e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f003 fe56 	bl	8007d8a <USB_ReadDevAllOutEpInterrupt>
 80040de:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80040e0:	e099      	b.n	8004216 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 808e 	beq.w	800420a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f003 fe7a 	bl	8007df2 <USB_ReadDevOutEPInterrupt>
 80040fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004116:	461a      	mov	r2, r3
 8004118:	2301      	movs	r3, #1
 800411a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800411c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fea4 	bl	8004e6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413a:	461a      	mov	r2, r3
 800413c:	2308      	movs	r3, #8
 800413e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 ff7a 	bl	800503c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	2310      	movs	r3, #16
 8004162:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d030      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004176:	2b80      	cmp	r3, #128	@ 0x80
 8004178:	d109      	bne.n	800418e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004188:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800418c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800418e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	3304      	adds	r3, #4
 80041a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	78db      	ldrb	r3, [r3, #3]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d108      	bne.n	80041be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2200      	movs	r2, #0
 80041b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f006 fa8d 	bl	800a6d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ca:	461a      	mov	r2, r3
 80041cc:	2302      	movs	r3, #2
 80041ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e6:	461a      	mov	r2, r3
 80041e8:	2320      	movs	r3, #32
 80041ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004208:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	3301      	adds	r3, #1
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004212:	085b      	lsrs	r3, r3, #1
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	f47f af62 	bne.w	80040e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f003 fd9e 	bl	8007d64 <USB_ReadInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800422e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004232:	f040 80db 	bne.w	80043ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f003 fdbf 	bl	8007dbe <USB_ReadDevAllInEpInterrupt>
 8004240:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004246:	e0cd      	b.n	80043e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80c2 	beq.w	80043d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f003 fde5 	bl	8007e2e <USB_ReadDevInEPInterrupt>
 8004264:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d057      	beq.n	8004320 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2201      	movs	r2, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	69f9      	ldr	r1, [r7, #28]
 800428c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004290:	4013      	ands	r3, r2
 8004292:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a0:	461a      	mov	r2, r3
 80042a2:	2301      	movs	r3, #1
 80042a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	799b      	ldrb	r3, [r3, #6]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d132      	bne.n	8004314 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3320      	adds	r3, #32
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4403      	add	r3, r0
 80042ce:	331c      	adds	r3, #28
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4419      	add	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4403      	add	r3, r0
 80042e2:	3320      	adds	r3, #32
 80042e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d113      	bne.n	8004314 <HAL_PCD_IRQHandler+0x3a2>
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3324      	adds	r3, #36	@ 0x24
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d108      	bne.n	8004314 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800430c:	461a      	mov	r2, r3
 800430e:	2101      	movs	r1, #1
 8004310:	f003 fdec 	bl	8007eec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f006 f961 	bl	800a5e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004336:	461a      	mov	r2, r3
 8004338:	2308      	movs	r3, #8
 800433a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004352:	461a      	mov	r2, r3
 8004354:	2310      	movs	r3, #16
 8004356:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800436e:	461a      	mov	r2, r3
 8004370:	2340      	movs	r3, #64	@ 0x40
 8004372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d023      	beq.n	80043c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800437e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004380:	6a38      	ldr	r0, [r7, #32]
 8004382:	f002 fdd3 	bl	8006f2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	3310      	adds	r3, #16
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d108      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f006 f9a4 	bl	800a6fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c0:	461a      	mov	r2, r3
 80043c2:	2302      	movs	r3, #2
 80043c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fcbd 	bl	8004d52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	3301      	adds	r3, #1
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f47f af2e 	bne.w	8004248 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f003 fcb7 	bl	8007d64 <USB_ReadInterrupts>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004400:	d122      	bne.n	8004448 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800441c:	2b01      	cmp	r3, #1
 800441e:	d108      	bne.n	8004432 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004428:	2100      	movs	r1, #0
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fea4 	bl	8005178 <HAL_PCDEx_LPM_Callback>
 8004430:	e002      	b.n	8004438 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f006 f942 	bl	800a6bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f003 fc89 	bl	8007d64 <USB_ReadInterrupts>
 8004452:	4603      	mov	r3, r0
 8004454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800445c:	d112      	bne.n	8004484 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b01      	cmp	r3, #1
 800446c:	d102      	bne.n	8004474 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f006 f8fe 	bl	800a670 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004482:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f003 fc6b 	bl	8007d64 <USB_ReadInterrupts>
 800448e:	4603      	mov	r3, r0
 8004490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004498:	f040 80b7 	bne.w	800460a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2110      	movs	r1, #16
 80044b6:	4618      	mov	r0, r3
 80044b8:	f002 fd38 	bl	8006f2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c0:	e046      	b.n	8004550 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ce:	461a      	mov	r2, r3
 80044d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e6:	0151      	lsls	r1, r2, #5
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	440a      	add	r2, r1
 80044ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004502:	461a      	mov	r2, r3
 8004504:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004508:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	440a      	add	r2, r1
 8004520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004524:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004528:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	440a      	add	r2, r1
 8004540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004544:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004548:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454c:	3301      	adds	r3, #1
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	791b      	ldrb	r3, [r3, #4]
 8004554:	461a      	mov	r2, r3
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	4293      	cmp	r3, r2
 800455a:	d3b2      	bcc.n	80044c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800456a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800456e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7bdb      	ldrb	r3, [r3, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d016      	beq.n	80045a6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004588:	f043 030b 	orr.w	r3, r3, #11
 800458c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800459e:	f043 030b 	orr.w	r3, r3, #11
 80045a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80045a4:	e015      	b.n	80045d2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045b8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80045bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045cc:	f043 030b 	orr.w	r3, r3, #11
 80045d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80045e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045f4:	461a      	mov	r2, r3
 80045f6:	f003 fc79 	bl	8007eec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f003 fba8 	bl	8007d64 <USB_ReadInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800461a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800461e:	d123      	bne.n	8004668 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f003 fc3e 	bl	8007ea6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f002 fcf5 	bl	800701e <USB_GetDevSpeed>
 8004634:	4603      	mov	r3, r0
 8004636:	461a      	mov	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681c      	ldr	r4, [r3, #0]
 8004640:	f001 f9ca 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8004644:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800464a:	461a      	mov	r2, r3
 800464c:	4620      	mov	r0, r4
 800464e:	f002 f9f9 	bl	8006a44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f005 ffed 	bl	800a632 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004666:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f003 fb79 	bl	8007d64 <USB_ReadInterrupts>
 8004672:	4603      	mov	r3, r0
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d10a      	bne.n	8004692 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f005 ffca 	bl	800a616 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f002 0208 	and.w	r2, r2, #8
 8004690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f003 fb64 	bl	8007d64 <USB_ReadInterrupts>
 800469c:	4603      	mov	r3, r0
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d123      	bne.n	80046ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b2:	2301      	movs	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b6:	e014      	b.n	80046e2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fb0a 	bl	8004cf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	3301      	adds	r3, #1
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	791b      	ldrb	r3, [r3, #4]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d3e4      	bcc.n	80046b8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f003 fb36 	bl	8007d64 <USB_ReadInterrupts>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004702:	d13c      	bne.n	800477e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004704:	2301      	movs	r3, #1
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
 8004708:	e02b      	b.n	8004762 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	3318      	adds	r3, #24
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d115      	bne.n	800475c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004730:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004732:	2b00      	cmp	r3, #0
 8004734:	da12      	bge.n	800475c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	3317      	adds	r3, #23
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004752:	b2db      	uxtb	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 faca 	bl	8004cf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	3301      	adds	r3, #1
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	791b      	ldrb	r3, [r3, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	4293      	cmp	r3, r2
 800476c:	d3cd      	bcc.n	800470a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695a      	ldr	r2, [r3, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800477c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f003 faee 	bl	8007d64 <USB_ReadInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800478e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004792:	d156      	bne.n	8004842 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004794:	2301      	movs	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
 8004798:	e045      	b.n	8004826 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d12e      	bne.n	8004820 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	da2b      	bge.n	8004820 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	0c1a      	lsrs	r2, r3, #16
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80047d2:	4053      	eors	r3, r2
 80047d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d121      	bne.n	8004820 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004818:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800481c:	6053      	str	r3, [r2, #4]
            break;
 800481e:	e008      	b.n	8004832 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	3301      	adds	r3, #1
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	791b      	ldrb	r3, [r3, #4]
 800482a:	461a      	mov	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	4293      	cmp	r3, r2
 8004830:	d3b3      	bcc.n	800479a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f003 fa8c 	bl	8007d64 <USB_ReadInterrupts>
 800484c:	4603      	mov	r3, r0
 800484e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004856:	d10a      	bne.n	800486e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f005 ff61 	bl	800a720 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800486c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f003 fa76 	bl	8007d64 <USB_ReadInterrupts>
 8004878:	4603      	mov	r3, r0
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d115      	bne.n	80048ae <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f005 ff51 	bl	800a73c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	e000      	b.n	80048ae <HAL_PCD_IRQHandler+0x93c>
      return;
 80048ac:	bf00      	nop
    }
  }
}
 80048ae:	3734      	adds	r7, #52	@ 0x34
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd90      	pop	{r4, r7, pc}

080048b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_PCD_SetAddress+0x1a>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e012      	b.n	80048f4 <HAL_PCD_SetAddress+0x40>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f003 f9d5 	bl	8007c94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	70fb      	strb	r3, [r7, #3]
 800490e:	460b      	mov	r3, r1
 8004910:	803b      	strh	r3, [r7, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800491a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da0f      	bge.n	8004942 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	4613      	mov	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	3310      	adds	r3, #16
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	705a      	strb	r2, [r3, #1]
 8004940:	e00f      	b.n	8004962 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4413      	add	r3, r2
 8004958:	3304      	adds	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800496e:	883b      	ldrh	r3, [r7, #0]
 8004970:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	78ba      	ldrb	r2, [r7, #2]
 800497c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004990:	78bb      	ldrb	r3, [r7, #2]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d102      	bne.n	800499c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_PCD_EP_Open+0xae>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e00e      	b.n	80049c8 <HAL_PCD_EP_Open+0xcc>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f002 fb55 	bl	8007068 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80049c6:	7afb      	ldrb	r3, [r7, #11]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da0f      	bge.n	8004a04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	3310      	adds	r3, #16
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	3304      	adds	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	705a      	strb	r2, [r3, #1]
 8004a02:	e00f      	b.n	8004a24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 020f 	and.w	r2, r3, #15
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_PCD_EP_Close+0x6e>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e00e      	b.n	8004a5c <HAL_PCD_EP_Close+0x8c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f002 fb93 	bl	8007178 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	460b      	mov	r3, r1
 8004a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a74:	7afb      	ldrb	r3, [r7, #11]
 8004a76:	f003 020f 	and.w	r2, r3, #15
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa6:	7afb      	ldrb	r3, [r7, #11]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	799b      	ldrb	r3, [r3, #6]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d102      	bne.n	8004ac0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	799b      	ldrb	r3, [r3, #6]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	f002 fc30 	bl	8007330 <USB_EPStartXfer>

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004afc:	681b      	ldr	r3, [r3, #0]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	460b      	mov	r3, r1
 8004b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	f003 020f 	and.w	r2, r3, #15
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	3310      	adds	r3, #16
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3304      	adds	r3, #4
 8004b30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2200      	movs	r2, #0
 8004b42:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2201      	movs	r2, #1
 8004b48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b4a:	7afb      	ldrb	r3, [r7, #11]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	799b      	ldrb	r3, [r3, #6]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d102      	bne.n	8004b64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	799b      	ldrb	r3, [r3, #6]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	f002 fbde 	bl	8007330 <USB_EPStartXfer>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	7912      	ldrb	r2, [r2, #4]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e04f      	b.n	8004c3c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da0f      	bge.n	8004bc4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	3310      	adds	r3, #16
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3304      	adds	r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	705a      	strb	r2, [r3, #1]
 8004bc2:	e00d      	b.n	8004be0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_PCD_EP_SetStall+0x82>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e01d      	b.n	8004c3c <HAL_PCD_EP_SetStall+0xbe>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68f9      	ldr	r1, [r7, #12]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f002 ff6c 	bl	8007aec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7999      	ldrb	r1, [r3, #6]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f003 f95d 	bl	8007eec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	7912      	ldrb	r2, [r2, #4]
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e042      	b.n	8004ce8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da0f      	bge.n	8004c8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	f003 020f 	and.w	r2, r3, #15
 8004c70:	4613      	mov	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	3310      	adds	r3, #16
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3304      	adds	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	705a      	strb	r2, [r3, #1]
 8004c88:	e00f      	b.n	8004caa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_PCD_EP_ClrStall+0x86>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e00e      	b.n	8004ce8 <HAL_PCD_EP_ClrStall+0xa4>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f002 ff75 	bl	8007bc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	da0c      	bge.n	8004d1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 020f 	and.w	r2, r3, #15
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3310      	adds	r3, #16
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4413      	add	r3, r2
 8004d18:	3304      	adds	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e00c      	b.n	8004d38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	3304      	adds	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68f9      	ldr	r1, [r7, #12]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 fd94 	bl	800786c <USB_EPStopXfer>
 8004d44:	4603      	mov	r3, r0
 8004d46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d48:	7afb      	ldrb	r3, [r7, #11]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08a      	sub	sp, #40	@ 0x28
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3310      	adds	r3, #16
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	3304      	adds	r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d901      	bls.n	8004d8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e06b      	b.n	8004e62 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d902      	bls.n	8004da6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3303      	adds	r3, #3
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dae:	e02a      	b.n	8004e06 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d902      	bls.n	8004dcc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3303      	adds	r3, #3
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68d9      	ldr	r1, [r3, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4603      	mov	r3, r0
 8004de8:	6978      	ldr	r0, [r7, #20]
 8004dea:	f002 fde9 	bl	80079c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	441a      	add	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d809      	bhi.n	8004e30 <PCD_WriteEmptyTxFifo+0xde>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d203      	bcs.n	8004e30 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1bf      	bne.n	8004db0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d811      	bhi.n	8004e60 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	2201      	movs	r2, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	6939      	ldr	r1, [r7, #16]
 8004e58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	333c      	adds	r3, #60	@ 0x3c
 8004e84:	3304      	adds	r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	799b      	ldrb	r3, [r3, #6]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d17b      	bne.n	8004f9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	4a61      	ldr	r2, [pc, #388]	@ (8005034 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	f240 80b9 	bls.w	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80b3 	beq.w	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed4:	6093      	str	r3, [r2, #8]
 8004ed6:	e0a7      	b.n	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	6093      	str	r3, [r2, #8]
 8004ef4:	e098      	b.n	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 8093 	bne.w	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	@ (8005034 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d90f      	bls.n	8004f2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f20:	461a      	mov	r2, r3
 8004f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f26:	6093      	str	r3, [r2, #8]
 8004f28:	e07e      	b.n	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	0159      	lsls	r1, r3, #5
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d114      	bne.n	8004f8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f74:	461a      	mov	r2, r3
 8004f76:	2101      	movs	r1, #1
 8004f78:	f002 ffb8 	bl	8007eec <USB_EP0_OutStart>
 8004f7c:	e006      	b.n	8004f8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f005 fb0a 	bl	800a5ac <HAL_PCD_DataOutStageCallback>
 8004f98:	e046      	b.n	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	@ (8005038 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d124      	bne.n	8004fec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fbe:	6093      	str	r3, [r2, #8]
 8004fc0:	e032      	b.n	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2320      	movs	r3, #32
 8004fdc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f005 fae1 	bl	800a5ac <HAL_PCD_DataOutStageCallback>
 8004fea:	e01d      	b.n	8005028 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d114      	bne.n	800501c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005014:	461a      	mov	r2, r3
 8005016:	2100      	movs	r1, #0
 8005018:	f002 ff68 	bl	8007eec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f005 fac2 	bl	800a5ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	4f54300a 	.word	0x4f54300a
 8005038:	4f54310a 	.word	0x4f54310a

0800503c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	333c      	adds	r3, #60	@ 0x3c
 8005054:	3304      	adds	r3, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4a15      	ldr	r2, [pc, #84]	@ (80050c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d90e      	bls.n	8005090 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005088:	461a      	mov	r2, r3
 800508a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800508e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f005 fa79 	bl	800a588 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a0a      	ldr	r2, [pc, #40]	@ (80050c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d90c      	bls.n	80050b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	799b      	ldrb	r3, [r3, #6]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d108      	bne.n	80050b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050b0:	461a      	mov	r2, r3
 80050b2:	2101      	movs	r1, #1
 80050b4:	f002 ff1a 	bl	8007eec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	4f54300a 	.word	0x4f54300a

080050c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
 80050d4:	4613      	mov	r3, r2
 80050d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050e6:	883b      	ldrh	r3, [r7, #0]
 80050e8:	0419      	lsls	r1, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80050f4:	e028      	b.n	8005148 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4413      	add	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e00d      	b.n	8005126 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	3340      	adds	r3, #64	@ 0x40
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	3301      	adds	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
 8005126:	7bfa      	ldrb	r2, [r7, #15]
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	3b01      	subs	r3, #1
 800512c:	429a      	cmp	r2, r3
 800512e:	d3ec      	bcc.n	800510a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005130:	883b      	ldrh	r3, [r7, #0]
 8005132:	0418      	lsls	r0, r3, #16
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	3b01      	subs	r3, #1
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	4302      	orrs	r2, r0
 8005140:	3340      	adds	r3, #64	@ 0x40
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e267      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d075      	beq.n	800529a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051ae:	4b88      	ldr	r3, [pc, #544]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d00c      	beq.n	80051d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ba:	4b85      	ldr	r3, [pc, #532]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d112      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c6:	4b82      	ldr	r3, [pc, #520]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051d2:	d10b      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	4b7e      	ldr	r3, [pc, #504]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d05b      	beq.n	8005298 <HAL_RCC_OscConfig+0x108>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d157      	bne.n	8005298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e242      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f4:	d106      	bne.n	8005204 <HAL_RCC_OscConfig+0x74>
 80051f6:	4b76      	ldr	r3, [pc, #472]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a75      	ldr	r2, [pc, #468]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xb0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0x98>
 800520e:	4b70      	ldr	r3, [pc, #448]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6f      	ldr	r2, [pc, #444]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b6d      	ldr	r3, [pc, #436]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6c      	ldr	r2, [pc, #432]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xb0>
 8005228:	4b69      	ldr	r3, [pc, #420]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a68      	ldr	r2, [pc, #416]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b66      	ldr	r3, [pc, #408]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a65      	ldr	r2, [pc, #404]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fc fcf4 	bl	8001c34 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005250:	f7fc fcf0 	bl	8001c34 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	@ 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e207      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b5b      	ldr	r3, [pc, #364]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xc0>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fc fce0 	bl	8001c34 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005278:	f7fc fcdc 	bl	8001c34 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	@ 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1f3      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528a:	4b51      	ldr	r3, [pc, #324]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0xe8>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d063      	beq.n	800536e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052a6:	4b4a      	ldr	r3, [pc, #296]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052b2:	4b47      	ldr	r3, [pc, #284]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d11c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052be:	4b44      	ldr	r3, [pc, #272]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d116      	bne.n	80052f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ca:	4b41      	ldr	r3, [pc, #260]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_RCC_OscConfig+0x152>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e1c7      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b3b      	ldr	r3, [pc, #236]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4937      	ldr	r1, [pc, #220]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f6:	e03a      	b.n	800536e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005300:	4b34      	ldr	r3, [pc, #208]	@ (80053d4 <HAL_RCC_OscConfig+0x244>)
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fc fc95 	bl	8001c34 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530e:	f7fc fc91 	bl	8001c34 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e1a8      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005320:	4b2b      	ldr	r3, [pc, #172]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532c:	4b28      	ldr	r3, [pc, #160]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4925      	ldr	r1, [pc, #148]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 800533c:	4313      	orrs	r3, r2
 800533e:	600b      	str	r3, [r1, #0]
 8005340:	e015      	b.n	800536e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005342:	4b24      	ldr	r3, [pc, #144]	@ (80053d4 <HAL_RCC_OscConfig+0x244>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fc fc74 	bl	8001c34 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005350:	f7fc fc70 	bl	8001c34 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e187      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005362:	4b1b      	ldr	r3, [pc, #108]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d036      	beq.n	80053e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005382:	4b15      	ldr	r3, [pc, #84]	@ (80053d8 <HAL_RCC_OscConfig+0x248>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fc fc54 	bl	8001c34 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005390:	f7fc fc50 	bl	8001c34 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e167      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <HAL_RCC_OscConfig+0x240>)
 80053a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x200>
 80053ae:	e01b      	b.n	80053e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <HAL_RCC_OscConfig+0x248>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b6:	f7fc fc3d 	bl	8001c34 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053bc:	e00e      	b.n	80053dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053be:	f7fc fc39 	bl	8001c34 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d907      	bls.n	80053dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e150      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
 80053d0:	40023800 	.word	0x40023800
 80053d4:	42470000 	.word	0x42470000
 80053d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053dc:	4b88      	ldr	r3, [pc, #544]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80053de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ea      	bne.n	80053be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8097 	beq.w	8005524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fa:	4b81      	ldr	r3, [pc, #516]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	4b7d      	ldr	r3, [pc, #500]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	4a7c      	ldr	r2, [pc, #496]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005414:	6413      	str	r3, [r2, #64]	@ 0x40
 8005416:	4b7a      	ldr	r3, [pc, #488]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005426:	4b77      	ldr	r3, [pc, #476]	@ (8005604 <HAL_RCC_OscConfig+0x474>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d118      	bne.n	8005464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005432:	4b74      	ldr	r3, [pc, #464]	@ (8005604 <HAL_RCC_OscConfig+0x474>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a73      	ldr	r2, [pc, #460]	@ (8005604 <HAL_RCC_OscConfig+0x474>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800543c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543e:	f7fc fbf9 	bl	8001c34 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fc fbf5 	bl	8001c34 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e10c      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005458:	4b6a      	ldr	r3, [pc, #424]	@ (8005604 <HAL_RCC_OscConfig+0x474>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d106      	bne.n	800547a <HAL_RCC_OscConfig+0x2ea>
 800546c:	4b64      	ldr	r3, [pc, #400]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	4a63      	ldr	r2, [pc, #396]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6713      	str	r3, [r2, #112]	@ 0x70
 8005478:	e01c      	b.n	80054b4 <HAL_RCC_OscConfig+0x324>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b05      	cmp	r3, #5
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x30c>
 8005482:	4b5f      	ldr	r3, [pc, #380]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	4a5e      	ldr	r2, [pc, #376]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6713      	str	r3, [r2, #112]	@ 0x70
 800548e:	4b5c      	ldr	r3, [pc, #368]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005492:	4a5b      	ldr	r2, [pc, #364]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	6713      	str	r3, [r2, #112]	@ 0x70
 800549a:	e00b      	b.n	80054b4 <HAL_RCC_OscConfig+0x324>
 800549c:	4b58      	ldr	r3, [pc, #352]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	4a57      	ldr	r2, [pc, #348]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a8:	4b55      	ldr	r3, [pc, #340]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ac:	4a54      	ldr	r2, [pc, #336]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80054ae:	f023 0304 	bic.w	r3, r3, #4
 80054b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fc fbba 	bl	8001c34 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fc fbb6 	bl	8001c34 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0cb      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054da:	4b49      	ldr	r3, [pc, #292]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ee      	beq.n	80054c4 <HAL_RCC_OscConfig+0x334>
 80054e6:	e014      	b.n	8005512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e8:	f7fc fba4 	bl	8001c34 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ee:	e00a      	b.n	8005506 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fc fba0 	bl	8001c34 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0b5      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005506:	4b3e      	ldr	r3, [pc, #248]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1ee      	bne.n	80054f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d105      	bne.n	8005524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005518:	4b39      	ldr	r3, [pc, #228]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	4a38      	ldr	r2, [pc, #224]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 800551e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005522:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80a1 	beq.w	8005670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800552e:	4b34      	ldr	r3, [pc, #208]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b08      	cmp	r3, #8
 8005538:	d05c      	beq.n	80055f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d141      	bne.n	80055c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005542:	4b31      	ldr	r3, [pc, #196]	@ (8005608 <HAL_RCC_OscConfig+0x478>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7fc fb74 	bl	8001c34 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005550:	f7fc fb70 	bl	8001c34 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e087      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005562:	4b27      	ldr	r3, [pc, #156]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	019b      	lsls	r3, r3, #6
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	3b01      	subs	r3, #1
 8005588:	041b      	lsls	r3, r3, #16
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	491b      	ldr	r1, [pc, #108]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005598:	4b1b      	ldr	r3, [pc, #108]	@ (8005608 <HAL_RCC_OscConfig+0x478>)
 800559a:	2201      	movs	r2, #1
 800559c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559e:	f7fc fb49 	bl	8001c34 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fc fb45 	bl	8001c34 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e05c      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b8:	4b11      	ldr	r3, [pc, #68]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCC_OscConfig+0x416>
 80055c4:	e054      	b.n	8005670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c6:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <HAL_RCC_OscConfig+0x478>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fc fb32 	bl	8001c34 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fc fb2e 	bl	8001c34 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e045      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <HAL_RCC_OscConfig+0x470>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x444>
 80055f2:	e03d      	b.n	8005670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e038      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
 8005600:	40023800 	.word	0x40023800
 8005604:	40007000 	.word	0x40007000
 8005608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800560c:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <HAL_RCC_OscConfig+0x4ec>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d028      	beq.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d121      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d11a      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005644:	4293      	cmp	r3, r2
 8005646:	d111      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	3b01      	subs	r3, #1
 8005656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d107      	bne.n	800566c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800

08005680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0cc      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005694:	4b68      	ldr	r3, [pc, #416]	@ (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d90c      	bls.n	80056bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b65      	ldr	r3, [pc, #404]	@ (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b63      	ldr	r3, [pc, #396]	@ (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0b8      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d020      	beq.n	800570a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056d4:	4b59      	ldr	r3, [pc, #356]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4a58      	ldr	r2, [pc, #352]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056ec:	4b53      	ldr	r3, [pc, #332]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a52      	ldr	r2, [pc, #328]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f8:	4b50      	ldr	r3, [pc, #320]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	494d      	ldr	r1, [pc, #308]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d044      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	4b47      	ldr	r3, [pc, #284]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d119      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e07f      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d003      	beq.n	800573e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800573a:	2b03      	cmp	r3, #3
 800573c:	d107      	bne.n	800574e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573e:	4b3f      	ldr	r3, [pc, #252]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e06f      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574e:	4b3b      	ldr	r3, [pc, #236]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e067      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800575e:	4b37      	ldr	r3, [pc, #220]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f023 0203 	bic.w	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4934      	ldr	r1, [pc, #208]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005770:	f7fc fa60 	bl	8001c34 <HAL_GetTick>
 8005774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005776:	e00a      	b.n	800578e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005778:	f7fc fa5c 	bl	8001c34 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e04f      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578e:	4b2b      	ldr	r3, [pc, #172]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 020c 	and.w	r2, r3, #12
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	429a      	cmp	r2, r3
 800579e:	d1eb      	bne.n	8005778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057a0:	4b25      	ldr	r3, [pc, #148]	@ (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d20c      	bcs.n	80057c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	4b22      	ldr	r3, [pc, #136]	@ (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b6:	4b20      	ldr	r3, [pc, #128]	@ (8005838 <HAL_RCC_ClockConfig+0x1b8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e032      	b.n	800582e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d4:	4b19      	ldr	r3, [pc, #100]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4916      	ldr	r1, [pc, #88]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f2:	4b12      	ldr	r3, [pc, #72]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	490e      	ldr	r1, [pc, #56]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005806:	f000 f821 	bl	800584c <HAL_RCC_GetSysClockFreq>
 800580a:	4602      	mov	r2, r0
 800580c:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	490a      	ldr	r1, [pc, #40]	@ (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 8005818:	5ccb      	ldrb	r3, [r1, r3]
 800581a:	fa22 f303 	lsr.w	r3, r2, r3
 800581e:	4a09      	ldr	r2, [pc, #36]	@ (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005822:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fc f9c0 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023c00 	.word	0x40023c00
 800583c:	40023800 	.word	0x40023800
 8005840:	0800c21c 	.word	0x0800c21c
 8005844:	2000000c 	.word	0x2000000c
 8005848:	20000010 	.word	0x20000010

0800584c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800584c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005850:	b090      	sub	sp, #64	@ 0x40
 8005852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005864:	4b59      	ldr	r3, [pc, #356]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 030c 	and.w	r3, r3, #12
 800586c:	2b08      	cmp	r3, #8
 800586e:	d00d      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x40>
 8005870:	2b08      	cmp	r3, #8
 8005872:	f200 80a1 	bhi.w	80059b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x34>
 800587a:	2b04      	cmp	r3, #4
 800587c:	d003      	beq.n	8005886 <HAL_RCC_GetSysClockFreq+0x3a>
 800587e:	e09b      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005880:	4b53      	ldr	r3, [pc, #332]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005882:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005884:	e09b      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005886:	4b53      	ldr	r3, [pc, #332]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005888:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800588a:	e098      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800588c:	4b4f      	ldr	r3, [pc, #316]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x180>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005896:	4b4d      	ldr	r3, [pc, #308]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d028      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a2:	4b4a      	ldr	r3, [pc, #296]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x180>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	2200      	movs	r2, #0
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058b4:	2100      	movs	r1, #0
 80058b6:	4b47      	ldr	r3, [pc, #284]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80058b8:	fb03 f201 	mul.w	r2, r3, r1
 80058bc:	2300      	movs	r3, #0
 80058be:	fb00 f303 	mul.w	r3, r0, r3
 80058c2:	4413      	add	r3, r2
 80058c4:	4a43      	ldr	r2, [pc, #268]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80058c6:	fba0 1202 	umull	r1, r2, r0, r2
 80058ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058cc:	460a      	mov	r2, r1
 80058ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80058d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d2:	4413      	add	r3, r2
 80058d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d8:	2200      	movs	r2, #0
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	61fa      	str	r2, [r7, #28]
 80058de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80058e6:	f7fa fccb 	bl	8000280 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4613      	mov	r3, r2
 80058f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058f2:	e053      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f4:	4b35      	ldr	r3, [pc, #212]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x180>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	2200      	movs	r2, #0
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	617a      	str	r2, [r7, #20]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005906:	f04f 0b00 	mov.w	fp, #0
 800590a:	4652      	mov	r2, sl
 800590c:	465b      	mov	r3, fp
 800590e:	f04f 0000 	mov.w	r0, #0
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	0159      	lsls	r1, r3, #5
 8005918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800591c:	0150      	lsls	r0, r2, #5
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	ebb2 080a 	subs.w	r8, r2, sl
 8005926:	eb63 090b 	sbc.w	r9, r3, fp
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005936:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800593a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800593e:	ebb2 0408 	subs.w	r4, r2, r8
 8005942:	eb63 0509 	sbc.w	r5, r3, r9
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	00eb      	lsls	r3, r5, #3
 8005950:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005954:	00e2      	lsls	r2, r4, #3
 8005956:	4614      	mov	r4, r2
 8005958:	461d      	mov	r5, r3
 800595a:	eb14 030a 	adds.w	r3, r4, sl
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	eb45 030b 	adc.w	r3, r5, fp
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005972:	4629      	mov	r1, r5
 8005974:	028b      	lsls	r3, r1, #10
 8005976:	4621      	mov	r1, r4
 8005978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800597c:	4621      	mov	r1, r4
 800597e:	028a      	lsls	r2, r1, #10
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005986:	2200      	movs	r2, #0
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	60fa      	str	r2, [r7, #12]
 800598c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005990:	f7fa fc76 	bl	8000280 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4613      	mov	r3, r2
 800599a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x180>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	3301      	adds	r3, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80059ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059b6:	e002      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80059ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3740      	adds	r7, #64	@ 0x40
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	017d7840 	.word	0x017d7840

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	@ (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff0 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	@ (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0800c22c 	.word	0x0800c22c

08005a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e041      	b.n	8005aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb ff48 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f000 fc3c 	bl	80062d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e044      	b.n	8005b5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1e      	ldr	r2, [pc, #120]	@ (8005b68 <HAL_TIM_Base_Start_IT+0xb0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d018      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x6c>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afa:	d013      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x6c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <HAL_TIM_Base_Start_IT+0xb4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00e      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x6c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a19      	ldr	r2, [pc, #100]	@ (8005b70 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d009      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x6c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a17      	ldr	r2, [pc, #92]	@ (8005b74 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x6c>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	@ (8005b78 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d111      	bne.n	8005b48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b06      	cmp	r3, #6
 8005b34:	d010      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	e007      	b.n	8005b58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40014000 	.word	0x40014000

08005b7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e041      	b.n	8005c12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f839 	bl	8005c1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 fb8a 	bl	80062d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <HAL_TIM_PWM_Start+0x24>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e022      	b.n	8005c9a <HAL_TIM_PWM_Start+0x6a>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d109      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x3e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	bf14      	ite	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	2300      	moveq	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	e015      	b.n	8005c9a <HAL_TIM_PWM_Start+0x6a>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d109      	bne.n	8005c88 <HAL_TIM_PWM_Start+0x58>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	e008      	b.n	8005c9a <HAL_TIM_PWM_Start+0x6a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	bf14      	ite	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	2300      	moveq	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e068      	b.n	8005d74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d104      	bne.n	8005cb2 <HAL_TIM_PWM_Start+0x82>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb0:	e013      	b.n	8005cda <HAL_TIM_PWM_Start+0xaa>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0x92>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc0:	e00b      	b.n	8005cda <HAL_TIM_PWM_Start+0xaa>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0xa2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cd0:	e003      	b.n	8005cda <HAL_TIM_PWM_Start+0xaa>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fda2 	bl	800682c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a23      	ldr	r2, [pc, #140]	@ (8005d7c <HAL_TIM_PWM_Start+0x14c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d107      	bne.n	8005d02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <HAL_TIM_PWM_Start+0x14c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_TIM_PWM_Start+0x10e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d14:	d013      	beq.n	8005d3e <HAL_TIM_PWM_Start+0x10e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a19      	ldr	r2, [pc, #100]	@ (8005d80 <HAL_TIM_PWM_Start+0x150>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_TIM_PWM_Start+0x10e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a17      	ldr	r2, [pc, #92]	@ (8005d84 <HAL_TIM_PWM_Start+0x154>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_TIM_PWM_Start+0x10e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a16      	ldr	r2, [pc, #88]	@ (8005d88 <HAL_TIM_PWM_Start+0x158>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_TIM_PWM_Start+0x10e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a14      	ldr	r2, [pc, #80]	@ (8005d8c <HAL_TIM_PWM_Start+0x15c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d111      	bne.n	8005d62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	d010      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d60:	e007      	b.n	8005d72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40014000 	.word	0x40014000

08005d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d020      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01b      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0202 	mvn.w	r2, #2
 8005dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa5b 	bl	8006296 <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa4d 	bl	8006282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fa5e 	bl	80062aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0204 	mvn.w	r2, #4
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa35 	bl	8006296 <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa27 	bl	8006282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa38 	bl	80062aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d020      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01b      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0208 	mvn.w	r2, #8
 8005e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2204      	movs	r2, #4
 8005e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa0f 	bl	8006296 <HAL_TIM_IC_CaptureCallback>
 8005e78:	e005      	b.n	8005e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa01 	bl	8006282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fa12 	bl	80062aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d020      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01b      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0210 	mvn.w	r2, #16
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2208      	movs	r2, #8
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9e9 	bl	8006296 <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9db 	bl	8006282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f9ec 	bl	80062aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00c      	beq.n	8005efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0201 	mvn.w	r2, #1
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fa fe04 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fd24 	bl	8006968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00c      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9bd 	bl	80062be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0220 	mvn.w	r2, #32
 8005f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fcf6 	bl	8006954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0ae      	b.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b0c      	cmp	r3, #12
 8005f9a:	f200 809f 	bhi.w	80060dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fd9 	.word	0x08005fd9
 8005fa8:	080060dd 	.word	0x080060dd
 8005fac:	080060dd 	.word	0x080060dd
 8005fb0:	080060dd 	.word	0x080060dd
 8005fb4:	08006019 	.word	0x08006019
 8005fb8:	080060dd 	.word	0x080060dd
 8005fbc:	080060dd 	.word	0x080060dd
 8005fc0:	080060dd 	.word	0x080060dd
 8005fc4:	0800605b 	.word	0x0800605b
 8005fc8:	080060dd 	.word	0x080060dd
 8005fcc:	080060dd 	.word	0x080060dd
 8005fd0:	080060dd 	.word	0x080060dd
 8005fd4:	0800609b 	.word	0x0800609b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f9fe 	bl	80063e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0208 	orr.w	r2, r2, #8
 8005ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0204 	bic.w	r2, r2, #4
 8006002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6999      	ldr	r1, [r3, #24]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	619a      	str	r2, [r3, #24]
      break;
 8006016:	e064      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fa44 	bl	80064ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6999      	ldr	r1, [r3, #24]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	619a      	str	r2, [r3, #24]
      break;
 8006058:	e043      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fa8f 	bl	8006584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0208 	orr.w	r2, r2, #8
 8006074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0204 	bic.w	r2, r2, #4
 8006084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69d9      	ldr	r1, [r3, #28]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	61da      	str	r2, [r3, #28]
      break;
 8006098:	e023      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fad9 	bl	8006658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69d9      	ldr	r1, [r3, #28]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	021a      	lsls	r2, r3, #8
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	61da      	str	r2, [r3, #28]
      break;
 80060da:	e002      	b.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	75fb      	strb	r3, [r7, #23]
      break;
 80060e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIM_ConfigClockSource+0x1c>
 800610c:	2302      	movs	r3, #2
 800610e:	e0b4      	b.n	800627a <HAL_TIM_ConfigClockSource+0x186>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006148:	d03e      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0xd4>
 800614a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800614e:	f200 8087 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	f000 8086 	beq.w	8006266 <HAL_TIM_ConfigClockSource+0x172>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	d87f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006160:	2b70      	cmp	r3, #112	@ 0x70
 8006162:	d01a      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xa6>
 8006164:	2b70      	cmp	r3, #112	@ 0x70
 8006166:	d87b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b60      	cmp	r3, #96	@ 0x60
 800616a:	d050      	beq.n	800620e <HAL_TIM_ConfigClockSource+0x11a>
 800616c:	2b60      	cmp	r3, #96	@ 0x60
 800616e:	d877      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b50      	cmp	r3, #80	@ 0x50
 8006172:	d03c      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0xfa>
 8006174:	2b50      	cmp	r3, #80	@ 0x50
 8006176:	d873      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d058      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x13a>
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d86f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b30      	cmp	r3, #48	@ 0x30
 8006182:	d064      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 8006184:	2b30      	cmp	r3, #48	@ 0x30
 8006186:	d86b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b20      	cmp	r3, #32
 800618a:	d060      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d867      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d05c      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b10      	cmp	r3, #16
 8006196:	d05a      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15a>
 8006198:	e062      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	f000 fb1f 	bl	80067ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	609a      	str	r2, [r3, #8]
      break;
 80061c6:	e04f      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	f000 fb08 	bl	80067ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ea:	609a      	str	r2, [r3, #8]
      break;
 80061ec:	e03c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	461a      	mov	r2, r3
 80061fc:	f000 fa7c 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2150      	movs	r1, #80	@ 0x50
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fad5 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 800620c:	e02c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800621a:	461a      	mov	r2, r3
 800621c:	f000 fa9b 	bl	8006756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2160      	movs	r1, #96	@ 0x60
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fac5 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 800622c:	e01c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 fa5c 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2140      	movs	r1, #64	@ 0x40
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fab5 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 800624c:	e00c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f000 faac 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 800625e:	e003      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
      break;
 8006264:	e000      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a37      	ldr	r2, [pc, #220]	@ (80063c4 <TIM_Base_SetConfig+0xf0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00f      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f2:	d00b      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a34      	ldr	r2, [pc, #208]	@ (80063c8 <TIM_Base_SetConfig+0xf4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a33      	ldr	r2, [pc, #204]	@ (80063cc <TIM_Base_SetConfig+0xf8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a32      	ldr	r2, [pc, #200]	@ (80063d0 <TIM_Base_SetConfig+0xfc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d108      	bne.n	800631e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a28      	ldr	r2, [pc, #160]	@ (80063c4 <TIM_Base_SetConfig+0xf0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01b      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632c:	d017      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a25      	ldr	r2, [pc, #148]	@ (80063c8 <TIM_Base_SetConfig+0xf4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a24      	ldr	r2, [pc, #144]	@ (80063cc <TIM_Base_SetConfig+0xf8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00f      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a23      	ldr	r2, [pc, #140]	@ (80063d0 <TIM_Base_SetConfig+0xfc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <TIM_Base_SetConfig+0x100>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <TIM_Base_SetConfig+0x104>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a20      	ldr	r2, [pc, #128]	@ (80063dc <TIM_Base_SetConfig+0x108>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d108      	bne.n	8006370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a0c      	ldr	r2, [pc, #48]	@ (80063c4 <TIM_Base_SetConfig+0xf0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d103      	bne.n	800639e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f043 0204 	orr.w	r2, r3, #4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	601a      	str	r2, [r3, #0]
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40014400 	.word	0x40014400
 80063dc:	40014800 	.word	0x40014800

080063e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f023 0201 	bic.w	r2, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0302 	bic.w	r3, r3, #2
 8006428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a1c      	ldr	r2, [pc, #112]	@ (80064a8 <TIM_OC1_SetConfig+0xc8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d10c      	bne.n	8006456 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0308 	bic.w	r3, r3, #8
 8006442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 0304 	bic.w	r3, r3, #4
 8006454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a13      	ldr	r2, [pc, #76]	@ (80064a8 <TIM_OC1_SetConfig+0xc8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d111      	bne.n	8006482 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40010000 	.word	0x40010000

080064ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	f023 0210 	bic.w	r2, r3, #16
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0320 	bic.w	r3, r3, #32
 80064f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1e      	ldr	r2, [pc, #120]	@ (8006580 <TIM_OC2_SetConfig+0xd4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10d      	bne.n	8006528 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <TIM_OC2_SetConfig+0xd4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d113      	bne.n	8006558 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800653e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000

08006584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006654 <TIM_OC3_SetConfig+0xd0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10d      	bne.n	80065fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a14      	ldr	r2, [pc, #80]	@ (8006654 <TIM_OC3_SetConfig+0xd0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d113      	bne.n	800662e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800660c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	621a      	str	r2, [r3, #32]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40010000 	.word	0x40010000

08006658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	031b      	lsls	r3, r3, #12
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a10      	ldr	r2, [pc, #64]	@ (80066f4 <TIM_OC4_SetConfig+0x9c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d109      	bne.n	80066cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	019b      	lsls	r3, r3, #6
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000

080066f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0201 	bic.w	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 030a 	bic.w	r3, r3, #10
 8006734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006756:	b480      	push	{r7}
 8006758:	b087      	sub	sp, #28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f023 0210 	bic.w	r2, r3, #16
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	031b      	lsls	r3, r3, #12
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006792:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f043 0307 	orr.w	r3, r3, #7
 80067d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	609a      	str	r2, [r3, #8]
}
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	021a      	lsls	r2, r3, #8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	431a      	orrs	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4313      	orrs	r3, r2
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	609a      	str	r2, [r3, #8]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2201      	movs	r2, #1
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1a      	ldr	r2, [r3, #32]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	43db      	mvns	r3, r3
 800684e:	401a      	ands	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a1a      	ldr	r2, [r3, #32]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	fa01 f303 	lsl.w	r3, r1, r3
 8006864:	431a      	orrs	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	621a      	str	r2, [r3, #32]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800688c:	2302      	movs	r3, #2
 800688e:	e050      	b.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068dc:	d013      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a18      	ldr	r2, [pc, #96]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a16      	ldr	r2, [pc, #88]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a15      	ldr	r2, [pc, #84]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a13      	ldr	r2, [pc, #76]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d10c      	bne.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800690c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	4313      	orrs	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40014000 	.word	0x40014000

08006954 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800697c:	b084      	sub	sp, #16
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	f107 001c 	add.w	r0, r7, #28
 800698a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800698e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006992:	2b01      	cmp	r3, #1
 8006994:	d123      	bne.n	80069de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80069aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d105      	bne.n	80069d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fae8 	bl	8007fa8 <USB_CoreReset>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	e01b      	b.n	8006a16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fadc 	bl	8007fa8 <USB_CoreReset>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a08:	e005      	b.n	8006a16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a16:	7fbb      	ldrb	r3, [r7, #30]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d10b      	bne.n	8006a34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f043 0206 	orr.w	r2, r3, #6
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a40:	b004      	add	sp, #16
 8006a42:	4770      	bx	lr

08006a44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d165      	bne.n	8006b24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a41      	ldr	r2, [pc, #260]	@ (8006b60 <USB_SetTurnaroundTime+0x11c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d906      	bls.n	8006a6e <USB_SetTurnaroundTime+0x2a>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4a40      	ldr	r2, [pc, #256]	@ (8006b64 <USB_SetTurnaroundTime+0x120>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d202      	bcs.n	8006a6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a68:	230f      	movs	r3, #15
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	e062      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4a3c      	ldr	r2, [pc, #240]	@ (8006b64 <USB_SetTurnaroundTime+0x120>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d306      	bcc.n	8006a84 <USB_SetTurnaroundTime+0x40>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4a3b      	ldr	r2, [pc, #236]	@ (8006b68 <USB_SetTurnaroundTime+0x124>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d202      	bcs.n	8006a84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a7e:	230e      	movs	r3, #14
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e057      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4a38      	ldr	r2, [pc, #224]	@ (8006b68 <USB_SetTurnaroundTime+0x124>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d306      	bcc.n	8006a9a <USB_SetTurnaroundTime+0x56>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4a37      	ldr	r2, [pc, #220]	@ (8006b6c <USB_SetTurnaroundTime+0x128>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d202      	bcs.n	8006a9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a94:	230d      	movs	r3, #13
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e04c      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4a33      	ldr	r2, [pc, #204]	@ (8006b6c <USB_SetTurnaroundTime+0x128>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d306      	bcc.n	8006ab0 <USB_SetTurnaroundTime+0x6c>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4a32      	ldr	r2, [pc, #200]	@ (8006b70 <USB_SetTurnaroundTime+0x12c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d802      	bhi.n	8006ab0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006aaa:	230c      	movs	r3, #12
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	e041      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8006b70 <USB_SetTurnaroundTime+0x12c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d906      	bls.n	8006ac6 <USB_SetTurnaroundTime+0x82>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a2e      	ldr	r2, [pc, #184]	@ (8006b74 <USB_SetTurnaroundTime+0x130>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d802      	bhi.n	8006ac6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ac0:	230b      	movs	r3, #11
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	e036      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8006b74 <USB_SetTurnaroundTime+0x130>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d906      	bls.n	8006adc <USB_SetTurnaroundTime+0x98>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4a29      	ldr	r2, [pc, #164]	@ (8006b78 <USB_SetTurnaroundTime+0x134>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d802      	bhi.n	8006adc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ad6:	230a      	movs	r3, #10
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e02b      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a26      	ldr	r2, [pc, #152]	@ (8006b78 <USB_SetTurnaroundTime+0x134>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d906      	bls.n	8006af2 <USB_SetTurnaroundTime+0xae>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a25      	ldr	r2, [pc, #148]	@ (8006b7c <USB_SetTurnaroundTime+0x138>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d202      	bcs.n	8006af2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006aec:	2309      	movs	r3, #9
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e020      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4a21      	ldr	r2, [pc, #132]	@ (8006b7c <USB_SetTurnaroundTime+0x138>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d306      	bcc.n	8006b08 <USB_SetTurnaroundTime+0xc4>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a20      	ldr	r2, [pc, #128]	@ (8006b80 <USB_SetTurnaroundTime+0x13c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d802      	bhi.n	8006b08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b02:	2308      	movs	r3, #8
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	e015      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b80 <USB_SetTurnaroundTime+0x13c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d906      	bls.n	8006b1e <USB_SetTurnaroundTime+0xda>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a1c      	ldr	r2, [pc, #112]	@ (8006b84 <USB_SetTurnaroundTime+0x140>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d202      	bcs.n	8006b1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b18:	2307      	movs	r3, #7
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e00a      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b1e:	2306      	movs	r3, #6
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	e007      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d102      	bne.n	8006b30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b2a:	2309      	movs	r3, #9
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e001      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b30:	2309      	movs	r3, #9
 8006b32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	029b      	lsls	r3, r3, #10
 8006b48:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	00d8acbf 	.word	0x00d8acbf
 8006b64:	00e4e1c0 	.word	0x00e4e1c0
 8006b68:	00f42400 	.word	0x00f42400
 8006b6c:	01067380 	.word	0x01067380
 8006b70:	011a499f 	.word	0x011a499f
 8006b74:	01312cff 	.word	0x01312cff
 8006b78:	014ca43f 	.word	0x014ca43f
 8006b7c:	016e3600 	.word	0x016e3600
 8006b80:	01a6ab1f 	.word	0x01a6ab1f
 8006b84:	01e84800 	.word	0x01e84800

08006b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f043 0201 	orr.w	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d115      	bne.n	8006c1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bfa:	200a      	movs	r0, #10
 8006bfc:	f7fb f826 	bl	8001c4c <HAL_Delay>
      ms += 10U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	330a      	adds	r3, #10
 8006c04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f93f 	bl	8007e8a <USB_GetMode>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d01e      	beq.n	8006c50 <USB_SetCurrentMode+0x84>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c16:	d9f0      	bls.n	8006bfa <USB_SetCurrentMode+0x2e>
 8006c18:	e01a      	b.n	8006c50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d115      	bne.n	8006c4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c2c:	200a      	movs	r0, #10
 8006c2e:	f7fb f80d 	bl	8001c4c <HAL_Delay>
      ms += 10U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	330a      	adds	r3, #10
 8006c36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f926 	bl	8007e8a <USB_GetMode>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <USB_SetCurrentMode+0x84>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c48:	d9f0      	bls.n	8006c2c <USB_SetCurrentMode+0x60>
 8006c4a:	e001      	b.n	8006c50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e005      	b.n	8006c5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c54:	d101      	bne.n	8006c5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c64:	b084      	sub	sp, #16
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	e009      	b.n	8006c98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3340      	adds	r3, #64	@ 0x40
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	3301      	adds	r3, #1
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b0e      	cmp	r3, #14
 8006c9c:	d9f2      	bls.n	8006c84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d11c      	bne.n	8006ce0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cb4:	f043 0302 	orr.w	r3, r3, #2
 8006cb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cde:	e00b      	b.n	8006cf8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2300      	movs	r3, #0
 8006d02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10d      	bne.n	8006d28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f968 	bl	8006fec <USB_SetDevSpeed>
 8006d1c:	e008      	b.n	8006d30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d1e:	2101      	movs	r1, #1
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f963 	bl	8006fec <USB_SetDevSpeed>
 8006d26:	e003      	b.n	8006d30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d28:	2103      	movs	r1, #3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f95e 	bl	8006fec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d30:	2110      	movs	r1, #16
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8fa 	bl	8006f2c <USB_FlushTxFifo>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f924 	bl	8006f90 <USB_FlushRxFifo>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d64:	461a      	mov	r2, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d70:	461a      	mov	r2, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	e043      	b.n	8006e04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d92:	d118      	bne.n	8006dc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da6:	461a      	mov	r2, r3
 8006da8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e013      	b.n	8006dd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	e008      	b.n	8006dd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de4:	461a      	mov	r2, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df6:	461a      	mov	r2, r3
 8006df8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006dfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3301      	adds	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e08:	461a      	mov	r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d3b5      	bcc.n	8006d7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e043      	b.n	8006e9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e2c:	d118      	bne.n	8006e60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e40:	461a      	mov	r2, r3
 8006e42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	e013      	b.n	8006e72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e56:	461a      	mov	r2, r3
 8006e58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e008      	b.n	8006e72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2300      	movs	r3, #0
 8006e82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e90:	461a      	mov	r2, r3
 8006e92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d3b5      	bcc.n	8006e16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ebc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006eca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d105      	bne.n	8006ee0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f043 0210 	orr.w	r2, r3, #16
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	4b10      	ldr	r3, [pc, #64]	@ (8006f28 <USB_DevInit+0x2c4>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006eec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f043 0208 	orr.w	r2, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d107      	bne.n	8006f18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f10:	f043 0304 	orr.w	r3, r3, #4
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f24:	b004      	add	sp, #16
 8006f26:	4770      	bx	lr
 8006f28:	803c3800 	.word	0x803c3800

08006f2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f46:	d901      	bls.n	8006f4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e01b      	b.n	8006f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	daf2      	bge.n	8006f3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	019b      	lsls	r3, r3, #6
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f70:	d901      	bls.n	8006f76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e006      	b.n	8006f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d0f0      	beq.n	8006f64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fa8:	d901      	bls.n	8006fae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e018      	b.n	8006fe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	daf2      	bge.n	8006f9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2210      	movs	r2, #16
 8006fbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fcc:	d901      	bls.n	8006fd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e006      	b.n	8006fe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0310 	and.w	r3, r3, #16
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d0f0      	beq.n	8006fc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800700c:	4313      	orrs	r3, r2
 800700e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0306 	and.w	r3, r3, #6
 8007036:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800703e:	2300      	movs	r3, #0
 8007040:	75fb      	strb	r3, [r7, #23]
 8007042:	e00a      	b.n	800705a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d002      	beq.n	8007050 <USB_GetDevSpeed+0x32>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b06      	cmp	r3, #6
 800704e:	d102      	bne.n	8007056 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007050:	2302      	movs	r3, #2
 8007052:	75fb      	strb	r3, [r7, #23]
 8007054:	e001      	b.n	800705a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007056:	230f      	movs	r3, #15
 8007058:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
}
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d13a      	bne.n	80070fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	68f9      	ldr	r1, [r7, #12]
 800709e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a2:	4313      	orrs	r3, r2
 80070a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d155      	bne.n	8007168 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	791b      	ldrb	r3, [r3, #4]
 80070d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	059b      	lsls	r3, r3, #22
 80070de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070e0:	4313      	orrs	r3, r2
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	e036      	b.n	8007168 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007100:	69da      	ldr	r2, [r3, #28]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007118:	4313      	orrs	r3, r2
 800711a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d11a      	bne.n	8007168 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800714e:	430b      	orrs	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800715e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007166:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d161      	bne.n	8007258 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071aa:	d11f      	bne.n	80071ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007202:	b29b      	uxth	r3, r3
 8007204:	43db      	mvns	r3, r3
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800720c:	4013      	ands	r3, r2
 800720e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	2101      	movs	r1, #1
 8007222:	fa01 f303 	lsl.w	r3, r1, r3
 8007226:	b29b      	uxth	r3, r3
 8007228:	43db      	mvns	r3, r3
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007230:	4013      	ands	r3, r2
 8007232:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	0159      	lsls	r1, r3, #5
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	440b      	add	r3, r1
 800724a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724e:	4619      	mov	r1, r3
 8007250:	4b35      	ldr	r3, [pc, #212]	@ (8007328 <USB_DeactivateEndpoint+0x1b0>)
 8007252:	4013      	ands	r3, r2
 8007254:	600b      	str	r3, [r1, #0]
 8007256:	e060      	b.n	800731a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800726a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800726e:	d11f      	bne.n	80072b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800728a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800728e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	2101      	movs	r1, #1
 80072c2:	fa01 f303 	lsl.w	r3, r1, r3
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	43db      	mvns	r3, r3
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072d0:	4013      	ands	r3, r2
 80072d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	2101      	movs	r1, #1
 80072e6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	43db      	mvns	r3, r3
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072f4:	4013      	ands	r3, r2
 80072f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	0159      	lsls	r1, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	440b      	add	r3, r1
 800730e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007312:	4619      	mov	r1, r3
 8007314:	4b05      	ldr	r3, [pc, #20]	@ (800732c <USB_DeactivateEndpoint+0x1b4>)
 8007316:	4013      	ands	r3, r2
 8007318:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	ec337800 	.word	0xec337800
 800732c:	eff37800 	.word	0xeff37800

08007330 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	@ 0x28
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b01      	cmp	r3, #1
 800734e:	f040 817f 	bne.w	8007650 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d132      	bne.n	80073c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	440a      	add	r2, r1
 8007370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007374:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007378:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800737c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007398:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800739c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b8:	0cdb      	lsrs	r3, r3, #19
 80073ba:	04db      	lsls	r3, r3, #19
 80073bc:	6113      	str	r3, [r2, #16]
 80073be:	e097      	b.n	80074f0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073da:	0cdb      	lsrs	r3, r3, #19
 80073dc:	04db      	lsls	r3, r3, #19
 80073de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80073fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007402:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11a      	bne.n	8007440 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	429a      	cmp	r2, r3
 8007414:	d903      	bls.n	800741e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	440a      	add	r2, r1
 8007434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007438:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800743c:	6113      	str	r3, [r2, #16]
 800743e:	e044      	b.n	80074ca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	4413      	add	r3, r2
 800744a:	1e5a      	subs	r2, r3, #1
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	8afb      	ldrh	r3, [r7, #22]
 8007466:	04d9      	lsls	r1, r3, #19
 8007468:	4ba4      	ldr	r3, [pc, #656]	@ (80076fc <USB_EPStartXfer+0x3cc>)
 800746a:	400b      	ands	r3, r1
 800746c:	69b9      	ldr	r1, [r7, #24]
 800746e:	0148      	lsls	r0, r1, #5
 8007470:	69f9      	ldr	r1, [r7, #28]
 8007472:	4401      	add	r1, r0
 8007474:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007478:	4313      	orrs	r3, r2
 800747a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	791b      	ldrb	r3, [r3, #4]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d122      	bne.n	80074ca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80074a2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	8afb      	ldrh	r3, [r7, #22]
 80074b4:	075b      	lsls	r3, r3, #29
 80074b6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80074ba:	69b9      	ldr	r1, [r7, #24]
 80074bc:	0148      	lsls	r0, r1, #5
 80074be:	69f9      	ldr	r1, [r7, #28]
 80074c0:	4401      	add	r1, r0
 80074c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074c6:	4313      	orrs	r3, r2
 80074c8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	0148      	lsls	r0, r1, #5
 80074e4:	69f9      	ldr	r1, [r7, #28]
 80074e6:	4401      	add	r1, r0
 80074e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074ec:	4313      	orrs	r3, r2
 80074ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d14b      	bne.n	800758e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d009      	beq.n	8007512 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750a:	461a      	mov	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	791b      	ldrb	r3, [r3, #4]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d128      	bne.n	800756c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007526:	2b00      	cmp	r3, #0
 8007528:	d110      	bne.n	800754c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	440a      	add	r2, r1
 8007540:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007544:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	e00f      	b.n	800756c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800756a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007586:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e166      	b.n	800785c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80075ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	791b      	ldrb	r3, [r3, #4]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d015      	beq.n	80075e2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 814e 	beq.w	800785c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	2101      	movs	r1, #1
 80075d2:	fa01 f303 	lsl.w	r3, r1, r3
 80075d6:	69f9      	ldr	r1, [r7, #28]
 80075d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075dc:	4313      	orrs	r3, r2
 80075de:	634b      	str	r3, [r1, #52]	@ 0x34
 80075e0:	e13c      	b.n	800785c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d110      	bne.n	8007614 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800760c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e00f      	b.n	8007634 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800762e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007632:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	68d9      	ldr	r1, [r3, #12]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	b298      	uxth	r0, r3
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4603      	mov	r3, r0
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f9b9 	bl	80079c0 <USB_WritePacket>
 800764e:	e105      	b.n	800785c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800766a:	0cdb      	lsrs	r3, r3, #19
 800766c:	04db      	lsls	r3, r3, #19
 800766e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800768a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800768e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007692:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d132      	bne.n	8007700 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c8:	69b9      	ldr	r1, [r7, #24]
 80076ca:	0148      	lsls	r0, r1, #5
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	4401      	add	r1, r0
 80076d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076d4:	4313      	orrs	r3, r2
 80076d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076f6:	6113      	str	r3, [r2, #16]
 80076f8:	e062      	b.n	80077c0 <USB_EPStartXfer+0x490>
 80076fa:	bf00      	nop
 80076fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d123      	bne.n	8007750 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007714:	691a      	ldr	r2, [r3, #16]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800771e:	69b9      	ldr	r1, [r7, #24]
 8007720:	0148      	lsls	r0, r1, #5
 8007722:	69f9      	ldr	r1, [r7, #28]
 8007724:	4401      	add	r1, r0
 8007726:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800772a:	4313      	orrs	r3, r2
 800772c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007748:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800774c:	6113      	str	r3, [r2, #16]
 800774e:	e037      	b.n	80077c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	4413      	add	r3, r2
 800775a:	1e5a      	subs	r2, r3, #1
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	8afa      	ldrh	r2, [r7, #22]
 800776c:	fb03 f202 	mul.w	r2, r3, r2
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	8afb      	ldrh	r3, [r7, #22]
 8007784:	04d9      	lsls	r1, r3, #19
 8007786:	4b38      	ldr	r3, [pc, #224]	@ (8007868 <USB_EPStartXfer+0x538>)
 8007788:	400b      	ands	r3, r1
 800778a:	69b9      	ldr	r1, [r7, #24]
 800778c:	0148      	lsls	r0, r1, #5
 800778e:	69f9      	ldr	r1, [r7, #28]
 8007790:	4401      	add	r1, r0
 8007792:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007796:	4313      	orrs	r3, r2
 8007798:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b0:	69b9      	ldr	r1, [r7, #24]
 80077b2:	0148      	lsls	r0, r1, #5
 80077b4:	69f9      	ldr	r1, [r7, #28]
 80077b6:	4401      	add	r1, r0
 80077b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077bc:	4313      	orrs	r3, r2
 80077be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d10d      	bne.n	80077e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	68d9      	ldr	r1, [r3, #12]
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077de:	460a      	mov	r2, r1
 80077e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	791b      	ldrb	r3, [r3, #4]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d128      	bne.n	800783c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d110      	bne.n	800781c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	0151      	lsls	r1, r2, #5
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	440a      	add	r2, r1
 8007810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007814:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	e00f      	b.n	800783c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800783a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007856:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800785a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	1ff80000 	.word	0x1ff80000

0800786c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d14a      	bne.n	8007920 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800789e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078a2:	f040 8086 	bne.w	80079b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	7812      	ldrb	r2, [r2, #0]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3301      	adds	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d902      	bls.n	8007904 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	75fb      	strb	r3, [r7, #23]
          break;
 8007902:	e056      	b.n	80079b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800791c:	d0e7      	beq.n	80078ee <USB_EPStopXfer+0x82>
 800791e:	e048      	b.n	80079b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007938:	d13b      	bne.n	80079b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007958:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800795c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800797c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007980:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800798e:	4293      	cmp	r3, r2
 8007990:	d902      	bls.n	8007998 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	75fb      	strb	r3, [r7, #23]
          break;
 8007996:	e00c      	b.n	80079b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b0:	d0e7      	beq.n	8007982 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	@ 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4611      	mov	r1, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	460b      	mov	r3, r1
 80079d0:	71fb      	strb	r3, [r7, #7]
 80079d2:	4613      	mov	r3, r2
 80079d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d123      	bne.n	8007a2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079e6:	88bb      	ldrh	r3, [r7, #4]
 80079e8:	3303      	adds	r3, #3
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e018      	b.n	8007a26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	031a      	lsls	r2, r3, #12
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a00:	461a      	mov	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	3301      	adds	r3, #1
 8007a18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d3e2      	bcc.n	80079f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3724      	adds	r7, #36	@ 0x24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b08b      	sub	sp, #44	@ 0x2c
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	089b      	lsrs	r3, r3, #2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a5a:	88fb      	ldrh	r3, [r7, #6]
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a62:	2300      	movs	r3, #0
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	e014      	b.n	8007a92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	3301      	adds	r3, #1
 8007a78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	3301      	adds	r3, #1
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	3301      	adds	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	623b      	str	r3, [r7, #32]
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d3e6      	bcc.n	8007a68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a9a:	8bfb      	ldrh	r3, [r7, #30]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01e      	beq.n	8007ade <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f107 0310 	add.w	r3, r7, #16
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	623b      	str	r3, [r7, #32]
      pDest++;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ace:	3301      	adds	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007ad2:	8bfb      	ldrh	r3, [r7, #30]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ad8:	8bfb      	ldrh	r3, [r7, #30]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1ea      	bne.n	8007ab4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	372c      	adds	r7, #44	@ 0x2c
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d12c      	bne.n	8007b62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	db12      	blt.n	8007b40 <USB_EPSetStall+0x54>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00f      	beq.n	8007b40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e02b      	b.n	8007bba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	db12      	blt.n	8007b9a <USB_EPSetStall+0xae>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00f      	beq.n	8007b9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d128      	bne.n	8007c36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	791b      	ldrb	r3, [r3, #4]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d003      	beq.n	8007c14 <USB_EPClearStall+0x4c>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	791b      	ldrb	r3, [r3, #4]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d138      	bne.n	8007c86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	e027      	b.n	8007c86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	0151      	lsls	r1, r2, #5
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	440a      	add	r2, r1
 8007c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	791b      	ldrb	r3, [r3, #4]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d003      	beq.n	8007c66 <USB_EPClearStall+0x9e>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	791b      	ldrb	r3, [r3, #4]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d10f      	bne.n	8007c86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cb2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007cb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007cc8:	68f9      	ldr	r1, [r7, #12]
 8007cca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cfa:	f023 0303 	bic.w	r3, r3, #3
 8007cfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d0e:	f023 0302 	bic.w	r3, r3, #2
 8007d12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d50:	f043 0302 	orr.w	r3, r3, #2
 8007d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	4013      	ands	r3, r2
 8007dac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	0c1b      	lsrs	r3, r3, #16
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	b29b      	uxth	r3, r3
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e20:	68bb      	ldr	r3, [r7, #8]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5e:	01db      	lsls	r3, r3, #7
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	f003 0301 	and.w	r3, r3, #1
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ec0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007ec4:	f023 0307 	bic.w	r3, r3, #7
 8007ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	333c      	adds	r3, #60	@ 0x3c
 8007f02:	3304      	adds	r3, #4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	4a26      	ldr	r2, [pc, #152]	@ (8007fa4 <USB_EP0_OutStart+0xb8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d90a      	bls.n	8007f26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f20:	d101      	bne.n	8007f26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e037      	b.n	8007f96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f54:	f043 0318 	orr.w	r3, r3, #24
 8007f58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f68:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007f6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d10f      	bne.n	8007f94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f8e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007f92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	4f54300a 	.word	0x4f54300a

08007fa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fc0:	d901      	bls.n	8007fc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e022      	b.n	800800c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	daf2      	bge.n	8007fb4 <USB_CoreReset+0xc>

  count = 10U;
 8007fce:	230a      	movs	r3, #10
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007fd2:	e002      	b.n	8007fda <USB_CoreReset+0x32>
  {
    count--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1f9      	bne.n	8007fd4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f043 0201 	orr.w	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ff8:	d901      	bls.n	8007ffe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e006      	b.n	800800c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b01      	cmp	r3, #1
 8008008:	d0f0      	beq.n	8007fec <USB_CoreReset+0x44>

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008024:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008028:	f002 fd20 	bl	800aa6c <USBD_static_malloc>
 800802c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d109      	bne.n	8008048 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	32b0      	adds	r2, #176	@ 0xb0
 800803e:	2100      	movs	r1, #0
 8008040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008044:	2302      	movs	r3, #2
 8008046:	e0d4      	b.n	80081f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008048:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800804c:	2100      	movs	r1, #0
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f002 fe28 	bl	800aca4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32b0      	adds	r2, #176	@ 0xb0
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	32b0      	adds	r2, #176	@ 0xb0
 800806e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7c1b      	ldrb	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d138      	bne.n	80080f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008080:	4b5e      	ldr	r3, [pc, #376]	@ (80081fc <USBD_CDC_Init+0x1e4>)
 8008082:	7819      	ldrb	r1, [r3, #0]
 8008084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008088:	2202      	movs	r2, #2
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f002 fbcb 	bl	800a826 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008090:	4b5a      	ldr	r3, [pc, #360]	@ (80081fc <USBD_CDC_Init+0x1e4>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 020f 	and.w	r2, r3, #15
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	3323      	adds	r3, #35	@ 0x23
 80080a6:	2201      	movs	r2, #1
 80080a8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080aa:	4b55      	ldr	r3, [pc, #340]	@ (8008200 <USBD_CDC_Init+0x1e8>)
 80080ac:	7819      	ldrb	r1, [r3, #0]
 80080ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080b2:	2202      	movs	r2, #2
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f002 fbb6 	bl	800a826 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080ba:	4b51      	ldr	r3, [pc, #324]	@ (8008200 <USBD_CDC_Init+0x1e8>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80080d2:	2201      	movs	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080d6:	4b4b      	ldr	r3, [pc, #300]	@ (8008204 <USBD_CDC_Init+0x1ec>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 020f 	and.w	r2, r3, #15
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	331c      	adds	r3, #28
 80080ec:	2210      	movs	r2, #16
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	e035      	b.n	800815e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080f2:	4b42      	ldr	r3, [pc, #264]	@ (80081fc <USBD_CDC_Init+0x1e4>)
 80080f4:	7819      	ldrb	r1, [r3, #0]
 80080f6:	2340      	movs	r3, #64	@ 0x40
 80080f8:	2202      	movs	r2, #2
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f002 fb93 	bl	800a826 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008100:	4b3e      	ldr	r3, [pc, #248]	@ (80081fc <USBD_CDC_Init+0x1e4>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 020f 	and.w	r2, r3, #15
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	3323      	adds	r3, #35	@ 0x23
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800811a:	4b39      	ldr	r3, [pc, #228]	@ (8008200 <USBD_CDC_Init+0x1e8>)
 800811c:	7819      	ldrb	r1, [r3, #0]
 800811e:	2340      	movs	r3, #64	@ 0x40
 8008120:	2202      	movs	r2, #2
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f002 fb7f 	bl	800a826 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008128:	4b35      	ldr	r3, [pc, #212]	@ (8008200 <USBD_CDC_Init+0x1e8>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f003 020f 	and.w	r2, r3, #15
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008140:	2201      	movs	r2, #1
 8008142:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008144:	4b2f      	ldr	r3, [pc, #188]	@ (8008204 <USBD_CDC_Init+0x1ec>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	331c      	adds	r3, #28
 800815a:	2210      	movs	r2, #16
 800815c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800815e:	4b29      	ldr	r3, [pc, #164]	@ (8008204 <USBD_CDC_Init+0x1ec>)
 8008160:	7819      	ldrb	r1, [r3, #0]
 8008162:	2308      	movs	r3, #8
 8008164:	2203      	movs	r2, #3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f002 fb5d 	bl	800a826 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800816c:	4b25      	ldr	r3, [pc, #148]	@ (8008204 <USBD_CDC_Init+0x1ec>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 020f 	and.w	r2, r3, #15
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	3323      	adds	r3, #35	@ 0x23
 8008182:	2201      	movs	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	33b0      	adds	r3, #176	@ 0xb0
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80081bc:	2302      	movs	r3, #2
 80081be:	e018      	b.n	80081f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7c1b      	ldrb	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008200 <USBD_CDC_Init+0x1e8>)
 80081ca:	7819      	ldrb	r1, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f002 fc14 	bl	800aa04 <USBD_LL_PrepareReceive>
 80081dc:	e008      	b.n	80081f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081de:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <USBD_CDC_Init+0x1e8>)
 80081e0:	7819      	ldrb	r1, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081e8:	2340      	movs	r3, #64	@ 0x40
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f002 fc0a 	bl	800aa04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000009f 	.word	0x2000009f
 8008200:	200000a0 	.word	0x200000a0
 8008204:	200000a1 	.word	0x200000a1

08008208 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008214:	4b3a      	ldr	r3, [pc, #232]	@ (8008300 <USBD_CDC_DeInit+0xf8>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f002 fb29 	bl	800a872 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008220:	4b37      	ldr	r3, [pc, #220]	@ (8008300 <USBD_CDC_DeInit+0xf8>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 020f 	and.w	r2, r3, #15
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	3323      	adds	r3, #35	@ 0x23
 8008236:	2200      	movs	r2, #0
 8008238:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800823a:	4b32      	ldr	r3, [pc, #200]	@ (8008304 <USBD_CDC_DeInit+0xfc>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f002 fb16 	bl	800a872 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008246:	4b2f      	ldr	r3, [pc, #188]	@ (8008304 <USBD_CDC_DeInit+0xfc>)
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 020f 	and.w	r2, r3, #15
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008262:	4b29      	ldr	r3, [pc, #164]	@ (8008308 <USBD_CDC_DeInit+0x100>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f002 fb02 	bl	800a872 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800826e:	4b26      	ldr	r3, [pc, #152]	@ (8008308 <USBD_CDC_DeInit+0x100>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f003 020f 	and.w	r2, r3, #15
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	3323      	adds	r3, #35	@ 0x23
 8008284:	2200      	movs	r2, #0
 8008286:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008288:	4b1f      	ldr	r3, [pc, #124]	@ (8008308 <USBD_CDC_DeInit+0x100>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f003 020f 	and.w	r2, r3, #15
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	331c      	adds	r3, #28
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	32b0      	adds	r2, #176	@ 0xb0
 80082ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01f      	beq.n	80082f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	33b0      	adds	r3, #176	@ 0xb0
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	32b0      	adds	r2, #176	@ 0xb0
 80082d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f002 fbd6 	bl	800aa88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	32b0      	adds	r2, #176	@ 0xb0
 80082e6:	2100      	movs	r1, #0
 80082e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	2000009f 	.word	0x2000009f
 8008304:	200000a0 	.word	0x200000a0
 8008308:	200000a1 	.word	0x200000a1

0800830c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	32b0      	adds	r2, #176	@ 0xb0
 8008320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008324:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	e0bf      	b.n	80084bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008344:	2b00      	cmp	r3, #0
 8008346:	d050      	beq.n	80083ea <USBD_CDC_Setup+0xde>
 8008348:	2b20      	cmp	r3, #32
 800834a:	f040 80af 	bne.w	80084ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	88db      	ldrh	r3, [r3, #6]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d03a      	beq.n	80083cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	b25b      	sxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	da1b      	bge.n	8008398 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	33b0      	adds	r3, #176	@ 0xb0
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008376:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	88d2      	ldrh	r2, [r2, #6]
 800837c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	88db      	ldrh	r3, [r3, #6]
 8008382:	2b07      	cmp	r3, #7
 8008384:	bf28      	it	cs
 8008386:	2307      	movcs	r3, #7
 8008388:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	89fa      	ldrh	r2, [r7, #14]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 fda9 	bl	8009ee8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008396:	e090      	b.n	80084ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	785a      	ldrb	r2, [r3, #1]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	88db      	ldrh	r3, [r3, #6]
 80083a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80083a8:	d803      	bhi.n	80083b2 <USBD_CDC_Setup+0xa6>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	88db      	ldrh	r3, [r3, #6]
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	e000      	b.n	80083b4 <USBD_CDC_Setup+0xa8>
 80083b2:	2240      	movs	r2, #64	@ 0x40
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083ba:	6939      	ldr	r1, [r7, #16]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80083c2:	461a      	mov	r2, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 fdbe 	bl	8009f46 <USBD_CtlPrepareRx>
      break;
 80083ca:	e076      	b.n	80084ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	33b0      	adds	r3, #176	@ 0xb0
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	7850      	ldrb	r0, [r2, #1]
 80083e2:	2200      	movs	r2, #0
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	4798      	blx	r3
      break;
 80083e8:	e067      	b.n	80084ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b0b      	cmp	r3, #11
 80083f0:	d851      	bhi.n	8008496 <USBD_CDC_Setup+0x18a>
 80083f2:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <USBD_CDC_Setup+0xec>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008429 	.word	0x08008429
 80083fc:	080084a5 	.word	0x080084a5
 8008400:	08008497 	.word	0x08008497
 8008404:	08008497 	.word	0x08008497
 8008408:	08008497 	.word	0x08008497
 800840c:	08008497 	.word	0x08008497
 8008410:	08008497 	.word	0x08008497
 8008414:	08008497 	.word	0x08008497
 8008418:	08008497 	.word	0x08008497
 800841c:	08008497 	.word	0x08008497
 8008420:	08008453 	.word	0x08008453
 8008424:	0800847d 	.word	0x0800847d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b03      	cmp	r3, #3
 8008432:	d107      	bne.n	8008444 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008434:	f107 030a 	add.w	r3, r7, #10
 8008438:	2202      	movs	r2, #2
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 fd53 	bl	8009ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008442:	e032      	b.n	80084aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 fcd1 	bl	8009dee <USBD_CtlError>
            ret = USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	75fb      	strb	r3, [r7, #23]
          break;
 8008450:	e02b      	b.n	80084aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b03      	cmp	r3, #3
 800845c:	d107      	bne.n	800846e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800845e:	f107 030d 	add.w	r3, r7, #13
 8008462:	2201      	movs	r2, #1
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fd3e 	bl	8009ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800846c:	e01d      	b.n	80084aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fcbc 	bl	8009dee <USBD_CtlError>
            ret = USBD_FAIL;
 8008476:	2303      	movs	r3, #3
 8008478:	75fb      	strb	r3, [r7, #23]
          break;
 800847a:	e016      	b.n	80084aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b03      	cmp	r3, #3
 8008486:	d00f      	beq.n	80084a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 fcaf 	bl	8009dee <USBD_CtlError>
            ret = USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008494:	e008      	b.n	80084a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fca8 	bl	8009dee <USBD_CtlError>
          ret = USBD_FAIL;
 800849e:	2303      	movs	r3, #3
 80084a0:	75fb      	strb	r3, [r7, #23]
          break;
 80084a2:	e002      	b.n	80084aa <USBD_CDC_Setup+0x19e>
          break;
 80084a4:	bf00      	nop
 80084a6:	e008      	b.n	80084ba <USBD_CDC_Setup+0x1ae>
          break;
 80084a8:	bf00      	nop
      }
      break;
 80084aa:	e006      	b.n	80084ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 fc9d 	bl	8009dee <USBD_CtlError>
      ret = USBD_FAIL;
 80084b4:	2303      	movs	r3, #3
 80084b6:	75fb      	strb	r3, [r7, #23]
      break;
 80084b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	32b0      	adds	r2, #176	@ 0xb0
 80084e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e065      	b.n	80085ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	32b0      	adds	r2, #176	@ 0xb0
 80084f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	f003 020f 	and.w	r2, r3, #15
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	3314      	adds	r3, #20
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d02f      	beq.n	8008578 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	f003 020f 	and.w	r2, r3, #15
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3314      	adds	r3, #20
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	f003 010f 	and.w	r1, r3, #15
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	460b      	mov	r3, r1
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	440b      	add	r3, r1
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4403      	add	r3, r0
 8008540:	331c      	adds	r3, #28
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	fbb2 f1f3 	udiv	r1, r2, r3
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800854e:	2b00      	cmp	r3, #0
 8008550:	d112      	bne.n	8008578 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	3314      	adds	r3, #20
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800856a:	78f9      	ldrb	r1, [r7, #3]
 800856c:	2300      	movs	r3, #0
 800856e:	2200      	movs	r2, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f002 fa26 	bl	800a9c2 <USBD_LL_Transmit>
 8008576:	e01f      	b.n	80085b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	33b0      	adds	r3, #176	@ 0xb0
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d010      	beq.n	80085b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	33b0      	adds	r3, #176	@ 0xb0
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	32b0      	adds	r2, #176	@ 0xb0
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	32b0      	adds	r2, #176	@ 0xb0
 80085e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e01a      	b.n	800862a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f002 fa24 	bl	800aa46 <USBD_LL_GetRxDataSize>
 80085fe:	4602      	mov	r2, r0
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	33b0      	adds	r3, #176	@ 0xb0
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008624:	4611      	mov	r1, r2
 8008626:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	32b0      	adds	r2, #176	@ 0xb0
 8008644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008648:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	e024      	b.n	800869e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	33b0      	adds	r3, #176	@ 0xb0
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d019      	beq.n	800869c <USBD_CDC_EP0_RxReady+0x6a>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800866e:	2bff      	cmp	r3, #255	@ 0xff
 8008670:	d014      	beq.n	800869c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	33b0      	adds	r3, #176	@ 0xb0
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800868a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008692:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	22ff      	movs	r2, #255	@ 0xff
 8008698:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086b0:	2182      	movs	r1, #130	@ 0x82
 80086b2:	4818      	ldr	r0, [pc, #96]	@ (8008714 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086b4:	f000 fd62 	bl	800917c <USBD_GetEpDesc>
 80086b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ba:	2101      	movs	r1, #1
 80086bc:	4815      	ldr	r0, [pc, #84]	@ (8008714 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086be:	f000 fd5d 	bl	800917c <USBD_GetEpDesc>
 80086c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086c4:	2181      	movs	r1, #129	@ 0x81
 80086c6:	4813      	ldr	r0, [pc, #76]	@ (8008714 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086c8:	f000 fd58 	bl	800917c <USBD_GetEpDesc>
 80086cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2210      	movs	r2, #16
 80086d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d006      	beq.n	80086ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086e8:	711a      	strb	r2, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086fc:	711a      	strb	r2, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2243      	movs	r2, #67	@ 0x43
 8008706:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008708:	4b02      	ldr	r3, [pc, #8]	@ (8008714 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	2000005c 	.word	0x2000005c

08008718 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008720:	2182      	movs	r1, #130	@ 0x82
 8008722:	4818      	ldr	r0, [pc, #96]	@ (8008784 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008724:	f000 fd2a 	bl	800917c <USBD_GetEpDesc>
 8008728:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800872a:	2101      	movs	r1, #1
 800872c:	4815      	ldr	r0, [pc, #84]	@ (8008784 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800872e:	f000 fd25 	bl	800917c <USBD_GetEpDesc>
 8008732:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008734:	2181      	movs	r1, #129	@ 0x81
 8008736:	4813      	ldr	r0, [pc, #76]	@ (8008784 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008738:	f000 fd20 	bl	800917c <USBD_GetEpDesc>
 800873c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2210      	movs	r2, #16
 8008748:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d006      	beq.n	800875e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2200      	movs	r2, #0
 8008754:	711a      	strb	r2, [r3, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f042 0202 	orr.w	r2, r2, #2
 800875c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	711a      	strb	r2, [r3, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f042 0202 	orr.w	r2, r2, #2
 8008770:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2243      	movs	r2, #67	@ 0x43
 8008776:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008778:	4b02      	ldr	r3, [pc, #8]	@ (8008784 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800877a:	4618      	mov	r0, r3
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	2000005c 	.word	0x2000005c

08008788 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008790:	2182      	movs	r1, #130	@ 0x82
 8008792:	4818      	ldr	r0, [pc, #96]	@ (80087f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008794:	f000 fcf2 	bl	800917c <USBD_GetEpDesc>
 8008798:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800879a:	2101      	movs	r1, #1
 800879c:	4815      	ldr	r0, [pc, #84]	@ (80087f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800879e:	f000 fced 	bl	800917c <USBD_GetEpDesc>
 80087a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087a4:	2181      	movs	r1, #129	@ 0x81
 80087a6:	4813      	ldr	r0, [pc, #76]	@ (80087f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087a8:	f000 fce8 	bl	800917c <USBD_GetEpDesc>
 80087ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2210      	movs	r2, #16
 80087b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087c8:	711a      	strb	r2, [r3, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d006      	beq.n	80087e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087dc:	711a      	strb	r2, [r3, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2243      	movs	r2, #67	@ 0x43
 80087e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087e8:	4b02      	ldr	r3, [pc, #8]	@ (80087f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	2000005c 	.word	0x2000005c

080087f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	220a      	movs	r2, #10
 8008804:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008806:	4b03      	ldr	r3, [pc, #12]	@ (8008814 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	20000018 	.word	0x20000018

08008818 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008828:	2303      	movs	r3, #3
 800882a:	e009      	b.n	8008840 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	33b0      	adds	r3, #176	@ 0xb0
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	32b0      	adds	r2, #176	@ 0xb0
 8008862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008866:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800886e:	2303      	movs	r3, #3
 8008870:	e008      	b.n	8008884 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	32b0      	adds	r2, #176	@ 0xb0
 80088a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e004      	b.n	80088be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	32b0      	adds	r2, #176	@ 0xb0
 80088de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e025      	b.n	800893e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d11f      	bne.n	800893c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008904:	4b10      	ldr	r3, [pc, #64]	@ (8008948 <USBD_CDC_TransmitPacket+0x7c>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 020f 	and.w	r2, r3, #15
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4403      	add	r3, r0
 800891e:	3314      	adds	r3, #20
 8008920:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008922:	4b09      	ldr	r3, [pc, #36]	@ (8008948 <USBD_CDC_TransmitPacket+0x7c>)
 8008924:	7819      	ldrb	r1, [r3, #0]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f002 f845 	bl	800a9c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	2000009f 	.word	0x2000009f

0800894c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	32b0      	adds	r2, #176	@ 0xb0
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	32b0      	adds	r2, #176	@ 0xb0
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	e018      	b.n	80089ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7c1b      	ldrb	r3, [r3, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008982:	4b0c      	ldr	r3, [pc, #48]	@ (80089b4 <USBD_CDC_ReceivePacket+0x68>)
 8008984:	7819      	ldrb	r1, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800898c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f002 f837 	bl	800aa04 <USBD_LL_PrepareReceive>
 8008996:	e008      	b.n	80089aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008998:	4b06      	ldr	r3, [pc, #24]	@ (80089b4 <USBD_CDC_ReceivePacket+0x68>)
 800899a:	7819      	ldrb	r1, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089a2:	2340      	movs	r3, #64	@ 0x40
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f002 f82d 	bl	800aa04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	200000a0 	.word	0x200000a0

080089b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e01f      	b.n	8008a10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	79fa      	ldrb	r2, [r7, #7]
 8008a02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f001 fea7 	bl	800a758 <USBD_LL_Init>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e025      	b.n	8008a7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	32ae      	adds	r2, #174	@ 0xae
 8008a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00f      	beq.n	8008a6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	32ae      	adds	r2, #174	@ 0xae
 8008a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5c:	f107 020e 	add.w	r2, r7, #14
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	4602      	mov	r2, r0
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 feaf 	bl	800a7f0 <USBD_LL_Start>
 8008a92:	4603      	mov	r3, r0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d009      	beq.n	8008ae0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	4798      	blx	r3
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	4611      	mov	r1, r2
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f001 f922 	bl	8009d7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008b44:	461a      	mov	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d01a      	beq.n	8008b90 <USBD_LL_SetupStage+0x72>
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d822      	bhi.n	8008ba4 <USBD_LL_SetupStage+0x86>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <USBD_LL_SetupStage+0x4a>
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d00a      	beq.n	8008b7c <USBD_LL_SetupStage+0x5e>
 8008b66:	e01d      	b.n	8008ba4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fb77 	bl	8009264 <USBD_StdDevReq>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73fb      	strb	r3, [r7, #15]
      break;
 8008b7a:	e020      	b.n	8008bbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fbdf 	bl	8009348 <USBD_StdItfReq>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8e:	e016      	b.n	8008bbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc41 	bl	8009420 <USBD_StdEPReq>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba2:	e00c      	b.n	8008bbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008baa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fe7c 	bl	800a8b0 <USBD_LL_StallEP>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	bf00      	nop
  }

  return ret;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008bda:	7afb      	ldrb	r3, [r7, #11]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d177      	bne.n	8008cd0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008be6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	f040 80a1 	bne.w	8008d36 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	8992      	ldrh	r2, [r2, #12]
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d91c      	bls.n	8008c3a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	8992      	ldrh	r2, [r2, #12]
 8008c08:	1a9a      	subs	r2, r3, r2
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	8992      	ldrh	r2, [r2, #12]
 8008c16:	441a      	add	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6919      	ldr	r1, [r3, #16]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	899b      	ldrh	r3, [r3, #12]
 8008c24:	461a      	mov	r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	bf38      	it	cc
 8008c2e:	4613      	movcc	r3, r2
 8008c30:	461a      	mov	r2, r3
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f001 f9a8 	bl	8009f88 <USBD_CtlContinueRx>
 8008c38:	e07d      	b.n	8008d36 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c40:	f003 031f 	and.w	r3, r3, #31
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d014      	beq.n	8008c72 <USBD_LL_DataOutStage+0xaa>
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d81d      	bhi.n	8008c88 <USBD_LL_DataOutStage+0xc0>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <USBD_LL_DataOutStage+0x8e>
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d003      	beq.n	8008c5c <USBD_LL_DataOutStage+0x94>
 8008c54:	e018      	b.n	8008c88 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	75bb      	strb	r3, [r7, #22]
            break;
 8008c5a:	e018      	b.n	8008c8e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	4619      	mov	r1, r3
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 fa6e 	bl	8009148 <USBD_CoreFindIF>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75bb      	strb	r3, [r7, #22]
            break;
 8008c70:	e00d      	b.n	8008c8e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 fa70 	bl	8009162 <USBD_CoreFindEP>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75bb      	strb	r3, [r7, #22]
            break;
 8008c86:	e002      	b.n	8008c8e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	75bb      	strb	r3, [r7, #22]
            break;
 8008c8c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d119      	bne.n	8008cc8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d113      	bne.n	8008cc8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ca0:	7dba      	ldrb	r2, [r7, #22]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	32ae      	adds	r2, #174	@ 0xae
 8008ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008cb0:	7dba      	ldrb	r2, [r7, #22]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008cb8:	7dba      	ldrb	r2, [r7, #22]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	32ae      	adds	r2, #174	@ 0xae
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f001 f96e 	bl	8009faa <USBD_CtlSendStatus>
 8008cce:	e032      	b.n	8008d36 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	4619      	mov	r1, r3
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fa41 	bl	8009162 <USBD_CoreFindEP>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ce4:	7dbb      	ldrb	r3, [r7, #22]
 8008ce6:	2bff      	cmp	r3, #255	@ 0xff
 8008ce8:	d025      	beq.n	8008d36 <USBD_LL_DataOutStage+0x16e>
 8008cea:	7dbb      	ldrb	r3, [r7, #22]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d122      	bne.n	8008d36 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d117      	bne.n	8008d2c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008cfc:	7dba      	ldrb	r2, [r7, #22]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	32ae      	adds	r2, #174	@ 0xae
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00f      	beq.n	8008d2c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008d0c:	7dba      	ldrb	r2, [r7, #22]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d14:	7dba      	ldrb	r2, [r7, #22]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	32ae      	adds	r2, #174	@ 0xae
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	7afa      	ldrb	r2, [r7, #11]
 8008d22:	4611      	mov	r1, r2
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	4798      	blx	r3
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	e000      	b.n	8008d38 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d178      	bne.n	8008e46 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3314      	adds	r3, #20
 8008d58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d163      	bne.n	8008e2c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	8992      	ldrh	r2, [r2, #12]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d91c      	bls.n	8008daa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	8992      	ldrh	r2, [r2, #12]
 8008d78:	1a9a      	subs	r2, r3, r2
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	8992      	ldrh	r2, [r2, #12]
 8008d86:	441a      	add	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	6919      	ldr	r1, [r3, #16]
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	461a      	mov	r2, r3
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f001 f8c4 	bl	8009f24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2100      	movs	r1, #0
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f001 fe2e 	bl	800aa04 <USBD_LL_PrepareReceive>
 8008da8:	e040      	b.n	8008e2c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	899b      	ldrh	r3, [r3, #12]
 8008dae:	461a      	mov	r2, r3
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d11c      	bne.n	8008df2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d316      	bcc.n	8008df2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d20f      	bcs.n	8008df2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f001 f8a4 	bl	8009f24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008de4:	2300      	movs	r3, #0
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f001 fe0a 	bl	800aa04 <USBD_LL_PrepareReceive>
 8008df0:	e01c      	b.n	8008e2c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d10f      	bne.n	8008e1e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d009      	beq.n	8008e1e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1e:	2180      	movs	r1, #128	@ 0x80
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f001 fd45 	bl	800a8b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f001 f8d2 	bl	8009fd0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d03a      	beq.n	8008eac <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f7ff fe30 	bl	8008a9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008e44:	e032      	b.n	8008eac <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 f986 	bl	8009162 <USBD_CoreFindEP>
 8008e56:	4603      	mov	r3, r0
 8008e58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	2bff      	cmp	r3, #255	@ 0xff
 8008e5e:	d025      	beq.n	8008eac <USBD_LL_DataInStage+0x16c>
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d122      	bne.n	8008eac <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d11c      	bne.n	8008eac <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e72:	7dfa      	ldrb	r2, [r7, #23]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	32ae      	adds	r2, #174	@ 0xae
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d014      	beq.n	8008eac <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008e82:	7dfa      	ldrb	r2, [r7, #23]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e8a:	7dfa      	ldrb	r2, [r7, #23]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	32ae      	adds	r2, #174	@ 0xae
 8008e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	7afa      	ldrb	r2, [r7, #11]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	4798      	blx	r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008ea2:	7dbb      	ldrb	r3, [r7, #22]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008ea8:	7dbb      	ldrb	r3, [r7, #22]
 8008eaa:	e000      	b.n	8008eae <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d014      	beq.n	8008f1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6852      	ldr	r2, [r2, #4]
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f1c:	2340      	movs	r3, #64	@ 0x40
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fc7f 	bl	800a826 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2240      	movs	r2, #64	@ 0x40
 8008f34:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f38:	2340      	movs	r3, #64	@ 0x40
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2180      	movs	r1, #128	@ 0x80
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 fc71 	bl	800a826 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2240      	movs	r2, #64	@ 0x40
 8008f50:	841a      	strh	r2, [r3, #32]

  return ret;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d006      	beq.n	8008f9e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d106      	bne.n	8008fd6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d110      	bne.n	800901a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	32ae      	adds	r2, #174	@ 0xae
 800903a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009042:	2303      	movs	r3, #3
 8009044:	e01c      	b.n	8009080 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b03      	cmp	r3, #3
 8009050:	d115      	bne.n	800907e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	32ae      	adds	r2, #174	@ 0xae
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00b      	beq.n	800907e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	32ae      	adds	r2, #174	@ 0xae
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	4611      	mov	r1, r2
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	32ae      	adds	r2, #174	@ 0xae
 800909e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e01c      	b.n	80090e4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d115      	bne.n	80090e2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	32ae      	adds	r2, #174	@ 0xae
 80090c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	32ae      	adds	r2, #174	@ 0xae
 80090d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	4611      	mov	r1, r2
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6852      	ldr	r2, [r2, #4]
 800912c:	b2d2      	uxtb	r2, r2
 800912e:	4611      	mov	r1, r2
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800913a:	2303      	movs	r3, #3
 800913c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009154:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800916e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009190:	2300      	movs	r3, #0
 8009192:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	885b      	ldrh	r3, [r3, #2]
 8009198:	b29b      	uxth	r3, r3
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	7812      	ldrb	r2, [r2, #0]
 800919e:	4293      	cmp	r3, r2
 80091a0:	d91f      	bls.n	80091e2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80091a8:	e013      	b.n	80091d2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80091aa:	f107 030a 	add.w	r3, r7, #10
 80091ae:	4619      	mov	r1, r3
 80091b0:	6978      	ldr	r0, [r7, #20]
 80091b2:	f000 f81b 	bl	80091ec <USBD_GetNextDesc>
 80091b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	2b05      	cmp	r3, #5
 80091be:	d108      	bne.n	80091d2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	789b      	ldrb	r3, [r3, #2]
 80091c8:	78fa      	ldrb	r2, [r7, #3]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d008      	beq.n	80091e0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	885b      	ldrh	r3, [r3, #2]
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	897b      	ldrh	r3, [r7, #10]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d8e5      	bhi.n	80091aa <USBD_GetEpDesc+0x2e>
 80091de:	e000      	b.n	80091e2 <USBD_GetEpDesc+0x66>
          break;
 80091e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80091e2:	693b      	ldr	r3, [r7, #16]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	4413      	add	r3, r2
 8009204:	b29a      	uxth	r2, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009216:	68fb      	ldr	r3, [r7, #12]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	3301      	adds	r3, #1
 800923a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009242:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	b21a      	sxth	r2, r3
 800924a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800924e:	4313      	orrs	r3, r2
 8009250:	b21b      	sxth	r3, r3
 8009252:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009254:	89fb      	ldrh	r3, [r7, #14]
}
 8009256:	4618      	mov	r0, r3
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
	...

08009264 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800927a:	2b40      	cmp	r3, #64	@ 0x40
 800927c:	d005      	beq.n	800928a <USBD_StdDevReq+0x26>
 800927e:	2b40      	cmp	r3, #64	@ 0x40
 8009280:	d857      	bhi.n	8009332 <USBD_StdDevReq+0xce>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00f      	beq.n	80092a6 <USBD_StdDevReq+0x42>
 8009286:	2b20      	cmp	r3, #32
 8009288:	d153      	bne.n	8009332 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32ae      	adds	r2, #174	@ 0xae
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
      break;
 80092a4:	e04a      	b.n	800933c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	2b09      	cmp	r3, #9
 80092ac:	d83b      	bhi.n	8009326 <USBD_StdDevReq+0xc2>
 80092ae:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <USBD_StdDevReq+0x50>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	08009309 	.word	0x08009309
 80092b8:	0800931d 	.word	0x0800931d
 80092bc:	08009327 	.word	0x08009327
 80092c0:	08009313 	.word	0x08009313
 80092c4:	08009327 	.word	0x08009327
 80092c8:	080092e7 	.word	0x080092e7
 80092cc:	080092dd 	.word	0x080092dd
 80092d0:	08009327 	.word	0x08009327
 80092d4:	080092ff 	.word	0x080092ff
 80092d8:	080092f1 	.word	0x080092f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa3e 	bl	8009760 <USBD_GetDescriptor>
          break;
 80092e4:	e024      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fba3 	bl	8009a34 <USBD_SetAddress>
          break;
 80092ee:	e01f      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fbe2 	bl	8009abc <USBD_SetConfig>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
          break;
 80092fc:	e018      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fc85 	bl	8009c10 <USBD_GetConfig>
          break;
 8009306:	e013      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fcb6 	bl	8009c7c <USBD_GetStatus>
          break;
 8009310:	e00e      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fce5 	bl	8009ce4 <USBD_SetFeature>
          break;
 800931a:	e009      	b.n	8009330 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fd09 	bl	8009d36 <USBD_ClrFeature>
          break;
 8009324:	e004      	b.n	8009330 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fd60 	bl	8009dee <USBD_CtlError>
          break;
 800932e:	bf00      	nop
      }
      break;
 8009330:	e004      	b.n	800933c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fd5a 	bl	8009dee <USBD_CtlError>
      break;
 800933a:	bf00      	nop
  }

  return ret;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop

08009348 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d005      	beq.n	800936e <USBD_StdItfReq+0x26>
 8009362:	2b40      	cmp	r3, #64	@ 0x40
 8009364:	d852      	bhi.n	800940c <USBD_StdItfReq+0xc4>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <USBD_StdItfReq+0x26>
 800936a:	2b20      	cmp	r3, #32
 800936c:	d14e      	bne.n	800940c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009374:	b2db      	uxtb	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	2b02      	cmp	r3, #2
 800937a:	d840      	bhi.n	80093fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	889b      	ldrh	r3, [r3, #4]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b01      	cmp	r3, #1
 8009384:	d836      	bhi.n	80093f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	889b      	ldrh	r3, [r3, #4]
 800938a:	b2db      	uxtb	r3, r3
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff feda 	bl	8009148 <USBD_CoreFindIF>
 8009394:	4603      	mov	r3, r0
 8009396:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	2bff      	cmp	r3, #255	@ 0xff
 800939c:	d01d      	beq.n	80093da <USBD_StdItfReq+0x92>
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d11a      	bne.n	80093da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80093a4:	7bba      	ldrb	r2, [r7, #14]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	32ae      	adds	r2, #174	@ 0xae
 80093aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00f      	beq.n	80093d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80093b4:	7bba      	ldrb	r2, [r7, #14]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093bc:	7bba      	ldrb	r2, [r7, #14]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	32ae      	adds	r2, #174	@ 0xae
 80093c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093d2:	e004      	b.n	80093de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093d8:	e001      	b.n	80093de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80093da:	2303      	movs	r3, #3
 80093dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	88db      	ldrh	r3, [r3, #6]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d110      	bne.n	8009408 <USBD_StdItfReq+0xc0>
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10d      	bne.n	8009408 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fddc 	bl	8009faa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093f2:	e009      	b.n	8009408 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fcf9 	bl	8009dee <USBD_CtlError>
          break;
 80093fc:	e004      	b.n	8009408 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fcf4 	bl	8009dee <USBD_CtlError>
          break;
 8009406:	e000      	b.n	800940a <USBD_StdItfReq+0xc2>
          break;
 8009408:	bf00      	nop
      }
      break;
 800940a:	e004      	b.n	8009416 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fced 	bl	8009dee <USBD_CtlError>
      break;
 8009414:	bf00      	nop
  }

  return ret;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	889b      	ldrh	r3, [r3, #4]
 8009432:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800943c:	2b40      	cmp	r3, #64	@ 0x40
 800943e:	d007      	beq.n	8009450 <USBD_StdEPReq+0x30>
 8009440:	2b40      	cmp	r3, #64	@ 0x40
 8009442:	f200 8181 	bhi.w	8009748 <USBD_StdEPReq+0x328>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d02a      	beq.n	80094a0 <USBD_StdEPReq+0x80>
 800944a:	2b20      	cmp	r3, #32
 800944c:	f040 817c 	bne.w	8009748 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff fe84 	bl	8009162 <USBD_CoreFindEP>
 800945a:	4603      	mov	r3, r0
 800945c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800945e:	7b7b      	ldrb	r3, [r7, #13]
 8009460:	2bff      	cmp	r3, #255	@ 0xff
 8009462:	f000 8176 	beq.w	8009752 <USBD_StdEPReq+0x332>
 8009466:	7b7b      	ldrb	r3, [r7, #13]
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 8172 	bne.w	8009752 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800946e:	7b7a      	ldrb	r2, [r7, #13]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009476:	7b7a      	ldrb	r2, [r7, #13]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	32ae      	adds	r2, #174	@ 0xae
 800947c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8165 	beq.w	8009752 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009488:	7b7a      	ldrb	r2, [r7, #13]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	32ae      	adds	r2, #174	@ 0xae
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800949e:	e158      	b.n	8009752 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d008      	beq.n	80094ba <USBD_StdEPReq+0x9a>
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	f300 8147 	bgt.w	800973c <USBD_StdEPReq+0x31c>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 809b 	beq.w	80095ea <USBD_StdEPReq+0x1ca>
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d03c      	beq.n	8009532 <USBD_StdEPReq+0x112>
 80094b8:	e140      	b.n	800973c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d002      	beq.n	80094cc <USBD_StdEPReq+0xac>
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d016      	beq.n	80094f8 <USBD_StdEPReq+0xd8>
 80094ca:	e02c      	b.n	8009526 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00d      	beq.n	80094ee <USBD_StdEPReq+0xce>
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	2b80      	cmp	r3, #128	@ 0x80
 80094d6:	d00a      	beq.n	80094ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 f9e7 	bl	800a8b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094e2:	2180      	movs	r1, #128	@ 0x80
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 f9e3 	bl	800a8b0 <USBD_LL_StallEP>
 80094ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094ec:	e020      	b.n	8009530 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fc7c 	bl	8009dee <USBD_CtlError>
              break;
 80094f6:	e01b      	b.n	8009530 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	885b      	ldrh	r3, [r3, #2]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10e      	bne.n	800951e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00b      	beq.n	800951e <USBD_StdEPReq+0xfe>
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b80      	cmp	r3, #128	@ 0x80
 800950a:	d008      	beq.n	800951e <USBD_StdEPReq+0xfe>
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	88db      	ldrh	r3, [r3, #6]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 f9c9 	bl	800a8b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fd43 	bl	8009faa <USBD_CtlSendStatus>

              break;
 8009524:	e004      	b.n	8009530 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fc60 	bl	8009dee <USBD_CtlError>
              break;
 800952e:	bf00      	nop
          }
          break;
 8009530:	e109      	b.n	8009746 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b02      	cmp	r3, #2
 800953c:	d002      	beq.n	8009544 <USBD_StdEPReq+0x124>
 800953e:	2b03      	cmp	r3, #3
 8009540:	d016      	beq.n	8009570 <USBD_StdEPReq+0x150>
 8009542:	e04b      	b.n	80095dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00d      	beq.n	8009566 <USBD_StdEPReq+0x146>
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	2b80      	cmp	r3, #128	@ 0x80
 800954e:	d00a      	beq.n	8009566 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f9ab 	bl	800a8b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800955a:	2180      	movs	r1, #128	@ 0x80
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 f9a7 	bl	800a8b0 <USBD_LL_StallEP>
 8009562:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009564:	e040      	b.n	80095e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fc40 	bl	8009dee <USBD_CtlError>
              break;
 800956e:	e03b      	b.n	80095e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	885b      	ldrh	r3, [r3, #2]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d136      	bne.n	80095e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 f9b1 	bl	800a8ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fd0c 	bl	8009faa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff fde3 	bl	8009162 <USBD_CoreFindEP>
 800959c:	4603      	mov	r3, r0
 800959e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095a0:	7b7b      	ldrb	r3, [r7, #13]
 80095a2:	2bff      	cmp	r3, #255	@ 0xff
 80095a4:	d01f      	beq.n	80095e6 <USBD_StdEPReq+0x1c6>
 80095a6:	7b7b      	ldrb	r3, [r7, #13]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d11c      	bne.n	80095e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80095ac:	7b7a      	ldrb	r2, [r7, #13]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80095b4:	7b7a      	ldrb	r2, [r7, #13]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32ae      	adds	r2, #174	@ 0xae
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095c4:	7b7a      	ldrb	r2, [r7, #13]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	32ae      	adds	r2, #174	@ 0xae
 80095ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80095da:	e004      	b.n	80095e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fc05 	bl	8009dee <USBD_CtlError>
              break;
 80095e4:	e000      	b.n	80095e8 <USBD_StdEPReq+0x1c8>
              break;
 80095e6:	bf00      	nop
          }
          break;
 80095e8:	e0ad      	b.n	8009746 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d002      	beq.n	80095fc <USBD_StdEPReq+0x1dc>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d033      	beq.n	8009662 <USBD_StdEPReq+0x242>
 80095fa:	e099      	b.n	8009730 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <USBD_StdEPReq+0x1f2>
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	2b80      	cmp	r3, #128	@ 0x80
 8009606:	d004      	beq.n	8009612 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fbef 	bl	8009dee <USBD_CtlError>
                break;
 8009610:	e093      	b.n	800973a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	da0b      	bge.n	8009632 <USBD_StdEPReq+0x212>
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	3310      	adds	r3, #16
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	3304      	adds	r3, #4
 8009630:	e00b      	b.n	800964a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	4413      	add	r3, r2
 8009648:	3304      	adds	r3, #4
 800964a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2200      	movs	r2, #0
 8009650:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	330e      	adds	r3, #14
 8009656:	2202      	movs	r2, #2
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fc44 	bl	8009ee8 <USBD_CtlSendData>
              break;
 8009660:	e06b      	b.n	800973a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009666:	2b00      	cmp	r3, #0
 8009668:	da11      	bge.n	800968e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	3323      	adds	r3, #35	@ 0x23
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d117      	bne.n	80096b4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fbb1 	bl	8009dee <USBD_CtlError>
                  break;
 800968c:	e055      	b.n	800973a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	f003 020f 	and.w	r2, r3, #15
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d104      	bne.n	80096b4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fb9e 	bl	8009dee <USBD_CtlError>
                  break;
 80096b2:	e042      	b.n	800973a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	da0b      	bge.n	80096d4 <USBD_StdEPReq+0x2b4>
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	3310      	adds	r3, #16
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4413      	add	r3, r2
 80096d0:	3304      	adds	r3, #4
 80096d2:	e00b      	b.n	80096ec <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	4413      	add	r3, r2
 80096ea:	3304      	adds	r3, #4
 80096ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <USBD_StdEPReq+0x2da>
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	2b80      	cmp	r3, #128	@ 0x80
 80096f8:	d103      	bne.n	8009702 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2200      	movs	r2, #0
 80096fe:	739a      	strb	r2, [r3, #14]
 8009700:	e00e      	b.n	8009720 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f910 	bl	800a92c <USBD_LL_IsStallEP>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2201      	movs	r2, #1
 8009716:	739a      	strb	r2, [r3, #14]
 8009718:	e002      	b.n	8009720 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	330e      	adds	r3, #14
 8009724:	2202      	movs	r2, #2
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fbdd 	bl	8009ee8 <USBD_CtlSendData>
              break;
 800972e:	e004      	b.n	800973a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fb5b 	bl	8009dee <USBD_CtlError>
              break;
 8009738:	bf00      	nop
          }
          break;
 800973a:	e004      	b.n	8009746 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fb55 	bl	8009dee <USBD_CtlError>
          break;
 8009744:	bf00      	nop
      }
      break;
 8009746:	e005      	b.n	8009754 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fb4f 	bl	8009dee <USBD_CtlError>
      break;
 8009750:	e000      	b.n	8009754 <USBD_StdEPReq+0x334>
      break;
 8009752:	bf00      	nop
  }

  return ret;
 8009754:	7bfb      	ldrb	r3, [r7, #15]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800976a:	2300      	movs	r3, #0
 800976c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	0a1b      	lsrs	r3, r3, #8
 800977c:	b29b      	uxth	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	2b06      	cmp	r3, #6
 8009782:	f200 8128 	bhi.w	80099d6 <USBD_GetDescriptor+0x276>
 8009786:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <USBD_GetDescriptor+0x2c>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	080097a9 	.word	0x080097a9
 8009790:	080097c1 	.word	0x080097c1
 8009794:	08009801 	.word	0x08009801
 8009798:	080099d7 	.word	0x080099d7
 800979c:	080099d7 	.word	0x080099d7
 80097a0:	08009977 	.word	0x08009977
 80097a4:	080099a3 	.word	0x080099a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	7c12      	ldrb	r2, [r2, #16]
 80097b4:	f107 0108 	add.w	r1, r7, #8
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	60f8      	str	r0, [r7, #12]
      break;
 80097be:	e112      	b.n	80099e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7c1b      	ldrb	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10d      	bne.n	80097e4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d0:	f107 0208 	add.w	r2, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	2202      	movs	r2, #2
 80097e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097e2:	e100      	b.n	80099e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ec:	f107 0208 	add.w	r2, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	2202      	movs	r2, #2
 80097fc:	701a      	strb	r2, [r3, #0]
      break;
 80097fe:	e0f2      	b.n	80099e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	885b      	ldrh	r3, [r3, #2]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b05      	cmp	r3, #5
 8009808:	f200 80ac 	bhi.w	8009964 <USBD_GetDescriptor+0x204>
 800980c:	a201      	add	r2, pc, #4	@ (adr r2, 8009814 <USBD_GetDescriptor+0xb4>)
 800980e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009812:	bf00      	nop
 8009814:	0800982d 	.word	0x0800982d
 8009818:	08009861 	.word	0x08009861
 800981c:	08009895 	.word	0x08009895
 8009820:	080098c9 	.word	0x080098c9
 8009824:	080098fd 	.word	0x080098fd
 8009828:	08009931 	.word	0x08009931
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	7c12      	ldrb	r2, [r2, #16]
 8009844:	f107 0108 	add.w	r1, r7, #8
 8009848:	4610      	mov	r0, r2
 800984a:	4798      	blx	r3
 800984c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800984e:	e091      	b.n	8009974 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 facb 	bl	8009dee <USBD_CtlError>
            err++;
 8009858:	7afb      	ldrb	r3, [r7, #11]
 800985a:	3301      	adds	r3, #1
 800985c:	72fb      	strb	r3, [r7, #11]
          break;
 800985e:	e089      	b.n	8009974 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	7c12      	ldrb	r2, [r2, #16]
 8009878:	f107 0108 	add.w	r1, r7, #8
 800987c:	4610      	mov	r0, r2
 800987e:	4798      	blx	r3
 8009880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009882:	e077      	b.n	8009974 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fab1 	bl	8009dee <USBD_CtlError>
            err++;
 800988c:	7afb      	ldrb	r3, [r7, #11]
 800988e:	3301      	adds	r3, #1
 8009890:	72fb      	strb	r3, [r7, #11]
          break;
 8009892:	e06f      	b.n	8009974 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	7c12      	ldrb	r2, [r2, #16]
 80098ac:	f107 0108 	add.w	r1, r7, #8
 80098b0:	4610      	mov	r0, r2
 80098b2:	4798      	blx	r3
 80098b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098b6:	e05d      	b.n	8009974 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa97 	bl	8009dee <USBD_CtlError>
            err++;
 80098c0:	7afb      	ldrb	r3, [r7, #11]
 80098c2:	3301      	adds	r3, #1
 80098c4:	72fb      	strb	r3, [r7, #11]
          break;
 80098c6:	e055      	b.n	8009974 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	7c12      	ldrb	r2, [r2, #16]
 80098e0:	f107 0108 	add.w	r1, r7, #8
 80098e4:	4610      	mov	r0, r2
 80098e6:	4798      	blx	r3
 80098e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ea:	e043      	b.n	8009974 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa7d 	bl	8009dee <USBD_CtlError>
            err++;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	3301      	adds	r3, #1
 80098f8:	72fb      	strb	r3, [r7, #11]
          break;
 80098fa:	e03b      	b.n	8009974 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	7c12      	ldrb	r2, [r2, #16]
 8009914:	f107 0108 	add.w	r1, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991e:	e029      	b.n	8009974 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa63 	bl	8009dee <USBD_CtlError>
            err++;
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	3301      	adds	r3, #1
 800992c:	72fb      	strb	r3, [r7, #11]
          break;
 800992e:	e021      	b.n	8009974 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009952:	e00f      	b.n	8009974 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa49 	bl	8009dee <USBD_CtlError>
            err++;
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	3301      	adds	r3, #1
 8009960:	72fb      	strb	r3, [r7, #11]
          break;
 8009962:	e007      	b.n	8009974 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fa41 	bl	8009dee <USBD_CtlError>
          err++;
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	3301      	adds	r3, #1
 8009970:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009972:	bf00      	nop
      }
      break;
 8009974:	e037      	b.n	80099e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7c1b      	ldrb	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d109      	bne.n	8009992 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009986:	f107 0208 	add.w	r2, r7, #8
 800998a:	4610      	mov	r0, r2
 800998c:	4798      	blx	r3
 800998e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009990:	e029      	b.n	80099e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fa2a 	bl	8009dee <USBD_CtlError>
        err++;
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	3301      	adds	r3, #1
 800999e:	72fb      	strb	r3, [r7, #11]
      break;
 80099a0:	e021      	b.n	80099e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7c1b      	ldrb	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10d      	bne.n	80099c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b2:	f107 0208 	add.w	r2, r7, #8
 80099b6:	4610      	mov	r0, r2
 80099b8:	4798      	blx	r3
 80099ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	2207      	movs	r2, #7
 80099c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099c4:	e00f      	b.n	80099e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa10 	bl	8009dee <USBD_CtlError>
        err++;
 80099ce:	7afb      	ldrb	r3, [r7, #11]
 80099d0:	3301      	adds	r3, #1
 80099d2:	72fb      	strb	r3, [r7, #11]
      break;
 80099d4:	e007      	b.n	80099e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fa08 	bl	8009dee <USBD_CtlError>
      err++;
 80099de:	7afb      	ldrb	r3, [r7, #11]
 80099e0:	3301      	adds	r3, #1
 80099e2:	72fb      	strb	r3, [r7, #11]
      break;
 80099e4:	bf00      	nop
  }

  if (err != 0U)
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d11e      	bne.n	8009a2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	88db      	ldrh	r3, [r3, #6]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d016      	beq.n	8009a22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80099f4:	893b      	ldrh	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00e      	beq.n	8009a18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	88da      	ldrh	r2, [r3, #6]
 80099fe:	893b      	ldrh	r3, [r7, #8]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	bf28      	it	cs
 8009a04:	4613      	movcs	r3, r2
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a0a:	893b      	ldrh	r3, [r7, #8]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fa69 	bl	8009ee8 <USBD_CtlSendData>
 8009a16:	e009      	b.n	8009a2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9e7 	bl	8009dee <USBD_CtlError>
 8009a20:	e004      	b.n	8009a2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fac1 	bl	8009faa <USBD_CtlSendStatus>
 8009a28:	e000      	b.n	8009a2c <USBD_GetDescriptor+0x2cc>
    return;
 8009a2a:	bf00      	nop
  }
}
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop

08009a34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	889b      	ldrh	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d131      	bne.n	8009aaa <USBD_SetAddress+0x76>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	88db      	ldrh	r3, [r3, #6]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d12d      	bne.n	8009aaa <USBD_SetAddress+0x76>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a54:	d829      	bhi.n	8009aaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	885b      	ldrh	r3, [r3, #2]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d104      	bne.n	8009a78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f9bc 	bl	8009dee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a76:	e01d      	b.n	8009ab4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7bfa      	ldrb	r2, [r7, #15]
 8009a7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 ff7d 	bl	800a984 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa8d 	bl	8009faa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d004      	beq.n	8009aa0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9e:	e009      	b.n	8009ab4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa8:	e004      	b.n	8009ab4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f99e 	bl	8009dee <USBD_CtlError>
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	885b      	ldrh	r3, [r3, #2]
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009ad2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d905      	bls.n	8009ae8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f985 	bl	8009dee <USBD_CtlError>
    return USBD_FAIL;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e08c      	b.n	8009c02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d002      	beq.n	8009afa <USBD_SetConfig+0x3e>
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d029      	beq.n	8009b4c <USBD_SetConfig+0x90>
 8009af8:	e075      	b.n	8009be6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009afa:	4b44      	ldr	r3, [pc, #272]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d020      	beq.n	8009b44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009b02:	4b42      	ldr	r3, [pc, #264]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7fe ffcd 	bl	8008ab2 <USBD_SetClassConfig>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d008      	beq.n	8009b34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f962 	bl	8009dee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b32:	e065      	b.n	8009c00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fa38 	bl	8009faa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2203      	movs	r2, #3
 8009b3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b42:	e05d      	b.n	8009c00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fa30 	bl	8009faa <USBD_CtlSendStatus>
      break;
 8009b4a:	e059      	b.n	8009c00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d112      	bne.n	8009b7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b66:	4b29      	ldr	r3, [pc, #164]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7fe ffbc 	bl	8008aea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa19 	bl	8009faa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b78:	e042      	b.n	8009c00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b7a:	4b24      	ldr	r3, [pc, #144]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d02a      	beq.n	8009bde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7fe ffaa 	bl	8008aea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b96:	4b1d      	ldr	r3, [pc, #116]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7fe ff83 	bl	8008ab2 <USBD_SetClassConfig>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00f      	beq.n	8009bd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f918 	bl	8009dee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fe ff8f 	bl	8008aea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009bd4:	e014      	b.n	8009c00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f9e7 	bl	8009faa <USBD_CtlSendStatus>
      break;
 8009bdc:	e010      	b.n	8009c00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f9e3 	bl	8009faa <USBD_CtlSendStatus>
      break;
 8009be4:	e00c      	b.n	8009c00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f900 	bl	8009dee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bee:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <USBD_SetConfig+0x150>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7fe ff78 	bl	8008aea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bfe:	bf00      	nop
  }

  return ret;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000708 	.word	0x20000708

08009c10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	88db      	ldrh	r3, [r3, #6]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d004      	beq.n	8009c2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f8e2 	bl	8009dee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c2a:	e023      	b.n	8009c74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	dc02      	bgt.n	8009c3e <USBD_GetConfig+0x2e>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dc03      	bgt.n	8009c44 <USBD_GetConfig+0x34>
 8009c3c:	e015      	b.n	8009c6a <USBD_GetConfig+0x5a>
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d00b      	beq.n	8009c5a <USBD_GetConfig+0x4a>
 8009c42:	e012      	b.n	8009c6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	2201      	movs	r2, #1
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f948 	bl	8009ee8 <USBD_CtlSendData>
        break;
 8009c58:	e00c      	b.n	8009c74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f940 	bl	8009ee8 <USBD_CtlSendData>
        break;
 8009c68:	e004      	b.n	8009c74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f8be 	bl	8009dee <USBD_CtlError>
        break;
 8009c72:	bf00      	nop
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d81e      	bhi.n	8009cd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	88db      	ldrh	r3, [r3, #6]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d004      	beq.n	8009ca6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f8a5 	bl	8009dee <USBD_CtlError>
        break;
 8009ca4:	e01a      	b.n	8009cdc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f043 0202 	orr.w	r2, r3, #2
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	330c      	adds	r3, #12
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f90c 	bl	8009ee8 <USBD_CtlSendData>
      break;
 8009cd0:	e004      	b.n	8009cdc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f88a 	bl	8009dee <USBD_CtlError>
      break;
 8009cda:	bf00      	nop
  }
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	885b      	ldrh	r3, [r3, #2]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d107      	bne.n	8009d06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f953 	bl	8009faa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009d04:	e013      	b.n	8009d2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	885b      	ldrh	r3, [r3, #2]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d10b      	bne.n	8009d26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	889b      	ldrh	r3, [r3, #4]
 8009d12:	0a1b      	lsrs	r3, r3, #8
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f943 	bl	8009faa <USBD_CtlSendStatus>
}
 8009d24:	e003      	b.n	8009d2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f860 	bl	8009dee <USBD_CtlError>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d80b      	bhi.n	8009d66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d10c      	bne.n	8009d70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f923 	bl	8009faa <USBD_CtlSendStatus>
      }
      break;
 8009d64:	e004      	b.n	8009d70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f840 	bl	8009dee <USBD_CtlError>
      break;
 8009d6e:	e000      	b.n	8009d72 <USBD_ClrFeature+0x3c>
      break;
 8009d70:	bf00      	nop
  }
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	781a      	ldrb	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	781a      	ldrb	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7ff fa3d 	bl	8009224 <SWAPBYTE>
 8009daa:	4603      	mov	r3, r0
 8009dac:	461a      	mov	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7ff fa30 	bl	8009224 <SWAPBYTE>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff fa23 	bl	8009224 <SWAPBYTE>
 8009dde:	4603      	mov	r3, r0
 8009de0:	461a      	mov	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	80da      	strh	r2, [r3, #6]
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009df8:	2180      	movs	r1, #128	@ 0x80
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fd58 	bl	800a8b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e00:	2100      	movs	r1, #0
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fd54 	bl	800a8b0 <USBD_LL_StallEP>
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d042      	beq.n	8009eac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009e2a:	6938      	ldr	r0, [r7, #16]
 8009e2c:	f000 f842 	bl	8009eb4 <USBD_GetLen>
 8009e30:	4603      	mov	r3, r0
 8009e32:	3301      	adds	r3, #1
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e3a:	d808      	bhi.n	8009e4e <USBD_GetString+0x3e>
 8009e3c:	6938      	ldr	r0, [r7, #16]
 8009e3e:	f000 f839 	bl	8009eb4 <USBD_GetLen>
 8009e42:	4603      	mov	r3, r0
 8009e44:	3301      	adds	r3, #1
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	e001      	b.n	8009e52 <USBD_GetString+0x42>
 8009e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	3301      	adds	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	2203      	movs	r2, #3
 8009e70:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	3301      	adds	r3, #1
 8009e76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e78:	e013      	b.n	8009ea2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	4413      	add	r3, r2
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	7812      	ldrb	r2, [r2, #0]
 8009e84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	613b      	str	r3, [r7, #16]
    idx++;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	4413      	add	r3, r2
 8009e98:	2200      	movs	r2, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e7      	bne.n	8009e7a <USBD_GetString+0x6a>
 8009eaa:	e000      	b.n	8009eae <USBD_GetString+0x9e>
    return;
 8009eac:	bf00      	nop
  }
}
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ec4:	e005      	b.n	8009ed2 <USBD_GetLen+0x1e>
  {
    len++;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1f5      	bne.n	8009ec6 <USBD_GetLen+0x12>
  }

  return len;
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	2100      	movs	r1, #0
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 fd54 	bl	800a9c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	2100      	movs	r1, #0
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 fd43 	bl	800a9c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2203      	movs	r2, #3
 8009f56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	2100      	movs	r1, #0
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 fd43 	bl	800aa04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fd32 	bl	800aa04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fcfe 	bl	800a9c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2205      	movs	r2, #5
 8009fdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fd0c 	bl	800aa04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	4912      	ldr	r1, [pc, #72]	@ (800a048 <MX_USB_DEVICE_Init+0x50>)
 800a000:	4812      	ldr	r0, [pc, #72]	@ (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a002:	f7fe fcd9 	bl	80089b8 <USBD_Init>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a00c:	f7f7 f8dc 	bl	80011c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a010:	490f      	ldr	r1, [pc, #60]	@ (800a050 <MX_USB_DEVICE_Init+0x58>)
 800a012:	480e      	ldr	r0, [pc, #56]	@ (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a014:	f7fe fd00 	bl	8008a18 <USBD_RegisterClass>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a01e:	f7f7 f8d3 	bl	80011c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a022:	490c      	ldr	r1, [pc, #48]	@ (800a054 <MX_USB_DEVICE_Init+0x5c>)
 800a024:	4809      	ldr	r0, [pc, #36]	@ (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a026:	f7fe fbf7 	bl	8008818 <USBD_CDC_RegisterInterface>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a030:	f7f7 f8ca 	bl	80011c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a034:	4805      	ldr	r0, [pc, #20]	@ (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a036:	f7fe fd25 	bl	8008a84 <USBD_Start>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a040:	f7f7 f8c2 	bl	80011c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a044:	bf00      	nop
 800a046:	bd80      	pop	{r7, pc}
 800a048:	200000c0 	.word	0x200000c0
 800a04c:	2000070c 	.word	0x2000070c
 800a050:	20000024 	.word	0x20000024
 800a054:	200000ac 	.word	0x200000ac

0800a058 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a05c:	2200      	movs	r2, #0
 800a05e:	4905      	ldr	r1, [pc, #20]	@ (800a074 <CDC_Init_FS+0x1c>)
 800a060:	4805      	ldr	r0, [pc, #20]	@ (800a078 <CDC_Init_FS+0x20>)
 800a062:	f7fe fbf3 	bl	800884c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a066:	4905      	ldr	r1, [pc, #20]	@ (800a07c <CDC_Init_FS+0x24>)
 800a068:	4803      	ldr	r0, [pc, #12]	@ (800a078 <CDC_Init_FS+0x20>)
 800a06a:	f7fe fc11 	bl	8008890 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a06e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a070:	4618      	mov	r0, r3
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20000be8 	.word	0x20000be8
 800a078:	2000070c 	.word	0x2000070c
 800a07c:	200009e8 	.word	0x200009e8

0800a080 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a084:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a086:	4618      	mov	r0, r3
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	6039      	str	r1, [r7, #0]
 800a09a:	71fb      	strb	r3, [r7, #7]
 800a09c:	4613      	mov	r3, r2
 800a09e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b23      	cmp	r3, #35	@ 0x23
 800a0a4:	f200 8098 	bhi.w	800a1d8 <CDC_Control_FS+0x148>
 800a0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b0 <CDC_Control_FS+0x20>)
 800a0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ae:	bf00      	nop
 800a0b0:	0800a1d9 	.word	0x0800a1d9
 800a0b4:	0800a1d9 	.word	0x0800a1d9
 800a0b8:	0800a1d9 	.word	0x0800a1d9
 800a0bc:	0800a1d9 	.word	0x0800a1d9
 800a0c0:	0800a1d9 	.word	0x0800a1d9
 800a0c4:	0800a1d9 	.word	0x0800a1d9
 800a0c8:	0800a1d9 	.word	0x0800a1d9
 800a0cc:	0800a1d9 	.word	0x0800a1d9
 800a0d0:	0800a1d9 	.word	0x0800a1d9
 800a0d4:	0800a1d9 	.word	0x0800a1d9
 800a0d8:	0800a1d9 	.word	0x0800a1d9
 800a0dc:	0800a1d9 	.word	0x0800a1d9
 800a0e0:	0800a1d9 	.word	0x0800a1d9
 800a0e4:	0800a1d9 	.word	0x0800a1d9
 800a0e8:	0800a1d9 	.word	0x0800a1d9
 800a0ec:	0800a1d9 	.word	0x0800a1d9
 800a0f0:	0800a1d9 	.word	0x0800a1d9
 800a0f4:	0800a1d9 	.word	0x0800a1d9
 800a0f8:	0800a1d9 	.word	0x0800a1d9
 800a0fc:	0800a1d9 	.word	0x0800a1d9
 800a100:	0800a1d9 	.word	0x0800a1d9
 800a104:	0800a1d9 	.word	0x0800a1d9
 800a108:	0800a1d9 	.word	0x0800a1d9
 800a10c:	0800a1d9 	.word	0x0800a1d9
 800a110:	0800a1d9 	.word	0x0800a1d9
 800a114:	0800a1d9 	.word	0x0800a1d9
 800a118:	0800a1d9 	.word	0x0800a1d9
 800a11c:	0800a1d9 	.word	0x0800a1d9
 800a120:	0800a1d9 	.word	0x0800a1d9
 800a124:	0800a1d9 	.word	0x0800a1d9
 800a128:	0800a1d9 	.word	0x0800a1d9
 800a12c:	0800a1d9 	.word	0x0800a1d9
 800a130:	0800a141 	.word	0x0800a141
 800a134:	0800a185 	.word	0x0800a185
 800a138:	0800a1d9 	.word	0x0800a1d9
 800a13c:	0800a1d9 	.word	0x0800a1d9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	431a      	orrs	r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	3302      	adds	r3, #2
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	041b      	lsls	r3, r3, #16
 800a158:	431a      	orrs	r2, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	3303      	adds	r3, #3
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	061b      	lsls	r3, r3, #24
 800a162:	4313      	orrs	r3, r2
 800a164:	461a      	mov	r2, r3
 800a166:	4b20      	ldr	r3, [pc, #128]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a168:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	791a      	ldrb	r2, [r3, #4]
 800a16e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a170:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	795a      	ldrb	r2, [r3, #5]
 800a176:	4b1c      	ldr	r3, [pc, #112]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a178:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	799a      	ldrb	r2, [r3, #6]
 800a17e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a180:	719a      	strb	r2, [r3, #6]
     break;
 800a182:	e02a      	b.n	800a1da <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a184:	4b18      	ldr	r3, [pc, #96]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800a18e:	4b16      	ldr	r3, [pc, #88]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	0a1a      	lsrs	r2, r3, #8
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	3301      	adds	r3, #1
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800a19c:	4b12      	ldr	r3, [pc, #72]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	0c1a      	lsrs	r2, r3, #16
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	3302      	adds	r3, #2
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800a1aa:	4b0f      	ldr	r3, [pc, #60]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	0e1a      	lsrs	r2, r3, #24
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	3303      	adds	r3, #3
 800a1b4:	b2d2      	uxtb	r2, r2
 800a1b6:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a1be:	7912      	ldrb	r2, [r2, #4]
 800a1c0:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	3305      	adds	r3, #5
 800a1c6:	4a08      	ldr	r2, [pc, #32]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a1c8:	7952      	ldrb	r2, [r2, #5]
 800a1ca:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	3306      	adds	r3, #6
 800a1d0:	4a05      	ldr	r2, [pc, #20]	@ (800a1e8 <CDC_Control_FS+0x158>)
 800a1d2:	7992      	ldrb	r2, [r2, #6]
 800a1d4:	701a      	strb	r2, [r3, #0]
     break;
 800a1d6:	e000      	b.n	800a1da <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1d8:	bf00      	nop
  }

  return (USBD_OK);
 800a1da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	200000a4 	.word	0x200000a4

0800a1ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800a1f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a228 <CDC_Receive_FS+0x3c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800a1fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a228 <CDC_Receive_FS+0x3c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	6812      	ldr	r2, [r2, #0]
 800a206:	b292      	uxth	r2, r2
 800a208:	4611      	mov	r1, r2
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	4806      	ldr	r0, [pc, #24]	@ (800a22c <CDC_Receive_FS+0x40>)
 800a212:	f7fe fb3d 	bl	8008890 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a216:	4805      	ldr	r0, [pc, #20]	@ (800a22c <CDC_Receive_FS+0x40>)
 800a218:	f7fe fb98 	bl	800894c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a21c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000de8 	.word	0x20000de8
 800a22c:	2000070c 	.word	0x2000070c

0800a230 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a240:	4b0d      	ldr	r3, [pc, #52]	@ (800a278 <CDC_Transmit_FS+0x48>)
 800a242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a246:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a252:	2301      	movs	r3, #1
 800a254:	e00b      	b.n	800a26e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a256:	887b      	ldrh	r3, [r7, #2]
 800a258:	461a      	mov	r2, r3
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	4806      	ldr	r0, [pc, #24]	@ (800a278 <CDC_Transmit_FS+0x48>)
 800a25e:	f7fe faf5 	bl	800884c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a262:	4805      	ldr	r0, [pc, #20]	@ (800a278 <CDC_Transmit_FS+0x48>)
 800a264:	f7fe fb32 	bl	80088cc <USBD_CDC_TransmitPacket>
 800a268:	4603      	mov	r3, r0
 800a26a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	2000070c 	.word	0x2000070c

0800a27c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a28e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a292:	4618      	mov	r0, r3
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
	...

0800a2a0 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a2a8:	4a04      	ldr	r2, [pc, #16]	@ (800a2bc <CDC_AttachRxData+0x1c>)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6013      	str	r3, [r2, #0]
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000de8 	.word	0x20000de8

0800a2c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2212      	movs	r2, #18
 800a2d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2d2:	4b03      	ldr	r3, [pc, #12]	@ (800a2e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	200000dc 	.word	0x200000dc

0800a2e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2204      	movs	r2, #4
 800a2f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2f6:	4b03      	ldr	r3, [pc, #12]	@ (800a304 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	200000f0 	.word	0x200000f0

0800a308 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	6039      	str	r1, [r7, #0]
 800a312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4907      	ldr	r1, [pc, #28]	@ (800a33c <USBD_FS_ProductStrDescriptor+0x34>)
 800a31e:	4808      	ldr	r0, [pc, #32]	@ (800a340 <USBD_FS_ProductStrDescriptor+0x38>)
 800a320:	f7ff fd76 	bl	8009e10 <USBD_GetString>
 800a324:	e004      	b.n	800a330 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	4904      	ldr	r1, [pc, #16]	@ (800a33c <USBD_FS_ProductStrDescriptor+0x34>)
 800a32a:	4805      	ldr	r0, [pc, #20]	@ (800a340 <USBD_FS_ProductStrDescriptor+0x38>)
 800a32c:	f7ff fd70 	bl	8009e10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a330:	4b02      	ldr	r3, [pc, #8]	@ (800a33c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000dec 	.word	0x20000dec
 800a340:	0800b478 	.word	0x0800b478

0800a344 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	4904      	ldr	r1, [pc, #16]	@ (800a364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a354:	4804      	ldr	r0, [pc, #16]	@ (800a368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a356:	f7ff fd5b 	bl	8009e10 <USBD_GetString>
  return USBD_StrDesc;
 800a35a:	4b02      	ldr	r3, [pc, #8]	@ (800a364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20000dec 	.word	0x20000dec
 800a368:	0800b490 	.word	0x0800b490

0800a36c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	221a      	movs	r2, #26
 800a37c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a37e:	f000 f843 	bl	800a408 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a382:	4b02      	ldr	r3, [pc, #8]	@ (800a38c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	200000f4 	.word	0x200000f4

0800a390 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d105      	bne.n	800a3ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	4907      	ldr	r1, [pc, #28]	@ (800a3c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3a6:	4808      	ldr	r0, [pc, #32]	@ (800a3c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3a8:	f7ff fd32 	bl	8009e10 <USBD_GetString>
 800a3ac:	e004      	b.n	800a3b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	4904      	ldr	r1, [pc, #16]	@ (800a3c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3b2:	4805      	ldr	r0, [pc, #20]	@ (800a3c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3b4:	f7ff fd2c 	bl	8009e10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b8:	4b02      	ldr	r3, [pc, #8]	@ (800a3c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000dec 	.word	0x20000dec
 800a3c8:	0800b4a4 	.word	0x0800b4a4

0800a3cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	6039      	str	r1, [r7, #0]
 800a3d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d105      	bne.n	800a3ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	4907      	ldr	r1, [pc, #28]	@ (800a400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3e2:	4808      	ldr	r0, [pc, #32]	@ (800a404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3e4:	f7ff fd14 	bl	8009e10 <USBD_GetString>
 800a3e8:	e004      	b.n	800a3f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	4904      	ldr	r1, [pc, #16]	@ (800a400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3ee:	4805      	ldr	r0, [pc, #20]	@ (800a404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3f0:	f7ff fd0e 	bl	8009e10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3f4:	4b02      	ldr	r3, [pc, #8]	@ (800a400 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000dec 	.word	0x20000dec
 800a404:	0800b4b0 	.word	0x0800b4b0

0800a408 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a40e:	4b0f      	ldr	r3, [pc, #60]	@ (800a44c <Get_SerialNum+0x44>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a414:	4b0e      	ldr	r3, [pc, #56]	@ (800a450 <Get_SerialNum+0x48>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a41a:	4b0e      	ldr	r3, [pc, #56]	@ (800a454 <Get_SerialNum+0x4c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4413      	add	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a42e:	2208      	movs	r2, #8
 800a430:	4909      	ldr	r1, [pc, #36]	@ (800a458 <Get_SerialNum+0x50>)
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f000 f814 	bl	800a460 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a438:	2204      	movs	r2, #4
 800a43a:	4908      	ldr	r1, [pc, #32]	@ (800a45c <Get_SerialNum+0x54>)
 800a43c:	68b8      	ldr	r0, [r7, #8]
 800a43e:	f000 f80f 	bl	800a460 <IntToUnicode>
  }
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	1fff7a10 	.word	0x1fff7a10
 800a450:	1fff7a14 	.word	0x1fff7a14
 800a454:	1fff7a18 	.word	0x1fff7a18
 800a458:	200000f6 	.word	0x200000f6
 800a45c:	20000106 	.word	0x20000106

0800a460 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	4613      	mov	r3, r2
 800a46c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a472:	2300      	movs	r3, #0
 800a474:	75fb      	strb	r3, [r7, #23]
 800a476:	e027      	b.n	800a4c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	0f1b      	lsrs	r3, r3, #28
 800a47c:	2b09      	cmp	r3, #9
 800a47e:	d80b      	bhi.n	800a498 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	0f1b      	lsrs	r3, r3, #28
 800a484:	b2da      	uxtb	r2, r3
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	4619      	mov	r1, r3
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	440b      	add	r3, r1
 800a490:	3230      	adds	r2, #48	@ 0x30
 800a492:	b2d2      	uxtb	r2, r2
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	e00a      	b.n	800a4ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	0f1b      	lsrs	r3, r3, #28
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	440b      	add	r3, r1
 800a4a8:	3237      	adds	r2, #55	@ 0x37
 800a4aa:	b2d2      	uxtb	r2, r2
 800a4ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	4413      	add	r3, r2
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	75fb      	strb	r3, [r7, #23]
 800a4c8:	7dfa      	ldrb	r2, [r7, #23]
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d3d3      	bcc.n	800a478 <IntToUnicode+0x18>
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	@ 0x28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	609a      	str	r2, [r3, #8]
 800a4f4:	60da      	str	r2, [r3, #12]
 800a4f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a500:	d13a      	bne.n	800a578 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a502:	2300      	movs	r3, #0
 800a504:	613b      	str	r3, [r7, #16]
 800a506:	4b1e      	ldr	r3, [pc, #120]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50a:	4a1d      	ldr	r2, [pc, #116]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a50c:	f043 0301 	orr.w	r3, r3, #1
 800a510:	6313      	str	r3, [r2, #48]	@ 0x30
 800a512:	4b1b      	ldr	r3, [pc, #108]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a51e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a524:	2302      	movs	r3, #2
 800a526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a528:	2300      	movs	r3, #0
 800a52a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a52c:	2303      	movs	r3, #3
 800a52e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a530:	230a      	movs	r3, #10
 800a532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a534:	f107 0314 	add.w	r3, r7, #20
 800a538:	4619      	mov	r1, r3
 800a53a:	4812      	ldr	r0, [pc, #72]	@ (800a584 <HAL_PCD_MspInit+0xa4>)
 800a53c:	f7f8 f910 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a540:	4b0f      	ldr	r3, [pc, #60]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a544:	4a0e      	ldr	r2, [pc, #56]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a54a:	6353      	str	r3, [r2, #52]	@ 0x34
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	4b0b      	ldr	r3, [pc, #44]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a554:	4a0a      	ldr	r2, [pc, #40]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a55a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a55c:	4b08      	ldr	r3, [pc, #32]	@ (800a580 <HAL_PCD_MspInit+0xa0>)
 800a55e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a564:	60fb      	str	r3, [r7, #12]
 800a566:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a568:	2200      	movs	r2, #0
 800a56a:	2100      	movs	r1, #0
 800a56c:	2043      	movs	r0, #67	@ 0x43
 800a56e:	f7f8 f80c 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a572:	2043      	movs	r0, #67	@ 0x43
 800a574:	f7f8 f825 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a578:	bf00      	nop
 800a57a:	3728      	adds	r7, #40	@ 0x28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	40023800 	.word	0x40023800
 800a584:	40020000 	.word	0x40020000

0800a588 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7fe fabd 	bl	8008b1e <USBD_LL_SetupStage>
}
 800a5a4:	bf00      	nop
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5be:	78fa      	ldrb	r2, [r7, #3]
 800a5c0:	6879      	ldr	r1, [r7, #4]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	440b      	add	r3, r1
 800a5cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	f7fe faf7 	bl	8008bc8 <USBD_LL_DataOutStage>
}
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	440b      	add	r3, r1
 800a602:	3320      	adds	r3, #32
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	78fb      	ldrb	r3, [r7, #3]
 800a608:	4619      	mov	r1, r3
 800a60a:	f7fe fb99 	bl	8008d40 <USBD_LL_DataInStage>
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe fcdd 	bl	8008fe4 <USBD_LL_SOF>
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a63a:	2301      	movs	r3, #1
 800a63c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	79db      	ldrb	r3, [r3, #7]
 800a642:	2b02      	cmp	r3, #2
 800a644:	d001      	beq.n	800a64a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a646:	f7f6 fdbf 	bl	80011c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a650:	7bfa      	ldrb	r2, [r7, #15]
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fc81 	bl	8008f5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe fc28 	bl	8008eb6 <USBD_LL_Reset>
}
 800a666:	bf00      	nop
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fc7c 	bl	8008f7c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a696:	f043 0301 	orr.w	r3, r3, #1
 800a69a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7adb      	ldrb	r3, [r3, #11]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6a4:	4b04      	ldr	r3, [pc, #16]	@ (800a6b8 <HAL_PCD_SuspendCallback+0x48>)
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	4a03      	ldr	r2, [pc, #12]	@ (800a6b8 <HAL_PCD_SuspendCallback+0x48>)
 800a6aa:	f043 0306 	orr.w	r3, r3, #6
 800a6ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	e000ed00 	.word	0xe000ed00

0800a6bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fc72 	bl	8008fb4 <USBD_LL_Resume>
}
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ea:	78fa      	ldrb	r2, [r7, #3]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fcca 	bl	8009088 <USBD_LL_IsoOUTIncomplete>
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	4611      	mov	r1, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fc86 	bl	8009024 <USBD_LL_IsoINIncomplete>
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe fcdc 	bl	80090ec <USBD_LL_DevConnected>
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fcd9 	bl	8009102 <USBD_LL_DevDisconnected>
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d13c      	bne.n	800a7e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a768:	4a20      	ldr	r2, [pc, #128]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a1e      	ldr	r2, [pc, #120]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a774:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a778:	4b1c      	ldr	r3, [pc, #112]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a77a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a77e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a780:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a782:	2204      	movs	r2, #4
 800a784:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a786:	4b19      	ldr	r3, [pc, #100]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a788:	2202      	movs	r2, #2
 800a78a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a78c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a78e:	2200      	movs	r2, #0
 800a790:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a792:	4b16      	ldr	r3, [pc, #88]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a794:	2202      	movs	r2, #2
 800a796:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a798:	4b14      	ldr	r3, [pc, #80]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a79e:	4b13      	ldr	r3, [pc, #76]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a7a4:	4b11      	ldr	r3, [pc, #68]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a7aa:	4b10      	ldr	r3, [pc, #64]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7b6:	480d      	ldr	r0, [pc, #52]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7b8:	f7f9 fa97 	bl	8003cea <HAL_PCD_Init>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a7c2:	f7f6 fd01 	bl	80011c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a7c6:	2180      	movs	r1, #128	@ 0x80
 800a7c8:	4808      	ldr	r0, [pc, #32]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7ca:	f7fa fcc4 	bl	8005156 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a7ce:	2240      	movs	r2, #64	@ 0x40
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4806      	ldr	r0, [pc, #24]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7d4:	f7fa fc78 	bl	80050c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a7d8:	2280      	movs	r2, #128	@ 0x80
 800a7da:	2101      	movs	r1, #1
 800a7dc:	4803      	ldr	r0, [pc, #12]	@ (800a7ec <USBD_LL_Init+0x94>)
 800a7de:	f7fa fc73 	bl	80050c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	20000fec 	.word	0x20000fec

0800a7f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a806:	4618      	mov	r0, r3
 800a808:	f7f9 fb7e 	bl	8003f08 <HAL_PCD_Start>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f942 	bl	800aa9c <USBD_Get_USB_Status>
 800a818:	4603      	mov	r3, r0
 800a81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	4608      	mov	r0, r1
 800a830:	4611      	mov	r1, r2
 800a832:	461a      	mov	r2, r3
 800a834:	4603      	mov	r3, r0
 800a836:	70fb      	strb	r3, [r7, #3]
 800a838:	460b      	mov	r3, r1
 800a83a:	70bb      	strb	r3, [r7, #2]
 800a83c:	4613      	mov	r3, r2
 800a83e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a84e:	78bb      	ldrb	r3, [r7, #2]
 800a850:	883a      	ldrh	r2, [r7, #0]
 800a852:	78f9      	ldrb	r1, [r7, #3]
 800a854:	f7fa f852 	bl	80048fc <HAL_PCD_EP_Open>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 f91c 	bl	800aa9c <USBD_Get_USB_Status>
 800a864:	4603      	mov	r3, r0
 800a866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a868:	7bbb      	ldrb	r3, [r7, #14]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	460b      	mov	r3, r1
 800a87c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f7fa f89d 	bl	80049d0 <HAL_PCD_EP_Close>
 800a896:	4603      	mov	r3, r0
 800a898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f000 f8fd 	bl	800aa9c <USBD_Get_USB_Status>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8ca:	78fa      	ldrb	r2, [r7, #3]
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fa f955 	bl	8004b7e <HAL_PCD_EP_SetStall>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 f8de 	bl	800aa9c <USBD_Get_USB_Status>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a908:	78fa      	ldrb	r2, [r7, #3]
 800a90a:	4611      	mov	r1, r2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fa f999 	bl	8004c44 <HAL_PCD_EP_ClrStall>
 800a912:	4603      	mov	r3, r0
 800a914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 f8bf 	bl	800aa9c <USBD_Get_USB_Status>
 800a91e:	4603      	mov	r3, r0
 800a920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a922:	7bbb      	ldrb	r3, [r7, #14]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a93e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a944:	2b00      	cmp	r3, #0
 800a946:	da0b      	bge.n	800a960 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	4613      	mov	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	3316      	adds	r3, #22
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	e00b      	b.n	800a978 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a966:	68f9      	ldr	r1, [r7, #12]
 800a968:	4613      	mov	r3, r2
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	440b      	add	r3, r1
 800a972:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a976:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a99e:	78fa      	ldrb	r2, [r7, #3]
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7f9 ff86 	bl	80048b4 <HAL_PCD_SetAddress>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 f874 	bl	800aa9c <USBD_Get_USB_Status>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b086      	sub	sp, #24
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	60f8      	str	r0, [r7, #12]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a9e0:	7af9      	ldrb	r1, [r7, #11]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	f7fa f890 	bl	8004b0a <HAL_PCD_EP_Transmit>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 f853 	bl	800aa9c <USBD_Get_USB_Status>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	607a      	str	r2, [r7, #4]
 800aa0e:	603b      	str	r3, [r7, #0]
 800aa10:	460b      	mov	r3, r1
 800aa12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa22:	7af9      	ldrb	r1, [r7, #11]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	f7fa f81c 	bl	8004a64 <HAL_PCD_EP_Receive>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 f832 	bl	800aa9c <USBD_Get_USB_Status>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa58:	78fa      	ldrb	r2, [r7, #3]
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fa f83c 	bl	8004ada <HAL_PCD_EP_GetRxCount>
 800aa62:	4603      	mov	r3, r0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa74:	4b03      	ldr	r3, [pc, #12]	@ (800aa84 <USBD_static_malloc+0x18>)
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	200014d0 	.word	0x200014d0

0800aa88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]

}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d817      	bhi.n	800aae0 <USBD_Get_USB_Status+0x44>
 800aab0:	a201      	add	r2, pc, #4	@ (adr r2, 800aab8 <USBD_Get_USB_Status+0x1c>)
 800aab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab6:	bf00      	nop
 800aab8:	0800aac9 	.word	0x0800aac9
 800aabc:	0800aacf 	.word	0x0800aacf
 800aac0:	0800aad5 	.word	0x0800aad5
 800aac4:	0800aadb 	.word	0x0800aadb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
    break;
 800aacc:	e00b      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aace:	2303      	movs	r3, #3
 800aad0:	73fb      	strb	r3, [r7, #15]
    break;
 800aad2:	e008      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aad4:	2301      	movs	r3, #1
 800aad6:	73fb      	strb	r3, [r7, #15]
    break;
 800aad8:	e005      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aada:	2303      	movs	r3, #3
 800aadc:	73fb      	strb	r3, [r7, #15]
    break;
 800aade:	e002      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aae0:	2303      	movs	r3, #3
 800aae2:	73fb      	strb	r3, [r7, #15]
    break;
 800aae4:	bf00      	nop
  }
  return usb_status;
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <malloc>:
 800aaf4:	4b02      	ldr	r3, [pc, #8]	@ (800ab00 <malloc+0xc>)
 800aaf6:	4601      	mov	r1, r0
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	f000 b825 	b.w	800ab48 <_malloc_r>
 800aafe:	bf00      	nop
 800ab00:	20000110 	.word	0x20000110

0800ab04 <sbrk_aligned>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	4e0f      	ldr	r6, [pc, #60]	@ (800ab44 <sbrk_aligned+0x40>)
 800ab08:	460c      	mov	r4, r1
 800ab0a:	6831      	ldr	r1, [r6, #0]
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	b911      	cbnz	r1, 800ab16 <sbrk_aligned+0x12>
 800ab10:	f000 f8d0 	bl	800acb4 <_sbrk_r>
 800ab14:	6030      	str	r0, [r6, #0]
 800ab16:	4621      	mov	r1, r4
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f000 f8cb 	bl	800acb4 <_sbrk_r>
 800ab1e:	1c43      	adds	r3, r0, #1
 800ab20:	d103      	bne.n	800ab2a <sbrk_aligned+0x26>
 800ab22:	f04f 34ff 	mov.w	r4, #4294967295
 800ab26:	4620      	mov	r0, r4
 800ab28:	bd70      	pop	{r4, r5, r6, pc}
 800ab2a:	1cc4      	adds	r4, r0, #3
 800ab2c:	f024 0403 	bic.w	r4, r4, #3
 800ab30:	42a0      	cmp	r0, r4
 800ab32:	d0f8      	beq.n	800ab26 <sbrk_aligned+0x22>
 800ab34:	1a21      	subs	r1, r4, r0
 800ab36:	4628      	mov	r0, r5
 800ab38:	f000 f8bc 	bl	800acb4 <_sbrk_r>
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d1f2      	bne.n	800ab26 <sbrk_aligned+0x22>
 800ab40:	e7ef      	b.n	800ab22 <sbrk_aligned+0x1e>
 800ab42:	bf00      	nop
 800ab44:	200016f0 	.word	0x200016f0

0800ab48 <_malloc_r>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	1ccd      	adds	r5, r1, #3
 800ab4e:	f025 0503 	bic.w	r5, r5, #3
 800ab52:	3508      	adds	r5, #8
 800ab54:	2d0c      	cmp	r5, #12
 800ab56:	bf38      	it	cc
 800ab58:	250c      	movcc	r5, #12
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	db01      	blt.n	800ab64 <_malloc_r+0x1c>
 800ab60:	42a9      	cmp	r1, r5
 800ab62:	d904      	bls.n	800ab6e <_malloc_r+0x26>
 800ab64:	230c      	movs	r3, #12
 800ab66:	6033      	str	r3, [r6, #0]
 800ab68:	2000      	movs	r0, #0
 800ab6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac44 <_malloc_r+0xfc>
 800ab72:	f000 f869 	bl	800ac48 <__malloc_lock>
 800ab76:	f8d8 3000 	ldr.w	r3, [r8]
 800ab7a:	461c      	mov	r4, r3
 800ab7c:	bb44      	cbnz	r4, 800abd0 <_malloc_r+0x88>
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7ff ffbf 	bl	800ab04 <sbrk_aligned>
 800ab86:	1c43      	adds	r3, r0, #1
 800ab88:	4604      	mov	r4, r0
 800ab8a:	d158      	bne.n	800ac3e <_malloc_r+0xf6>
 800ab8c:	f8d8 4000 	ldr.w	r4, [r8]
 800ab90:	4627      	mov	r7, r4
 800ab92:	2f00      	cmp	r7, #0
 800ab94:	d143      	bne.n	800ac1e <_malloc_r+0xd6>
 800ab96:	2c00      	cmp	r4, #0
 800ab98:	d04b      	beq.n	800ac32 <_malloc_r+0xea>
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	4630      	mov	r0, r6
 800aba0:	eb04 0903 	add.w	r9, r4, r3
 800aba4:	f000 f886 	bl	800acb4 <_sbrk_r>
 800aba8:	4581      	cmp	r9, r0
 800abaa:	d142      	bne.n	800ac32 <_malloc_r+0xea>
 800abac:	6821      	ldr	r1, [r4, #0]
 800abae:	1a6d      	subs	r5, r5, r1
 800abb0:	4629      	mov	r1, r5
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7ff ffa6 	bl	800ab04 <sbrk_aligned>
 800abb8:	3001      	adds	r0, #1
 800abba:	d03a      	beq.n	800ac32 <_malloc_r+0xea>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	442b      	add	r3, r5
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	f8d8 3000 	ldr.w	r3, [r8]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	bb62      	cbnz	r2, 800ac24 <_malloc_r+0xdc>
 800abca:	f8c8 7000 	str.w	r7, [r8]
 800abce:	e00f      	b.n	800abf0 <_malloc_r+0xa8>
 800abd0:	6822      	ldr	r2, [r4, #0]
 800abd2:	1b52      	subs	r2, r2, r5
 800abd4:	d420      	bmi.n	800ac18 <_malloc_r+0xd0>
 800abd6:	2a0b      	cmp	r2, #11
 800abd8:	d917      	bls.n	800ac0a <_malloc_r+0xc2>
 800abda:	1961      	adds	r1, r4, r5
 800abdc:	42a3      	cmp	r3, r4
 800abde:	6025      	str	r5, [r4, #0]
 800abe0:	bf18      	it	ne
 800abe2:	6059      	strne	r1, [r3, #4]
 800abe4:	6863      	ldr	r3, [r4, #4]
 800abe6:	bf08      	it	eq
 800abe8:	f8c8 1000 	streq.w	r1, [r8]
 800abec:	5162      	str	r2, [r4, r5]
 800abee:	604b      	str	r3, [r1, #4]
 800abf0:	4630      	mov	r0, r6
 800abf2:	f000 f82f 	bl	800ac54 <__malloc_unlock>
 800abf6:	f104 000b 	add.w	r0, r4, #11
 800abfa:	1d23      	adds	r3, r4, #4
 800abfc:	f020 0007 	bic.w	r0, r0, #7
 800ac00:	1ac2      	subs	r2, r0, r3
 800ac02:	bf1c      	itt	ne
 800ac04:	1a1b      	subne	r3, r3, r0
 800ac06:	50a3      	strne	r3, [r4, r2]
 800ac08:	e7af      	b.n	800ab6a <_malloc_r+0x22>
 800ac0a:	6862      	ldr	r2, [r4, #4]
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	bf0c      	ite	eq
 800ac10:	f8c8 2000 	streq.w	r2, [r8]
 800ac14:	605a      	strne	r2, [r3, #4]
 800ac16:	e7eb      	b.n	800abf0 <_malloc_r+0xa8>
 800ac18:	4623      	mov	r3, r4
 800ac1a:	6864      	ldr	r4, [r4, #4]
 800ac1c:	e7ae      	b.n	800ab7c <_malloc_r+0x34>
 800ac1e:	463c      	mov	r4, r7
 800ac20:	687f      	ldr	r7, [r7, #4]
 800ac22:	e7b6      	b.n	800ab92 <_malloc_r+0x4a>
 800ac24:	461a      	mov	r2, r3
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	42a3      	cmp	r3, r4
 800ac2a:	d1fb      	bne.n	800ac24 <_malloc_r+0xdc>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	6053      	str	r3, [r2, #4]
 800ac30:	e7de      	b.n	800abf0 <_malloc_r+0xa8>
 800ac32:	230c      	movs	r3, #12
 800ac34:	6033      	str	r3, [r6, #0]
 800ac36:	4630      	mov	r0, r6
 800ac38:	f000 f80c 	bl	800ac54 <__malloc_unlock>
 800ac3c:	e794      	b.n	800ab68 <_malloc_r+0x20>
 800ac3e:	6005      	str	r5, [r0, #0]
 800ac40:	e7d6      	b.n	800abf0 <_malloc_r+0xa8>
 800ac42:	bf00      	nop
 800ac44:	200016f4 	.word	0x200016f4

0800ac48 <__malloc_lock>:
 800ac48:	4801      	ldr	r0, [pc, #4]	@ (800ac50 <__malloc_lock+0x8>)
 800ac4a:	f000 b86d 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800ac4e:	bf00      	nop
 800ac50:	20001834 	.word	0x20001834

0800ac54 <__malloc_unlock>:
 800ac54:	4801      	ldr	r0, [pc, #4]	@ (800ac5c <__malloc_unlock+0x8>)
 800ac56:	f000 b868 	b.w	800ad2a <__retarget_lock_release_recursive>
 800ac5a:	bf00      	nop
 800ac5c:	20001834 	.word	0x20001834

0800ac60 <siprintf>:
 800ac60:	b40e      	push	{r1, r2, r3}
 800ac62:	b510      	push	{r4, lr}
 800ac64:	b09d      	sub	sp, #116	@ 0x74
 800ac66:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ac68:	9002      	str	r0, [sp, #8]
 800ac6a:	9006      	str	r0, [sp, #24]
 800ac6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac70:	480a      	ldr	r0, [pc, #40]	@ (800ac9c <siprintf+0x3c>)
 800ac72:	9107      	str	r1, [sp, #28]
 800ac74:	9104      	str	r1, [sp, #16]
 800ac76:	490a      	ldr	r1, [pc, #40]	@ (800aca0 <siprintf+0x40>)
 800ac78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac7c:	9105      	str	r1, [sp, #20]
 800ac7e:	2400      	movs	r4, #0
 800ac80:	a902      	add	r1, sp, #8
 800ac82:	6800      	ldr	r0, [r0, #0]
 800ac84:	9301      	str	r3, [sp, #4]
 800ac86:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ac88:	f000 f8f6 	bl	800ae78 <_svfiprintf_r>
 800ac8c:	9b02      	ldr	r3, [sp, #8]
 800ac8e:	701c      	strb	r4, [r3, #0]
 800ac90:	b01d      	add	sp, #116	@ 0x74
 800ac92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac96:	b003      	add	sp, #12
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	20000110 	.word	0x20000110
 800aca0:	ffff0208 	.word	0xffff0208

0800aca4 <memset>:
 800aca4:	4402      	add	r2, r0
 800aca6:	4603      	mov	r3, r0
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d100      	bne.n	800acae <memset+0xa>
 800acac:	4770      	bx	lr
 800acae:	f803 1b01 	strb.w	r1, [r3], #1
 800acb2:	e7f9      	b.n	800aca8 <memset+0x4>

0800acb4 <_sbrk_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	@ (800acd0 <_sbrk_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f6 fee0 	bl	8001a84 <_sbrk>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_sbrk_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_sbrk_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20001830 	.word	0x20001830

0800acd4 <__errno>:
 800acd4:	4b01      	ldr	r3, [pc, #4]	@ (800acdc <__errno+0x8>)
 800acd6:	6818      	ldr	r0, [r3, #0]
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	20000110 	.word	0x20000110

0800ace0 <__libc_init_array>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	4d0d      	ldr	r5, [pc, #52]	@ (800ad18 <__libc_init_array+0x38>)
 800ace4:	4c0d      	ldr	r4, [pc, #52]	@ (800ad1c <__libc_init_array+0x3c>)
 800ace6:	1b64      	subs	r4, r4, r5
 800ace8:	10a4      	asrs	r4, r4, #2
 800acea:	2600      	movs	r6, #0
 800acec:	42a6      	cmp	r6, r4
 800acee:	d109      	bne.n	800ad04 <__libc_init_array+0x24>
 800acf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ad20 <__libc_init_array+0x40>)
 800acf2:	4c0c      	ldr	r4, [pc, #48]	@ (800ad24 <__libc_init_array+0x44>)
 800acf4:	f000 fba6 	bl	800b444 <_init>
 800acf8:	1b64      	subs	r4, r4, r5
 800acfa:	10a4      	asrs	r4, r4, #2
 800acfc:	2600      	movs	r6, #0
 800acfe:	42a6      	cmp	r6, r4
 800ad00:	d105      	bne.n	800ad0e <__libc_init_array+0x2e>
 800ad02:	bd70      	pop	{r4, r5, r6, pc}
 800ad04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad08:	4798      	blx	r3
 800ad0a:	3601      	adds	r6, #1
 800ad0c:	e7ee      	b.n	800acec <__libc_init_array+0xc>
 800ad0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad12:	4798      	blx	r3
 800ad14:	3601      	adds	r6, #1
 800ad16:	e7f2      	b.n	800acfe <__libc_init_array+0x1e>
 800ad18:	0800c270 	.word	0x0800c270
 800ad1c:	0800c270 	.word	0x0800c270
 800ad20:	0800c270 	.word	0x0800c270
 800ad24:	0800c274 	.word	0x0800c274

0800ad28 <__retarget_lock_acquire_recursive>:
 800ad28:	4770      	bx	lr

0800ad2a <__retarget_lock_release_recursive>:
 800ad2a:	4770      	bx	lr

0800ad2c <_free_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4605      	mov	r5, r0
 800ad30:	2900      	cmp	r1, #0
 800ad32:	d041      	beq.n	800adb8 <_free_r+0x8c>
 800ad34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad38:	1f0c      	subs	r4, r1, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	bfb8      	it	lt
 800ad3e:	18e4      	addlt	r4, r4, r3
 800ad40:	f7ff ff82 	bl	800ac48 <__malloc_lock>
 800ad44:	4a1d      	ldr	r2, [pc, #116]	@ (800adbc <_free_r+0x90>)
 800ad46:	6813      	ldr	r3, [r2, #0]
 800ad48:	b933      	cbnz	r3, 800ad58 <_free_r+0x2c>
 800ad4a:	6063      	str	r3, [r4, #4]
 800ad4c:	6014      	str	r4, [r2, #0]
 800ad4e:	4628      	mov	r0, r5
 800ad50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad54:	f7ff bf7e 	b.w	800ac54 <__malloc_unlock>
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	d908      	bls.n	800ad6e <_free_r+0x42>
 800ad5c:	6820      	ldr	r0, [r4, #0]
 800ad5e:	1821      	adds	r1, r4, r0
 800ad60:	428b      	cmp	r3, r1
 800ad62:	bf01      	itttt	eq
 800ad64:	6819      	ldreq	r1, [r3, #0]
 800ad66:	685b      	ldreq	r3, [r3, #4]
 800ad68:	1809      	addeq	r1, r1, r0
 800ad6a:	6021      	streq	r1, [r4, #0]
 800ad6c:	e7ed      	b.n	800ad4a <_free_r+0x1e>
 800ad6e:	461a      	mov	r2, r3
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	b10b      	cbz	r3, 800ad78 <_free_r+0x4c>
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	d9fa      	bls.n	800ad6e <_free_r+0x42>
 800ad78:	6811      	ldr	r1, [r2, #0]
 800ad7a:	1850      	adds	r0, r2, r1
 800ad7c:	42a0      	cmp	r0, r4
 800ad7e:	d10b      	bne.n	800ad98 <_free_r+0x6c>
 800ad80:	6820      	ldr	r0, [r4, #0]
 800ad82:	4401      	add	r1, r0
 800ad84:	1850      	adds	r0, r2, r1
 800ad86:	4283      	cmp	r3, r0
 800ad88:	6011      	str	r1, [r2, #0]
 800ad8a:	d1e0      	bne.n	800ad4e <_free_r+0x22>
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	6053      	str	r3, [r2, #4]
 800ad92:	4408      	add	r0, r1
 800ad94:	6010      	str	r0, [r2, #0]
 800ad96:	e7da      	b.n	800ad4e <_free_r+0x22>
 800ad98:	d902      	bls.n	800ada0 <_free_r+0x74>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	e7d6      	b.n	800ad4e <_free_r+0x22>
 800ada0:	6820      	ldr	r0, [r4, #0]
 800ada2:	1821      	adds	r1, r4, r0
 800ada4:	428b      	cmp	r3, r1
 800ada6:	bf04      	itt	eq
 800ada8:	6819      	ldreq	r1, [r3, #0]
 800adaa:	685b      	ldreq	r3, [r3, #4]
 800adac:	6063      	str	r3, [r4, #4]
 800adae:	bf04      	itt	eq
 800adb0:	1809      	addeq	r1, r1, r0
 800adb2:	6021      	streq	r1, [r4, #0]
 800adb4:	6054      	str	r4, [r2, #4]
 800adb6:	e7ca      	b.n	800ad4e <_free_r+0x22>
 800adb8:	bd38      	pop	{r3, r4, r5, pc}
 800adba:	bf00      	nop
 800adbc:	200016f4 	.word	0x200016f4

0800adc0 <__ssputs_r>:
 800adc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc4:	688e      	ldr	r6, [r1, #8]
 800adc6:	461f      	mov	r7, r3
 800adc8:	42be      	cmp	r6, r7
 800adca:	680b      	ldr	r3, [r1, #0]
 800adcc:	4682      	mov	sl, r0
 800adce:	460c      	mov	r4, r1
 800add0:	4690      	mov	r8, r2
 800add2:	d82d      	bhi.n	800ae30 <__ssputs_r+0x70>
 800add4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800add8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800addc:	d026      	beq.n	800ae2c <__ssputs_r+0x6c>
 800adde:	6965      	ldr	r5, [r4, #20]
 800ade0:	6909      	ldr	r1, [r1, #16]
 800ade2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ade6:	eba3 0901 	sub.w	r9, r3, r1
 800adea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adee:	1c7b      	adds	r3, r7, #1
 800adf0:	444b      	add	r3, r9
 800adf2:	106d      	asrs	r5, r5, #1
 800adf4:	429d      	cmp	r5, r3
 800adf6:	bf38      	it	cc
 800adf8:	461d      	movcc	r5, r3
 800adfa:	0553      	lsls	r3, r2, #21
 800adfc:	d527      	bpl.n	800ae4e <__ssputs_r+0x8e>
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7ff fea2 	bl	800ab48 <_malloc_r>
 800ae04:	4606      	mov	r6, r0
 800ae06:	b360      	cbz	r0, 800ae62 <__ssputs_r+0xa2>
 800ae08:	6921      	ldr	r1, [r4, #16]
 800ae0a:	464a      	mov	r2, r9
 800ae0c:	f000 fad6 	bl	800b3bc <memcpy>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	6126      	str	r6, [r4, #16]
 800ae1e:	6165      	str	r5, [r4, #20]
 800ae20:	444e      	add	r6, r9
 800ae22:	eba5 0509 	sub.w	r5, r5, r9
 800ae26:	6026      	str	r6, [r4, #0]
 800ae28:	60a5      	str	r5, [r4, #8]
 800ae2a:	463e      	mov	r6, r7
 800ae2c:	42be      	cmp	r6, r7
 800ae2e:	d900      	bls.n	800ae32 <__ssputs_r+0x72>
 800ae30:	463e      	mov	r6, r7
 800ae32:	6820      	ldr	r0, [r4, #0]
 800ae34:	4632      	mov	r2, r6
 800ae36:	4641      	mov	r1, r8
 800ae38:	f000 faa6 	bl	800b388 <memmove>
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	1b9b      	subs	r3, r3, r6
 800ae40:	60a3      	str	r3, [r4, #8]
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	4433      	add	r3, r6
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4e:	462a      	mov	r2, r5
 800ae50:	f000 fac2 	bl	800b3d8 <_realloc_r>
 800ae54:	4606      	mov	r6, r0
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d1e0      	bne.n	800ae1c <__ssputs_r+0x5c>
 800ae5a:	6921      	ldr	r1, [r4, #16]
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	f7ff ff65 	bl	800ad2c <_free_r>
 800ae62:	230c      	movs	r3, #12
 800ae64:	f8ca 3000 	str.w	r3, [sl]
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae6e:	81a3      	strh	r3, [r4, #12]
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	e7e9      	b.n	800ae4a <__ssputs_r+0x8a>
	...

0800ae78 <_svfiprintf_r>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	4698      	mov	r8, r3
 800ae7e:	898b      	ldrh	r3, [r1, #12]
 800ae80:	061b      	lsls	r3, r3, #24
 800ae82:	b09d      	sub	sp, #116	@ 0x74
 800ae84:	4607      	mov	r7, r0
 800ae86:	460d      	mov	r5, r1
 800ae88:	4614      	mov	r4, r2
 800ae8a:	d510      	bpl.n	800aeae <_svfiprintf_r+0x36>
 800ae8c:	690b      	ldr	r3, [r1, #16]
 800ae8e:	b973      	cbnz	r3, 800aeae <_svfiprintf_r+0x36>
 800ae90:	2140      	movs	r1, #64	@ 0x40
 800ae92:	f7ff fe59 	bl	800ab48 <_malloc_r>
 800ae96:	6028      	str	r0, [r5, #0]
 800ae98:	6128      	str	r0, [r5, #16]
 800ae9a:	b930      	cbnz	r0, 800aeaa <_svfiprintf_r+0x32>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	b01d      	add	sp, #116	@ 0x74
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	2340      	movs	r3, #64	@ 0x40
 800aeac:	616b      	str	r3, [r5, #20]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb2:	2320      	movs	r3, #32
 800aeb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800aebc:	2330      	movs	r3, #48	@ 0x30
 800aebe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b05c <_svfiprintf_r+0x1e4>
 800aec2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aec6:	f04f 0901 	mov.w	r9, #1
 800aeca:	4623      	mov	r3, r4
 800aecc:	469a      	mov	sl, r3
 800aece:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed2:	b10a      	cbz	r2, 800aed8 <_svfiprintf_r+0x60>
 800aed4:	2a25      	cmp	r2, #37	@ 0x25
 800aed6:	d1f9      	bne.n	800aecc <_svfiprintf_r+0x54>
 800aed8:	ebba 0b04 	subs.w	fp, sl, r4
 800aedc:	d00b      	beq.n	800aef6 <_svfiprintf_r+0x7e>
 800aede:	465b      	mov	r3, fp
 800aee0:	4622      	mov	r2, r4
 800aee2:	4629      	mov	r1, r5
 800aee4:	4638      	mov	r0, r7
 800aee6:	f7ff ff6b 	bl	800adc0 <__ssputs_r>
 800aeea:	3001      	adds	r0, #1
 800aeec:	f000 80a7 	beq.w	800b03e <_svfiprintf_r+0x1c6>
 800aef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aef2:	445a      	add	r2, fp
 800aef4:	9209      	str	r2, [sp, #36]	@ 0x24
 800aef6:	f89a 3000 	ldrb.w	r3, [sl]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 809f 	beq.w	800b03e <_svfiprintf_r+0x1c6>
 800af00:	2300      	movs	r3, #0
 800af02:	f04f 32ff 	mov.w	r2, #4294967295
 800af06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af0a:	f10a 0a01 	add.w	sl, sl, #1
 800af0e:	9304      	str	r3, [sp, #16]
 800af10:	9307      	str	r3, [sp, #28]
 800af12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af16:	931a      	str	r3, [sp, #104]	@ 0x68
 800af18:	4654      	mov	r4, sl
 800af1a:	2205      	movs	r2, #5
 800af1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af20:	484e      	ldr	r0, [pc, #312]	@ (800b05c <_svfiprintf_r+0x1e4>)
 800af22:	f7f5 f95d 	bl	80001e0 <memchr>
 800af26:	9a04      	ldr	r2, [sp, #16]
 800af28:	b9d8      	cbnz	r0, 800af62 <_svfiprintf_r+0xea>
 800af2a:	06d0      	lsls	r0, r2, #27
 800af2c:	bf44      	itt	mi
 800af2e:	2320      	movmi	r3, #32
 800af30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af34:	0711      	lsls	r1, r2, #28
 800af36:	bf44      	itt	mi
 800af38:	232b      	movmi	r3, #43	@ 0x2b
 800af3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af3e:	f89a 3000 	ldrb.w	r3, [sl]
 800af42:	2b2a      	cmp	r3, #42	@ 0x2a
 800af44:	d015      	beq.n	800af72 <_svfiprintf_r+0xfa>
 800af46:	9a07      	ldr	r2, [sp, #28]
 800af48:	4654      	mov	r4, sl
 800af4a:	2000      	movs	r0, #0
 800af4c:	f04f 0c0a 	mov.w	ip, #10
 800af50:	4621      	mov	r1, r4
 800af52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af56:	3b30      	subs	r3, #48	@ 0x30
 800af58:	2b09      	cmp	r3, #9
 800af5a:	d94b      	bls.n	800aff4 <_svfiprintf_r+0x17c>
 800af5c:	b1b0      	cbz	r0, 800af8c <_svfiprintf_r+0x114>
 800af5e:	9207      	str	r2, [sp, #28]
 800af60:	e014      	b.n	800af8c <_svfiprintf_r+0x114>
 800af62:	eba0 0308 	sub.w	r3, r0, r8
 800af66:	fa09 f303 	lsl.w	r3, r9, r3
 800af6a:	4313      	orrs	r3, r2
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	46a2      	mov	sl, r4
 800af70:	e7d2      	b.n	800af18 <_svfiprintf_r+0xa0>
 800af72:	9b03      	ldr	r3, [sp, #12]
 800af74:	1d19      	adds	r1, r3, #4
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	9103      	str	r1, [sp, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	bfbb      	ittet	lt
 800af7e:	425b      	neglt	r3, r3
 800af80:	f042 0202 	orrlt.w	r2, r2, #2
 800af84:	9307      	strge	r3, [sp, #28]
 800af86:	9307      	strlt	r3, [sp, #28]
 800af88:	bfb8      	it	lt
 800af8a:	9204      	strlt	r2, [sp, #16]
 800af8c:	7823      	ldrb	r3, [r4, #0]
 800af8e:	2b2e      	cmp	r3, #46	@ 0x2e
 800af90:	d10a      	bne.n	800afa8 <_svfiprintf_r+0x130>
 800af92:	7863      	ldrb	r3, [r4, #1]
 800af94:	2b2a      	cmp	r3, #42	@ 0x2a
 800af96:	d132      	bne.n	800affe <_svfiprintf_r+0x186>
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	1d1a      	adds	r2, r3, #4
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	9203      	str	r2, [sp, #12]
 800afa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afa4:	3402      	adds	r4, #2
 800afa6:	9305      	str	r3, [sp, #20]
 800afa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b06c <_svfiprintf_r+0x1f4>
 800afac:	7821      	ldrb	r1, [r4, #0]
 800afae:	2203      	movs	r2, #3
 800afb0:	4650      	mov	r0, sl
 800afb2:	f7f5 f915 	bl	80001e0 <memchr>
 800afb6:	b138      	cbz	r0, 800afc8 <_svfiprintf_r+0x150>
 800afb8:	9b04      	ldr	r3, [sp, #16]
 800afba:	eba0 000a 	sub.w	r0, r0, sl
 800afbe:	2240      	movs	r2, #64	@ 0x40
 800afc0:	4082      	lsls	r2, r0
 800afc2:	4313      	orrs	r3, r2
 800afc4:	3401      	adds	r4, #1
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afcc:	4824      	ldr	r0, [pc, #144]	@ (800b060 <_svfiprintf_r+0x1e8>)
 800afce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afd2:	2206      	movs	r2, #6
 800afd4:	f7f5 f904 	bl	80001e0 <memchr>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d036      	beq.n	800b04a <_svfiprintf_r+0x1d2>
 800afdc:	4b21      	ldr	r3, [pc, #132]	@ (800b064 <_svfiprintf_r+0x1ec>)
 800afde:	bb1b      	cbnz	r3, 800b028 <_svfiprintf_r+0x1b0>
 800afe0:	9b03      	ldr	r3, [sp, #12]
 800afe2:	3307      	adds	r3, #7
 800afe4:	f023 0307 	bic.w	r3, r3, #7
 800afe8:	3308      	adds	r3, #8
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afee:	4433      	add	r3, r6
 800aff0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff2:	e76a      	b.n	800aeca <_svfiprintf_r+0x52>
 800aff4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aff8:	460c      	mov	r4, r1
 800affa:	2001      	movs	r0, #1
 800affc:	e7a8      	b.n	800af50 <_svfiprintf_r+0xd8>
 800affe:	2300      	movs	r3, #0
 800b000:	3401      	adds	r4, #1
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	4619      	mov	r1, r3
 800b006:	f04f 0c0a 	mov.w	ip, #10
 800b00a:	4620      	mov	r0, r4
 800b00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b010:	3a30      	subs	r2, #48	@ 0x30
 800b012:	2a09      	cmp	r2, #9
 800b014:	d903      	bls.n	800b01e <_svfiprintf_r+0x1a6>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0c6      	beq.n	800afa8 <_svfiprintf_r+0x130>
 800b01a:	9105      	str	r1, [sp, #20]
 800b01c:	e7c4      	b.n	800afa8 <_svfiprintf_r+0x130>
 800b01e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b022:	4604      	mov	r4, r0
 800b024:	2301      	movs	r3, #1
 800b026:	e7f0      	b.n	800b00a <_svfiprintf_r+0x192>
 800b028:	ab03      	add	r3, sp, #12
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	462a      	mov	r2, r5
 800b02e:	4b0e      	ldr	r3, [pc, #56]	@ (800b068 <_svfiprintf_r+0x1f0>)
 800b030:	a904      	add	r1, sp, #16
 800b032:	4638      	mov	r0, r7
 800b034:	f3af 8000 	nop.w
 800b038:	1c42      	adds	r2, r0, #1
 800b03a:	4606      	mov	r6, r0
 800b03c:	d1d6      	bne.n	800afec <_svfiprintf_r+0x174>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	065b      	lsls	r3, r3, #25
 800b042:	f53f af2d 	bmi.w	800aea0 <_svfiprintf_r+0x28>
 800b046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b048:	e72c      	b.n	800aea4 <_svfiprintf_r+0x2c>
 800b04a:	ab03      	add	r3, sp, #12
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	462a      	mov	r2, r5
 800b050:	4b05      	ldr	r3, [pc, #20]	@ (800b068 <_svfiprintf_r+0x1f0>)
 800b052:	a904      	add	r1, sp, #16
 800b054:	4638      	mov	r0, r7
 800b056:	f000 f879 	bl	800b14c <_printf_i>
 800b05a:	e7ed      	b.n	800b038 <_svfiprintf_r+0x1c0>
 800b05c:	0800c234 	.word	0x0800c234
 800b060:	0800c23e 	.word	0x0800c23e
 800b064:	00000000 	.word	0x00000000
 800b068:	0800adc1 	.word	0x0800adc1
 800b06c:	0800c23a 	.word	0x0800c23a

0800b070 <_printf_common>:
 800b070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	4616      	mov	r6, r2
 800b076:	4698      	mov	r8, r3
 800b078:	688a      	ldr	r2, [r1, #8]
 800b07a:	690b      	ldr	r3, [r1, #16]
 800b07c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b080:	4293      	cmp	r3, r2
 800b082:	bfb8      	it	lt
 800b084:	4613      	movlt	r3, r2
 800b086:	6033      	str	r3, [r6, #0]
 800b088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b08c:	4607      	mov	r7, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	b10a      	cbz	r2, 800b096 <_printf_common+0x26>
 800b092:	3301      	adds	r3, #1
 800b094:	6033      	str	r3, [r6, #0]
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	0699      	lsls	r1, r3, #26
 800b09a:	bf42      	ittt	mi
 800b09c:	6833      	ldrmi	r3, [r6, #0]
 800b09e:	3302      	addmi	r3, #2
 800b0a0:	6033      	strmi	r3, [r6, #0]
 800b0a2:	6825      	ldr	r5, [r4, #0]
 800b0a4:	f015 0506 	ands.w	r5, r5, #6
 800b0a8:	d106      	bne.n	800b0b8 <_printf_common+0x48>
 800b0aa:	f104 0a19 	add.w	sl, r4, #25
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	6832      	ldr	r2, [r6, #0]
 800b0b2:	1a9b      	subs	r3, r3, r2
 800b0b4:	42ab      	cmp	r3, r5
 800b0b6:	dc26      	bgt.n	800b106 <_printf_common+0x96>
 800b0b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0bc:	6822      	ldr	r2, [r4, #0]
 800b0be:	3b00      	subs	r3, #0
 800b0c0:	bf18      	it	ne
 800b0c2:	2301      	movne	r3, #1
 800b0c4:	0692      	lsls	r2, r2, #26
 800b0c6:	d42b      	bmi.n	800b120 <_printf_common+0xb0>
 800b0c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	47c8      	blx	r9
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d01e      	beq.n	800b114 <_printf_common+0xa4>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	6922      	ldr	r2, [r4, #16]
 800b0da:	f003 0306 	and.w	r3, r3, #6
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	bf02      	ittt	eq
 800b0e2:	68e5      	ldreq	r5, [r4, #12]
 800b0e4:	6833      	ldreq	r3, [r6, #0]
 800b0e6:	1aed      	subeq	r5, r5, r3
 800b0e8:	68a3      	ldr	r3, [r4, #8]
 800b0ea:	bf0c      	ite	eq
 800b0ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0f0:	2500      	movne	r5, #0
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	bfc4      	itt	gt
 800b0f6:	1a9b      	subgt	r3, r3, r2
 800b0f8:	18ed      	addgt	r5, r5, r3
 800b0fa:	2600      	movs	r6, #0
 800b0fc:	341a      	adds	r4, #26
 800b0fe:	42b5      	cmp	r5, r6
 800b100:	d11a      	bne.n	800b138 <_printf_common+0xc8>
 800b102:	2000      	movs	r0, #0
 800b104:	e008      	b.n	800b118 <_printf_common+0xa8>
 800b106:	2301      	movs	r3, #1
 800b108:	4652      	mov	r2, sl
 800b10a:	4641      	mov	r1, r8
 800b10c:	4638      	mov	r0, r7
 800b10e:	47c8      	blx	r9
 800b110:	3001      	adds	r0, #1
 800b112:	d103      	bne.n	800b11c <_printf_common+0xac>
 800b114:	f04f 30ff 	mov.w	r0, #4294967295
 800b118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11c:	3501      	adds	r5, #1
 800b11e:	e7c6      	b.n	800b0ae <_printf_common+0x3e>
 800b120:	18e1      	adds	r1, r4, r3
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	2030      	movs	r0, #48	@ 0x30
 800b126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b12a:	4422      	add	r2, r4
 800b12c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b134:	3302      	adds	r3, #2
 800b136:	e7c7      	b.n	800b0c8 <_printf_common+0x58>
 800b138:	2301      	movs	r3, #1
 800b13a:	4622      	mov	r2, r4
 800b13c:	4641      	mov	r1, r8
 800b13e:	4638      	mov	r0, r7
 800b140:	47c8      	blx	r9
 800b142:	3001      	adds	r0, #1
 800b144:	d0e6      	beq.n	800b114 <_printf_common+0xa4>
 800b146:	3601      	adds	r6, #1
 800b148:	e7d9      	b.n	800b0fe <_printf_common+0x8e>
	...

0800b14c <_printf_i>:
 800b14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	7e0f      	ldrb	r7, [r1, #24]
 800b152:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b154:	2f78      	cmp	r7, #120	@ 0x78
 800b156:	4691      	mov	r9, r2
 800b158:	4680      	mov	r8, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	469a      	mov	sl, r3
 800b15e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b162:	d807      	bhi.n	800b174 <_printf_i+0x28>
 800b164:	2f62      	cmp	r7, #98	@ 0x62
 800b166:	d80a      	bhi.n	800b17e <_printf_i+0x32>
 800b168:	2f00      	cmp	r7, #0
 800b16a:	f000 80d1 	beq.w	800b310 <_printf_i+0x1c4>
 800b16e:	2f58      	cmp	r7, #88	@ 0x58
 800b170:	f000 80b8 	beq.w	800b2e4 <_printf_i+0x198>
 800b174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b17c:	e03a      	b.n	800b1f4 <_printf_i+0xa8>
 800b17e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b182:	2b15      	cmp	r3, #21
 800b184:	d8f6      	bhi.n	800b174 <_printf_i+0x28>
 800b186:	a101      	add	r1, pc, #4	@ (adr r1, 800b18c <_printf_i+0x40>)
 800b188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b18c:	0800b1e5 	.word	0x0800b1e5
 800b190:	0800b1f9 	.word	0x0800b1f9
 800b194:	0800b175 	.word	0x0800b175
 800b198:	0800b175 	.word	0x0800b175
 800b19c:	0800b175 	.word	0x0800b175
 800b1a0:	0800b175 	.word	0x0800b175
 800b1a4:	0800b1f9 	.word	0x0800b1f9
 800b1a8:	0800b175 	.word	0x0800b175
 800b1ac:	0800b175 	.word	0x0800b175
 800b1b0:	0800b175 	.word	0x0800b175
 800b1b4:	0800b175 	.word	0x0800b175
 800b1b8:	0800b2f7 	.word	0x0800b2f7
 800b1bc:	0800b223 	.word	0x0800b223
 800b1c0:	0800b2b1 	.word	0x0800b2b1
 800b1c4:	0800b175 	.word	0x0800b175
 800b1c8:	0800b175 	.word	0x0800b175
 800b1cc:	0800b319 	.word	0x0800b319
 800b1d0:	0800b175 	.word	0x0800b175
 800b1d4:	0800b223 	.word	0x0800b223
 800b1d8:	0800b175 	.word	0x0800b175
 800b1dc:	0800b175 	.word	0x0800b175
 800b1e0:	0800b2b9 	.word	0x0800b2b9
 800b1e4:	6833      	ldr	r3, [r6, #0]
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6032      	str	r2, [r6, #0]
 800b1ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e09c      	b.n	800b332 <_printf_i+0x1e6>
 800b1f8:	6833      	ldr	r3, [r6, #0]
 800b1fa:	6820      	ldr	r0, [r4, #0]
 800b1fc:	1d19      	adds	r1, r3, #4
 800b1fe:	6031      	str	r1, [r6, #0]
 800b200:	0606      	lsls	r6, r0, #24
 800b202:	d501      	bpl.n	800b208 <_printf_i+0xbc>
 800b204:	681d      	ldr	r5, [r3, #0]
 800b206:	e003      	b.n	800b210 <_printf_i+0xc4>
 800b208:	0645      	lsls	r5, r0, #25
 800b20a:	d5fb      	bpl.n	800b204 <_printf_i+0xb8>
 800b20c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b210:	2d00      	cmp	r5, #0
 800b212:	da03      	bge.n	800b21c <_printf_i+0xd0>
 800b214:	232d      	movs	r3, #45	@ 0x2d
 800b216:	426d      	negs	r5, r5
 800b218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b21c:	4858      	ldr	r0, [pc, #352]	@ (800b380 <_printf_i+0x234>)
 800b21e:	230a      	movs	r3, #10
 800b220:	e011      	b.n	800b246 <_printf_i+0xfa>
 800b222:	6821      	ldr	r1, [r4, #0]
 800b224:	6833      	ldr	r3, [r6, #0]
 800b226:	0608      	lsls	r0, r1, #24
 800b228:	f853 5b04 	ldr.w	r5, [r3], #4
 800b22c:	d402      	bmi.n	800b234 <_printf_i+0xe8>
 800b22e:	0649      	lsls	r1, r1, #25
 800b230:	bf48      	it	mi
 800b232:	b2ad      	uxthmi	r5, r5
 800b234:	2f6f      	cmp	r7, #111	@ 0x6f
 800b236:	4852      	ldr	r0, [pc, #328]	@ (800b380 <_printf_i+0x234>)
 800b238:	6033      	str	r3, [r6, #0]
 800b23a:	bf14      	ite	ne
 800b23c:	230a      	movne	r3, #10
 800b23e:	2308      	moveq	r3, #8
 800b240:	2100      	movs	r1, #0
 800b242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b246:	6866      	ldr	r6, [r4, #4]
 800b248:	60a6      	str	r6, [r4, #8]
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	db05      	blt.n	800b25a <_printf_i+0x10e>
 800b24e:	6821      	ldr	r1, [r4, #0]
 800b250:	432e      	orrs	r6, r5
 800b252:	f021 0104 	bic.w	r1, r1, #4
 800b256:	6021      	str	r1, [r4, #0]
 800b258:	d04b      	beq.n	800b2f2 <_printf_i+0x1a6>
 800b25a:	4616      	mov	r6, r2
 800b25c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b260:	fb03 5711 	mls	r7, r3, r1, r5
 800b264:	5dc7      	ldrb	r7, [r0, r7]
 800b266:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b26a:	462f      	mov	r7, r5
 800b26c:	42bb      	cmp	r3, r7
 800b26e:	460d      	mov	r5, r1
 800b270:	d9f4      	bls.n	800b25c <_printf_i+0x110>
 800b272:	2b08      	cmp	r3, #8
 800b274:	d10b      	bne.n	800b28e <_printf_i+0x142>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	07df      	lsls	r7, r3, #31
 800b27a:	d508      	bpl.n	800b28e <_printf_i+0x142>
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	6861      	ldr	r1, [r4, #4]
 800b280:	4299      	cmp	r1, r3
 800b282:	bfde      	ittt	le
 800b284:	2330      	movle	r3, #48	@ 0x30
 800b286:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b28a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b28e:	1b92      	subs	r2, r2, r6
 800b290:	6122      	str	r2, [r4, #16]
 800b292:	f8cd a000 	str.w	sl, [sp]
 800b296:	464b      	mov	r3, r9
 800b298:	aa03      	add	r2, sp, #12
 800b29a:	4621      	mov	r1, r4
 800b29c:	4640      	mov	r0, r8
 800b29e:	f7ff fee7 	bl	800b070 <_printf_common>
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	d14a      	bne.n	800b33c <_printf_i+0x1f0>
 800b2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2aa:	b004      	add	sp, #16
 800b2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	f043 0320 	orr.w	r3, r3, #32
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	4832      	ldr	r0, [pc, #200]	@ (800b384 <_printf_i+0x238>)
 800b2ba:	2778      	movs	r7, #120	@ 0x78
 800b2bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	6831      	ldr	r1, [r6, #0]
 800b2c4:	061f      	lsls	r7, r3, #24
 800b2c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2ca:	d402      	bmi.n	800b2d2 <_printf_i+0x186>
 800b2cc:	065f      	lsls	r7, r3, #25
 800b2ce:	bf48      	it	mi
 800b2d0:	b2ad      	uxthmi	r5, r5
 800b2d2:	6031      	str	r1, [r6, #0]
 800b2d4:	07d9      	lsls	r1, r3, #31
 800b2d6:	bf44      	itt	mi
 800b2d8:	f043 0320 	orrmi.w	r3, r3, #32
 800b2dc:	6023      	strmi	r3, [r4, #0]
 800b2de:	b11d      	cbz	r5, 800b2e8 <_printf_i+0x19c>
 800b2e0:	2310      	movs	r3, #16
 800b2e2:	e7ad      	b.n	800b240 <_printf_i+0xf4>
 800b2e4:	4826      	ldr	r0, [pc, #152]	@ (800b380 <_printf_i+0x234>)
 800b2e6:	e7e9      	b.n	800b2bc <_printf_i+0x170>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	f023 0320 	bic.w	r3, r3, #32
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	e7f6      	b.n	800b2e0 <_printf_i+0x194>
 800b2f2:	4616      	mov	r6, r2
 800b2f4:	e7bd      	b.n	800b272 <_printf_i+0x126>
 800b2f6:	6833      	ldr	r3, [r6, #0]
 800b2f8:	6825      	ldr	r5, [r4, #0]
 800b2fa:	6961      	ldr	r1, [r4, #20]
 800b2fc:	1d18      	adds	r0, r3, #4
 800b2fe:	6030      	str	r0, [r6, #0]
 800b300:	062e      	lsls	r6, r5, #24
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	d501      	bpl.n	800b30a <_printf_i+0x1be>
 800b306:	6019      	str	r1, [r3, #0]
 800b308:	e002      	b.n	800b310 <_printf_i+0x1c4>
 800b30a:	0668      	lsls	r0, r5, #25
 800b30c:	d5fb      	bpl.n	800b306 <_printf_i+0x1ba>
 800b30e:	8019      	strh	r1, [r3, #0]
 800b310:	2300      	movs	r3, #0
 800b312:	6123      	str	r3, [r4, #16]
 800b314:	4616      	mov	r6, r2
 800b316:	e7bc      	b.n	800b292 <_printf_i+0x146>
 800b318:	6833      	ldr	r3, [r6, #0]
 800b31a:	1d1a      	adds	r2, r3, #4
 800b31c:	6032      	str	r2, [r6, #0]
 800b31e:	681e      	ldr	r6, [r3, #0]
 800b320:	6862      	ldr	r2, [r4, #4]
 800b322:	2100      	movs	r1, #0
 800b324:	4630      	mov	r0, r6
 800b326:	f7f4 ff5b 	bl	80001e0 <memchr>
 800b32a:	b108      	cbz	r0, 800b330 <_printf_i+0x1e4>
 800b32c:	1b80      	subs	r0, r0, r6
 800b32e:	6060      	str	r0, [r4, #4]
 800b330:	6863      	ldr	r3, [r4, #4]
 800b332:	6123      	str	r3, [r4, #16]
 800b334:	2300      	movs	r3, #0
 800b336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b33a:	e7aa      	b.n	800b292 <_printf_i+0x146>
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	4632      	mov	r2, r6
 800b340:	4649      	mov	r1, r9
 800b342:	4640      	mov	r0, r8
 800b344:	47d0      	blx	sl
 800b346:	3001      	adds	r0, #1
 800b348:	d0ad      	beq.n	800b2a6 <_printf_i+0x15a>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	079b      	lsls	r3, r3, #30
 800b34e:	d413      	bmi.n	800b378 <_printf_i+0x22c>
 800b350:	68e0      	ldr	r0, [r4, #12]
 800b352:	9b03      	ldr	r3, [sp, #12]
 800b354:	4298      	cmp	r0, r3
 800b356:	bfb8      	it	lt
 800b358:	4618      	movlt	r0, r3
 800b35a:	e7a6      	b.n	800b2aa <_printf_i+0x15e>
 800b35c:	2301      	movs	r3, #1
 800b35e:	4632      	mov	r2, r6
 800b360:	4649      	mov	r1, r9
 800b362:	4640      	mov	r0, r8
 800b364:	47d0      	blx	sl
 800b366:	3001      	adds	r0, #1
 800b368:	d09d      	beq.n	800b2a6 <_printf_i+0x15a>
 800b36a:	3501      	adds	r5, #1
 800b36c:	68e3      	ldr	r3, [r4, #12]
 800b36e:	9903      	ldr	r1, [sp, #12]
 800b370:	1a5b      	subs	r3, r3, r1
 800b372:	42ab      	cmp	r3, r5
 800b374:	dcf2      	bgt.n	800b35c <_printf_i+0x210>
 800b376:	e7eb      	b.n	800b350 <_printf_i+0x204>
 800b378:	2500      	movs	r5, #0
 800b37a:	f104 0619 	add.w	r6, r4, #25
 800b37e:	e7f5      	b.n	800b36c <_printf_i+0x220>
 800b380:	0800c245 	.word	0x0800c245
 800b384:	0800c256 	.word	0x0800c256

0800b388 <memmove>:
 800b388:	4288      	cmp	r0, r1
 800b38a:	b510      	push	{r4, lr}
 800b38c:	eb01 0402 	add.w	r4, r1, r2
 800b390:	d902      	bls.n	800b398 <memmove+0x10>
 800b392:	4284      	cmp	r4, r0
 800b394:	4623      	mov	r3, r4
 800b396:	d807      	bhi.n	800b3a8 <memmove+0x20>
 800b398:	1e43      	subs	r3, r0, #1
 800b39a:	42a1      	cmp	r1, r4
 800b39c:	d008      	beq.n	800b3b0 <memmove+0x28>
 800b39e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3a6:	e7f8      	b.n	800b39a <memmove+0x12>
 800b3a8:	4402      	add	r2, r0
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	428a      	cmp	r2, r1
 800b3ae:	d100      	bne.n	800b3b2 <memmove+0x2a>
 800b3b0:	bd10      	pop	{r4, pc}
 800b3b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3ba:	e7f7      	b.n	800b3ac <memmove+0x24>

0800b3bc <memcpy>:
 800b3bc:	440a      	add	r2, r1
 800b3be:	4291      	cmp	r1, r2
 800b3c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3c4:	d100      	bne.n	800b3c8 <memcpy+0xc>
 800b3c6:	4770      	bx	lr
 800b3c8:	b510      	push	{r4, lr}
 800b3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3d2:	4291      	cmp	r1, r2
 800b3d4:	d1f9      	bne.n	800b3ca <memcpy+0xe>
 800b3d6:	bd10      	pop	{r4, pc}

0800b3d8 <_realloc_r>:
 800b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3dc:	4607      	mov	r7, r0
 800b3de:	4614      	mov	r4, r2
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	b921      	cbnz	r1, 800b3ee <_realloc_r+0x16>
 800b3e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	f7ff bbad 	b.w	800ab48 <_malloc_r>
 800b3ee:	b92a      	cbnz	r2, 800b3fc <_realloc_r+0x24>
 800b3f0:	f7ff fc9c 	bl	800ad2c <_free_r>
 800b3f4:	4625      	mov	r5, r4
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fc:	f000 f81a 	bl	800b434 <_malloc_usable_size_r>
 800b400:	4284      	cmp	r4, r0
 800b402:	4606      	mov	r6, r0
 800b404:	d802      	bhi.n	800b40c <_realloc_r+0x34>
 800b406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b40a:	d8f4      	bhi.n	800b3f6 <_realloc_r+0x1e>
 800b40c:	4621      	mov	r1, r4
 800b40e:	4638      	mov	r0, r7
 800b410:	f7ff fb9a 	bl	800ab48 <_malloc_r>
 800b414:	4680      	mov	r8, r0
 800b416:	b908      	cbnz	r0, 800b41c <_realloc_r+0x44>
 800b418:	4645      	mov	r5, r8
 800b41a:	e7ec      	b.n	800b3f6 <_realloc_r+0x1e>
 800b41c:	42b4      	cmp	r4, r6
 800b41e:	4622      	mov	r2, r4
 800b420:	4629      	mov	r1, r5
 800b422:	bf28      	it	cs
 800b424:	4632      	movcs	r2, r6
 800b426:	f7ff ffc9 	bl	800b3bc <memcpy>
 800b42a:	4629      	mov	r1, r5
 800b42c:	4638      	mov	r0, r7
 800b42e:	f7ff fc7d 	bl	800ad2c <_free_r>
 800b432:	e7f1      	b.n	800b418 <_realloc_r+0x40>

0800b434 <_malloc_usable_size_r>:
 800b434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b438:	1f18      	subs	r0, r3, #4
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bfbc      	itt	lt
 800b43e:	580b      	ldrlt	r3, [r1, r0]
 800b440:	18c0      	addlt	r0, r0, r3
 800b442:	4770      	bx	lr

0800b444 <_init>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr

0800b450 <_fini>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr
