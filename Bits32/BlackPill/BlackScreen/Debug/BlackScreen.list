
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c24  0800e44c  0800e44c  0000f44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f070  0800f070  00011160  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f070  0800f070  00010070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f078  0800f078  00011160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f078  0800f078  00010078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f07c  0800f07c  0001007c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800f080  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b8  20000160  0800f1e0  00011160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001918  0800f1e0  00011918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8e1  00000000  00000000  00011190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442f  00000000  00000000  0002ba71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0002fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129c  00000000  00000000  000316d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfc2  00000000  00000000  0003296c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb17  00000000  00000000  0004e92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00e7  00000000  00000000  0006e445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e52c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a58  00000000  00000000  0010e570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00114fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e434 	.word	0x0800e434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800e434 	.word	0x0800e434

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00d fa92 	bl	800dae4 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00d fa8a 	bl	800dae4 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000184 	.word	0x20000184

080005ec <UP_sendInfo>:

void UP_sendInfo(uint8_t bufferAux[],uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000604:	2300      	movs	r3, #0
 8000606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000614:	3330      	adds	r3, #48	@ 0x30
 8000616:	443b      	add	r3, r7
 8000618:	2255      	movs	r2, #85	@ 0x55
 800061a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000628:	3330      	adds	r3, #48	@ 0x30
 800062a:	443b      	add	r3, r7
 800062c:	224e      	movs	r2, #78	@ 0x4e
 800062e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800063c:	3330      	adds	r3, #48	@ 0x30
 800063e:	443b      	add	r3, r7
 8000640:	2245      	movs	r2, #69	@ 0x45
 8000642:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000650:	3330      	adds	r3, #48	@ 0x30
 8000652:	443b      	add	r3, r7
 8000654:	2252      	movs	r2, #82	@ 0x52
 8000656:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 800065a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000664:	3330      	adds	r3, #48	@ 0x30
 8000666:	443b      	add	r3, r7
 8000668:	78fa      	ldrb	r2, [r7, #3]
 800066a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800066e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000678:	3330      	adds	r3, #48	@ 0x30
 800067a:	443b      	add	r3, r7
 800067c:	223a      	movs	r2, #58	@ 0x3a
 800067e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000688:	e012      	b.n	80006b0 <UP_sendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 800068a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	441a      	add	r2, r3
 8000692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000696:	1c59      	adds	r1, r3, #1
 8000698:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	3330      	adds	r3, #48	@ 0x30
 80006a0:	443b      	add	r3, r7
 80006a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006b0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe6      	blt.n	800068a <UP_sendInfo+0x9e>

    cks=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006c8:	e022      	b.n	8000710 <UP_sendInfo+0x124>
        cks^= bufAux[i];
 80006ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ce:	3330      	adds	r3, #48	@ 0x30
 80006d0:	443b      	add	r3, r7
 80006d2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006da:	4053      	eors	r3, r2
 80006dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 80006e0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <UP_sendInfo+0x160>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68d8      	ldr	r0, [r3, #12]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <UP_sendInfo+0x160>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	795a      	ldrb	r2, [r3, #5]
 80006f0:	1c54      	adds	r4, r2, #1
 80006f2:	b2e4      	uxtb	r4, r4
 80006f4:	715c      	strb	r4, [r3, #5]
 80006f6:	4613      	mov	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80006fe:	443a      	add	r2, r7
 8000700:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000704:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000706:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800070a:	3301      	adds	r3, #1
 800070c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000710:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d6      	bcc.n	80006ca <UP_sendInfo+0xde>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <UP_sendInfo+0x160>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <UP_sendInfo+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	795a      	ldrb	r2, [r3, #5]
 8000728:	1c50      	adds	r0, r2, #1
 800072a:	b2c0      	uxtb	r0, r0
 800072c:	7158      	strb	r0, [r3, #5]
 800072e:	4613      	mov	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000736:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <UP_sendInfo+0x160>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000740:	741a      	strb	r2, [r3, #16]

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	@ 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	20000184 	.word	0x20000184

08000750 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800075e:	e0e2      	b.n	8000926 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000760:	4b76      	ldr	r3, [pc, #472]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b06      	cmp	r3, #6
 8000766:	f200 80d7 	bhi.w	8000918 <UP_decodeHeader+0x1c8>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <UP_decodeHeader+0x20>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007b5 	.word	0x080007b5
 8000778:	080007e9 	.word	0x080007e9
 800077c:	0800081d 	.word	0x0800081d
 8000780:	08000851 	.word	0x08000851
 8000784:	08000879 	.word	0x08000879
 8000788:	080008bb 	.word	0x080008bb
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	b2c8      	uxtb	r0, r1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	7108      	strb	r0, [r1, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b55      	cmp	r3, #85	@ 0x55
 80007a2:	f040 80bd 	bne.w	8000920 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007a6:	4b65      	ldr	r3, [pc, #404]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007b2:	e0b5      	b.n	8000920 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	b2c8      	uxtb	r0, r1
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	7108      	strb	r0, [r1, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ca:	d103      	bne.n	80007d4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007d2:	e0a8      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80007e0:	4b56      	ldr	r3, [pc, #344]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
                break;
 80007e6:	e09e      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	7108      	strb	r0, [r1, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b45      	cmp	r3, #69	@ 0x45
 80007fe:	d103      	bne.n	8000808 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000806:	e08e      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	3b01      	subs	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
                break;
 800081a:	e084      	b.n	8000926 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	b2c8      	uxtb	r0, r1
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	7108      	strb	r0, [r1, #4]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b52      	cmp	r3, #82	@ 0x52
 8000832:	d103      	bne.n	800083c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800083a:	e074      	b.n	8000926 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <UP_decodeHeader+0x1ec>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
            break;
 800084e:	e06a      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	b2c8      	uxtb	r0, r1
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	7108      	strb	r0, [r1, #4]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <UP_decodeHeader+0x1f0>)
 800086e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
                break;
 8000876:	e056      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b3a      	cmp	r3, #58	@ 0x3a
 800088e:	d10a      	bne.n	80008a6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000892:	2206      	movs	r2, #6
 8000894:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <UP_decodeHeader+0x1f0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008a4:	e03f      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
                break;
 80008b8:	e035      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d90f      	bls.n	80008e2 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b2c8      	uxtb	r0, r1
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	7108      	strb	r0, [r1, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	4053      	eors	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008ec:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d116      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	789a      	ldrb	r2, [r3, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	7909      	ldrb	r1, [r1, #4]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d109      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f817 	bl	8000944 <UP_decodeData>
                    }
                }

                break;
 8000916:	e005      	b.n	8000924 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <UP_decodeHeader+0x1ec>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
                break;
 800091e:	e002      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000920:	bf00      	nop
 8000922:	e000      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000924:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	429a      	cmp	r2, r3
 800092e:	f47f af17 	bne.w	8000760 <UP_decodeHeader+0x10>
        }
    }
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000180 	.word	0x20000180
 8000940:	20000188 	.word	0x20000188

08000944 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800094c:	2300      	movs	r3, #0
 800094e:	77bb      	strb	r3, [r7, #30]
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	3302      	adds	r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3bf0      	subs	r3, #240	@ 0xf0
 8000964:	2b03      	cmp	r3, #3
 8000966:	d84a      	bhi.n	80009fe <UP_decodeData+0xba>
 8000968:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <UP_decodeData+0x2c>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	08000981 	.word	0x08000981
 8000974:	08000997 	.word	0x08000997
 8000978:	080009ad 	.word	0x080009ad
 800097c:	080009bf 	.word	0x080009bf
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8000980:	7fbb      	ldrb	r3, [r7, #30]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	77ba      	strb	r2, [r7, #30]
 8000986:	3320      	adds	r3, #32
 8000988:	443b      	add	r3, r7
 800098a:	22f0      	movs	r2, #240	@ 0xf0
 800098c:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 8000990:	2302      	movs	r3, #2
 8000992:	77fb      	strb	r3, [r7, #31]

    break;
 8000994:	e03e      	b.n	8000a14 <UP_decodeData+0xd0>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8000996:	7fbb      	ldrb	r3, [r7, #30]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	77ba      	strb	r2, [r7, #30]
 800099c:	3320      	adds	r3, #32
 800099e:	443b      	add	r3, r7
 80009a0:	22f1      	movs	r2, #241	@ 0xf1
 80009a2:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009a6:	2302      	movs	r3, #2
 80009a8:	77fb      	strb	r3, [r7, #31]

    break;
 80009aa:	e033      	b.n	8000a14 <UP_decodeData+0xd0>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009ac:	7fbb      	ldrb	r3, [r7, #30]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	77ba      	strb	r2, [r7, #30]
 80009b2:	3320      	adds	r3, #32
 80009b4:	443b      	add	r3, r7
 80009b6:	22f2      	movs	r2, #242	@ 0xf2
 80009b8:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009bc:	e02a      	b.n	8000a14 <UP_decodeData+0xd0>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009be:	7fbb      	ldrb	r3, [r7, #30]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	77ba      	strb	r2, [r7, #30]
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	22f3      	movs	r2, #243	@ 0xf3
 80009ca:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	3303      	adds	r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <UP_decodeData+0xe8>)
 80009de:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	3304      	adds	r3, #4
 80009ea:	4413      	add	r3, r2
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <UP_decodeData+0xe8>)
 80009f0:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <UP_decodeData+0xe8>)
 80009f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <UP_decodeData+0xec>)
 80009fa:	801a      	strh	r2, [r3, #0]

    break;
 80009fc:	e00a      	b.n	8000a14 <UP_decodeData+0xd0>

    default:

        bufAux[indiceAux++]=0xFF;
 80009fe:	7fbb      	ldrb	r3, [r7, #30]
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	77ba      	strb	r2, [r7, #30]
 8000a04:	3320      	adds	r3, #32
 8000a06:	443b      	add	r3, r7
 8000a08:	22ff      	movs	r2, #255	@ 0xff
 8000a0a:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	77fb      	strb	r3, [r7, #31]

    break;
 8000a12:	bf00      	nop
    }

    UP_sendInfo(bufAux,bytes);
 8000a14:	7ffa      	ldrb	r2, [r7, #31]
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fde5 	bl	80005ec <UP_sendInfo>
}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000017c 	.word	0x2000017c
 8000a30:	20000000 	.word	0x20000000

08000a34 <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	81fb      	strh	r3, [r7, #14]
 8000a44:	e016      	b.n	8000a74 <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a46:	89fb      	ldrh	r3, [r7, #14]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	441a      	add	r2, r3
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <UP_datafromUSB+0x58>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	490e      	ldr	r1, [pc, #56]	@ (8000a8c <UP_datafromUSB+0x58>)
 8000a54:	6809      	ldr	r1, [r1, #0]
 8000a56:	78c9      	ldrb	r1, [r1, #3]
 8000a58:	b2c9      	uxtb	r1, r1
 8000a5a:	440b      	add	r3, r1
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <UP_datafromUSB+0x58>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	78da      	ldrb	r2, [r3, #3]
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	3201      	adds	r2, #1
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	3301      	adds	r3, #1
 8000a72:	81fb      	strh	r3, [r7, #14]
 8000a74:	89fa      	ldrh	r2, [r7, #14]
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3e4      	bcc.n	8000a46 <UP_datafromUSB+0x12>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000184 	.word	0x20000184

08000a90 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	887a      	ldrh	r2, [r7, #2]
 8000aac:	809a      	strh	r2, [r3, #4]

}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_ADC_ConvCpltCallback>:
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000ac8:	2300      	movs	r3, #0
 8000aca:	77fb      	strb	r3, [r7, #31]
 8000acc:	e00c      	b.n	8000ae8 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000ace:	7ffa      	ldrb	r2, [r7, #31]
 8000ad0:	7ffb      	ldrb	r3, [r7, #31]
 8000ad2:	490b      	ldr	r1, [pc, #44]	@ (8000b00 <HAL_ADC_ConvCpltCallback+0x44>)
 8000ad4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ad8:	f107 000c 	add.w	r0, r7, #12
 8000adc:	4909      	ldr	r1, [pc, #36]	@ (8000b04 <HAL_ADC_ConvCpltCallback+0x48>)
 8000ade:	f00d f8b7 	bl	800dc50 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000ae2:	7ffb      	ldrb	r3, [r7, #31]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	77fb      	strb	r3, [r7, #31]
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	2b07      	cmp	r3, #7
 8000aec:	d9ef      	bls.n	8000ace <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000af4:	f002 fe2f 	bl	8003756 <HAL_GPIO_TogglePin>
}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000038c 	.word	0x2000038c
 8000b04:	0800e44c 	.word	0x0800e44c
 8000b08:	40020800 	.word	0x40020800

08000b0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d104      	bne.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000b1e:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b20:	7813      	ldrb	r3, [r2, #0]
 8000b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b26:	7013      	strb	r3, [r2, #0]
	}
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40014800 	.word	0x40014800
 8000b38:	2000039c 	.word	0x2000039c

08000b3c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b48:	2b78      	cmp	r3, #120	@ 0x78
 8000b4a:	d101      	bne.n	8000b50 <HAL_I2C_MemTxCpltCallback+0x14>
		SSD1306_DMAREADY();
 8000b4c:	f001 f89c 	bl	8001c88 <SSD1306_DMAREADY>
	}
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==MPU6050_ADDR){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b64:	2bd0      	cmp	r3, #208	@ 0xd0
 8000b66:	d101      	bne.n	8000b6c <HAL_I2C_MemRxCpltCallback+0x14>
		MPU6050_DMAREADY();
 8000b68:	f000 fc9c 	bl	80014a4 <MPU6050_DMAREADY>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <task10ms>:

void task10ms(){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;

//	MPU6050_Read_All(&mpuValues);

	if(ticker%10==0){
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <task10ms+0x68>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <task10ms+0x6c>)
 8000b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b82:	08d9      	lsrs	r1, r3, #3
 8000b84:	460b      	mov	r3, r1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d104      	bne.n	8000b9e <task10ms+0x2a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b98:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <task10ms+0x70>)
 8000b9a:	f002 fddc 	bl	8003756 <HAL_GPIO_TogglePin>

	}
	if(ticker==255){
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <task10ms+0x68>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2bff      	cmp	r3, #255	@ 0xff
 8000ba4:	d112      	bne.n	8000bcc <task10ms+0x58>
		if(!SISINIT){
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <task10ms+0x74>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d103      	bne.n	8000bbc <task10ms+0x48>
			SSD1306_Clear();
 8000bb4:	f001 f82c 	bl	8001c10 <SSD1306_Clear>
			SSD1306_RefreshReady();
 8000bb8:	f001 f872 	bl	8001ca0 <SSD1306_RefreshReady>
		}
		SISINIT=TRUE;
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <task10ms+0x74>)
 8000bbe:	7813      	ldrb	r3, [r2, #0]
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc4:	7013      	strb	r3, [r2, #0]
//		UP_sendInfo((uint8_t*)&mpuValues, 28);
		ticker=0;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <task10ms+0x68>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	@ (8000bdc <task10ms+0x68>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b01      	ldr	r3, [pc, #4]	@ (8000bdc <task10ms+0x68>)
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200003ae 	.word	0x200003ae
 8000be0:	cccccccd 	.word	0xcccccccd
 8000be4:	40020800 	.word	0x40020800
 8000be8:	2000039c 	.word	0x2000039c

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf2:	f001 fb1f 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf6:	f000 f8a1 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfa:	f000 fa55 	bl	80010a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfe:	f000 fa2b 	bl	8001058 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000c02:	f00c f9f1 	bl	800cfe8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000c06:	f000 f981 	bl	8000f0c <MX_TIM3_Init>
  MX_TIM11_Init();
 8000c0a:	f000 fa01 	bl	8001010 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000c0e:	f000 f8fd 	bl	8000e0c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c12:	f000 f94d 	bl	8000eb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000c16:	4839      	ldr	r0, [pc, #228]	@ (8000cfc <main+0x110>)
 8000c18:	f007 ff46 	bl	8008aa8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000c1c:	4838      	ldr	r0, [pc, #224]	@ (8000d00 <main+0x114>)
 8000c1e:	f007 ff43 	bl	8008aa8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c22:	2104      	movs	r1, #4
 8000c24:	4835      	ldr	r0, [pc, #212]	@ (8000cfc <main+0x110>)
 8000c26:	f007 fffb 	bl	8008c20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4833      	ldr	r0, [pc, #204]	@ (8000cfc <main+0x110>)
 8000c2e:	f007 fff7 	bl	8008c20 <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000c32:	4934      	ldr	r1, [pc, #208]	@ (8000d04 <main+0x118>)
 8000c34:	4834      	ldr	r0, [pc, #208]	@ (8000d08 <main+0x11c>)
 8000c36:	f001 f811 	bl	8001c5c <Display_Set_I2C_Master_Transmit>
  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
 8000c3a:	4934      	ldr	r1, [pc, #208]	@ (8000d0c <main+0x120>)
 8000c3c:	4834      	ldr	r0, [pc, #208]	@ (8000d10 <main+0x124>)
 8000c3e:	f000 fc1b 	bl	8001478 <MPU6050_I2C_Blocking>
  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
 8000c42:	4934      	ldr	r1, [pc, #208]	@ (8000d14 <main+0x128>)
 8000c44:	4830      	ldr	r0, [pc, #192]	@ (8000d08 <main+0x11c>)
 8000c46:	f000 fc01 	bl	800144c <MPU6050_NonBlocking_DMA>
  SSD1306_Init();
 8000c4a:	f000 fc9f 	bl	800158c <SSD1306_Init>
  MPU6050_Init();
 8000c4e:	f000 fb97 	bl	8001380 <MPU6050_Init>

  CDC_AttachRxData(&UP_datafromUSB);
 8000c52:	4831      	ldr	r0, [pc, #196]	@ (8000d18 <main+0x12c>)
 8000c54:	f00c fb1c 	bl	800d290 <CDC_AttachRxData>
  myFlags.allFlags=0;
 8000c58:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <main+0x130>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	482f      	ldr	r0, [pc, #188]	@ (8000d20 <main+0x134>)
 8000c62:	f7ff fca3 	bl	80005ac <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000c66:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <main+0x110>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	482c      	ldr	r0, [pc, #176]	@ (8000d24 <main+0x138>)
 8000c72:	f7ff ff0d 	bl	8000a90 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <main+0x110>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4829      	ldr	r0, [pc, #164]	@ (8000d28 <main+0x13c>)
 8000c82:	f7ff ff05 	bl	8000a90 <en_InitENG>

  SSD1306_RefreshReady();
 8000c86:	f001 f80b 	bl	8001ca0 <SSD1306_RefreshReady>
  SSD1306_DrawBitmap(0, 0, LogoMicros, 128, 64, WHITE);
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	2340      	movs	r3, #64	@ 0x40
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2380      	movs	r3, #128	@ 0x80
 8000c94:	4a25      	ldr	r2, [pc, #148]	@ (8000d2c <main+0x140>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 fc0f 	bl	80014bc <SSD1306_DrawBitmap>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <main+0x130>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d006      	beq.n	8000cba <main+0xce>
		 task10ms();
 8000cac:	f7ff ff62 	bl	8000b74 <task10ms>
		 IS10MS=FALSE;
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d1c <main+0x130>)
 8000cb2:	7813      	ldrb	r3, [r2, #0]
 8000cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cb8:	7013      	strb	r3, [r2, #0]
	  }
	UP_comunicationsTask(&datosComSerie);
 8000cba:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <main+0x134>)
 8000cbc:	f000 fa80 	bl	80011c0 <UP_comunicationsTask>
	SSD1306_UpdateScreen();
 8000cc0:	f000 fd16 	bl	80016f0 <SSD1306_UpdateScreen>
	SSD1306_DrawLine(5, 5, 100, 20, WHITE);
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2314      	movs	r3, #20
 8000cca:	2264      	movs	r2, #100	@ 0x64
 8000ccc:	2105      	movs	r1, #5
 8000cce:	2005      	movs	r0, #5
 8000cd0:	f000 fea3 	bl	8001a1a <SSD1306_DrawLine>
	SSD1306_GotoXY(10,20);
 8000cd4:	2114      	movs	r1, #20
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f000 fde6 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts("MAYER", &Font_7x10, WHITE);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4914      	ldr	r1, [pc, #80]	@ (8000d30 <main+0x144>)
 8000ce0:	4814      	ldr	r0, [pc, #80]	@ (8000d34 <main+0x148>)
 8000ce2:	f000 fe75 	bl	80019d0 <SSD1306_Puts>
	SSD1306_GotoXY(15,40);
 8000ce6:	2128      	movs	r1, #40	@ 0x28
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f000 fddd 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts("GAY", &Font_7x10, WHITE);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	490f      	ldr	r1, [pc, #60]	@ (8000d30 <main+0x144>)
 8000cf2:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <main+0x14c>)
 8000cf4:	f000 fe6c 	bl	80019d0 <SSD1306_Puts>
	  if(IS10MS){
 8000cf8:	e7d1      	b.n	8000c9e <main+0xb2>
 8000cfa:	bf00      	nop
 8000cfc:	200002e8 	.word	0x200002e8
 8000d00:	20000330 	.word	0x20000330
 8000d04:	0800128d 	.word	0x0800128d
 8000d08:	08001255 	.word	0x08001255
 8000d0c:	080012c1 	.word	0x080012c1
 8000d10:	08001339 	.word	0x08001339
 8000d14:	08001301 	.word	0x08001301
 8000d18:	08000a35 	.word	0x08000a35
 8000d1c:	2000039c 	.word	0x2000039c
 8000d20:	20000378 	.word	0x20000378
 8000d24:	200003a0 	.word	0x200003a0
 8000d28:	200003a8 	.word	0x200003a8
 8000d2c:	0800ec1c 	.word	0x0800ec1c
 8000d30:	20000004 	.word	0x20000004
 8000d34:	0800e45c 	.word	0x0800e45c
 8000d38:	0800e464 	.word	0x0800e464

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	@ 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	@ 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00c ffa2 	bl	800dc94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	4a26      	ldr	r2, [pc, #152]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a20      	ldr	r2, [pc, #128]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dac:	2319      	movs	r3, #25
 8000dae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000db0:	23c0      	movs	r3, #192	@ 0xc0
 8000db2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f007 f9dd 	bl	8008180 <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dcc:	f000 fad2 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2103      	movs	r1, #3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f007 fc3f 	bl	8008670 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000df8:	f000 fabc 	bl	8001374 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3750      	adds	r7, #80	@ 0x50
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e20:	4a21      	ldr	r2, [pc, #132]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <MX_ADC1_Init+0xa0>)
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e6e:	f001 fa77 	bl	8002360 <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e78:	f000 fa7c 	bl	8001374 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_ADC1_Init+0x98>)
 8000e8e:	f001 fbcf 	bl	8002630 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e98:	f000 fa6c 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000018c 	.word	0x2000018c
 8000ea8:	40012000 	.word	0x40012000
 8000eac:	0f000001 	.word	0x0f000001

08000eb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000eb6:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <MX_I2C1_Init+0x54>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ebc:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <MX_I2C1_Init+0x58>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ece:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ed2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000eee:	f002 fc4d 	bl	800378c <HAL_I2C_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef8:	f000 fa3c 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001d4 	.word	0x200001d4
 8000f04:	40005400 	.word	0x40005400
 8000f08:	00061a80 	.word	0x00061a80

08000f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f3e:	4a33      	ldr	r2, [pc, #204]	@ (800100c <MX_TIM3_Init+0x100>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000f42:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f44:	220f      	movs	r2, #15
 8000f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f50:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f62:	4829      	ldr	r0, [pc, #164]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f64:	f007 fd50 	bl	8008a08 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f6e:	f000 fa01 	bl	8001374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4822      	ldr	r0, [pc, #136]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f80:	f008 f8b0 	bl	80090e4 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f8a:	f000 f9f3 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f8e:	481e      	ldr	r0, [pc, #120]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000f90:	f007 fdec 	bl	8008b6c <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f9a:	f000 f9eb 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	4619      	mov	r1, r3
 8000fac:	4816      	ldr	r0, [pc, #88]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000fae:	f008 fc5b 	bl	8009868 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fb8:	f000 f9dc 	bl	8001374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbc:	2360      	movs	r3, #96	@ 0x60
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000fd4:	f007 ffc4 	bl	8008f60 <HAL_TIM_PWM_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000fde:	f000 f9c9 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4807      	ldr	r0, [pc, #28]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000fea:	f007 ffb9 	bl	8008f60 <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000ff4:	f000 f9be 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <MX_TIM3_Init+0xfc>)
 8000ffa:	f000 ffef 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	@ 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002e8 	.word	0x200002e8
 800100c:	40000400 	.word	0x40000400

08001010 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_TIM11_Init+0x40>)
 8001016:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <MX_TIM11_Init+0x44>)
 8001018:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <MX_TIM11_Init+0x40>)
 800101c:	225f      	movs	r2, #95	@ 0x5f
 800101e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_TIM11_Init+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <MX_TIM11_Init+0x40>)
 8001028:	f242 720f 	movw	r2, #9999	@ 0x270f
 800102c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <MX_TIM11_Init+0x40>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_TIM11_Init+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_TIM11_Init+0x40>)
 800103c:	f007 fce4 	bl	8008a08 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001046:	f000 f995 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000330 	.word	0x20000330
 8001054:	40014800 	.word	0x40014800

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_DMA_Init+0x4c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <MX_DMA_Init+0x4c>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <MX_DMA_Init+0x4c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	200b      	movs	r0, #11
 8001080:	f001 fde9 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001084:	200b      	movs	r0, #11
 8001086:	f001 fe02 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	200c      	movs	r0, #12
 8001090:	f001 fde1 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001094:	200c      	movs	r0, #12
 8001096:	f001 fdfa 	bl	8002c8e <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <MX_GPIO_Init+0x108>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a3a      	ldr	r2, [pc, #232]	@ (80011b0 <MX_GPIO_Init+0x108>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b38      	ldr	r3, [pc, #224]	@ (80011b0 <MX_GPIO_Init+0x108>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <MX_GPIO_Init+0x108>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a33      	ldr	r2, [pc, #204]	@ (80011b0 <MX_GPIO_Init+0x108>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <MX_GPIO_Init+0x108>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <MX_GPIO_Init+0x108>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a2c      	ldr	r2, [pc, #176]	@ (80011b0 <MX_GPIO_Init+0x108>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0x108>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <MX_GPIO_Init+0x108>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <MX_GPIO_Init+0x108>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <MX_GPIO_Init+0x108>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001134:	481f      	ldr	r0, [pc, #124]	@ (80011b4 <MX_GPIO_Init+0x10c>)
 8001136:	f002 faf5 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8001140:	481d      	ldr	r0, [pc, #116]	@ (80011b8 <MX_GPIO_Init+0x110>)
 8001142:	f002 faef 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2108      	movs	r1, #8
 800114a:	481c      	ldr	r0, [pc, #112]	@ (80011bc <MX_GPIO_Init+0x114>)
 800114c:	f002 faea 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <MX_GPIO_Init+0x10c>)
 800116a:	f002 f957 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 800116e:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <MX_GPIO_Init+0x110>)
 8001188:	f002 f948 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 800118c:	2308      	movs	r3, #8
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <MX_GPIO_Init+0x114>)
 80011a4:	f002 f93a 	bl	800341c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400

080011c0 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791a      	ldrb	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	78db      	ldrb	r3, [r3, #3]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d007      	beq.n	80011e6 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff faba 	bl	8000750 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	78db      	ldrb	r3, [r3, #3]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	799a      	ldrb	r2, [r3, #6]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	795b      	ldrb	r3, [r3, #5]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d02b      	beq.n	800124a <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	795a      	ldrb	r2, [r3, #5]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	799b      	ldrb	r3, [r3, #6]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d908      	bls.n	8001210 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	795a      	ldrb	r2, [r3, #5]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	799b      	ldrb	r3, [r3, #6]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	b2da      	uxtb	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	741a      	strb	r2, [r3, #16]
 800120e:	e006      	b.n	800121e <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	799b      	ldrb	r3, [r3, #6]
 8001214:	f1c3 0304 	rsb	r3, r3, #4
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	7992      	ldrb	r2, [r2, #6]
 8001226:	441a      	add	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7c1b      	ldrb	r3, [r3, #16]
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f00b fff6 	bl	800d220 <CDC_Transmit_FS>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	799a      	ldrb	r2, [r3, #6]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7c1b      	ldrb	r3, [r3, #16]
 8001242:	4413      	add	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <I2C_DMA_Transmit>:

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af02      	add	r7, sp, #8
 800125a:	60ba      	str	r2, [r7, #8]
 800125c:	461a      	mov	r2, r3
 800125e:	4603      	mov	r3, r0
 8001260:	81fb      	strh	r3, [r7, #14]
 8001262:	460b      	mov	r3, r1
 8001264:	81bb      	strh	r3, [r7, #12]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800126a:	89ba      	ldrh	r2, [r7, #12]
 800126c:	89f9      	ldrh	r1, [r7, #14]
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <I2C_DMA_Transmit+0x34>)
 800127a:	f003 f80b 	bl	8004294 <HAL_I2C_Mem_Write_DMA>
	return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200001d4 	.word	0x200001d4

0800128c <I2C_1_Abstract_Master_Transmit_Blocking>:

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af02      	add	r7, sp, #8
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4603      	mov	r3, r0
 8001298:	81fb      	strh	r3, [r7, #14]
 800129a:	4613      	mov	r3, r2
 800129c:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800129e:	89ba      	ldrh	r2, [r7, #12]
 80012a0:	89f9      	ldrh	r1, [r7, #14]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 80012ac:	f002 fbc8 	bl	8003a40 <HAL_I2C_Master_Transmit>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001d4 	.word	0x200001d4

080012c0 <I2C_1_Abstract_Mem_Write_Blocking>:

uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	4603      	mov	r3, r0
 80012ca:	80fb      	strh	r3, [r7, #6]
 80012cc:	460b      	mov	r3, r1
 80012ce:	717b      	strb	r3, [r7, #5]
 80012d0:	4613      	mov	r3, r2
 80012d2:	713b      	strb	r3, [r7, #4]
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	793b      	ldrb	r3, [r7, #4]
 80012da:	b298      	uxth	r0, r3
 80012dc:	88f9      	ldrh	r1, [r7, #6]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	8a3b      	ldrh	r3, [r7, #16]
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	4603      	mov	r3, r0
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 80012ee:	f002 fca5 	bl	8003c3c <HAL_I2C_Mem_Write>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001d4 	.word	0x200001d4

08001300 <I2C_DMA_Recive>:

uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	461a      	mov	r2, r3
 800130a:	4603      	mov	r3, r0
 800130c:	81fb      	strh	r3, [r7, #14]
 800130e:	460b      	mov	r3, r1
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	4613      	mov	r3, r2
 8001314:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8001316:	89ba      	ldrh	r2, [r7, #12]
 8001318:	89f9      	ldrh	r1, [r7, #14]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <I2C_DMA_Recive+0x34>)
 8001326:	f003 f913 	bl	8004550 <HAL_I2C_Mem_Read_DMA>
	return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001d4 	.word	0x200001d4

08001338 <I2C_RBlocking>:

uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4603      	mov	r3, r0
 8001342:	81fb      	strh	r3, [r7, #14]
 8001344:	460b      	mov	r3, r1
 8001346:	81bb      	strh	r3, [r7, #12]
 8001348:	4613      	mov	r3, r2
 800134a:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,100);
 800134c:	8978      	ldrh	r0, [r7, #10]
 800134e:	89ba      	ldrh	r2, [r7, #12]
 8001350:	89f9      	ldrh	r1, [r7, #14]
 8001352:	2364      	movs	r3, #100	@ 0x64
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	8b3b      	ldrh	r3, [r7, #24]
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4603      	mov	r3, r0
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <I2C_RBlocking+0x38>)
 8001362:	f002 fd65 	bl	8003e30 <HAL_I2C_Mem_Read>
	return 1;
 8001366:	2301      	movs	r3, #1

}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200001d4 	.word	0x200001d4

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <Error_Handler+0x8>

08001380 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(){
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af02      	add	r7, sp, #8
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    DMAREADY=1;
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <MPU6050_Init+0xc0>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
    I2C_Recive_Blocking(MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <MPU6050_Init+0xc4>)
 800138e:	681c      	ldr	r4, [r3, #0]
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	2201      	movs	r2, #1
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	2175      	movs	r1, #117	@ 0x75
 800139a:	20d0      	movs	r0, #208	@ 0xd0
 800139c:	47a0      	blx	r4
//    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);

    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b68      	cmp	r3, #104	@ 0x68
 80013a2:	d147      	bne.n	8001434 <MPU6050_Init+0xb4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71bb      	strb	r3, [r7, #6]
        I2C_Transmit_Blocking(MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,1000);
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <MPU6050_Init+0xc8>)
 80013aa:	681c      	ldr	r4, [r3, #0]
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013b2:	9201      	str	r2, [sp, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	216b      	movs	r1, #107	@ 0x6b
 80013bc:	20d0      	movs	r0, #208	@ 0xd0
 80013be:	47a0      	blx	r4

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80013c0:	2307      	movs	r3, #7
 80013c2:	71bb      	strb	r3, [r7, #6]
        I2C_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 80013c4:	4b20      	ldr	r3, [pc, #128]	@ (8001448 <MPU6050_Init+0xc8>)
 80013c6:	681c      	ldr	r4, [r3, #0]
 80013c8:	1dbb      	adds	r3, r7, #6
 80013ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	2119      	movs	r1, #25
 80013d8:	20d0      	movs	r0, #208	@ 0xd0
 80013da:	47a0      	blx	r4

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80013dc:	2300      	movs	r3, #0
 80013de:	71bb      	strb	r3, [r7, #6]
        I2C_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <MPU6050_Init+0xc8>)
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	1dbb      	adds	r3, r7, #6
 80013e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	211c      	movs	r1, #28
 80013f4:	20d0      	movs	r0, #208	@ 0xd0
 80013f6:	47a0      	blx	r4

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80013f8:	2300      	movs	r3, #0
 80013fa:	71bb      	strb	r3, [r7, #6]
        I2C_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000);
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <MPU6050_Init+0xc8>)
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	1dbb      	adds	r3, r7, #6
 8001402:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001406:	9201      	str	r2, [sp, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	211b      	movs	r1, #27
 8001410:	20d0      	movs	r0, #208	@ 0xd0
 8001412:	47a0      	blx	r4

        Data = 0x03;
 8001414:	2303      	movs	r3, #3
 8001416:	71bb      	strb	r3, [r7, #6]
        I2C_Transmit_Blocking(MPU6050_ADDR, LOWPASS_CONFIG, 1, &Data, 1,1000);
 8001418:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MPU6050_Init+0xc8>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	1dbb      	adds	r3, r7, #6
 800141e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001422:	9201      	str	r2, [sp, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	211a      	movs	r1, #26
 800142c:	20d0      	movs	r0, #208	@ 0xd0
 800142e:	47a0      	blx	r4

        return 0;
 8001430:	2300      	movs	r3, #0
 8001432:	e000      	b.n	8001436 <MPU6050_Init+0xb6>
    }
    return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	200003c0 	.word	0x200003c0
 8001444:	200003b8 	.word	0x200003b8
 8001448:	200003bc 	.word	0x200003bc

0800144c <MPU6050_NonBlocking_DMA>:
//    Kalman->P[1][1] -= K[1] * P01_temp;
//
//    return Kalman->angle;
//};

void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	I2C_Transmit = Master_Transmit;
 8001456:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <MPU6050_NonBlocking_DMA+0x24>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6013      	str	r3, [r2, #0]
	I2C_Recive = Master_Recive;
 800145c:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <MPU6050_NonBlocking_DMA+0x28>)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200003b4 	.word	0x200003b4
 8001474:	200003b0 	.word	0x200003b0

08001478 <MPU6050_I2C_Blocking>:
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	I2C_Recive_Blocking = Recive_Blocking;
 8001482:	4a06      	ldr	r2, [pc, #24]	@ (800149c <MPU6050_I2C_Blocking+0x24>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
	I2C_Transmit_Blocking = Transmit_Blocking;
 8001488:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <MPU6050_I2C_Blocking+0x28>)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6013      	str	r3, [r2, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200003b8 	.word	0x200003b8
 80014a0:	200003bc 	.word	0x200003bc

080014a4 <MPU6050_DMAREADY>:
void MPU6050_DMAREADY(){
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	DMAREADY=1;
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <MPU6050_DMAREADY+0x14>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	200003c0 	.word	0x200003c0

080014bc <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	81fb      	strh	r3, [r7, #14]
 80014ca:	460b      	mov	r3, r1
 80014cc:	81bb      	strh	r3, [r7, #12]
 80014ce:	4613      	mov	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	3307      	adds	r3, #7
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da00      	bge.n	80014de <SSD1306_DrawBitmap+0x22>
 80014dc:	3307      	adds	r3, #7
 80014de:	10db      	asrs	r3, r3, #3
 80014e0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	82bb      	strh	r3, [r7, #20]
 80014ea:	e044      	b.n	8001576 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	827b      	strh	r3, [r7, #18]
 80014f0:	e02f      	b.n	8001552 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80014f2:	8a7b      	ldrh	r3, [r7, #18]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	e012      	b.n	800152a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001504:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001508:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800150c:	fb03 f202 	mul.w	r2, r3, r2
 8001510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001514:	2b00      	cmp	r3, #0
 8001516:	da00      	bge.n	800151a <SSD1306_DrawBitmap+0x5e>
 8001518:	3307      	adds	r3, #7
 800151a:	10db      	asrs	r3, r3, #3
 800151c:	b21b      	sxth	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	461a      	mov	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800152a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800152e:	2b00      	cmp	r3, #0
 8001530:	da09      	bge.n	8001546 <SSD1306_DrawBitmap+0x8a>
 8001532:	89fa      	ldrh	r2, [r7, #14]
 8001534:	8a7b      	ldrh	r3, [r7, #18]
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	89b9      	ldrh	r1, [r7, #12]
 800153c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f951 	bl	80017e8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001546:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800154a:	b29b      	uxth	r3, r3
 800154c:	3301      	adds	r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	827b      	strh	r3, [r7, #18]
 8001552:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	429a      	cmp	r2, r3
 800155c:	dbc9      	blt.n	80014f2 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800155e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001562:	b29b      	uxth	r3, r3
 8001564:	3301      	adds	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	82bb      	strh	r3, [r7, #20]
 800156a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800156e:	b29b      	uxth	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	b29b      	uxth	r3, r3
 8001574:	81bb      	strh	r3, [r7, #12]
 8001576:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800157a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbb4      	blt.n	80014ec <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <SSD1306_Init>:

void SSD1306_Init()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 8001590:	22ae      	movs	r2, #174	@ 0xae
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	@ 0x78
 8001596:	f000 fb45 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800159a:	2220      	movs	r2, #32
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	@ 0x78
 80015a0:	f000 fb40 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80015a4:	2210      	movs	r2, #16
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	@ 0x78
 80015aa:	f000 fb3b 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 80015ae:	22b0      	movs	r2, #176	@ 0xb0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	@ 0x78
 80015b4:	f000 fb36 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 80015b8:	22c8      	movs	r2, #200	@ 0xc8
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	@ 0x78
 80015be:	f000 fb31 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	@ 0x78
 80015c8:	f000 fb2c 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80015cc:	2210      	movs	r2, #16
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	@ 0x78
 80015d2:	f000 fb27 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80015d6:	2240      	movs	r2, #64	@ 0x40
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	@ 0x78
 80015dc:	f000 fb22 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80015e0:	2281      	movs	r2, #129	@ 0x81
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	@ 0x78
 80015e6:	f000 fb1d 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015ea:	22ff      	movs	r2, #255	@ 0xff
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	@ 0x78
 80015f0:	f000 fb18 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80015f4:	22a1      	movs	r2, #161	@ 0xa1
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	@ 0x78
 80015fa:	f000 fb13 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 80015fe:	22a6      	movs	r2, #166	@ 0xa6
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	@ 0x78
 8001604:	f000 fb0e 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8001608:	22a8      	movs	r2, #168	@ 0xa8
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	@ 0x78
 800160e:	f000 fb09 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001612:	223f      	movs	r2, #63	@ 0x3f
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	@ 0x78
 8001618:	f000 fb04 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 800161c:	22a4      	movs	r2, #164	@ 0xa4
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	@ 0x78
 8001622:	f000 faff 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8001626:	22d3      	movs	r2, #211	@ 0xd3
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	@ 0x78
 800162c:	f000 fafa 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	@ 0x78
 8001636:	f000 faf5 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 800163a:	22d5      	movs	r2, #213	@ 0xd5
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	@ 0x78
 8001640:	f000 faf0 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001644:	22f0      	movs	r2, #240	@ 0xf0
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	@ 0x78
 800164a:	f000 faeb 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 800164e:	22d9      	movs	r2, #217	@ 0xd9
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	@ 0x78
 8001654:	f000 fae6 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8001658:	2222      	movs	r2, #34	@ 0x22
 800165a:	2100      	movs	r1, #0
 800165c:	2078      	movs	r0, #120	@ 0x78
 800165e:	f000 fae1 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001662:	22da      	movs	r2, #218	@ 0xda
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	@ 0x78
 8001668:	f000 fadc 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800166c:	2212      	movs	r2, #18
 800166e:	2100      	movs	r1, #0
 8001670:	2078      	movs	r0, #120	@ 0x78
 8001672:	f000 fad7 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001676:	22db      	movs	r2, #219	@ 0xdb
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	@ 0x78
 800167c:	f000 fad2 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001680:	2220      	movs	r2, #32
 8001682:	2100      	movs	r1, #0
 8001684:	2078      	movs	r0, #120	@ 0x78
 8001686:	f000 facd 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 800168a:	228d      	movs	r2, #141	@ 0x8d
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	@ 0x78
 8001690:	f000 fac8 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001694:	2214      	movs	r2, #20
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	@ 0x78
 800169a:	f000 fac3 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 800169e:	22af      	movs	r2, #175	@ 0xaf
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	@ 0x78
 80016a4:	f000 fabe 	bl	8001c24 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80016a8:	222e      	movs	r2, #46	@ 0x2e
 80016aa:	2100      	movs	r1, #0
 80016ac:	2078      	movs	r0, #120	@ 0x78
 80016ae:	f000 fab9 	bl	8001c24 <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <SSD1306_Init+0x160>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <SSD1306_Init+0x160>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <SSD1306_Init+0x160>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <SSD1306_Init+0x160>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <SSD1306_Init+0x160>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	71da      	strb	r2, [r3, #7]
	SSD1306.DMAREADY=1;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <SSD1306_Init+0x160>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	745a      	strb	r2, [r3, #17]
	SSD1306.Needtorefresh=1;
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SSD1306_Init+0x160>)
 80016d8:	2201      	movs	r2, #1
 80016da:	741a      	strb	r2, [r3, #16]
	SSD1306_Fill(BLACK);
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 f86b 	bl	80017b8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80016e2:	f000 f805 	bl	80016f0 <SSD1306_UpdateScreen>

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200007cc 	.word	0x200007cc

080016f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80016f0:	b598      	push	{r3, r4, r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	if(SSD1306.DMAREADY && SSD1306.Needtorefresh){
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 80016f6:	7c5b      	ldrb	r3, [r3, #17]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d052      	beq.n	80017a2 <SSD1306_UpdateScreen+0xb2>
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 80016fe:	7c1b      	ldrb	r3, [r3, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d04e      	beq.n	80017a2 <SSD1306_UpdateScreen+0xb2>
		switch(SSD1306.DMA){
 8001704:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001706:	79db      	ldrb	r3, [r3, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <SSD1306_UpdateScreen+0x56>
 800170c:	2b01      	cmp	r3, #1
 800170e:	d137      	bne.n	8001780 <SSD1306_UpdateScreen+0x90>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[SSD1306_WIDTH*SSD1306.Page], SSD1306_WIDTH)==1){
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <SSD1306_UpdateScreen+0xbc>)
 8001712:	681c      	ldr	r4, [r3, #0]
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001716:	799b      	ldrb	r3, [r3, #6]
 8001718:	01db      	lsls	r3, r3, #7
 800171a:	4a25      	ldr	r2, [pc, #148]	@ (80017b0 <SSD1306_UpdateScreen+0xc0>)
 800171c:	441a      	add	r2, r3
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	2140      	movs	r1, #64	@ 0x40
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	47a0      	blx	r4
 8001726:	4603      	mov	r3, r0
 8001728:	2b01      	cmp	r3, #1
 800172a:	d12d      	bne.n	8001788 <SSD1306_UpdateScreen+0x98>
					SSD1306.Page++;
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 800172e:	799b      	ldrb	r3, [r3, #6]
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001736:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 800173a:	2200      	movs	r2, #0
 800173c:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001740:	2200      	movs	r2, #0
 8001742:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001744:	e020      	b.n	8001788 <SSD1306_UpdateScreen+0x98>
			case CMD:

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001748:	799b      	ldrb	r3, [r3, #6]
 800174a:	3b50      	subs	r3, #80	@ 0x50
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001750:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001754:	2200      	movs	r2, #0
 8001756:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 800175a:	2210      	movs	r2, #16
 800175c:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <SSD1306_UpdateScreen+0xbc>)
 8001760:	681c      	ldr	r4, [r3, #0]
 8001762:	2303      	movs	r3, #3
 8001764:	4a13      	ldr	r2, [pc, #76]	@ (80017b4 <SSD1306_UpdateScreen+0xc4>)
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	@ 0x78
 800176a:	47a0      	blx	r4
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	d10c      	bne.n	800178c <SSD1306_UpdateScreen+0x9c>
					SSD1306.DMA=Data;
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001774:	2201      	movs	r2, #1
 8001776:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 800177a:	2200      	movs	r2, #0
 800177c:	745a      	strb	r2, [r3, #17]
				}
				break;
 800177e:	e005      	b.n	800178c <SSD1306_UpdateScreen+0x9c>

			default:
				SSD1306.Page=8;
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001782:	2208      	movs	r2, #8
 8001784:	719a      	strb	r2, [r3, #6]
				break;
 8001786:	e002      	b.n	800178e <SSD1306_UpdateScreen+0x9e>
				break;
 8001788:	bf00      	nop
 800178a:	e000      	b.n	800178e <SSD1306_UpdateScreen+0x9e>
				break;
 800178c:	bf00      	nop
			}
		if(SSD1306.Page>7){
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001790:	799b      	ldrb	r3, [r3, #6]
 8001792:	2b07      	cmp	r3, #7
 8001794:	d905      	bls.n	80017a2 <SSD1306_UpdateScreen+0xb2>
			SSD1306.Page=0;
 8001796:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 8001798:	2200      	movs	r2, #0
 800179a:	719a      	strb	r2, [r3, #6]
			SSD1306.Needtorefresh=0;
 800179c:	4b02      	ldr	r3, [pc, #8]	@ (80017a8 <SSD1306_UpdateScreen+0xb8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	741a      	strb	r2, [r3, #16]
		}
	}
}
 80017a2:	bf00      	nop
 80017a4:	bd98      	pop	{r3, r4, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200007cc 	.word	0x200007cc
 80017ac:	200007c4 	.word	0x200007c4
 80017b0:	200003c4 	.word	0x200003c4
 80017b4:	200007d4 	.word	0x200007d4

080017b8 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <SSD1306_Fill+0x14>
 80017c8:	2300      	movs	r3, #0
 80017ca:	e000      	b.n	80017ce <SSD1306_Fill+0x16>
 80017cc:	23ff      	movs	r3, #255	@ 0xff
 80017ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d2:	4619      	mov	r1, r3
 80017d4:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <SSD1306_Fill+0x2c>)
 80017d6:	f00c fa5d 	bl	800dc94 <memset>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200003c4 	.word	0x200003c4

080017e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
 80017f2:	460b      	mov	r3, r1
 80017f4:	80bb      	strh	r3, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80017fe:	d848      	bhi.n	8001892 <SSD1306_DrawPixel+0xaa>
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	2b3f      	cmp	r3, #63	@ 0x3f
 8001804:	d845      	bhi.n	8001892 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <SSD1306_DrawPixel+0xb8>)
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d11a      	bne.n	8001858 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001822:	88fa      	ldrh	r2, [r7, #6]
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	b298      	uxth	r0, r3
 800182a:	4603      	mov	r3, r0
 800182c:	01db      	lsls	r3, r3, #7
 800182e:	4413      	add	r3, r2
 8001830:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <SSD1306_DrawPixel+0xbc>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	b25a      	sxtb	r2, r3
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	b25b      	sxtb	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	b259      	sxtb	r1, r3
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	4603      	mov	r3, r0
 800184c:	01db      	lsls	r3, r3, #7
 800184e:	4413      	add	r3, r2
 8001850:	b2c9      	uxtb	r1, r1
 8001852:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <SSD1306_DrawPixel+0xbc>)
 8001854:	54d1      	strb	r1, [r2, r3]
 8001856:	e01d      	b.n	8001894 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	b298      	uxth	r0, r3
 8001860:	4603      	mov	r3, r0
 8001862:	01db      	lsls	r3, r3, #7
 8001864:	4413      	add	r3, r2
 8001866:	4a0f      	ldr	r2, [pc, #60]	@ (80018a4 <SSD1306_DrawPixel+0xbc>)
 8001868:	5cd3      	ldrb	r3, [r2, r3]
 800186a:	b25a      	sxtb	r2, r3
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	b25b      	sxtb	r3, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	b25b      	sxtb	r3, r3
 800187e:	4013      	ands	r3, r2
 8001880:	b259      	sxtb	r1, r3
 8001882:	88fa      	ldrh	r2, [r7, #6]
 8001884:	4603      	mov	r3, r0
 8001886:	01db      	lsls	r3, r3, #7
 8001888:	4413      	add	r3, r2
 800188a:	b2c9      	uxtb	r1, r1
 800188c:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SSD1306_DrawPixel+0xbc>)
 800188e:	54d1      	strb	r1, [r2, r3]
 8001890:	e000      	b.n	8001894 <SSD1306_DrawPixel+0xac>
		return;
 8001892:	bf00      	nop
	}
}
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200007cc 	.word	0x200007cc
 80018a4:	200003c4 	.word	0x200003c4

080018a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	80fb      	strh	r3, [r7, #6]
 80018b4:	4613      	mov	r3, r2
 80018b6:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 80018b8:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <SSD1306_GotoXY+0x28>)
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <SSD1306_GotoXY+0x28>)
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	8053      	strh	r3, [r2, #2]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	200007cc 	.word	0x200007cc

080018d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 80018e4:	4b39      	ldr	r3, [pc, #228]	@ (80019cc <SSD1306_Putc+0xf8>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018f2:	dc07      	bgt.n	8001904 <SSD1306_Putc+0x30>
 80018f4:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <SSD1306_Putc+0xf8>)
 80018f6:	885b      	ldrh	r3, [r3, #2]
 80018f8:	461a      	mov	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	4413      	add	r3, r2
 8001900:	2b3f      	cmp	r3, #63	@ 0x3f
 8001902:	dd01      	ble.n	8001908 <SSD1306_Putc+0x34>
		return 0;
 8001904:	2300      	movs	r3, #0
 8001906:	e05d      	b.n	80019c4 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e04b      	b.n	80019a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3b20      	subs	r3, #32
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	7849      	ldrb	r1, [r1, #1]
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4619      	mov	r1, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	440b      	add	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	e030      	b.n	8001994 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4413      	add	r3, r2
 800194c:	b298      	uxth	r0, r3
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001950:	885a      	ldrh	r2, [r3, #2]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	b29b      	uxth	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b29b      	uxth	r3, r3
 800195a:	79ba      	ldrb	r2, [r7, #6]
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff ff43 	bl	80017e8 <SSD1306_DrawPixel>
 8001962:	e014      	b.n	800198e <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b298      	uxth	r0, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001972:	885a      	ldrh	r2, [r3, #2]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4413      	add	r3, r2
 800197a:	b299      	uxth	r1, r3
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	f7ff ff2d 	bl	80017e8 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	3301      	adds	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4293      	cmp	r3, r2
 800199e:	d3c8      	bcc.n	8001932 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	461a      	mov	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d3ad      	bcc.n	800190e <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <SSD1306_Putc+0xf8>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <SSD1306_Putc+0xf8>)
 80019c0:	801a      	strh	r2, [r3, #0]
	return ch;
 80019c2:	79fb      	ldrb	r3, [r7, #7]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200007cc 	.word	0x200007cc

080019d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	71fb      	strb	r3, [r7, #7]
	while(*str)
 80019de:	e012      	b.n	8001a06 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff73 	bl	80018d4 <SSD1306_Putc>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d002      	beq.n	8001a00 <SSD1306_Puts+0x30>
			return *str;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	e008      	b.n	8001a12 <SSD1306_Puts+0x42>
		}
		str++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
	while(*str)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1e8      	bne.n	80019e0 <SSD1306_Puts+0x10>
	}
	return *str;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	781b      	ldrb	r3, [r3, #0]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c)
{
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4604      	mov	r4, r0
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4623      	mov	r3, r4
 8001a2a:	80fb      	strh	r3, [r7, #6]
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	80bb      	strh	r3, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	if(x0 >= SSD1306_WIDTH){
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a3c:	d901      	bls.n	8001a42 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001a3e:	237f      	movs	r3, #127	@ 0x7f
 8001a40:	80fb      	strh	r3, [r7, #6]
	}
	if(x1 >= SSD1306_WIDTH){
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a46:	d901      	bls.n	8001a4c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001a48:	237f      	movs	r3, #127	@ 0x7f
 8001a4a:	807b      	strh	r3, [r7, #2]
	}
	if(y0 >= SSD1306_HEIGHT){
 8001a4c:	88bb      	ldrh	r3, [r7, #4]
 8001a4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a50:	d901      	bls.n	8001a56 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001a52:	233f      	movs	r3, #63	@ 0x3f
 8001a54:	80bb      	strh	r3, [r7, #4]
	}
	if(y1 >= SSD1306_HEIGHT){
 8001a56:	883b      	ldrh	r3, [r7, #0]
 8001a58:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5a:	d901      	bls.n	8001a60 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001a5c:	233f      	movs	r3, #63	@ 0x3f
 8001a5e:	803b      	strh	r3, [r7, #0]
	}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001a60:	88fa      	ldrh	r2, [r7, #6]
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d205      	bcs.n	8001a74 <SSD1306_DrawLine+0x5a>
 8001a68:	887a      	ldrh	r2, [r7, #2]
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	e004      	b.n	8001a7e <SSD1306_DrawLine+0x64>
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	883b      	ldrh	r3, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d205      	bcs.n	8001a94 <SSD1306_DrawLine+0x7a>
 8001a88:	883a      	ldrh	r2, [r7, #0]
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	e004      	b.n	8001a9e <SSD1306_DrawLine+0x84>
 8001a94:	88ba      	ldrh	r2, [r7, #4]
 8001a96:	883b      	ldrh	r3, [r7, #0]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d201      	bcs.n	8001aac <SSD1306_DrawLine+0x92>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e001      	b.n	8001ab0 <SSD1306_DrawLine+0x96>
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001ab2:	88ba      	ldrh	r2, [r7, #4]
 8001ab4:	883b      	ldrh	r3, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d201      	bcs.n	8001abe <SSD1306_DrawLine+0xa4>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e001      	b.n	8001ac2 <SSD1306_DrawLine+0xa8>
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001ac4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ac8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dd06      	ble.n	8001ade <SSD1306_DrawLine+0xc4>
 8001ad0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad4:	0fda      	lsrs	r2, r3, #31
 8001ad6:	4413      	add	r3, r2
 8001ad8:	105b      	asrs	r3, r3, #1
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	e006      	b.n	8001aec <SSD1306_DrawLine+0xd2>
 8001ade:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ae2:	0fda      	lsrs	r2, r3, #31
 8001ae4:	4413      	add	r3, r2
 8001ae6:	105b      	asrs	r3, r3, #1
 8001ae8:	425b      	negs	r3, r3
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	82fb      	strh	r3, [r7, #22]

	if(dx == 0){
 8001aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d129      	bne.n	8001b4a <SSD1306_DrawLine+0x130>
		if(y1 < y0){
 8001af6:	883a      	ldrh	r2, [r7, #0]
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d205      	bcs.n	8001b0a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001afe:	883b      	ldrh	r3, [r7, #0]
 8001b00:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001b02:	88bb      	ldrh	r3, [r7, #4]
 8001b04:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001b06:	893b      	ldrh	r3, [r7, #8]
 8001b08:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d205      	bcs.n	8001b1e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001b12:	887b      	ldrh	r3, [r7, #2]
 8001b14:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001b1a:	893b      	ldrh	r3, [r7, #8]
 8001b1c:	80fb      	strh	r3, [r7, #6]
		}
		for(i=y0; i<=y1; i++){
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	82bb      	strh	r3, [r7, #20]
 8001b22:	e00c      	b.n	8001b3e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001b24:	8ab9      	ldrh	r1, [r7, #20]
 8001b26:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe5b 	bl	80017e8 <SSD1306_DrawPixel>
		for(i=y0; i<=y1; i++){
 8001b32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	82bb      	strh	r3, [r7, #20]
 8001b3e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b42:	883b      	ldrh	r3, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dded      	ble.n	8001b24 <SSD1306_DrawLine+0x10a>
		}
		return;
 8001b48:	e05f      	b.n	8001c0a <SSD1306_DrawLine+0x1f0>
	}

	if(dy == 0){
 8001b4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d129      	bne.n	8001ba6 <SSD1306_DrawLine+0x18c>
		if(y1 < y0){
 8001b52:	883a      	ldrh	r2, [r7, #0]
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d205      	bcs.n	8001b66 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001b5a:	883b      	ldrh	r3, [r7, #0]
 8001b5c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001b5e:	88bb      	ldrh	r3, [r7, #4]
 8001b60:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001b62:	893b      	ldrh	r3, [r7, #8]
 8001b64:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d205      	bcs.n	8001b7a <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001b76:	893b      	ldrh	r3, [r7, #8]
 8001b78:	80fb      	strh	r3, [r7, #6]
		}
		for(i = x0; i <= x1; i++){
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	82bb      	strh	r3, [r7, #20]
 8001b7e:	e00c      	b.n	8001b9a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001b80:	8abb      	ldrh	r3, [r7, #20]
 8001b82:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b86:	88b9      	ldrh	r1, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe2d 	bl	80017e8 <SSD1306_DrawPixel>
		for(i = x0; i <= x1; i++){
 8001b8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	82bb      	strh	r3, [r7, #20]
 8001b9a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dded      	ble.n	8001b80 <SSD1306_DrawLine+0x166>
		}
		return;
 8001ba4:	e031      	b.n	8001c0a <SSD1306_DrawLine+0x1f0>
	}

	while(1)
	{
		SSD1306_DrawPixel(x0, y0, c);
 8001ba6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001baa:	88b9      	ldrh	r1, [r7, #4]
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe1a 	bl	80017e8 <SSD1306_DrawPixel>
		if(x0 == x1 && y0 == y1){
 8001bb4:	88fa      	ldrh	r2, [r7, #6]
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d103      	bne.n	8001bc4 <SSD1306_DrawLine+0x1aa>
 8001bbc:	88ba      	ldrh	r2, [r7, #4]
 8001bbe:	883b      	ldrh	r3, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d021      	beq.n	8001c08 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8001bc4:	8afb      	ldrh	r3, [r7, #22]
 8001bc6:	817b      	strh	r3, [r7, #10]
		if(e2 > -dx){
 8001bc8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dd08      	ble.n	8001be8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001bd6:	8afa      	ldrh	r2, [r7, #22]
 8001bd8:	8a3b      	ldrh	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001be0:	89fa      	ldrh	r2, [r7, #14]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4413      	add	r3, r2
 8001be6:	80fb      	strh	r3, [r7, #6]
		}
		if(e2 < dy){
 8001be8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dad8      	bge.n	8001ba6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001bf4:	8afa      	ldrh	r2, [r7, #22]
 8001bf6:	8a7b      	ldrh	r3, [r7, #18]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001bfe:	89ba      	ldrh	r2, [r7, #12]
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001c06:	e7ce      	b.n	8001ba6 <SSD1306_DrawLine+0x18c>
			break;
 8001c08:	bf00      	nop
		}
	}
}
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fdcf 	bl	80017b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001c1a:	f7ff fd69 	bl	80016f0 <SSD1306_UpdateScreen>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	4613      	mov	r3, r2
 8001c34:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c3a:	797b      	ldrb	r3, [r7, #5]
 8001c3c:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <SSD1306_I2C_Write+0x34>)
 8001c40:	681c      	ldr	r4, [r3, #0]
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	b298      	uxth	r0, r3
 8001c46:	f107 010c 	add.w	r1, r7, #12
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	47a0      	blx	r4
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	200007c8 	.word	0x200007c8

08001c5c <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 8001c66:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <Display_Set_I2C_Master_Transmit+0x24>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8001c6c:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <Display_Set_I2C_Master_Transmit+0x28>)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200007c4 	.word	0x200007c4
 8001c84:	200007c8 	.word	0x200007c8

08001c88 <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(){
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
	SSD1306.DMAREADY=1;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <SSD1306_DMAREADY+0x14>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	745a      	strb	r2, [r3, #17]
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	200007cc 	.word	0x200007cc

08001ca0 <SSD1306_RefreshReady>:

void SSD1306_RefreshReady(){
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
	SSD1306.Needtorefresh=1;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <SSD1306_RefreshReady+0x14>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	741a      	strb	r2, [r3, #16]
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	200007cc 	.word	0x200007cc

08001cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <HAL_MspInit+0x4c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d04 <HAL_MspInit+0x4c>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_MspInit+0x4c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a08      	ldr	r2, [pc, #32]	@ (8001d04 <HAL_MspInit+0x4c>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a28      	ldr	r2, [pc, #160]	@ (8001dc8 <HAL_ADC_MspInit+0xc0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d149      	bne.n	8001dbe <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <HAL_ADC_MspInit+0xc4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001d7e:	23fe      	movs	r3, #254	@ 0xfe
 8001d80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d82:	2303      	movs	r3, #3
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480f      	ldr	r0, [pc, #60]	@ (8001dd0 <HAL_ADC_MspInit+0xc8>)
 8001d92:	f001 fb43 	bl	800341c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d96:	2301      	movs	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	480a      	ldr	r0, [pc, #40]	@ (8001dd4 <HAL_ADC_MspInit+0xcc>)
 8001daa:	f001 fb37 	bl	800341c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2012      	movs	r0, #18
 8001db4:	f000 ff4f 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001db8:	2012      	movs	r0, #18
 8001dba:	f000 ff68 	bl	8002c8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	@ 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40012000 	.word	0x40012000
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f34 <HAL_I2C_MspInit+0x15c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	f040 8097 	bne.w	8001f2a <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	4b4d      	ldr	r3, [pc, #308]	@ (8001f38 <HAL_I2C_MspInit+0x160>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_I2C_MspInit+0x160>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f38 <HAL_I2C_MspInit+0x160>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e18:	23c0      	movs	r3, #192	@ 0xc0
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1c:	2312      	movs	r3, #18
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4842      	ldr	r0, [pc, #264]	@ (8001f3c <HAL_I2C_MspInit+0x164>)
 8001e34:	f001 faf2 	bl	800341c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f38 <HAL_I2C_MspInit+0x160>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	4a3d      	ldr	r2, [pc, #244]	@ (8001f38 <HAL_I2C_MspInit+0x160>)
 8001e42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e48:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_I2C_MspInit+0x160>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001e54:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e56:	4a3b      	ldr	r2, [pc, #236]	@ (8001f44 <HAL_I2C_MspInit+0x16c>)
 8001e58:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e60:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e66:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6c:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e72:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e74:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7a:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e80:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e86:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e92:	482b      	ldr	r0, [pc, #172]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001e94:	f000 ff16 	bl	8002cc4 <HAL_DMA_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001e9e:	f7ff fa69 	bl	8001374 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a26      	ldr	r2, [pc, #152]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001ea6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ea8:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <HAL_I2C_MspInit+0x168>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001eae:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001eb0:	4a26      	ldr	r2, [pc, #152]	@ (8001f4c <HAL_I2C_MspInit+0x174>)
 8001eb2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001eb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ece:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001eee:	4816      	ldr	r0, [pc, #88]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001ef0:	f000 fee8 	bl	8002cc4 <HAL_DMA_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001efa:	f7ff fa3b 	bl	8001374 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a11      	ldr	r2, [pc, #68]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001f02:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f04:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <HAL_I2C_MspInit+0x170>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	201f      	movs	r0, #31
 8001f10:	f000 fea1 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f14:	201f      	movs	r0, #31
 8001f16:	f000 feba 	bl	8002c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2020      	movs	r0, #32
 8001f20:	f000 fe99 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f24:	2020      	movs	r0, #32
 8001f26:	f000 feb2 	bl	8002c8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40005400 	.word	0x40005400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	20000228 	.word	0x20000228
 8001f44:	40026028 	.word	0x40026028
 8001f48:	20000288 	.word	0x20000288
 8001f4c:	40026010 	.word	0x40026010

08001f50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x80>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d116      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x84>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x84>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f72:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x84>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	201d      	movs	r0, #29
 8001f84:	f000 fe67 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f88:	201d      	movs	r0, #29
 8001f8a:	f000 fe80 	bl	8002c8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f8e:	e01a      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x88>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d115      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x84>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x84>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x84>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	201a      	movs	r0, #26
 8001fbc:	f000 fe4b 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fc0:	201a      	movs	r0, #26
 8001fc2:	f000 fe64 	bl	8002c8e <HAL_NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40014800 	.word	0x40014800

08001fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <HAL_TIM_MspPostInit+0x68>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11d      	bne.n	800203a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_TIM_MspPostInit+0x6c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <HAL_TIM_MspPostInit+0x6c>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_TIM_MspPostInit+0x6c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 800201a:	2330      	movs	r3, #48	@ 0x30
 800201c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800202a:	2302      	movs	r3, #2
 800202c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	@ (800204c <HAL_TIM_MspPostInit+0x70>)
 8002036:	f001 f9f1 	bl	800341c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40000400 	.word	0x40000400
 8002048:	40023800 	.word	0x40023800
 800204c:	40020400 	.word	0x40020400

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <NMI_Handler+0x4>

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <MemManage_Handler+0x4>

08002068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <UsageFault_Handler+0x4>

08002078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a6:	f000 f917 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <DMA1_Stream0_IRQHandler+0x10>)
 80020b6:	f000 ff2d 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000288 	.word	0x20000288

080020c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <DMA1_Stream1_IRQHandler+0x10>)
 80020ca:	f000 ff23 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000228 	.word	0x20000228

080020d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <ADC_IRQHandler+0x10>)
 80020de:	f000 f982 	bl	80023e6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000018c 	.word	0x2000018c

080020ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020f2:	f006 fe45 	bl	8008d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000330 	.word	0x20000330

08002100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM3_IRQHandler+0x10>)
 8002106:	f006 fe3b 	bl	8008d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002e8 	.word	0x200002e8

08002114 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <I2C1_EV_IRQHandler+0x10>)
 800211a:	f002 fba9 	bl	8004870 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200001d4 	.word	0x200001d4

08002128 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <I2C1_ER_IRQHandler+0x10>)
 800212e:	f002 fd10 	bl	8004b52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200001d4 	.word	0x200001d4

0800213c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <OTG_FS_IRQHandler+0x10>)
 8002142:	f004 ff0e 	bl	8006f62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200010cc 	.word	0x200010cc

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f00b fda0 	bl	800dcc4 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20020000 	.word	0x20020000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	200007e0 	.word	0x200007e0
 80021b8:	20001918 	.word	0x20001918

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002218 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021e4:	f7ff ffea 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ea:	490d      	ldr	r1, [pc, #52]	@ (8002220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002200:	4c0a      	ldr	r4, [pc, #40]	@ (800222c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f00b fd5f 	bl	800dcd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7fe fceb 	bl	8000bec <main>
  bx  lr    
 8002216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002224:	0800f080 	.word	0x0800f080
  ldr r2, =_sbss
 8002228:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800222c:	20001918 	.word	0x20001918

08002230 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <DMA1_Stream2_IRQHandler>
	...

08002234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <HAL_Init+0x40>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_Init+0x40>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_Init+0x40>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 fcef 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	200f      	movs	r0, #15
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fd26 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fd07 	bl	8002caa <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 fccf 	bl	8002c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	@ (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2000000c 	.word	0x2000000c
 80022d0:	20000014 	.word	0x20000014
 80022d4:	20000010 	.word	0x20000010

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000014 	.word	0x20000014
 80022fc:	200007e4 	.word	0x200007e4

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200007e4 	.word	0x200007e4

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff ffee 	bl	8002300 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_Delay+0x44>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233e:	bf00      	nop
 8002340:	f7ff ffde 	bl	8002300 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000014 	.word	0x20000014

08002360 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e033      	b.n	80023de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fcc2 	bl	8001d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023a6:	f023 0302 	bic.w	r3, r3, #2
 80023aa:	f043 0202 	orr.w	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa6e 	bl	8002894 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80023ce:	e001      	b.n	80023d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d049      	beq.n	80024b0 <HAL_ADC_IRQHandler+0xca>
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d046      	beq.n	80024b0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d12b      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244c:	2b00      	cmp	r3, #0
 800244e:	d127      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002468:	2b00      	cmp	r3, #0
 800246a:	d119      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0220 	bic.w	r2, r2, #32
 800247a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7fe fb0b 	bl	8000abc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0212 	mvn.w	r2, #18
 80024ae:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024be:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d057      	beq.n	8002576 <HAL_ADC_IRQHandler+0x190>
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d054      	beq.n	8002576 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d139      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800250a:	2b00      	cmp	r3, #0
 800250c:	d12b      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d124      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11d      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d119      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002540:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa90 	bl	8002a8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 020c 	mvn.w	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002584:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_ADC_IRQHandler+0x1d6>
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d014      	beq.n	80025bc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10d      	bne.n	80025bc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f82a 	bl	8002606 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0201 	mvn.w	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025ca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d015      	beq.n	80025fe <HAL_ADC_IRQHandler+0x218>
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025dc:	f043 0202 	orr.w	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0220 	mvn.w	r2, #32
 80025ec:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f813 	bl	800261a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0220 	mvn.w	r2, #32
 80025fc:	601a      	str	r2, [r3, #0]
  }
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1c>
 8002648:	2302      	movs	r3, #2
 800264a:	e113      	b.n	8002874 <HAL_ADC_ConfigChannel+0x244>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b09      	cmp	r3, #9
 800265a:	d925      	bls.n	80026a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68d9      	ldr	r1, [r3, #12]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	3b1e      	subs	r3, #30
 8002672:	2207      	movs	r2, #7
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43da      	mvns	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	400a      	ands	r2, r1
 8002680:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68d9      	ldr	r1, [r3, #12]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	4618      	mov	r0, r3
 8002694:	4603      	mov	r3, r0
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4403      	add	r3, r0
 800269a:	3b1e      	subs	r3, #30
 800269c:	409a      	lsls	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	e022      	b.n	80026ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6919      	ldr	r1, [r3, #16]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	2207      	movs	r2, #7
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4618      	mov	r0, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4403      	add	r3, r0
 80026e4:	409a      	lsls	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d824      	bhi.n	8002740 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b05      	subs	r3, #5
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b05      	subs	r3, #5
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34
 800273e:	e04c      	b.n	80027da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d824      	bhi.n	8002792 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	3b23      	subs	r3, #35	@ 0x23
 800275a:	221f      	movs	r2, #31
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43da      	mvns	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	400a      	ands	r2, r1
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4618      	mov	r0, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b23      	subs	r3, #35	@ 0x23
 8002784:	fa00 f203 	lsl.w	r2, r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002790:	e023      	b.n	80027da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3b41      	subs	r3, #65	@ 0x41
 80027a4:	221f      	movs	r2, #31
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	400a      	ands	r2, r1
 80027b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b41      	subs	r3, #65	@ 0x41
 80027ce:	fa00 f203 	lsl.w	r2, r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027da:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <HAL_ADC_ConfigChannel+0x250>)
 80027dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a28      	ldr	r2, [pc, #160]	@ (8002884 <HAL_ADC_ConfigChannel+0x254>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d10f      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d8>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b12      	cmp	r3, #18
 80027ee:	d10b      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <HAL_ADC_ConfigChannel+0x254>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d12b      	bne.n	800286a <HAL_ADC_ConfigChannel+0x23a>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_ADC_ConfigChannel+0x258>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <HAL_ADC_ConfigChannel+0x1f4>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b11      	cmp	r3, #17
 8002822:	d122      	bne.n	800286a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <HAL_ADC_ConfigChannel+0x258>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d111      	bne.n	800286a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_ADC_ConfigChannel+0x25c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <HAL_ADC_ConfigChannel+0x260>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	0c9a      	lsrs	r2, r3, #18
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800285c:	e002      	b.n	8002864 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3b01      	subs	r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f9      	bne.n	800285e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40012300 	.word	0x40012300
 8002884:	40012000 	.word	0x40012000
 8002888:	10000012 	.word	0x10000012
 800288c:	2000000c 	.word	0x2000000c
 8002890:	431bde83 	.word	0x431bde83

08002894 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289c:	4b79      	ldr	r3, [pc, #484]	@ (8002a84 <ADC_Init+0x1f0>)
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	021a      	lsls	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800290e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	4a58      	ldr	r2, [pc, #352]	@ (8002a88 <ADC_Init+0x1f4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800293a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e00f      	b.n	8002992 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002990:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0202 	bic.w	r2, r2, #2
 80029a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e1b      	ldrb	r3, [r3, #24]
 80029ac:	005a      	lsls	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	3b01      	subs	r3, #1
 80029ec:	035a      	lsls	r2, r3, #13
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	e007      	b.n	8002a08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	051a      	lsls	r2, r3, #20
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a4a:	025a      	lsls	r2, r3, #9
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	029a      	lsls	r2, r3, #10
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012300 	.word	0x40012300
 8002a88:	0f000001 	.word	0x0f000001

08002a8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0b      	blt.n	8002b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	@ (8002b3c <__NVIC_EnableIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	@ (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	@ (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	@ 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	@ 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff8e 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff29 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff ff3e 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff8e 	bl	8002b94 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff31 	bl	8002b04 <__NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffa2 	bl	8002bfc <SysTick_Config>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff fb16 	bl	8002300 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e099      	b.n	8002e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d00:	e00f      	b.n	8002d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d02:	f7ff fafd 	bl	8002300 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d908      	bls.n	8002d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e078      	b.n	8002e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e8      	bne.n	8002d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <HAL_DMA_Init+0x158>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d107      	bne.n	8002d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	4313      	orrs	r3, r2
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0307 	bic.w	r3, r3, #7
 8002da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d117      	bne.n	8002de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 faab 	bl	8003324 <DMA_CheckFifoParam>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	@ 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002de2:	2301      	movs	r3, #1
 8002de4:	e016      	b.n	8002e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa62 	bl	80032b8 <DMA_CalcBaseAndBitshift>
 8002df4:	4603      	mov	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	223f      	movs	r2, #63	@ 0x3f
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	f010803f 	.word	0xf010803f

08002e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Start_IT+0x26>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e040      	b.n	8002ec8 <HAL_DMA_Start_IT+0xa8>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d12f      	bne.n	8002eba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f9f4 	bl	800325c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	223f      	movs	r2, #63	@ 0x3f
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0216 	orr.w	r2, r2, #22
 8002e8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0208 	orr.w	r2, r2, #8
 8002ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e005      	b.n	8002ec6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d004      	beq.n	8002eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2280      	movs	r2, #128	@ 0x80
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00c      	b.n	8002f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2205      	movs	r2, #5
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f20:	4b8e      	ldr	r3, [pc, #568]	@ (800315c <HAL_DMA_IRQHandler+0x248>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a8e      	ldr	r2, [pc, #568]	@ (8003160 <HAL_DMA_IRQHandler+0x24c>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	2208      	movs	r2, #8
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fae:	f043 0202 	orr.w	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	2204      	movs	r2, #4
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d012      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd8:	2204      	movs	r2, #4
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d043      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d03c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	2210      	movs	r2, #16
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d018      	beq.n	8003056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d024      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
 8003042:	e01f      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
 8003054:	e016      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0208 	bic.w	r2, r2, #8
 8003072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003088:	2220      	movs	r2, #32
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808f 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8087 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	2220      	movs	r2, #32
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d136      	bne.n	800312c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0216 	bic.w	r2, r2, #22
 80030cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_DMA_IRQHandler+0x1da>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0208 	bic.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	223f      	movs	r2, #63	@ 0x3f
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311e:	2b00      	cmp	r3, #0
 8003120:	d07e      	beq.n	8003220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
        }
        return;
 800312a:	e079      	b.n	8003220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01d      	beq.n	8003176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	2b00      	cmp	r3, #0
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e02c      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
 800315a:	bf00      	nop
 800315c:	2000000c 	.word	0x2000000c
 8003160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
 8003174:	e01e      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0210 	bic.w	r2, r2, #16
 8003192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d032      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d022      	beq.n	800320e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2205      	movs	r2, #5
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d307      	bcc.n	80031fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f2      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x2cc>
 80031fa:	e000      	b.n	80031fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e000      	b.n	8003222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003220:	bf00      	nop
    }
  }
}
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003236:	b2db      	uxtb	r3, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d108      	bne.n	800329c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800329a:	e007      	b.n	80032ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3b10      	subs	r3, #16
 80032c8:	4a14      	ldr	r2, [pc, #80]	@ (800331c <DMA_CalcBaseAndBitshift+0x64>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d2:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <DMA_CalcBaseAndBitshift+0x68>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d909      	bls.n	80032fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80032f8:	e007      	b.n	800330a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	aaaaaaab 	.word	0xaaaaaaab
 8003320:	0800f034 	.word	0x0800f034

08003324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d856      	bhi.n	80033f2 <DMA_CheckFifoParam+0xce>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <DMA_CheckFifoParam+0x28>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800336f 	.word	0x0800336f
 8003354:	0800335d 	.word	0x0800335d
 8003358:	080033f3 	.word	0x080033f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d046      	beq.n	80033f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e043      	b.n	80033f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003376:	d140      	bne.n	80033fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337c:	e03d      	b.n	80033fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003386:	d121      	bne.n	80033cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d837      	bhi.n	80033fe <DMA_CheckFifoParam+0xda>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <DMA_CheckFifoParam+0x70>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033ab 	.word	0x080033ab
 800339c:	080033a5 	.word	0x080033a5
 80033a0:	080033bd 	.word	0x080033bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e030      	b.n	800340c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ba:	e022      	b.n	8003402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ca:	e01c      	b.n	8003406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d903      	bls.n	80033da <DMA_CheckFifoParam+0xb6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033d8:	e018      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      break;
 80033de:	e015      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      break;
 80033f0:	e00b      	b.n	800340a <DMA_CheckFifoParam+0xe6>
      break;
 80033f2:	bf00      	nop
 80033f4:	e00a      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e008      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e006      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e004      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;   
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
    }
  } 
  
  return status; 
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	@ 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e159      	b.n	80036ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8148 	bne.w	80036e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	2b02      	cmp	r3, #2
 800346c:	d130      	bne.n	80034d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 0201 	and.w	r2, r3, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d017      	beq.n	800350c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d123      	bne.n	8003560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	08da      	lsrs	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3208      	adds	r2, #8
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a2 	beq.w	80036e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b57      	ldr	r3, [pc, #348]	@ (8003704 <HAL_GPIO_Init+0x2e8>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	4a56      	ldr	r2, [pc, #344]	@ (8003704 <HAL_GPIO_Init+0x2e8>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b2:	4b54      	ldr	r3, [pc, #336]	@ (8003704 <HAL_GPIO_Init+0x2e8>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035be:	4a52      	ldr	r2, [pc, #328]	@ (8003708 <HAL_GPIO_Init+0x2ec>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a49      	ldr	r2, [pc, #292]	@ (800370c <HAL_GPIO_Init+0x2f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x202>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a48      	ldr	r2, [pc, #288]	@ (8003710 <HAL_GPIO_Init+0x2f4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x1fe>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a47      	ldr	r2, [pc, #284]	@ (8003714 <HAL_GPIO_Init+0x2f8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x1fa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a46      	ldr	r2, [pc, #280]	@ (8003718 <HAL_GPIO_Init+0x2fc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x1f6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a45      	ldr	r2, [pc, #276]	@ (800371c <HAL_GPIO_Init+0x300>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x1f2>
 800360a:	2304      	movs	r3, #4
 800360c:	e008      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800360e:	2307      	movs	r3, #7
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x204>
 8003612:	2303      	movs	r3, #3
 8003614:	e004      	b.n	8003620 <HAL_GPIO_Init+0x204>
 8003616:	2302      	movs	r3, #2
 8003618:	e002      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800361e:	2300      	movs	r3, #0
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f002 0203 	and.w	r2, r2, #3
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	4093      	lsls	r3, r2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003630:	4935      	ldr	r1, [pc, #212]	@ (8003708 <HAL_GPIO_Init+0x2ec>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363e:	4b38      	ldr	r3, [pc, #224]	@ (8003720 <HAL_GPIO_Init+0x304>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003662:	4a2f      	ldr	r2, [pc, #188]	@ (8003720 <HAL_GPIO_Init+0x304>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003668:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HAL_GPIO_Init+0x304>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800368c:	4a24      	ldr	r2, [pc, #144]	@ (8003720 <HAL_GPIO_Init+0x304>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003692:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <HAL_GPIO_Init+0x304>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003720 <HAL_GPIO_Init+0x304>)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036bc:	4b18      	ldr	r3, [pc, #96]	@ (8003720 <HAL_GPIO_Init+0x304>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003720 <HAL_GPIO_Init+0x304>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	f67f aea2 	bls.w	8003438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3724      	adds	r7, #36	@ 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40013800 	.word	0x40013800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	40020800 	.word	0x40020800
 8003718:	40020c00 	.word	0x40020c00
 800371c:	40021000 	.word	0x40021000
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	041a      	lsls	r2, r3, #16
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43d9      	mvns	r1, r3
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	400b      	ands	r3, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12b      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe fb10 	bl	8001dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	@ 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f005 f8f6 	bl	80089e0 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a81      	ldr	r2, [pc, #516]	@ (8003a00 <HAL_I2C_Init+0x274>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a80      	ldr	r2, [pc, #512]	@ (8003a04 <HAL_I2C_Init+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a7d      	ldr	r2, [pc, #500]	@ (8003a08 <HAL_I2C_Init+0x27c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a78      	ldr	r2, [pc, #480]	@ (8003a0c <HAL_I2C_Init+0x280>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a6a      	ldr	r2, [pc, #424]	@ (8003a00 <HAL_I2C_Init+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a69      	ldr	r2, [pc, #420]	@ (8003a10 <HAL_I2C_Init+0x284>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	495c      	ldr	r1, [pc, #368]	@ (8003a00 <HAL_I2C_Init+0x274>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d819      	bhi.n	80038c8 <HAL_I2C_Init+0x13c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038a8:	400b      	ands	r3, r1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_I2C_Init+0x138>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e59      	subs	r1, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	e051      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e04f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <HAL_I2C_Init+0x168>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e012      	b.n	800391a <HAL_I2C_Init+0x18e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x196>
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_I2C_Init+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e58      	subs	r0, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	fbb0 f3f3 	udiv	r3, r0, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003946:	e00f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003996:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3

08003a14 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d103      	bne.n	8003a32 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  }
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	817b      	strh	r3, [r7, #10]
 8003a50:	4613      	mov	r3, r2
 8003a52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7fe fc54 	bl	8002300 <HAL_GetTick>
 8003a58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	f040 80e0 	bne.w	8003c28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2319      	movs	r3, #25
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4970      	ldr	r1, [pc, #448]	@ (8003c34 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f002 feae 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0d3      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2C_Master_Transmit+0x50>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0cc      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d007      	beq.n	8003ab6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	@ 0x21
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	893a      	ldrh	r2, [r7, #8]
 8003ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a50      	ldr	r2, [pc, #320]	@ (8003c38 <HAL_I2C_Master_Transmit+0x1f8>)
 8003af6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003af8:	8979      	ldrh	r1, [r7, #10]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f002 faa4 	bl	800604c <I2C_MasterRequestWrite>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e08d      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b24:	e066      	b.n	8003bf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	6a39      	ldr	r1, [r7, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f002 ff6c 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d107      	bne.n	8003b4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06b      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_I2C_Master_Transmit+0x188>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	6a39      	ldr	r1, [r7, #32]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f002 ff63 	bl	8006a98 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d107      	bne.n	8003bf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e01a      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d194      	bne.n	8003b26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	00100002 	.word	0x00100002
 8003c38:	ffff0000 	.word	0xffff0000

08003c3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	813b      	strh	r3, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7fe fb53 	bl	8002300 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	f040 80d9 	bne.w	8003e1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2319      	movs	r3, #25
 8003c70:	2201      	movs	r2, #1
 8003c72:	496d      	ldr	r1, [pc, #436]	@ (8003e28 <HAL_I2C_Mem_Write+0x1ec>)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f002 fdad 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0cc      	b.n	8003e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Mem_Write+0x56>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0c5      	b.n	8003e1e <HAL_I2C_Mem_Write+0x1e2>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d007      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2221      	movs	r2, #33	@ 0x21
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	@ 0x40
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e2c <HAL_I2C_Mem_Write+0x1f0>)
 8003cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cfa:	88f8      	ldrh	r0, [r7, #6]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	8979      	ldrh	r1, [r7, #10]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4603      	mov	r3, r0
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f002 fa20 	bl	8006150 <I2C_RequestMemoryWrite>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d052      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e081      	b.n	8003e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f002 fe72 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d107      	bne.n	8003d42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06b      	b.n	8003e1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d11b      	bne.n	8003dbc <HAL_I2C_Mem_Write+0x180>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1aa      	bne.n	8003d1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f002 fe65 	bl	8006a98 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d107      	bne.n	8003dec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e016      	b.n	8003e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	00100002 	.word	0x00100002
 8003e2c:	ffff0000 	.word	0xffff0000

08003e30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	@ 0x30
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	817b      	strh	r3, [r7, #10]
 8003e42:	460b      	mov	r3, r1
 8003e44:	813b      	strh	r3, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e4a:	f7fe fa59 	bl	8002300 <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	f040 8214 	bne.w	8004286 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2319      	movs	r3, #25
 8003e64:	2201      	movs	r2, #1
 8003e66:	497b      	ldr	r1, [pc, #492]	@ (8004054 <HAL_I2C_Mem_Read+0x224>)
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f002 fcb3 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
 8003e76:	e207      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x56>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e200      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d007      	beq.n	8003eac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2222      	movs	r2, #34	@ 0x22
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a5b      	ldr	r2, [pc, #364]	@ (8004058 <HAL_I2C_Mem_Read+0x228>)
 8003eec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eee:	88f8      	ldrh	r0, [r7, #6]
 8003ef0:	893a      	ldrh	r2, [r7, #8]
 8003ef2:	8979      	ldrh	r1, [r7, #10]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	4603      	mov	r3, r0
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f002 f9bc 	bl	800627c <I2C_RequestMemoryRead>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e1bc      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e190      	b.n	8004260 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d11b      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e170      	b.n	8004260 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d11b      	bne.n	8003fbe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	e150      	b.n	8004260 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fd4:	e144      	b.n	8004260 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	f200 80f1 	bhi.w	80041c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d123      	bne.n	8004030 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f002 fdcd 	bl	8006b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e145      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800402e:	e117      	b.n	8004260 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	2b02      	cmp	r3, #2
 8004036:	d14e      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403e:	2200      	movs	r2, #0
 8004040:	4906      	ldr	r1, [pc, #24]	@ (800405c <HAL_I2C_Mem_Read+0x22c>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f002 fbc6 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e11a      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
 8004052:	bf00      	nop
 8004054:	00100002 	.word	0x00100002
 8004058:	ffff0000 	.word	0xffff0000
 800405c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040d4:	e0c4      	b.n	8004260 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040dc:	2200      	movs	r2, #0
 80040de:	496c      	ldr	r1, [pc, #432]	@ (8004290 <HAL_I2C_Mem_Read+0x460>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f002 fb77 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0cb      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	2200      	movs	r2, #0
 800413a:	4955      	ldr	r1, [pc, #340]	@ (8004290 <HAL_I2C_Mem_Read+0x460>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f002 fb49 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e09d      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041c0:	e04e      	b.n	8004260 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f002 fce0 	bl	8006b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e058      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d124      	bne.n	8004260 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	2b03      	cmp	r3, #3
 800421c:	d107      	bne.n	800422e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	f47f aeb6 	bne.w	8003fd6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e000      	b.n	8004288 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	@ 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	00010004 	.word	0x00010004

08004294 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	@ 0x28
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042b2:	f7fe f825 	bl	8002300 <HAL_GetTick>
 80042b6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	f040 8136 	bne.w	8004532 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80042c6:	4b9d      	ldr	r3, [pc, #628]	@ (800453c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	08db      	lsrs	r3, r3, #3
 80042cc:	4a9c      	ldr	r2, [pc, #624]	@ (8004540 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0a1a      	lsrs	r2, r3, #8
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009a      	lsls	r2, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d112      	bne.n	8004312 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	e110      	b.n	8004534 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b02      	cmp	r3, #2
 800431e:	d0df      	beq.n	80042e0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_I2C_Mem_Write_DMA+0x9a>
 800432a:	2302      	movs	r3, #2
 800432c:	e102      	b.n	8004534 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d007      	beq.n	8004354 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2221      	movs	r2, #33	@ 0x21
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2240      	movs	r2, #64	@ 0x40
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a6c      	ldr	r2, [pc, #432]	@ (8004544 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004394:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004396:	897a      	ldrh	r2, [r7, #10]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800439c:	893a      	ldrh	r2, [r7, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80a9 	beq.w	800450a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02a      	beq.n	8004416 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c4:	4a60      	ldr	r2, [pc, #384]	@ (8004548 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80043c6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043cc:	4a5f      	ldr	r2, [pc, #380]	@ (800454c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80043ce:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e4:	2200      	movs	r2, #0
 80043e6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ec:	2200      	movs	r2, #0
 80043ee:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	4619      	mov	r1, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3310      	adds	r3, #16
 8004400:	461a      	mov	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004406:	f7fe fd0b 	bl	8002e20 <HAL_DMA_Start_IT>
 800440a:	4603      	mov	r3, r0
 800440c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800440e:	7efb      	ldrb	r3, [r7, #27]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d166      	bne.n	80044e2 <HAL_I2C_Mem_Write_DMA+0x24e>
 8004414:	e013      	b.n	800443e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07a      	b.n	8004534 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800443e:	88f8      	ldrh	r0, [r7, #6]
 8004440:	893a      	ldrh	r2, [r7, #8]
 8004442:	8979      	ldrh	r1, [r7, #10]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	2323      	movs	r3, #35	@ 0x23
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4603      	mov	r3, r0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f001 fe7e 	bl	8006150 <I2C_RequestMemoryWrite>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d022      	beq.n	80044a0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fd36 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8004464:	4603      	mov	r3, r0
 8004466:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446c:	2200      	movs	r2, #0
 800446e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e049      	b.n	8004534 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044cc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044dc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e028      	b.n	8004534 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f043 0210 	orr.w	r2, r3, #16
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e014      	b.n	8004534 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	2000000c 	.word	0x2000000c
 8004540:	14f8b589 	.word	0x14f8b589
 8004544:	ffff0000 	.word	0xffff0000
 8004548:	0800644d 	.word	0x0800644d
 800454c:	0800660b 	.word	0x0800660b

08004550 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	@ 0x30
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	4608      	mov	r0, r1
 800455a:	4611      	mov	r1, r2
 800455c:	461a      	mov	r2, r3
 800455e:	4603      	mov	r3, r0
 8004560:	817b      	strh	r3, [r7, #10]
 8004562:	460b      	mov	r3, r1
 8004564:	813b      	strh	r3, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800456a:	f7fd fec9 	bl	8002300 <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	f040 8172 	bne.w	8004866 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004582:	4b93      	ldr	r3, [pc, #588]	@ (80047d0 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	08db      	lsrs	r3, r3, #3
 8004588:	4a92      	ldr	r2, [pc, #584]	@ (80047d4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0a1a      	lsrs	r2, r3, #8
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3b01      	subs	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d112      	bne.n	80045ce <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
 80045cc:	e14c      	b.n	8004868 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d0df      	beq.n	800459c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Mem_Read_DMA+0x9a>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e13e      	b.n	8004868 <HAL_I2C_Mem_Read_DMA+0x318>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d007      	beq.n	8004610 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800461e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2222      	movs	r2, #34	@ 0x22
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2240      	movs	r2, #64	@ 0x40
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a62      	ldr	r2, [pc, #392]	@ (80047d8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004650:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004652:	897a      	ldrh	r2, [r7, #10]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004658:	893a      	ldrh	r2, [r7, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80cc 	beq.w	800480c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02d      	beq.n	80046d8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	4a56      	ldr	r2, [pc, #344]	@ (80047dc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004682:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	4a55      	ldr	r2, [pc, #340]	@ (80047e0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800468a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	2200      	movs	r2, #0
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	2200      	movs	r2, #0
 800469a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	2200      	movs	r2, #0
 80046a2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	2200      	movs	r2, #0
 80046aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3310      	adds	r3, #16
 80046b6:	4619      	mov	r1, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	461a      	mov	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c2:	f7fe fbad 	bl	8002e20 <HAL_DMA_Start_IT>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80046cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8087 	bne.w	80047e4 <HAL_I2C_Mem_Read_DMA+0x294>
 80046d6:	e013      	b.n	8004700 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0b3      	b.n	8004868 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004700:	88f8      	ldrh	r0, [r7, #6]
 8004702:	893a      	ldrh	r2, [r7, #8]
 8004704:	8979      	ldrh	r1, [r7, #10]
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	2323      	movs	r3, #35	@ 0x23
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4603      	mov	r3, r0
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f001 fdb3 	bl	800627c <I2C_RequestMemoryRead>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d023      	beq.n	8004764 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fbd5 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	2200      	movs	r2, #0
 8004732:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004742:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e081      	b.n	8004868 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	2b01      	cmp	r3, #1
 800476a:	d108      	bne.n	800477e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e007      	b.n	800478e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800478c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ba:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	e049      	b.n	8004862 <HAL_I2C_Mem_Read_DMA+0x312>
 80047ce:	bf00      	nop
 80047d0:	2000000c 	.word	0x2000000c
 80047d4:	14f8b589 	.word	0x14f8b589
 80047d8:	ffff0000 	.word	0xffff0000
 80047dc:	0800644d 	.word	0x0800644d
 80047e0:	0800660b 	.word	0x0800660b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	f043 0210 	orr.w	r2, r3, #16
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e02d      	b.n	8004868 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800480c:	88f8      	ldrh	r0, [r7, #6]
 800480e:	893a      	ldrh	r2, [r7, #8]
 8004810:	8979      	ldrh	r1, [r7, #10]
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	2323      	movs	r3, #35	@ 0x23
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	4603      	mov	r3, r0
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f001 fd2d 	bl	800627c <I2C_RequestMemoryRead>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e01d      	b.n	8004868 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004850:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	@ 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004890:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004898:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b10      	cmp	r3, #16
 800489e:	d003      	beq.n	80048a8 <HAL_I2C_EV_IRQHandler+0x38>
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	f040 80c1 	bne.w	8004a2a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10d      	bne.n	80048de <HAL_I2C_EV_IRQHandler+0x6e>
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80048c8:	d003      	beq.n	80048d2 <HAL_I2C_EV_IRQHandler+0x62>
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80048d0:	d101      	bne.n	80048d6 <HAL_I2C_EV_IRQHandler+0x66>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_I2C_EV_IRQHandler+0x68>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b01      	cmp	r3, #1
 80048da:	f000 8132 	beq.w	8004b42 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00c      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x92>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	0a5b      	lsrs	r3, r3, #9
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d006      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f002 f9d5 	bl	8006ca4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fd87 	bl	800540e <I2C_Master_SB>
 8004900:	e092      	b.n	8004a28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	08db      	lsrs	r3, r3, #3
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0xb2>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	0a5b      	lsrs	r3, r3, #9
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fdfd 	bl	800551a <I2C_Master_ADD10>
 8004920:	e082      	b.n	8004a28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0xd2>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fe17 	bl	800556e <I2C_Master_ADDR>
 8004940:	e072      	b.n	8004a28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d03b      	beq.n	80049c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800495c:	f000 80f3 	beq.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	09db      	lsrs	r3, r3, #7
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <HAL_I2C_EV_IRQHandler+0x11c>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	0a9b      	lsrs	r3, r3, #10
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <HAL_I2C_EV_IRQHandler+0x11c>
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f9df 	bl	8004d48 <I2C_MasterTransmit_TXE>
 800498a:	e04d      	b.n	8004a28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	089b      	lsrs	r3, r3, #2
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80d6 	beq.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0a5b      	lsrs	r3, r3, #9
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80cf 	beq.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049a8:	7bbb      	ldrb	r3, [r7, #14]
 80049aa:	2b21      	cmp	r3, #33	@ 0x21
 80049ac:	d103      	bne.n	80049b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa66 	bl	8004e80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b4:	e0c7      	b.n	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b40      	cmp	r3, #64	@ 0x40
 80049ba:	f040 80c4 	bne.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fad4 	bl	8004f6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049c4:	e0bf      	b.n	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d4:	f000 80b7 	beq.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00f      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x194>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	0a9b      	lsrs	r3, r3, #10
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x194>
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb4d 	bl	800509c <I2C_MasterReceive_RXNE>
 8004a02:	e011      	b.n	8004a28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	089b      	lsrs	r3, r3, #2
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 809a 	beq.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	0a5b      	lsrs	r3, r3, #9
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8093 	beq.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fc03 	bl	800522c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a26:	e08e      	b.n	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a28:	e08d      	b.n	8004b46 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e007      	b.n	8004a4c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d012      	beq.n	8004a7e <HAL_I2C_EV_IRQHandler+0x20e>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	0a5b      	lsrs	r3, r3, #9
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00c      	beq.n	8004a7e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 ffc8 	bl	8005a0c <I2C_Slave_ADDR>
 8004a7c:	e066      	b.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HAL_I2C_EV_IRQHandler+0x22e>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	0a5b      	lsrs	r3, r3, #9
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 f802 	bl	8005aa0 <I2C_Slave_STOPF>
 8004a9c:	e056      	b.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a9e:	7bbb      	ldrb	r3, [r7, #14]
 8004aa0:	2b21      	cmp	r3, #33	@ 0x21
 8004aa2:	d002      	beq.n	8004aaa <HAL_I2C_EV_IRQHandler+0x23a>
 8004aa4:	7bbb      	ldrb	r3, [r7, #14]
 8004aa6:	2b29      	cmp	r3, #41	@ 0x29
 8004aa8:	d125      	bne.n	8004af6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	09db      	lsrs	r3, r3, #7
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00f      	beq.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x266>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	0a9b      	lsrs	r3, r3, #10
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x266>
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fede 	bl	8005890 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ad4:	e039      	b.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d033      	beq.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2da>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	0a5b      	lsrs	r3, r3, #9
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02d      	beq.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 ff0b 	bl	800590a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004af4:	e029      	b.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00f      	beq.n	8004b22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	0a9b      	lsrs	r3, r3, #10
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	089b      	lsrs	r3, r3, #2
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 ff16 	bl	800594c <I2C_SlaveReceive_RXNE>
 8004b20:	e014      	b.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	089b      	lsrs	r3, r3, #2
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	0a5b      	lsrs	r3, r3, #9
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 ff44 	bl	80059c8 <I2C_SlaveReceive_BTF>
 8004b40:	e004      	b.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004b42:	bf00      	nop
 8004b44:	e002      	b.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b08a      	sub	sp, #40	@ 0x28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00e      	beq.n	8004ba0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	0a5b      	lsrs	r3, r3, #9
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00e      	beq.n	8004bca <HAL_I2C_ER_IRQHandler+0x78>
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004bc8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	0a9b      	lsrs	r3, r3, #10
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03f      	beq.n	8004c56 <HAL_I2C_ER_IRQHandler+0x104>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d039      	beq.n	8004c56 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004be2:	7efb      	ldrb	r3, [r7, #27]
 8004be4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004bfc:	7ebb      	ldrb	r3, [r7, #26]
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d112      	bne.n	8004c28 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10f      	bne.n	8004c28 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	2b21      	cmp	r3, #33	@ 0x21
 8004c0c:	d008      	beq.n	8004c20 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	2b29      	cmp	r3, #41	@ 0x29
 8004c12:	d005      	beq.n	8004c20 <HAL_I2C_ER_IRQHandler+0xce>
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	2b28      	cmp	r3, #40	@ 0x28
 8004c18:	d106      	bne.n	8004c28 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b21      	cmp	r3, #33	@ 0x21
 8004c1e:	d103      	bne.n	8004c28 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f001 f86d 	bl	8005d00 <I2C_Slave_AF>
 8004c26:	e016      	b.n	8004c56 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	f043 0304 	orr.w	r3, r3, #4
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c3a:	7efb      	ldrb	r3, [r7, #27]
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d002      	beq.n	8004c46 <HAL_I2C_ER_IRQHandler+0xf4>
 8004c40:	7efb      	ldrb	r3, [r7, #27]
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	d107      	bne.n	8004c56 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	0adb      	lsrs	r3, r3, #11
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00e      	beq.n	8004c80 <HAL_I2C_ER_IRQHandler+0x12e>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	f043 0308 	orr.w	r3, r3, #8
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004c7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f001 f8a8 	bl	8005de8 <I2C_ITError>
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3728      	adds	r7, #40	@ 0x28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d150      	bne.n	8004e10 <I2C_MasterTransmit_TXE+0xc8>
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	2b21      	cmp	r3, #33	@ 0x21
 8004d72:	d14d      	bne.n	8004e10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d01d      	beq.n	8004db6 <I2C_MasterTransmit_TXE+0x6e>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d01a      	beq.n	8004db6 <I2C_MasterTransmit_TXE+0x6e>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d86:	d016      	beq.n	8004db6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2211      	movs	r2, #17
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff ff76 	bl	8004ca0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004db4:	e060      	b.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dc4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d107      	bne.n	8004e00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fb fe9f 	bl	8000b3c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dfe:	e03b      	b.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff ff49 	bl	8004ca0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e0e:	e033      	b.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b21      	cmp	r3, #33	@ 0x21
 8004e14:	d005      	beq.n	8004e22 <I2C_MasterTransmit_TXE+0xda>
 8004e16:	7bbb      	ldrb	r3, [r7, #14]
 8004e18:	2b40      	cmp	r3, #64	@ 0x40
 8004e1a:	d12d      	bne.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b22      	cmp	r3, #34	@ 0x22
 8004e20:	d12a      	bne.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d108      	bne.n	8004e3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e3c:	e01c      	b.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b40      	cmp	r3, #64	@ 0x40
 8004e48:	d103      	bne.n	8004e52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f88e 	bl	8004f6c <I2C_MemoryTransmit_TXE_BTF>
}
 8004e50:	e012      	b.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	781a      	ldrb	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e76:	e7ff      	b.n	8004e78 <I2C_MasterTransmit_TXE+0x130>
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b21      	cmp	r3, #33	@ 0x21
 8004e98:	d164      	bne.n	8004f64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d012      	beq.n	8004eca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ec8:	e04c      	b.n	8004f64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d01d      	beq.n	8004f0c <I2C_MasterTransmit_BTF+0x8c>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d01a      	beq.n	8004f0c <I2C_MasterTransmit_BTF+0x8c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004edc:	d016      	beq.n	8004f0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004eec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2211      	movs	r2, #17
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff fecb 	bl	8004ca0 <HAL_I2C_MasterTxCpltCallback>
}
 8004f0a:	e02b      	b.n	8004f64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b40      	cmp	r3, #64	@ 0x40
 8004f44:	d107      	bne.n	8004f56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fb fdf4 	bl	8000b3c <HAL_I2C_MemTxCpltCallback>
}
 8004f54:	e006      	b.n	8004f64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fe9e 	bl	8004ca0 <HAL_I2C_MasterTxCpltCallback>
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d11d      	bne.n	8004fc0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d10b      	bne.n	8004fa4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004fa2:	e077      	b.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	121b      	asrs	r3, r3, #8
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fbe:	e069      	b.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10b      	bne.n	8004fe0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fde:	e059      	b.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d152      	bne.n	800508e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b22      	cmp	r3, #34	@ 0x22
 8004fec:	d10d      	bne.n	800500a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ffc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005008:	e044      	b.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d015      	beq.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b21      	cmp	r3, #33	@ 0x21
 8005018:	d112      	bne.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800503e:	e029      	b.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d124      	bne.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b21      	cmp	r3, #33	@ 0x21
 800504e:	d121      	bne.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800505e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fd58 	bl	8000b3c <HAL_I2C_MemTxCpltCallback>
}
 800508c:	e002      	b.n	8005094 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fe fcc0 	bl	8003a14 <I2C_Flush_DR>
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b22      	cmp	r3, #34	@ 0x22
 80050ae:	f040 80b9 	bne.w	8005224 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d921      	bls.n	800510a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	f040 8096 	bne.w	8005224 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005106:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005108:	e08c      	b.n	8005224 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510e:	2b02      	cmp	r3, #2
 8005110:	d07f      	beq.n	8005212 <I2C_MasterReceive_RXNE+0x176>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d002      	beq.n	800511e <I2C_MasterReceive_RXNE+0x82>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d179      	bne.n	8005212 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 fd02 	bl	8006b28 <I2C_WaitOnSTOPRequestThroughIT>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d14c      	bne.n	80051c4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005138:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005148:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d10a      	bne.n	800519a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb fce0 	bl	8000b58 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005198:	e044      	b.n	8005224 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d002      	beq.n	80051ae <I2C_MasterReceive_RXNE+0x112>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d103      	bne.n	80051b6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051b4:	e002      	b.n	80051bc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2212      	movs	r2, #18
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fd79 	bl	8004cb4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051c2:	e02f      	b.n	8005224 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fd88 	bl	8004d20 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005210:	e008      	b.n	8005224 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005220:	605a      	str	r2, [r3, #4]
}
 8005222:	e7ff      	b.n	8005224 <I2C_MasterReceive_RXNE+0x188>
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b04      	cmp	r3, #4
 8005242:	d11b      	bne.n	800527c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005252:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800527a:	e0c4      	b.n	8005406 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b03      	cmp	r3, #3
 8005284:	d129      	bne.n	80052da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d00a      	beq.n	80052b2 <I2C_MasterReceive_BTF+0x86>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d007      	beq.n	80052b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80052d8:	e095      	b.n	8005406 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d17d      	bne.n	80053e0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d002      	beq.n	80052f0 <I2C_MasterReceive_BTF+0xc4>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d108      	bne.n	8005302 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e016      	b.n	8005330 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d002      	beq.n	800530e <I2C_MasterReceive_BTF+0xe2>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d108      	bne.n	8005320 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e007      	b.n	8005330 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800538a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b40      	cmp	r3, #64	@ 0x40
 800539e:	d10a      	bne.n	80053b6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fb fbd2 	bl	8000b58 <HAL_I2C_MemRxCpltCallback>
}
 80053b4:	e027      	b.n	8005406 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d002      	beq.n	80053ca <I2C_MasterReceive_BTF+0x19e>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d103      	bne.n	80053d2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80053d0:	e002      	b.n	80053d8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2212      	movs	r2, #18
 80053d6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fc6b 	bl	8004cb4 <HAL_I2C_MasterRxCpltCallback>
}
 80053de:	e012      	b.n	8005406 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b40      	cmp	r3, #64	@ 0x40
 8005420:	d117      	bne.n	8005452 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800543a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800543c:	e067      	b.n	800550e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	b2da      	uxtb	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	611a      	str	r2, [r3, #16]
}
 8005450:	e05d      	b.n	800550e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800545a:	d133      	bne.n	80054c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b21      	cmp	r3, #33	@ 0x21
 8005466:	d109      	bne.n	800547c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005478:	611a      	str	r2, [r3, #16]
 800547a:	e008      	b.n	800548e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <I2C_Master_SB+0x92>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d108      	bne.n	80054b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d032      	beq.n	800550e <I2C_Master_SB+0x100>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d02d      	beq.n	800550e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c0:	605a      	str	r2, [r3, #4]
}
 80054c2:	e024      	b.n	800550e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10e      	bne.n	80054ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	11db      	asrs	r3, r3, #7
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0306 	and.w	r3, r3, #6
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f063 030f 	orn	r3, r3, #15
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]
}
 80054e8:	e011      	b.n	800550e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d10d      	bne.n	800550e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	11db      	asrs	r3, r3, #7
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f003 0306 	and.w	r3, r3, #6
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f063 030e 	orn	r3, r3, #14
 8005506:	b2da      	uxtb	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	b2da      	uxtb	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <I2C_Master_ADD10+0x26>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d108      	bne.n	8005552 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00c      	beq.n	8005562 <I2C_Master_ADD10+0x48>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005560:	605a      	str	r2, [r3, #4]
  }
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800556e:	b480      	push	{r7}
 8005570:	b091      	sub	sp, #68	@ 0x44
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800557c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b22      	cmp	r3, #34	@ 0x22
 8005596:	f040 8169 	bne.w	800586c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10f      	bne.n	80055c2 <I2C_Master_ADDR+0x54>
 80055a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055a6:	2b40      	cmp	r3, #64	@ 0x40
 80055a8:	d10b      	bne.n	80055c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055aa:	2300      	movs	r3, #0
 80055ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	e160      	b.n	8005884 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d11d      	bne.n	8005606 <I2C_Master_ADDR+0x98>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80055d2:	d118      	bne.n	8005606 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d4:	2300      	movs	r3, #0
 80055d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	651a      	str	r2, [r3, #80]	@ 0x50
 8005604:	e13e      	b.n	8005884 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d113      	bne.n	8005638 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005610:	2300      	movs	r3, #0
 8005612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005624:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e115      	b.n	8005864 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	f040 808a 	bne.w	8005758 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005646:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800564a:	d137      	bne.n	80056bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800566a:	d113      	bne.n	8005694 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800567a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	e0e7      	b.n	8005864 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005694:	2300      	movs	r3, #0
 8005696:	623b      	str	r3, [r7, #32]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	623b      	str	r3, [r7, #32]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	623b      	str	r3, [r7, #32]
 80056a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e0d3      	b.n	8005864 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d02e      	beq.n	8005720 <I2C_Master_ADDR+0x1b2>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d02b      	beq.n	8005720 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	2b12      	cmp	r3, #18
 80056cc:	d102      	bne.n	80056d4 <I2C_Master_ADDR+0x166>
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d125      	bne.n	8005720 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00e      	beq.n	80056f8 <I2C_Master_ADDR+0x18a>
 80056da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d00b      	beq.n	80056f8 <I2C_Master_ADDR+0x18a>
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d008      	beq.n	80056f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e007      	b.n	8005708 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005706:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	e0a1      	b.n	8005864 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800572e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e085      	b.n	8005864 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d14d      	bne.n	80057fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005764:	2b04      	cmp	r3, #4
 8005766:	d016      	beq.n	8005796 <I2C_Master_ADDR+0x228>
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	2b02      	cmp	r3, #2
 800576c:	d013      	beq.n	8005796 <I2C_Master_ADDR+0x228>
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	2b10      	cmp	r3, #16
 8005772:	d010      	beq.n	8005796 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005782:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e007      	b.n	80057a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b4:	d117      	bne.n	80057e6 <I2C_Master_ADDR+0x278>
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057bc:	d00b      	beq.n	80057d6 <I2C_Master_ADDR+0x268>
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d008      	beq.n	80057d6 <I2C_Master_ADDR+0x268>
 80057c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d005      	beq.n	80057d6 <I2C_Master_ADDR+0x268>
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d002      	beq.n	80057d6 <I2C_Master_ADDR+0x268>
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d107      	bne.n	80057e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	e032      	b.n	8005864 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800580c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800581c:	d117      	bne.n	800584e <I2C_Master_ADDR+0x2e0>
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005824:	d00b      	beq.n	800583e <I2C_Master_ADDR+0x2d0>
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	2b01      	cmp	r3, #1
 800582a:	d008      	beq.n	800583e <I2C_Master_ADDR+0x2d0>
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	2b08      	cmp	r3, #8
 8005830:	d005      	beq.n	800583e <I2C_Master_ADDR+0x2d0>
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	2b10      	cmp	r3, #16
 8005836:	d002      	beq.n	800583e <I2C_Master_ADDR+0x2d0>
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	2b20      	cmp	r3, #32
 800583c:	d107      	bne.n	800584e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800584c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800586a:	e00b      	b.n	8005884 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
}
 8005882:	e7ff      	b.n	8005884 <I2C_Master_ADDR+0x316>
 8005884:	bf00      	nop
 8005886:	3744      	adds	r7, #68	@ 0x44
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02b      	beq.n	8005902 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d114      	bne.n	8005902 <I2C_SlaveTransmit_TXE+0x72>
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b29      	cmp	r3, #41	@ 0x29
 80058dc:	d111      	bne.n	8005902 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2221      	movs	r2, #33	@ 0x21
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2228      	movs	r2, #40	@ 0x28
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff f9e3 	bl	8004cc8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d011      	beq.n	8005940 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02c      	beq.n	80059c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d114      	bne.n	80059c0 <I2C_SlaveReceive_RXNE+0x74>
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b2a      	cmp	r3, #42	@ 0x2a
 800599a:	d111      	bne.n	80059c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2222      	movs	r2, #34	@ 0x22
 80059b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2228      	movs	r2, #40	@ 0x28
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff f98e 	bl	8004cdc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d012      	beq.n	8005a00 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a26:	2b28      	cmp	r3, #40	@ 0x28
 8005a28:	d127      	bne.n	8005a7a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a38:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	089b      	lsrs	r3, r3, #2
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	09db      	lsrs	r3, r3, #7
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	81bb      	strh	r3, [r7, #12]
 8005a5c:	e002      	b.n	8005a64 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a6c:	89ba      	ldrh	r2, [r7, #12]
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff f93c 	bl	8004cf0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a78:	e00e      	b.n	8005a98 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005abe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005afc:	d172      	bne.n	8005be4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b22      	cmp	r3, #34	@ 0x22
 8005b02:	d002      	beq.n	8005b0a <I2C_Slave_STOPF+0x6a>
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b08:	d135      	bne.n	8005b76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	f043 0204 	orr.w	r2, r3, #4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fd fb70 	bl	8003228 <HAL_DMA_GetState>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d049      	beq.n	8005be2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	4a69      	ldr	r2, [pc, #420]	@ (8005cf8 <I2C_Slave_STOPF+0x258>)
 8005b54:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd f9b8 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d03d      	beq.n	8005be2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b74:	e035      	b.n	8005be2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	f043 0204 	orr.w	r2, r3, #4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ba8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fd fb3a 	bl	8003228 <HAL_DMA_GetState>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d014      	beq.n	8005be4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8005cf8 <I2C_Slave_STOPF+0x258>)
 8005bc0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fd f982 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
 8005be0:	e000      	b.n	8005be4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005be2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d03e      	beq.n	8005c6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d112      	bne.n	8005c22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	d112      	bne.n	8005c56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	f043 0204 	orr.w	r2, r3, #4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f8b7 	bl	8005de8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005c7a:	e039      	b.n	8005cf0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c80:	d109      	bne.n	8005c96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2228      	movs	r2, #40	@ 0x28
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff f823 	bl	8004cdc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b28      	cmp	r3, #40	@ 0x28
 8005ca0:	d111      	bne.n	8005cc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <I2C_Slave_STOPF+0x25c>)
 8005ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff f824 	bl	8004d0c <HAL_I2C_ListenCpltCallback>
}
 8005cc4:	e014      	b.n	8005cf0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	2b22      	cmp	r3, #34	@ 0x22
 8005ccc:	d002      	beq.n	8005cd4 <I2C_Slave_STOPF+0x234>
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b22      	cmp	r3, #34	@ 0x22
 8005cd2:	d10d      	bne.n	8005cf0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fe fff6 	bl	8004cdc <HAL_I2C_SlaveRxCpltCallback>
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	08006685 	.word	0x08006685
 8005cfc:	ffff0000 	.word	0xffff0000

08005d00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d002      	beq.n	8005d22 <I2C_Slave_AF+0x22>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d129      	bne.n	8005d76 <I2C_Slave_AF+0x76>
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b28      	cmp	r3, #40	@ 0x28
 8005d26:	d126      	bne.n	8005d76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005de4 <I2C_Slave_AF+0xe4>)
 8005d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fe ffcc 	bl	8004d0c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005d74:	e031      	b.n	8005dda <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b21      	cmp	r3, #33	@ 0x21
 8005d7a:	d129      	bne.n	8005dd0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a19      	ldr	r2, [pc, #100]	@ (8005de4 <I2C_Slave_AF+0xe4>)
 8005d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2221      	movs	r2, #33	@ 0x21
 8005d86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005da6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005db0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fd fe26 	bl	8003a14 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fe ff7d 	bl	8004cc8 <HAL_I2C_SlaveTxCpltCallback>
}
 8005dce:	e004      	b.n	8005dda <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dd8:	615a      	str	r2, [r3, #20]
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	ffff0000 	.word	0xffff0000

08005de8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d002      	beq.n	8005e0c <I2C_ITError+0x24>
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b40      	cmp	r3, #64	@ 0x40
 8005e0a:	d10a      	bne.n	8005e22 <I2C_ITError+0x3a>
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b22      	cmp	r3, #34	@ 0x22
 8005e10:	d107      	bne.n	8005e22 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e28:	2b28      	cmp	r3, #40	@ 0x28
 8005e2a:	d107      	bne.n	8005e3c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2228      	movs	r2, #40	@ 0x28
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e3a:	e015      	b.n	8005e68 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e4a:	d00a      	beq.n	8005e62 <I2C_ITError+0x7a>
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	2b60      	cmp	r3, #96	@ 0x60
 8005e50:	d007      	beq.n	8005e62 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e76:	d162      	bne.n	8005f3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d020      	beq.n	8005ed8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e9a:	4a6a      	ldr	r2, [pc, #424]	@ (8006044 <I2C_ITError+0x25c>)
 8005e9c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd f814 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8089 	beq.w	8005fc2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4798      	blx	r3
 8005ed6:	e074      	b.n	8005fc2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	4a59      	ldr	r2, [pc, #356]	@ (8006044 <I2C_ITError+0x25c>)
 8005ede:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fc fff3 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d068      	beq.n	8005fc2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d10b      	bne.n	8005f16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0201 	bic.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	e041      	b.n	8005fc2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b60      	cmp	r3, #96	@ 0x60
 8005f48:	d125      	bne.n	8005f96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	d10b      	bne.n	8005f7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fe fed0 	bl	8004d34 <HAL_I2C_AbortCpltCallback>
 8005f94:	e015      	b.n	8005fc2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa0:	2b40      	cmp	r3, #64	@ 0x40
 8005fa2:	d10b      	bne.n	8005fbc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fe feaf 	bl	8004d20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10e      	bne.n	8005ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d104      	bne.n	8005ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006006:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b04      	cmp	r3, #4
 8006012:	d113      	bne.n	800603c <I2C_ITError+0x254>
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b28      	cmp	r3, #40	@ 0x28
 8006018:	d110      	bne.n	800603c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a0a      	ldr	r2, [pc, #40]	@ (8006048 <I2C_ITError+0x260>)
 800601e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fe fe68 	bl	8004d0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	08006685 	.word	0x08006685
 8006048:	ffff0000 	.word	0xffff0000

0800604c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	460b      	mov	r3, r1
 800605a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006060:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d006      	beq.n	8006076 <I2C_MasterRequestWrite+0x2a>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d003      	beq.n	8006076 <I2C_MasterRequestWrite+0x2a>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006074:	d108      	bne.n	8006088 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e00b      	b.n	80060a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608c:	2b12      	cmp	r3, #18
 800608e:	d107      	bne.n	80060a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800609e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fb91 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00d      	beq.n	80060d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c6:	d103      	bne.n	80060d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e035      	b.n	8006140 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060dc:	d108      	bne.n	80060f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060de:	897b      	ldrh	r3, [r7, #10]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060ec:	611a      	str	r2, [r3, #16]
 80060ee:	e01b      	b.n	8006128 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80060f0:	897b      	ldrh	r3, [r7, #10]
 80060f2:	11db      	asrs	r3, r3, #7
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f003 0306 	and.w	r3, r3, #6
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f063 030f 	orn	r3, r3, #15
 8006100:	b2da      	uxtb	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	490e      	ldr	r1, [pc, #56]	@ (8006148 <I2C_MasterRequestWrite+0xfc>)
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fbda 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e010      	b.n	8006140 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800611e:	897b      	ldrh	r3, [r7, #10]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4907      	ldr	r1, [pc, #28]	@ (800614c <I2C_MasterRequestWrite+0x100>)
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fbca 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	00010008 	.word	0x00010008
 800614c:	00010002 	.word	0x00010002

08006150 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	4608      	mov	r0, r1
 800615a:	4611      	mov	r1, r2
 800615c:	461a      	mov	r2, r3
 800615e:	4603      	mov	r3, r0
 8006160:	817b      	strh	r3, [r7, #10]
 8006162:	460b      	mov	r3, r1
 8006164:	813b      	strh	r3, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	2200      	movs	r2, #0
 8006182:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fb24 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a0:	d103      	bne.n	80061aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e05f      	b.n	800626e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ae:	897b      	ldrh	r3, [r7, #10]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	492d      	ldr	r1, [pc, #180]	@ (8006278 <I2C_RequestMemoryWrite+0x128>)
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fb7f 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e04c      	b.n	800626e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ec:	6a39      	ldr	r1, [r7, #32]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fc0a 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d107      	bne.n	8006212 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e02b      	b.n	800626e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d105      	bne.n	8006228 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	611a      	str	r2, [r3, #16]
 8006226:	e021      	b.n	800626c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	b29b      	uxth	r3, r3
 800622e:	b2da      	uxtb	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	6a39      	ldr	r1, [r7, #32]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fbe4 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	2b04      	cmp	r3, #4
 800624c:	d107      	bne.n	800625e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800625c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e005      	b.n	800626e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006262:	893b      	ldrh	r3, [r7, #8]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	00010002 	.word	0x00010002

0800627c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	4608      	mov	r0, r1
 8006286:	4611      	mov	r1, r2
 8006288:	461a      	mov	r2, r3
 800628a:	4603      	mov	r3, r0
 800628c:	817b      	strh	r3, [r7, #10]
 800628e:	460b      	mov	r3, r1
 8006290:	813b      	strh	r3, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2200      	movs	r2, #0
 80062be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fa86 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00d      	beq.n	80062ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062dc:	d103      	bne.n	80062e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e0aa      	b.n	8006440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ea:	897b      	ldrh	r3, [r7, #10]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	6a3a      	ldr	r2, [r7, #32]
 80062fe:	4952      	ldr	r1, [pc, #328]	@ (8006448 <I2C_RequestMemoryRead+0x1cc>)
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fae1 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e097      	b.n	8006440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006328:	6a39      	ldr	r1, [r7, #32]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fb6c 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	2b04      	cmp	r3, #4
 800633c:	d107      	bne.n	800634e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e076      	b.n	8006440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d105      	bne.n	8006364 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	611a      	str	r2, [r3, #16]
 8006362:	e021      	b.n	80063a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006364:	893b      	ldrh	r3, [r7, #8]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	b29b      	uxth	r3, r3
 800636a:	b2da      	uxtb	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006374:	6a39      	ldr	r1, [r7, #32]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fb46 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	2b04      	cmp	r3, #4
 8006388:	d107      	bne.n	800639a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e050      	b.n	8006440 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800639e:	893b      	ldrh	r3, [r7, #8]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063aa:	6a39      	ldr	r1, [r7, #32]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fb2b 	bl	8006a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00d      	beq.n	80063d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d107      	bne.n	80063d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e035      	b.n	8006440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f9ef 	bl	80067d4 <I2C_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800640a:	d103      	bne.n	8006414 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006412:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e013      	b.n	8006440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006418:	897b      	ldrh	r3, [r7, #10]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	b2da      	uxtb	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	4906      	ldr	r1, [pc, #24]	@ (8006448 <I2C_RequestMemoryRead+0x1cc>)
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 fa4a 	bl	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	00010002 	.word	0x00010002

0800644c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006460:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006468:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800647e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648c:	2200      	movs	r2, #0
 800648e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649c:	2200      	movs	r2, #0
 800649e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80064a0:	7cfb      	ldrb	r3, [r7, #19]
 80064a2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80064a6:	2b21      	cmp	r3, #33	@ 0x21
 80064a8:	d007      	beq.n	80064ba <I2C_DMAXferCplt+0x6e>
 80064aa:	7cfb      	ldrb	r3, [r7, #19]
 80064ac:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80064b0:	2b22      	cmp	r3, #34	@ 0x22
 80064b2:	d131      	bne.n	8006518 <I2C_DMAXferCplt+0xcc>
 80064b4:	7cbb      	ldrb	r3, [r7, #18]
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d12e      	bne.n	8006518 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b29      	cmp	r3, #41	@ 0x29
 80064d4:	d10a      	bne.n	80064ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2221      	movs	r2, #33	@ 0x21
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2228      	movs	r2, #40	@ 0x28
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f7fe fbef 	bl	8004cc8 <HAL_I2C_SlaveTxCpltCallback>
 80064ea:	e00c      	b.n	8006506 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f0:	d109      	bne.n	8006506 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2222      	movs	r2, #34	@ 0x22
 80064f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2228      	movs	r2, #40	@ 0x28
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006500:	6978      	ldr	r0, [r7, #20]
 8006502:	f7fe fbeb 	bl	8004cdc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006514:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006516:	e074      	b.n	8006602 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d06e      	beq.n	8006602 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b01      	cmp	r3, #1
 800652c:	d107      	bne.n	800653e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800653c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800654c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006554:	d009      	beq.n	800656a <I2C_DMAXferCplt+0x11e>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d006      	beq.n	800656a <I2C_DMAXferCplt+0x11e>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006562:	d002      	beq.n	800656a <I2C_DMAXferCplt+0x11e>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b20      	cmp	r3, #32
 8006568:	d107      	bne.n	800657a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006578:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006588:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006598:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80065a8:	6978      	ldr	r0, [r7, #20]
 80065aa:	f7fe fbb9 	bl	8004d20 <HAL_I2C_ErrorCallback>
}
 80065ae:	e028      	b.n	8006602 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b40      	cmp	r3, #64	@ 0x40
 80065c2:	d10a      	bne.n	80065da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80065d2:	6978      	ldr	r0, [r7, #20]
 80065d4:	f7fa fac0 	bl	8000b58 <HAL_I2C_MemRxCpltCallback>
}
 80065d8:	e013      	b.n	8006602 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d002      	beq.n	80065ee <I2C_DMAXferCplt+0x1a2>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d103      	bne.n	80065f6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80065f4:	e002      	b.n	80065fc <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2212      	movs	r2, #18
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80065fc:	6978      	ldr	r0, [r7, #20]
 80065fe:	f7fe fb59 	bl	8004cb4 <HAL_I2C_MasterRxCpltCallback>
}
 8006602:	bf00      	nop
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006624:	2200      	movs	r2, #0
 8006626:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	2200      	movs	r2, #0
 8006636:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fc fe03 	bl	8003244 <HAL_DMA_GetError>
 800663e:	4603      	mov	r3, r0
 8006640:	2b02      	cmp	r3, #2
 8006642:	d01b      	beq.n	800667c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006652:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f043 0210 	orr.w	r2, r3, #16
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7fe fb52 	bl	8004d20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800669c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800669e:	4b4b      	ldr	r3, [pc, #300]	@ (80067cc <I2C_DMAAbort+0x148>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	08db      	lsrs	r3, r3, #3
 80066a4:	4a4a      	ldr	r2, [pc, #296]	@ (80067d0 <I2C_DMAAbort+0x14c>)
 80066a6:	fba2 2303 	umull	r2, r3, r2, r3
 80066aa:	0a1a      	lsrs	r2, r3, #8
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	00da      	lsls	r2, r3, #3
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	f043 0220 	orr.w	r2, r3, #32
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80066ca:	e00a      	b.n	80066e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e0:	d0ea      	beq.n	80066b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ee:	2200      	movs	r2, #0
 80066f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	2200      	movs	r2, #0
 8006700:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006710:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006724:	2200      	movs	r2, #0
 8006726:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006734:	2200      	movs	r2, #0
 8006736:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b60      	cmp	r3, #96	@ 0x60
 8006752:	d10e      	bne.n	8006772 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2200      	movs	r2, #0
 8006768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800676a:	6978      	ldr	r0, [r7, #20]
 800676c:	f7fe fae2 	bl	8004d34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006770:	e027      	b.n	80067c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006772:	7cfb      	ldrb	r3, [r7, #19]
 8006774:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006778:	2b28      	cmp	r3, #40	@ 0x28
 800677a:	d117      	bne.n	80067ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800679a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2228      	movs	r2, #40	@ 0x28
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067aa:	e007      	b.n	80067bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80067bc:	6978      	ldr	r0, [r7, #20]
 80067be:	f7fe faaf 	bl	8004d20 <HAL_I2C_ErrorCallback>
}
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000000c 	.word	0x2000000c
 80067d0:	14f8b589 	.word	0x14f8b589

080067d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067e4:	e048      	b.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d044      	beq.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ee:	f7fb fd87 	bl	8002300 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d139      	bne.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b01      	cmp	r3, #1
 800680c:	d10d      	bne.n	800682a <I2C_WaitOnFlagUntilTimeout+0x56>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	43da      	mvns	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	e00c      	b.n	8006844 <I2C_WaitOnFlagUntilTimeout+0x70>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	43da      	mvns	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	429a      	cmp	r2, r3
 8006848:	d116      	bne.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e023      	b.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10d      	bne.n	800689e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	43da      	mvns	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4013      	ands	r3, r2
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	e00c      	b.n	80068b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	43da      	mvns	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4013      	ands	r3, r2
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d093      	beq.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068d6:	e071      	b.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068e6:	d123      	bne.n	8006930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	f043 0204 	orr.w	r2, r3, #4
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e067      	b.n	8006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d041      	beq.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006938:	f7fb fce2 	bl	8002300 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d302      	bcc.n	800694e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d136      	bne.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10c      	bne.n	8006972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	43da      	mvns	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	bf14      	ite	ne
 800696a:	2301      	movne	r3, #1
 800696c:	2300      	moveq	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e00b      	b.n	800698a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	43da      	mvns	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4013      	ands	r3, r2
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e021      	b.n	8006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d10c      	bne.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	43da      	mvns	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4013      	ands	r3, r2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf14      	ite	ne
 80069d8:	2301      	movne	r3, #1
 80069da:	2300      	moveq	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	e00b      	b.n	80069f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	43da      	mvns	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf14      	ite	ne
 80069f2:	2301      	movne	r3, #1
 80069f4:	2300      	moveq	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f47f af6d 	bne.w	80068d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a14:	e034      	b.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f915 	bl	8006c46 <I2C_IsAcknowledgeFailed>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e034      	b.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2c:	d028      	beq.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a2e:	f7fb fc67 	bl	8002300 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d302      	bcc.n	8006a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11d      	bne.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4e:	2b80      	cmp	r3, #128	@ 0x80
 8006a50:	d016      	beq.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	f043 0220 	orr.w	r2, r3, #32
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e007      	b.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8a:	2b80      	cmp	r3, #128	@ 0x80
 8006a8c:	d1c3      	bne.n	8006a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa4:	e034      	b.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f8cd 	bl	8006c46 <I2C_IsAcknowledgeFailed>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e034      	b.n	8006b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d028      	beq.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fb fc1f 	bl	8002300 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11d      	bne.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d016      	beq.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afc:	f043 0220 	orr.w	r2, r3, #32
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e007      	b.n	8006b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d1c3      	bne.n	8006aa6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b34:	4b13      	ldr	r3, [pc, #76]	@ (8006b84 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	08db      	lsrs	r3, r3, #3
 8006b3a:	4a13      	ldr	r2, [pc, #76]	@ (8006b88 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b40:	0a1a      	lsrs	r2, r3, #8
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d107      	bne.n	8006b66 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e008      	b.n	8006b78 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b74:	d0e9      	beq.n	8006b4a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	2000000c 	.word	0x2000000c
 8006b88:	14f8b589 	.word	0x14f8b589

08006b8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b98:	e049      	b.n	8006c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d119      	bne.n	8006bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0210 	mvn.w	r2, #16
 8006bb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e030      	b.n	8006c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bdc:	f7fb fb90 	bl	8002300 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11d      	bne.n	8006c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfc:	2b40      	cmp	r3, #64	@ 0x40
 8006bfe:	d016      	beq.n	8006c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e007      	b.n	8006c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c38:	2b40      	cmp	r3, #64	@ 0x40
 8006c3a:	d1ae      	bne.n	8006b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5c:	d11b      	bne.n	8006c96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006cb4:	d103      	bne.n	8006cbe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cbc:	e007      	b.n	8006cce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006cc6:	d102      	bne.n	8006cce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2208      	movs	r2, #8
 8006ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b086      	sub	sp, #24
 8006cde:	af02      	add	r7, sp, #8
 8006ce0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e101      	b.n	8006ef0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f006 fbe2 	bl	800d4d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2203      	movs	r2, #3
 8006d10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d1a:	d102      	bne.n	8006d22 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f002 ff37 	bl	8009b9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7c1a      	ldrb	r2, [r3, #16]
 8006d34:	f88d 2000 	strb.w	r2, [sp]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d3c:	f002 fe16 	bl	800996c <USB_CoreInit>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e0ce      	b.n	8006ef0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f002 ff2f 	bl	8009bbc <USB_SetCurrentMode>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0bf      	b.n	8006ef0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	e04a      	b.n	8006e0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d76:	7bfa      	ldrb	r2, [r7, #15]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3315      	adds	r3, #21
 8006d86:	2201      	movs	r2, #1
 8006d88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3314      	adds	r3, #20
 8006d9a:	7bfa      	ldrb	r2, [r7, #15]
 8006d9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d9e:	7bfa      	ldrb	r2, [r7, #15]
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	b298      	uxth	r0, r3
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	332e      	adds	r3, #46	@ 0x2e
 8006db2:	4602      	mov	r2, r0
 8006db4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3318      	adds	r3, #24
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	331c      	adds	r3, #28
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dde:	7bfa      	ldrb	r2, [r7, #15]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3320      	adds	r3, #32
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006df2:	7bfa      	ldrb	r2, [r7, #15]
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3324      	adds	r3, #36	@ 0x24
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	791b      	ldrb	r3, [r3, #4]
 8006e10:	7bfa      	ldrb	r2, [r7, #15]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d3af      	bcc.n	8006d76 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	e044      	b.n	8006ea6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e1c:	7bfa      	ldrb	r2, [r7, #15]
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e32:	7bfa      	ldrb	r2, [r7, #15]
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006e44:	7bfa      	ldrb	r2, [r7, #15]
 8006e46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e48:	7bfa      	ldrb	r2, [r7, #15]
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e5e:	7bfa      	ldrb	r2, [r7, #15]
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e74:	7bfa      	ldrb	r2, [r7, #15]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e8a:	7bfa      	ldrb	r2, [r7, #15]
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	73fb      	strb	r3, [r7, #15]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3b5      	bcc.n	8006e1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	7c1a      	ldrb	r2, [r3, #16]
 8006eb8:	f88d 2000 	strb.w	r2, [sp]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ec0:	f002 fec8 	bl	8009c54 <USB_DevInit>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e00c      	b.n	8006ef0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f003 ff12 	bl	800ad12 <USB_DevDisconnect>

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_PCD_Start+0x1c>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e022      	b.n	8006f5a <HAL_PCD_Start+0x62>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d105      	bne.n	8006f3c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f002 fe19 	bl	8009b78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f003 fec0 	bl	800acd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006f62:	b590      	push	{r4, r7, lr}
 8006f64:	b08d      	sub	sp, #52	@ 0x34
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f003 ff7e 	bl	800ae7a <USB_GetMode>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 848c 	bne.w	800789e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f003 fee2 	bl	800ad54 <USB_ReadInterrupts>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8482 	beq.w	800789c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f003 fecf 	bl	800ad54 <USB_ReadInterrupts>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d107      	bne.n	8006fd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695a      	ldr	r2, [r3, #20]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f002 0202 	and.w	r2, r2, #2
 8006fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f003 febd 	bl	800ad54 <USB_ReadInterrupts>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d161      	bne.n	80070a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699a      	ldr	r2, [r3, #24]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0210 	bic.w	r2, r2, #16
 8006ff2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4413      	add	r3, r2
 8007010:	3304      	adds	r3, #4
 8007012:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800701a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800701e:	d124      	bne.n	800706a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007026:	4013      	ands	r3, r2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d035      	beq.n	8007098 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	091b      	lsrs	r3, r3, #4
 8007034:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	6a38      	ldr	r0, [r7, #32]
 8007040:	f003 fcf4 	bl	800aa2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	091b      	lsrs	r3, r3, #4
 800704c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007050:	441a      	add	r2, r3
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007062:	441a      	add	r2, r3
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	615a      	str	r2, [r3, #20]
 8007068:	e016      	b.n	8007098 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007070:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007074:	d110      	bne.n	8007098 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800707c:	2208      	movs	r2, #8
 800707e:	4619      	mov	r1, r3
 8007080:	6a38      	ldr	r0, [r7, #32]
 8007082:	f003 fcd3 	bl	800aa2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	695a      	ldr	r2, [r3, #20]
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	091b      	lsrs	r3, r3, #4
 800708e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007092:	441a      	add	r2, r3
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0210 	orr.w	r2, r2, #16
 80070a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f003 fe51 	bl	800ad54 <USB_ReadInterrupts>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80070bc:	f040 80a7 	bne.w	800720e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f003 fe56 	bl	800ad7a <USB_ReadDevAllOutEpInterrupt>
 80070ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80070d0:	e099      	b.n	8007206 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 808e 	beq.w	80071fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	4611      	mov	r1, r2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f003 fe7a 	bl	800ade2 <USB_ReadDevOutEPInterrupt>
 80070ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	461a      	mov	r2, r3
 8007108:	2301      	movs	r3, #1
 800710a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800710c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fea4 	bl	8007e5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712a:	461a      	mov	r2, r3
 800712c:	2308      	movs	r3, #8
 800712e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 ff7a 	bl	800802c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f003 0310 	and.w	r3, r3, #16
 800713e:	2b00      	cmp	r3, #0
 8007140:	d008      	beq.n	8007154 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	461a      	mov	r2, r3
 8007150:	2310      	movs	r3, #16
 8007152:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d030      	beq.n	80071c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007166:	2b80      	cmp	r3, #128	@ 0x80
 8007168:	d109      	bne.n	800717e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007178:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800717c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800717e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007180:	4613      	mov	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	4413      	add	r3, r2
 8007190:	3304      	adds	r3, #4
 8007192:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	78db      	ldrb	r3, [r3, #3]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d108      	bne.n	80071ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2200      	movs	r2, #0
 80071a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f006 fa8d 	bl	800d6c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ba:	461a      	mov	r2, r3
 80071bc:	2302      	movs	r3, #2
 80071be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d008      	beq.n	80071dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d6:	461a      	mov	r2, r3
 80071d8:	2320      	movs	r3, #32
 80071da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f2:	461a      	mov	r2, r3
 80071f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80071f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	3301      	adds	r3, #1
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	2b00      	cmp	r3, #0
 800720a:	f47f af62 	bne.w	80070d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f003 fd9e 	bl	800ad54 <USB_ReadInterrupts>
 8007218:	4603      	mov	r3, r0
 800721a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800721e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007222:	f040 80db 	bne.w	80073dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f003 fdbf 	bl	800adae <USB_ReadDevAllInEpInterrupt>
 8007230:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007236:	e0cd      	b.n	80073d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80c2 	beq.w	80073c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f003 fde5 	bl	800ae1e <USB_ReadDevInEPInterrupt>
 8007254:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d057      	beq.n	8007310 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	2201      	movs	r2, #1
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	43db      	mvns	r3, r3
 800727a:	69f9      	ldr	r1, [r7, #28]
 800727c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007280:	4013      	ands	r3, r2
 8007282:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007290:	461a      	mov	r2, r3
 8007292:	2301      	movs	r3, #1
 8007294:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	799b      	ldrb	r3, [r3, #6]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d132      	bne.n	8007304 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a2:	4613      	mov	r3, r2
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	3320      	adds	r3, #32
 80072ae:	6819      	ldr	r1, [r3, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b4:	4613      	mov	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4403      	add	r3, r0
 80072be:	331c      	adds	r3, #28
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4419      	add	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c8:	4613      	mov	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4403      	add	r3, r0
 80072d2:	3320      	adds	r3, #32
 80072d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d113      	bne.n	8007304 <HAL_PCD_IRQHandler+0x3a2>
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e0:	4613      	mov	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	3324      	adds	r3, #36	@ 0x24
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d108      	bne.n	8007304 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072fc:	461a      	mov	r2, r3
 80072fe:	2101      	movs	r1, #1
 8007300:	f003 fdec 	bl	800aedc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	b2db      	uxtb	r3, r3
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f006 f961 	bl	800d5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007326:	461a      	mov	r2, r3
 8007328:	2308      	movs	r3, #8
 800732a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b00      	cmp	r3, #0
 8007334:	d008      	beq.n	8007348 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007342:	461a      	mov	r2, r3
 8007344:	2310      	movs	r3, #16
 8007346:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735e:	461a      	mov	r2, r3
 8007360:	2340      	movs	r3, #64	@ 0x40
 8007362:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d023      	beq.n	80073b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800736e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007370:	6a38      	ldr	r0, [r7, #32]
 8007372:	f002 fdd3 	bl	8009f1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	3310      	adds	r3, #16
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	3304      	adds	r3, #4
 8007388:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	78db      	ldrb	r3, [r3, #3]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d108      	bne.n	80073a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	b2db      	uxtb	r3, r3
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f006 f9a4 	bl	800d6ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b0:	461a      	mov	r2, r3
 80073b2:	2302      	movs	r3, #2
 80073b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80073c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcbd 	bl	8007d42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	3301      	adds	r3, #1
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f47f af2e 	bne.w	8007238 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f003 fcb7 	bl	800ad54 <USB_ReadInterrupts>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073f0:	d122      	bne.n	8007438 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800740c:	2b01      	cmp	r3, #1
 800740e:	d108      	bne.n	8007422 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007418:	2100      	movs	r1, #0
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fea4 	bl	8008168 <HAL_PCDEx_LPM_Callback>
 8007420:	e002      	b.n	8007428 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f006 f942 	bl	800d6ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695a      	ldr	r2, [r3, #20]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f003 fc89 	bl	800ad54 <USB_ReadInterrupts>
 8007442:	4603      	mov	r3, r0
 8007444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800744c:	d112      	bne.n	8007474 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b01      	cmp	r3, #1
 800745c:	d102      	bne.n	8007464 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f006 f8fe 	bl	800d660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007472:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f003 fc6b 	bl	800ad54 <USB_ReadInterrupts>
 800747e:	4603      	mov	r3, r0
 8007480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007488:	f040 80b7 	bne.w	80075fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2110      	movs	r1, #16
 80074a6:	4618      	mov	r0, r3
 80074a8:	f002 fd38 	bl	8009f1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074b0:	e046      	b.n	8007540 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80074b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074be:	461a      	mov	r2, r3
 80074c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80074e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f2:	461a      	mov	r2, r3
 80074f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007514:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007518:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800751a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007534:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007538:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753c:	3301      	adds	r3, #1
 800753e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	791b      	ldrb	r3, [r3, #4]
 8007544:	461a      	mov	r2, r3
 8007546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007548:	4293      	cmp	r3, r2
 800754a:	d3b2      	bcc.n	80074b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800755a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800755e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7bdb      	ldrb	r3, [r3, #15]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d016      	beq.n	8007596 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007578:	f043 030b 	orr.w	r3, r3, #11
 800757c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800758e:	f043 030b 	orr.w	r3, r3, #11
 8007592:	6453      	str	r3, [r2, #68]	@ 0x44
 8007594:	e015      	b.n	80075c2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80075a8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80075ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075bc:	f043 030b 	orr.w	r3, r3, #11
 80075c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80075d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075e4:	461a      	mov	r2, r3
 80075e6:	f003 fc79 	bl	800aedc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80075f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f003 fba8 	bl	800ad54 <USB_ReadInterrupts>
 8007604:	4603      	mov	r3, r0
 8007606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800760a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800760e:	d123      	bne.n	8007658 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f003 fc3e 	bl	800ae96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f002 fcf5 	bl	800a00e <USB_GetDevSpeed>
 8007624:	4603      	mov	r3, r0
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681c      	ldr	r4, [r3, #0]
 8007630:	f001 f9ca 	bl	80089c8 <HAL_RCC_GetHCLKFreq>
 8007634:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800763a:	461a      	mov	r2, r3
 800763c:	4620      	mov	r0, r4
 800763e:	f002 f9f9 	bl	8009a34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f005 ffed 	bl	800d622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007656:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f003 fb79 	bl	800ad54 <USB_ReadInterrupts>
 8007662:	4603      	mov	r3, r0
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b08      	cmp	r3, #8
 800766a:	d10a      	bne.n	8007682 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f005 ffca 	bl	800d606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f002 0208 	and.w	r2, r2, #8
 8007680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f003 fb64 	bl	800ad54 <USB_ReadInterrupts>
 800768c:	4603      	mov	r3, r0
 800768e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007692:	2b80      	cmp	r3, #128	@ 0x80
 8007694:	d123      	bne.n	80076de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076a2:	2301      	movs	r3, #1
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a6:	e014      	b.n	80076d2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ac:	4613      	mov	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d105      	bne.n	80076cc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fb0a 	bl	8007ce0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	3301      	adds	r3, #1
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	791b      	ldrb	r3, [r3, #4]
 80076d6:	461a      	mov	r2, r3
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	4293      	cmp	r3, r2
 80076dc:	d3e4      	bcc.n	80076a8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f003 fb36 	bl	800ad54 <USB_ReadInterrupts>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076f2:	d13c      	bne.n	800776e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076f4:	2301      	movs	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f8:	e02b      	b.n	8007752 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800770e:	4613      	mov	r3, r2
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	3318      	adds	r3, #24
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d115      	bne.n	800774c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007720:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007722:	2b00      	cmp	r3, #0
 8007724:	da12      	bge.n	800774c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772a:	4613      	mov	r3, r2
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3317      	adds	r3, #23
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007742:	b2db      	uxtb	r3, r3
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 faca 	bl	8007ce0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	3301      	adds	r3, #1
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	791b      	ldrb	r3, [r3, #4]
 8007756:	461a      	mov	r2, r3
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	4293      	cmp	r3, r2
 800775c:	d3cd      	bcc.n	80076fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800776c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f003 faee 	bl	800ad54 <USB_ReadInterrupts>
 8007778:	4603      	mov	r3, r0
 800777a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800777e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007782:	d156      	bne.n	8007832 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007784:	2301      	movs	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
 8007788:	e045      	b.n	8007816 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800779e:	4613      	mov	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d12e      	bne.n	8007810 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80077b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da2b      	bge.n	8007810 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	0c1a      	lsrs	r2, r3, #16
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80077c2:	4053      	eors	r3, r2
 80077c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d121      	bne.n	8007810 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80077de:	2201      	movs	r2, #1
 80077e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007808:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800780c:	6053      	str	r3, [r2, #4]
            break;
 800780e:	e008      	b.n	8007822 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	3301      	adds	r3, #1
 8007814:	627b      	str	r3, [r7, #36]	@ 0x24
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	791b      	ldrb	r3, [r3, #4]
 800781a:	461a      	mov	r2, r3
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	4293      	cmp	r3, r2
 8007820:	d3b3      	bcc.n	800778a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695a      	ldr	r2, [r3, #20]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f003 fa8c 	bl	800ad54 <USB_ReadInterrupts>
 800783c:	4603      	mov	r3, r0
 800783e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007846:	d10a      	bne.n	800785e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f005 ff61 	bl	800d710 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695a      	ldr	r2, [r3, #20]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800785c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f003 fa76 	bl	800ad54 <USB_ReadInterrupts>
 8007868:	4603      	mov	r3, r0
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b04      	cmp	r3, #4
 8007870:	d115      	bne.n	800789e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f005 ff51 	bl	800d72c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6859      	ldr	r1, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	e000      	b.n	800789e <HAL_PCD_IRQHandler+0x93c>
      return;
 800789c:	bf00      	nop
    }
  }
}
 800789e:	3734      	adds	r7, #52	@ 0x34
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd90      	pop	{r4, r7, pc}

080078a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_PCD_SetAddress+0x1a>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e012      	b.n	80078e4 <HAL_PCD_SetAddress+0x40>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	4611      	mov	r1, r2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f003 f9d5 	bl	800ac84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	4608      	mov	r0, r1
 80078f6:	4611      	mov	r1, r2
 80078f8:	461a      	mov	r2, r3
 80078fa:	4603      	mov	r3, r0
 80078fc:	70fb      	strb	r3, [r7, #3]
 80078fe:	460b      	mov	r3, r1
 8007900:	803b      	strh	r3, [r7, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800790a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800790e:	2b00      	cmp	r3, #0
 8007910:	da0f      	bge.n	8007932 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	4613      	mov	r3, r2
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	3310      	adds	r3, #16
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	3304      	adds	r3, #4
 8007928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	705a      	strb	r2, [r3, #1]
 8007930:	e00f      	b.n	8007952 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	f003 020f 	and.w	r2, r3, #15
 8007938:	4613      	mov	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4413      	add	r3, r2
 8007948:	3304      	adds	r3, #4
 800794a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800795e:	883b      	ldrh	r3, [r7, #0]
 8007960:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	78ba      	ldrb	r2, [r7, #2]
 800796c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007980:	78bb      	ldrb	r3, [r7, #2]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d102      	bne.n	800798c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_PCD_EP_Open+0xae>
 8007996:	2302      	movs	r3, #2
 8007998:	e00e      	b.n	80079b8 <HAL_PCD_EP_Open+0xcc>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f002 fb55 	bl	800a058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80079b6:	7afb      	ldrb	r3, [r7, #11]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0f      	bge.n	80079f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	f003 020f 	and.w	r2, r3, #15
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	3310      	adds	r3, #16
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	705a      	strb	r2, [r3, #1]
 80079f2:	e00f      	b.n	8007a14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	f003 020f 	and.w	r2, r3, #15
 80079fa:	4613      	mov	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4413      	add	r3, r2
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_PCD_EP_Close+0x6e>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e00e      	b.n	8007a4c <HAL_PCD_EP_Close+0x8c>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 fb93 	bl	800a168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	607a      	str	r2, [r7, #4]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	460b      	mov	r3, r1
 8007a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	f003 020f 	and.w	r2, r3, #15
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	00db      	lsls	r3, r3, #3
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2200      	movs	r2, #0
 8007a94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	799b      	ldrb	r3, [r3, #6]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d102      	bne.n	8007ab0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	799b      	ldrb	r3, [r3, #6]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6979      	ldr	r1, [r7, #20]
 8007abc:	f002 fc30 	bl	800a320 <USB_EPStartXfer>

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007aec:	681b      	ldr	r3, [r3, #0]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	460b      	mov	r3, r1
 8007b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b0a:	7afb      	ldrb	r3, [r7, #11]
 8007b0c:	f003 020f 	and.w	r2, r3, #15
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	3310      	adds	r3, #16
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	3304      	adds	r3, #4
 8007b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2201      	movs	r2, #1
 8007b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	799b      	ldrb	r3, [r3, #6]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d102      	bne.n	8007b54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	799b      	ldrb	r3, [r3, #6]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	f002 fbde 	bl	800a320 <USB_EPStartXfer>

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3718      	adds	r7, #24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	7912      	ldrb	r2, [r2, #4]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d901      	bls.n	8007b8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e04f      	b.n	8007c2c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da0f      	bge.n	8007bb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	f003 020f 	and.w	r2, r3, #15
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	3310      	adds	r3, #16
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3304      	adds	r3, #4
 8007baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	705a      	strb	r2, [r3, #1]
 8007bb2:	e00d      	b.n	8007bd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_PCD_EP_SetStall+0x82>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e01d      	b.n	8007c2c <HAL_PCD_EP_SetStall+0xbe>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f002 ff6c 	bl	800aadc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7999      	ldrb	r1, [r3, #6]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f003 f95d 	bl	800aedc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	7912      	ldrb	r2, [r2, #4]
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e042      	b.n	8007cd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da0f      	bge.n	8007c7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	4613      	mov	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	3310      	adds	r3, #16
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	705a      	strb	r2, [r3, #1]
 8007c78:	e00f      	b.n	8007c9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	f003 020f 	and.w	r2, r3, #15
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	4413      	add	r3, r2
 8007c90:	3304      	adds	r3, #4
 8007c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <HAL_PCD_EP_ClrStall+0x86>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e00e      	b.n	8007cd8 <HAL_PCD_EP_ClrStall+0xa4>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f002 ff75 	bl	800abb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da0c      	bge.n	8007d0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	3310      	adds	r3, #16
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	3304      	adds	r3, #4
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e00c      	b.n	8007d28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	4613      	mov	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	3304      	adds	r3, #4
 8007d26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68f9      	ldr	r1, [r7, #12]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f002 fd94 	bl	800a85c <USB_EPStopXfer>
 8007d34:	4603      	mov	r3, r0
 8007d36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b08a      	sub	sp, #40	@ 0x28
 8007d46:	af02      	add	r7, sp, #8
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	3310      	adds	r3, #16
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	3304      	adds	r3, #4
 8007d68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d901      	bls.n	8007d7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e06b      	b.n	8007e52 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d902      	bls.n	8007d96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	3303      	adds	r3, #3
 8007d9a:	089b      	lsrs	r3, r3, #2
 8007d9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d9e:	e02a      	b.n	8007df6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d902      	bls.n	8007dbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	3303      	adds	r3, #3
 8007dc0:	089b      	lsrs	r3, r3, #2
 8007dc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	68d9      	ldr	r1, [r3, #12]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6978      	ldr	r0, [r7, #20]
 8007dda:	f002 fde9 	bl	800a9b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	441a      	add	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	441a      	add	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d809      	bhi.n	8007e20 <PCD_WriteEmptyTxFifo+0xde>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	695a      	ldr	r2, [r3, #20]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d203      	bcs.n	8007e20 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1bf      	bne.n	8007da0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d811      	bhi.n	8007e50 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	2201      	movs	r2, #1
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	43db      	mvns	r3, r3
 8007e46:	6939      	ldr	r1, [r7, #16]
 8007e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	333c      	adds	r3, #60	@ 0x3c
 8007e74:	3304      	adds	r3, #4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	799b      	ldrb	r3, [r3, #6]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d17b      	bne.n	8007f8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d015      	beq.n	8007ec8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4a61      	ldr	r2, [pc, #388]	@ (8008024 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	f240 80b9 	bls.w	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80b3 	beq.w	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ec4:	6093      	str	r3, [r2, #8]
 8007ec6:	e0a7      	b.n	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ede:	461a      	mov	r2, r3
 8007ee0:	2320      	movs	r3, #32
 8007ee2:	6093      	str	r3, [r2, #8]
 8007ee4:	e098      	b.n	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 8093 	bne.w	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	4a4b      	ldr	r2, [pc, #300]	@ (8008024 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d90f      	bls.n	8007f1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f10:	461a      	mov	r2, r3
 8007f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f16:	6093      	str	r3, [r2, #8]
 8007f18:	e07e      	b.n	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	0159      	lsls	r1, r3, #5
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	440b      	add	r3, r1
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f46:	1ad2      	subs	r2, r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d114      	bne.n	8007f7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f64:	461a      	mov	r2, r3
 8007f66:	2101      	movs	r1, #1
 8007f68:	f002 ffb8 	bl	800aedc <USB_EP0_OutStart>
 8007f6c:	e006      	b.n	8007f7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	441a      	add	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f005 fb0a 	bl	800d59c <HAL_PCD_DataOutStageCallback>
 8007f88:	e046      	b.n	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	4a26      	ldr	r2, [pc, #152]	@ (8008028 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d124      	bne.n	8007fdc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fae:	6093      	str	r3, [r2, #8]
 8007fb0:	e032      	b.n	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f003 0320 	and.w	r3, r3, #32
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2320      	movs	r3, #32
 8007fcc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f005 fae1 	bl	800d59c <HAL_PCD_DataOutStageCallback>
 8007fda:	e01d      	b.n	8008018 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d114      	bne.n	800800c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d108      	bne.n	800800c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6818      	ldr	r0, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008004:	461a      	mov	r2, r3
 8008006:	2100      	movs	r1, #0
 8008008:	f002 ff68 	bl	800aedc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f005 fac2 	bl	800d59c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	4f54300a 	.word	0x4f54300a
 8008028:	4f54310a 	.word	0x4f54310a

0800802c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	333c      	adds	r3, #60	@ 0x3c
 8008044:	3304      	adds	r3, #4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a15      	ldr	r2, [pc, #84]	@ (80080b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d90e      	bls.n	8008080 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008078:	461a      	mov	r2, r3
 800807a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800807e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f005 fa79 	bl	800d578 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4a0a      	ldr	r2, [pc, #40]	@ (80080b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d90c      	bls.n	80080a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	799b      	ldrb	r3, [r3, #6]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d108      	bne.n	80080a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080a0:	461a      	mov	r2, r3
 80080a2:	2101      	movs	r1, #1
 80080a4:	f002 ff1a 	bl	800aedc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	4f54300a 	.word	0x4f54300a

080080b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
 80080c4:	4613      	mov	r3, r2
 80080c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d107      	bne.n	80080e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80080d6:	883b      	ldrh	r3, [r7, #0]
 80080d8:	0419      	lsls	r1, r3, #16
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80080e4:	e028      	b.n	8008138 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	0c1b      	lsrs	r3, r3, #16
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e00d      	b.n	8008116 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	3340      	adds	r3, #64	@ 0x40
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	0c1b      	lsrs	r3, r3, #16
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	3301      	adds	r3, #1
 8008114:	73fb      	strb	r3, [r7, #15]
 8008116:	7bfa      	ldrb	r2, [r7, #15]
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	3b01      	subs	r3, #1
 800811c:	429a      	cmp	r2, r3
 800811e:	d3ec      	bcc.n	80080fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008120:	883b      	ldrh	r3, [r7, #0]
 8008122:	0418      	lsls	r0, r3, #16
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6819      	ldr	r1, [r3, #0]
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	3b01      	subs	r3, #1
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	4302      	orrs	r2, r0
 8008130:	3340      	adds	r3, #64	@ 0x40
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	887a      	ldrh	r2, [r7, #2]
 8008158:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e267      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d075      	beq.n	800828a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800819e:	4b88      	ldr	r3, [pc, #544]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 030c 	and.w	r3, r3, #12
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d00c      	beq.n	80081c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081aa:	4b85      	ldr	r3, [pc, #532]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80081b2:	2b08      	cmp	r3, #8
 80081b4:	d112      	bne.n	80081dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081b6:	4b82      	ldr	r3, [pc, #520]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081c2:	d10b      	bne.n	80081dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081c4:	4b7e      	ldr	r3, [pc, #504]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d05b      	beq.n	8008288 <HAL_RCC_OscConfig+0x108>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d157      	bne.n	8008288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e242      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e4:	d106      	bne.n	80081f4 <HAL_RCC_OscConfig+0x74>
 80081e6:	4b76      	ldr	r3, [pc, #472]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a75      	ldr	r2, [pc, #468]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80081ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	e01d      	b.n	8008230 <HAL_RCC_OscConfig+0xb0>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081fc:	d10c      	bne.n	8008218 <HAL_RCC_OscConfig+0x98>
 80081fe:	4b70      	ldr	r3, [pc, #448]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a6f      	ldr	r2, [pc, #444]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	4b6d      	ldr	r3, [pc, #436]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a6c      	ldr	r2, [pc, #432]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e00b      	b.n	8008230 <HAL_RCC_OscConfig+0xb0>
 8008218:	4b69      	ldr	r3, [pc, #420]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a68      	ldr	r2, [pc, #416]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 800821e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	4b66      	ldr	r3, [pc, #408]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a65      	ldr	r2, [pc, #404]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 800822a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800822e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d013      	beq.n	8008260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008238:	f7fa f862 	bl	8002300 <HAL_GetTick>
 800823c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800823e:	e008      	b.n	8008252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008240:	f7fa f85e 	bl	8002300 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b64      	cmp	r3, #100	@ 0x64
 800824c:	d901      	bls.n	8008252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e207      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008252:	4b5b      	ldr	r3, [pc, #364]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f0      	beq.n	8008240 <HAL_RCC_OscConfig+0xc0>
 800825e:	e014      	b.n	800828a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008260:	f7fa f84e 	bl	8002300 <HAL_GetTick>
 8008264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008268:	f7fa f84a 	bl	8002300 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b64      	cmp	r3, #100	@ 0x64
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e1f3      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800827a:	4b51      	ldr	r3, [pc, #324]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1f0      	bne.n	8008268 <HAL_RCC_OscConfig+0xe8>
 8008286:	e000      	b.n	800828a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d063      	beq.n	800835e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008296:	4b4a      	ldr	r3, [pc, #296]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 030c 	and.w	r3, r3, #12
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00b      	beq.n	80082ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082a2:	4b47      	ldr	r3, [pc, #284]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80082aa:	2b08      	cmp	r3, #8
 80082ac:	d11c      	bne.n	80082e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082ae:	4b44      	ldr	r3, [pc, #272]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d116      	bne.n	80082e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082ba:	4b41      	ldr	r3, [pc, #260]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <HAL_RCC_OscConfig+0x152>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d001      	beq.n	80082d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e1c7      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082d2:	4b3b      	ldr	r3, [pc, #236]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	4937      	ldr	r1, [pc, #220]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082e6:	e03a      	b.n	800835e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d020      	beq.n	8008332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082f0:	4b34      	ldr	r3, [pc, #208]	@ (80083c4 <HAL_RCC_OscConfig+0x244>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f6:	f7fa f803 	bl	8002300 <HAL_GetTick>
 80082fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082fc:	e008      	b.n	8008310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082fe:	f7f9 ffff 	bl	8002300 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d901      	bls.n	8008310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e1a8      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008310:	4b2b      	ldr	r3, [pc, #172]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0f0      	beq.n	80082fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800831c:	4b28      	ldr	r3, [pc, #160]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	4925      	ldr	r1, [pc, #148]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 800832c:	4313      	orrs	r3, r2
 800832e:	600b      	str	r3, [r1, #0]
 8008330:	e015      	b.n	800835e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008332:	4b24      	ldr	r3, [pc, #144]	@ (80083c4 <HAL_RCC_OscConfig+0x244>)
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008338:	f7f9 ffe2 	bl	8002300 <HAL_GetTick>
 800833c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008340:	f7f9 ffde 	bl	8002300 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e187      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008352:	4b1b      	ldr	r3, [pc, #108]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f0      	bne.n	8008340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d036      	beq.n	80083d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d016      	beq.n	80083a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008372:	4b15      	ldr	r3, [pc, #84]	@ (80083c8 <HAL_RCC_OscConfig+0x248>)
 8008374:	2201      	movs	r2, #1
 8008376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008378:	f7f9 ffc2 	bl	8002300 <HAL_GetTick>
 800837c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008380:	f7f9 ffbe 	bl	8002300 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e167      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008392:	4b0b      	ldr	r3, [pc, #44]	@ (80083c0 <HAL_RCC_OscConfig+0x240>)
 8008394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0f0      	beq.n	8008380 <HAL_RCC_OscConfig+0x200>
 800839e:	e01b      	b.n	80083d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083a0:	4b09      	ldr	r3, [pc, #36]	@ (80083c8 <HAL_RCC_OscConfig+0x248>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083a6:	f7f9 ffab 	bl	8002300 <HAL_GetTick>
 80083aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ac:	e00e      	b.n	80083cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ae:	f7f9 ffa7 	bl	8002300 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d907      	bls.n	80083cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e150      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
 80083c0:	40023800 	.word	0x40023800
 80083c4:	42470000 	.word	0x42470000
 80083c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083cc:	4b88      	ldr	r3, [pc, #544]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 80083ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1ea      	bne.n	80083ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8097 	beq.w	8008514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ea:	4b81      	ldr	r3, [pc, #516]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 80083ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10f      	bne.n	8008416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083f6:	2300      	movs	r3, #0
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	4b7d      	ldr	r3, [pc, #500]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 80083fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fe:	4a7c      	ldr	r2, [pc, #496]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008404:	6413      	str	r3, [r2, #64]	@ 0x40
 8008406:	4b7a      	ldr	r3, [pc, #488]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008416:	4b77      	ldr	r3, [pc, #476]	@ (80085f4 <HAL_RCC_OscConfig+0x474>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841e:	2b00      	cmp	r3, #0
 8008420:	d118      	bne.n	8008454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008422:	4b74      	ldr	r3, [pc, #464]	@ (80085f4 <HAL_RCC_OscConfig+0x474>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a73      	ldr	r2, [pc, #460]	@ (80085f4 <HAL_RCC_OscConfig+0x474>)
 8008428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800842c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800842e:	f7f9 ff67 	bl	8002300 <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008436:	f7f9 ff63 	bl	8002300 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e10c      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008448:	4b6a      	ldr	r3, [pc, #424]	@ (80085f4 <HAL_RCC_OscConfig+0x474>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d106      	bne.n	800846a <HAL_RCC_OscConfig+0x2ea>
 800845c:	4b64      	ldr	r3, [pc, #400]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 800845e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008460:	4a63      	ldr	r2, [pc, #396]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	6713      	str	r3, [r2, #112]	@ 0x70
 8008468:	e01c      	b.n	80084a4 <HAL_RCC_OscConfig+0x324>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b05      	cmp	r3, #5
 8008470:	d10c      	bne.n	800848c <HAL_RCC_OscConfig+0x30c>
 8008472:	4b5f      	ldr	r3, [pc, #380]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008476:	4a5e      	ldr	r2, [pc, #376]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008478:	f043 0304 	orr.w	r3, r3, #4
 800847c:	6713      	str	r3, [r2, #112]	@ 0x70
 800847e:	4b5c      	ldr	r3, [pc, #368]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008482:	4a5b      	ldr	r2, [pc, #364]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	6713      	str	r3, [r2, #112]	@ 0x70
 800848a:	e00b      	b.n	80084a4 <HAL_RCC_OscConfig+0x324>
 800848c:	4b58      	ldr	r3, [pc, #352]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008490:	4a57      	ldr	r2, [pc, #348]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008492:	f023 0301 	bic.w	r3, r3, #1
 8008496:	6713      	str	r3, [r2, #112]	@ 0x70
 8008498:	4b55      	ldr	r3, [pc, #340]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 800849a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849c:	4a54      	ldr	r2, [pc, #336]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 800849e:	f023 0304 	bic.w	r3, r3, #4
 80084a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d015      	beq.n	80084d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ac:	f7f9 ff28 	bl	8002300 <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084b2:	e00a      	b.n	80084ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084b4:	f7f9 ff24 	bl	8002300 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e0cb      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ca:	4b49      	ldr	r3, [pc, #292]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 80084cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0ee      	beq.n	80084b4 <HAL_RCC_OscConfig+0x334>
 80084d6:	e014      	b.n	8008502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084d8:	f7f9 ff12 	bl	8002300 <HAL_GetTick>
 80084dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084de:	e00a      	b.n	80084f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084e0:	f7f9 ff0e 	bl	8002300 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e0b5      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084f6:	4b3e      	ldr	r3, [pc, #248]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1ee      	bne.n	80084e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d105      	bne.n	8008514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008508:	4b39      	ldr	r3, [pc, #228]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 800850a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850c:	4a38      	ldr	r2, [pc, #224]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 800850e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80a1 	beq.w	8008660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800851e:	4b34      	ldr	r3, [pc, #208]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 030c 	and.w	r3, r3, #12
 8008526:	2b08      	cmp	r3, #8
 8008528:	d05c      	beq.n	80085e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d141      	bne.n	80085b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008532:	4b31      	ldr	r3, [pc, #196]	@ (80085f8 <HAL_RCC_OscConfig+0x478>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008538:	f7f9 fee2 	bl	8002300 <HAL_GetTick>
 800853c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800853e:	e008      	b.n	8008552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008540:	f7f9 fede 	bl	8002300 <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e087      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008552:	4b27      	ldr	r3, [pc, #156]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1f0      	bne.n	8008540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69da      	ldr	r2, [r3, #28]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	431a      	orrs	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856c:	019b      	lsls	r3, r3, #6
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008574:	085b      	lsrs	r3, r3, #1
 8008576:	3b01      	subs	r3, #1
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	061b      	lsls	r3, r3, #24
 8008582:	491b      	ldr	r1, [pc, #108]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 8008584:	4313      	orrs	r3, r2
 8008586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008588:	4b1b      	ldr	r3, [pc, #108]	@ (80085f8 <HAL_RCC_OscConfig+0x478>)
 800858a:	2201      	movs	r2, #1
 800858c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800858e:	f7f9 feb7 	bl	8002300 <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008594:	e008      	b.n	80085a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008596:	f7f9 feb3 	bl	8002300 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d901      	bls.n	80085a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e05c      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085a8:	4b11      	ldr	r3, [pc, #68]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0f0      	beq.n	8008596 <HAL_RCC_OscConfig+0x416>
 80085b4:	e054      	b.n	8008660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085b6:	4b10      	ldr	r3, [pc, #64]	@ (80085f8 <HAL_RCC_OscConfig+0x478>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085bc:	f7f9 fea0 	bl	8002300 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c4:	f7f9 fe9c 	bl	8002300 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e045      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085d6:	4b06      	ldr	r3, [pc, #24]	@ (80085f0 <HAL_RCC_OscConfig+0x470>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <HAL_RCC_OscConfig+0x444>
 80085e2:	e03d      	b.n	8008660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d107      	bne.n	80085fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e038      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
 80085f0:	40023800 	.word	0x40023800
 80085f4:	40007000 	.word	0x40007000
 80085f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085fc:	4b1b      	ldr	r3, [pc, #108]	@ (800866c <HAL_RCC_OscConfig+0x4ec>)
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d028      	beq.n	800865c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008614:	429a      	cmp	r2, r3
 8008616:	d121      	bne.n	800865c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008622:	429a      	cmp	r2, r3
 8008624:	d11a      	bne.n	800865c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800862c:	4013      	ands	r3, r2
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008634:	4293      	cmp	r3, r2
 8008636:	d111      	bne.n	800865c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	3b01      	subs	r3, #1
 8008646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008648:	429a      	cmp	r2, r3
 800864a:	d107      	bne.n	800865c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008658:	429a      	cmp	r2, r3
 800865a:	d001      	beq.n	8008660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e000      	b.n	8008662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40023800 	.word	0x40023800

08008670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e0cc      	b.n	800881e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008684:	4b68      	ldr	r3, [pc, #416]	@ (8008828 <HAL_RCC_ClockConfig+0x1b8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d90c      	bls.n	80086ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008692:	4b65      	ldr	r3, [pc, #404]	@ (8008828 <HAL_RCC_ClockConfig+0x1b8>)
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800869a:	4b63      	ldr	r3, [pc, #396]	@ (8008828 <HAL_RCC_ClockConfig+0x1b8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d001      	beq.n	80086ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0b8      	b.n	800881e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d020      	beq.n	80086fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086c4:	4b59      	ldr	r3, [pc, #356]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	4a58      	ldr	r2, [pc, #352]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80086ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80086ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086dc:	4b53      	ldr	r3, [pc, #332]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	4a52      	ldr	r2, [pc, #328]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80086e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086e8:	4b50      	ldr	r3, [pc, #320]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	494d      	ldr	r1, [pc, #308]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d044      	beq.n	8008790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d107      	bne.n	800871e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800870e:	4b47      	ldr	r3, [pc, #284]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d119      	bne.n	800874e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e07f      	b.n	800881e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d003      	beq.n	800872e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800872a:	2b03      	cmp	r3, #3
 800872c:	d107      	bne.n	800873e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800872e:	4b3f      	ldr	r3, [pc, #252]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e06f      	b.n	800881e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800873e:	4b3b      	ldr	r3, [pc, #236]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e067      	b.n	800881e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800874e:	4b37      	ldr	r3, [pc, #220]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f023 0203 	bic.w	r2, r3, #3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	4934      	ldr	r1, [pc, #208]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 800875c:	4313      	orrs	r3, r2
 800875e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008760:	f7f9 fdce 	bl	8002300 <HAL_GetTick>
 8008764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008766:	e00a      	b.n	800877e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008768:	f7f9 fdca 	bl	8002300 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008776:	4293      	cmp	r3, r2
 8008778:	d901      	bls.n	800877e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e04f      	b.n	800881e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800877e:	4b2b      	ldr	r3, [pc, #172]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 020c 	and.w	r2, r3, #12
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	429a      	cmp	r2, r3
 800878e:	d1eb      	bne.n	8008768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008790:	4b25      	ldr	r3, [pc, #148]	@ (8008828 <HAL_RCC_ClockConfig+0x1b8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d20c      	bcs.n	80087b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800879e:	4b22      	ldr	r3, [pc, #136]	@ (8008828 <HAL_RCC_ClockConfig+0x1b8>)
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087a6:	4b20      	ldr	r3, [pc, #128]	@ (8008828 <HAL_RCC_ClockConfig+0x1b8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d001      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e032      	b.n	800881e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087c4:	4b19      	ldr	r3, [pc, #100]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4916      	ldr	r1, [pc, #88]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087e2:	4b12      	ldr	r3, [pc, #72]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	490e      	ldr	r1, [pc, #56]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80087f6:	f000 f821 	bl	800883c <HAL_RCC_GetSysClockFreq>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <HAL_RCC_ClockConfig+0x1bc>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	091b      	lsrs	r3, r3, #4
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	490a      	ldr	r1, [pc, #40]	@ (8008830 <HAL_RCC_ClockConfig+0x1c0>)
 8008808:	5ccb      	ldrb	r3, [r1, r3]
 800880a:	fa22 f303 	lsr.w	r3, r2, r3
 800880e:	4a09      	ldr	r2, [pc, #36]	@ (8008834 <HAL_RCC_ClockConfig+0x1c4>)
 8008810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008812:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <HAL_RCC_ClockConfig+0x1c8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f7f9 fd2e 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40023c00 	.word	0x40023c00
 800882c:	40023800 	.word	0x40023800
 8008830:	0800f01c 	.word	0x0800f01c
 8008834:	2000000c 	.word	0x2000000c
 8008838:	20000010 	.word	0x20000010

0800883c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800883c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008840:	b090      	sub	sp, #64	@ 0x40
 8008842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800884c:	2300      	movs	r3, #0
 800884e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008854:	4b59      	ldr	r3, [pc, #356]	@ (80089bc <HAL_RCC_GetSysClockFreq+0x180>)
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 030c 	and.w	r3, r3, #12
 800885c:	2b08      	cmp	r3, #8
 800885e:	d00d      	beq.n	800887c <HAL_RCC_GetSysClockFreq+0x40>
 8008860:	2b08      	cmp	r3, #8
 8008862:	f200 80a1 	bhi.w	80089a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <HAL_RCC_GetSysClockFreq+0x34>
 800886a:	2b04      	cmp	r3, #4
 800886c:	d003      	beq.n	8008876 <HAL_RCC_GetSysClockFreq+0x3a>
 800886e:	e09b      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008870:	4b53      	ldr	r3, [pc, #332]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008872:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008874:	e09b      	b.n	80089ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008876:	4b53      	ldr	r3, [pc, #332]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008878:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800887a:	e098      	b.n	80089ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800887c:	4b4f      	ldr	r3, [pc, #316]	@ (80089bc <HAL_RCC_GetSysClockFreq+0x180>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008886:	4b4d      	ldr	r3, [pc, #308]	@ (80089bc <HAL_RCC_GetSysClockFreq+0x180>)
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d028      	beq.n	80088e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008892:	4b4a      	ldr	r3, [pc, #296]	@ (80089bc <HAL_RCC_GetSysClockFreq+0x180>)
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	099b      	lsrs	r3, r3, #6
 8008898:	2200      	movs	r2, #0
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	627a      	str	r2, [r7, #36]	@ 0x24
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80088a4:	2100      	movs	r1, #0
 80088a6:	4b47      	ldr	r3, [pc, #284]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80088a8:	fb03 f201 	mul.w	r2, r3, r1
 80088ac:	2300      	movs	r3, #0
 80088ae:	fb00 f303 	mul.w	r3, r0, r3
 80088b2:	4413      	add	r3, r2
 80088b4:	4a43      	ldr	r2, [pc, #268]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80088b6:	fba0 1202 	umull	r1, r2, r0, r2
 80088ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088bc:	460a      	mov	r2, r1
 80088be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80088c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c2:	4413      	add	r3, r2
 80088c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c8:	2200      	movs	r2, #0
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	61fa      	str	r2, [r7, #28]
 80088ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80088d6:	f7f7 fcd3 	bl	8000280 <__aeabi_uldivmod>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4613      	mov	r3, r2
 80088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088e2:	e053      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088e4:	4b35      	ldr	r3, [pc, #212]	@ (80089bc <HAL_RCC_GetSysClockFreq+0x180>)
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	099b      	lsrs	r3, r3, #6
 80088ea:	2200      	movs	r2, #0
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	617a      	str	r2, [r7, #20]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80088f6:	f04f 0b00 	mov.w	fp, #0
 80088fa:	4652      	mov	r2, sl
 80088fc:	465b      	mov	r3, fp
 80088fe:	f04f 0000 	mov.w	r0, #0
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	0159      	lsls	r1, r3, #5
 8008908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800890c:	0150      	lsls	r0, r2, #5
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	ebb2 080a 	subs.w	r8, r2, sl
 8008916:	eb63 090b 	sbc.w	r9, r3, fp
 800891a:	f04f 0200 	mov.w	r2, #0
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800892a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800892e:	ebb2 0408 	subs.w	r4, r2, r8
 8008932:	eb63 0509 	sbc.w	r5, r3, r9
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	00eb      	lsls	r3, r5, #3
 8008940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008944:	00e2      	lsls	r2, r4, #3
 8008946:	4614      	mov	r4, r2
 8008948:	461d      	mov	r5, r3
 800894a:	eb14 030a 	adds.w	r3, r4, sl
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	eb45 030b 	adc.w	r3, r5, fp
 8008954:	607b      	str	r3, [r7, #4]
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	f04f 0300 	mov.w	r3, #0
 800895e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008962:	4629      	mov	r1, r5
 8008964:	028b      	lsls	r3, r1, #10
 8008966:	4621      	mov	r1, r4
 8008968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800896c:	4621      	mov	r1, r4
 800896e:	028a      	lsls	r2, r1, #10
 8008970:	4610      	mov	r0, r2
 8008972:	4619      	mov	r1, r3
 8008974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008976:	2200      	movs	r2, #0
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	60fa      	str	r2, [r7, #12]
 800897c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008980:	f7f7 fc7e 	bl	8000280 <__aeabi_uldivmod>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4613      	mov	r3, r2
 800898a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800898c:	4b0b      	ldr	r3, [pc, #44]	@ (80089bc <HAL_RCC_GetSysClockFreq+0x180>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	0c1b      	lsrs	r3, r3, #16
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	3301      	adds	r3, #1
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800899c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800899e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089a6:	e002      	b.n	80089ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089a8:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80089aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3740      	adds	r7, #64	@ 0x40
 80089b4:	46bd      	mov	sp, r7
 80089b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ba:	bf00      	nop
 80089bc:	40023800 	.word	0x40023800
 80089c0:	00f42400 	.word	0x00f42400
 80089c4:	017d7840 	.word	0x017d7840

080089c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089cc:	4b03      	ldr	r3, [pc, #12]	@ (80089dc <HAL_RCC_GetHCLKFreq+0x14>)
 80089ce:	681b      	ldr	r3, [r3, #0]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	2000000c 	.word	0x2000000c

080089e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80089e4:	f7ff fff0 	bl	80089c8 <HAL_RCC_GetHCLKFreq>
 80089e8:	4602      	mov	r2, r0
 80089ea:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	0a9b      	lsrs	r3, r3, #10
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	4903      	ldr	r1, [pc, #12]	@ (8008a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089f6:	5ccb      	ldrb	r3, [r1, r3]
 80089f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	40023800 	.word	0x40023800
 8008a04:	0800f02c 	.word	0x0800f02c

08008a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e041      	b.n	8008a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7f9 fa8e 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f000 fc3c 	bl	80092c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d001      	beq.n	8008ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e044      	b.n	8008b4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1e      	ldr	r2, [pc, #120]	@ (8008b58 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d018      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x6c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aea:	d013      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x6c>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1a      	ldr	r2, [pc, #104]	@ (8008b5c <HAL_TIM_Base_Start_IT+0xb4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00e      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x6c>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a19      	ldr	r2, [pc, #100]	@ (8008b60 <HAL_TIM_Base_Start_IT+0xb8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d009      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x6c>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a17      	ldr	r2, [pc, #92]	@ (8008b64 <HAL_TIM_Base_Start_IT+0xbc>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d004      	beq.n	8008b14 <HAL_TIM_Base_Start_IT+0x6c>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a16      	ldr	r2, [pc, #88]	@ (8008b68 <HAL_TIM_Base_Start_IT+0xc0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d111      	bne.n	8008b38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	d010      	beq.n	8008b48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f042 0201 	orr.w	r2, r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b36:	e007      	b.n	8008b48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40000c00 	.word	0x40000c00
 8008b68:	40014000 	.word	0x40014000

08008b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e041      	b.n	8008c02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f839 	bl	8008c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f000 fb8a 	bl	80092c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d109      	bne.n	8008c44 <HAL_TIM_PWM_Start+0x24>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	bf14      	ite	ne
 8008c3c:	2301      	movne	r3, #1
 8008c3e:	2300      	moveq	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e022      	b.n	8008c8a <HAL_TIM_PWM_Start+0x6a>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d109      	bne.n	8008c5e <HAL_TIM_PWM_Start+0x3e>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	bf14      	ite	ne
 8008c56:	2301      	movne	r3, #1
 8008c58:	2300      	moveq	r3, #0
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	e015      	b.n	8008c8a <HAL_TIM_PWM_Start+0x6a>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d109      	bne.n	8008c78 <HAL_TIM_PWM_Start+0x58>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	bf14      	ite	ne
 8008c70:	2301      	movne	r3, #1
 8008c72:	2300      	moveq	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	e008      	b.n	8008c8a <HAL_TIM_PWM_Start+0x6a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	bf14      	ite	ne
 8008c84:	2301      	movne	r3, #1
 8008c86:	2300      	moveq	r3, #0
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e068      	b.n	8008d64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d104      	bne.n	8008ca2 <HAL_TIM_PWM_Start+0x82>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ca0:	e013      	b.n	8008cca <HAL_TIM_PWM_Start+0xaa>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	d104      	bne.n	8008cb2 <HAL_TIM_PWM_Start+0x92>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cb0:	e00b      	b.n	8008cca <HAL_TIM_PWM_Start+0xaa>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d104      	bne.n	8008cc2 <HAL_TIM_PWM_Start+0xa2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cc0:	e003      	b.n	8008cca <HAL_TIM_PWM_Start+0xaa>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fda2 	bl	800981c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a23      	ldr	r2, [pc, #140]	@ (8008d6c <HAL_TIM_PWM_Start+0x14c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d107      	bne.n	8008cf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8008d6c <HAL_TIM_PWM_Start+0x14c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d018      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x10e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d04:	d013      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x10e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a19      	ldr	r2, [pc, #100]	@ (8008d70 <HAL_TIM_PWM_Start+0x150>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00e      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x10e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <HAL_TIM_PWM_Start+0x154>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d009      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x10e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a16      	ldr	r2, [pc, #88]	@ (8008d78 <HAL_TIM_PWM_Start+0x158>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d004      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x10e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a14      	ldr	r2, [pc, #80]	@ (8008d7c <HAL_TIM_PWM_Start+0x15c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d111      	bne.n	8008d52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	d010      	beq.n	8008d62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0201 	orr.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d50:	e007      	b.n	8008d62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0201 	orr.w	r2, r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800
 8008d78:	40000c00 	.word	0x40000c00
 8008d7c:	40014000 	.word	0x40014000

08008d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d020      	beq.n	8008de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01b      	beq.n	8008de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f06f 0202 	mvn.w	r2, #2
 8008db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fa5b 	bl	8009286 <HAL_TIM_IC_CaptureCallback>
 8008dd0:	e005      	b.n	8008dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fa4d 	bl	8009272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fa5e 	bl	800929a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f003 0304 	and.w	r3, r3, #4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d020      	beq.n	8008e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01b      	beq.n	8008e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f06f 0204 	mvn.w	r2, #4
 8008e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa35 	bl	8009286 <HAL_TIM_IC_CaptureCallback>
 8008e1c:	e005      	b.n	8008e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa27 	bl	8009272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fa38 	bl	800929a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f003 0308 	and.w	r3, r3, #8
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d020      	beq.n	8008e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f003 0308 	and.w	r3, r3, #8
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01b      	beq.n	8008e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f06f 0208 	mvn.w	r2, #8
 8008e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2204      	movs	r2, #4
 8008e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa0f 	bl	8009286 <HAL_TIM_IC_CaptureCallback>
 8008e68:	e005      	b.n	8008e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa01 	bl	8009272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa12 	bl	800929a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 0310 	and.w	r3, r3, #16
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d020      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0210 	mvn.w	r2, #16
 8008e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f9e9 	bl	8009286 <HAL_TIM_IC_CaptureCallback>
 8008eb4:	e005      	b.n	8008ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f9db 	bl	8009272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f9ec 	bl	800929a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00c      	beq.n	8008eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0201 	mvn.w	r2, #1
 8008ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7f7 fe10 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d007      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fd24 	bl	8009958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00c      	beq.n	8008f34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d007      	beq.n	8008f34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f9bd 	bl	80092ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00c      	beq.n	8008f58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f06f 0220 	mvn.w	r2, #32
 8008f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fcf6 	bl	8009944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e0ae      	b.n	80090dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b0c      	cmp	r3, #12
 8008f8a:	f200 809f 	bhi.w	80090cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fc9 	.word	0x08008fc9
 8008f98:	080090cd 	.word	0x080090cd
 8008f9c:	080090cd 	.word	0x080090cd
 8008fa0:	080090cd 	.word	0x080090cd
 8008fa4:	08009009 	.word	0x08009009
 8008fa8:	080090cd 	.word	0x080090cd
 8008fac:	080090cd 	.word	0x080090cd
 8008fb0:	080090cd 	.word	0x080090cd
 8008fb4:	0800904b 	.word	0x0800904b
 8008fb8:	080090cd 	.word	0x080090cd
 8008fbc:	080090cd 	.word	0x080090cd
 8008fc0:	080090cd 	.word	0x080090cd
 8008fc4:	0800908b 	.word	0x0800908b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f9fe 	bl	80093d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0208 	orr.w	r2, r2, #8
 8008fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0204 	bic.w	r2, r2, #4
 8008ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6999      	ldr	r1, [r3, #24]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	619a      	str	r2, [r3, #24]
      break;
 8009006:	e064      	b.n	80090d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fa44 	bl	800949c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6999      	ldr	r1, [r3, #24]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	021a      	lsls	r2, r3, #8
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	619a      	str	r2, [r3, #24]
      break;
 8009048:	e043      	b.n	80090d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fa8f 	bl	8009574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0208 	orr.w	r2, r2, #8
 8009064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69da      	ldr	r2, [r3, #28]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 0204 	bic.w	r2, r2, #4
 8009074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	61da      	str	r2, [r3, #28]
      break;
 8009088:	e023      	b.n	80090d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fad9 	bl	8009648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69da      	ldr	r2, [r3, #28]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69da      	ldr	r2, [r3, #28]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69d9      	ldr	r1, [r3, #28]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	021a      	lsls	r2, r3, #8
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	61da      	str	r2, [r3, #28]
      break;
 80090ca:	e002      	b.n	80090d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]
      break;
 80090d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_TIM_ConfigClockSource+0x1c>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e0b4      	b.n	800926a <HAL_TIM_ConfigClockSource+0x186>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800911e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009138:	d03e      	beq.n	80091b8 <HAL_TIM_ConfigClockSource+0xd4>
 800913a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800913e:	f200 8087 	bhi.w	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009146:	f000 8086 	beq.w	8009256 <HAL_TIM_ConfigClockSource+0x172>
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800914e:	d87f      	bhi.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009150:	2b70      	cmp	r3, #112	@ 0x70
 8009152:	d01a      	beq.n	800918a <HAL_TIM_ConfigClockSource+0xa6>
 8009154:	2b70      	cmp	r3, #112	@ 0x70
 8009156:	d87b      	bhi.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009158:	2b60      	cmp	r3, #96	@ 0x60
 800915a:	d050      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x11a>
 800915c:	2b60      	cmp	r3, #96	@ 0x60
 800915e:	d877      	bhi.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009160:	2b50      	cmp	r3, #80	@ 0x50
 8009162:	d03c      	beq.n	80091de <HAL_TIM_ConfigClockSource+0xfa>
 8009164:	2b50      	cmp	r3, #80	@ 0x50
 8009166:	d873      	bhi.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009168:	2b40      	cmp	r3, #64	@ 0x40
 800916a:	d058      	beq.n	800921e <HAL_TIM_ConfigClockSource+0x13a>
 800916c:	2b40      	cmp	r3, #64	@ 0x40
 800916e:	d86f      	bhi.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009170:	2b30      	cmp	r3, #48	@ 0x30
 8009172:	d064      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x15a>
 8009174:	2b30      	cmp	r3, #48	@ 0x30
 8009176:	d86b      	bhi.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009178:	2b20      	cmp	r3, #32
 800917a:	d060      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x15a>
 800917c:	2b20      	cmp	r3, #32
 800917e:	d867      	bhi.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d05c      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x15a>
 8009184:	2b10      	cmp	r3, #16
 8009186:	d05a      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x15a>
 8009188:	e062      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800919a:	f000 fb1f 	bl	80097dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	609a      	str	r2, [r3, #8]
      break;
 80091b6:	e04f      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091c8:	f000 fb08 	bl	80097dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091da:	609a      	str	r2, [r3, #8]
      break;
 80091dc:	e03c      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ea:	461a      	mov	r2, r3
 80091ec:	f000 fa7c 	bl	80096e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2150      	movs	r1, #80	@ 0x50
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fad5 	bl	80097a6 <TIM_ITRx_SetConfig>
      break;
 80091fc:	e02c      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800920a:	461a      	mov	r2, r3
 800920c:	f000 fa9b 	bl	8009746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2160      	movs	r1, #96	@ 0x60
 8009216:	4618      	mov	r0, r3
 8009218:	f000 fac5 	bl	80097a6 <TIM_ITRx_SetConfig>
      break;
 800921c:	e01c      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800922a:	461a      	mov	r2, r3
 800922c:	f000 fa5c 	bl	80096e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2140      	movs	r1, #64	@ 0x40
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fab5 	bl	80097a6 <TIM_ITRx_SetConfig>
      break;
 800923c:	e00c      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f000 faac 	bl	80097a6 <TIM_ITRx_SetConfig>
      break;
 800924e:	e003      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	73fb      	strb	r3, [r7, #15]
      break;
 8009254:	e000      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800928e:	bf00      	nop
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
	...

080092c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a37      	ldr	r2, [pc, #220]	@ (80093b4 <TIM_Base_SetConfig+0xf0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00f      	beq.n	80092fc <TIM_Base_SetConfig+0x38>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e2:	d00b      	beq.n	80092fc <TIM_Base_SetConfig+0x38>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a34      	ldr	r2, [pc, #208]	@ (80093b8 <TIM_Base_SetConfig+0xf4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d007      	beq.n	80092fc <TIM_Base_SetConfig+0x38>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a33      	ldr	r2, [pc, #204]	@ (80093bc <TIM_Base_SetConfig+0xf8>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <TIM_Base_SetConfig+0x38>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a32      	ldr	r2, [pc, #200]	@ (80093c0 <TIM_Base_SetConfig+0xfc>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d108      	bne.n	800930e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a28      	ldr	r2, [pc, #160]	@ (80093b4 <TIM_Base_SetConfig+0xf0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d01b      	beq.n	800934e <TIM_Base_SetConfig+0x8a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800931c:	d017      	beq.n	800934e <TIM_Base_SetConfig+0x8a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a25      	ldr	r2, [pc, #148]	@ (80093b8 <TIM_Base_SetConfig+0xf4>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d013      	beq.n	800934e <TIM_Base_SetConfig+0x8a>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a24      	ldr	r2, [pc, #144]	@ (80093bc <TIM_Base_SetConfig+0xf8>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00f      	beq.n	800934e <TIM_Base_SetConfig+0x8a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a23      	ldr	r2, [pc, #140]	@ (80093c0 <TIM_Base_SetConfig+0xfc>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d00b      	beq.n	800934e <TIM_Base_SetConfig+0x8a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a22      	ldr	r2, [pc, #136]	@ (80093c4 <TIM_Base_SetConfig+0x100>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d007      	beq.n	800934e <TIM_Base_SetConfig+0x8a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a21      	ldr	r2, [pc, #132]	@ (80093c8 <TIM_Base_SetConfig+0x104>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d003      	beq.n	800934e <TIM_Base_SetConfig+0x8a>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a20      	ldr	r2, [pc, #128]	@ (80093cc <TIM_Base_SetConfig+0x108>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d108      	bne.n	8009360 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4313      	orrs	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a0c      	ldr	r2, [pc, #48]	@ (80093b4 <TIM_Base_SetConfig+0xf0>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d103      	bne.n	800938e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f043 0204 	orr.w	r2, r3, #4
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	601a      	str	r2, [r3, #0]
}
 80093a6:	bf00      	nop
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	40010000 	.word	0x40010000
 80093b8:	40000400 	.word	0x40000400
 80093bc:	40000800 	.word	0x40000800
 80093c0:	40000c00 	.word	0x40000c00
 80093c4:	40014000 	.word	0x40014000
 80093c8:	40014400 	.word	0x40014400
 80093cc:	40014800 	.word	0x40014800

080093d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	f023 0201 	bic.w	r2, r3, #1
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0303 	bic.w	r3, r3, #3
 8009406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f023 0302 	bic.w	r3, r3, #2
 8009418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a1c      	ldr	r2, [pc, #112]	@ (8009498 <TIM_OC1_SetConfig+0xc8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d10c      	bne.n	8009446 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f023 0308 	bic.w	r3, r3, #8
 8009432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	4313      	orrs	r3, r2
 800943c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f023 0304 	bic.w	r3, r3, #4
 8009444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a13      	ldr	r2, [pc, #76]	@ (8009498 <TIM_OC1_SetConfig+0xc8>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d111      	bne.n	8009472 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800945c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	4313      	orrs	r3, r2
 8009466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4313      	orrs	r3, r2
 8009470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	621a      	str	r2, [r3, #32]
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	40010000 	.word	0x40010000

0800949c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f023 0210 	bic.w	r2, r3, #16
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	021b      	lsls	r3, r3, #8
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f023 0320 	bic.w	r3, r3, #32
 80094e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009570 <TIM_OC2_SetConfig+0xd4>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d10d      	bne.n	8009518 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	4313      	orrs	r3, r2
 800950e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009516:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a15      	ldr	r2, [pc, #84]	@ (8009570 <TIM_OC2_SetConfig+0xd4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d113      	bne.n	8009548 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800952e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	4313      	orrs	r3, r2
 8009546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	621a      	str	r2, [r3, #32]
}
 8009562:	bf00      	nop
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	40010000 	.word	0x40010000

08009574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009644 <TIM_OC3_SetConfig+0xd0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d10d      	bne.n	80095ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a14      	ldr	r2, [pc, #80]	@ (8009644 <TIM_OC3_SetConfig+0xd0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d113      	bne.n	800961e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	4313      	orrs	r3, r2
 800961c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	621a      	str	r2, [r3, #32]
}
 8009638:	bf00      	nop
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	40010000 	.word	0x40010000

08009648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800967e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	021b      	lsls	r3, r3, #8
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	4313      	orrs	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	031b      	lsls	r3, r3, #12
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	4313      	orrs	r3, r2
 800969e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a10      	ldr	r2, [pc, #64]	@ (80096e4 <TIM_OC4_SetConfig+0x9c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d109      	bne.n	80096bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	019b      	lsls	r3, r3, #6
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	621a      	str	r2, [r3, #32]
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	40010000 	.word	0x40010000

080096e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	f023 0201 	bic.w	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f023 030a 	bic.w	r3, r3, #10
 8009724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4313      	orrs	r3, r2
 800972c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	621a      	str	r2, [r3, #32]
}
 800973a:	bf00      	nop
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009746:	b480      	push	{r7}
 8009748:	b087      	sub	sp, #28
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	f023 0210 	bic.w	r2, r3, #16
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	031b      	lsls	r3, r3, #12
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	011b      	lsls	r3, r3, #4
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	621a      	str	r2, [r3, #32]
}
 800979a:	bf00      	nop
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	f043 0307 	orr.w	r3, r3, #7
 80097c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	609a      	str	r2, [r3, #8]
}
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	021a      	lsls	r2, r3, #8
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	431a      	orrs	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4313      	orrs	r3, r2
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	609a      	str	r2, [r3, #8]
}
 8009810:	bf00      	nop
 8009812:	371c      	adds	r7, #28
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f003 031f 	and.w	r3, r3, #31
 800982e:	2201      	movs	r2, #1
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a1a      	ldr	r2, [r3, #32]
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	43db      	mvns	r3, r3
 800983e:	401a      	ands	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a1a      	ldr	r2, [r3, #32]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f003 031f 	and.w	r3, r3, #31
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	fa01 f303 	lsl.w	r3, r1, r3
 8009854:	431a      	orrs	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
	...

08009868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800987c:	2302      	movs	r3, #2
 800987e:	e050      	b.n	8009922 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a1c      	ldr	r2, [pc, #112]	@ (8009930 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d018      	beq.n	80098f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098cc:	d013      	beq.n	80098f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a18      	ldr	r2, [pc, #96]	@ (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00e      	beq.n	80098f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a16      	ldr	r2, [pc, #88]	@ (8009938 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d009      	beq.n	80098f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a15      	ldr	r2, [pc, #84]	@ (800993c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d004      	beq.n	80098f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a13      	ldr	r2, [pc, #76]	@ (8009940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d10c      	bne.n	8009910 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	4313      	orrs	r3, r2
 8009906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40010000 	.word	0x40010000
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	40014000 	.word	0x40014000

08009944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800996c:	b084      	sub	sp, #16
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	f107 001c 	add.w	r0, r7, #28
 800997a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800997e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009982:	2b01      	cmp	r3, #1
 8009984:	d123      	bne.n	80099ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800998a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800999a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d105      	bne.n	80099c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 fae8 	bl	800af98 <USB_CoreReset>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]
 80099cc:	e01b      	b.n	8009a06 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f001 fadc 	bl	800af98 <USB_CoreReset>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80099f8:	e005      	b.n	8009a06 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a06:	7fbb      	ldrb	r3, [r7, #30]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d10b      	bne.n	8009a24 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f043 0206 	orr.w	r2, r3, #6
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f043 0220 	orr.w	r2, r3, #32
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a30:	b004      	add	sp, #16
 8009a32:	4770      	bx	lr

08009a34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d165      	bne.n	8009b14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	4a41      	ldr	r2, [pc, #260]	@ (8009b50 <USB_SetTurnaroundTime+0x11c>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d906      	bls.n	8009a5e <USB_SetTurnaroundTime+0x2a>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	4a40      	ldr	r2, [pc, #256]	@ (8009b54 <USB_SetTurnaroundTime+0x120>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d202      	bcs.n	8009a5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a58:	230f      	movs	r3, #15
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e062      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4a3c      	ldr	r2, [pc, #240]	@ (8009b54 <USB_SetTurnaroundTime+0x120>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d306      	bcc.n	8009a74 <USB_SetTurnaroundTime+0x40>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	4a3b      	ldr	r2, [pc, #236]	@ (8009b58 <USB_SetTurnaroundTime+0x124>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d202      	bcs.n	8009a74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a6e:	230e      	movs	r3, #14
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	e057      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	4a38      	ldr	r2, [pc, #224]	@ (8009b58 <USB_SetTurnaroundTime+0x124>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d306      	bcc.n	8009a8a <USB_SetTurnaroundTime+0x56>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	4a37      	ldr	r2, [pc, #220]	@ (8009b5c <USB_SetTurnaroundTime+0x128>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d202      	bcs.n	8009a8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a84:	230d      	movs	r3, #13
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e04c      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	4a33      	ldr	r2, [pc, #204]	@ (8009b5c <USB_SetTurnaroundTime+0x128>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d306      	bcc.n	8009aa0 <USB_SetTurnaroundTime+0x6c>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	4a32      	ldr	r2, [pc, #200]	@ (8009b60 <USB_SetTurnaroundTime+0x12c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d802      	bhi.n	8009aa0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	e041      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8009b60 <USB_SetTurnaroundTime+0x12c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d906      	bls.n	8009ab6 <USB_SetTurnaroundTime+0x82>
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8009b64 <USB_SetTurnaroundTime+0x130>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d802      	bhi.n	8009ab6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ab0:	230b      	movs	r3, #11
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e036      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8009b64 <USB_SetTurnaroundTime+0x130>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d906      	bls.n	8009acc <USB_SetTurnaroundTime+0x98>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4a29      	ldr	r2, [pc, #164]	@ (8009b68 <USB_SetTurnaroundTime+0x134>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d802      	bhi.n	8009acc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ac6:	230a      	movs	r3, #10
 8009ac8:	617b      	str	r3, [r7, #20]
 8009aca:	e02b      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4a26      	ldr	r2, [pc, #152]	@ (8009b68 <USB_SetTurnaroundTime+0x134>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d906      	bls.n	8009ae2 <USB_SetTurnaroundTime+0xae>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	4a25      	ldr	r2, [pc, #148]	@ (8009b6c <USB_SetTurnaroundTime+0x138>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d202      	bcs.n	8009ae2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009adc:	2309      	movs	r3, #9
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e020      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4a21      	ldr	r2, [pc, #132]	@ (8009b6c <USB_SetTurnaroundTime+0x138>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d306      	bcc.n	8009af8 <USB_SetTurnaroundTime+0xc4>
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	4a20      	ldr	r2, [pc, #128]	@ (8009b70 <USB_SetTurnaroundTime+0x13c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d802      	bhi.n	8009af8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009af2:	2308      	movs	r3, #8
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e015      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4a1d      	ldr	r2, [pc, #116]	@ (8009b70 <USB_SetTurnaroundTime+0x13c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d906      	bls.n	8009b0e <USB_SetTurnaroundTime+0xda>
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	4a1c      	ldr	r2, [pc, #112]	@ (8009b74 <USB_SetTurnaroundTime+0x140>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d202      	bcs.n	8009b0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b08:	2307      	movs	r3, #7
 8009b0a:	617b      	str	r3, [r7, #20]
 8009b0c:	e00a      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b0e:	2306      	movs	r3, #6
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e007      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d102      	bne.n	8009b20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b1a:	2309      	movs	r3, #9
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	e001      	b.n	8009b24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b20:	2309      	movs	r3, #9
 8009b22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	029b      	lsls	r3, r3, #10
 8009b38:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	00d8acbf 	.word	0x00d8acbf
 8009b54:	00e4e1c0 	.word	0x00e4e1c0
 8009b58:	00f42400 	.word	0x00f42400
 8009b5c:	01067380 	.word	0x01067380
 8009b60:	011a499f 	.word	0x011a499f
 8009b64:	01312cff 	.word	0x01312cff
 8009b68:	014ca43f 	.word	0x014ca43f
 8009b6c:	016e3600 	.word	0x016e3600
 8009b70:	01a6ab1f 	.word	0x01a6ab1f
 8009b74:	01e84800 	.word	0x01e84800

08009b78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f043 0201 	orr.w	r2, r3, #1
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f023 0201 	bic.w	r2, r3, #1
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d115      	bne.n	8009c0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bea:	200a      	movs	r0, #10
 8009bec:	f7f8 fb94 	bl	8002318 <HAL_Delay>
      ms += 10U;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	330a      	adds	r3, #10
 8009bf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 f93f 	bl	800ae7a <USB_GetMode>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d01e      	beq.n	8009c40 <USB_SetCurrentMode+0x84>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c06:	d9f0      	bls.n	8009bea <USB_SetCurrentMode+0x2e>
 8009c08:	e01a      	b.n	8009c40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d115      	bne.n	8009c3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c1c:	200a      	movs	r0, #10
 8009c1e:	f7f8 fb7b 	bl	8002318 <HAL_Delay>
      ms += 10U;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	330a      	adds	r3, #10
 8009c26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 f926 	bl	800ae7a <USB_GetMode>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d005      	beq.n	8009c40 <USB_SetCurrentMode+0x84>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c38:	d9f0      	bls.n	8009c1c <USB_SetCurrentMode+0x60>
 8009c3a:	e001      	b.n	8009c40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e005      	b.n	8009c4c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2bc8      	cmp	r3, #200	@ 0xc8
 8009c44:	d101      	bne.n	8009c4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e000      	b.n	8009c4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c54:	b084      	sub	sp, #16
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c6e:	2300      	movs	r3, #0
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	e009      	b.n	8009c88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	3340      	adds	r3, #64	@ 0x40
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	3301      	adds	r3, #1
 8009c86:	613b      	str	r3, [r7, #16]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	2b0e      	cmp	r3, #14
 8009c8c:	d9f2      	bls.n	8009c74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d11c      	bne.n	8009cd0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ca4:	f043 0302 	orr.w	r3, r3, #2
 8009ca8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cce:	e00b      	b.n	8009ce8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cee:	461a      	mov	r2, r3
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cf4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d10d      	bne.n	8009d18 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d104      	bne.n	8009d0e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d04:	2100      	movs	r1, #0
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f968 	bl	8009fdc <USB_SetDevSpeed>
 8009d0c:	e008      	b.n	8009d20 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d0e:	2101      	movs	r1, #1
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f963 	bl	8009fdc <USB_SetDevSpeed>
 8009d16:	e003      	b.n	8009d20 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d18:	2103      	movs	r1, #3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f95e 	bl	8009fdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d20:	2110      	movs	r1, #16
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f8fa 	bl	8009f1c <USB_FlushTxFifo>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f924 	bl	8009f80 <USB_FlushRxFifo>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d48:	461a      	mov	r2, r3
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d54:	461a      	mov	r2, r3
 8009d56:	2300      	movs	r3, #0
 8009d58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d60:	461a      	mov	r2, r3
 8009d62:	2300      	movs	r3, #0
 8009d64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	613b      	str	r3, [r7, #16]
 8009d6a:	e043      	b.n	8009df4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d82:	d118      	bne.n	8009db6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d96:	461a      	mov	r2, r3
 8009d98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	e013      	b.n	8009dc8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dac:	461a      	mov	r2, r3
 8009dae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	e008      	b.n	8009dc8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	015a      	lsls	r2, r3, #5
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de6:	461a      	mov	r2, r3
 8009de8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009dec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	3301      	adds	r3, #1
 8009df2:	613b      	str	r3, [r7, #16]
 8009df4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009df8:	461a      	mov	r2, r3
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d3b5      	bcc.n	8009d6c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e00:	2300      	movs	r3, #0
 8009e02:	613b      	str	r3, [r7, #16]
 8009e04:	e043      	b.n	8009e8e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e1c:	d118      	bne.n	8009e50 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e30:	461a      	mov	r2, r3
 8009e32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	e013      	b.n	8009e62 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e46:	461a      	mov	r2, r3
 8009e48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	e008      	b.n	8009e62 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	2300      	movs	r3, #0
 8009e60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	015a      	lsls	r2, r3, #5
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	4413      	add	r3, r2
 8009e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e6e:	461a      	mov	r2, r3
 8009e70:	2300      	movs	r3, #0
 8009e72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e80:	461a      	mov	r2, r3
 8009e82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	613b      	str	r3, [r7, #16]
 8009e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e92:	461a      	mov	r2, r3
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d3b5      	bcc.n	8009e06 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009eba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d105      	bne.n	8009ed0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	f043 0210 	orr.w	r2, r3, #16
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	699a      	ldr	r2, [r3, #24]
 8009ed4:	4b10      	ldr	r3, [pc, #64]	@ (8009f18 <USB_DevInit+0x2c4>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009edc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d005      	beq.n	8009ef0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	f043 0208 	orr.w	r2, r3, #8
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ef0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d107      	bne.n	8009f08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f00:	f043 0304 	orr.w	r3, r3, #4
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f14:	b004      	add	sp, #16
 8009f16:	4770      	bx	lr
 8009f18:	803c3800 	.word	0x803c3800

08009f1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f36:	d901      	bls.n	8009f3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e01b      	b.n	8009f74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	daf2      	bge.n	8009f2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	019b      	lsls	r3, r3, #6
 8009f4c:	f043 0220 	orr.w	r2, r3, #32
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f60:	d901      	bls.n	8009f66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e006      	b.n	8009f74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	d0f0      	beq.n	8009f54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f98:	d901      	bls.n	8009f9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e018      	b.n	8009fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	daf2      	bge.n	8009f8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2210      	movs	r2, #16
 8009fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009fbc:	d901      	bls.n	8009fc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e006      	b.n	8009fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f003 0310 	and.w	r3, r3, #16
 8009fca:	2b10      	cmp	r3, #16
 8009fcc:	d0f0      	beq.n	8009fb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	68f9      	ldr	r1, [r7, #12]
 8009ff8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a00e:	b480      	push	{r7}
 800a010:	b087      	sub	sp, #28
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f003 0306 	and.w	r3, r3, #6
 800a026:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d102      	bne.n	800a034 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a02e:	2300      	movs	r3, #0
 800a030:	75fb      	strb	r3, [r7, #23]
 800a032:	e00a      	b.n	800a04a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d002      	beq.n	800a040 <USB_GetDevSpeed+0x32>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b06      	cmp	r3, #6
 800a03e:	d102      	bne.n	800a046 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a040:	2302      	movs	r3, #2
 800a042:	75fb      	strb	r3, [r7, #23]
 800a044:	e001      	b.n	800a04a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a046:	230f      	movs	r3, #15
 800a048:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d13a      	bne.n	800a0ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	2101      	movs	r1, #1
 800a086:	fa01 f303 	lsl.w	r3, r1, r3
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a092:	4313      	orrs	r3, r2
 800a094:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d155      	bne.n	800a158 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	791b      	ldrb	r3, [r3, #4]
 800a0c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	059b      	lsls	r3, r3, #22
 800a0ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	0151      	lsls	r1, r2, #5
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	440a      	add	r2, r1
 800a0da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	e036      	b.n	800a158 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f0:	69da      	ldr	r2, [r3, #28]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	f003 030f 	and.w	r3, r3, #15
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a100:	041b      	lsls	r3, r3, #16
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a108:	4313      	orrs	r3, r2
 800a10a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d11a      	bne.n	800a158 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	791b      	ldrb	r3, [r3, #4]
 800a13c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a13e:	430b      	orrs	r3, r1
 800a140:	4313      	orrs	r3, r2
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	0151      	lsls	r1, r2, #5
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	440a      	add	r2, r1
 800a14a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a14e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a156:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d161      	bne.n	800a248 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a19a:	d11f      	bne.n	800a1dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	015a      	lsls	r2, r3, #5
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	0151      	lsls	r1, r2, #5
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	440a      	add	r2, r1
 800a1b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 030f 	and.w	r3, r3, #15
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	43db      	mvns	r3, r3
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a206:	69da      	ldr	r2, [r3, #28]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	f003 030f 	and.w	r3, r3, #15
 800a210:	2101      	movs	r1, #1
 800a212:	fa01 f303 	lsl.w	r3, r1, r3
 800a216:	b29b      	uxth	r3, r3
 800a218:	43db      	mvns	r3, r3
 800a21a:	68f9      	ldr	r1, [r7, #12]
 800a21c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a220:	4013      	ands	r3, r2
 800a222:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	0159      	lsls	r1, r3, #5
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	440b      	add	r3, r1
 800a23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23e:	4619      	mov	r1, r3
 800a240:	4b35      	ldr	r3, [pc, #212]	@ (800a318 <USB_DeactivateEndpoint+0x1b0>)
 800a242:	4013      	ands	r3, r2
 800a244:	600b      	str	r3, [r1, #0]
 800a246:	e060      	b.n	800a30a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a25a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a25e:	d11f      	bne.n	800a2a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	0151      	lsls	r1, r2, #5
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	440a      	add	r2, r1
 800a276:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a27a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a27e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	0151      	lsls	r1, r2, #5
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	440a      	add	r2, r1
 800a296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a29a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a29e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	f003 030f 	and.w	r3, r3, #15
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b6:	041b      	lsls	r3, r3, #16
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	68f9      	ldr	r1, [r7, #12]
 800a2bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ca:	69da      	ldr	r2, [r3, #28]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	f003 030f 	and.w	r3, r3, #15
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2da:	041b      	lsls	r3, r3, #16
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	0159      	lsls	r1, r3, #5
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	440b      	add	r3, r1
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a302:	4619      	mov	r1, r3
 800a304:	4b05      	ldr	r3, [pc, #20]	@ (800a31c <USB_DeactivateEndpoint+0x1b4>)
 800a306:	4013      	ands	r3, r2
 800a308:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	ec337800 	.word	0xec337800
 800a31c:	eff37800 	.word	0xeff37800

0800a320 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08a      	sub	sp, #40	@ 0x28
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	4613      	mov	r3, r2
 800a32c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	f040 817f 	bne.w	800a640 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d132      	bne.n	800a3b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	0151      	lsls	r1, r2, #5
 800a35c:	69fa      	ldr	r2, [r7, #28]
 800a35e:	440a      	add	r2, r1
 800a360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a364:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a368:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a36c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	0151      	lsls	r1, r2, #5
 800a380:	69fa      	ldr	r2, [r7, #28]
 800a382:	440a      	add	r2, r1
 800a384:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a388:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a38c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	0151      	lsls	r1, r2, #5
 800a3a0:	69fa      	ldr	r2, [r7, #28]
 800a3a2:	440a      	add	r2, r1
 800a3a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3a8:	0cdb      	lsrs	r3, r3, #19
 800a3aa:	04db      	lsls	r3, r3, #19
 800a3ac:	6113      	str	r3, [r2, #16]
 800a3ae:	e097      	b.n	800a4e0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	0151      	lsls	r1, r2, #5
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	440a      	add	r2, r1
 800a3c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ca:	0cdb      	lsrs	r3, r3, #19
 800a3cc:	04db      	lsls	r3, r3, #19
 800a3ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	69fa      	ldr	r2, [r7, #28]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d11a      	bne.n	800a430 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	691a      	ldr	r2, [r3, #16]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	429a      	cmp	r2, r3
 800a404:	d903      	bls.n	800a40e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a428:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a42c:	6113      	str	r3, [r2, #16]
 800a42e:	e044      	b.n	800a4ba <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	691a      	ldr	r2, [r3, #16]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	1e5a      	subs	r2, r3, #1
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a452:	691a      	ldr	r2, [r3, #16]
 800a454:	8afb      	ldrh	r3, [r7, #22]
 800a456:	04d9      	lsls	r1, r3, #19
 800a458:	4ba4      	ldr	r3, [pc, #656]	@ (800a6ec <USB_EPStartXfer+0x3cc>)
 800a45a:	400b      	ands	r3, r1
 800a45c:	69b9      	ldr	r1, [r7, #24]
 800a45e:	0148      	lsls	r0, r1, #5
 800a460:	69f9      	ldr	r1, [r7, #28]
 800a462:	4401      	add	r1, r0
 800a464:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a468:	4313      	orrs	r3, r2
 800a46a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	791b      	ldrb	r3, [r3, #4]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d122      	bne.n	800a4ba <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a48e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a492:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a0:	691a      	ldr	r2, [r3, #16]
 800a4a2:	8afb      	ldrh	r3, [r7, #22]
 800a4a4:	075b      	lsls	r3, r3, #29
 800a4a6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a4aa:	69b9      	ldr	r1, [r7, #24]
 800a4ac:	0148      	lsls	r0, r1, #5
 800a4ae:	69f9      	ldr	r1, [r7, #28]
 800a4b0:	4401      	add	r1, r0
 800a4b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c6:	691a      	ldr	r2, [r3, #16]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4d0:	69b9      	ldr	r1, [r7, #24]
 800a4d2:	0148      	lsls	r0, r1, #5
 800a4d4:	69f9      	ldr	r1, [r7, #28]
 800a4d6:	4401      	add	r1, r0
 800a4d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d14b      	bne.n	800a57e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d009      	beq.n	800a502 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	69db      	ldr	r3, [r3, #28]
 800a500:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	791b      	ldrb	r3, [r3, #4]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d128      	bne.n	800a55c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a516:	2b00      	cmp	r3, #0
 800a518:	d110      	bne.n	800a53c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	69ba      	ldr	r2, [r7, #24]
 800a52a:	0151      	lsls	r1, r2, #5
 800a52c:	69fa      	ldr	r2, [r7, #28]
 800a52e:	440a      	add	r2, r1
 800a530:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a534:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	e00f      	b.n	800a55c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	0151      	lsls	r1, r2, #5
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	440a      	add	r2, r1
 800a552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a55a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	0151      	lsls	r1, r2, #5
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	440a      	add	r2, r1
 800a572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a576:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	e166      	b.n	800a84c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	0151      	lsls	r1, r2, #5
 800a590:	69fa      	ldr	r2, [r7, #28]
 800a592:	440a      	add	r2, r1
 800a594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a598:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a59c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	791b      	ldrb	r3, [r3, #4]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d015      	beq.n	800a5d2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 814e 	beq.w	800a84c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	f003 030f 	and.w	r3, r3, #15
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c6:	69f9      	ldr	r1, [r7, #28]
 800a5c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5d0:	e13c      	b.n	800a84c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d110      	bne.n	800a604 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	0151      	lsls	r1, r2, #5
 800a5f4:	69fa      	ldr	r2, [r7, #28]
 800a5f6:	440a      	add	r2, r1
 800a5f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	e00f      	b.n	800a624 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	0151      	lsls	r1, r2, #5
 800a616:	69fa      	ldr	r2, [r7, #28]
 800a618:	440a      	add	r2, r1
 800a61a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a61e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a622:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	68d9      	ldr	r1, [r3, #12]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	781a      	ldrb	r2, [r3, #0]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	b298      	uxth	r0, r3
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	4603      	mov	r3, r0
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 f9b9 	bl	800a9b0 <USB_WritePacket>
 800a63e:	e105      	b.n	800a84c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	69fa      	ldr	r2, [r7, #28]
 800a654:	440a      	add	r2, r1
 800a656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a65a:	0cdb      	lsrs	r3, r3, #19
 800a65c:	04db      	lsls	r3, r3, #19
 800a65e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	440a      	add	r2, r1
 800a676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a67a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a67e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a682:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d132      	bne.n	800a6f0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	689a      	ldr	r2, [r3, #8]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ae:	691a      	ldr	r2, [r3, #16]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	0148      	lsls	r0, r1, #5
 800a6bc:	69f9      	ldr	r1, [r7, #28]
 800a6be:	4401      	add	r1, r0
 800a6c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	0151      	lsls	r1, r2, #5
 800a6da:	69fa      	ldr	r2, [r7, #28]
 800a6dc:	440a      	add	r2, r1
 800a6de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6e6:	6113      	str	r3, [r2, #16]
 800a6e8:	e062      	b.n	800a7b0 <USB_EPStartXfer+0x490>
 800a6ea:	bf00      	nop
 800a6ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d123      	bne.n	800a740 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a704:	691a      	ldr	r2, [r3, #16]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	0148      	lsls	r0, r1, #5
 800a712:	69f9      	ldr	r1, [r7, #28]
 800a714:	4401      	add	r1, r0
 800a716:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a71a:	4313      	orrs	r3, r2
 800a71c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	0151      	lsls	r1, r2, #5
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	440a      	add	r2, r1
 800a734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a738:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a73c:	6113      	str	r3, [r2, #16]
 800a73e:	e037      	b.n	800a7b0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	4413      	add	r3, r2
 800a74a:	1e5a      	subs	r2, r3, #1
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	fbb2 f3f3 	udiv	r3, r2, r3
 800a754:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	8afa      	ldrh	r2, [r7, #22]
 800a75c:	fb03 f202 	mul.w	r2, r3, r2
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a770:	691a      	ldr	r2, [r3, #16]
 800a772:	8afb      	ldrh	r3, [r7, #22]
 800a774:	04d9      	lsls	r1, r3, #19
 800a776:	4b38      	ldr	r3, [pc, #224]	@ (800a858 <USB_EPStartXfer+0x538>)
 800a778:	400b      	ands	r3, r1
 800a77a:	69b9      	ldr	r1, [r7, #24]
 800a77c:	0148      	lsls	r0, r1, #5
 800a77e:	69f9      	ldr	r1, [r7, #28]
 800a780:	4401      	add	r1, r0
 800a782:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a786:	4313      	orrs	r3, r2
 800a788:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7a0:	69b9      	ldr	r1, [r7, #24]
 800a7a2:	0148      	lsls	r0, r1, #5
 800a7a4:	69f9      	ldr	r1, [r7, #28]
 800a7a6:	4401      	add	r1, r0
 800a7a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10d      	bne.n	800a7d2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	68d9      	ldr	r1, [r3, #12]
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ce:	460a      	mov	r2, r1
 800a7d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	791b      	ldrb	r3, [r3, #4]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d128      	bne.n	800a82c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d110      	bne.n	800a80c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	69fa      	ldr	r2, [r7, #28]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a804:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	e00f      	b.n	800a82c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	0151      	lsls	r1, r2, #5
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	440a      	add	r2, r1
 800a822:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a82a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	0151      	lsls	r1, r2, #5
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	440a      	add	r2, r1
 800a842:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a846:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a84a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	1ff80000 	.word	0x1ff80000

0800a85c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	785b      	ldrb	r3, [r3, #1]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d14a      	bne.n	800a910 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a88e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a892:	f040 8086 	bne.w	800a9a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	7812      	ldrb	r2, [r2, #0]
 800a8ce:	0151      	lsls	r1, r2, #5
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	440a      	add	r2, r1
 800a8d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d902      	bls.n	800a8f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8f2:	e056      	b.n	800a9a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a90c:	d0e7      	beq.n	800a8de <USB_EPStopXfer+0x82>
 800a90e:	e048      	b.n	800a9a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a928:	d13b      	bne.n	800a9a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	0151      	lsls	r1, r2, #5
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	440a      	add	r2, r1
 800a944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a948:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a94c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	7812      	ldrb	r2, [r2, #0]
 800a962:	0151      	lsls	r1, r2, #5
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	440a      	add	r2, r1
 800a968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a96c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a970:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a97e:	4293      	cmp	r3, r2
 800a980:	d902      	bls.n	800a988 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	75fb      	strb	r3, [r7, #23]
          break;
 800a986:	e00c      	b.n	800a9a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a99c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9a0:	d0e7      	beq.n	800a972 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b089      	sub	sp, #36	@ 0x24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	461a      	mov	r2, r3
 800a9be:	460b      	mov	r3, r1
 800a9c0:	71fb      	strb	r3, [r7, #7]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d123      	bne.n	800aa1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9d6:	88bb      	ldrh	r3, [r7, #4]
 800a9d8:	3303      	adds	r3, #3
 800a9da:	089b      	lsrs	r3, r3, #2
 800a9dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	e018      	b.n	800aa16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	031a      	lsls	r2, r3, #12
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	3301      	adds	r3, #1
 800aa02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	3301      	adds	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	3301      	adds	r3, #1
 800aa14:	61bb      	str	r3, [r7, #24]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d3e2      	bcc.n	800a9e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3724      	adds	r7, #36	@ 0x24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b08b      	sub	sp, #44	@ 0x2c
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	4613      	mov	r3, r2
 800aa38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	089b      	lsrs	r3, r3, #2
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	623b      	str	r3, [r7, #32]
 800aa56:	e014      	b.n	800aa82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa62:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	3301      	adds	r3, #1
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	3301      	adds	r3, #1
 800aa74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	3301      	adds	r3, #1
 800aa7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	623b      	str	r3, [r7, #32]
 800aa82:	6a3a      	ldr	r2, [r7, #32]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d3e6      	bcc.n	800aa58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa8a:	8bfb      	ldrh	r3, [r7, #30]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01e      	beq.n	800aace <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f107 0310 	add.w	r3, r7, #16
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	701a      	strb	r2, [r3, #0]
      i++;
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	3301      	adds	r3, #1
 800aaba:	623b      	str	r3, [r7, #32]
      pDest++;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabe:	3301      	adds	r3, #1
 800aac0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aac2:	8bfb      	ldrh	r3, [r7, #30]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aac8:	8bfb      	ldrh	r3, [r7, #30]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1ea      	bne.n	800aaa4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	372c      	adds	r7, #44	@ 0x2c
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d12c      	bne.n	800ab52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	015a      	lsls	r2, r3, #5
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	db12      	blt.n	800ab30 <USB_EPSetStall+0x54>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00f      	beq.n	800ab30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	0151      	lsls	r1, r2, #5
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	440a      	add	r2, r1
 800ab46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	e02b      	b.n	800abaa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	db12      	blt.n	800ab8a <USB_EPSetStall+0xae>
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00f      	beq.n	800ab8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	0151      	lsls	r1, r2, #5
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	440a      	add	r2, r1
 800ab80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	0151      	lsls	r1, r2, #5
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	440a      	add	r2, r1
 800aba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	785b      	ldrb	r3, [r3, #1]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d128      	bne.n	800ac26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	791b      	ldrb	r3, [r3, #4]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d003      	beq.n	800ac04 <USB_EPClearStall+0x4c>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d138      	bne.n	800ac76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	e027      	b.n	800ac76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	791b      	ldrb	r3, [r3, #4]
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d003      	beq.n	800ac56 <USB_EPClearStall+0x9e>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d10f      	bne.n	800ac76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aca2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aca6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acbe:	4313      	orrs	r3, r2
 800acc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acea:	f023 0303 	bic.w	r3, r3, #3
 800acee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acfe:	f023 0302 	bic.w	r3, r3, #2
 800ad02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad40:	f043 0302 	orr.w	r3, r3, #2
 800ad44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	0c1b      	lsrs	r3, r3, #16
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	4013      	ands	r3, r2
 800add0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	b29b      	uxth	r3, r3
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae10:	68bb      	ldr	r3, [r7, #8]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b087      	sub	sp, #28
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae42:	78fb      	ldrb	r3, [r7, #3]
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4e:	01db      	lsls	r3, r3, #7
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	4013      	ands	r3, r2
 800ae6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f003 0301 	and.w	r3, r3, #1
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b085      	sub	sp, #20
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeb0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aeb4:	f023 0307 	bic.w	r3, r3, #7
 800aeb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	460b      	mov	r3, r1
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	333c      	adds	r3, #60	@ 0x3c
 800aef2:	3304      	adds	r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	4a26      	ldr	r2, [pc, #152]	@ (800af94 <USB_EP0_OutStart+0xb8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d90a      	bls.n	800af16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af10:	d101      	bne.n	800af16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	e037      	b.n	800af86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af1c:	461a      	mov	r2, r3
 800af1e:	2300      	movs	r3, #0
 800af20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af44:	f043 0318 	orr.w	r3, r3, #24
 800af48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af58:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af5e:	7afb      	ldrb	r3, [r7, #11]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d10f      	bne.n	800af84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6a:	461a      	mov	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af7e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	4f54300a 	.word	0x4f54300a

0800af98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afb0:	d901      	bls.n	800afb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e022      	b.n	800affc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	daf2      	bge.n	800afa4 <USB_CoreReset+0xc>

  count = 10U;
 800afbe:	230a      	movs	r3, #10
 800afc0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800afc2:	e002      	b.n	800afca <USB_CoreReset+0x32>
  {
    count--;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1f9      	bne.n	800afc4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	f043 0201 	orr.w	r2, r3, #1
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	3301      	adds	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afe8:	d901      	bls.n	800afee <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e006      	b.n	800affc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d0f0      	beq.n	800afdc <USB_CoreReset+0x44>

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b014:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b018:	f002 fd20 	bl	800da5c <USBD_static_malloc>
 800b01c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d109      	bne.n	800b038 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	32b0      	adds	r2, #176	@ 0xb0
 800b02e:	2100      	movs	r1, #0
 800b030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b034:	2302      	movs	r3, #2
 800b036:	e0d4      	b.n	800b1e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b038:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b03c:	2100      	movs	r1, #0
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f002 fe28 	bl	800dc94 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	32b0      	adds	r2, #176	@ 0xb0
 800b04e:	68f9      	ldr	r1, [r7, #12]
 800b050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	32b0      	adds	r2, #176	@ 0xb0
 800b05e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7c1b      	ldrb	r3, [r3, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d138      	bne.n	800b0e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b070:	4b5e      	ldr	r3, [pc, #376]	@ (800b1ec <USBD_CDC_Init+0x1e4>)
 800b072:	7819      	ldrb	r1, [r3, #0]
 800b074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b078:	2202      	movs	r2, #2
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f002 fbcb 	bl	800d816 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b080:	4b5a      	ldr	r3, [pc, #360]	@ (800b1ec <USBD_CDC_Init+0x1e4>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 020f 	and.w	r2, r3, #15
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	3323      	adds	r3, #35	@ 0x23
 800b096:	2201      	movs	r2, #1
 800b098:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b09a:	4b55      	ldr	r3, [pc, #340]	@ (800b1f0 <USBD_CDC_Init+0x1e8>)
 800b09c:	7819      	ldrb	r1, [r3, #0]
 800b09e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f002 fbb6 	bl	800d816 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0aa:	4b51      	ldr	r3, [pc, #324]	@ (800b1f0 <USBD_CDC_Init+0x1e8>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	f003 020f 	and.w	r2, r3, #15
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	440b      	add	r3, r1
 800b0be:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0c6:	4b4b      	ldr	r3, [pc, #300]	@ (800b1f4 <USBD_CDC_Init+0x1ec>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	f003 020f 	and.w	r2, r3, #15
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	440b      	add	r3, r1
 800b0da:	331c      	adds	r3, #28
 800b0dc:	2210      	movs	r2, #16
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e035      	b.n	800b14e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0e2:	4b42      	ldr	r3, [pc, #264]	@ (800b1ec <USBD_CDC_Init+0x1e4>)
 800b0e4:	7819      	ldrb	r1, [r3, #0]
 800b0e6:	2340      	movs	r3, #64	@ 0x40
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f002 fb93 	bl	800d816 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0f0:	4b3e      	ldr	r3, [pc, #248]	@ (800b1ec <USBD_CDC_Init+0x1e4>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 020f 	and.w	r2, r3, #15
 800b0f8:	6879      	ldr	r1, [r7, #4]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	440b      	add	r3, r1
 800b104:	3323      	adds	r3, #35	@ 0x23
 800b106:	2201      	movs	r2, #1
 800b108:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b10a:	4b39      	ldr	r3, [pc, #228]	@ (800b1f0 <USBD_CDC_Init+0x1e8>)
 800b10c:	7819      	ldrb	r1, [r3, #0]
 800b10e:	2340      	movs	r3, #64	@ 0x40
 800b110:	2202      	movs	r2, #2
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f002 fb7f 	bl	800d816 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b118:	4b35      	ldr	r3, [pc, #212]	@ (800b1f0 <USBD_CDC_Init+0x1e8>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	f003 020f 	and.w	r2, r3, #15
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	4613      	mov	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	440b      	add	r3, r1
 800b12c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b130:	2201      	movs	r2, #1
 800b132:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b134:	4b2f      	ldr	r3, [pc, #188]	@ (800b1f4 <USBD_CDC_Init+0x1ec>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 020f 	and.w	r2, r3, #15
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	4613      	mov	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	440b      	add	r3, r1
 800b148:	331c      	adds	r3, #28
 800b14a:	2210      	movs	r2, #16
 800b14c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b14e:	4b29      	ldr	r3, [pc, #164]	@ (800b1f4 <USBD_CDC_Init+0x1ec>)
 800b150:	7819      	ldrb	r1, [r3, #0]
 800b152:	2308      	movs	r3, #8
 800b154:	2203      	movs	r2, #3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f002 fb5d 	bl	800d816 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b15c:	4b25      	ldr	r3, [pc, #148]	@ (800b1f4 <USBD_CDC_Init+0x1ec>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	f003 020f 	and.w	r2, r3, #15
 800b164:	6879      	ldr	r1, [r7, #4]
 800b166:	4613      	mov	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	440b      	add	r3, r1
 800b170:	3323      	adds	r3, #35	@ 0x23
 800b172:	2201      	movs	r2, #1
 800b174:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	33b0      	adds	r3, #176	@ 0xb0
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e018      	b.n	800b1e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	7c1b      	ldrb	r3, [r3, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10a      	bne.n	800b1ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <USBD_CDC_Init+0x1e8>)
 800b1ba:	7819      	ldrb	r1, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f002 fc14 	bl	800d9f4 <USBD_LL_PrepareReceive>
 800b1cc:	e008      	b.n	800b1e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1ce:	4b08      	ldr	r3, [pc, #32]	@ (800b1f0 <USBD_CDC_Init+0x1e8>)
 800b1d0:	7819      	ldrb	r1, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1d8:	2340      	movs	r3, #64	@ 0x40
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f002 fc0a 	bl	800d9f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	2000009f 	.word	0x2000009f
 800b1f0:	200000a0 	.word	0x200000a0
 800b1f4:	200000a1 	.word	0x200000a1

0800b1f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b204:	4b3a      	ldr	r3, [pc, #232]	@ (800b2f0 <USBD_CDC_DeInit+0xf8>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f002 fb29 	bl	800d862 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b210:	4b37      	ldr	r3, [pc, #220]	@ (800b2f0 <USBD_CDC_DeInit+0xf8>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	f003 020f 	and.w	r2, r3, #15
 800b218:	6879      	ldr	r1, [r7, #4]
 800b21a:	4613      	mov	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	440b      	add	r3, r1
 800b224:	3323      	adds	r3, #35	@ 0x23
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b22a:	4b32      	ldr	r3, [pc, #200]	@ (800b2f4 <USBD_CDC_DeInit+0xfc>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f002 fb16 	bl	800d862 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b236:	4b2f      	ldr	r3, [pc, #188]	@ (800b2f4 <USBD_CDC_DeInit+0xfc>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	f003 020f 	and.w	r2, r3, #15
 800b23e:	6879      	ldr	r1, [r7, #4]
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b252:	4b29      	ldr	r3, [pc, #164]	@ (800b2f8 <USBD_CDC_DeInit+0x100>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f002 fb02 	bl	800d862 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b25e:	4b26      	ldr	r3, [pc, #152]	@ (800b2f8 <USBD_CDC_DeInit+0x100>)
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	f003 020f 	and.w	r2, r3, #15
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	4613      	mov	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	440b      	add	r3, r1
 800b272:	3323      	adds	r3, #35	@ 0x23
 800b274:	2200      	movs	r2, #0
 800b276:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b278:	4b1f      	ldr	r3, [pc, #124]	@ (800b2f8 <USBD_CDC_DeInit+0x100>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	f003 020f 	and.w	r2, r3, #15
 800b280:	6879      	ldr	r1, [r7, #4]
 800b282:	4613      	mov	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4413      	add	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	440b      	add	r3, r1
 800b28c:	331c      	adds	r3, #28
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	32b0      	adds	r2, #176	@ 0xb0
 800b29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d01f      	beq.n	800b2e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	33b0      	adds	r3, #176	@ 0xb0
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	32b0      	adds	r2, #176	@ 0xb0
 800b2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 fbd6 	bl	800da78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	32b0      	adds	r2, #176	@ 0xb0
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	2000009f 	.word	0x2000009f
 800b2f4:	200000a0 	.word	0x200000a0
 800b2f8:	200000a1 	.word	0x200000a1

0800b2fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	32b0      	adds	r2, #176	@ 0xb0
 800b310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b314:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b316:	2300      	movs	r3, #0
 800b318:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b328:	2303      	movs	r3, #3
 800b32a:	e0bf      	b.n	800b4ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b334:	2b00      	cmp	r3, #0
 800b336:	d050      	beq.n	800b3da <USBD_CDC_Setup+0xde>
 800b338:	2b20      	cmp	r3, #32
 800b33a:	f040 80af 	bne.w	800b49c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	88db      	ldrh	r3, [r3, #6]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d03a      	beq.n	800b3bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	b25b      	sxtb	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da1b      	bge.n	800b388 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	33b0      	adds	r3, #176	@ 0xb0
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b366:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	88d2      	ldrh	r2, [r2, #6]
 800b36c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	88db      	ldrh	r3, [r3, #6]
 800b372:	2b07      	cmp	r3, #7
 800b374:	bf28      	it	cs
 800b376:	2307      	movcs	r3, #7
 800b378:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	89fa      	ldrh	r2, [r7, #14]
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 fda9 	bl	800ced8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b386:	e090      	b.n	800b4aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	785a      	ldrb	r2, [r3, #1]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	88db      	ldrh	r3, [r3, #6]
 800b396:	2b3f      	cmp	r3, #63	@ 0x3f
 800b398:	d803      	bhi.n	800b3a2 <USBD_CDC_Setup+0xa6>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	88db      	ldrh	r3, [r3, #6]
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	e000      	b.n	800b3a4 <USBD_CDC_Setup+0xa8>
 800b3a2:	2240      	movs	r2, #64	@ 0x40
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b3aa:	6939      	ldr	r1, [r7, #16]
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 fdbe 	bl	800cf36 <USBD_CtlPrepareRx>
      break;
 800b3ba:	e076      	b.n	800b4aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	33b0      	adds	r3, #176	@ 0xb0
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	7850      	ldrb	r0, [r2, #1]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	4798      	blx	r3
      break;
 800b3d8:	e067      	b.n	800b4aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	2b0b      	cmp	r3, #11
 800b3e0:	d851      	bhi.n	800b486 <USBD_CDC_Setup+0x18a>
 800b3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e8 <USBD_CDC_Setup+0xec>)
 800b3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e8:	0800b419 	.word	0x0800b419
 800b3ec:	0800b495 	.word	0x0800b495
 800b3f0:	0800b487 	.word	0x0800b487
 800b3f4:	0800b487 	.word	0x0800b487
 800b3f8:	0800b487 	.word	0x0800b487
 800b3fc:	0800b487 	.word	0x0800b487
 800b400:	0800b487 	.word	0x0800b487
 800b404:	0800b487 	.word	0x0800b487
 800b408:	0800b487 	.word	0x0800b487
 800b40c:	0800b487 	.word	0x0800b487
 800b410:	0800b443 	.word	0x0800b443
 800b414:	0800b46d 	.word	0x0800b46d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b03      	cmp	r3, #3
 800b422:	d107      	bne.n	800b434 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b424:	f107 030a 	add.w	r3, r7, #10
 800b428:	2202      	movs	r2, #2
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 fd53 	bl	800ced8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b432:	e032      	b.n	800b49a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f001 fcd1 	bl	800cdde <USBD_CtlError>
            ret = USBD_FAIL;
 800b43c:	2303      	movs	r3, #3
 800b43e:	75fb      	strb	r3, [r7, #23]
          break;
 800b440:	e02b      	b.n	800b49a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d107      	bne.n	800b45e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b44e:	f107 030d 	add.w	r3, r7, #13
 800b452:	2201      	movs	r2, #1
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f001 fd3e 	bl	800ced8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b45c:	e01d      	b.n	800b49a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 fcbc 	bl	800cdde <USBD_CtlError>
            ret = USBD_FAIL;
 800b466:	2303      	movs	r3, #3
 800b468:	75fb      	strb	r3, [r7, #23]
          break;
 800b46a:	e016      	b.n	800b49a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b472:	b2db      	uxtb	r3, r3
 800b474:	2b03      	cmp	r3, #3
 800b476:	d00f      	beq.n	800b498 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 fcaf 	bl	800cdde <USBD_CtlError>
            ret = USBD_FAIL;
 800b480:	2303      	movs	r3, #3
 800b482:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b484:	e008      	b.n	800b498 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f001 fca8 	bl	800cdde <USBD_CtlError>
          ret = USBD_FAIL;
 800b48e:	2303      	movs	r3, #3
 800b490:	75fb      	strb	r3, [r7, #23]
          break;
 800b492:	e002      	b.n	800b49a <USBD_CDC_Setup+0x19e>
          break;
 800b494:	bf00      	nop
 800b496:	e008      	b.n	800b4aa <USBD_CDC_Setup+0x1ae>
          break;
 800b498:	bf00      	nop
      }
      break;
 800b49a:	e006      	b.n	800b4aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f001 fc9d 	bl	800cdde <USBD_CtlError>
      ret = USBD_FAIL;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	32b0      	adds	r2, #176	@ 0xb0
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e065      	b.n	800b5aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	32b0      	adds	r2, #176	@ 0xb0
 800b4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4ee:	78fb      	ldrb	r3, [r7, #3]
 800b4f0:	f003 020f 	and.w	r2, r3, #15
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	440b      	add	r3, r1
 800b500:	3314      	adds	r3, #20
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d02f      	beq.n	800b568 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	f003 020f 	and.w	r2, r3, #15
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	4613      	mov	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	440b      	add	r3, r1
 800b51a:	3314      	adds	r3, #20
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	78fb      	ldrb	r3, [r7, #3]
 800b520:	f003 010f 	and.w	r1, r3, #15
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	460b      	mov	r3, r1
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	440b      	add	r3, r1
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4403      	add	r3, r0
 800b530:	331c      	adds	r3, #28
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	fbb2 f1f3 	udiv	r1, r2, r3
 800b538:	fb01 f303 	mul.w	r3, r1, r3
 800b53c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d112      	bne.n	800b568 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	f003 020f 	and.w	r2, r3, #15
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	3314      	adds	r3, #20
 800b556:	2200      	movs	r2, #0
 800b558:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b55a:	78f9      	ldrb	r1, [r7, #3]
 800b55c:	2300      	movs	r3, #0
 800b55e:	2200      	movs	r2, #0
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f002 fa26 	bl	800d9b2 <USBD_LL_Transmit>
 800b566:	e01f      	b.n	800b5a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	33b0      	adds	r3, #176	@ 0xb0
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d010      	beq.n	800b5a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	33b0      	adds	r3, #176	@ 0xb0
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b5a4:	78fa      	ldrb	r2, [r7, #3]
 800b5a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	32b0      	adds	r2, #176	@ 0xb0
 800b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	32b0      	adds	r2, #176	@ 0xb0
 800b5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e01a      	b.n	800b61a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f002 fa24 	bl	800da36 <USBD_LL_GetRxDataSize>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	33b0      	adds	r3, #176	@ 0xb0
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b614:	4611      	mov	r1, r2
 800b616:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	32b0      	adds	r2, #176	@ 0xb0
 800b634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b638:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	e024      	b.n	800b68e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	33b0      	adds	r3, #176	@ 0xb0
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d019      	beq.n	800b68c <USBD_CDC_EP0_RxReady+0x6a>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b65e:	2bff      	cmp	r3, #255	@ 0xff
 800b660:	d014      	beq.n	800b68c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	33b0      	adds	r3, #176	@ 0xb0
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b67a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b682:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	22ff      	movs	r2, #255	@ 0xff
 800b688:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6a0:	2182      	movs	r1, #130	@ 0x82
 800b6a2:	4818      	ldr	r0, [pc, #96]	@ (800b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6a4:	f000 fd62 	bl	800c16c <USBD_GetEpDesc>
 800b6a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	4815      	ldr	r0, [pc, #84]	@ (800b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6ae:	f000 fd5d 	bl	800c16c <USBD_GetEpDesc>
 800b6b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6b4:	2181      	movs	r1, #129	@ 0x81
 800b6b6:	4813      	ldr	r0, [pc, #76]	@ (800b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6b8:	f000 fd58 	bl	800c16c <USBD_GetEpDesc>
 800b6bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2210      	movs	r2, #16
 800b6c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d006      	beq.n	800b6de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6d8:	711a      	strb	r2, [r3, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d006      	beq.n	800b6f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6ec:	711a      	strb	r2, [r3, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2243      	movs	r2, #67	@ 0x43
 800b6f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6f8:	4b02      	ldr	r3, [pc, #8]	@ (800b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	2000005c 	.word	0x2000005c

0800b708 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b710:	2182      	movs	r1, #130	@ 0x82
 800b712:	4818      	ldr	r0, [pc, #96]	@ (800b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b714:	f000 fd2a 	bl	800c16c <USBD_GetEpDesc>
 800b718:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b71a:	2101      	movs	r1, #1
 800b71c:	4815      	ldr	r0, [pc, #84]	@ (800b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b71e:	f000 fd25 	bl	800c16c <USBD_GetEpDesc>
 800b722:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b724:	2181      	movs	r1, #129	@ 0x81
 800b726:	4813      	ldr	r0, [pc, #76]	@ (800b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b728:	f000 fd20 	bl	800c16c <USBD_GetEpDesc>
 800b72c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2210      	movs	r2, #16
 800b738:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d006      	beq.n	800b74e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	2200      	movs	r2, #0
 800b744:	711a      	strb	r2, [r3, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f042 0202 	orr.w	r2, r2, #2
 800b74c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d006      	beq.n	800b762 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	711a      	strb	r2, [r3, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f042 0202 	orr.w	r2, r2, #2
 800b760:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2243      	movs	r2, #67	@ 0x43
 800b766:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b768:	4b02      	ldr	r3, [pc, #8]	@ (800b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	2000005c 	.word	0x2000005c

0800b778 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b780:	2182      	movs	r1, #130	@ 0x82
 800b782:	4818      	ldr	r0, [pc, #96]	@ (800b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b784:	f000 fcf2 	bl	800c16c <USBD_GetEpDesc>
 800b788:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b78a:	2101      	movs	r1, #1
 800b78c:	4815      	ldr	r0, [pc, #84]	@ (800b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b78e:	f000 fced 	bl	800c16c <USBD_GetEpDesc>
 800b792:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b794:	2181      	movs	r1, #129	@ 0x81
 800b796:	4813      	ldr	r0, [pc, #76]	@ (800b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b798:	f000 fce8 	bl	800c16c <USBD_GetEpDesc>
 800b79c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2210      	movs	r2, #16
 800b7a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d006      	beq.n	800b7be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7b8:	711a      	strb	r2, [r3, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d006      	beq.n	800b7d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7cc:	711a      	strb	r2, [r3, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2243      	movs	r2, #67	@ 0x43
 800b7d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7d8:	4b02      	ldr	r3, [pc, #8]	@ (800b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	2000005c 	.word	0x2000005c

0800b7e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	220a      	movs	r2, #10
 800b7f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7f6:	4b03      	ldr	r3, [pc, #12]	@ (800b804 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	20000018 	.word	0x20000018

0800b808 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b818:	2303      	movs	r3, #3
 800b81a:	e009      	b.n	800b830 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	33b0      	adds	r3, #176	@ 0xb0
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	32b0      	adds	r2, #176	@ 0xb0
 800b852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b856:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b85e:	2303      	movs	r3, #3
 800b860:	e008      	b.n	800b874 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	32b0      	adds	r2, #176	@ 0xb0
 800b894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b898:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e004      	b.n	800b8ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
	...

0800b8bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	32b0      	adds	r2, #176	@ 0xb0
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e025      	b.n	800b92e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d11f      	bne.n	800b92c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b8f4:	4b10      	ldr	r3, [pc, #64]	@ (800b938 <USBD_CDC_TransmitPacket+0x7c>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f003 020f 	and.w	r2, r3, #15
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	4613      	mov	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4403      	add	r3, r0
 800b90e:	3314      	adds	r3, #20
 800b910:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b912:	4b09      	ldr	r3, [pc, #36]	@ (800b938 <USBD_CDC_TransmitPacket+0x7c>)
 800b914:	7819      	ldrb	r1, [r3, #0]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f002 f845 	bl	800d9b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	2000009f 	.word	0x2000009f

0800b93c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	32b0      	adds	r2, #176	@ 0xb0
 800b94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b952:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	32b0      	adds	r2, #176	@ 0xb0
 800b95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b966:	2303      	movs	r3, #3
 800b968:	e018      	b.n	800b99c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	7c1b      	ldrb	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b972:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a4 <USBD_CDC_ReceivePacket+0x68>)
 800b974:	7819      	ldrb	r1, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b97c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f002 f837 	bl	800d9f4 <USBD_LL_PrepareReceive>
 800b986:	e008      	b.n	800b99a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b988:	4b06      	ldr	r3, [pc, #24]	@ (800b9a4 <USBD_CDC_ReceivePacket+0x68>)
 800b98a:	7819      	ldrb	r1, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b992:	2340      	movs	r3, #64	@ 0x40
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f002 f82d 	bl	800d9f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	200000a0 	.word	0x200000a0

0800b9a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e01f      	b.n	800ba00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	79fa      	ldrb	r2, [r7, #7]
 800b9f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f001 fea7 	bl	800d748 <USBD_LL_Init>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e025      	b.n	800ba6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	32ae      	adds	r2, #174	@ 0xae
 800ba32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00f      	beq.n	800ba5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	32ae      	adds	r2, #174	@ 0xae
 800ba46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba4c:	f107 020e 	add.w	r2, r7, #14
 800ba50:	4610      	mov	r0, r2
 800ba52:	4798      	blx	r3
 800ba54:	4602      	mov	r2, r0
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 feaf 	bl	800d7e0 <USBD_LL_Start>
 800ba82:	4603      	mov	r3, r0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	460b      	mov	r3, r1
 800baac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d009      	beq.n	800bad0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	78fa      	ldrb	r2, [r7, #3]
 800bac6:	4611      	mov	r1, r2
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	4798      	blx	r3
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	78fa      	ldrb	r2, [r7, #3]
 800baf4:	4611      	mov	r1, r2
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	4798      	blx	r3
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb00:	2303      	movs	r3, #3
 800bb02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f001 f922 	bl	800cd6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb34:	461a      	mov	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb42:	f003 031f 	and.w	r3, r3, #31
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d01a      	beq.n	800bb80 <USBD_LL_SetupStage+0x72>
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d822      	bhi.n	800bb94 <USBD_LL_SetupStage+0x86>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d002      	beq.n	800bb58 <USBD_LL_SetupStage+0x4a>
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d00a      	beq.n	800bb6c <USBD_LL_SetupStage+0x5e>
 800bb56:	e01d      	b.n	800bb94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fb77 	bl	800c254 <USBD_StdDevReq>
 800bb66:	4603      	mov	r3, r0
 800bb68:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6a:	e020      	b.n	800bbae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fbdf 	bl	800c338 <USBD_StdItfReq>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb7e:	e016      	b.n	800bbae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fc41 	bl	800c410 <USBD_StdEPReq>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]
      break;
 800bb92:	e00c      	b.n	800bbae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f001 fe7c 	bl	800d8a0 <USBD_LL_StallEP>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bbac:	bf00      	nop
  }

  return ret;
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	607a      	str	r2, [r7, #4]
 800bbc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bbca:	7afb      	ldrb	r3, [r7, #11]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d177      	bne.n	800bcc0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bbd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	f040 80a1 	bne.w	800bd26 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	8992      	ldrh	r2, [r2, #12]
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d91c      	bls.n	800bc2a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	8992      	ldrh	r2, [r2, #12]
 800bbf8:	1a9a      	subs	r2, r3, r2
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	8992      	ldrh	r2, [r2, #12]
 800bc06:	441a      	add	r2, r3
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6919      	ldr	r1, [r3, #16]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	899b      	ldrh	r3, [r3, #12]
 800bc14:	461a      	mov	r2, r3
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	bf38      	it	cc
 800bc1e:	4613      	movcc	r3, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f001 f9a8 	bl	800cf78 <USBD_CtlContinueRx>
 800bc28:	e07d      	b.n	800bd26 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc30:	f003 031f 	and.w	r3, r3, #31
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d014      	beq.n	800bc62 <USBD_LL_DataOutStage+0xaa>
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d81d      	bhi.n	800bc78 <USBD_LL_DataOutStage+0xc0>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <USBD_LL_DataOutStage+0x8e>
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d003      	beq.n	800bc4c <USBD_LL_DataOutStage+0x94>
 800bc44:	e018      	b.n	800bc78 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc46:	2300      	movs	r3, #0
 800bc48:	75bb      	strb	r3, [r7, #22]
            break;
 800bc4a:	e018      	b.n	800bc7e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	4619      	mov	r1, r3
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 fa6e 	bl	800c138 <USBD_CoreFindIF>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	75bb      	strb	r3, [r7, #22]
            break;
 800bc60:	e00d      	b.n	800bc7e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f000 fa70 	bl	800c152 <USBD_CoreFindEP>
 800bc72:	4603      	mov	r3, r0
 800bc74:	75bb      	strb	r3, [r7, #22]
            break;
 800bc76:	e002      	b.n	800bc7e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc7c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc7e:	7dbb      	ldrb	r3, [r7, #22]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d119      	bne.n	800bcb8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d113      	bne.n	800bcb8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc90:	7dba      	ldrb	r2, [r7, #22]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	32ae      	adds	r2, #174	@ 0xae
 800bc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d00b      	beq.n	800bcb8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bca0:	7dba      	ldrb	r2, [r7, #22]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bca8:	7dba      	ldrb	r2, [r7, #22]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	32ae      	adds	r2, #174	@ 0xae
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f001 f96e 	bl	800cf9a <USBD_CtlSendStatus>
 800bcbe:	e032      	b.n	800bd26 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcc0:	7afb      	ldrb	r3, [r7, #11]
 800bcc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	4619      	mov	r1, r3
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 fa41 	bl	800c152 <USBD_CoreFindEP>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcd4:	7dbb      	ldrb	r3, [r7, #22]
 800bcd6:	2bff      	cmp	r3, #255	@ 0xff
 800bcd8:	d025      	beq.n	800bd26 <USBD_LL_DataOutStage+0x16e>
 800bcda:	7dbb      	ldrb	r3, [r7, #22]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d122      	bne.n	800bd26 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	2b03      	cmp	r3, #3
 800bcea:	d117      	bne.n	800bd1c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcec:	7dba      	ldrb	r2, [r7, #22]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	32ae      	adds	r2, #174	@ 0xae
 800bcf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00f      	beq.n	800bd1c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bcfc:	7dba      	ldrb	r2, [r7, #22]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd04:	7dba      	ldrb	r2, [r7, #22]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	32ae      	adds	r2, #174	@ 0xae
 800bd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	7afa      	ldrb	r2, [r7, #11]
 800bd12:	4611      	mov	r1, r2
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	4798      	blx	r3
 800bd18:	4603      	mov	r3, r0
 800bd1a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	e000      	b.n	800bd28 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bd3e:	7afb      	ldrb	r3, [r7, #11]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d178      	bne.n	800be36 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3314      	adds	r3, #20
 800bd48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d163      	bne.n	800be1c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	8992      	ldrh	r2, [r2, #12]
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d91c      	bls.n	800bd9a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	8992      	ldrh	r2, [r2, #12]
 800bd68:	1a9a      	subs	r2, r3, r2
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	8992      	ldrh	r2, [r2, #12]
 800bd76:	441a      	add	r2, r3
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6919      	ldr	r1, [r3, #16]
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	461a      	mov	r2, r3
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f001 f8c4 	bl	800cf14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2100      	movs	r1, #0
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f001 fe2e 	bl	800d9f4 <USBD_LL_PrepareReceive>
 800bd98:	e040      	b.n	800be1c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	899b      	ldrh	r3, [r3, #12]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d11c      	bne.n	800bde2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d316      	bcc.n	800bde2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d20f      	bcs.n	800bde2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f001 f8a4 	bl	800cf14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	2100      	movs	r1, #0
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f001 fe0a 	bl	800d9f4 <USBD_LL_PrepareReceive>
 800bde0:	e01c      	b.n	800be1c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d10f      	bne.n	800be0e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d009      	beq.n	800be0e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be0e:	2180      	movs	r1, #128	@ 0x80
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f001 fd45 	bl	800d8a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f001 f8d2 	bl	800cfc0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d03a      	beq.n	800be9c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fe30 	bl	800ba8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be34:	e032      	b.n	800be9c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be36:	7afb      	ldrb	r3, [r7, #11]
 800be38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	4619      	mov	r1, r3
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 f986 	bl	800c152 <USBD_CoreFindEP>
 800be46:	4603      	mov	r3, r0
 800be48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	2bff      	cmp	r3, #255	@ 0xff
 800be4e:	d025      	beq.n	800be9c <USBD_LL_DataInStage+0x16c>
 800be50:	7dfb      	ldrb	r3, [r7, #23]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d122      	bne.n	800be9c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d11c      	bne.n	800be9c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be62:	7dfa      	ldrb	r2, [r7, #23]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	32ae      	adds	r2, #174	@ 0xae
 800be68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d014      	beq.n	800be9c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800be72:	7dfa      	ldrb	r2, [r7, #23]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be7a:	7dfa      	ldrb	r2, [r7, #23]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	32ae      	adds	r2, #174	@ 0xae
 800be80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	7afa      	ldrb	r2, [r7, #11]
 800be88:	4611      	mov	r1, r2
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	4798      	blx	r3
 800be8e:	4603      	mov	r3, r0
 800be90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be92:	7dbb      	ldrb	r3, [r7, #22]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800be98:	7dbb      	ldrb	r3, [r7, #22]
 800be9a:	e000      	b.n	800be9e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b084      	sub	sp, #16
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d014      	beq.n	800bf0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00e      	beq.n	800bf0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	6852      	ldr	r2, [r2, #4]
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	4611      	mov	r1, r2
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	4798      	blx	r3
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf0c:	2340      	movs	r3, #64	@ 0x40
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2100      	movs	r1, #0
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f001 fc7f 	bl	800d816 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2240      	movs	r2, #64	@ 0x40
 800bf24:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf28:	2340      	movs	r3, #64	@ 0x40
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2180      	movs	r1, #128	@ 0x80
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f001 fc71 	bl	800d816 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2240      	movs	r2, #64	@ 0x40
 800bf40:	841a      	strh	r2, [r3, #32]

  return ret;
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	78fa      	ldrb	r2, [r7, #3]
 800bf5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b04      	cmp	r3, #4
 800bf7e:	d006      	beq.n	800bf8e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2204      	movs	r2, #4
 800bf92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d106      	bne.n	800bfc6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	d110      	bne.n	800c00a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00b      	beq.n	800c00a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	32ae      	adds	r2, #174	@ 0xae
 800c02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d101      	bne.n	800c036 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c032:	2303      	movs	r3, #3
 800c034:	e01c      	b.n	800c070 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d115      	bne.n	800c06e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	32ae      	adds	r2, #174	@ 0xae
 800c04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c050:	6a1b      	ldr	r3, [r3, #32]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00b      	beq.n	800c06e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	32ae      	adds	r2, #174	@ 0xae
 800c060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	78fa      	ldrb	r2, [r7, #3]
 800c068:	4611      	mov	r1, r2
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	32ae      	adds	r2, #174	@ 0xae
 800c08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c096:	2303      	movs	r3, #3
 800c098:	e01c      	b.n	800c0d4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d115      	bne.n	800c0d2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	32ae      	adds	r2, #174	@ 0xae
 800c0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00b      	beq.n	800c0d2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	32ae      	adds	r2, #174	@ 0xae
 800c0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ca:	78fa      	ldrb	r2, [r7, #3]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00e      	beq.n	800c12e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	6852      	ldr	r2, [r2, #4]
 800c11c:	b2d2      	uxtb	r2, r2
 800c11e:	4611      	mov	r1, r2
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	4798      	blx	r3
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c12a:	2303      	movs	r3, #3
 800c12c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c144:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c146:	4618      	mov	r0, r3
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c152:	b480      	push	{r7}
 800c154:	b083      	sub	sp, #12
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	460b      	mov	r3, r1
 800c15c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c15e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c180:	2300      	movs	r3, #0
 800c182:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	885b      	ldrh	r3, [r3, #2]
 800c188:	b29b      	uxth	r3, r3
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	7812      	ldrb	r2, [r2, #0]
 800c18e:	4293      	cmp	r3, r2
 800c190:	d91f      	bls.n	800c1d2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c198:	e013      	b.n	800c1c2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c19a:	f107 030a 	add.w	r3, r7, #10
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6978      	ldr	r0, [r7, #20]
 800c1a2:	f000 f81b 	bl	800c1dc <USBD_GetNextDesc>
 800c1a6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	785b      	ldrb	r3, [r3, #1]
 800c1ac:	2b05      	cmp	r3, #5
 800c1ae:	d108      	bne.n	800c1c2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	789b      	ldrb	r3, [r3, #2]
 800c1b8:	78fa      	ldrb	r2, [r7, #3]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d008      	beq.n	800c1d0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	885b      	ldrh	r3, [r3, #2]
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	897b      	ldrh	r3, [r7, #10]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d8e5      	bhi.n	800c19a <USBD_GetEpDesc+0x2e>
 800c1ce:	e000      	b.n	800c1d2 <USBD_GetEpDesc+0x66>
          break;
 800c1d0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1d2:	693b      	ldr	r3, [r7, #16]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	7812      	ldrb	r2, [r2, #0]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4413      	add	r3, r2
 800c204:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c206:	68fb      	ldr	r3, [r7, #12]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	3301      	adds	r3, #1
 800c22a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c232:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c236:	021b      	lsls	r3, r3, #8
 800c238:	b21a      	sxth	r2, r3
 800c23a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c23e:	4313      	orrs	r3, r2
 800c240:	b21b      	sxth	r3, r3
 800c242:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c244:	89fb      	ldrh	r3, [r7, #14]
}
 800c246:	4618      	mov	r0, r3
 800c248:	371c      	adds	r7, #28
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
	...

0800c254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c26a:	2b40      	cmp	r3, #64	@ 0x40
 800c26c:	d005      	beq.n	800c27a <USBD_StdDevReq+0x26>
 800c26e:	2b40      	cmp	r3, #64	@ 0x40
 800c270:	d857      	bhi.n	800c322 <USBD_StdDevReq+0xce>
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00f      	beq.n	800c296 <USBD_StdDevReq+0x42>
 800c276:	2b20      	cmp	r3, #32
 800c278:	d153      	bne.n	800c322 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	32ae      	adds	r2, #174	@ 0xae
 800c284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	4798      	blx	r3
 800c290:	4603      	mov	r3, r0
 800c292:	73fb      	strb	r3, [r7, #15]
      break;
 800c294:	e04a      	b.n	800c32c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	785b      	ldrb	r3, [r3, #1]
 800c29a:	2b09      	cmp	r3, #9
 800c29c:	d83b      	bhi.n	800c316 <USBD_StdDevReq+0xc2>
 800c29e:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a4 <USBD_StdDevReq+0x50>)
 800c2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a4:	0800c2f9 	.word	0x0800c2f9
 800c2a8:	0800c30d 	.word	0x0800c30d
 800c2ac:	0800c317 	.word	0x0800c317
 800c2b0:	0800c303 	.word	0x0800c303
 800c2b4:	0800c317 	.word	0x0800c317
 800c2b8:	0800c2d7 	.word	0x0800c2d7
 800c2bc:	0800c2cd 	.word	0x0800c2cd
 800c2c0:	0800c317 	.word	0x0800c317
 800c2c4:	0800c2ef 	.word	0x0800c2ef
 800c2c8:	0800c2e1 	.word	0x0800c2e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fa3e 	bl	800c750 <USBD_GetDescriptor>
          break;
 800c2d4:	e024      	b.n	800c320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2d6:	6839      	ldr	r1, [r7, #0]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fba3 	bl	800ca24 <USBD_SetAddress>
          break;
 800c2de:	e01f      	b.n	800c320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fbe2 	bl	800caac <USBD_SetConfig>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]
          break;
 800c2ec:	e018      	b.n	800c320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fc85 	bl	800cc00 <USBD_GetConfig>
          break;
 800c2f6:	e013      	b.n	800c320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fcb6 	bl	800cc6c <USBD_GetStatus>
          break;
 800c300:	e00e      	b.n	800c320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fce5 	bl	800ccd4 <USBD_SetFeature>
          break;
 800c30a:	e009      	b.n	800c320 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fd09 	bl	800cd26 <USBD_ClrFeature>
          break;
 800c314:	e004      	b.n	800c320 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fd60 	bl	800cdde <USBD_CtlError>
          break;
 800c31e:	bf00      	nop
      }
      break;
 800c320:	e004      	b.n	800c32c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c322:	6839      	ldr	r1, [r7, #0]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fd5a 	bl	800cdde <USBD_CtlError>
      break;
 800c32a:	bf00      	nop
  }

  return ret;
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop

0800c338 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c34e:	2b40      	cmp	r3, #64	@ 0x40
 800c350:	d005      	beq.n	800c35e <USBD_StdItfReq+0x26>
 800c352:	2b40      	cmp	r3, #64	@ 0x40
 800c354:	d852      	bhi.n	800c3fc <USBD_StdItfReq+0xc4>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <USBD_StdItfReq+0x26>
 800c35a:	2b20      	cmp	r3, #32
 800c35c:	d14e      	bne.n	800c3fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c364:	b2db      	uxtb	r3, r3
 800c366:	3b01      	subs	r3, #1
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d840      	bhi.n	800c3ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	889b      	ldrh	r3, [r3, #4]
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b01      	cmp	r3, #1
 800c374:	d836      	bhi.n	800c3e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	889b      	ldrh	r3, [r3, #4]
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	4619      	mov	r1, r3
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f7ff feda 	bl	800c138 <USBD_CoreFindIF>
 800c384:	4603      	mov	r3, r0
 800c386:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c388:	7bbb      	ldrb	r3, [r7, #14]
 800c38a:	2bff      	cmp	r3, #255	@ 0xff
 800c38c:	d01d      	beq.n	800c3ca <USBD_StdItfReq+0x92>
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d11a      	bne.n	800c3ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c394:	7bba      	ldrb	r2, [r7, #14]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	32ae      	adds	r2, #174	@ 0xae
 800c39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00f      	beq.n	800c3c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c3a4:	7bba      	ldrb	r2, [r7, #14]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3ac:	7bba      	ldrb	r2, [r7, #14]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	32ae      	adds	r2, #174	@ 0xae
 800c3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	4798      	blx	r3
 800c3be:	4603      	mov	r3, r0
 800c3c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3c2:	e004      	b.n	800c3ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3c8:	e001      	b.n	800c3ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	88db      	ldrh	r3, [r3, #6]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d110      	bne.n	800c3f8 <USBD_StdItfReq+0xc0>
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10d      	bne.n	800c3f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fddc 	bl	800cf9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3e2:	e009      	b.n	800c3f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fcf9 	bl	800cdde <USBD_CtlError>
          break;
 800c3ec:	e004      	b.n	800c3f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fcf4 	bl	800cdde <USBD_CtlError>
          break;
 800c3f6:	e000      	b.n	800c3fa <USBD_StdItfReq+0xc2>
          break;
 800c3f8:	bf00      	nop
      }
      break;
 800c3fa:	e004      	b.n	800c406 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fced 	bl	800cdde <USBD_CtlError>
      break;
 800c404:	bf00      	nop
  }

  return ret;
 800c406:	7bfb      	ldrb	r3, [r7, #15]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	889b      	ldrh	r3, [r3, #4]
 800c422:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c42c:	2b40      	cmp	r3, #64	@ 0x40
 800c42e:	d007      	beq.n	800c440 <USBD_StdEPReq+0x30>
 800c430:	2b40      	cmp	r3, #64	@ 0x40
 800c432:	f200 8181 	bhi.w	800c738 <USBD_StdEPReq+0x328>
 800c436:	2b00      	cmp	r3, #0
 800c438:	d02a      	beq.n	800c490 <USBD_StdEPReq+0x80>
 800c43a:	2b20      	cmp	r3, #32
 800c43c:	f040 817c 	bne.w	800c738 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c440:	7bbb      	ldrb	r3, [r7, #14]
 800c442:	4619      	mov	r1, r3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7ff fe84 	bl	800c152 <USBD_CoreFindEP>
 800c44a:	4603      	mov	r3, r0
 800c44c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c44e:	7b7b      	ldrb	r3, [r7, #13]
 800c450:	2bff      	cmp	r3, #255	@ 0xff
 800c452:	f000 8176 	beq.w	800c742 <USBD_StdEPReq+0x332>
 800c456:	7b7b      	ldrb	r3, [r7, #13]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f040 8172 	bne.w	800c742 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c45e:	7b7a      	ldrb	r2, [r7, #13]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c466:	7b7a      	ldrb	r2, [r7, #13]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	32ae      	adds	r2, #174	@ 0xae
 800c46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 8165 	beq.w	800c742 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c478:	7b7a      	ldrb	r2, [r7, #13]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	32ae      	adds	r2, #174	@ 0xae
 800c47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	4798      	blx	r3
 800c48a:	4603      	mov	r3, r0
 800c48c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c48e:	e158      	b.n	800c742 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	785b      	ldrb	r3, [r3, #1]
 800c494:	2b03      	cmp	r3, #3
 800c496:	d008      	beq.n	800c4aa <USBD_StdEPReq+0x9a>
 800c498:	2b03      	cmp	r3, #3
 800c49a:	f300 8147 	bgt.w	800c72c <USBD_StdEPReq+0x31c>
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 809b 	beq.w	800c5da <USBD_StdEPReq+0x1ca>
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d03c      	beq.n	800c522 <USBD_StdEPReq+0x112>
 800c4a8:	e140      	b.n	800c72c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d002      	beq.n	800c4bc <USBD_StdEPReq+0xac>
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d016      	beq.n	800c4e8 <USBD_StdEPReq+0xd8>
 800c4ba:	e02c      	b.n	800c516 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00d      	beq.n	800c4de <USBD_StdEPReq+0xce>
 800c4c2:	7bbb      	ldrb	r3, [r7, #14]
 800c4c4:	2b80      	cmp	r3, #128	@ 0x80
 800c4c6:	d00a      	beq.n	800c4de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 f9e7 	bl	800d8a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4d2:	2180      	movs	r1, #128	@ 0x80
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f001 f9e3 	bl	800d8a0 <USBD_LL_StallEP>
 800c4da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4dc:	e020      	b.n	800c520 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fc7c 	bl	800cdde <USBD_CtlError>
              break;
 800c4e6:	e01b      	b.n	800c520 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	885b      	ldrh	r3, [r3, #2]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10e      	bne.n	800c50e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00b      	beq.n	800c50e <USBD_StdEPReq+0xfe>
 800c4f6:	7bbb      	ldrb	r3, [r7, #14]
 800c4f8:	2b80      	cmp	r3, #128	@ 0x80
 800c4fa:	d008      	beq.n	800c50e <USBD_StdEPReq+0xfe>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	88db      	ldrh	r3, [r3, #6]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d104      	bne.n	800c50e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f001 f9c9 	bl	800d8a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fd43 	bl	800cf9a <USBD_CtlSendStatus>

              break;
 800c514:	e004      	b.n	800c520 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fc60 	bl	800cdde <USBD_CtlError>
              break;
 800c51e:	bf00      	nop
          }
          break;
 800c520:	e109      	b.n	800c736 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d002      	beq.n	800c534 <USBD_StdEPReq+0x124>
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d016      	beq.n	800c560 <USBD_StdEPReq+0x150>
 800c532:	e04b      	b.n	800c5cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c534:	7bbb      	ldrb	r3, [r7, #14]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00d      	beq.n	800c556 <USBD_StdEPReq+0x146>
 800c53a:	7bbb      	ldrb	r3, [r7, #14]
 800c53c:	2b80      	cmp	r3, #128	@ 0x80
 800c53e:	d00a      	beq.n	800c556 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c540:	7bbb      	ldrb	r3, [r7, #14]
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f001 f9ab 	bl	800d8a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c54a:	2180      	movs	r1, #128	@ 0x80
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f001 f9a7 	bl	800d8a0 <USBD_LL_StallEP>
 800c552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c554:	e040      	b.n	800c5d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fc40 	bl	800cdde <USBD_CtlError>
              break;
 800c55e:	e03b      	b.n	800c5d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	885b      	ldrh	r3, [r3, #2]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d136      	bne.n	800c5d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c568:	7bbb      	ldrb	r3, [r7, #14]
 800c56a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d004      	beq.n	800c57c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c572:	7bbb      	ldrb	r3, [r7, #14]
 800c574:	4619      	mov	r1, r3
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f001 f9b1 	bl	800d8de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fd0c 	bl	800cf9a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c582:	7bbb      	ldrb	r3, [r7, #14]
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff fde3 	bl	800c152 <USBD_CoreFindEP>
 800c58c:	4603      	mov	r3, r0
 800c58e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c590:	7b7b      	ldrb	r3, [r7, #13]
 800c592:	2bff      	cmp	r3, #255	@ 0xff
 800c594:	d01f      	beq.n	800c5d6 <USBD_StdEPReq+0x1c6>
 800c596:	7b7b      	ldrb	r3, [r7, #13]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d11c      	bne.n	800c5d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c59c:	7b7a      	ldrb	r2, [r7, #13]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c5a4:	7b7a      	ldrb	r2, [r7, #13]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	32ae      	adds	r2, #174	@ 0xae
 800c5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d010      	beq.n	800c5d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5b4:	7b7a      	ldrb	r2, [r7, #13]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	32ae      	adds	r2, #174	@ 0xae
 800c5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	4798      	blx	r3
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5ca:	e004      	b.n	800c5d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fc05 	bl	800cdde <USBD_CtlError>
              break;
 800c5d4:	e000      	b.n	800c5d8 <USBD_StdEPReq+0x1c8>
              break;
 800c5d6:	bf00      	nop
          }
          break;
 800c5d8:	e0ad      	b.n	800c736 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d002      	beq.n	800c5ec <USBD_StdEPReq+0x1dc>
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d033      	beq.n	800c652 <USBD_StdEPReq+0x242>
 800c5ea:	e099      	b.n	800c720 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d007      	beq.n	800c602 <USBD_StdEPReq+0x1f2>
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
 800c5f4:	2b80      	cmp	r3, #128	@ 0x80
 800c5f6:	d004      	beq.n	800c602 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fbef 	bl	800cdde <USBD_CtlError>
                break;
 800c600:	e093      	b.n	800c72a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c606:	2b00      	cmp	r3, #0
 800c608:	da0b      	bge.n	800c622 <USBD_StdEPReq+0x212>
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c610:	4613      	mov	r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4413      	add	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	3310      	adds	r3, #16
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4413      	add	r3, r2
 800c61e:	3304      	adds	r3, #4
 800c620:	e00b      	b.n	800c63a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c622:	7bbb      	ldrb	r3, [r7, #14]
 800c624:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c628:	4613      	mov	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	4413      	add	r3, r2
 800c638:	3304      	adds	r3, #4
 800c63a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2200      	movs	r2, #0
 800c640:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	330e      	adds	r3, #14
 800c646:	2202      	movs	r2, #2
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fc44 	bl	800ced8 <USBD_CtlSendData>
              break;
 800c650:	e06b      	b.n	800c72a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c656:	2b00      	cmp	r3, #0
 800c658:	da11      	bge.n	800c67e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	f003 020f 	and.w	r2, r3, #15
 800c660:	6879      	ldr	r1, [r7, #4]
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	440b      	add	r3, r1
 800c66c:	3323      	adds	r3, #35	@ 0x23
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d117      	bne.n	800c6a4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fbb1 	bl	800cdde <USBD_CtlError>
                  break;
 800c67c:	e055      	b.n	800c72a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	f003 020f 	and.w	r2, r3, #15
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	440b      	add	r3, r1
 800c690:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d104      	bne.n	800c6a4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fb9e 	bl	800cdde <USBD_CtlError>
                  break;
 800c6a2:	e042      	b.n	800c72a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	da0b      	bge.n	800c6c4 <USBD_StdEPReq+0x2b4>
 800c6ac:	7bbb      	ldrb	r3, [r7, #14]
 800c6ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	3310      	adds	r3, #16
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	4413      	add	r3, r2
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	e00b      	b.n	800c6dc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4413      	add	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	4413      	add	r3, r2
 800c6da:	3304      	adds	r3, #4
 800c6dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6de:	7bbb      	ldrb	r3, [r7, #14]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <USBD_StdEPReq+0x2da>
 800c6e4:	7bbb      	ldrb	r3, [r7, #14]
 800c6e6:	2b80      	cmp	r3, #128	@ 0x80
 800c6e8:	d103      	bne.n	800c6f2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	739a      	strb	r2, [r3, #14]
 800c6f0:	e00e      	b.n	800c710 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f001 f910 	bl	800d91c <USBD_LL_IsStallEP>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2201      	movs	r2, #1
 800c706:	739a      	strb	r2, [r3, #14]
 800c708:	e002      	b.n	800c710 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2200      	movs	r2, #0
 800c70e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	330e      	adds	r3, #14
 800c714:	2202      	movs	r2, #2
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fbdd 	bl	800ced8 <USBD_CtlSendData>
              break;
 800c71e:	e004      	b.n	800c72a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fb5b 	bl	800cdde <USBD_CtlError>
              break;
 800c728:	bf00      	nop
          }
          break;
 800c72a:	e004      	b.n	800c736 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fb55 	bl	800cdde <USBD_CtlError>
          break;
 800c734:	bf00      	nop
      }
      break;
 800c736:	e005      	b.n	800c744 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fb4f 	bl	800cdde <USBD_CtlError>
      break;
 800c740:	e000      	b.n	800c744 <USBD_StdEPReq+0x334>
      break;
 800c742:	bf00      	nop
  }

  return ret;
 800c744:	7bfb      	ldrb	r3, [r7, #15]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
	...

0800c750 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c75a:	2300      	movs	r3, #0
 800c75c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c762:	2300      	movs	r3, #0
 800c764:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	885b      	ldrh	r3, [r3, #2]
 800c76a:	0a1b      	lsrs	r3, r3, #8
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	3b01      	subs	r3, #1
 800c770:	2b06      	cmp	r3, #6
 800c772:	f200 8128 	bhi.w	800c9c6 <USBD_GetDescriptor+0x276>
 800c776:	a201      	add	r2, pc, #4	@ (adr r2, 800c77c <USBD_GetDescriptor+0x2c>)
 800c778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77c:	0800c799 	.word	0x0800c799
 800c780:	0800c7b1 	.word	0x0800c7b1
 800c784:	0800c7f1 	.word	0x0800c7f1
 800c788:	0800c9c7 	.word	0x0800c9c7
 800c78c:	0800c9c7 	.word	0x0800c9c7
 800c790:	0800c967 	.word	0x0800c967
 800c794:	0800c993 	.word	0x0800c993
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	7c12      	ldrb	r2, [r2, #16]
 800c7a4:	f107 0108 	add.w	r1, r7, #8
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4798      	blx	r3
 800c7ac:	60f8      	str	r0, [r7, #12]
      break;
 800c7ae:	e112      	b.n	800c9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7c1b      	ldrb	r3, [r3, #16]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10d      	bne.n	800c7d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7c0:	f107 0208 	add.w	r2, r7, #8
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	4798      	blx	r3
 800c7c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7d2:	e100      	b.n	800c9d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7dc:	f107 0208 	add.w	r2, r7, #8
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	4798      	blx	r3
 800c7e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	701a      	strb	r2, [r3, #0]
      break;
 800c7ee:	e0f2      	b.n	800c9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	885b      	ldrh	r3, [r3, #2]
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	2b05      	cmp	r3, #5
 800c7f8:	f200 80ac 	bhi.w	800c954 <USBD_GetDescriptor+0x204>
 800c7fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c804 <USBD_GetDescriptor+0xb4>)
 800c7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c802:	bf00      	nop
 800c804:	0800c81d 	.word	0x0800c81d
 800c808:	0800c851 	.word	0x0800c851
 800c80c:	0800c885 	.word	0x0800c885
 800c810:	0800c8b9 	.word	0x0800c8b9
 800c814:	0800c8ed 	.word	0x0800c8ed
 800c818:	0800c921 	.word	0x0800c921
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00b      	beq.n	800c840 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	7c12      	ldrb	r2, [r2, #16]
 800c834:	f107 0108 	add.w	r1, r7, #8
 800c838:	4610      	mov	r0, r2
 800c83a:	4798      	blx	r3
 800c83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c83e:	e091      	b.n	800c964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 facb 	bl	800cdde <USBD_CtlError>
            err++;
 800c848:	7afb      	ldrb	r3, [r7, #11]
 800c84a:	3301      	adds	r3, #1
 800c84c:	72fb      	strb	r3, [r7, #11]
          break;
 800c84e:	e089      	b.n	800c964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	7c12      	ldrb	r2, [r2, #16]
 800c868:	f107 0108 	add.w	r1, r7, #8
 800c86c:	4610      	mov	r0, r2
 800c86e:	4798      	blx	r3
 800c870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c872:	e077      	b.n	800c964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fab1 	bl	800cdde <USBD_CtlError>
            err++;
 800c87c:	7afb      	ldrb	r3, [r7, #11]
 800c87e:	3301      	adds	r3, #1
 800c880:	72fb      	strb	r3, [r7, #11]
          break;
 800c882:	e06f      	b.n	800c964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	7c12      	ldrb	r2, [r2, #16]
 800c89c:	f107 0108 	add.w	r1, r7, #8
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8a6:	e05d      	b.n	800c964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fa97 	bl	800cdde <USBD_CtlError>
            err++;
 800c8b0:	7afb      	ldrb	r3, [r7, #11]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8b6:	e055      	b.n	800c964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00b      	beq.n	800c8dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	7c12      	ldrb	r2, [r2, #16]
 800c8d0:	f107 0108 	add.w	r1, r7, #8
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8da:	e043      	b.n	800c964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fa7d 	bl	800cdde <USBD_CtlError>
            err++;
 800c8e4:	7afb      	ldrb	r3, [r7, #11]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ea:	e03b      	b.n	800c964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00b      	beq.n	800c910 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8fe:	695b      	ldr	r3, [r3, #20]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	7c12      	ldrb	r2, [r2, #16]
 800c904:	f107 0108 	add.w	r1, r7, #8
 800c908:	4610      	mov	r0, r2
 800c90a:	4798      	blx	r3
 800c90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c90e:	e029      	b.n	800c964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fa63 	bl	800cdde <USBD_CtlError>
            err++;
 800c918:	7afb      	ldrb	r3, [r7, #11]
 800c91a:	3301      	adds	r3, #1
 800c91c:	72fb      	strb	r3, [r7, #11]
          break;
 800c91e:	e021      	b.n	800c964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00b      	beq.n	800c944 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	7c12      	ldrb	r2, [r2, #16]
 800c938:	f107 0108 	add.w	r1, r7, #8
 800c93c:	4610      	mov	r0, r2
 800c93e:	4798      	blx	r3
 800c940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c942:	e00f      	b.n	800c964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fa49 	bl	800cdde <USBD_CtlError>
            err++;
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	3301      	adds	r3, #1
 800c950:	72fb      	strb	r3, [r7, #11]
          break;
 800c952:	e007      	b.n	800c964 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fa41 	bl	800cdde <USBD_CtlError>
          err++;
 800c95c:	7afb      	ldrb	r3, [r7, #11]
 800c95e:	3301      	adds	r3, #1
 800c960:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c962:	bf00      	nop
      }
      break;
 800c964:	e037      	b.n	800c9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	7c1b      	ldrb	r3, [r3, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d109      	bne.n	800c982 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c976:	f107 0208 	add.w	r2, r7, #8
 800c97a:	4610      	mov	r0, r2
 800c97c:	4798      	blx	r3
 800c97e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c980:	e029      	b.n	800c9d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fa2a 	bl	800cdde <USBD_CtlError>
        err++;
 800c98a:	7afb      	ldrb	r3, [r7, #11]
 800c98c:	3301      	adds	r3, #1
 800c98e:	72fb      	strb	r3, [r7, #11]
      break;
 800c990:	e021      	b.n	800c9d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	7c1b      	ldrb	r3, [r3, #16]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10d      	bne.n	800c9b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9a2:	f107 0208 	add.w	r2, r7, #8
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	4798      	blx	r3
 800c9aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	2207      	movs	r2, #7
 800c9b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9b4:	e00f      	b.n	800c9d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fa10 	bl	800cdde <USBD_CtlError>
        err++;
 800c9be:	7afb      	ldrb	r3, [r7, #11]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c9c4:	e007      	b.n	800c9d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c9c6:	6839      	ldr	r1, [r7, #0]
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fa08 	bl	800cdde <USBD_CtlError>
      err++;
 800c9ce:	7afb      	ldrb	r3, [r7, #11]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c9d4:	bf00      	nop
  }

  if (err != 0U)
 800c9d6:	7afb      	ldrb	r3, [r7, #11]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d11e      	bne.n	800ca1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	88db      	ldrh	r3, [r3, #6]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d016      	beq.n	800ca12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c9e4:	893b      	ldrh	r3, [r7, #8]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00e      	beq.n	800ca08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	88da      	ldrh	r2, [r3, #6]
 800c9ee:	893b      	ldrh	r3, [r7, #8]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	bf28      	it	cs
 800c9f4:	4613      	movcs	r3, r2
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9fa:	893b      	ldrh	r3, [r7, #8]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	68f9      	ldr	r1, [r7, #12]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fa69 	bl	800ced8 <USBD_CtlSendData>
 800ca06:	e009      	b.n	800ca1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f9e7 	bl	800cdde <USBD_CtlError>
 800ca10:	e004      	b.n	800ca1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fac1 	bl	800cf9a <USBD_CtlSendStatus>
 800ca18:	e000      	b.n	800ca1c <USBD_GetDescriptor+0x2cc>
    return;
 800ca1a:	bf00      	nop
  }
}
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop

0800ca24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	889b      	ldrh	r3, [r3, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d131      	bne.n	800ca9a <USBD_SetAddress+0x76>
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	88db      	ldrh	r3, [r3, #6]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d12d      	bne.n	800ca9a <USBD_SetAddress+0x76>
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	885b      	ldrh	r3, [r3, #2]
 800ca42:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca44:	d829      	bhi.n	800ca9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	885b      	ldrh	r3, [r3, #2]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d104      	bne.n	800ca68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f9bc 	bl	800cdde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca66:	e01d      	b.n	800caa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	7bfa      	ldrb	r2, [r7, #15]
 800ca6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	4619      	mov	r1, r3
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 ff7d 	bl	800d974 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fa8d 	bl	800cf9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d004      	beq.n	800ca90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2202      	movs	r2, #2
 800ca8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8e:	e009      	b.n	800caa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca98:	e004      	b.n	800caa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 f99e 	bl	800cdde <USBD_CtlError>
  }
}
 800caa2:	bf00      	nop
 800caa4:	bf00      	nop
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	885b      	ldrh	r3, [r3, #2]
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	4b4e      	ldr	r3, [pc, #312]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cac2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cac4:	4b4d      	ldr	r3, [pc, #308]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d905      	bls.n	800cad8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f985 	bl	800cdde <USBD_CtlError>
    return USBD_FAIL;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e08c      	b.n	800cbf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d002      	beq.n	800caea <USBD_SetConfig+0x3e>
 800cae4:	2b03      	cmp	r3, #3
 800cae6:	d029      	beq.n	800cb3c <USBD_SetConfig+0x90>
 800cae8:	e075      	b.n	800cbd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800caea:	4b44      	ldr	r3, [pc, #272]	@ (800cbfc <USBD_SetConfig+0x150>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d020      	beq.n	800cb34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800caf2:	4b42      	ldr	r3, [pc, #264]	@ (800cbfc <USBD_SetConfig+0x150>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	461a      	mov	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cafc:	4b3f      	ldr	r3, [pc, #252]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7fe ffcd 	bl	800baa2 <USBD_SetClassConfig>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d008      	beq.n	800cb24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f962 	bl	800cdde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2202      	movs	r2, #2
 800cb1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb22:	e065      	b.n	800cbf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fa38 	bl	800cf9a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2203      	movs	r2, #3
 800cb2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb32:	e05d      	b.n	800cbf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fa30 	bl	800cf9a <USBD_CtlSendStatus>
      break;
 800cb3a:	e059      	b.n	800cbf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb3c:	4b2f      	ldr	r3, [pc, #188]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d112      	bne.n	800cb6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2202      	movs	r2, #2
 800cb48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb4c:	4b2b      	ldr	r3, [pc, #172]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb56:	4b29      	ldr	r3, [pc, #164]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7fe ffbc 	bl	800bada <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fa19 	bl	800cf9a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb68:	e042      	b.n	800cbf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb6a:	4b24      	ldr	r3, [pc, #144]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d02a      	beq.n	800cbce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7fe ffaa 	bl	800bada <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb86:	4b1d      	ldr	r3, [pc, #116]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb90:	4b1a      	ldr	r3, [pc, #104]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7fe ff83 	bl	800baa2 <USBD_SetClassConfig>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00f      	beq.n	800cbc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f918 	bl	800cdde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7fe ff8f 	bl	800bada <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cbc4:	e014      	b.n	800cbf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f9e7 	bl	800cf9a <USBD_CtlSendStatus>
      break;
 800cbcc:	e010      	b.n	800cbf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f9e3 	bl	800cf9a <USBD_CtlSendStatus>
      break;
 800cbd4:	e00c      	b.n	800cbf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f900 	bl	800cdde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbde:	4b07      	ldr	r3, [pc, #28]	@ (800cbfc <USBD_SetConfig+0x150>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7fe ff78 	bl	800bada <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbea:	2303      	movs	r3, #3
 800cbec:	73fb      	strb	r3, [r7, #15]
      break;
 800cbee:	bf00      	nop
  }

  return ret;
 800cbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	200007e8 	.word	0x200007e8

0800cc00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	88db      	ldrh	r3, [r3, #6]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d004      	beq.n	800cc1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f8e2 	bl	800cdde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc1a:	e023      	b.n	800cc64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	dc02      	bgt.n	800cc2e <USBD_GetConfig+0x2e>
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	dc03      	bgt.n	800cc34 <USBD_GetConfig+0x34>
 800cc2c:	e015      	b.n	800cc5a <USBD_GetConfig+0x5a>
 800cc2e:	2b03      	cmp	r3, #3
 800cc30:	d00b      	beq.n	800cc4a <USBD_GetConfig+0x4a>
 800cc32:	e012      	b.n	800cc5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	2201      	movs	r2, #1
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f948 	bl	800ced8 <USBD_CtlSendData>
        break;
 800cc48:	e00c      	b.n	800cc64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	2201      	movs	r2, #1
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f940 	bl	800ced8 <USBD_CtlSendData>
        break;
 800cc58:	e004      	b.n	800cc64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f8be 	bl	800cdde <USBD_CtlError>
        break;
 800cc62:	bf00      	nop
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d81e      	bhi.n	800ccc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	88db      	ldrh	r3, [r3, #6]
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d004      	beq.n	800cc96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f8a5 	bl	800cdde <USBD_CtlError>
        break;
 800cc94:	e01a      	b.n	800cccc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d005      	beq.n	800ccb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	f043 0202 	orr.w	r2, r3, #2
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	330c      	adds	r3, #12
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f90c 	bl	800ced8 <USBD_CtlSendData>
      break;
 800ccc0:	e004      	b.n	800cccc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f88a 	bl	800cdde <USBD_CtlError>
      break;
 800ccca:	bf00      	nop
  }
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	885b      	ldrh	r3, [r3, #2]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d107      	bne.n	800ccf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f953 	bl	800cf9a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ccf4:	e013      	b.n	800cd1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	885b      	ldrh	r3, [r3, #2]
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d10b      	bne.n	800cd16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	889b      	ldrh	r3, [r3, #4]
 800cd02:	0a1b      	lsrs	r3, r3, #8
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f943 	bl	800cf9a <USBD_CtlSendStatus>
}
 800cd14:	e003      	b.n	800cd1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd16:	6839      	ldr	r1, [r7, #0]
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f860 	bl	800cdde <USBD_CtlError>
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b082      	sub	sp, #8
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d80b      	bhi.n	800cd56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	885b      	ldrh	r3, [r3, #2]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d10c      	bne.n	800cd60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f923 	bl	800cf9a <USBD_CtlSendStatus>
      }
      break;
 800cd54:	e004      	b.n	800cd60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f840 	bl	800cdde <USBD_CtlError>
      break;
 800cd5e:	e000      	b.n	800cd62 <USBD_ClrFeature+0x3c>
      break;
 800cd60:	bf00      	nop
  }
}
 800cd62:	bf00      	nop
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	781a      	ldrb	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3301      	adds	r3, #1
 800cd84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	781a      	ldrb	r2, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3301      	adds	r3, #1
 800cd92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff fa3d 	bl	800c214 <SWAPBYTE>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3301      	adds	r3, #1
 800cda6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f7ff fa30 	bl	800c214 <SWAPBYTE>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7ff fa23 	bl	800c214 <SWAPBYTE>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	80da      	strh	r2, [r3, #6]
}
 800cdd6:	bf00      	nop
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b082      	sub	sp, #8
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cde8:	2180      	movs	r1, #128	@ 0x80
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fd58 	bl	800d8a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fd54 	bl	800d8a0 <USBD_LL_StallEP>
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d042      	beq.n	800ce9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ce1a:	6938      	ldr	r0, [r7, #16]
 800ce1c:	f000 f842 	bl	800cea4 <USBD_GetLen>
 800ce20:	4603      	mov	r3, r0
 800ce22:	3301      	adds	r3, #1
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce2a:	d808      	bhi.n	800ce3e <USBD_GetString+0x3e>
 800ce2c:	6938      	ldr	r0, [r7, #16]
 800ce2e:	f000 f839 	bl	800cea4 <USBD_GetLen>
 800ce32:	4603      	mov	r3, r0
 800ce34:	3301      	adds	r3, #1
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	e001      	b.n	800ce42 <USBD_GetString+0x42>
 800ce3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	7812      	ldrb	r2, [r2, #0]
 800ce50:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
 800ce54:	3301      	adds	r3, #1
 800ce56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	2203      	movs	r2, #3
 800ce60:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	3301      	adds	r3, #1
 800ce66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce68:	e013      	b.n	800ce92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	4413      	add	r3, r2
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	7812      	ldrb	r2, [r2, #0]
 800ce74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	613b      	str	r3, [r7, #16]
    idx++;
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	4413      	add	r3, r2
 800ce88:	2200      	movs	r2, #0
 800ce8a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce8c:	7dfb      	ldrb	r3, [r7, #23]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1e7      	bne.n	800ce6a <USBD_GetString+0x6a>
 800ce9a:	e000      	b.n	800ce9e <USBD_GetString+0x9e>
    return;
 800ce9c:	bf00      	nop
  }
}
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ceb4:	e005      	b.n	800cec2 <USBD_GetLen+0x1e>
  {
    len++;
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	3301      	adds	r3, #1
 800cec0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1f5      	bne.n	800ceb6 <USBD_GetLen+0x12>
  }

  return len;
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2202      	movs	r2, #2
 800cee8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	2100      	movs	r1, #0
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f000 fd54 	bl	800d9b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	68ba      	ldr	r2, [r7, #8]
 800cf24:	2100      	movs	r1, #0
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f000 fd43 	bl	800d9b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2203      	movs	r2, #3
 800cf46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	2100      	movs	r1, #0
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 fd43 	bl	800d9f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	2100      	movs	r1, #0
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f000 fd32 	bl	800d9f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2204      	movs	r2, #4
 800cfa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2200      	movs	r2, #0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fcfe 	bl	800d9b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2205      	movs	r2, #5
 800cfcc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fd0c 	bl	800d9f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfec:	2200      	movs	r2, #0
 800cfee:	4912      	ldr	r1, [pc, #72]	@ (800d038 <MX_USB_DEVICE_Init+0x50>)
 800cff0:	4812      	ldr	r0, [pc, #72]	@ (800d03c <MX_USB_DEVICE_Init+0x54>)
 800cff2:	f7fe fcd9 	bl	800b9a8 <USBD_Init>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cffc:	f7f4 f9ba 	bl	8001374 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d000:	490f      	ldr	r1, [pc, #60]	@ (800d040 <MX_USB_DEVICE_Init+0x58>)
 800d002:	480e      	ldr	r0, [pc, #56]	@ (800d03c <MX_USB_DEVICE_Init+0x54>)
 800d004:	f7fe fd00 	bl	800ba08 <USBD_RegisterClass>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d00e:	f7f4 f9b1 	bl	8001374 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d012:	490c      	ldr	r1, [pc, #48]	@ (800d044 <MX_USB_DEVICE_Init+0x5c>)
 800d014:	4809      	ldr	r0, [pc, #36]	@ (800d03c <MX_USB_DEVICE_Init+0x54>)
 800d016:	f7fe fbf7 	bl	800b808 <USBD_CDC_RegisterInterface>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d020:	f7f4 f9a8 	bl	8001374 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d024:	4805      	ldr	r0, [pc, #20]	@ (800d03c <MX_USB_DEVICE_Init+0x54>)
 800d026:	f7fe fd25 	bl	800ba74 <USBD_Start>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d030:	f7f4 f9a0 	bl	8001374 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d034:	bf00      	nop
 800d036:	bd80      	pop	{r7, pc}
 800d038:	200000c0 	.word	0x200000c0
 800d03c:	200007ec 	.word	0x200007ec
 800d040:	20000024 	.word	0x20000024
 800d044:	200000ac 	.word	0x200000ac

0800d048 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d04c:	2200      	movs	r2, #0
 800d04e:	4905      	ldr	r1, [pc, #20]	@ (800d064 <CDC_Init_FS+0x1c>)
 800d050:	4805      	ldr	r0, [pc, #20]	@ (800d068 <CDC_Init_FS+0x20>)
 800d052:	f7fe fbf3 	bl	800b83c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d056:	4905      	ldr	r1, [pc, #20]	@ (800d06c <CDC_Init_FS+0x24>)
 800d058:	4803      	ldr	r0, [pc, #12]	@ (800d068 <CDC_Init_FS+0x20>)
 800d05a:	f7fe fc11 	bl	800b880 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d05e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d060:	4618      	mov	r0, r3
 800d062:	bd80      	pop	{r7, pc}
 800d064:	20000cc8 	.word	0x20000cc8
 800d068:	200007ec 	.word	0x200007ec
 800d06c:	20000ac8 	.word	0x20000ac8

0800d070 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d074:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d076:	4618      	mov	r0, r3
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	4603      	mov	r3, r0
 800d088:	6039      	str	r1, [r7, #0]
 800d08a:	71fb      	strb	r3, [r7, #7]
 800d08c:	4613      	mov	r3, r2
 800d08e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	2b23      	cmp	r3, #35	@ 0x23
 800d094:	f200 8098 	bhi.w	800d1c8 <CDC_Control_FS+0x148>
 800d098:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a0 <CDC_Control_FS+0x20>)
 800d09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d09e:	bf00      	nop
 800d0a0:	0800d1c9 	.word	0x0800d1c9
 800d0a4:	0800d1c9 	.word	0x0800d1c9
 800d0a8:	0800d1c9 	.word	0x0800d1c9
 800d0ac:	0800d1c9 	.word	0x0800d1c9
 800d0b0:	0800d1c9 	.word	0x0800d1c9
 800d0b4:	0800d1c9 	.word	0x0800d1c9
 800d0b8:	0800d1c9 	.word	0x0800d1c9
 800d0bc:	0800d1c9 	.word	0x0800d1c9
 800d0c0:	0800d1c9 	.word	0x0800d1c9
 800d0c4:	0800d1c9 	.word	0x0800d1c9
 800d0c8:	0800d1c9 	.word	0x0800d1c9
 800d0cc:	0800d1c9 	.word	0x0800d1c9
 800d0d0:	0800d1c9 	.word	0x0800d1c9
 800d0d4:	0800d1c9 	.word	0x0800d1c9
 800d0d8:	0800d1c9 	.word	0x0800d1c9
 800d0dc:	0800d1c9 	.word	0x0800d1c9
 800d0e0:	0800d1c9 	.word	0x0800d1c9
 800d0e4:	0800d1c9 	.word	0x0800d1c9
 800d0e8:	0800d1c9 	.word	0x0800d1c9
 800d0ec:	0800d1c9 	.word	0x0800d1c9
 800d0f0:	0800d1c9 	.word	0x0800d1c9
 800d0f4:	0800d1c9 	.word	0x0800d1c9
 800d0f8:	0800d1c9 	.word	0x0800d1c9
 800d0fc:	0800d1c9 	.word	0x0800d1c9
 800d100:	0800d1c9 	.word	0x0800d1c9
 800d104:	0800d1c9 	.word	0x0800d1c9
 800d108:	0800d1c9 	.word	0x0800d1c9
 800d10c:	0800d1c9 	.word	0x0800d1c9
 800d110:	0800d1c9 	.word	0x0800d1c9
 800d114:	0800d1c9 	.word	0x0800d1c9
 800d118:	0800d1c9 	.word	0x0800d1c9
 800d11c:	0800d1c9 	.word	0x0800d1c9
 800d120:	0800d131 	.word	0x0800d131
 800d124:	0800d175 	.word	0x0800d175
 800d128:	0800d1c9 	.word	0x0800d1c9
 800d12c:	0800d1c9 	.word	0x0800d1c9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	461a      	mov	r2, r3
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	3301      	adds	r3, #1
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	021b      	lsls	r3, r3, #8
 800d13e:	431a      	orrs	r2, r3
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	3302      	adds	r3, #2
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	041b      	lsls	r3, r3, #16
 800d148:	431a      	orrs	r2, r3
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	3303      	adds	r3, #3
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	061b      	lsls	r3, r3, #24
 800d152:	4313      	orrs	r3, r2
 800d154:	461a      	mov	r2, r3
 800d156:	4b20      	ldr	r3, [pc, #128]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d158:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	791a      	ldrb	r2, [r3, #4]
 800d15e:	4b1e      	ldr	r3, [pc, #120]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d160:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	795a      	ldrb	r2, [r3, #5]
 800d166:	4b1c      	ldr	r3, [pc, #112]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d168:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	799a      	ldrb	r2, [r3, #6]
 800d16e:	4b1a      	ldr	r3, [pc, #104]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d170:	719a      	strb	r2, [r3, #6]
     break;
 800d172:	e02a      	b.n	800d1ca <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d174:	4b18      	ldr	r3, [pc, #96]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d17e:	4b16      	ldr	r3, [pc, #88]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	0a1a      	lsrs	r2, r3, #8
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	3301      	adds	r3, #1
 800d188:	b2d2      	uxtb	r2, r2
 800d18a:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d18c:	4b12      	ldr	r3, [pc, #72]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	0c1a      	lsrs	r2, r3, #16
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	3302      	adds	r3, #2
 800d196:	b2d2      	uxtb	r2, r2
 800d198:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d19a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	0e1a      	lsrs	r2, r3, #24
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	3303      	adds	r3, #3
 800d1a4:	b2d2      	uxtb	r2, r2
 800d1a6:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d1ae:	7912      	ldrb	r2, [r2, #4]
 800d1b0:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	3305      	adds	r3, #5
 800d1b6:	4a08      	ldr	r2, [pc, #32]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d1b8:	7952      	ldrb	r2, [r2, #5]
 800d1ba:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	3306      	adds	r3, #6
 800d1c0:	4a05      	ldr	r2, [pc, #20]	@ (800d1d8 <CDC_Control_FS+0x158>)
 800d1c2:	7992      	ldrb	r2, [r2, #6]
 800d1c4:	701a      	strb	r2, [r3, #0]
     break;
 800d1c6:	e000      	b.n	800d1ca <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1c8:	bf00      	nop
  }

  return (USBD_OK);
 800d1ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	200000a4 	.word	0x200000a4

0800d1dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800d1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d218 <CDC_Receive_FS+0x3c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d007      	beq.n	800d1fe <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800d1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <CDC_Receive_FS+0x3c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	6812      	ldr	r2, [r2, #0]
 800d1f6:	b292      	uxth	r2, r2
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1fe:	6879      	ldr	r1, [r7, #4]
 800d200:	4806      	ldr	r0, [pc, #24]	@ (800d21c <CDC_Receive_FS+0x40>)
 800d202:	f7fe fb3d 	bl	800b880 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d206:	4805      	ldr	r0, [pc, #20]	@ (800d21c <CDC_Receive_FS+0x40>)
 800d208:	f7fe fb98 	bl	800b93c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d20c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3708      	adds	r7, #8
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20000ec8 	.word	0x20000ec8
 800d21c:	200007ec 	.word	0x200007ec

0800d220 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d230:	4b0d      	ldr	r3, [pc, #52]	@ (800d268 <CDC_Transmit_FS+0x48>)
 800d232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d236:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d242:	2301      	movs	r3, #1
 800d244:	e00b      	b.n	800d25e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d246:	887b      	ldrh	r3, [r7, #2]
 800d248:	461a      	mov	r2, r3
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	4806      	ldr	r0, [pc, #24]	@ (800d268 <CDC_Transmit_FS+0x48>)
 800d24e:	f7fe faf5 	bl	800b83c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d252:	4805      	ldr	r0, [pc, #20]	@ (800d268 <CDC_Transmit_FS+0x48>)
 800d254:	f7fe fb32 	bl	800b8bc <USBD_CDC_TransmitPacket>
 800d258:	4603      	mov	r3, r0
 800d25a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	200007ec 	.word	0x200007ec

0800d26c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	4613      	mov	r3, r2
 800d278:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d27e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d282:	4618      	mov	r0, r3
 800d284:	371c      	adds	r7, #28
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
	...

0800d290 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800d298:	4a04      	ldr	r2, [pc, #16]	@ (800d2ac <CDC_AttachRxData+0x1c>)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6013      	str	r3, [r2, #0]
}
 800d29e:	bf00      	nop
 800d2a0:	370c      	adds	r7, #12
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	20000ec8 	.word	0x20000ec8

0800d2b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	6039      	str	r1, [r7, #0]
 800d2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	2212      	movs	r2, #18
 800d2c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2c2:	4b03      	ldr	r3, [pc, #12]	@ (800d2d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	200000dc 	.word	0x200000dc

0800d2d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	2204      	movs	r2, #4
 800d2e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2e6:	4b03      	ldr	r3, [pc, #12]	@ (800d2f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	200000f0 	.word	0x200000f0

0800d2f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d30a:	683a      	ldr	r2, [r7, #0]
 800d30c:	4907      	ldr	r1, [pc, #28]	@ (800d32c <USBD_FS_ProductStrDescriptor+0x34>)
 800d30e:	4808      	ldr	r0, [pc, #32]	@ (800d330 <USBD_FS_ProductStrDescriptor+0x38>)
 800d310:	f7ff fd76 	bl	800ce00 <USBD_GetString>
 800d314:	e004      	b.n	800d320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	4904      	ldr	r1, [pc, #16]	@ (800d32c <USBD_FS_ProductStrDescriptor+0x34>)
 800d31a:	4805      	ldr	r0, [pc, #20]	@ (800d330 <USBD_FS_ProductStrDescriptor+0x38>)
 800d31c:	f7ff fd70 	bl	800ce00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d320:	4b02      	ldr	r3, [pc, #8]	@ (800d32c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d322:	4618      	mov	r0, r3
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20000ecc 	.word	0x20000ecc
 800d330:	0800e468 	.word	0x0800e468

0800d334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	4603      	mov	r3, r0
 800d33c:	6039      	str	r1, [r7, #0]
 800d33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d340:	683a      	ldr	r2, [r7, #0]
 800d342:	4904      	ldr	r1, [pc, #16]	@ (800d354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d344:	4804      	ldr	r0, [pc, #16]	@ (800d358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d346:	f7ff fd5b 	bl	800ce00 <USBD_GetString>
  return USBD_StrDesc;
 800d34a:	4b02      	ldr	r3, [pc, #8]	@ (800d354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20000ecc 	.word	0x20000ecc
 800d358:	0800e480 	.word	0x0800e480

0800d35c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	221a      	movs	r2, #26
 800d36c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d36e:	f000 f843 	bl	800d3f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d372:	4b02      	ldr	r3, [pc, #8]	@ (800d37c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200000f4 	.word	0x200000f4

0800d380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	4603      	mov	r3, r0
 800d388:	6039      	str	r1, [r7, #0]
 800d38a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d38c:	79fb      	ldrb	r3, [r7, #7]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d105      	bne.n	800d39e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	4907      	ldr	r1, [pc, #28]	@ (800d3b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d396:	4808      	ldr	r0, [pc, #32]	@ (800d3b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d398:	f7ff fd32 	bl	800ce00 <USBD_GetString>
 800d39c:	e004      	b.n	800d3a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	4904      	ldr	r1, [pc, #16]	@ (800d3b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3a2:	4805      	ldr	r0, [pc, #20]	@ (800d3b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3a4:	f7ff fd2c 	bl	800ce00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3a8:	4b02      	ldr	r3, [pc, #8]	@ (800d3b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20000ecc 	.word	0x20000ecc
 800d3b8:	0800e494 	.word	0x0800e494

0800d3bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	6039      	str	r1, [r7, #0]
 800d3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d105      	bne.n	800d3da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	4907      	ldr	r1, [pc, #28]	@ (800d3f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3d2:	4808      	ldr	r0, [pc, #32]	@ (800d3f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3d4:	f7ff fd14 	bl	800ce00 <USBD_GetString>
 800d3d8:	e004      	b.n	800d3e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	4904      	ldr	r1, [pc, #16]	@ (800d3f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3de:	4805      	ldr	r0, [pc, #20]	@ (800d3f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3e0:	f7ff fd0e 	bl	800ce00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3e4:	4b02      	ldr	r3, [pc, #8]	@ (800d3f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20000ecc 	.word	0x20000ecc
 800d3f4:	0800e4a0 	.word	0x0800e4a0

0800d3f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d43c <Get_SerialNum+0x44>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d404:	4b0e      	ldr	r3, [pc, #56]	@ (800d440 <Get_SerialNum+0x48>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d40a:	4b0e      	ldr	r3, [pc, #56]	@ (800d444 <Get_SerialNum+0x4c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4413      	add	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d009      	beq.n	800d432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d41e:	2208      	movs	r2, #8
 800d420:	4909      	ldr	r1, [pc, #36]	@ (800d448 <Get_SerialNum+0x50>)
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f000 f814 	bl	800d450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d428:	2204      	movs	r2, #4
 800d42a:	4908      	ldr	r1, [pc, #32]	@ (800d44c <Get_SerialNum+0x54>)
 800d42c:	68b8      	ldr	r0, [r7, #8]
 800d42e:	f000 f80f 	bl	800d450 <IntToUnicode>
  }
}
 800d432:	bf00      	nop
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	1fff7a10 	.word	0x1fff7a10
 800d440:	1fff7a14 	.word	0x1fff7a14
 800d444:	1fff7a18 	.word	0x1fff7a18
 800d448:	200000f6 	.word	0x200000f6
 800d44c:	20000106 	.word	0x20000106

0800d450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d450:	b480      	push	{r7}
 800d452:	b087      	sub	sp, #28
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	4613      	mov	r3, r2
 800d45c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d462:	2300      	movs	r3, #0
 800d464:	75fb      	strb	r3, [r7, #23]
 800d466:	e027      	b.n	800d4b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	0f1b      	lsrs	r3, r3, #28
 800d46c:	2b09      	cmp	r3, #9
 800d46e:	d80b      	bhi.n	800d488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	0f1b      	lsrs	r3, r3, #28
 800d474:	b2da      	uxtb	r2, r3
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	005b      	lsls	r3, r3, #1
 800d47a:	4619      	mov	r1, r3
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	440b      	add	r3, r1
 800d480:	3230      	adds	r2, #48	@ 0x30
 800d482:	b2d2      	uxtb	r2, r2
 800d484:	701a      	strb	r2, [r3, #0]
 800d486:	e00a      	b.n	800d49e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	0f1b      	lsrs	r3, r3, #28
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	4619      	mov	r1, r3
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	440b      	add	r3, r1
 800d498:	3237      	adds	r2, #55	@ 0x37
 800d49a:	b2d2      	uxtb	r2, r2
 800d49c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	011b      	lsls	r3, r3, #4
 800d4a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4b2:	7dfb      	ldrb	r3, [r7, #23]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	75fb      	strb	r3, [r7, #23]
 800d4b8:	7dfa      	ldrb	r2, [r7, #23]
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d3d3      	bcc.n	800d468 <IntToUnicode+0x18>
  }
}
 800d4c0:	bf00      	nop
 800d4c2:	bf00      	nop
 800d4c4:	371c      	adds	r7, #28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
	...

0800d4d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08a      	sub	sp, #40	@ 0x28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4d8:	f107 0314 	add.w	r3, r7, #20
 800d4dc:	2200      	movs	r2, #0
 800d4de:	601a      	str	r2, [r3, #0]
 800d4e0:	605a      	str	r2, [r3, #4]
 800d4e2:	609a      	str	r2, [r3, #8]
 800d4e4:	60da      	str	r2, [r3, #12]
 800d4e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d4f0:	d13a      	bne.n	800d568 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	613b      	str	r3, [r7, #16]
 800d4f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4fa:	4a1d      	ldr	r2, [pc, #116]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d4fc:	f043 0301 	orr.w	r3, r3, #1
 800d500:	6313      	str	r3, [r2, #48]	@ 0x30
 800d502:	4b1b      	ldr	r3, [pc, #108]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	613b      	str	r3, [r7, #16]
 800d50c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d50e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d514:	2302      	movs	r3, #2
 800d516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d518:	2300      	movs	r3, #0
 800d51a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d51c:	2303      	movs	r3, #3
 800d51e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d520:	230a      	movs	r3, #10
 800d522:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d524:	f107 0314 	add.w	r3, r7, #20
 800d528:	4619      	mov	r1, r3
 800d52a:	4812      	ldr	r0, [pc, #72]	@ (800d574 <HAL_PCD_MspInit+0xa4>)
 800d52c:	f7f5 ff76 	bl	800341c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d530:	4b0f      	ldr	r3, [pc, #60]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d534:	4a0e      	ldr	r2, [pc, #56]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d53a:	6353      	str	r3, [r2, #52]	@ 0x34
 800d53c:	2300      	movs	r3, #0
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	4b0b      	ldr	r3, [pc, #44]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d544:	4a0a      	ldr	r2, [pc, #40]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d54a:	6453      	str	r3, [r2, #68]	@ 0x44
 800d54c:	4b08      	ldr	r3, [pc, #32]	@ (800d570 <HAL_PCD_MspInit+0xa0>)
 800d54e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d558:	2200      	movs	r2, #0
 800d55a:	2100      	movs	r1, #0
 800d55c:	2043      	movs	r0, #67	@ 0x43
 800d55e:	f7f5 fb7a 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d562:	2043      	movs	r0, #67	@ 0x43
 800d564:	f7f5 fb93 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d568:	bf00      	nop
 800d56a:	3728      	adds	r7, #40	@ 0x28
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	40023800 	.word	0x40023800
 800d574:	40020000 	.word	0x40020000

0800d578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d58c:	4619      	mov	r1, r3
 800d58e:	4610      	mov	r0, r2
 800d590:	f7fe fabd 	bl	800bb0e <USBD_LL_SetupStage>
}
 800d594:	bf00      	nop
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5ae:	78fa      	ldrb	r2, [r7, #3]
 800d5b0:	6879      	ldr	r1, [r7, #4]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	00db      	lsls	r3, r3, #3
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	440b      	add	r3, r1
 800d5bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	78fb      	ldrb	r3, [r7, #3]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	f7fe faf7 	bl	800bbb8 <USBD_LL_DataOutStage>
}
 800d5ca:	bf00      	nop
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b082      	sub	sp, #8
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	460b      	mov	r3, r1
 800d5dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5e4:	78fa      	ldrb	r2, [r7, #3]
 800d5e6:	6879      	ldr	r1, [r7, #4]
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	4413      	add	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	440b      	add	r3, r1
 800d5f2:	3320      	adds	r3, #32
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	78fb      	ldrb	r3, [r7, #3]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	f7fe fb99 	bl	800bd30 <USBD_LL_DataInStage>
}
 800d5fe:	bf00      	nop
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b082      	sub	sp, #8
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe fcdd 	bl	800bfd4 <USBD_LL_SOF>
}
 800d61a:	bf00      	nop
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d62a:	2301      	movs	r3, #1
 800d62c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	79db      	ldrb	r3, [r3, #7]
 800d632:	2b02      	cmp	r3, #2
 800d634:	d001      	beq.n	800d63a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d636:	f7f3 fe9d 	bl	8001374 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d640:	7bfa      	ldrb	r2, [r7, #15]
 800d642:	4611      	mov	r1, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe fc81 	bl	800bf4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe fc28 	bl	800bea6 <USBD_LL_Reset>
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fc7c 	bl	800bf6c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	6812      	ldr	r2, [r2, #0]
 800d682:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d686:	f043 0301 	orr.w	r3, r3, #1
 800d68a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	7adb      	ldrb	r3, [r3, #11]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d694:	4b04      	ldr	r3, [pc, #16]	@ (800d6a8 <HAL_PCD_SuspendCallback+0x48>)
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	4a03      	ldr	r2, [pc, #12]	@ (800d6a8 <HAL_PCD_SuspendCallback+0x48>)
 800d69a:	f043 0306 	orr.w	r3, r3, #6
 800d69e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	e000ed00 	.word	0xe000ed00

0800d6ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fc72 	bl	800bfa4 <USBD_LL_Resume>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6da:	78fa      	ldrb	r2, [r7, #3]
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fe fcca 	bl	800c078 <USBD_LL_IsoOUTIncomplete>
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6fe:	78fa      	ldrb	r2, [r7, #3]
 800d700:	4611      	mov	r1, r2
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fc86 	bl	800c014 <USBD_LL_IsoINIncomplete>
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fcdc 	bl	800c0dc <USBD_LL_DevConnected>
}
 800d724:	bf00      	nop
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fcd9 	bl	800c0f2 <USBD_LL_DevDisconnected>
}
 800d740:	bf00      	nop
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d13c      	bne.n	800d7d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d758:	4a20      	ldr	r2, [pc, #128]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a1e      	ldr	r2, [pc, #120]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d764:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d768:	4b1c      	ldr	r3, [pc, #112]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d76a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d76e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d770:	4b1a      	ldr	r3, [pc, #104]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d772:	2204      	movs	r2, #4
 800d774:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d776:	4b19      	ldr	r3, [pc, #100]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d778:	2202      	movs	r2, #2
 800d77a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d77c:	4b17      	ldr	r3, [pc, #92]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d77e:	2200      	movs	r2, #0
 800d780:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d782:	4b16      	ldr	r3, [pc, #88]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d784:	2202      	movs	r2, #2
 800d786:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d788:	4b14      	ldr	r3, [pc, #80]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d78e:	4b13      	ldr	r3, [pc, #76]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d790:	2200      	movs	r2, #0
 800d792:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d794:	4b11      	ldr	r3, [pc, #68]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d796:	2200      	movs	r2, #0
 800d798:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d79a:	4b10      	ldr	r3, [pc, #64]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d7a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d7a6:	480d      	ldr	r0, [pc, #52]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d7a8:	f7f9 fa97 	bl	8006cda <HAL_PCD_Init>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7b2:	f7f3 fddf 	bl	8001374 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7b6:	2180      	movs	r1, #128	@ 0x80
 800d7b8:	4808      	ldr	r0, [pc, #32]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d7ba:	f7fa fcc4 	bl	8008146 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7be:	2240      	movs	r2, #64	@ 0x40
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	4806      	ldr	r0, [pc, #24]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d7c4:	f7fa fc78 	bl	80080b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7c8:	2280      	movs	r2, #128	@ 0x80
 800d7ca:	2101      	movs	r1, #1
 800d7cc:	4803      	ldr	r0, [pc, #12]	@ (800d7dc <USBD_LL_Init+0x94>)
 800d7ce:	f7fa fc73 	bl	80080b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	200010cc 	.word	0x200010cc

0800d7e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7f9 fb7e 	bl	8006ef8 <HAL_PCD_Start>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 f942 	bl	800da8c <USBD_Get_USB_Status>
 800d808:	4603      	mov	r3, r0
 800d80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	4608      	mov	r0, r1
 800d820:	4611      	mov	r1, r2
 800d822:	461a      	mov	r2, r3
 800d824:	4603      	mov	r3, r0
 800d826:	70fb      	strb	r3, [r7, #3]
 800d828:	460b      	mov	r3, r1
 800d82a:	70bb      	strb	r3, [r7, #2]
 800d82c:	4613      	mov	r3, r2
 800d82e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d83e:	78bb      	ldrb	r3, [r7, #2]
 800d840:	883a      	ldrh	r2, [r7, #0]
 800d842:	78f9      	ldrb	r1, [r7, #3]
 800d844:	f7fa f852 	bl	80078ec <HAL_PCD_EP_Open>
 800d848:	4603      	mov	r3, r0
 800d84a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 f91c 	bl	800da8c <USBD_Get_USB_Status>
 800d854:	4603      	mov	r3, r0
 800d856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d858:	7bbb      	ldrb	r3, [r7, #14]
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b084      	sub	sp, #16
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	460b      	mov	r3, r1
 800d86c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d86e:	2300      	movs	r3, #0
 800d870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d872:	2300      	movs	r3, #0
 800d874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d87c:	78fa      	ldrb	r2, [r7, #3]
 800d87e:	4611      	mov	r1, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f7fa f89d 	bl	80079c0 <HAL_PCD_EP_Close>
 800d886:	4603      	mov	r3, r0
 800d888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f000 f8fd 	bl	800da8c <USBD_Get_USB_Status>
 800d892:	4603      	mov	r3, r0
 800d894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d896:	7bbb      	ldrb	r3, [r7, #14]
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8ba:	78fa      	ldrb	r2, [r7, #3]
 800d8bc:	4611      	mov	r1, r2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fa f955 	bl	8007b6e <HAL_PCD_EP_SetStall>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 f8de 	bl	800da8c <USBD_Get_USB_Status>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b084      	sub	sp, #16
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8f8:	78fa      	ldrb	r2, [r7, #3]
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fa f999 	bl	8007c34 <HAL_PCD_EP_ClrStall>
 800d902:	4603      	mov	r3, r0
 800d904:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 f8bf 	bl	800da8c <USBD_Get_USB_Status>
 800d90e:	4603      	mov	r3, r0
 800d910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d912:	7bbb      	ldrb	r3, [r7, #14]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	460b      	mov	r3, r1
 800d926:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d92e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d934:	2b00      	cmp	r3, #0
 800d936:	da0b      	bge.n	800d950 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d938:	78fb      	ldrb	r3, [r7, #3]
 800d93a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d93e:	68f9      	ldr	r1, [r7, #12]
 800d940:	4613      	mov	r3, r2
 800d942:	00db      	lsls	r3, r3, #3
 800d944:	4413      	add	r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	440b      	add	r3, r1
 800d94a:	3316      	adds	r3, #22
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	e00b      	b.n	800d968 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d950:	78fb      	ldrb	r3, [r7, #3]
 800d952:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d956:	68f9      	ldr	r1, [r7, #12]
 800d958:	4613      	mov	r3, r2
 800d95a:	00db      	lsls	r3, r3, #3
 800d95c:	4413      	add	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	440b      	add	r3, r1
 800d962:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d966:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3714      	adds	r7, #20
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d980:	2300      	movs	r3, #0
 800d982:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d984:	2300      	movs	r3, #0
 800d986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d98e:	78fa      	ldrb	r2, [r7, #3]
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f7f9 ff86 	bl	80078a4 <HAL_PCD_SetAddress>
 800d998:	4603      	mov	r3, r0
 800d99a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 f874 	bl	800da8c <USBD_Get_USB_Status>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3710      	adds	r7, #16
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b086      	sub	sp, #24
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	607a      	str	r2, [r7, #4]
 800d9bc:	603b      	str	r3, [r7, #0]
 800d9be:	460b      	mov	r3, r1
 800d9c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9d0:	7af9      	ldrb	r1, [r7, #11]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	f7fa f890 	bl	8007afa <HAL_PCD_EP_Transmit>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f000 f853 	bl	800da8c <USBD_Get_USB_Status>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3718      	adds	r7, #24
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	607a      	str	r2, [r7, #4]
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	460b      	mov	r3, r1
 800da02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da04:	2300      	movs	r3, #0
 800da06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da12:	7af9      	ldrb	r1, [r7, #11]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	f7fa f81c 	bl	8007a54 <HAL_PCD_EP_Receive>
 800da1c:	4603      	mov	r3, r0
 800da1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da20:	7dfb      	ldrb	r3, [r7, #23]
 800da22:	4618      	mov	r0, r3
 800da24:	f000 f832 	bl	800da8c <USBD_Get_USB_Status>
 800da28:	4603      	mov	r3, r0
 800da2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b082      	sub	sp, #8
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	460b      	mov	r3, r1
 800da40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da48:	78fa      	ldrb	r2, [r7, #3]
 800da4a:	4611      	mov	r1, r2
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fa f83c 	bl	8007aca <HAL_PCD_EP_GetRxCount>
 800da52:	4603      	mov	r3, r0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da64:	4b03      	ldr	r3, [pc, #12]	@ (800da74 <USBD_static_malloc+0x18>)
}
 800da66:	4618      	mov	r0, r3
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	200015b0 	.word	0x200015b0

0800da78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]

}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b085      	sub	sp, #20
 800da90:	af00      	add	r7, sp, #0
 800da92:	4603      	mov	r3, r0
 800da94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	2b03      	cmp	r3, #3
 800da9e:	d817      	bhi.n	800dad0 <USBD_Get_USB_Status+0x44>
 800daa0:	a201      	add	r2, pc, #4	@ (adr r2, 800daa8 <USBD_Get_USB_Status+0x1c>)
 800daa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa6:	bf00      	nop
 800daa8:	0800dab9 	.word	0x0800dab9
 800daac:	0800dabf 	.word	0x0800dabf
 800dab0:	0800dac5 	.word	0x0800dac5
 800dab4:	0800dacb 	.word	0x0800dacb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	73fb      	strb	r3, [r7, #15]
    break;
 800dabc:	e00b      	b.n	800dad6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dabe:	2303      	movs	r3, #3
 800dac0:	73fb      	strb	r3, [r7, #15]
    break;
 800dac2:	e008      	b.n	800dad6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dac4:	2301      	movs	r3, #1
 800dac6:	73fb      	strb	r3, [r7, #15]
    break;
 800dac8:	e005      	b.n	800dad6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800daca:	2303      	movs	r3, #3
 800dacc:	73fb      	strb	r3, [r7, #15]
    break;
 800dace:	e002      	b.n	800dad6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dad0:	2303      	movs	r3, #3
 800dad2:	73fb      	strb	r3, [r7, #15]
    break;
 800dad4:	bf00      	nop
  }
  return usb_status;
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <malloc>:
 800dae4:	4b02      	ldr	r3, [pc, #8]	@ (800daf0 <malloc+0xc>)
 800dae6:	4601      	mov	r1, r0
 800dae8:	6818      	ldr	r0, [r3, #0]
 800daea:	f000 b825 	b.w	800db38 <_malloc_r>
 800daee:	bf00      	nop
 800daf0:	20000110 	.word	0x20000110

0800daf4 <sbrk_aligned>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	4e0f      	ldr	r6, [pc, #60]	@ (800db34 <sbrk_aligned+0x40>)
 800daf8:	460c      	mov	r4, r1
 800dafa:	6831      	ldr	r1, [r6, #0]
 800dafc:	4605      	mov	r5, r0
 800dafe:	b911      	cbnz	r1, 800db06 <sbrk_aligned+0x12>
 800db00:	f000 f8d0 	bl	800dca4 <_sbrk_r>
 800db04:	6030      	str	r0, [r6, #0]
 800db06:	4621      	mov	r1, r4
 800db08:	4628      	mov	r0, r5
 800db0a:	f000 f8cb 	bl	800dca4 <_sbrk_r>
 800db0e:	1c43      	adds	r3, r0, #1
 800db10:	d103      	bne.n	800db1a <sbrk_aligned+0x26>
 800db12:	f04f 34ff 	mov.w	r4, #4294967295
 800db16:	4620      	mov	r0, r4
 800db18:	bd70      	pop	{r4, r5, r6, pc}
 800db1a:	1cc4      	adds	r4, r0, #3
 800db1c:	f024 0403 	bic.w	r4, r4, #3
 800db20:	42a0      	cmp	r0, r4
 800db22:	d0f8      	beq.n	800db16 <sbrk_aligned+0x22>
 800db24:	1a21      	subs	r1, r4, r0
 800db26:	4628      	mov	r0, r5
 800db28:	f000 f8bc 	bl	800dca4 <_sbrk_r>
 800db2c:	3001      	adds	r0, #1
 800db2e:	d1f2      	bne.n	800db16 <sbrk_aligned+0x22>
 800db30:	e7ef      	b.n	800db12 <sbrk_aligned+0x1e>
 800db32:	bf00      	nop
 800db34:	200017d0 	.word	0x200017d0

0800db38 <_malloc_r>:
 800db38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db3c:	1ccd      	adds	r5, r1, #3
 800db3e:	f025 0503 	bic.w	r5, r5, #3
 800db42:	3508      	adds	r5, #8
 800db44:	2d0c      	cmp	r5, #12
 800db46:	bf38      	it	cc
 800db48:	250c      	movcc	r5, #12
 800db4a:	2d00      	cmp	r5, #0
 800db4c:	4606      	mov	r6, r0
 800db4e:	db01      	blt.n	800db54 <_malloc_r+0x1c>
 800db50:	42a9      	cmp	r1, r5
 800db52:	d904      	bls.n	800db5e <_malloc_r+0x26>
 800db54:	230c      	movs	r3, #12
 800db56:	6033      	str	r3, [r6, #0]
 800db58:	2000      	movs	r0, #0
 800db5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc34 <_malloc_r+0xfc>
 800db62:	f000 f869 	bl	800dc38 <__malloc_lock>
 800db66:	f8d8 3000 	ldr.w	r3, [r8]
 800db6a:	461c      	mov	r4, r3
 800db6c:	bb44      	cbnz	r4, 800dbc0 <_malloc_r+0x88>
 800db6e:	4629      	mov	r1, r5
 800db70:	4630      	mov	r0, r6
 800db72:	f7ff ffbf 	bl	800daf4 <sbrk_aligned>
 800db76:	1c43      	adds	r3, r0, #1
 800db78:	4604      	mov	r4, r0
 800db7a:	d158      	bne.n	800dc2e <_malloc_r+0xf6>
 800db7c:	f8d8 4000 	ldr.w	r4, [r8]
 800db80:	4627      	mov	r7, r4
 800db82:	2f00      	cmp	r7, #0
 800db84:	d143      	bne.n	800dc0e <_malloc_r+0xd6>
 800db86:	2c00      	cmp	r4, #0
 800db88:	d04b      	beq.n	800dc22 <_malloc_r+0xea>
 800db8a:	6823      	ldr	r3, [r4, #0]
 800db8c:	4639      	mov	r1, r7
 800db8e:	4630      	mov	r0, r6
 800db90:	eb04 0903 	add.w	r9, r4, r3
 800db94:	f000 f886 	bl	800dca4 <_sbrk_r>
 800db98:	4581      	cmp	r9, r0
 800db9a:	d142      	bne.n	800dc22 <_malloc_r+0xea>
 800db9c:	6821      	ldr	r1, [r4, #0]
 800db9e:	1a6d      	subs	r5, r5, r1
 800dba0:	4629      	mov	r1, r5
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7ff ffa6 	bl	800daf4 <sbrk_aligned>
 800dba8:	3001      	adds	r0, #1
 800dbaa:	d03a      	beq.n	800dc22 <_malloc_r+0xea>
 800dbac:	6823      	ldr	r3, [r4, #0]
 800dbae:	442b      	add	r3, r5
 800dbb0:	6023      	str	r3, [r4, #0]
 800dbb2:	f8d8 3000 	ldr.w	r3, [r8]
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	bb62      	cbnz	r2, 800dc14 <_malloc_r+0xdc>
 800dbba:	f8c8 7000 	str.w	r7, [r8]
 800dbbe:	e00f      	b.n	800dbe0 <_malloc_r+0xa8>
 800dbc0:	6822      	ldr	r2, [r4, #0]
 800dbc2:	1b52      	subs	r2, r2, r5
 800dbc4:	d420      	bmi.n	800dc08 <_malloc_r+0xd0>
 800dbc6:	2a0b      	cmp	r2, #11
 800dbc8:	d917      	bls.n	800dbfa <_malloc_r+0xc2>
 800dbca:	1961      	adds	r1, r4, r5
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	6025      	str	r5, [r4, #0]
 800dbd0:	bf18      	it	ne
 800dbd2:	6059      	strne	r1, [r3, #4]
 800dbd4:	6863      	ldr	r3, [r4, #4]
 800dbd6:	bf08      	it	eq
 800dbd8:	f8c8 1000 	streq.w	r1, [r8]
 800dbdc:	5162      	str	r2, [r4, r5]
 800dbde:	604b      	str	r3, [r1, #4]
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f000 f82f 	bl	800dc44 <__malloc_unlock>
 800dbe6:	f104 000b 	add.w	r0, r4, #11
 800dbea:	1d23      	adds	r3, r4, #4
 800dbec:	f020 0007 	bic.w	r0, r0, #7
 800dbf0:	1ac2      	subs	r2, r0, r3
 800dbf2:	bf1c      	itt	ne
 800dbf4:	1a1b      	subne	r3, r3, r0
 800dbf6:	50a3      	strne	r3, [r4, r2]
 800dbf8:	e7af      	b.n	800db5a <_malloc_r+0x22>
 800dbfa:	6862      	ldr	r2, [r4, #4]
 800dbfc:	42a3      	cmp	r3, r4
 800dbfe:	bf0c      	ite	eq
 800dc00:	f8c8 2000 	streq.w	r2, [r8]
 800dc04:	605a      	strne	r2, [r3, #4]
 800dc06:	e7eb      	b.n	800dbe0 <_malloc_r+0xa8>
 800dc08:	4623      	mov	r3, r4
 800dc0a:	6864      	ldr	r4, [r4, #4]
 800dc0c:	e7ae      	b.n	800db6c <_malloc_r+0x34>
 800dc0e:	463c      	mov	r4, r7
 800dc10:	687f      	ldr	r7, [r7, #4]
 800dc12:	e7b6      	b.n	800db82 <_malloc_r+0x4a>
 800dc14:	461a      	mov	r2, r3
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	42a3      	cmp	r3, r4
 800dc1a:	d1fb      	bne.n	800dc14 <_malloc_r+0xdc>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	6053      	str	r3, [r2, #4]
 800dc20:	e7de      	b.n	800dbe0 <_malloc_r+0xa8>
 800dc22:	230c      	movs	r3, #12
 800dc24:	6033      	str	r3, [r6, #0]
 800dc26:	4630      	mov	r0, r6
 800dc28:	f000 f80c 	bl	800dc44 <__malloc_unlock>
 800dc2c:	e794      	b.n	800db58 <_malloc_r+0x20>
 800dc2e:	6005      	str	r5, [r0, #0]
 800dc30:	e7d6      	b.n	800dbe0 <_malloc_r+0xa8>
 800dc32:	bf00      	nop
 800dc34:	200017d4 	.word	0x200017d4

0800dc38 <__malloc_lock>:
 800dc38:	4801      	ldr	r0, [pc, #4]	@ (800dc40 <__malloc_lock+0x8>)
 800dc3a:	f000 b86d 	b.w	800dd18 <__retarget_lock_acquire_recursive>
 800dc3e:	bf00      	nop
 800dc40:	20001914 	.word	0x20001914

0800dc44 <__malloc_unlock>:
 800dc44:	4801      	ldr	r0, [pc, #4]	@ (800dc4c <__malloc_unlock+0x8>)
 800dc46:	f000 b868 	b.w	800dd1a <__retarget_lock_release_recursive>
 800dc4a:	bf00      	nop
 800dc4c:	20001914 	.word	0x20001914

0800dc50 <siprintf>:
 800dc50:	b40e      	push	{r1, r2, r3}
 800dc52:	b510      	push	{r4, lr}
 800dc54:	b09d      	sub	sp, #116	@ 0x74
 800dc56:	ab1f      	add	r3, sp, #124	@ 0x7c
 800dc58:	9002      	str	r0, [sp, #8]
 800dc5a:	9006      	str	r0, [sp, #24]
 800dc5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dc60:	480a      	ldr	r0, [pc, #40]	@ (800dc8c <siprintf+0x3c>)
 800dc62:	9107      	str	r1, [sp, #28]
 800dc64:	9104      	str	r1, [sp, #16]
 800dc66:	490a      	ldr	r1, [pc, #40]	@ (800dc90 <siprintf+0x40>)
 800dc68:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc6c:	9105      	str	r1, [sp, #20]
 800dc6e:	2400      	movs	r4, #0
 800dc70:	a902      	add	r1, sp, #8
 800dc72:	6800      	ldr	r0, [r0, #0]
 800dc74:	9301      	str	r3, [sp, #4]
 800dc76:	941b      	str	r4, [sp, #108]	@ 0x6c
 800dc78:	f000 f8f6 	bl	800de68 <_svfiprintf_r>
 800dc7c:	9b02      	ldr	r3, [sp, #8]
 800dc7e:	701c      	strb	r4, [r3, #0]
 800dc80:	b01d      	add	sp, #116	@ 0x74
 800dc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc86:	b003      	add	sp, #12
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	20000110 	.word	0x20000110
 800dc90:	ffff0208 	.word	0xffff0208

0800dc94 <memset>:
 800dc94:	4402      	add	r2, r0
 800dc96:	4603      	mov	r3, r0
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d100      	bne.n	800dc9e <memset+0xa>
 800dc9c:	4770      	bx	lr
 800dc9e:	f803 1b01 	strb.w	r1, [r3], #1
 800dca2:	e7f9      	b.n	800dc98 <memset+0x4>

0800dca4 <_sbrk_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d06      	ldr	r5, [pc, #24]	@ (800dcc0 <_sbrk_r+0x1c>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	602b      	str	r3, [r5, #0]
 800dcb0:	f7f4 fa4e 	bl	8002150 <_sbrk>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_sbrk_r+0x1a>
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_sbrk_r+0x1a>
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	20001910 	.word	0x20001910

0800dcc4 <__errno>:
 800dcc4:	4b01      	ldr	r3, [pc, #4]	@ (800dccc <__errno+0x8>)
 800dcc6:	6818      	ldr	r0, [r3, #0]
 800dcc8:	4770      	bx	lr
 800dcca:	bf00      	nop
 800dccc:	20000110 	.word	0x20000110

0800dcd0 <__libc_init_array>:
 800dcd0:	b570      	push	{r4, r5, r6, lr}
 800dcd2:	4d0d      	ldr	r5, [pc, #52]	@ (800dd08 <__libc_init_array+0x38>)
 800dcd4:	4c0d      	ldr	r4, [pc, #52]	@ (800dd0c <__libc_init_array+0x3c>)
 800dcd6:	1b64      	subs	r4, r4, r5
 800dcd8:	10a4      	asrs	r4, r4, #2
 800dcda:	2600      	movs	r6, #0
 800dcdc:	42a6      	cmp	r6, r4
 800dcde:	d109      	bne.n	800dcf4 <__libc_init_array+0x24>
 800dce0:	4d0b      	ldr	r5, [pc, #44]	@ (800dd10 <__libc_init_array+0x40>)
 800dce2:	4c0c      	ldr	r4, [pc, #48]	@ (800dd14 <__libc_init_array+0x44>)
 800dce4:	f000 fba6 	bl	800e434 <_init>
 800dce8:	1b64      	subs	r4, r4, r5
 800dcea:	10a4      	asrs	r4, r4, #2
 800dcec:	2600      	movs	r6, #0
 800dcee:	42a6      	cmp	r6, r4
 800dcf0:	d105      	bne.n	800dcfe <__libc_init_array+0x2e>
 800dcf2:	bd70      	pop	{r4, r5, r6, pc}
 800dcf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcf8:	4798      	blx	r3
 800dcfa:	3601      	adds	r6, #1
 800dcfc:	e7ee      	b.n	800dcdc <__libc_init_array+0xc>
 800dcfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd02:	4798      	blx	r3
 800dd04:	3601      	adds	r6, #1
 800dd06:	e7f2      	b.n	800dcee <__libc_init_array+0x1e>
 800dd08:	0800f078 	.word	0x0800f078
 800dd0c:	0800f078 	.word	0x0800f078
 800dd10:	0800f078 	.word	0x0800f078
 800dd14:	0800f07c 	.word	0x0800f07c

0800dd18 <__retarget_lock_acquire_recursive>:
 800dd18:	4770      	bx	lr

0800dd1a <__retarget_lock_release_recursive>:
 800dd1a:	4770      	bx	lr

0800dd1c <_free_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4605      	mov	r5, r0
 800dd20:	2900      	cmp	r1, #0
 800dd22:	d041      	beq.n	800dda8 <_free_r+0x8c>
 800dd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd28:	1f0c      	subs	r4, r1, #4
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfb8      	it	lt
 800dd2e:	18e4      	addlt	r4, r4, r3
 800dd30:	f7ff ff82 	bl	800dc38 <__malloc_lock>
 800dd34:	4a1d      	ldr	r2, [pc, #116]	@ (800ddac <_free_r+0x90>)
 800dd36:	6813      	ldr	r3, [r2, #0]
 800dd38:	b933      	cbnz	r3, 800dd48 <_free_r+0x2c>
 800dd3a:	6063      	str	r3, [r4, #4]
 800dd3c:	6014      	str	r4, [r2, #0]
 800dd3e:	4628      	mov	r0, r5
 800dd40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd44:	f7ff bf7e 	b.w	800dc44 <__malloc_unlock>
 800dd48:	42a3      	cmp	r3, r4
 800dd4a:	d908      	bls.n	800dd5e <_free_r+0x42>
 800dd4c:	6820      	ldr	r0, [r4, #0]
 800dd4e:	1821      	adds	r1, r4, r0
 800dd50:	428b      	cmp	r3, r1
 800dd52:	bf01      	itttt	eq
 800dd54:	6819      	ldreq	r1, [r3, #0]
 800dd56:	685b      	ldreq	r3, [r3, #4]
 800dd58:	1809      	addeq	r1, r1, r0
 800dd5a:	6021      	streq	r1, [r4, #0]
 800dd5c:	e7ed      	b.n	800dd3a <_free_r+0x1e>
 800dd5e:	461a      	mov	r2, r3
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	b10b      	cbz	r3, 800dd68 <_free_r+0x4c>
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	d9fa      	bls.n	800dd5e <_free_r+0x42>
 800dd68:	6811      	ldr	r1, [r2, #0]
 800dd6a:	1850      	adds	r0, r2, r1
 800dd6c:	42a0      	cmp	r0, r4
 800dd6e:	d10b      	bne.n	800dd88 <_free_r+0x6c>
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	4401      	add	r1, r0
 800dd74:	1850      	adds	r0, r2, r1
 800dd76:	4283      	cmp	r3, r0
 800dd78:	6011      	str	r1, [r2, #0]
 800dd7a:	d1e0      	bne.n	800dd3e <_free_r+0x22>
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	6053      	str	r3, [r2, #4]
 800dd82:	4408      	add	r0, r1
 800dd84:	6010      	str	r0, [r2, #0]
 800dd86:	e7da      	b.n	800dd3e <_free_r+0x22>
 800dd88:	d902      	bls.n	800dd90 <_free_r+0x74>
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	602b      	str	r3, [r5, #0]
 800dd8e:	e7d6      	b.n	800dd3e <_free_r+0x22>
 800dd90:	6820      	ldr	r0, [r4, #0]
 800dd92:	1821      	adds	r1, r4, r0
 800dd94:	428b      	cmp	r3, r1
 800dd96:	bf04      	itt	eq
 800dd98:	6819      	ldreq	r1, [r3, #0]
 800dd9a:	685b      	ldreq	r3, [r3, #4]
 800dd9c:	6063      	str	r3, [r4, #4]
 800dd9e:	bf04      	itt	eq
 800dda0:	1809      	addeq	r1, r1, r0
 800dda2:	6021      	streq	r1, [r4, #0]
 800dda4:	6054      	str	r4, [r2, #4]
 800dda6:	e7ca      	b.n	800dd3e <_free_r+0x22>
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	200017d4 	.word	0x200017d4

0800ddb0 <__ssputs_r>:
 800ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	688e      	ldr	r6, [r1, #8]
 800ddb6:	461f      	mov	r7, r3
 800ddb8:	42be      	cmp	r6, r7
 800ddba:	680b      	ldr	r3, [r1, #0]
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	4690      	mov	r8, r2
 800ddc2:	d82d      	bhi.n	800de20 <__ssputs_r+0x70>
 800ddc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ddcc:	d026      	beq.n	800de1c <__ssputs_r+0x6c>
 800ddce:	6965      	ldr	r5, [r4, #20]
 800ddd0:	6909      	ldr	r1, [r1, #16]
 800ddd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddd6:	eba3 0901 	sub.w	r9, r3, r1
 800ddda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddde:	1c7b      	adds	r3, r7, #1
 800dde0:	444b      	add	r3, r9
 800dde2:	106d      	asrs	r5, r5, #1
 800dde4:	429d      	cmp	r5, r3
 800dde6:	bf38      	it	cc
 800dde8:	461d      	movcc	r5, r3
 800ddea:	0553      	lsls	r3, r2, #21
 800ddec:	d527      	bpl.n	800de3e <__ssputs_r+0x8e>
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f7ff fea2 	bl	800db38 <_malloc_r>
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	b360      	cbz	r0, 800de52 <__ssputs_r+0xa2>
 800ddf8:	6921      	ldr	r1, [r4, #16]
 800ddfa:	464a      	mov	r2, r9
 800ddfc:	f000 fad6 	bl	800e3ac <memcpy>
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de0a:	81a3      	strh	r3, [r4, #12]
 800de0c:	6126      	str	r6, [r4, #16]
 800de0e:	6165      	str	r5, [r4, #20]
 800de10:	444e      	add	r6, r9
 800de12:	eba5 0509 	sub.w	r5, r5, r9
 800de16:	6026      	str	r6, [r4, #0]
 800de18:	60a5      	str	r5, [r4, #8]
 800de1a:	463e      	mov	r6, r7
 800de1c:	42be      	cmp	r6, r7
 800de1e:	d900      	bls.n	800de22 <__ssputs_r+0x72>
 800de20:	463e      	mov	r6, r7
 800de22:	6820      	ldr	r0, [r4, #0]
 800de24:	4632      	mov	r2, r6
 800de26:	4641      	mov	r1, r8
 800de28:	f000 faa6 	bl	800e378 <memmove>
 800de2c:	68a3      	ldr	r3, [r4, #8]
 800de2e:	1b9b      	subs	r3, r3, r6
 800de30:	60a3      	str	r3, [r4, #8]
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	4433      	add	r3, r6
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	2000      	movs	r0, #0
 800de3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de3e:	462a      	mov	r2, r5
 800de40:	f000 fac2 	bl	800e3c8 <_realloc_r>
 800de44:	4606      	mov	r6, r0
 800de46:	2800      	cmp	r0, #0
 800de48:	d1e0      	bne.n	800de0c <__ssputs_r+0x5c>
 800de4a:	6921      	ldr	r1, [r4, #16]
 800de4c:	4650      	mov	r0, sl
 800de4e:	f7ff ff65 	bl	800dd1c <_free_r>
 800de52:	230c      	movs	r3, #12
 800de54:	f8ca 3000 	str.w	r3, [sl]
 800de58:	89a3      	ldrh	r3, [r4, #12]
 800de5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de5e:	81a3      	strh	r3, [r4, #12]
 800de60:	f04f 30ff 	mov.w	r0, #4294967295
 800de64:	e7e9      	b.n	800de3a <__ssputs_r+0x8a>
	...

0800de68 <_svfiprintf_r>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	4698      	mov	r8, r3
 800de6e:	898b      	ldrh	r3, [r1, #12]
 800de70:	061b      	lsls	r3, r3, #24
 800de72:	b09d      	sub	sp, #116	@ 0x74
 800de74:	4607      	mov	r7, r0
 800de76:	460d      	mov	r5, r1
 800de78:	4614      	mov	r4, r2
 800de7a:	d510      	bpl.n	800de9e <_svfiprintf_r+0x36>
 800de7c:	690b      	ldr	r3, [r1, #16]
 800de7e:	b973      	cbnz	r3, 800de9e <_svfiprintf_r+0x36>
 800de80:	2140      	movs	r1, #64	@ 0x40
 800de82:	f7ff fe59 	bl	800db38 <_malloc_r>
 800de86:	6028      	str	r0, [r5, #0]
 800de88:	6128      	str	r0, [r5, #16]
 800de8a:	b930      	cbnz	r0, 800de9a <_svfiprintf_r+0x32>
 800de8c:	230c      	movs	r3, #12
 800de8e:	603b      	str	r3, [r7, #0]
 800de90:	f04f 30ff 	mov.w	r0, #4294967295
 800de94:	b01d      	add	sp, #116	@ 0x74
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	2340      	movs	r3, #64	@ 0x40
 800de9c:	616b      	str	r3, [r5, #20]
 800de9e:	2300      	movs	r3, #0
 800dea0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea2:	2320      	movs	r3, #32
 800dea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dea8:	f8cd 800c 	str.w	r8, [sp, #12]
 800deac:	2330      	movs	r3, #48	@ 0x30
 800deae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e04c <_svfiprintf_r+0x1e4>
 800deb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800deb6:	f04f 0901 	mov.w	r9, #1
 800deba:	4623      	mov	r3, r4
 800debc:	469a      	mov	sl, r3
 800debe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dec2:	b10a      	cbz	r2, 800dec8 <_svfiprintf_r+0x60>
 800dec4:	2a25      	cmp	r2, #37	@ 0x25
 800dec6:	d1f9      	bne.n	800debc <_svfiprintf_r+0x54>
 800dec8:	ebba 0b04 	subs.w	fp, sl, r4
 800decc:	d00b      	beq.n	800dee6 <_svfiprintf_r+0x7e>
 800dece:	465b      	mov	r3, fp
 800ded0:	4622      	mov	r2, r4
 800ded2:	4629      	mov	r1, r5
 800ded4:	4638      	mov	r0, r7
 800ded6:	f7ff ff6b 	bl	800ddb0 <__ssputs_r>
 800deda:	3001      	adds	r0, #1
 800dedc:	f000 80a7 	beq.w	800e02e <_svfiprintf_r+0x1c6>
 800dee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dee2:	445a      	add	r2, fp
 800dee4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dee6:	f89a 3000 	ldrb.w	r3, [sl]
 800deea:	2b00      	cmp	r3, #0
 800deec:	f000 809f 	beq.w	800e02e <_svfiprintf_r+0x1c6>
 800def0:	2300      	movs	r3, #0
 800def2:	f04f 32ff 	mov.w	r2, #4294967295
 800def6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800defa:	f10a 0a01 	add.w	sl, sl, #1
 800defe:	9304      	str	r3, [sp, #16]
 800df00:	9307      	str	r3, [sp, #28]
 800df02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df06:	931a      	str	r3, [sp, #104]	@ 0x68
 800df08:	4654      	mov	r4, sl
 800df0a:	2205      	movs	r2, #5
 800df0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df10:	484e      	ldr	r0, [pc, #312]	@ (800e04c <_svfiprintf_r+0x1e4>)
 800df12:	f7f2 f965 	bl	80001e0 <memchr>
 800df16:	9a04      	ldr	r2, [sp, #16]
 800df18:	b9d8      	cbnz	r0, 800df52 <_svfiprintf_r+0xea>
 800df1a:	06d0      	lsls	r0, r2, #27
 800df1c:	bf44      	itt	mi
 800df1e:	2320      	movmi	r3, #32
 800df20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df24:	0711      	lsls	r1, r2, #28
 800df26:	bf44      	itt	mi
 800df28:	232b      	movmi	r3, #43	@ 0x2b
 800df2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df2e:	f89a 3000 	ldrb.w	r3, [sl]
 800df32:	2b2a      	cmp	r3, #42	@ 0x2a
 800df34:	d015      	beq.n	800df62 <_svfiprintf_r+0xfa>
 800df36:	9a07      	ldr	r2, [sp, #28]
 800df38:	4654      	mov	r4, sl
 800df3a:	2000      	movs	r0, #0
 800df3c:	f04f 0c0a 	mov.w	ip, #10
 800df40:	4621      	mov	r1, r4
 800df42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df46:	3b30      	subs	r3, #48	@ 0x30
 800df48:	2b09      	cmp	r3, #9
 800df4a:	d94b      	bls.n	800dfe4 <_svfiprintf_r+0x17c>
 800df4c:	b1b0      	cbz	r0, 800df7c <_svfiprintf_r+0x114>
 800df4e:	9207      	str	r2, [sp, #28]
 800df50:	e014      	b.n	800df7c <_svfiprintf_r+0x114>
 800df52:	eba0 0308 	sub.w	r3, r0, r8
 800df56:	fa09 f303 	lsl.w	r3, r9, r3
 800df5a:	4313      	orrs	r3, r2
 800df5c:	9304      	str	r3, [sp, #16]
 800df5e:	46a2      	mov	sl, r4
 800df60:	e7d2      	b.n	800df08 <_svfiprintf_r+0xa0>
 800df62:	9b03      	ldr	r3, [sp, #12]
 800df64:	1d19      	adds	r1, r3, #4
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	9103      	str	r1, [sp, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfbb      	ittet	lt
 800df6e:	425b      	neglt	r3, r3
 800df70:	f042 0202 	orrlt.w	r2, r2, #2
 800df74:	9307      	strge	r3, [sp, #28]
 800df76:	9307      	strlt	r3, [sp, #28]
 800df78:	bfb8      	it	lt
 800df7a:	9204      	strlt	r2, [sp, #16]
 800df7c:	7823      	ldrb	r3, [r4, #0]
 800df7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800df80:	d10a      	bne.n	800df98 <_svfiprintf_r+0x130>
 800df82:	7863      	ldrb	r3, [r4, #1]
 800df84:	2b2a      	cmp	r3, #42	@ 0x2a
 800df86:	d132      	bne.n	800dfee <_svfiprintf_r+0x186>
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	1d1a      	adds	r2, r3, #4
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	9203      	str	r2, [sp, #12]
 800df90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df94:	3402      	adds	r4, #2
 800df96:	9305      	str	r3, [sp, #20]
 800df98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e05c <_svfiprintf_r+0x1f4>
 800df9c:	7821      	ldrb	r1, [r4, #0]
 800df9e:	2203      	movs	r2, #3
 800dfa0:	4650      	mov	r0, sl
 800dfa2:	f7f2 f91d 	bl	80001e0 <memchr>
 800dfa6:	b138      	cbz	r0, 800dfb8 <_svfiprintf_r+0x150>
 800dfa8:	9b04      	ldr	r3, [sp, #16]
 800dfaa:	eba0 000a 	sub.w	r0, r0, sl
 800dfae:	2240      	movs	r2, #64	@ 0x40
 800dfb0:	4082      	lsls	r2, r0
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	3401      	adds	r4, #1
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfbc:	4824      	ldr	r0, [pc, #144]	@ (800e050 <_svfiprintf_r+0x1e8>)
 800dfbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfc2:	2206      	movs	r2, #6
 800dfc4:	f7f2 f90c 	bl	80001e0 <memchr>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d036      	beq.n	800e03a <_svfiprintf_r+0x1d2>
 800dfcc:	4b21      	ldr	r3, [pc, #132]	@ (800e054 <_svfiprintf_r+0x1ec>)
 800dfce:	bb1b      	cbnz	r3, 800e018 <_svfiprintf_r+0x1b0>
 800dfd0:	9b03      	ldr	r3, [sp, #12]
 800dfd2:	3307      	adds	r3, #7
 800dfd4:	f023 0307 	bic.w	r3, r3, #7
 800dfd8:	3308      	adds	r3, #8
 800dfda:	9303      	str	r3, [sp, #12]
 800dfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfde:	4433      	add	r3, r6
 800dfe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe2:	e76a      	b.n	800deba <_svfiprintf_r+0x52>
 800dfe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfe8:	460c      	mov	r4, r1
 800dfea:	2001      	movs	r0, #1
 800dfec:	e7a8      	b.n	800df40 <_svfiprintf_r+0xd8>
 800dfee:	2300      	movs	r3, #0
 800dff0:	3401      	adds	r4, #1
 800dff2:	9305      	str	r3, [sp, #20]
 800dff4:	4619      	mov	r1, r3
 800dff6:	f04f 0c0a 	mov.w	ip, #10
 800dffa:	4620      	mov	r0, r4
 800dffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e000:	3a30      	subs	r2, #48	@ 0x30
 800e002:	2a09      	cmp	r2, #9
 800e004:	d903      	bls.n	800e00e <_svfiprintf_r+0x1a6>
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0c6      	beq.n	800df98 <_svfiprintf_r+0x130>
 800e00a:	9105      	str	r1, [sp, #20]
 800e00c:	e7c4      	b.n	800df98 <_svfiprintf_r+0x130>
 800e00e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e012:	4604      	mov	r4, r0
 800e014:	2301      	movs	r3, #1
 800e016:	e7f0      	b.n	800dffa <_svfiprintf_r+0x192>
 800e018:	ab03      	add	r3, sp, #12
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	462a      	mov	r2, r5
 800e01e:	4b0e      	ldr	r3, [pc, #56]	@ (800e058 <_svfiprintf_r+0x1f0>)
 800e020:	a904      	add	r1, sp, #16
 800e022:	4638      	mov	r0, r7
 800e024:	f3af 8000 	nop.w
 800e028:	1c42      	adds	r2, r0, #1
 800e02a:	4606      	mov	r6, r0
 800e02c:	d1d6      	bne.n	800dfdc <_svfiprintf_r+0x174>
 800e02e:	89ab      	ldrh	r3, [r5, #12]
 800e030:	065b      	lsls	r3, r3, #25
 800e032:	f53f af2d 	bmi.w	800de90 <_svfiprintf_r+0x28>
 800e036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e038:	e72c      	b.n	800de94 <_svfiprintf_r+0x2c>
 800e03a:	ab03      	add	r3, sp, #12
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	462a      	mov	r2, r5
 800e040:	4b05      	ldr	r3, [pc, #20]	@ (800e058 <_svfiprintf_r+0x1f0>)
 800e042:	a904      	add	r1, sp, #16
 800e044:	4638      	mov	r0, r7
 800e046:	f000 f879 	bl	800e13c <_printf_i>
 800e04a:	e7ed      	b.n	800e028 <_svfiprintf_r+0x1c0>
 800e04c:	0800f03c 	.word	0x0800f03c
 800e050:	0800f046 	.word	0x0800f046
 800e054:	00000000 	.word	0x00000000
 800e058:	0800ddb1 	.word	0x0800ddb1
 800e05c:	0800f042 	.word	0x0800f042

0800e060 <_printf_common>:
 800e060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e064:	4616      	mov	r6, r2
 800e066:	4698      	mov	r8, r3
 800e068:	688a      	ldr	r2, [r1, #8]
 800e06a:	690b      	ldr	r3, [r1, #16]
 800e06c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e070:	4293      	cmp	r3, r2
 800e072:	bfb8      	it	lt
 800e074:	4613      	movlt	r3, r2
 800e076:	6033      	str	r3, [r6, #0]
 800e078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e07c:	4607      	mov	r7, r0
 800e07e:	460c      	mov	r4, r1
 800e080:	b10a      	cbz	r2, 800e086 <_printf_common+0x26>
 800e082:	3301      	adds	r3, #1
 800e084:	6033      	str	r3, [r6, #0]
 800e086:	6823      	ldr	r3, [r4, #0]
 800e088:	0699      	lsls	r1, r3, #26
 800e08a:	bf42      	ittt	mi
 800e08c:	6833      	ldrmi	r3, [r6, #0]
 800e08e:	3302      	addmi	r3, #2
 800e090:	6033      	strmi	r3, [r6, #0]
 800e092:	6825      	ldr	r5, [r4, #0]
 800e094:	f015 0506 	ands.w	r5, r5, #6
 800e098:	d106      	bne.n	800e0a8 <_printf_common+0x48>
 800e09a:	f104 0a19 	add.w	sl, r4, #25
 800e09e:	68e3      	ldr	r3, [r4, #12]
 800e0a0:	6832      	ldr	r2, [r6, #0]
 800e0a2:	1a9b      	subs	r3, r3, r2
 800e0a4:	42ab      	cmp	r3, r5
 800e0a6:	dc26      	bgt.n	800e0f6 <_printf_common+0x96>
 800e0a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e0ac:	6822      	ldr	r2, [r4, #0]
 800e0ae:	3b00      	subs	r3, #0
 800e0b0:	bf18      	it	ne
 800e0b2:	2301      	movne	r3, #1
 800e0b4:	0692      	lsls	r2, r2, #26
 800e0b6:	d42b      	bmi.n	800e110 <_printf_common+0xb0>
 800e0b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e0bc:	4641      	mov	r1, r8
 800e0be:	4638      	mov	r0, r7
 800e0c0:	47c8      	blx	r9
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	d01e      	beq.n	800e104 <_printf_common+0xa4>
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	6922      	ldr	r2, [r4, #16]
 800e0ca:	f003 0306 	and.w	r3, r3, #6
 800e0ce:	2b04      	cmp	r3, #4
 800e0d0:	bf02      	ittt	eq
 800e0d2:	68e5      	ldreq	r5, [r4, #12]
 800e0d4:	6833      	ldreq	r3, [r6, #0]
 800e0d6:	1aed      	subeq	r5, r5, r3
 800e0d8:	68a3      	ldr	r3, [r4, #8]
 800e0da:	bf0c      	ite	eq
 800e0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e0e0:	2500      	movne	r5, #0
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	bfc4      	itt	gt
 800e0e6:	1a9b      	subgt	r3, r3, r2
 800e0e8:	18ed      	addgt	r5, r5, r3
 800e0ea:	2600      	movs	r6, #0
 800e0ec:	341a      	adds	r4, #26
 800e0ee:	42b5      	cmp	r5, r6
 800e0f0:	d11a      	bne.n	800e128 <_printf_common+0xc8>
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	e008      	b.n	800e108 <_printf_common+0xa8>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	4652      	mov	r2, sl
 800e0fa:	4641      	mov	r1, r8
 800e0fc:	4638      	mov	r0, r7
 800e0fe:	47c8      	blx	r9
 800e100:	3001      	adds	r0, #1
 800e102:	d103      	bne.n	800e10c <_printf_common+0xac>
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e10c:	3501      	adds	r5, #1
 800e10e:	e7c6      	b.n	800e09e <_printf_common+0x3e>
 800e110:	18e1      	adds	r1, r4, r3
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	2030      	movs	r0, #48	@ 0x30
 800e116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e11a:	4422      	add	r2, r4
 800e11c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e124:	3302      	adds	r3, #2
 800e126:	e7c7      	b.n	800e0b8 <_printf_common+0x58>
 800e128:	2301      	movs	r3, #1
 800e12a:	4622      	mov	r2, r4
 800e12c:	4641      	mov	r1, r8
 800e12e:	4638      	mov	r0, r7
 800e130:	47c8      	blx	r9
 800e132:	3001      	adds	r0, #1
 800e134:	d0e6      	beq.n	800e104 <_printf_common+0xa4>
 800e136:	3601      	adds	r6, #1
 800e138:	e7d9      	b.n	800e0ee <_printf_common+0x8e>
	...

0800e13c <_printf_i>:
 800e13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e140:	7e0f      	ldrb	r7, [r1, #24]
 800e142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e144:	2f78      	cmp	r7, #120	@ 0x78
 800e146:	4691      	mov	r9, r2
 800e148:	4680      	mov	r8, r0
 800e14a:	460c      	mov	r4, r1
 800e14c:	469a      	mov	sl, r3
 800e14e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e152:	d807      	bhi.n	800e164 <_printf_i+0x28>
 800e154:	2f62      	cmp	r7, #98	@ 0x62
 800e156:	d80a      	bhi.n	800e16e <_printf_i+0x32>
 800e158:	2f00      	cmp	r7, #0
 800e15a:	f000 80d1 	beq.w	800e300 <_printf_i+0x1c4>
 800e15e:	2f58      	cmp	r7, #88	@ 0x58
 800e160:	f000 80b8 	beq.w	800e2d4 <_printf_i+0x198>
 800e164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e16c:	e03a      	b.n	800e1e4 <_printf_i+0xa8>
 800e16e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e172:	2b15      	cmp	r3, #21
 800e174:	d8f6      	bhi.n	800e164 <_printf_i+0x28>
 800e176:	a101      	add	r1, pc, #4	@ (adr r1, 800e17c <_printf_i+0x40>)
 800e178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e17c:	0800e1d5 	.word	0x0800e1d5
 800e180:	0800e1e9 	.word	0x0800e1e9
 800e184:	0800e165 	.word	0x0800e165
 800e188:	0800e165 	.word	0x0800e165
 800e18c:	0800e165 	.word	0x0800e165
 800e190:	0800e165 	.word	0x0800e165
 800e194:	0800e1e9 	.word	0x0800e1e9
 800e198:	0800e165 	.word	0x0800e165
 800e19c:	0800e165 	.word	0x0800e165
 800e1a0:	0800e165 	.word	0x0800e165
 800e1a4:	0800e165 	.word	0x0800e165
 800e1a8:	0800e2e7 	.word	0x0800e2e7
 800e1ac:	0800e213 	.word	0x0800e213
 800e1b0:	0800e2a1 	.word	0x0800e2a1
 800e1b4:	0800e165 	.word	0x0800e165
 800e1b8:	0800e165 	.word	0x0800e165
 800e1bc:	0800e309 	.word	0x0800e309
 800e1c0:	0800e165 	.word	0x0800e165
 800e1c4:	0800e213 	.word	0x0800e213
 800e1c8:	0800e165 	.word	0x0800e165
 800e1cc:	0800e165 	.word	0x0800e165
 800e1d0:	0800e2a9 	.word	0x0800e2a9
 800e1d4:	6833      	ldr	r3, [r6, #0]
 800e1d6:	1d1a      	adds	r2, r3, #4
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	6032      	str	r2, [r6, #0]
 800e1dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e1e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e09c      	b.n	800e322 <_printf_i+0x1e6>
 800e1e8:	6833      	ldr	r3, [r6, #0]
 800e1ea:	6820      	ldr	r0, [r4, #0]
 800e1ec:	1d19      	adds	r1, r3, #4
 800e1ee:	6031      	str	r1, [r6, #0]
 800e1f0:	0606      	lsls	r6, r0, #24
 800e1f2:	d501      	bpl.n	800e1f8 <_printf_i+0xbc>
 800e1f4:	681d      	ldr	r5, [r3, #0]
 800e1f6:	e003      	b.n	800e200 <_printf_i+0xc4>
 800e1f8:	0645      	lsls	r5, r0, #25
 800e1fa:	d5fb      	bpl.n	800e1f4 <_printf_i+0xb8>
 800e1fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e200:	2d00      	cmp	r5, #0
 800e202:	da03      	bge.n	800e20c <_printf_i+0xd0>
 800e204:	232d      	movs	r3, #45	@ 0x2d
 800e206:	426d      	negs	r5, r5
 800e208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e20c:	4858      	ldr	r0, [pc, #352]	@ (800e370 <_printf_i+0x234>)
 800e20e:	230a      	movs	r3, #10
 800e210:	e011      	b.n	800e236 <_printf_i+0xfa>
 800e212:	6821      	ldr	r1, [r4, #0]
 800e214:	6833      	ldr	r3, [r6, #0]
 800e216:	0608      	lsls	r0, r1, #24
 800e218:	f853 5b04 	ldr.w	r5, [r3], #4
 800e21c:	d402      	bmi.n	800e224 <_printf_i+0xe8>
 800e21e:	0649      	lsls	r1, r1, #25
 800e220:	bf48      	it	mi
 800e222:	b2ad      	uxthmi	r5, r5
 800e224:	2f6f      	cmp	r7, #111	@ 0x6f
 800e226:	4852      	ldr	r0, [pc, #328]	@ (800e370 <_printf_i+0x234>)
 800e228:	6033      	str	r3, [r6, #0]
 800e22a:	bf14      	ite	ne
 800e22c:	230a      	movne	r3, #10
 800e22e:	2308      	moveq	r3, #8
 800e230:	2100      	movs	r1, #0
 800e232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e236:	6866      	ldr	r6, [r4, #4]
 800e238:	60a6      	str	r6, [r4, #8]
 800e23a:	2e00      	cmp	r6, #0
 800e23c:	db05      	blt.n	800e24a <_printf_i+0x10e>
 800e23e:	6821      	ldr	r1, [r4, #0]
 800e240:	432e      	orrs	r6, r5
 800e242:	f021 0104 	bic.w	r1, r1, #4
 800e246:	6021      	str	r1, [r4, #0]
 800e248:	d04b      	beq.n	800e2e2 <_printf_i+0x1a6>
 800e24a:	4616      	mov	r6, r2
 800e24c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e250:	fb03 5711 	mls	r7, r3, r1, r5
 800e254:	5dc7      	ldrb	r7, [r0, r7]
 800e256:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e25a:	462f      	mov	r7, r5
 800e25c:	42bb      	cmp	r3, r7
 800e25e:	460d      	mov	r5, r1
 800e260:	d9f4      	bls.n	800e24c <_printf_i+0x110>
 800e262:	2b08      	cmp	r3, #8
 800e264:	d10b      	bne.n	800e27e <_printf_i+0x142>
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	07df      	lsls	r7, r3, #31
 800e26a:	d508      	bpl.n	800e27e <_printf_i+0x142>
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	6861      	ldr	r1, [r4, #4]
 800e270:	4299      	cmp	r1, r3
 800e272:	bfde      	ittt	le
 800e274:	2330      	movle	r3, #48	@ 0x30
 800e276:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e27a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e27e:	1b92      	subs	r2, r2, r6
 800e280:	6122      	str	r2, [r4, #16]
 800e282:	f8cd a000 	str.w	sl, [sp]
 800e286:	464b      	mov	r3, r9
 800e288:	aa03      	add	r2, sp, #12
 800e28a:	4621      	mov	r1, r4
 800e28c:	4640      	mov	r0, r8
 800e28e:	f7ff fee7 	bl	800e060 <_printf_common>
 800e292:	3001      	adds	r0, #1
 800e294:	d14a      	bne.n	800e32c <_printf_i+0x1f0>
 800e296:	f04f 30ff 	mov.w	r0, #4294967295
 800e29a:	b004      	add	sp, #16
 800e29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	f043 0320 	orr.w	r3, r3, #32
 800e2a6:	6023      	str	r3, [r4, #0]
 800e2a8:	4832      	ldr	r0, [pc, #200]	@ (800e374 <_printf_i+0x238>)
 800e2aa:	2778      	movs	r7, #120	@ 0x78
 800e2ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	6831      	ldr	r1, [r6, #0]
 800e2b4:	061f      	lsls	r7, r3, #24
 800e2b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e2ba:	d402      	bmi.n	800e2c2 <_printf_i+0x186>
 800e2bc:	065f      	lsls	r7, r3, #25
 800e2be:	bf48      	it	mi
 800e2c0:	b2ad      	uxthmi	r5, r5
 800e2c2:	6031      	str	r1, [r6, #0]
 800e2c4:	07d9      	lsls	r1, r3, #31
 800e2c6:	bf44      	itt	mi
 800e2c8:	f043 0320 	orrmi.w	r3, r3, #32
 800e2cc:	6023      	strmi	r3, [r4, #0]
 800e2ce:	b11d      	cbz	r5, 800e2d8 <_printf_i+0x19c>
 800e2d0:	2310      	movs	r3, #16
 800e2d2:	e7ad      	b.n	800e230 <_printf_i+0xf4>
 800e2d4:	4826      	ldr	r0, [pc, #152]	@ (800e370 <_printf_i+0x234>)
 800e2d6:	e7e9      	b.n	800e2ac <_printf_i+0x170>
 800e2d8:	6823      	ldr	r3, [r4, #0]
 800e2da:	f023 0320 	bic.w	r3, r3, #32
 800e2de:	6023      	str	r3, [r4, #0]
 800e2e0:	e7f6      	b.n	800e2d0 <_printf_i+0x194>
 800e2e2:	4616      	mov	r6, r2
 800e2e4:	e7bd      	b.n	800e262 <_printf_i+0x126>
 800e2e6:	6833      	ldr	r3, [r6, #0]
 800e2e8:	6825      	ldr	r5, [r4, #0]
 800e2ea:	6961      	ldr	r1, [r4, #20]
 800e2ec:	1d18      	adds	r0, r3, #4
 800e2ee:	6030      	str	r0, [r6, #0]
 800e2f0:	062e      	lsls	r6, r5, #24
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	d501      	bpl.n	800e2fa <_printf_i+0x1be>
 800e2f6:	6019      	str	r1, [r3, #0]
 800e2f8:	e002      	b.n	800e300 <_printf_i+0x1c4>
 800e2fa:	0668      	lsls	r0, r5, #25
 800e2fc:	d5fb      	bpl.n	800e2f6 <_printf_i+0x1ba>
 800e2fe:	8019      	strh	r1, [r3, #0]
 800e300:	2300      	movs	r3, #0
 800e302:	6123      	str	r3, [r4, #16]
 800e304:	4616      	mov	r6, r2
 800e306:	e7bc      	b.n	800e282 <_printf_i+0x146>
 800e308:	6833      	ldr	r3, [r6, #0]
 800e30a:	1d1a      	adds	r2, r3, #4
 800e30c:	6032      	str	r2, [r6, #0]
 800e30e:	681e      	ldr	r6, [r3, #0]
 800e310:	6862      	ldr	r2, [r4, #4]
 800e312:	2100      	movs	r1, #0
 800e314:	4630      	mov	r0, r6
 800e316:	f7f1 ff63 	bl	80001e0 <memchr>
 800e31a:	b108      	cbz	r0, 800e320 <_printf_i+0x1e4>
 800e31c:	1b80      	subs	r0, r0, r6
 800e31e:	6060      	str	r0, [r4, #4]
 800e320:	6863      	ldr	r3, [r4, #4]
 800e322:	6123      	str	r3, [r4, #16]
 800e324:	2300      	movs	r3, #0
 800e326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e32a:	e7aa      	b.n	800e282 <_printf_i+0x146>
 800e32c:	6923      	ldr	r3, [r4, #16]
 800e32e:	4632      	mov	r2, r6
 800e330:	4649      	mov	r1, r9
 800e332:	4640      	mov	r0, r8
 800e334:	47d0      	blx	sl
 800e336:	3001      	adds	r0, #1
 800e338:	d0ad      	beq.n	800e296 <_printf_i+0x15a>
 800e33a:	6823      	ldr	r3, [r4, #0]
 800e33c:	079b      	lsls	r3, r3, #30
 800e33e:	d413      	bmi.n	800e368 <_printf_i+0x22c>
 800e340:	68e0      	ldr	r0, [r4, #12]
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	4298      	cmp	r0, r3
 800e346:	bfb8      	it	lt
 800e348:	4618      	movlt	r0, r3
 800e34a:	e7a6      	b.n	800e29a <_printf_i+0x15e>
 800e34c:	2301      	movs	r3, #1
 800e34e:	4632      	mov	r2, r6
 800e350:	4649      	mov	r1, r9
 800e352:	4640      	mov	r0, r8
 800e354:	47d0      	blx	sl
 800e356:	3001      	adds	r0, #1
 800e358:	d09d      	beq.n	800e296 <_printf_i+0x15a>
 800e35a:	3501      	adds	r5, #1
 800e35c:	68e3      	ldr	r3, [r4, #12]
 800e35e:	9903      	ldr	r1, [sp, #12]
 800e360:	1a5b      	subs	r3, r3, r1
 800e362:	42ab      	cmp	r3, r5
 800e364:	dcf2      	bgt.n	800e34c <_printf_i+0x210>
 800e366:	e7eb      	b.n	800e340 <_printf_i+0x204>
 800e368:	2500      	movs	r5, #0
 800e36a:	f104 0619 	add.w	r6, r4, #25
 800e36e:	e7f5      	b.n	800e35c <_printf_i+0x220>
 800e370:	0800f04d 	.word	0x0800f04d
 800e374:	0800f05e 	.word	0x0800f05e

0800e378 <memmove>:
 800e378:	4288      	cmp	r0, r1
 800e37a:	b510      	push	{r4, lr}
 800e37c:	eb01 0402 	add.w	r4, r1, r2
 800e380:	d902      	bls.n	800e388 <memmove+0x10>
 800e382:	4284      	cmp	r4, r0
 800e384:	4623      	mov	r3, r4
 800e386:	d807      	bhi.n	800e398 <memmove+0x20>
 800e388:	1e43      	subs	r3, r0, #1
 800e38a:	42a1      	cmp	r1, r4
 800e38c:	d008      	beq.n	800e3a0 <memmove+0x28>
 800e38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e392:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e396:	e7f8      	b.n	800e38a <memmove+0x12>
 800e398:	4402      	add	r2, r0
 800e39a:	4601      	mov	r1, r0
 800e39c:	428a      	cmp	r2, r1
 800e39e:	d100      	bne.n	800e3a2 <memmove+0x2a>
 800e3a0:	bd10      	pop	{r4, pc}
 800e3a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3aa:	e7f7      	b.n	800e39c <memmove+0x24>

0800e3ac <memcpy>:
 800e3ac:	440a      	add	r2, r1
 800e3ae:	4291      	cmp	r1, r2
 800e3b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3b4:	d100      	bne.n	800e3b8 <memcpy+0xc>
 800e3b6:	4770      	bx	lr
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3c2:	4291      	cmp	r1, r2
 800e3c4:	d1f9      	bne.n	800e3ba <memcpy+0xe>
 800e3c6:	bd10      	pop	{r4, pc}

0800e3c8 <_realloc_r>:
 800e3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3cc:	4607      	mov	r7, r0
 800e3ce:	4614      	mov	r4, r2
 800e3d0:	460d      	mov	r5, r1
 800e3d2:	b921      	cbnz	r1, 800e3de <_realloc_r+0x16>
 800e3d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d8:	4611      	mov	r1, r2
 800e3da:	f7ff bbad 	b.w	800db38 <_malloc_r>
 800e3de:	b92a      	cbnz	r2, 800e3ec <_realloc_r+0x24>
 800e3e0:	f7ff fc9c 	bl	800dd1c <_free_r>
 800e3e4:	4625      	mov	r5, r4
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ec:	f000 f81a 	bl	800e424 <_malloc_usable_size_r>
 800e3f0:	4284      	cmp	r4, r0
 800e3f2:	4606      	mov	r6, r0
 800e3f4:	d802      	bhi.n	800e3fc <_realloc_r+0x34>
 800e3f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3fa:	d8f4      	bhi.n	800e3e6 <_realloc_r+0x1e>
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4638      	mov	r0, r7
 800e400:	f7ff fb9a 	bl	800db38 <_malloc_r>
 800e404:	4680      	mov	r8, r0
 800e406:	b908      	cbnz	r0, 800e40c <_realloc_r+0x44>
 800e408:	4645      	mov	r5, r8
 800e40a:	e7ec      	b.n	800e3e6 <_realloc_r+0x1e>
 800e40c:	42b4      	cmp	r4, r6
 800e40e:	4622      	mov	r2, r4
 800e410:	4629      	mov	r1, r5
 800e412:	bf28      	it	cs
 800e414:	4632      	movcs	r2, r6
 800e416:	f7ff ffc9 	bl	800e3ac <memcpy>
 800e41a:	4629      	mov	r1, r5
 800e41c:	4638      	mov	r0, r7
 800e41e:	f7ff fc7d 	bl	800dd1c <_free_r>
 800e422:	e7f1      	b.n	800e408 <_realloc_r+0x40>

0800e424 <_malloc_usable_size_r>:
 800e424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e428:	1f18      	subs	r0, r3, #4
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	bfbc      	itt	lt
 800e42e:	580b      	ldrlt	r3, [r1, r0]
 800e430:	18c0      	addlt	r0, r0, r3
 800e432:	4770      	bx	lr

0800e434 <_init>:
 800e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e436:	bf00      	nop
 800e438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e43a:	bc08      	pop	{r3}
 800e43c:	469e      	mov	lr, r3
 800e43e:	4770      	bx	lr

0800e440 <_fini>:
 800e440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e442:	bf00      	nop
 800e444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e446:	bc08      	pop	{r3}
 800e448:	469e      	mov	lr, r3
 800e44a:	4770      	bx	lr
