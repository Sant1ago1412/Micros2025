
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001340c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001424  080135b0  080135b0  000145b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149d4  080149d4  000162d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080149d4  080149d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149dc  080149dc  000162d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149dc  080149dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080149e0  080149e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  080149e4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001930  200002d8  08014cbc  000162d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  08014cbc  00016c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3e1  00000000  00000000  00016308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004625  00000000  00000000  000316e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00035d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133e  00000000  00000000  00037618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb30  00000000  00000000  00038956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020722  00000000  00000000  00055486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d45  00000000  00000000  00075ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001178ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d80  00000000  00000000  00117930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0011f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013594 	.word	0x08013594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08013594 	.word	0x08013594

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	4618      	mov	r0, r3
 8001040:	f00d ff42 	bl	800eec8 <malloc>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	4618      	mov	r0, r3
 8001050:	f00d ff3a 	bl	800eec8 <malloc>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 800105c:	4a03      	ldr	r2, [pc, #12]	@ (800106c <UP_initprotocol+0x3c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200002fc 	.word	0x200002fc

08001070 <UP_sendInfo>:

void UP_sendInfo(_eEstadoMEFcmd CMD,uint8_t *bufferAux,uint8_t bytes){
 8001070:	b490      	push	{r4, r7}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001086:	2300      	movs	r3, #0
 8001088:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800108c:	2300      	movs	r3, #0
 800108e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 8001092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800109c:	3330      	adds	r3, #48	@ 0x30
 800109e:	443b      	add	r3, r7
 80010a0:	2255      	movs	r2, #85	@ 0x55
 80010a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 80010a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010b0:	3330      	adds	r3, #48	@ 0x30
 80010b2:	443b      	add	r3, r7
 80010b4:	224e      	movs	r2, #78	@ 0x4e
 80010b6:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 80010ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010c4:	3330      	adds	r3, #48	@ 0x30
 80010c6:	443b      	add	r3, r7
 80010c8:	2245      	movs	r2, #69	@ 0x45
 80010ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80010ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010d8:	3330      	adds	r3, #48	@ 0x30
 80010da:	443b      	add	r3, r7
 80010dc:	2252      	movs	r2, #82	@ 0x52
 80010de:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes+1;
 80010e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80010ec:	4619      	mov	r1, r3
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 80010f8:	443b      	add	r3, r7
 80010fa:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80010fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001108:	3330      	adds	r3, #48	@ 0x30
 800110a:	443b      	add	r3, r7
 800110c:	223a      	movs	r2, #58	@ 0x3a
 800110e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=CMD;
 8001112:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800111c:	3330      	adds	r3, #48	@ 0x30
 800111e:	443b      	add	r3, r7
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800112c:	e012      	b.n	8001154 <UP_sendInfo+0xe4>
        bufAux[indiceAux++] = bufferAux[i];
 800112e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	441a      	add	r2, r3
 8001136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	3330      	adds	r3, #48	@ 0x30
 8001144:	443b      	add	r3, r7
 8001146:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 800114a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800114e:	3301      	adds	r3, #1
 8001150:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001154:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	3b01      	subs	r3, #1
 800115c:	429a      	cmp	r2, r3
 800115e:	dbe6      	blt.n	800112e <UP_sendInfo+0xbe>

    cks=0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 8001166:	2300      	movs	r3, #0
 8001168:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800116c:	e022      	b.n	80011b4 <UP_sendInfo+0x144>
        cks^= bufAux[i];
 800116e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001172:	3330      	adds	r3, #48	@ 0x30
 8001174:	443b      	add	r3, r7
 8001176:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800117a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800117e:	4053      	eors	r3, r2
 8001180:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 8001184:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <UP_sendInfo+0x180>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68d8      	ldr	r0, [r3, #12]
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <UP_sendInfo+0x180>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	795a      	ldrb	r2, [r3, #5]
 8001194:	1c54      	adds	r4, r2, #1
 8001196:	b2e4      	uxtb	r4, r4
 8001198:	715c      	strb	r4, [r3, #5]
 800119a:	4613      	mov	r3, r2
 800119c:	4403      	add	r3, r0
 800119e:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80011a2:	443a      	add	r2, r7
 80011a4:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 80011a8:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 80011aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80011ae:	3301      	adds	r3, #1
 80011b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80011b4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80011b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3d6      	bcc.n	800116e <UP_sendInfo+0xfe>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <UP_sendInfo+0x180>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68d9      	ldr	r1, [r3, #12]
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <UP_sendInfo+0x180>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	795a      	ldrb	r2, [r3, #5]
 80011cc:	1c50      	adds	r0, r2, #1
 80011ce:	b2c0      	uxtb	r0, r0
 80011d0:	7158      	strb	r0, [r3, #5]
 80011d2:	4613      	mov	r3, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80011da:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <UP_sendInfo+0x180>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011e4:	741a      	strb	r2, [r3, #16]

}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	@ 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc90      	pop	{r4, r7}
 80011ee:	4770      	bx	lr
 80011f0:	200002fc 	.word	0x200002fc

080011f4 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8001202:	e0e2      	b.n	80013ca <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8001204:	4b76      	ldr	r3, [pc, #472]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b06      	cmp	r3, #6
 800120a:	f200 80d7 	bhi.w	80013bc <UP_decodeHeader+0x1c8>
 800120e:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <UP_decodeHeader+0x20>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001231 	.word	0x08001231
 8001218:	08001259 	.word	0x08001259
 800121c:	0800128d 	.word	0x0800128d
 8001220:	080012c1 	.word	0x080012c1
 8001224:	080012f5 	.word	0x080012f5
 8001228:	0800131d 	.word	0x0800131d
 800122c:	0800135f 	.word	0x0800135f
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	1c59      	adds	r1, r3, #1
 800123a:	b2c8      	uxtb	r0, r1
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	7108      	strb	r0, [r1, #4]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b55      	cmp	r3, #85	@ 0x55
 8001246:	f040 80bd 	bne.w	80013c4 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 800124a:	4b65      	ldr	r3, [pc, #404]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	709a      	strb	r2, [r3, #2]
                }
                break;
 8001256:	e0b5      	b.n	80013c4 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	1c59      	adds	r1, r3, #1
 8001262:	b2c8      	uxtb	r0, r1
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	7108      	strb	r0, [r1, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b4e      	cmp	r3, #78	@ 0x4e
 800126e:	d103      	bne.n	8001278 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8001270:	4b5b      	ldr	r3, [pc, #364]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001272:	2202      	movs	r2, #2
 8001274:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8001276:	e0a8      	b.n	80013ca <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	3b01      	subs	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8001284:	4b56      	ldr	r3, [pc, #344]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
                break;
 800128a:	e09e      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	1c59      	adds	r1, r3, #1
 8001296:	b2c8      	uxtb	r0, r1
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	7108      	strb	r0, [r1, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b45      	cmp	r3, #69	@ 0x45
 80012a2:	d103      	bne.n	80012ac <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 80012a4:	4b4e      	ldr	r3, [pc, #312]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 80012aa:	e08e      	b.n	80013ca <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80012b8:	4b49      	ldr	r3, [pc, #292]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
                break;
 80012be:	e084      	b.n	80013ca <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	1c59      	adds	r1, r3, #1
 80012ca:	b2c8      	uxtb	r0, r1
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	7108      	strb	r0, [r1, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b52      	cmp	r3, #82	@ 0x52
 80012d6:	d103      	bne.n	80012e0 <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 80012d8:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012da:	2204      	movs	r2, #4
 80012dc:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 80012de:	e074      	b.n	80013ca <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80012ec:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
            break;
 80012f2:	e06a      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	791a      	ldrb	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	b2c8      	uxtb	r0, r1
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	7108      	strb	r0, [r1, #4]
 800130c:	4413      	add	r3, r2
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001312:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8001314:	4b32      	ldr	r3, [pc, #200]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001316:	2205      	movs	r2, #5
 8001318:	701a      	strb	r2, [r3, #0]
                break;
 800131a:	e056      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	1c59      	adds	r1, r3, #1
 8001326:	b2c8      	uxtb	r0, r1
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	7108      	strb	r0, [r1, #4]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b3a      	cmp	r3, #58	@ 0x3a
 8001332:	d10a      	bne.n	800134a <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001336:	2206      	movs	r2, #6
 8001338:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8001348:	e03f      	b.n	80013ca <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
                break;
 800135c:	e035      	b.n	80013ca <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d90f      	bls.n	8001386 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	1c59      	adds	r1, r3, #1
 8001370:	b2c8      	uxtb	r0, r1
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	7108      	strb	r0, [r1, #4]
 8001376:	4413      	add	r3, r2
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	4053      	eors	r3, r2
 8001380:	b2da      	uxtb	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001390:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <UP_decodeHeader+0x1f0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	789a      	ldrb	r2, [r3, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	7909      	ldrb	r1, [r1, #4]
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d109      	bne.n	80013c8 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f817 	bl	80013e8 <UP_decodeData>
                    }
                }

                break;
 80013ba:	e005      	b.n	80013c8 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <UP_decodeHeader+0x1ec>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
                break;
 80013c2:	e002      	b.n	80013ca <UP_decodeHeader+0x1d6>
                break;
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <UP_decodeHeader+0x1d6>
                break;
 80013c8:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f47f af17 	bne.w	8001204 <UP_decodeHeader+0x10>
        }
    }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002f8 	.word	0x200002f8
 80013e4:	20000300 	.word	0x20000300

080013e8 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	77bb      	strb	r3, [r7, #30]
 80013f4:	2300      	movs	r3, #0
 80013f6:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	3302      	adds	r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3bf0      	subs	r3, #240	@ 0xf0
 8001408:	2b03      	cmp	r3, #3
 800140a:	d84a      	bhi.n	80014a2 <UP_decodeData+0xba>
 800140c:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <UP_decodeData+0x2c>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	0800143b 	.word	0x0800143b
 800141c:	08001451 	.word	0x08001451
 8001420:	08001463 	.word	0x08001463
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8001424:	7fbb      	ldrb	r3, [r7, #30]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	77ba      	strb	r2, [r7, #30]
 800142a:	3320      	adds	r3, #32
 800142c:	443b      	add	r3, r7
 800142e:	22f0      	movs	r2, #240	@ 0xf0
 8001430:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 8001434:	2302      	movs	r3, #2
 8001436:	77fb      	strb	r3, [r7, #31]

    break;
 8001438:	e03e      	b.n	80014b8 <UP_decodeData+0xd0>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 800143a:	7fbb      	ldrb	r3, [r7, #30]
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	77ba      	strb	r2, [r7, #30]
 8001440:	3320      	adds	r3, #32
 8001442:	443b      	add	r3, r7
 8001444:	22f1      	movs	r2, #241	@ 0xf1
 8001446:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 800144a:	2302      	movs	r3, #2
 800144c:	77fb      	strb	r3, [r7, #31]

    break;
 800144e:	e033      	b.n	80014b8 <UP_decodeData+0xd0>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 8001450:	7fbb      	ldrb	r3, [r7, #30]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	77ba      	strb	r2, [r7, #30]
 8001456:	3320      	adds	r3, #32
 8001458:	443b      	add	r3, r7
 800145a:	22f2      	movs	r2, #242	@ 0xf2
 800145c:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 8001460:	e02a      	b.n	80014b8 <UP_decodeData+0xd0>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 8001462:	7fbb      	ldrb	r3, [r7, #30]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	77ba      	strb	r2, [r7, #30]
 8001468:	3320      	adds	r3, #32
 800146a:	443b      	add	r3, r7
 800146c:	22f3      	movs	r2, #243	@ 0xf3
 800146e:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	3303      	adds	r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <UP_decodeData+0xec>)
 8001482:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	3304      	adds	r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <UP_decodeData+0xec>)
 8001494:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <UP_decodeData+0xec>)
 8001498:	f9b3 2000 	ldrsh.w	r2, [r3]
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <UP_decodeData+0xf0>)
 800149e:	801a      	strh	r2, [r3, #0]

    break;
 80014a0:	e00a      	b.n	80014b8 <UP_decodeData+0xd0>

    default:

        bufAux[indiceAux++]=0xFF;
 80014a2:	7fbb      	ldrb	r3, [r7, #30]
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	77ba      	strb	r2, [r7, #30]
 80014a8:	3320      	adds	r3, #32
 80014aa:	443b      	add	r3, r7
 80014ac:	22ff      	movs	r2, #255	@ 0xff
 80014ae:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 80014b2:	2302      	movs	r3, #2
 80014b4:	77fb      	strb	r3, [r7, #31]

    break;
 80014b6:	bf00      	nop
    }

    UP_sendInfo(datosComLib->indexStart+2,bufAux,bytes);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	3302      	adds	r3, #2
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	7ffa      	ldrb	r2, [r7, #31]
 80014c2:	f107 0108 	add.w	r1, r7, #8
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fdd2 	bl	8001070 <UP_sendInfo>
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200002f4 	.word	0x200002f4
 80014d8:	20000000 	.word	0x20000000

080014dc <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	81fb      	strh	r3, [r7, #14]
 80014ec:	e016      	b.n	800151c <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	441a      	add	r2, r3
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <UP_datafromUSB+0x58>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	490e      	ldr	r1, [pc, #56]	@ (8001534 <UP_datafromUSB+0x58>)
 80014fc:	6809      	ldr	r1, [r1, #0]
 80014fe:	78c9      	ldrb	r1, [r1, #3]
 8001500:	b2c9      	uxtb	r1, r1
 8001502:	440b      	add	r3, r1
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <UP_datafromUSB+0x58>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	78da      	ldrb	r2, [r3, #3]
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	3201      	adds	r2, #1
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	3301      	adds	r3, #1
 800151a:	81fb      	strh	r3, [r7, #14]
 800151c:	89fa      	ldrh	r2, [r7, #14]
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	429a      	cmp	r2, r3
 8001522:	d3e4      	bcc.n	80014ee <UP_datafromUSB+0x12>
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	200002fc 	.word	0x200002fc

08001538 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	809a      	strh	r2, [r3, #4]

}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_ADC_ConvCpltCallback>:
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 800156c:	2300      	movs	r3, #0
 800156e:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8001570:	2300      	movs	r3, #0
 8001572:	77fb      	strb	r3, [r7, #31]
 8001574:	e012      	b.n	800159c <HAL_ADC_ConvCpltCallback+0x38>

		casts1.u16[0]=adcBuffer[u];
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	4a0c      	ldr	r2, [pc, #48]	@ (80015ac <HAL_ADC_ConvCpltCallback+0x48>)
 800157a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001580:	801a      	strh	r2, [r3, #0]
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8001582:	7ffa      	ldrb	r2, [r7, #31]
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	4909      	ldr	r1, [pc, #36]	@ (80015ac <HAL_ADC_ConvCpltCallback+0x48>)
 8001588:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800158c:	f107 000c 	add.w	r0, r7, #12
 8001590:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <HAL_ADC_ConvCpltCallback+0x50>)
 8001592:	f00e fc75 	bl	800fe80 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	3301      	adds	r3, #1
 800159a:	77fb      	strb	r3, [r7, #31]
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	d9e9      	bls.n	8001576 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000594 	.word	0x20000594
 80015b0:	20000684 	.word	0x20000684
 80015b4:	080135b0 	.word	0x080135b0

080015b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d104      	bne.n	80015d4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 80015ca:	4a10      	ldr	r2, [pc, #64]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015cc:	7813      	ldrb	r3, [r2, #0]
 80015ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015d2:	7013      	strb	r3, [r2, #0]
	}

	if (htim->Instance == TIM10) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d106      	bne.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x34>
		MPU6050_Read_All(&mpuValues);
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015e0:	f000 fdde 	bl	80021a0 <MPU6050_Read_All>
		mpuValues.DMAREADY=1;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	if(htim->Instance == TIM11){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d104      	bne.n	8001600 <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 80015f6:	2208      	movs	r2, #8
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015fa:	4808      	ldr	r0, [pc, #32]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015fc:	f002 f876 	bl	80036ec <HAL_ADC_Start_DMA>
	}

}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40014800 	.word	0x40014800
 800160c:	200005a4 	.word	0x200005a4
 8001610:	40014400 	.word	0x40014400
 8001614:	200005b8 	.word	0x200005b8
 8001618:	20000594 	.word	0x20000594
 800161c:	20000304 	.word	0x20000304

08001620 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162c:	2b78      	cmp	r3, #120	@ 0x78
 800162e:	d101      	bne.n	8001634 <HAL_I2C_MemTxCpltCallback+0x14>
		SSD1306_DMAREADY();
 8001630:	f001 faae 	bl	8002b90 <SSD1306_DMAREADY>
	}
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==MPU6050_ADDR){
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001648:	2bd0      	cmp	r3, #208	@ 0xd0
 800164a:	d15b      	bne.n	8001704 <HAL_I2C_MemRxCpltCallback+0xc8>

	    mpuValues.MAF.rawData[0] = (int16_t) (mpuValues.Rec_Data[0] << 8 | mpuValues.Rec_Data[1]);
 800164c:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 800164e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001652:	b21b      	sxth	r3, r3
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 800165a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 8001666:	871a      	strh	r2, [r3, #56]	@ 0x38
	    mpuValues.MAF.rawData[1] = (int16_t) (mpuValues.Rec_Data[2] << 8 | mpuValues.Rec_Data[3]);
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 800166a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800166e:	b21b      	sxth	r3, r3
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 8001676:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21a      	sxth	r2, r3
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 8001682:	875a      	strh	r2, [r3, #58]	@ 0x3a
	    mpuValues.MAF.rawData[2] = (int16_t) (mpuValues.Rec_Data[4] << 8 | mpuValues.Rec_Data[5]);
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 8001686:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800168a:	b21b      	sxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 8001692:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21a      	sxth	r2, r3
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 800169e:	879a      	strh	r2, [r3, #60]	@ 0x3c
	    mpuValues.MAF.rawData[3] = (int16_t) (mpuValues.Rec_Data[8] << 8 | mpuValues.Rec_Data[9]);
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016a2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
	    mpuValues.MAF.rawData[4] = (int16_t) (mpuValues.Rec_Data[10]<< 8 | mpuValues.Rec_Data[11]);
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	4b10      	ldr	r3, [pc, #64]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	    mpuValues.MAF.rawData[5] = (int16_t) (mpuValues.Rec_Data[12]<< 8 | mpuValues.Rec_Data[13]);
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016e8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016f4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

		mpuValues.MAF.isOn=1;
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		SSD1306_DMAREADY();
 8001700:	f001 fa46 	bl	8002b90 <SSD1306_DMAREADY>
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200005b8 	.word	0x200005b8

08001710 <SSD1306_Task>:

void SSD1306_Task(){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af02      	add	r7, sp, #8

	if(SISINIT){
 8001716:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <SSD1306_Task+0xd8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d05d      	beq.n	80017e0 <SSD1306_Task+0xd0>
		SSD1306_DrawBitmap(0, 0, MainScreen, 128, 64,WHITE);
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2340      	movs	r3, #64	@ 0x40
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	4a2f      	ldr	r2, [pc, #188]	@ (80017ec <SSD1306_Task+0xdc>)
 8001730:	2100      	movs	r1, #0
 8001732:	2000      	movs	r0, #0
 8001734:	f000 ff42 	bl	80025bc <SSD1306_DrawBitmap>
//		SSD1306_GotoXY(43, 35);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
//		sprintf(display, "Z%c%.*f",(mpuValues.Accel.Z_filtered >= 0.0f) ? '+' : '-',(fabsf(mpuValues.Accel.Z_filtered) < 9.9f) ? 2 : 1,fabsf(mpuValues.Accel.Z_filtered));
//		SSD1306_GotoXY(43, 50);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
		sprintf(display, "X:%c%d ", (mpuValues.Gyro.X_filtered >= 0) ? '+' : '-', abs(mpuValues.Gyro.X_filtered));
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <SSD1306_Task+0xe0>)
 800173a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db01      	blt.n	8001746 <SSD1306_Task+0x36>
 8001742:	222b      	movs	r2, #43	@ 0x2b
 8001744:	e000      	b.n	8001748 <SSD1306_Task+0x38>
 8001746:	222d      	movs	r2, #45	@ 0x2d
 8001748:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <SSD1306_Task+0xe0>)
 800174a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800174e:	2b00      	cmp	r3, #0
 8001750:	bfb8      	it	lt
 8001752:	425b      	neglt	r3, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	4927      	ldr	r1, [pc, #156]	@ (80017f4 <SSD1306_Task+0xe4>)
 8001758:	4827      	ldr	r0, [pc, #156]	@ (80017f8 <SSD1306_Task+0xe8>)
 800175a:	f00e fb91 	bl	800fe80 <siprintf>
		SSD1306_GotoXY(90, 20);
 800175e:	2114      	movs	r1, #20
 8001760:	205a      	movs	r0, #90	@ 0x5a
 8001762:	f001 f921 	bl	80029a8 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 8001766:	2200      	movs	r2, #0
 8001768:	4924      	ldr	r1, [pc, #144]	@ (80017fc <SSD1306_Task+0xec>)
 800176a:	4823      	ldr	r0, [pc, #140]	@ (80017f8 <SSD1306_Task+0xe8>)
 800176c:	f001 f9b0 	bl	8002ad0 <SSD1306_Puts>
		sprintf(display, "Y:%c%d ", (mpuValues.Gyro.Y_filtered >= 0) ? '+' : '-', abs(mpuValues.Gyro.Y_filtered));
 8001770:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <SSD1306_Task+0xe0>)
 8001772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db01      	blt.n	800177e <SSD1306_Task+0x6e>
 800177a:	222b      	movs	r2, #43	@ 0x2b
 800177c:	e000      	b.n	8001780 <SSD1306_Task+0x70>
 800177e:	222d      	movs	r2, #45	@ 0x2d
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <SSD1306_Task+0xe0>)
 8001782:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfb8      	it	lt
 800178a:	425b      	neglt	r3, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	491c      	ldr	r1, [pc, #112]	@ (8001800 <SSD1306_Task+0xf0>)
 8001790:	4819      	ldr	r0, [pc, #100]	@ (80017f8 <SSD1306_Task+0xe8>)
 8001792:	f00e fb75 	bl	800fe80 <siprintf>
		SSD1306_GotoXY(90, 35);
 8001796:	2123      	movs	r1, #35	@ 0x23
 8001798:	205a      	movs	r0, #90	@ 0x5a
 800179a:	f001 f905 	bl	80029a8 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 800179e:	2200      	movs	r2, #0
 80017a0:	4916      	ldr	r1, [pc, #88]	@ (80017fc <SSD1306_Task+0xec>)
 80017a2:	4815      	ldr	r0, [pc, #84]	@ (80017f8 <SSD1306_Task+0xe8>)
 80017a4:	f001 f994 	bl	8002ad0 <SSD1306_Puts>
		sprintf(display, "Z:%c%d ", (mpuValues.Gyro.Z_filtered) ? '+' : '-', abs(mpuValues.Gyro.Z_filtered));
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <SSD1306_Task+0xe0>)
 80017aa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SSD1306_Task+0xa6>
 80017b2:	222b      	movs	r2, #43	@ 0x2b
 80017b4:	e000      	b.n	80017b8 <SSD1306_Task+0xa8>
 80017b6:	222d      	movs	r2, #45	@ 0x2d
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <SSD1306_Task+0xe0>)
 80017ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bfb8      	it	lt
 80017c2:	425b      	neglt	r3, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	490f      	ldr	r1, [pc, #60]	@ (8001804 <SSD1306_Task+0xf4>)
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <SSD1306_Task+0xe8>)
 80017ca:	f00e fb59 	bl	800fe80 <siprintf>
		SSD1306_GotoXY(90, 50);
 80017ce:	2132      	movs	r1, #50	@ 0x32
 80017d0:	205a      	movs	r0, #90	@ 0x5a
 80017d2:	f001 f8e9 	bl	80029a8 <SSD1306_GotoXY>
		SSD1306_Puts(display, &Font_7x10, BLACK);
 80017d6:	2200      	movs	r2, #0
 80017d8:	4908      	ldr	r1, [pc, #32]	@ (80017fc <SSD1306_Task+0xec>)
 80017da:	4807      	ldr	r0, [pc, #28]	@ (80017f8 <SSD1306_Task+0xe8>)
 80017dc:	f001 f978 	bl	8002ad0 <SSD1306_Puts>
	}
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200005a4 	.word	0x200005a4
 80017ec:	0801418c 	.word	0x0801418c
 80017f0:	200005b8 	.word	0x200005b8
 80017f4:	080135c0 	.word	0x080135c0
 80017f8:	20000688 	.word	0x20000688
 80017fc:	20000004 	.word	0x20000004
 8001800:	080135c8 	.word	0x080135c8
 8001804:	080135d0 	.word	0x080135d0

08001808 <task10ms>:

void task10ms(){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;

	if(ticker%10==0){
 800180c:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <task10ms+0x78>)
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <task10ms+0x7c>)
 8001812:	fba3 1302 	umull	r1, r3, r3, r2
 8001816:	08d9      	lsrs	r1, r3, #3
 8001818:	460b      	mov	r3, r1
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10d      	bne.n	8001844 <task10ms+0x3c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001828:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800182c:	4816      	ldr	r0, [pc, #88]	@ (8001888 <task10ms+0x80>)
 800182e:	f003 f984 	bl	8004b3a <HAL_GPIO_TogglePin>
		UP_sendInfo(MPUDATA,(uint8_t*)mpuValues.MAF.filtredData, 13);
 8001832:	220d      	movs	r2, #13
 8001834:	4915      	ldr	r1, [pc, #84]	@ (800188c <task10ms+0x84>)
 8001836:	20f4      	movs	r0, #244	@ 0xf4
 8001838:	f7ff fc1a 	bl	8001070 <UP_sendInfo>
		SSD1306_Task();
 800183c:	f7ff ff68 	bl	8001710 <SSD1306_Task>
		SSD1306_RefreshReady();
 8001840:	f001 f9b2 	bl	8002ba8 <SSD1306_RefreshReady>
	}
	if(ticker==255){
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <task10ms+0x78>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2bff      	cmp	r3, #255	@ 0xff
 800184a:	d110      	bne.n	800186e <task10ms+0x66>
		if(!SISINIT){
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <task10ms+0x88>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <task10ms+0x56>
			SSD1306_Clear();
 800185a:	f001 f95e 	bl	8002b1a <SSD1306_Clear>
		}
		SISINIT=TRUE;
 800185e:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <task10ms+0x88>)
 8001860:	7813      	ldrb	r3, [r2, #0]
 8001862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001866:	7013      	strb	r3, [r2, #0]
		ticker=0;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <task10ms+0x78>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <task10ms+0x78>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b02      	ldr	r3, [pc, #8]	@ (8001880 <task10ms+0x78>)
 8001878:	701a      	strb	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000069c 	.word	0x2000069c
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	40020800 	.word	0x40020800
 800188c:	20000674 	.word	0x20000674
 8001890:	200005a4 	.word	0x200005a4

08001894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189a:	f001 fd3d 	bl	8003318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189e:	f000 f891 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a2:	f000 faa3 	bl	8001dec <MX_GPIO_Init>
  MX_DMA_Init();
 80018a6:	f000 fa79 	bl	8001d9c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80018aa:	f00c fd8f 	bl	800e3cc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80018ae:	f000 f971 	bl	8001b94 <MX_TIM3_Init>
  MX_TIM11_Init();
 80018b2:	f000 fa4f 	bl	8001d54 <MX_TIM11_Init>
  MX_ADC1_Init();
 80018b6:	f000 f8ed 	bl	8001a94 <MX_ADC1_Init>
  MX_I2C1_Init();
 80018ba:	f000 f93d 	bl	8001b38 <MX_I2C1_Init>
  MX_TIM10_Init();
 80018be:	f000 fa25 	bl	8001d0c <MX_TIM10_Init>
  MX_TIM9_Init();
 80018c2:	f000 f9e9 	bl	8001c98 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80018c6:	4830      	ldr	r0, [pc, #192]	@ (8001988 <main+0xf4>)
 80018c8:	f008 fae0 	bl	8009e8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80018cc:	482f      	ldr	r0, [pc, #188]	@ (800198c <main+0xf8>)
 80018ce:	f008 fadd 	bl	8009e8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 80018d2:	482f      	ldr	r0, [pc, #188]	@ (8001990 <main+0xfc>)
 80018d4:	f008 fada 	bl	8009e8c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018d8:	2104      	movs	r1, #4
 80018da:	482b      	ldr	r0, [pc, #172]	@ (8001988 <main+0xf4>)
 80018dc:	f008 fb92 	bl	800a004 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018e0:	2100      	movs	r1, #0
 80018e2:	4829      	ldr	r0, [pc, #164]	@ (8001988 <main+0xf4>)
 80018e4:	f008 fb8e 	bl	800a004 <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 80018e8:	492a      	ldr	r1, [pc, #168]	@ (8001994 <main+0x100>)
 80018ea:	482b      	ldr	r0, [pc, #172]	@ (8001998 <main+0x104>)
 80018ec:	f001 f93a 	bl	8002b64 <Display_Set_I2C_Master_Transmit>
  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
 80018f0:	492a      	ldr	r1, [pc, #168]	@ (800199c <main+0x108>)
 80018f2:	482b      	ldr	r0, [pc, #172]	@ (80019a0 <main+0x10c>)
 80018f4:	f000 fe4c 	bl	8002590 <MPU6050_I2C_Blocking>
  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
 80018f8:	492a      	ldr	r1, [pc, #168]	@ (80019a4 <main+0x110>)
 80018fa:	4827      	ldr	r0, [pc, #156]	@ (8001998 <main+0x104>)
 80018fc:	f000 fe32 	bl	8002564 <MPU6050_NonBlocking_DMA>
  SSD1306_Init();
 8001900:	f000 fec4 	bl	800268c <SSD1306_Init>
  MPU6050_Init(&mpuValues);
 8001904:	4828      	ldr	r0, [pc, #160]	@ (80019a8 <main+0x114>)
 8001906:	f000 fbdf 	bl	80020c8 <MPU6050_Init>
  CDC_AttachRxData(&UP_datafromUSB);
 800190a:	4828      	ldr	r0, [pc, #160]	@ (80019ac <main+0x118>)
 800190c:	f00c feb2 	bl	800e674 <CDC_AttachRxData>
  myFlags.allFlags=0;
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <main+0x11c>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8001916:	2100      	movs	r1, #0
 8001918:	4826      	ldr	r0, [pc, #152]	@ (80019b4 <main+0x120>)
 800191a:	f7ff fb89 	bl	8001030 <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <main+0xf4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001924:	b29b      	uxth	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	4823      	ldr	r0, [pc, #140]	@ (80019b8 <main+0x124>)
 800192a:	f7ff fe05 	bl	8001538 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <main+0xf4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	b29b      	uxth	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	4820      	ldr	r0, [pc, #128]	@ (80019bc <main+0x128>)
 800193a:	f7ff fdfd 	bl	8001538 <en_InitENG>

  SSD1306_DrawBitmap(0, 0, LogoMicros, 128, 64, WHITE);
 800193e:	2301      	movs	r3, #1
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	4a1d      	ldr	r2, [pc, #116]	@ (80019c0 <main+0x12c>)
 800194a:	2100      	movs	r1, #0
 800194c:	2000      	movs	r0, #0
 800194e:	f000 fe35 	bl	80025bc <SSD1306_DrawBitmap>
  MPU6050_Calibrate(&mpuValues);
 8001952:	4815      	ldr	r0, [pc, #84]	@ (80019a8 <main+0x114>)
 8001954:	f000 fc42 	bl	80021dc <MPU6050_Calibrate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <main+0x11c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <main+0xe0>
		 task10ms();
 8001966:	f7ff ff4f 	bl	8001808 <task10ms>
		 IS10MS=FALSE;
 800196a:	4a11      	ldr	r2, [pc, #68]	@ (80019b0 <main+0x11c>)
 800196c:	7813      	ldrb	r3, [r2, #0]
 800196e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001972:	7013      	strb	r3, [r2, #0]
	  }
	MPU6050_MAF(&mpuValues);
 8001974:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <main+0x114>)
 8001976:	f000 fcd1 	bl	800231c <MPU6050_MAF>
	UP_comunicationsTask(&datosComSerie);
 800197a:	480e      	ldr	r0, [pc, #56]	@ (80019b4 <main+0x120>)
 800197c:	f000 fac2 	bl	8001f04 <UP_comunicationsTask>

	SSD1306_UpdateScreen();
 8001980:	f000 ff36 	bl	80027f0 <SSD1306_UpdateScreen>
	  if(IS10MS){
 8001984:	e7e8      	b.n	8001958 <main+0xc4>
 8001986:	bf00      	nop
 8001988:	20000460 	.word	0x20000460
 800198c:	20000538 	.word	0x20000538
 8001990:	200004f0 	.word	0x200004f0
 8001994:	08001fd1 	.word	0x08001fd1
 8001998:	08001f99 	.word	0x08001f99
 800199c:	08002005 	.word	0x08002005
 80019a0:	0800207d 	.word	0x0800207d
 80019a4:	08002045 	.word	0x08002045
 80019a8:	200005b8 	.word	0x200005b8
 80019ac:	080014dd 	.word	0x080014dd
 80019b0:	200005a4 	.word	0x200005a4
 80019b4:	20000580 	.word	0x20000580
 80019b8:	200005a8 	.word	0x200005a8
 80019bc:	200005b0 	.word	0x200005b0
 80019c0:	08013d8c 	.word	0x08013d8c

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b094      	sub	sp, #80	@ 0x50
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	2230      	movs	r2, #48	@ 0x30
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00e fab9 	bl	800ff4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <SystemClock_Config+0xc8>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	4a26      	ldr	r2, [pc, #152]	@ (8001a8c <SystemClock_Config+0xc8>)
 80019f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f8:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <SystemClock_Config+0xc8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <SystemClock_Config+0xcc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	@ (8001a90 <SystemClock_Config+0xcc>)
 8001a0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <SystemClock_Config+0xcc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a34:	2319      	movs	r3, #25
 8001a36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a38:	23c0      	movs	r3, #192	@ 0xc0
 8001a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a40:	2304      	movs	r3, #4
 8001a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 fd8b 	bl	8009564 <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a54:	f000 fb32 	bl	80020bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	230f      	movs	r3, #15
 8001a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2103      	movs	r1, #3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f007 ffed 	bl	8009a54 <HAL_RCC_ClockConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a80:	f000 fb1c 	bl	80020bc <Error_Handler>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3750      	adds	r7, #80	@ 0x50
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000

08001a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001aa8:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <MX_ADC1_Init+0x9c>)
 8001aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001aae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ab2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ad6:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <MX_ADC1_Init+0xa0>)
 8001ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af4:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001af6:	f001 fca5 	bl	8003444 <HAL_ADC_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b00:	f000 fadc 	bl	80020bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001b16:	f001 fefb 	bl	8003910 <HAL_ADC_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b20:	f000 facc 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000304 	.word	0x20000304
 8001b30:	40012000 	.word	0x40012000
 8001b34:	0f000001 	.word	0x0f000001

08001b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <MX_I2C1_Init+0x54>)
 8001b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b44:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <MX_I2C1_Init+0x58>)
 8001b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <MX_I2C1_Init+0x50>)
 8001b76:	f002 fffb 	bl	8004b70 <HAL_I2C_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b80:	f000 fa9c 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000034c 	.word	0x2000034c
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	00061a80 	.word	0x00061a80

08001b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	@ 0x38
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc4:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001bc6:	4a33      	ldr	r2, [pc, #204]	@ (8001c94 <MX_TIM3_Init+0x100>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001bca:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001bcc:	220f      	movs	r2, #15
 8001bce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001bd8:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001bdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bea:	4829      	ldr	r0, [pc, #164]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001bec:	f008 f8fe 	bl	8009dec <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bf6:	f000 fa61 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4822      	ldr	r0, [pc, #136]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001c08:	f008 fc5e 	bl	800a4c8 <HAL_TIM_ConfigClockSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c12:	f000 fa53 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c16:	481e      	ldr	r0, [pc, #120]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001c18:	f008 f99a 	bl	8009f50 <HAL_TIM_PWM_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c22:	f000 fa4b 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	4619      	mov	r1, r3
 8001c34:	4816      	ldr	r0, [pc, #88]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001c36:	f009 f809 	bl	800ac4c <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c40:	f000 fa3c 	bl	80020bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c44:	2360      	movs	r3, #96	@ 0x60
 8001c46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001c5c:	f008 fb72 	bl	800a344 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c66:	f000 fa29 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001c72:	f008 fb67 	bl	800a344 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001c7c:	f000 fa1e 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c80:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <MX_TIM3_Init+0xfc>)
 8001c82:	f001 f971 	bl	8002f68 <HAL_TIM_MspPostInit>

}
 8001c86:	bf00      	nop
 8001c88:	3738      	adds	r7, #56	@ 0x38
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000460 	.word	0x20000460
 8001c94:	40000400 	.word	0x40000400

08001c98 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001cac:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <MX_TIM9_Init+0x70>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 23999;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001cbe:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001cc2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001cd2:	f008 f88b 	bl	8009dec <HAL_TIM_Base_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001cdc:	f000 f9ee 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <MX_TIM9_Init+0x6c>)
 8001cec:	f008 fbec 	bl	800a4c8 <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001cf6:	f000 f9e1 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200004a8 	.word	0x200004a8
 8001d08:	40014000 	.word	0x40014000

08001d0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_TIM10_Init+0x40>)
 8001d12:	4a0f      	ldr	r2, [pc, #60]	@ (8001d50 <MX_TIM10_Init+0x44>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 47;
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <MX_TIM10_Init+0x40>)
 8001d18:	222f      	movs	r2, #47	@ 0x2f
 8001d1a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <MX_TIM10_Init+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <MX_TIM10_Init+0x40>)
 8001d24:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d28:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <MX_TIM10_Init+0x40>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <MX_TIM10_Init+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <MX_TIM10_Init+0x40>)
 8001d38:	f008 f858 	bl	8009dec <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001d42:	f000 f9bb 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200004f0 	.word	0x200004f0
 8001d50:	40014400 	.word	0x40014400

08001d54 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <MX_TIM11_Init+0x40>)
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <MX_TIM11_Init+0x44>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <MX_TIM11_Init+0x40>)
 8001d60:	225f      	movs	r2, #95	@ 0x5f
 8001d62:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <MX_TIM11_Init+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <MX_TIM11_Init+0x40>)
 8001d6c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d70:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <MX_TIM11_Init+0x40>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <MX_TIM11_Init+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_TIM11_Init+0x40>)
 8001d80:	f008 f834 	bl	8009dec <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001d8a:	f000 f997 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000538 	.word	0x20000538
 8001d98:	40014800 	.word	0x40014800

08001d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <MX_DMA_Init+0x4c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a0f      	ldr	r2, [pc, #60]	@ (8001de8 <MX_DMA_Init+0x4c>)
 8001dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <MX_DMA_Init+0x4c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	200b      	movs	r0, #11
 8001dc4:	f002 f939 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dc8:	200b      	movs	r0, #11
 8001dca:	f002 f952 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	200c      	movs	r0, #12
 8001dd4:	f002 f931 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001dd8:	200c      	movs	r0, #12
 8001dda:	f002 f94a 	bl	8004072 <HAL_NVIC_EnableIRQ>

}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	@ 0x28
 8001df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b38      	ldr	r3, [pc, #224]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a33      	ldr	r2, [pc, #204]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <MX_GPIO_Init+0x108>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e78:	481f      	ldr	r0, [pc, #124]	@ (8001ef8 <MX_GPIO_Init+0x10c>)
 8001e7a:	f002 fe45 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8001e84:	481d      	ldr	r0, [pc, #116]	@ (8001efc <MX_GPIO_Init+0x110>)
 8001e86:	f002 fe3f 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2108      	movs	r1, #8
 8001e8e:	481c      	ldr	r0, [pc, #112]	@ (8001f00 <MX_GPIO_Init+0x114>)
 8001e90:	f002 fe3a 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4812      	ldr	r0, [pc, #72]	@ (8001ef8 <MX_GPIO_Init+0x10c>)
 8001eae:	f002 fca7 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 8001eb2:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8001eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480c      	ldr	r0, [pc, #48]	@ (8001efc <MX_GPIO_Init+0x110>)
 8001ecc:	f002 fc98 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4806      	ldr	r0, [pc, #24]	@ (8001f00 <MX_GPIO_Init+0x114>)
 8001ee8:	f002 fc8a 	bl	8004800 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	@ 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400

08001f04 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	791a      	ldrb	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d007      	beq.n	8001f2a <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff f96a 	bl	80011f4 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	78db      	ldrb	r3, [r3, #3]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	799a      	ldrb	r2, [r3, #6]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	795b      	ldrb	r3, [r3, #5]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d02b      	beq.n	8001f8e <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	795a      	ldrb	r2, [r3, #5]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	799b      	ldrb	r3, [r3, #6]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d908      	bls.n	8001f54 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	795a      	ldrb	r2, [r3, #5]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	799b      	ldrb	r3, [r3, #6]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	741a      	strb	r2, [r3, #16]
 8001f52:	e006      	b.n	8001f62 <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	799b      	ldrb	r3, [r3, #6]
 8001f58:	f1c3 0304 	rsb	r3, r3, #4
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	7992      	ldrb	r2, [r2, #6]
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7c1b      	ldrb	r3, [r3, #16]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f00c fb46 	bl	800e604 <CDC_Transmit_FS>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d107      	bne.n	8001f8e <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	799a      	ldrb	r2, [r3, #6]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7c1b      	ldrb	r3, [r3, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <I2C_DMA_Transmit>:

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60ba      	str	r2, [r7, #8]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	81fb      	strh	r3, [r7, #14]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	81bb      	strh	r3, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8001fae:	89ba      	ldrh	r2, [r7, #12]
 8001fb0:	89f9      	ldrh	r1, [r7, #14]
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	4803      	ldr	r0, [pc, #12]	@ (8001fcc <I2C_DMA_Transmit+0x34>)
 8001fbe:	f003 fb5b 	bl	8005678 <HAL_I2C_Mem_Write_DMA>
	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000034c 	.word	0x2000034c

08001fd0 <I2C_1_Abstract_Master_Transmit_Blocking>:

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4603      	mov	r3, r0
 8001fdc:	81fb      	strh	r3, [r7, #14]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8001fe2:	89ba      	ldrh	r2, [r7, #12]
 8001fe4:	89f9      	ldrh	r1, [r7, #14]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	4804      	ldr	r0, [pc, #16]	@ (8002000 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 8001ff0:	f002 ff18 	bl	8004e24 <HAL_I2C_Master_Transmit>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000034c 	.word	0x2000034c

08002004 <I2C_1_Abstract_Mem_Write_Blocking>:

uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af04      	add	r7, sp, #16
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4603      	mov	r3, r0
 800200e:	80fb      	strh	r3, [r7, #6]
 8002010:	460b      	mov	r3, r1
 8002012:	717b      	strb	r3, [r7, #5]
 8002014:	4613      	mov	r3, r2
 8002016:	713b      	strb	r3, [r7, #4]
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8002018:	797b      	ldrb	r3, [r7, #5]
 800201a:	b29a      	uxth	r2, r3
 800201c:	793b      	ldrb	r3, [r7, #4]
 800201e:	b298      	uxth	r0, r3
 8002020:	88f9      	ldrh	r1, [r7, #6]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	9302      	str	r3, [sp, #8]
 8002026:	8a3b      	ldrh	r3, [r7, #16]
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	4603      	mov	r3, r0
 8002030:	4803      	ldr	r0, [pc, #12]	@ (8002040 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 8002032:	f002 fff5 	bl	8005020 <HAL_I2C_Mem_Write>
 8002036:	4603      	mov	r3, r0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	2000034c 	.word	0x2000034c

08002044 <I2C_DMA_Recive>:

uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af02      	add	r7, sp, #8
 800204a:	60ba      	str	r2, [r7, #8]
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	81fb      	strh	r3, [r7, #14]
 8002052:	460b      	mov	r3, r1
 8002054:	81bb      	strh	r3, [r7, #12]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800205a:	89ba      	ldrh	r2, [r7, #12]
 800205c:	89f9      	ldrh	r1, [r7, #14]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2301      	movs	r3, #1
 8002068:	4803      	ldr	r0, [pc, #12]	@ (8002078 <I2C_DMA_Recive+0x34>)
 800206a:	f003 fc63 	bl	8005934 <HAL_I2C_Mem_Read_DMA>
	return 1;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000034c 	.word	0x2000034c

0800207c <I2C_RBlocking>:

uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af04      	add	r7, sp, #16
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4603      	mov	r3, r0
 8002086:	81fb      	strh	r3, [r7, #14]
 8002088:	460b      	mov	r3, r1
 800208a:	81bb      	strh	r3, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
 8002090:	8978      	ldrh	r0, [r7, #10]
 8002092:	89ba      	ldrh	r2, [r7, #12]
 8002094:	89f9      	ldrh	r1, [r7, #14]
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	8b3b      	ldrh	r3, [r7, #24]
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4603      	mov	r3, r0
 80020a6:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <I2C_RBlocking+0x3c>)
 80020a8:	f003 f8b4 	bl	8005214 <HAL_I2C_Mem_Read>
	return 1;
 80020ac:	2301      	movs	r3, #1

}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000034c 	.word	0x2000034c

080020bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c0:	b672      	cpsid	i
}
 80020c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <Error_Handler+0x8>

080020c8 <MPU6050_Init>:
static uint8_t (*I2C_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

uint8_t MPU6050_Init(MPU6050_t *MpuData){
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	6078      	str	r0, [r7, #4]

    uint8_t check;
    uint8_t Data;

    MpuData->DMAREADY=1;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    // check device ID WHO_AM_I

    I2C_Recive_Blocking(MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);
 80020d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <MPU6050_Init+0xd0>)
 80020da:	681c      	ldr	r4, [r3, #0]
 80020dc:	f107 030f 	add.w	r3, r7, #15
 80020e0:	2201      	movs	r2, #1
 80020e2:	9200      	str	r2, [sp, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	2175      	movs	r1, #117	@ 0x75
 80020e8:	20d0      	movs	r0, #208	@ 0xd0
 80020ea:	47a0      	blx	r4
    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b68      	cmp	r3, #104	@ 0x68
 80020f0:	d14c      	bne.n	800218c <MPU6050_Init+0xc4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,1000);
 80020f6:	4b29      	ldr	r3, [pc, #164]	@ (800219c <MPU6050_Init+0xd4>)
 80020f8:	681c      	ldr	r4, [r3, #0]
 80020fa:	f107 030e 	add.w	r3, r7, #14
 80020fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002102:	9201      	str	r2, [sp, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	9200      	str	r2, [sp, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	216b      	movs	r1, #107	@ 0x6b
 800210c:	20d0      	movs	r0, #208	@ 0xd0
 800210e:	47a0      	blx	r4

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002110:	2307      	movs	r3, #7
 8002112:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 8002114:	4b21      	ldr	r3, [pc, #132]	@ (800219c <MPU6050_Init+0xd4>)
 8002116:	681c      	ldr	r4, [r3, #0]
 8002118:	f107 030e 	add.w	r3, r7, #14
 800211c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002120:	9201      	str	r2, [sp, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	9200      	str	r2, [sp, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	2119      	movs	r1, #25
 800212a:	20d0      	movs	r0, #208	@ 0xd0
 800212c:	47a0      	blx	r4

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800212e:	2300      	movs	r3, #0
 8002130:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <MPU6050_Init+0xd4>)
 8002134:	681c      	ldr	r4, [r3, #0]
 8002136:	f107 030e 	add.w	r3, r7, #14
 800213a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800213e:	9201      	str	r2, [sp, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	9200      	str	r2, [sp, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	211c      	movs	r1, #28
 8002148:	20d0      	movs	r0, #208	@ 0xd0
 800214a:	47a0      	blx	r4

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800214c:	2300      	movs	r3, #0
 800214e:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000);
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <MPU6050_Init+0xd4>)
 8002152:	681c      	ldr	r4, [r3, #0]
 8002154:	f107 030e 	add.w	r3, r7, #14
 8002158:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800215c:	9201      	str	r2, [sp, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	9200      	str	r2, [sp, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	211b      	movs	r1, #27
 8002166:	20d0      	movs	r0, #208	@ 0xd0
 8002168:	47a0      	blx	r4

        Data = 0x03;
 800216a:	2303      	movs	r3, #3
 800216c:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, LOWPASS_CONFIG, 1, &Data, 1,1000);
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <MPU6050_Init+0xd4>)
 8002170:	681c      	ldr	r4, [r3, #0]
 8002172:	f107 030e 	add.w	r3, r7, #14
 8002176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800217a:	9201      	str	r2, [sp, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	9200      	str	r2, [sp, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	211a      	movs	r1, #26
 8002184:	20d0      	movs	r0, #208	@ 0xd0
 8002186:	47a0      	blx	r4

        return 0;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <MPU6050_Init+0xc6>
    }
    return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	bf00      	nop
 8002198:	200006a8 	.word	0x200006a8
 800219c:	200006ac 	.word	0x200006ac

080021a0 <MPU6050_Read_All>:


void MPU6050_Read_All(MPU6050_t *MpuData) {
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if(!MpuData->DMAREADY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <MPU6050_Read_All+0x2e>
    	return;

    I2C_Recive(MPU6050_ADDR, ACCEL_XOUT_H_REG,MpuData->Rec_Data, 14);
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <MPU6050_Read_All+0x38>)
 80021b4:	681c      	ldr	r4, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80021bc:	230e      	movs	r3, #14
 80021be:	213b      	movs	r1, #59	@ 0x3b
 80021c0:	20d0      	movs	r0, #208	@ 0xd0
 80021c2:	47a0      	blx	r4
    MpuData->DMAREADY=0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80021cc:	e000      	b.n	80021d0 <MPU6050_Read_All+0x30>
    	return;
 80021ce:	bf00      	nop

}
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200006a0 	.word	0x200006a0

080021dc <MPU6050_Calibrate>:

void MPU6050_Calibrate(MPU6050_t *mpu){
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b08d      	sub	sp, #52	@ 0x34
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
 80021f4:	615a      	str	r2, [r3, #20]

	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80021f6:	2300      	movs	r3, #0
 80021f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80021fa:	e066      	b.n	80022ca <MPU6050_Calibrate+0xee>
		I2C_Recive_Blocking(MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, mpu->Rec_Data, 14);
 80021fc:	4b46      	ldr	r3, [pc, #280]	@ (8002318 <MPU6050_Calibrate+0x13c>)
 80021fe:	681c      	ldr	r4, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3326      	adds	r3, #38	@ 0x26
 8002204:	220e      	movs	r2, #14
 8002206:	9200      	str	r2, [sp, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	213b      	movs	r1, #59	@ 0x3b
 800220c:	20d0      	movs	r0, #208	@ 0xd0
 800220e:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->Rec_Data[0] << 8) | mpu->Rec_Data[1]);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8002218:	b212      	sxth	r2, r2
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	b211      	sxth	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8002224:	b212      	sxth	r2, r2
 8002226:	430a      	orrs	r2, r1
 8002228:	b212      	sxth	r2, r2
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->Rec_Data[2] << 8) | mpu->Rec_Data[3]);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8002236:	b212      	sxth	r2, r2
 8002238:	0212      	lsls	r2, r2, #8
 800223a:	b211      	sxth	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8002242:	b212      	sxth	r2, r2
 8002244:	430a      	orrs	r2, r1
 8002246:	b212      	sxth	r2, r2
 8002248:	4413      	add	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->Rec_Data[4] << 8) | mpu->Rec_Data[5]);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8002254:	b212      	sxth	r2, r2
 8002256:	0212      	lsls	r2, r2, #8
 8002258:	b211      	sxth	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8002260:	b212      	sxth	r2, r2
 8002262:	430a      	orrs	r2, r1
 8002264:	b212      	sxth	r2, r2
 8002266:	4413      	add	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->Rec_Data[8 ] << 8) | mpu->Rec_Data[9 ]);
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8002272:	b212      	sxth	r2, r2
 8002274:	0212      	lsls	r2, r2, #8
 8002276:	b211      	sxth	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800227e:	b212      	sxth	r2, r2
 8002280:	430a      	orrs	r2, r1
 8002282:	b212      	sxth	r2, r2
 8002284:	4413      	add	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->Rec_Data[10] << 8) | mpu->Rec_Data[11]);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8002290:	b212      	sxth	r2, r2
 8002292:	0212      	lsls	r2, r2, #8
 8002294:	b211      	sxth	r1, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 800229c:	b212      	sxth	r2, r2
 800229e:	430a      	orrs	r2, r1
 80022a0:	b212      	sxth	r2, r2
 80022a2:	4413      	add	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->Rec_Data[12] << 8) | mpu->Rec_Data[13]);
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80022ae:	b212      	sxth	r2, r2
 80022b0:	0212      	lsls	r2, r2, #8
 80022b2:	b211      	sxth	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	f892 2033 	ldrb.w	r2, [r2, #51]	@ 0x33
 80022ba:	b212      	sxth	r2, r2
 80022bc:	430a      	orrs	r2, r1
 80022be:	b212      	sxth	r2, r2
 80022c0:	4413      	add	r3, r2
 80022c2:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80022c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80022c6:	3301      	adds	r3, #1
 80022c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80022ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022d0:	d394      	bcc.n	80021fc <MPU6050_Calibrate+0x20>
	}

    mpu->Accel.X_Offset = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	131b      	asrs	r3, r3, #12
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	83da      	strh	r2, [r3, #30]
    mpu->Accel.Y_Offset = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	131b      	asrs	r3, r3, #12
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	841a      	strh	r2, [r3, #32]
    mpu->Accel.Z_Offset = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS)/* - SCALE_FACTOR*/;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	131b      	asrs	r3, r3, #12
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	845a      	strh	r2, [r3, #34]	@ 0x22

    mpu->Gyro.X_Offset = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	131b      	asrs	r3, r3, #12
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	819a      	strh	r2, [r3, #12]
	mpu->Gyro.Y_Offset = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	131b      	asrs	r3, r3, #12
 80022fe:	b21a      	sxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	81da      	strh	r2, [r3, #14]
	mpu->Gyro.Z_Offset = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	131b      	asrs	r3, r3, #12
 8002308:	b21a      	sxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	821a      	strh	r2, [r3, #16]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 800230e:	bf00      	nop
 8002310:	372c      	adds	r7, #44	@ 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop
 8002318:	200006a8 	.word	0x200006a8

0800231c <MPU6050_MAF>:

void MPU6050_MAF(MPU6050_t *mpu){ //Moving Average Filter
 800231c:	b490      	push	{r4, r7}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8115 	beq.w	800255a <MPU6050_MAF+0x23e>
		mpu->MAF.isOn = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e057      	b.n	80023ee <MPU6050_MAF+0xd2>
			mpu->MAF.sumData[channel] -= mpu->MAF.mediaBuffer[mpu->MAF.index][channel];
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	3310      	adds	r3, #16
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8002350:	461c      	mov	r4, r3
 8002352:	7bf8      	ldrb	r0, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4623      	mov	r3, r4
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4423      	add	r3, r4
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4403      	add	r3, r0
 8002360:	332c      	adds	r3, #44	@ 0x2c
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	440b      	add	r3, r1
 8002366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800236a:	4619      	mov	r1, r3
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	1a52      	subs	r2, r2, r1
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	3310      	adds	r3, #16
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	605a      	str	r2, [r3, #4]
			mpu->MAF.sumData[channel] += mpu->MAF.rawData[channel];
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	3310      	adds	r3, #16
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	7bf9      	ldrb	r1, [r7, #15]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	311c      	adds	r1, #28
 800238c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8002390:	4619      	mov	r1, r3
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	440a      	add	r2, r1
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	3310      	adds	r3, #16
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	605a      	str	r2, [r3, #4]
			mpu->MAF.mediaBuffer[mpu->MAF.index][channel] = mpu->MAF.rawData[channel];
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80023a8:	4618      	mov	r0, r3
 80023aa:	7bf9      	ldrb	r1, [r7, #15]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	321c      	adds	r2, #28
 80023b0:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4603      	mov	r3, r0
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4403      	add	r3, r0
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	440b      	add	r3, r1
 80023c0:	332c      	adds	r3, #44	@ 0x2c
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	4622      	mov	r2, r4
 80023c8:	809a      	strh	r2, [r3, #4]
			mpu->MAF.filtredData[channel] = (mpu->MAF.sumData[channel] >> NUM_MAF_BITS);
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	3310      	adds	r3, #16
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	10da      	asrs	r2, r3, #3
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	b211      	sxth	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	335c      	adds	r3, #92	@ 0x5c
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	460a      	mov	r2, r1
 80023e6:	809a      	strh	r2, [r3, #4]
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	3301      	adds	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d9a4      	bls.n	800233e <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80023fa:	3301      	adds	r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		mpu->MAF.index &= (NUM_MAF - 1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	b2da      	uxtb	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

		// ACC: CALCULATE TRUE ACCELERATION

		mpu->MAF.filtredData[0] = mpu->MAF.filtredData[0] - mpu->Accel.X_Offset;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002424:	b29b      	uxth	r3, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	b29b      	uxth	r3, r3
 800242a:	b21a      	sxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		mpu->MAF.filtredData[1] = mpu->MAF.filtredData[1] - mpu->Accel.Y_Offset;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002440:	b29b      	uxth	r3, r3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	b21a      	sxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		mpu->MAF.filtredData[2]  = mpu->MAF.filtredData[2] - mpu->Accel.Z_Offset;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800245c:	b29b      	uxth	r3, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	b21a      	sxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->MAF.filtredData[3] = mpu->MAF.filtredData[3] - mpu->Gyro.X_Offset;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002478:	b29b      	uxth	r3, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	b29b      	uxth	r3, r3
 800247e:	b21a      	sxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		mpu->MAF.filtredData[4] = mpu->MAF.filtredData[4] - mpu->Gyro.Y_Offset;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002494:	b29b      	uxth	r3, r3
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	b29b      	uxth	r3, r3
 800249a:	b21a      	sxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		mpu->MAF.filtredData[5] = mpu->MAF.filtredData[5] - mpu->Gyro.Z_Offset;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6

		mpu->Accel.X_filtered = mpu->MAF.filtredData[0] - mpu->Accel.X_Offset;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	831a      	strh	r2, [r3, #24]
		mpu->Accel.Y_filtered = mpu->MAF.filtredData[1] - mpu->Accel.Y_Offset;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 80024de:	b29a      	uxth	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	835a      	strh	r2, [r3, #26]
		mpu->Accel.Z_filtered  = mpu->MAF.filtredData[2] - mpu->Accel.Z_Offset;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002500:	b29b      	uxth	r3, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	b29b      	uxth	r3, r3
 8002506:	b21a      	sxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	839a      	strh	r2, [r3, #28]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.X_filtered = mpu->MAF.filtredData[3] - mpu->Gyro.X_Offset;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800251a:	b29b      	uxth	r3, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b29b      	uxth	r3, r3
 8002520:	b21a      	sxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	80da      	strh	r2, [r3, #6]
		mpu->Gyro.Y_filtered = mpu->MAF.filtredData[4] - mpu->Gyro.Y_Offset;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002534:	b29b      	uxth	r3, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	b21a      	sxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	811a      	strh	r2, [r3, #8]
		mpu->Gyro.Z_filtered = mpu->MAF.filtredData[5] - mpu->Gyro.Z_Offset;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8002546:	b29a      	uxth	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800254e:	b29b      	uxth	r3, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	b21a      	sxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	815a      	strh	r2, [r3, #10]
	}
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bc90      	pop	{r4, r7}
 8002562:	4770      	bx	lr

08002564 <MPU6050_NonBlocking_DMA>:

void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
	I2C_Transmit = Master_Transmit;
 800256e:	4a06      	ldr	r2, [pc, #24]	@ (8002588 <MPU6050_NonBlocking_DMA+0x24>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6013      	str	r3, [r2, #0]
	I2C_Recive = Master_Recive;
 8002574:	4a05      	ldr	r2, [pc, #20]	@ (800258c <MPU6050_NonBlocking_DMA+0x28>)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6013      	str	r3, [r2, #0]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	200006a4 	.word	0x200006a4
 800258c:	200006a0 	.word	0x200006a0

08002590 <MPU6050_I2C_Blocking>:
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	I2C_Recive_Blocking = Recive_Blocking;
 800259a:	4a06      	ldr	r2, [pc, #24]	@ (80025b4 <MPU6050_I2C_Blocking+0x24>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6013      	str	r3, [r2, #0]
	I2C_Transmit_Blocking = Transmit_Blocking;
 80025a0:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <MPU6050_I2C_Blocking+0x28>)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	200006a8 	.word	0x200006a8
 80025b8:	200006ac 	.word	0x200006ac

080025bc <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60ba      	str	r2, [r7, #8]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	81fb      	strh	r3, [r7, #14]
 80025ca:	460b      	mov	r3, r1
 80025cc:	81bb      	strh	r3, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 80025d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d6:	3307      	adds	r3, #7
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da00      	bge.n	80025de <SSD1306_DrawBitmap+0x22>
 80025dc:	3307      	adds	r3, #7
 80025de:	10db      	asrs	r3, r3, #3
 80025e0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	82bb      	strh	r3, [r7, #20]
 80025ea:	e044      	b.n	8002676 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	827b      	strh	r3, [r7, #18]
 80025f0:	e02f      	b.n	8002652 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80025f2:	8a7b      	ldrh	r3, [r7, #18]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
 8002602:	e012      	b.n	800262a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002604:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002608:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800260c:	fb03 f202 	mul.w	r2, r3, r2
 8002610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002614:	2b00      	cmp	r3, #0
 8002616:	da00      	bge.n	800261a <SSD1306_DrawBitmap+0x5e>
 8002618:	3307      	adds	r3, #7
 800261a:	10db      	asrs	r3, r3, #3
 800261c:	b21b      	sxth	r3, r3
 800261e:	4413      	add	r3, r2
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800262a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	da09      	bge.n	8002646 <SSD1306_DrawBitmap+0x8a>
 8002632:	89fa      	ldrh	r2, [r7, #14]
 8002634:	8a7b      	ldrh	r3, [r7, #18]
 8002636:	4413      	add	r3, r2
 8002638:	b29b      	uxth	r3, r3
 800263a:	89b9      	ldrh	r1, [r7, #12]
 800263c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f951 	bl	80028e8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800264a:	b29b      	uxth	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	b29b      	uxth	r3, r3
 8002650:	827b      	strh	r3, [r7, #18]
 8002652:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800265a:	429a      	cmp	r2, r3
 800265c:	dbc9      	blt.n	80025f2 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800265e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002662:	b29b      	uxth	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	b29b      	uxth	r3, r3
 8002668:	82bb      	strh	r3, [r7, #20]
 800266a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800266e:	b29b      	uxth	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	b29b      	uxth	r3, r3
 8002674:	81bb      	strh	r3, [r7, #12]
 8002676:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800267a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800267e:	429a      	cmp	r2, r3
 8002680:	dbb4      	blt.n	80025ec <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <SSD1306_Init>:

void SSD1306_Init()
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 8002690:	22ae      	movs	r2, #174	@ 0xae
 8002692:	2100      	movs	r1, #0
 8002694:	2078      	movs	r0, #120	@ 0x78
 8002696:	f000 fa49 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800269a:	2220      	movs	r2, #32
 800269c:	2100      	movs	r1, #0
 800269e:	2078      	movs	r0, #120	@ 0x78
 80026a0:	f000 fa44 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80026a4:	2210      	movs	r2, #16
 80026a6:	2100      	movs	r1, #0
 80026a8:	2078      	movs	r0, #120	@ 0x78
 80026aa:	f000 fa3f 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 80026ae:	22b0      	movs	r2, #176	@ 0xb0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2078      	movs	r0, #120	@ 0x78
 80026b4:	f000 fa3a 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 80026b8:	22c8      	movs	r2, #200	@ 0xc8
 80026ba:	2100      	movs	r1, #0
 80026bc:	2078      	movs	r0, #120	@ 0x78
 80026be:	f000 fa35 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2078      	movs	r0, #120	@ 0x78
 80026c8:	f000 fa30 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80026cc:	2210      	movs	r2, #16
 80026ce:	2100      	movs	r1, #0
 80026d0:	2078      	movs	r0, #120	@ 0x78
 80026d2:	f000 fa2b 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	2100      	movs	r1, #0
 80026da:	2078      	movs	r0, #120	@ 0x78
 80026dc:	f000 fa26 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80026e0:	2281      	movs	r2, #129	@ 0x81
 80026e2:	2100      	movs	r1, #0
 80026e4:	2078      	movs	r0, #120	@ 0x78
 80026e6:	f000 fa21 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	2100      	movs	r1, #0
 80026ee:	2078      	movs	r0, #120	@ 0x78
 80026f0:	f000 fa1c 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80026f4:	22a1      	movs	r2, #161	@ 0xa1
 80026f6:	2100      	movs	r1, #0
 80026f8:	2078      	movs	r0, #120	@ 0x78
 80026fa:	f000 fa17 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 80026fe:	22a6      	movs	r2, #166	@ 0xa6
 8002700:	2100      	movs	r1, #0
 8002702:	2078      	movs	r0, #120	@ 0x78
 8002704:	f000 fa12 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8002708:	22a8      	movs	r2, #168	@ 0xa8
 800270a:	2100      	movs	r1, #0
 800270c:	2078      	movs	r0, #120	@ 0x78
 800270e:	f000 fa0d 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8002712:	223f      	movs	r2, #63	@ 0x3f
 8002714:	2100      	movs	r1, #0
 8002716:	2078      	movs	r0, #120	@ 0x78
 8002718:	f000 fa08 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 800271c:	22a4      	movs	r2, #164	@ 0xa4
 800271e:	2100      	movs	r1, #0
 8002720:	2078      	movs	r0, #120	@ 0x78
 8002722:	f000 fa03 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8002726:	22d3      	movs	r2, #211	@ 0xd3
 8002728:	2100      	movs	r1, #0
 800272a:	2078      	movs	r0, #120	@ 0x78
 800272c:	f000 f9fe 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2078      	movs	r0, #120	@ 0x78
 8002736:	f000 f9f9 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 800273a:	22d5      	movs	r2, #213	@ 0xd5
 800273c:	2100      	movs	r1, #0
 800273e:	2078      	movs	r0, #120	@ 0x78
 8002740:	f000 f9f4 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8002744:	22f0      	movs	r2, #240	@ 0xf0
 8002746:	2100      	movs	r1, #0
 8002748:	2078      	movs	r0, #120	@ 0x78
 800274a:	f000 f9ef 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 800274e:	22d9      	movs	r2, #217	@ 0xd9
 8002750:	2100      	movs	r1, #0
 8002752:	2078      	movs	r0, #120	@ 0x78
 8002754:	f000 f9ea 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8002758:	2222      	movs	r2, #34	@ 0x22
 800275a:	2100      	movs	r1, #0
 800275c:	2078      	movs	r0, #120	@ 0x78
 800275e:	f000 f9e5 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8002762:	22da      	movs	r2, #218	@ 0xda
 8002764:	2100      	movs	r1, #0
 8002766:	2078      	movs	r0, #120	@ 0x78
 8002768:	f000 f9e0 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800276c:	2212      	movs	r2, #18
 800276e:	2100      	movs	r1, #0
 8002770:	2078      	movs	r0, #120	@ 0x78
 8002772:	f000 f9db 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8002776:	22db      	movs	r2, #219	@ 0xdb
 8002778:	2100      	movs	r1, #0
 800277a:	2078      	movs	r0, #120	@ 0x78
 800277c:	f000 f9d6 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8002780:	2220      	movs	r2, #32
 8002782:	2100      	movs	r1, #0
 8002784:	2078      	movs	r0, #120	@ 0x78
 8002786:	f000 f9d1 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 800278a:	228d      	movs	r2, #141	@ 0x8d
 800278c:	2100      	movs	r1, #0
 800278e:	2078      	movs	r0, #120	@ 0x78
 8002790:	f000 f9cc 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8002794:	2214      	movs	r2, #20
 8002796:	2100      	movs	r1, #0
 8002798:	2078      	movs	r0, #120	@ 0x78
 800279a:	f000 f9c7 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 800279e:	22af      	movs	r2, #175	@ 0xaf
 80027a0:	2100      	movs	r1, #0
 80027a2:	2078      	movs	r0, #120	@ 0x78
 80027a4:	f000 f9c2 	bl	8002b2c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80027a8:	222e      	movs	r2, #46	@ 0x2e
 80027aa:	2100      	movs	r1, #0
 80027ac:	2078      	movs	r0, #120	@ 0x78
 80027ae:	f000 f9bd 	bl	8002b2c <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <SSD1306_Init+0x160>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <SSD1306_Init+0x160>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80027be:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <SSD1306_Init+0x160>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <SSD1306_Init+0x160>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <SSD1306_Init+0x160>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	71da      	strb	r2, [r3, #7]
	SSD1306.Needtorefresh=1;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <SSD1306_Init+0x160>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	741a      	strb	r2, [r3, #16]
	SSD1306.DMAREADY=0;
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <SSD1306_Init+0x160>)
 80027d8:	2200      	movs	r2, #0
 80027da:	745a      	strb	r2, [r3, #17]
	SSD1306_Fill(BLACK);
 80027dc:	2000      	movs	r0, #0
 80027de:	f000 f86b 	bl	80028b8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80027e2:	f000 f805 	bl	80027f0 <SSD1306_UpdateScreen>

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000ab8 	.word	0x20000ab8

080027f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80027f0:	b598      	push	{r3, r4, r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	if(SSD1306.DMAREADY && SSD1306.Needtorefresh){
 80027f4:	4b2c      	ldr	r3, [pc, #176]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 80027f6:	7c5b      	ldrb	r3, [r3, #17]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d052      	beq.n	80028a2 <SSD1306_UpdateScreen+0xb2>
 80027fc:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 80027fe:	7c1b      	ldrb	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d04e      	beq.n	80028a2 <SSD1306_UpdateScreen+0xb2>
		switch(SSD1306.DMA){
 8002804:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002806:	79db      	ldrb	r3, [r3, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01c      	beq.n	8002846 <SSD1306_UpdateScreen+0x56>
 800280c:	2b01      	cmp	r3, #1
 800280e:	d137      	bne.n	8002880 <SSD1306_UpdateScreen+0x90>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[SSD1306_WIDTH*SSD1306.Page], SSD1306_WIDTH)==1){
 8002810:	4b26      	ldr	r3, [pc, #152]	@ (80028ac <SSD1306_UpdateScreen+0xbc>)
 8002812:	681c      	ldr	r4, [r3, #0]
 8002814:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002816:	799b      	ldrb	r3, [r3, #6]
 8002818:	01db      	lsls	r3, r3, #7
 800281a:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <SSD1306_UpdateScreen+0xc0>)
 800281c:	441a      	add	r2, r3
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	2140      	movs	r1, #64	@ 0x40
 8002822:	2078      	movs	r0, #120	@ 0x78
 8002824:	47a0      	blx	r4
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d12d      	bne.n	8002888 <SSD1306_UpdateScreen+0x98>
					SSD1306.Page++;
 800282c:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 800282e:	799b      	ldrb	r3, [r3, #6]
 8002830:	3301      	adds	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b1c      	ldr	r3, [pc, #112]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002836:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 800283a:	2200      	movs	r2, #0
 800283c:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 800283e:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002840:	2200      	movs	r2, #0
 8002842:	745a      	strb	r2, [r3, #17]
				}
				break;
 8002844:	e020      	b.n	8002888 <SSD1306_UpdateScreen+0x98>
			case CMD:

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002848:	799b      	ldrb	r3, [r3, #6]
 800284a:	3b50      	subs	r3, #80	@ 0x50
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002850:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002854:	2200      	movs	r2, #0
 8002856:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 800285a:	2210      	movs	r2, #16
 800285c:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 800285e:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <SSD1306_UpdateScreen+0xbc>)
 8002860:	681c      	ldr	r4, [r3, #0]
 8002862:	2303      	movs	r3, #3
 8002864:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <SSD1306_UpdateScreen+0xc4>)
 8002866:	2100      	movs	r1, #0
 8002868:	2078      	movs	r0, #120	@ 0x78
 800286a:	47a0      	blx	r4
 800286c:	4603      	mov	r3, r0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d10c      	bne.n	800288c <SSD1306_UpdateScreen+0x9c>
					SSD1306.DMA=Data;
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002874:	2201      	movs	r2, #1
 8002876:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 800287a:	2200      	movs	r2, #0
 800287c:	745a      	strb	r2, [r3, #17]
				}
				break;
 800287e:	e005      	b.n	800288c <SSD1306_UpdateScreen+0x9c>

			default:
				SSD1306.Page=8;
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002882:	2208      	movs	r2, #8
 8002884:	719a      	strb	r2, [r3, #6]
				break;
 8002886:	e002      	b.n	800288e <SSD1306_UpdateScreen+0x9e>
				break;
 8002888:	bf00      	nop
 800288a:	e000      	b.n	800288e <SSD1306_UpdateScreen+0x9e>
				break;
 800288c:	bf00      	nop
			}
		if(SSD1306.Page>7){
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002890:	799b      	ldrb	r3, [r3, #6]
 8002892:	2b07      	cmp	r3, #7
 8002894:	d905      	bls.n	80028a2 <SSD1306_UpdateScreen+0xb2>
			SSD1306.Page=0;
 8002896:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 8002898:	2200      	movs	r2, #0
 800289a:	719a      	strb	r2, [r3, #6]
			SSD1306.Needtorefresh=0;
 800289c:	4b02      	ldr	r3, [pc, #8]	@ (80028a8 <SSD1306_UpdateScreen+0xb8>)
 800289e:	2200      	movs	r2, #0
 80028a0:	741a      	strb	r2, [r3, #16]
		}
	}
}
 80028a2:	bf00      	nop
 80028a4:	bd98      	pop	{r3, r4, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000ab8 	.word	0x20000ab8
 80028ac:	20000ab0 	.word	0x20000ab0
 80028b0:	200006b0 	.word	0x200006b0
 80028b4:	20000ac0 	.word	0x20000ac0

080028b8 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <SSD1306_Fill+0x14>
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <SSD1306_Fill+0x16>
 80028cc:	23ff      	movs	r3, #255	@ 0xff
 80028ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d2:	4619      	mov	r1, r3
 80028d4:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <SSD1306_Fill+0x2c>)
 80028d6:	f00d fb38 	bl	800ff4a <memset>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200006b0 	.word	0x200006b0

080028e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
 80028f2:	460b      	mov	r3, r1
 80028f4:	80bb      	strh	r3, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80028fe:	d848      	bhi.n	8002992 <SSD1306_DrawPixel+0xaa>
 8002900:	88bb      	ldrh	r3, [r7, #4]
 8002902:	2b3f      	cmp	r3, #63	@ 0x3f
 8002904:	d845      	bhi.n	8002992 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8002906:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <SSD1306_DrawPixel+0xb8>)
 8002908:	791b      	ldrb	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d11a      	bne.n	8002958 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002922:	88fa      	ldrh	r2, [r7, #6]
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	b298      	uxth	r0, r3
 800292a:	4603      	mov	r3, r0
 800292c:	01db      	lsls	r3, r3, #7
 800292e:	4413      	add	r3, r2
 8002930:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <SSD1306_DrawPixel+0xbc>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	b25a      	sxtb	r2, r3
 8002936:	88bb      	ldrh	r3, [r7, #4]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	b25b      	sxtb	r3, r3
 8002944:	4313      	orrs	r3, r2
 8002946:	b259      	sxtb	r1, r3
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	4603      	mov	r3, r0
 800294c:	01db      	lsls	r3, r3, #7
 800294e:	4413      	add	r3, r2
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	4a14      	ldr	r2, [pc, #80]	@ (80029a4 <SSD1306_DrawPixel+0xbc>)
 8002954:	54d1      	strb	r1, [r2, r3]
 8002956:	e01d      	b.n	8002994 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	b298      	uxth	r0, r3
 8002960:	4603      	mov	r3, r0
 8002962:	01db      	lsls	r3, r3, #7
 8002964:	4413      	add	r3, r2
 8002966:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <SSD1306_DrawPixel+0xbc>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	b25a      	sxtb	r2, r3
 800296c:	88bb      	ldrh	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	b25b      	sxtb	r3, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	b25b      	sxtb	r3, r3
 800297e:	4013      	ands	r3, r2
 8002980:	b259      	sxtb	r1, r3
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	4603      	mov	r3, r0
 8002986:	01db      	lsls	r3, r3, #7
 8002988:	4413      	add	r3, r2
 800298a:	b2c9      	uxtb	r1, r1
 800298c:	4a05      	ldr	r2, [pc, #20]	@ (80029a4 <SSD1306_DrawPixel+0xbc>)
 800298e:	54d1      	strb	r1, [r2, r3]
 8002990:	e000      	b.n	8002994 <SSD1306_DrawPixel+0xac>
		return;
 8002992:	bf00      	nop
	}
}
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000ab8 	.word	0x20000ab8
 80029a4:	200006b0 	.word	0x200006b0

080029a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	460a      	mov	r2, r1
 80029b2:	80fb      	strh	r3, [r7, #6]
 80029b4:	4613      	mov	r3, r2
 80029b6:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 80029b8:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <SSD1306_GotoXY+0x28>)
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80029be:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <SSD1306_GotoXY+0x28>)
 80029c0:	88bb      	ldrh	r3, [r7, #4]
 80029c2:	8053      	strh	r3, [r2, #2]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	20000ab8 	.word	0x20000ab8

080029d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 80029e4:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <SSD1306_Putc+0xf8>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80029f2:	dc07      	bgt.n	8002a04 <SSD1306_Putc+0x30>
 80029f4:	4b35      	ldr	r3, [pc, #212]	@ (8002acc <SSD1306_Putc+0xf8>)
 80029f6:	885b      	ldrh	r3, [r3, #2]
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	785b      	ldrb	r3, [r3, #1]
 80029fe:	4413      	add	r3, r2
 8002a00:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a02:	dd01      	ble.n	8002a08 <SSD1306_Putc+0x34>
		return 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e05d      	b.n	8002ac4 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e04b      	b.n	8002aa6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	3b20      	subs	r3, #32
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	7849      	ldrb	r1, [r1, #1]
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4619      	mov	r1, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	440b      	add	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e030      	b.n	8002a94 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002a42:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <SSD1306_Putc+0xf8>)
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	b298      	uxth	r0, r3
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <SSD1306_Putc+0xf8>)
 8002a50:	885a      	ldrh	r2, [r3, #2]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	79ba      	ldrb	r2, [r7, #6]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7ff ff43 	bl	80028e8 <SSD1306_DrawPixel>
 8002a62:	e014      	b.n	8002a8e <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002a64:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <SSD1306_Putc+0xf8>)
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b298      	uxth	r0, r3
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <SSD1306_Putc+0xf8>)
 8002a72:	885a      	ldrh	r2, [r3, #2]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	79bb      	ldrb	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf0c      	ite	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	2300      	movne	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f7ff ff2d 	bl	80028e8 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3301      	adds	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d3c8      	bcc.n	8002a32 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	785b      	ldrb	r3, [r3, #1]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d3ad      	bcc.n	8002a0e <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <SSD1306_Putc+0xf8>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <SSD1306_Putc+0xf8>)
 8002ac0:	801a      	strh	r2, [r3, #0]
	return ch;
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000ab8 	.word	0x20000ab8

08002ad0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8002ade:	e012      	b.n	8002b06 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	79fa      	ldrb	r2, [r7, #7]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff73 	bl	80029d4 <SSD1306_Putc>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d002      	beq.n	8002b00 <SSD1306_Puts+0x30>
			return *str;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	e008      	b.n	8002b12 <SSD1306_Puts+0x42>
		}
		str++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
	while(*str)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e8      	bne.n	8002ae0 <SSD1306_Puts+0x10>
	}
	return *str;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	781b      	ldrb	r3, [r3, #0]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7ff feca 	bl	80028b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002b24:	f7ff fe64 	bl	80027f0 <SSD1306_UpdateScreen>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
 8002b36:	460b      	mov	r3, r1
 8002b38:	71bb      	strb	r3, [r7, #6]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002b3e:	79bb      	ldrb	r3, [r7, #6]
 8002b40:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002b42:	797b      	ldrb	r3, [r7, #5]
 8002b44:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <SSD1306_I2C_Write+0x34>)
 8002b48:	681c      	ldr	r4, [r3, #0]
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	b298      	uxth	r0, r3
 8002b4e:	f107 010c 	add.w	r1, r7, #12
 8002b52:	230a      	movs	r3, #10
 8002b54:	2202      	movs	r2, #2
 8002b56:	47a0      	blx	r4
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	20000ab4 	.word	0x20000ab4

08002b64 <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 8002b6e:	4a06      	ldr	r2, [pc, #24]	@ (8002b88 <Display_Set_I2C_Master_Transmit+0x24>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8002b74:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <Display_Set_I2C_Master_Transmit+0x28>)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6013      	str	r3, [r2, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000ab0 	.word	0x20000ab0
 8002b8c:	20000ab4 	.word	0x20000ab4

08002b90 <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(){
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	SSD1306.DMAREADY=1;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <SSD1306_DMAREADY+0x14>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	745a      	strb	r2, [r3, #17]
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	20000ab8 	.word	0x20000ab8

08002ba8 <SSD1306_RefreshReady>:

void SSD1306_RefreshReady(){
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	SSD1306.Needtorefresh=1;
 8002bac:	4b03      	ldr	r3, [pc, #12]	@ (8002bbc <SSD1306_RefreshReady+0x14>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	741a      	strb	r2, [r3, #16]
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000ab8 	.word	0x20000ab8

08002bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <HAL_MspInit+0x58>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	4a12      	ldr	r2, [pc, #72]	@ (8002c18 <HAL_MspInit+0x58>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_MspInit+0x58>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <HAL_MspInit+0x58>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <HAL_MspInit+0x58>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_MspInit+0x58>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	2051      	movs	r0, #81	@ 0x51
 8002c04:	f001 fa19 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002c08:	2051      	movs	r0, #81	@ 0x51
 8002c0a:	f001 fa32 	bl	8004072 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a28      	ldr	r2, [pc, #160]	@ (8002cdc <HAL_ADC_MspInit+0xc0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d149      	bne.n	8002cd2 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b27      	ldr	r3, [pc, #156]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	4a26      	ldr	r2, [pc, #152]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b19      	ldr	r3, [pc, #100]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c86:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <HAL_ADC_MspInit+0xc4>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002c92:	23fe      	movs	r3, #254	@ 0xfe
 8002c94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c96:	2303      	movs	r3, #3
 8002c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	f107 0314 	add.w	r3, r7, #20
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480f      	ldr	r0, [pc, #60]	@ (8002ce4 <HAL_ADC_MspInit+0xc8>)
 8002ca6:	f001 fdab 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	480a      	ldr	r0, [pc, #40]	@ (8002ce8 <HAL_ADC_MspInit+0xcc>)
 8002cbe:	f001 fd9f 	bl	8004800 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2012      	movs	r0, #18
 8002cc8:	f001 f9b7 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ccc:	2012      	movs	r0, #18
 8002cce:	f001 f9d0 	bl	8004072 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002cd2:	bf00      	nop
 8002cd4:	3728      	adds	r7, #40	@ 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40012000 	.word	0x40012000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40020400 	.word	0x40020400

08002cec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a4f      	ldr	r2, [pc, #316]	@ (8002e48 <HAL_I2C_MspInit+0x15c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f040 8097 	bne.w	8002e3e <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	4b4d      	ldr	r3, [pc, #308]	@ (8002e4c <HAL_I2C_MspInit+0x160>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	4a4c      	ldr	r2, [pc, #304]	@ (8002e4c <HAL_I2C_MspInit+0x160>)
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d20:	4b4a      	ldr	r3, [pc, #296]	@ (8002e4c <HAL_I2C_MspInit+0x160>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d2c:	23c0      	movs	r3, #192	@ 0xc0
 8002d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d30:	2312      	movs	r3, #18
 8002d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	4842      	ldr	r0, [pc, #264]	@ (8002e50 <HAL_I2C_MspInit+0x164>)
 8002d48:	f001 fd5a 	bl	8004800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	4b3e      	ldr	r3, [pc, #248]	@ (8002e4c <HAL_I2C_MspInit+0x160>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	4a3d      	ldr	r2, [pc, #244]	@ (8002e4c <HAL_I2C_MspInit+0x160>)
 8002d56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e4c <HAL_I2C_MspInit+0x160>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002d68:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e58 <HAL_I2C_MspInit+0x16c>)
 8002d6c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002d6e:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d74:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d76:	2240      	movs	r2, #64	@ 0x40
 8002d78:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7a:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d80:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d86:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d88:	4b32      	ldr	r3, [pc, #200]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d8e:	4b31      	ldr	r3, [pc, #196]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002d94:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002da6:	482b      	ldr	r0, [pc, #172]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002da8:	f001 f97e 	bl	80040a8 <HAL_DMA_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002db2:	f7ff f983 	bl	80020bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002dba:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dbc:	4a25      	ldr	r2, [pc, #148]	@ (8002e54 <HAL_I2C_MspInit+0x168>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002dc2:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002dc4:	4a26      	ldr	r2, [pc, #152]	@ (8002e60 <HAL_I2C_MspInit+0x174>)
 8002dc6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002dca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dd0:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd6:	4b21      	ldr	r3, [pc, #132]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002de4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002df6:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002e02:	4816      	ldr	r0, [pc, #88]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002e04:	f001 f950 	bl	80040a8 <HAL_DMA_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002e0e:	f7ff f955 	bl	80020bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a11      	ldr	r2, [pc, #68]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002e16:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e18:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <HAL_I2C_MspInit+0x170>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	201f      	movs	r0, #31
 8002e24:	f001 f909 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e28:	201f      	movs	r0, #31
 8002e2a:	f001 f922 	bl	8004072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2020      	movs	r0, #32
 8002e34:	f001 f901 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e38:	2020      	movs	r0, #32
 8002e3a:	f001 f91a 	bl	8004072 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	@ 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40005400 	.word	0x40005400
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020400 	.word	0x40020400
 8002e54:	200003a0 	.word	0x200003a0
 8002e58:	40026028 	.word	0x40026028
 8002e5c:	20000400 	.word	0x20000400
 8002e60:	40026010 	.word	0x40026010

08002e64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a38      	ldr	r2, [pc, #224]	@ (8002f54 <HAL_TIM_Base_MspInit+0xf0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d116      	bne.n	8002ea4 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	4b37      	ldr	r3, [pc, #220]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	4a36      	ldr	r2, [pc, #216]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e86:	4b34      	ldr	r3, [pc, #208]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	201d      	movs	r0, #29
 8002e98:	f001 f8cf 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e9c:	201d      	movs	r0, #29
 8002e9e:	f001 f8e8 	bl	8004072 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002ea2:	e052      	b.n	8002f4a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f5c <HAL_TIM_Base_MspInit+0xf8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d116      	bne.n	8002edc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	4a28      	ldr	r2, [pc, #160]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ebe:	4b26      	ldr	r3, [pc, #152]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2018      	movs	r0, #24
 8002ed0:	f001 f8b3 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ed4:	2018      	movs	r0, #24
 8002ed6:	f001 f8cc 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002eda:	e036      	b.n	8002f4a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f60 <HAL_TIM_Base_MspInit+0xfc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d116      	bne.n	8002f14 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	4a1a      	ldr	r2, [pc, #104]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef6:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	2019      	movs	r0, #25
 8002f08:	f001 f897 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f0c:	2019      	movs	r0, #25
 8002f0e:	f001 f8b0 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002f12:	e01a      	b.n	8002f4a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <HAL_TIM_Base_MspInit+0x100>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d115      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	4a0c      	ldr	r2, [pc, #48]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <HAL_TIM_Base_MspInit+0xf4>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	201a      	movs	r0, #26
 8002f40:	f001 f87b 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f44:	201a      	movs	r0, #26
 8002f46:	f001 f894 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800

08002f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <HAL_TIM_MspPostInit+0x68>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d11d      	bne.n	8002fc6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a10      	ldr	r2, [pc, #64]	@ (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 8002fa6:	2330      	movs	r3, #48	@ 0x30
 8002fa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4805      	ldr	r0, [pc, #20]	@ (8002fd8 <HAL_TIM_MspPostInit+0x70>)
 8002fc2:	f001 fc1d 	bl	8004800 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fc6:	bf00      	nop
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020400 	.word	0x40020400

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <NMI_Handler+0x4>

08002fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <HardFault_Handler+0x4>

08002fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <MemManage_Handler+0x4>

08002ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <BusFault_Handler+0x4>

08002ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <UsageFault_Handler+0x4>

08003004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003032:	f000 f9c3 	bl	80033bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <DMA1_Stream0_IRQHandler+0x10>)
 8003042:	f001 f959 	bl	80042f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000400 	.word	0x20000400

08003050 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003054:	4802      	ldr	r0, [pc, #8]	@ (8003060 <DMA1_Stream1_IRQHandler+0x10>)
 8003056:	f001 f94f 	bl	80042f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200003a0 	.word	0x200003a0

08003064 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003068:	4802      	ldr	r0, [pc, #8]	@ (8003074 <ADC_IRQHandler+0x10>)
 800306a:	f000 fa2e 	bl	80034ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000304 	.word	0x20000304

08003078 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800307c:	4802      	ldr	r0, [pc, #8]	@ (8003088 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800307e:	f007 f871 	bl	800a164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	200004a8 	.word	0x200004a8

0800308c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003090:	4802      	ldr	r0, [pc, #8]	@ (800309c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003092:	f007 f867 	bl	800a164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200004f0 	.word	0x200004f0

080030a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80030a6:	f007 f85d 	bl	800a164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000538 	.word	0x20000538

080030b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <TIM3_IRQHandler+0x10>)
 80030ba:	f007 f853 	bl	800a164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000460 	.word	0x20000460

080030c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <I2C1_EV_IRQHandler+0x10>)
 80030ce:	f002 fdc1 	bl	8005c54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000034c 	.word	0x2000034c

080030dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <I2C1_ER_IRQHandler+0x10>)
 80030e2:	f002 ff28 	bl	8005f36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000034c 	.word	0x2000034c

080030f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030f4:	4802      	ldr	r0, [pc, #8]	@ (8003100 <OTG_FS_IRQHandler+0x10>)
 80030f6:	f005 f926 	bl	8008346 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200013b8 	.word	0x200013b8

08003104 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  return 1;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <_kill>:

int _kill(int pid, int sig)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800312c:	f00c ff70 	bl	8010010 <__errno>
 8003130:	4603      	mov	r3, r0
 8003132:	2216      	movs	r2, #22
 8003134:	601a      	str	r2, [r3, #0]
  return -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_exit>:

void _exit (int status)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800314a:	f04f 31ff 	mov.w	r1, #4294967295
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ffe7 	bl	8003122 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <_exit+0x12>

08003158 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e00a      	b.n	8003180 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800316a:	f3af 8000 	nop.w
 800316e:	4601      	mov	r1, r0
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	60ba      	str	r2, [r7, #8]
 8003176:	b2ca      	uxtb	r2, r1
 8003178:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	3301      	adds	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	dbf0      	blt.n	800316a <_read+0x12>
  }

  return len;
 8003188:	687b      	ldr	r3, [r7, #4]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e009      	b.n	80031b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	60ba      	str	r2, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	dbf1      	blt.n	80031a4 <_write+0x12>
  }
  return len;
 80031c0:	687b      	ldr	r3, [r7, #4]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_close>:

int _close(int file)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031f2:	605a      	str	r2, [r3, #4]
  return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <_isatty>:

int _isatty(int file)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800320a:	2301      	movs	r3, #1
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800323c:	4a14      	ldr	r2, [pc, #80]	@ (8003290 <_sbrk+0x5c>)
 800323e:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <_sbrk+0x60>)
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003248:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <_sbrk+0x64>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003250:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <_sbrk+0x64>)
 8003252:	4a12      	ldr	r2, [pc, #72]	@ (800329c <_sbrk+0x68>)
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <_sbrk+0x64>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	429a      	cmp	r2, r3
 8003262:	d207      	bcs.n	8003274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003264:	f00c fed4 	bl	8010010 <__errno>
 8003268:	4603      	mov	r3, r0
 800326a:	220c      	movs	r2, #12
 800326c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	e009      	b.n	8003288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003274:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <_sbrk+0x64>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327a:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <_sbrk+0x64>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <_sbrk+0x64>)
 8003284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003286:	68fb      	ldr	r3, [r7, #12]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20020000 	.word	0x20020000
 8003294:	00000400 	.word	0x00000400
 8003298:	20000acc 	.word	0x20000acc
 800329c:	20001c08 	.word	0x20001c08

080032a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <SystemInit+0x20>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	4a05      	ldr	r2, [pc, #20]	@ (80032c0 <SystemInit+0x20>)
 80032ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032c8:	f7ff ffea 	bl	80032a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032cc:	480c      	ldr	r0, [pc, #48]	@ (8003300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ce:	490d      	ldr	r1, [pc, #52]	@ (8003304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032f2:	f00c fe93 	bl	801001c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032f6:	f7fe facd 	bl	8001894 <main>
  bx  lr    
 80032fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003304:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8003308:	080149e4 	.word	0x080149e4
  ldr r2, =_sbss
 800330c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8003310:	20001c08 	.word	0x20001c08

08003314 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <DMA1_Stream2_IRQHandler>
	...

08003318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800331c:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <HAL_Init+0x40>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0d      	ldr	r2, [pc, #52]	@ (8003358 <HAL_Init+0x40>)
 8003322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003328:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <HAL_Init+0x40>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <HAL_Init+0x40>)
 800332e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <HAL_Init+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a07      	ldr	r2, [pc, #28]	@ (8003358 <HAL_Init+0x40>)
 800333a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003340:	2003      	movs	r0, #3
 8003342:	f000 fe6f 	bl	8004024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003346:	200f      	movs	r0, #15
 8003348:	f000 f808 	bl	800335c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800334c:	f7ff fc38 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023c00 	.word	0x40023c00

0800335c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003364:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_InitTick+0x54>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <HAL_InitTick+0x58>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	4619      	mov	r1, r3
 800336e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003372:	fbb3 f3f1 	udiv	r3, r3, r1
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fe87 	bl	800408e <HAL_SYSTICK_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e00e      	b.n	80033a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b0f      	cmp	r3, #15
 800338e:	d80a      	bhi.n	80033a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003390:	2200      	movs	r2, #0
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f000 fe4f 	bl	800403a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800339c:	4a06      	ldr	r2, [pc, #24]	@ (80033b8 <HAL_InitTick+0x5c>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	2000000c 	.word	0x2000000c
 80033b4:	20000014 	.word	0x20000014
 80033b8:	20000010 	.word	0x20000010

080033bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_IncTick+0x20>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_IncTick+0x24>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <HAL_IncTick+0x24>)
 80033ce:	6013      	str	r3, [r2, #0]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000014 	.word	0x20000014
 80033e0:	20000ad0 	.word	0x20000ad0

080033e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return uwTick;
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <HAL_GetTick+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000ad0 	.word	0x20000ad0

080033fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7ff ffee 	bl	80033e4 <HAL_GetTick>
 8003408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d005      	beq.n	8003422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_Delay+0x44>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003422:	bf00      	nop
 8003424:	f7ff ffde 	bl	80033e4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	429a      	cmp	r2, r3
 8003432:	d8f7      	bhi.n	8003424 <HAL_Delay+0x28>
  {
  }
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000014 	.word	0x20000014

08003444 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e033      	b.n	80034c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fbda 	bl	8002c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800348a:	f023 0302 	bic.w	r3, r3, #2
 800348e:	f043 0202 	orr.w	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fb6c 	bl	8003b74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80034b2:	e001      	b.n	80034b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d049      	beq.n	8003594 <HAL_ADC_IRQHandler+0xca>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d046      	beq.n	8003594 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d12b      	bne.n	8003584 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003530:	2b00      	cmp	r3, #0
 8003532:	d127      	bne.n	8003584 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800354c:	2b00      	cmp	r3, #0
 800354e:	d119      	bne.n	8003584 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0220 	bic.w	r2, r2, #32
 800355e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd ffed 	bl	8001564 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0212 	mvn.w	r2, #18
 8003592:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d057      	beq.n	800365a <HAL_ADC_IRQHandler+0x190>
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d054      	beq.n	800365a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d139      	bne.n	800364a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d006      	beq.n	80035f2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d12b      	bne.n	800364a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d124      	bne.n	800364a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11d      	bne.n	800364a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003612:	2b00      	cmp	r3, #0
 8003614:	d119      	bne.n	800364a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003624:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fc10 	bl	8003e70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 020c 	mvn.w	r2, #12
 8003658:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x1d6>
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d014      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10d      	bne.n	80036a0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f929 	bl	80038e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0201 	mvn.w	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ae:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d015      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x218>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c0:	f043 0202 	orr.w	r2, r3, #2
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0220 	mvn.w	r2, #32
 80036d0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f912 	bl	80038fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0220 	mvn.w	r2, #32
 80036e0:	601a      	str	r2, [r3, #0]
  }
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_ADC_Start_DMA+0x22>
 800370a:	2302      	movs	r3, #2
 800370c:	e0d0      	b.n	80038b0 <HAL_ADC_Start_DMA+0x1c4>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d018      	beq.n	8003756 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003734:	4b60      	ldr	r3, [pc, #384]	@ (80038b8 <HAL_ADC_Start_DMA+0x1cc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a60      	ldr	r2, [pc, #384]	@ (80038bc <HAL_ADC_Start_DMA+0x1d0>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0c9a      	lsrs	r2, r3, #18
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003748:	e002      	b.n	8003750 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3b01      	subs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f9      	bne.n	800374a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003764:	d107      	bne.n	8003776 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003774:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 8088 	bne.w	8003896 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c4:	d106      	bne.n	80037d4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f023 0206 	bic.w	r2, r3, #6
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80037d2:	e002      	b.n	80037da <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037e2:	4b37      	ldr	r3, [pc, #220]	@ (80038c0 <HAL_ADC_Start_DMA+0x1d4>)
 80037e4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ea:	4a36      	ldr	r2, [pc, #216]	@ (80038c4 <HAL_ADC_Start_DMA+0x1d8>)
 80037ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f2:	4a35      	ldr	r2, [pc, #212]	@ (80038c8 <HAL_ADC_Start_DMA+0x1dc>)
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	4a34      	ldr	r2, [pc, #208]	@ (80038cc <HAL_ADC_Start_DMA+0x1e0>)
 80037fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003806:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003816:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003826:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	334c      	adds	r3, #76	@ 0x4c
 8003832:	4619      	mov	r1, r3
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f000 fce4 	bl	8004204 <HAL_DMA_Start_IT>
 800383c:	4603      	mov	r3, r0
 800383e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d129      	bne.n	80038ae <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	e020      	b.n	80038ae <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	@ (80038d0 <HAL_ADC_Start_DMA+0x1e4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d11b      	bne.n	80038ae <HAL_ADC_Start_DMA+0x1c2>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d114      	bne.n	80038ae <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	e00b      	b.n	80038ae <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f043 0210 	orr.w	r2, r3, #16
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	431bde83 	.word	0x431bde83
 80038c0:	40012300 	.word	0x40012300
 80038c4:	08003d6d 	.word	0x08003d6d
 80038c8:	08003e27 	.word	0x08003e27
 80038cc:	08003e43 	.word	0x08003e43
 80038d0:	40012000 	.word	0x40012000

080038d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1c>
 8003928:	2302      	movs	r3, #2
 800392a:	e113      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x244>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b09      	cmp	r3, #9
 800393a:	d925      	bls.n	8003988 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68d9      	ldr	r1, [r3, #12]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	3b1e      	subs	r3, #30
 8003952:	2207      	movs	r2, #7
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43da      	mvns	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	400a      	ands	r2, r1
 8003960:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68d9      	ldr	r1, [r3, #12]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	4618      	mov	r0, r3
 8003974:	4603      	mov	r3, r0
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4403      	add	r3, r0
 800397a:	3b1e      	subs	r3, #30
 800397c:	409a      	lsls	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	e022      	b.n	80039ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6919      	ldr	r1, [r3, #16]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	2207      	movs	r2, #7
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	400a      	ands	r2, r1
 80039aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6919      	ldr	r1, [r3, #16]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4618      	mov	r0, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4403      	add	r3, r0
 80039c4:	409a      	lsls	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d824      	bhi.n	8003a20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	3b05      	subs	r3, #5
 80039e8:	221f      	movs	r2, #31
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	400a      	ands	r2, r1
 80039f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b05      	subs	r3, #5
 8003a12:	fa00 f203 	lsl.w	r2, r0, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a1e:	e04c      	b.n	8003aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	d824      	bhi.n	8003a72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	3b23      	subs	r3, #35	@ 0x23
 8003a3a:	221f      	movs	r2, #31
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43da      	mvns	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	400a      	ands	r2, r1
 8003a48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4618      	mov	r0, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	3b23      	subs	r3, #35	@ 0x23
 8003a64:	fa00 f203 	lsl.w	r2, r0, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a70:	e023      	b.n	8003aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	3b41      	subs	r3, #65	@ 0x41
 8003a84:	221f      	movs	r2, #31
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	400a      	ands	r2, r1
 8003a92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b41      	subs	r3, #65	@ 0x41
 8003aae:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aba:	4b29      	ldr	r3, [pc, #164]	@ (8003b60 <HAL_ADC_ConfigChannel+0x250>)
 8003abc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a28      	ldr	r2, [pc, #160]	@ (8003b64 <HAL_ADC_ConfigChannel+0x254>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d10f      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d8>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b12      	cmp	r3, #18
 8003ace:	d10b      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_ADC_ConfigChannel+0x254>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d12b      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x23a>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_ADC_ConfigChannel+0x258>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x1f4>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b11      	cmp	r3, #17
 8003b02:	d122      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a11      	ldr	r2, [pc, #68]	@ (8003b68 <HAL_ADC_ConfigChannel+0x258>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d111      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b26:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <HAL_ADC_ConfigChannel+0x25c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a11      	ldr	r2, [pc, #68]	@ (8003b70 <HAL_ADC_ConfigChannel+0x260>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	0c9a      	lsrs	r2, r3, #18
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b3c:	e002      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f9      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40012300 	.word	0x40012300
 8003b64:	40012000 	.word	0x40012000
 8003b68:	10000012 	.word	0x10000012
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b7c:	4b79      	ldr	r3, [pc, #484]	@ (8003d64 <ADC_Init+0x1f0>)
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	021a      	lsls	r2, r3, #8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	4a58      	ldr	r2, [pc, #352]	@ (8003d68 <ADC_Init+0x1f4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e00f      	b.n	8003c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0202 	bic.w	r2, r2, #2
 8003c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7e1b      	ldrb	r3, [r3, #24]
 8003c8c:	005a      	lsls	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01b      	beq.n	8003cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	035a      	lsls	r2, r3, #13
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e007      	b.n	8003ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	051a      	lsls	r2, r3, #20
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6899      	ldr	r1, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d2a:	025a      	lsls	r2, r3, #9
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	029a      	lsls	r2, r3, #10
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012300 	.word	0x40012300
 8003d68:	0f000001 	.word	0x0f000001

08003d6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d13c      	bne.n	8003e00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d12b      	bne.n	8003df8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d127      	bne.n	8003df8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d119      	bne.n	8003df8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0220 	bic.w	r2, r2, #32
 8003dd2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7fd fbb3 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dfe:	e00e      	b.n	8003e1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fd75 	bl	80038fc <HAL_ADC_ErrorCallback>
}
 8003e12:	e004      	b.n	8003e1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff fd4d 	bl	80038d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2240      	movs	r2, #64	@ 0x40
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f043 0204 	orr.w	r2, r3, #4
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff fd4a 	bl	80038fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb6:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	60d3      	str	r3, [r2, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	@ (8003ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0307 	and.w	r3, r3, #7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	db0b      	blt.n	8003f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	4907      	ldr	r1, [pc, #28]	@ (8003f20 <__NVIC_EnableIRQ+0x38>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2001      	movs	r0, #1
 8003f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e100 	.word	0xe000e100

08003f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db0a      	blt.n	8003f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	490c      	ldr	r1, [pc, #48]	@ (8003f70 <__NVIC_SetPriority+0x4c>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f4c:	e00a      	b.n	8003f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4908      	ldr	r1, [pc, #32]	@ (8003f74 <__NVIC_SetPriority+0x50>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	440b      	add	r3, r1
 8003f62:	761a      	strb	r2, [r3, #24]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e100 	.word	0xe000e100
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	@ 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f1c3 0307 	rsb	r3, r3, #7
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	bf28      	it	cs
 8003f96:	2304      	movcs	r3, #4
 8003f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d902      	bls.n	8003fa8 <NVIC_EncodePriority+0x30>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3b03      	subs	r3, #3
 8003fa6:	e000      	b.n	8003faa <NVIC_EncodePriority+0x32>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	401a      	ands	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43d9      	mvns	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	4313      	orrs	r3, r2
         );
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	@ 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ff0:	d301      	bcc.n	8003ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00f      	b.n	8004016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8004020 <SysTick_Config+0x40>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffe:	210f      	movs	r1, #15
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f7ff ff8e 	bl	8003f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <SysTick_Config+0x40>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400e:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <SysTick_Config+0x40>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000e010 	.word	0xe000e010

08004024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff29 	bl	8003e84 <__NVIC_SetPriorityGrouping>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	4603      	mov	r3, r0
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800404c:	f7ff ff3e 	bl	8003ecc <__NVIC_GetPriorityGrouping>
 8004050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff ff8e 	bl	8003f78 <NVIC_EncodePriority>
 800405c:	4602      	mov	r2, r0
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff5d 	bl	8003f24 <__NVIC_SetPriority>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff31 	bl	8003ee8 <__NVIC_EnableIRQ>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffa2 	bl	8003fe0 <SysTick_Config>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff f996 	bl	80033e4 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e099      	b.n	80041f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e4:	e00f      	b.n	8004106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040e6:	f7ff f97d 	bl	80033e4 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d908      	bls.n	8004106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e078      	b.n	80041f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e8      	bne.n	80040e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4b38      	ldr	r3, [pc, #224]	@ (8004200 <HAL_DMA_Init+0x158>)
 8004120:	4013      	ands	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	2b04      	cmp	r3, #4
 800415e:	d107      	bne.n	8004170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	4313      	orrs	r3, r2
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	2b04      	cmp	r3, #4
 8004198:	d117      	bne.n	80041ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 faab 	bl	8004708 <DMA_CheckFifoParam>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041c6:	2301      	movs	r3, #1
 80041c8:	e016      	b.n	80041f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa62 	bl	800469c <DMA_CalcBaseAndBitshift>
 80041d8:	4603      	mov	r3, r0
 80041da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e0:	223f      	movs	r2, #63	@ 0x3f
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	f010803f 	.word	0xf010803f

08004204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_DMA_Start_IT+0x26>
 8004226:	2302      	movs	r3, #2
 8004228:	e040      	b.n	80042ac <HAL_DMA_Start_IT+0xa8>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d12f      	bne.n	800429e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f9f4 	bl	8004640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425c:	223f      	movs	r2, #63	@ 0x3f
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0216 	orr.w	r2, r2, #22
 8004272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0208 	orr.w	r2, r2, #8
 800428a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e005      	b.n	80042aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
 80042a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d004      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2280      	movs	r2, #128	@ 0x80
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e00c      	b.n	80042ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2205      	movs	r2, #5
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004304:	4b8e      	ldr	r3, [pc, #568]	@ (8004540 <HAL_DMA_IRQHandler+0x248>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a8e      	ldr	r2, [pc, #568]	@ (8004544 <HAL_DMA_IRQHandler+0x24c>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	0a9b      	lsrs	r3, r3, #10
 8004310:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004322:	2208      	movs	r2, #8
 8004324:	409a      	lsls	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01a      	beq.n	8004364 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0204 	bic.w	r2, r2, #4
 800434a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004350:	2208      	movs	r2, #8
 8004352:	409a      	lsls	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	2201      	movs	r2, #1
 800436a:	409a      	lsls	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d012      	beq.n	800439a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004386:	2201      	movs	r2, #1
 8004388:	409a      	lsls	r2, r3
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	f043 0202 	orr.w	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	2204      	movs	r2, #4
 80043a0:	409a      	lsls	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d012      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043bc:	2204      	movs	r2, #4
 80043be:	409a      	lsls	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	f043 0204 	orr.w	r2, r3, #4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	2210      	movs	r2, #16
 80043d6:	409a      	lsls	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d043      	beq.n	8004468 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d03c      	beq.n	8004468 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f2:	2210      	movs	r2, #16
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d018      	beq.n	800443a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d024      	beq.n	8004468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
 8004426:	e01f      	b.n	8004468 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
 8004438:	e016      	b.n	8004468 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0208 	bic.w	r2, r2, #8
 8004456:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446c:	2220      	movs	r2, #32
 800446e:	409a      	lsls	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 808f 	beq.w	8004598 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8087 	beq.w	8004598 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	2220      	movs	r2, #32
 8004490:	409a      	lsls	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d136      	bne.n	8004510 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0216 	bic.w	r2, r2, #22
 80044b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_DMA_IRQHandler+0x1da>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0208 	bic.w	r2, r2, #8
 80044e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e6:	223f      	movs	r2, #63	@ 0x3f
 80044e8:	409a      	lsls	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004502:	2b00      	cmp	r3, #0
 8004504:	d07e      	beq.n	8004604 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
        }
        return;
 800450e:	e079      	b.n	8004604 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01d      	beq.n	800455a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004530:	2b00      	cmp	r3, #0
 8004532:	d031      	beq.n	8004598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
 800453c:	e02c      	b.n	8004598 <HAL_DMA_IRQHandler+0x2a0>
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c
 8004544:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d023      	beq.n	8004598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	4798      	blx	r3
 8004558:	e01e      	b.n	8004598 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10f      	bne.n	8004588 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0210 	bic.w	r2, r2, #16
 8004576:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459c:	2b00      	cmp	r3, #0
 800459e:	d032      	beq.n	8004606 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d022      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2205      	movs	r2, #5
 80045b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0201 	bic.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d307      	bcc.n	80045e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f2      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x2cc>
 80045de:	e000      	b.n	80045e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
 8004602:	e000      	b.n	8004606 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004604:	bf00      	nop
    }
  }
}
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800461a:	b2db      	uxtb	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800465c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b40      	cmp	r3, #64	@ 0x40
 800466c:	d108      	bne.n	8004680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800467e:	e007      	b.n	8004690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	60da      	str	r2, [r3, #12]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	3b10      	subs	r3, #16
 80046ac:	4a14      	ldr	r2, [pc, #80]	@ (8004700 <DMA_CalcBaseAndBitshift+0x64>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046b6:	4a13      	ldr	r2, [pc, #76]	@ (8004704 <DMA_CalcBaseAndBitshift+0x68>)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d909      	bls.n	80046de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	659a      	str	r2, [r3, #88]	@ 0x58
 80046dc:	e007      	b.n	80046ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	aaaaaaab 	.word	0xaaaaaaab
 8004704:	080145a4 	.word	0x080145a4

08004708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11f      	bne.n	8004762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d856      	bhi.n	80047d6 <DMA_CheckFifoParam+0xce>
 8004728:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <DMA_CheckFifoParam+0x28>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004741 	.word	0x08004741
 8004734:	08004753 	.word	0x08004753
 8004738:	08004741 	.word	0x08004741
 800473c:	080047d7 	.word	0x080047d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d046      	beq.n	80047da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004750:	e043      	b.n	80047da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800475a:	d140      	bne.n	80047de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e03d      	b.n	80047de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800476a:	d121      	bne.n	80047b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b03      	cmp	r3, #3
 8004770:	d837      	bhi.n	80047e2 <DMA_CheckFifoParam+0xda>
 8004772:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <DMA_CheckFifoParam+0x70>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	08004789 	.word	0x08004789
 800477c:	0800478f 	.word	0x0800478f
 8004780:	08004789 	.word	0x08004789
 8004784:	080047a1 	.word	0x080047a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
      break;
 800478c:	e030      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d025      	beq.n	80047e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800479e:	e022      	b.n	80047e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047a8:	d11f      	bne.n	80047ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047ae:	e01c      	b.n	80047ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d903      	bls.n	80047be <DMA_CheckFifoParam+0xb6>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d003      	beq.n	80047c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047bc:	e018      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
      break;
 80047c2:	e015      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      break;
 80047d4:	e00b      	b.n	80047ee <DMA_CheckFifoParam+0xe6>
      break;
 80047d6:	bf00      	nop
 80047d8:	e00a      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      break;
 80047da:	bf00      	nop
 80047dc:	e008      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      break;
 80047de:	bf00      	nop
 80047e0:	e006      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e004      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
      break;
 80047ee:	bf00      	nop
    }
  } 
  
  return status; 
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	@ 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e159      	b.n	8004ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800481c:	2201      	movs	r2, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4013      	ands	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	f040 8148 	bne.w	8004aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d005      	beq.n	8004852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484e:	2b02      	cmp	r3, #2
 8004850:	d130      	bne.n	80048b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004888:	2201      	movs	r2, #1
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 0201 	and.w	r2, r3, #1
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d017      	beq.n	80048f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	2203      	movs	r2, #3
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d123      	bne.n	8004944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	08da      	lsrs	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3208      	adds	r2, #8
 8004904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	220f      	movs	r2, #15
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	08da      	lsrs	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3208      	adds	r2, #8
 800493e:	69b9      	ldr	r1, [r7, #24]
 8004940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0203 	and.w	r2, r3, #3
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80a2 	beq.w	8004aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	4b57      	ldr	r3, [pc, #348]	@ (8004ae8 <HAL_GPIO_Init+0x2e8>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	4a56      	ldr	r2, [pc, #344]	@ (8004ae8 <HAL_GPIO_Init+0x2e8>)
 8004990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004994:	6453      	str	r3, [r2, #68]	@ 0x44
 8004996:	4b54      	ldr	r3, [pc, #336]	@ (8004ae8 <HAL_GPIO_Init+0x2e8>)
 8004998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049a2:	4a52      	ldr	r2, [pc, #328]	@ (8004aec <HAL_GPIO_Init+0x2ec>)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a49      	ldr	r2, [pc, #292]	@ (8004af0 <HAL_GPIO_Init+0x2f0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d019      	beq.n	8004a02 <HAL_GPIO_Init+0x202>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a48      	ldr	r2, [pc, #288]	@ (8004af4 <HAL_GPIO_Init+0x2f4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_GPIO_Init+0x1fe>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a47      	ldr	r2, [pc, #284]	@ (8004af8 <HAL_GPIO_Init+0x2f8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00d      	beq.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <HAL_GPIO_Init+0x2fc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_GPIO_Init+0x1f6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a45      	ldr	r2, [pc, #276]	@ (8004b00 <HAL_GPIO_Init+0x300>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_GPIO_Init+0x1f2>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e008      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049f2:	2307      	movs	r3, #7
 80049f4:	e006      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049f6:	2303      	movs	r3, #3
 80049f8:	e004      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e002      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 8004a02:	2300      	movs	r3, #0
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	f002 0203 	and.w	r2, r2, #3
 8004a0a:	0092      	lsls	r2, r2, #2
 8004a0c:	4093      	lsls	r3, r2
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a14:	4935      	ldr	r1, [pc, #212]	@ (8004aec <HAL_GPIO_Init+0x2ec>)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	089b      	lsrs	r3, r3, #2
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a22:	4b38      	ldr	r3, [pc, #224]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a46:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a70:	4a24      	ldr	r2, [pc, #144]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a76:	4b23      	ldr	r3, [pc, #140]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4013      	ands	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aa0:	4b18      	ldr	r3, [pc, #96]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	f67f aea2 	bls.w	800481c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3724      	adds	r7, #36	@ 0x24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40013800 	.word	0x40013800
 8004af0:	40020000 	.word	0x40020000
 8004af4:	40020400 	.word	0x40020400
 8004af8:	40020800 	.word	0x40020800
 8004afc:	40020c00 	.word	0x40020c00
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40013c00 	.word	0x40013c00

08004b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
 8004b14:	4613      	mov	r3, r2
 8004b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b18:	787b      	ldrb	r3, [r7, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b24:	e003      	b.n	8004b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	041a      	lsls	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b4c:	887a      	ldrh	r2, [r7, #2]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4013      	ands	r3, r2
 8004b52:	041a      	lsls	r2, r3, #16
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	43d9      	mvns	r1, r3
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	400b      	ands	r3, r1
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	619a      	str	r2, [r3, #24]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e12b      	b.n	8004dda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fe f8a8 	bl	8002cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	@ 0x24
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f005 f8f6 	bl	8009dc4 <HAL_RCC_GetPCLK1Freq>
 8004bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4a81      	ldr	r2, [pc, #516]	@ (8004de4 <HAL_I2C_Init+0x274>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d807      	bhi.n	8004bf4 <HAL_I2C_Init+0x84>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a80      	ldr	r2, [pc, #512]	@ (8004de8 <HAL_I2C_Init+0x278>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bf94      	ite	ls
 8004bec:	2301      	movls	r3, #1
 8004bee:	2300      	movhi	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e006      	b.n	8004c02 <HAL_I2C_Init+0x92>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a7d      	ldr	r2, [pc, #500]	@ (8004dec <HAL_I2C_Init+0x27c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0e7      	b.n	8004dda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a78      	ldr	r2, [pc, #480]	@ (8004df0 <HAL_I2C_Init+0x280>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0c9b      	lsrs	r3, r3, #18
 8004c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a6a      	ldr	r2, [pc, #424]	@ (8004de4 <HAL_I2C_Init+0x274>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d802      	bhi.n	8004c44 <HAL_I2C_Init+0xd4>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3301      	adds	r3, #1
 8004c42:	e009      	b.n	8004c58 <HAL_I2C_Init+0xe8>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	4a69      	ldr	r2, [pc, #420]	@ (8004df4 <HAL_I2C_Init+0x284>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	3301      	adds	r3, #1
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	495c      	ldr	r1, [pc, #368]	@ (8004de4 <HAL_I2C_Init+0x274>)
 8004c74:	428b      	cmp	r3, r1
 8004c76:	d819      	bhi.n	8004cac <HAL_I2C_Init+0x13c>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1e59      	subs	r1, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_I2C_Init+0x138>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1e59      	subs	r1, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca6:	e051      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	e04f      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <HAL_I2C_Init+0x168>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e58      	subs	r0, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e012      	b.n	8004cfe <HAL_I2C_Init+0x18e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1e58      	subs	r0, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	0099      	lsls	r1, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_Init+0x196>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e022      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10e      	bne.n	8004d2c <HAL_I2C_Init+0x1bc>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1e58      	subs	r0, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	440b      	add	r3, r1
 8004d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d2a:	e00f      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1e58      	subs	r0, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	0099      	lsls	r1, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	6809      	ldr	r1, [r1, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6911      	ldr	r1, [r2, #16]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	000186a0 	.word	0x000186a0
 8004de8:	001e847f 	.word	0x001e847f
 8004dec:	003d08ff 	.word	0x003d08ff
 8004df0:	431bde83 	.word	0x431bde83
 8004df4:	10624dd3 	.word	0x10624dd3

08004df8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0a:	2b80      	cmp	r3, #128	@ 0x80
 8004e0c:	d103      	bne.n	8004e16 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]
  }
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	460b      	mov	r3, r1
 8004e32:	817b      	strh	r3, [r7, #10]
 8004e34:	4613      	mov	r3, r2
 8004e36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e38:	f7fe fad4 	bl	80033e4 <HAL_GetTick>
 8004e3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	f040 80e0 	bne.w	800500c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2319      	movs	r3, #25
 8004e52:	2201      	movs	r2, #1
 8004e54:	4970      	ldr	r1, [pc, #448]	@ (8005018 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f002 feae 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0d3      	b.n	800500e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_I2C_Master_Transmit+0x50>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e0cc      	b.n	800500e <HAL_I2C_Master_Transmit+0x1ea>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d007      	beq.n	8004e9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2221      	movs	r2, #33	@ 0x21
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2210      	movs	r2, #16
 8004eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	893a      	ldrh	r2, [r7, #8]
 8004eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a50      	ldr	r2, [pc, #320]	@ (800501c <HAL_I2C_Master_Transmit+0x1f8>)
 8004eda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004edc:	8979      	ldrh	r1, [r7, #10]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6a3a      	ldr	r2, [r7, #32]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f002 faa4 	bl	8007430 <I2C_MasterRequestWrite>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e08d      	b.n	800500e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f08:	e066      	b.n	8004fd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	6a39      	ldr	r1, [r7, #32]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f002 ff6c 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d107      	bne.n	8004f32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e06b      	b.n	800500e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d11b      	bne.n	8004fac <HAL_I2C_Master_Transmit+0x188>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d017      	beq.n	8004fac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	781a      	ldrb	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	6a39      	ldr	r1, [r7, #32]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f002 ff63 	bl	8007e7c <I2C_WaitOnBTFFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00d      	beq.n	8004fd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d107      	bne.n	8004fd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e01a      	b.n	800500e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d194      	bne.n	8004f0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	e000      	b.n	800500e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800500c:	2302      	movs	r3, #2
  }
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	00100002 	.word	0x00100002
 800501c:	ffff0000 	.word	0xffff0000

08005020 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	817b      	strh	r3, [r7, #10]
 8005032:	460b      	mov	r3, r1
 8005034:	813b      	strh	r3, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800503a:	f7fe f9d3 	bl	80033e4 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b20      	cmp	r3, #32
 800504a:	f040 80d9 	bne.w	8005200 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2319      	movs	r3, #25
 8005054:	2201      	movs	r2, #1
 8005056:	496d      	ldr	r1, [pc, #436]	@ (800520c <HAL_I2C_Mem_Write+0x1ec>)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f002 fdad 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
 8005066:	e0cc      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_I2C_Mem_Write+0x56>
 8005072:	2302      	movs	r3, #2
 8005074:	e0c5      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b01      	cmp	r3, #1
 800508a:	d007      	beq.n	800509c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	@ 0x21
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2240      	movs	r2, #64	@ 0x40
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a4d      	ldr	r2, [pc, #308]	@ (8005210 <HAL_I2C_Mem_Write+0x1f0>)
 80050dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050de:	88f8      	ldrh	r0, [r7, #6]
 80050e0:	893a      	ldrh	r2, [r7, #8]
 80050e2:	8979      	ldrh	r1, [r7, #10]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4603      	mov	r3, r0
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f002 fa20 	bl	8007534 <I2C_RequestMemoryWrite>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d052      	beq.n	80051a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e081      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f002 fe72 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	2b04      	cmp	r3, #4
 8005114:	d107      	bne.n	8005126 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e06b      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b04      	cmp	r3, #4
 8005166:	d11b      	bne.n	80051a0 <HAL_I2C_Mem_Write+0x180>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800516c:	2b00      	cmp	r3, #0
 800516e:	d017      	beq.n	80051a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	781a      	ldrb	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1aa      	bne.n	80050fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f002 fe65 	bl	8007e7c <I2C_WaitOnBTFFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d107      	bne.n	80051d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e016      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	00100002 	.word	0x00100002
 8005210:	ffff0000 	.word	0xffff0000

08005214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	@ 0x30
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	461a      	mov	r2, r3
 8005222:	4603      	mov	r3, r0
 8005224:	817b      	strh	r3, [r7, #10]
 8005226:	460b      	mov	r3, r1
 8005228:	813b      	strh	r3, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800522e:	f7fe f8d9 	bl	80033e4 <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b20      	cmp	r3, #32
 800523e:	f040 8214 	bne.w	800566a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2319      	movs	r3, #25
 8005248:	2201      	movs	r2, #1
 800524a:	497b      	ldr	r1, [pc, #492]	@ (8005438 <HAL_I2C_Mem_Read+0x224>)
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f002 fcb3 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
 800525a:	e207      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_I2C_Mem_Read+0x56>
 8005266:	2302      	movs	r3, #2
 8005268:	e200      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d007      	beq.n	8005290 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800529e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2222      	movs	r2, #34	@ 0x22
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2240      	movs	r2, #64	@ 0x40
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80052c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a5b      	ldr	r2, [pc, #364]	@ (800543c <HAL_I2C_Mem_Read+0x228>)
 80052d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052d2:	88f8      	ldrh	r0, [r7, #6]
 80052d4:	893a      	ldrh	r2, [r7, #8]
 80052d6:	8979      	ldrh	r1, [r7, #10]
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	4603      	mov	r3, r0
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f002 f9bc 	bl	8007660 <I2C_RequestMemoryRead>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e1bc      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d113      	bne.n	8005322 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e190      	b.n	8005644 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005326:	2b01      	cmp	r3, #1
 8005328:	d11b      	bne.n	8005362 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e170      	b.n	8005644 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005366:	2b02      	cmp	r3, #2
 8005368:	d11b      	bne.n	80053a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005378:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	e150      	b.n	8005644 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053b8:	e144      	b.n	8005644 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053be:	2b03      	cmp	r3, #3
 80053c0:	f200 80f1 	bhi.w	80055a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d123      	bne.n	8005414 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f002 fdcd 	bl	8007f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e145      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005412:	e117      	b.n	8005644 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005418:	2b02      	cmp	r3, #2
 800541a:	d14e      	bne.n	80054ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005422:	2200      	movs	r2, #0
 8005424:	4906      	ldr	r1, [pc, #24]	@ (8005440 <HAL_I2C_Mem_Read+0x22c>)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f002 fbc6 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e11a      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
 8005436:	bf00      	nop
 8005438:	00100002 	.word	0x00100002
 800543c:	ffff0000 	.word	0xffff0000
 8005440:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054b8:	e0c4      	b.n	8005644 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	2200      	movs	r2, #0
 80054c2:	496c      	ldr	r1, [pc, #432]	@ (8005674 <HAL_I2C_Mem_Read+0x460>)
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f002 fb77 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0cb      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551c:	2200      	movs	r2, #0
 800551e:	4955      	ldr	r1, [pc, #340]	@ (8005674 <HAL_I2C_Mem_Read+0x460>)
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f002 fb49 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e09d      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800553e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055a4:	e04e      	b.n	8005644 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f002 fce0 	bl	8007f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e058      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d124      	bne.n	8005644 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d107      	bne.n	8005612 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005610:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	f47f aeb6 	bne.w	80053ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800566a:	2302      	movs	r3, #2
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	3728      	adds	r7, #40	@ 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	00010004 	.word	0x00010004

08005678 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	@ 0x28
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005696:	f7fd fea5 	bl	80033e4 <HAL_GetTick>
 800569a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	f040 8136 	bne.w	8005916 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056aa:	4b9d      	ldr	r3, [pc, #628]	@ (8005920 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	4a9c      	ldr	r2, [pc, #624]	@ (8005924 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	0a1a      	lsrs	r2, r3, #8
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009a      	lsls	r2, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d112      	bne.n	80056f6 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	f043 0220 	orr.w	r2, r3, #32
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e110      	b.n	8005918 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b02      	cmp	r3, #2
 8005702:	d0df      	beq.n	80056c4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_I2C_Mem_Write_DMA+0x9a>
 800570e:	2302      	movs	r3, #2
 8005710:	e102      	b.n	8005918 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d007      	beq.n	8005738 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2221      	movs	r2, #33	@ 0x21
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2240      	movs	r2, #64	@ 0x40
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005762:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a6c      	ldr	r2, [pc, #432]	@ (8005928 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8005778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800577a:	897a      	ldrh	r2, [r7, #10]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005780:	893a      	ldrh	r2, [r7, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80a9 	beq.w	80058ee <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02a      	beq.n	80057fa <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a8:	4a60      	ldr	r2, [pc, #384]	@ (800592c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80057aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b0:	4a5f      	ldr	r2, [pc, #380]	@ (8005930 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80057b2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b8:	2200      	movs	r2, #0
 80057ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c0:	2200      	movs	r2, #0
 80057c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c8:	2200      	movs	r2, #0
 80057ca:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d0:	2200      	movs	r2, #0
 80057d2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	4619      	mov	r1, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3310      	adds	r3, #16
 80057e4:	461a      	mov	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ea:	f7fe fd0b 	bl	8004204 <HAL_DMA_Start_IT>
 80057ee:	4603      	mov	r3, r0
 80057f0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80057f2:	7efb      	ldrb	r3, [r7, #27]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d166      	bne.n	80058c6 <HAL_I2C_Mem_Write_DMA+0x24e>
 80057f8:	e013      	b.n	8005822 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e07a      	b.n	8005918 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005822:	88f8      	ldrh	r0, [r7, #6]
 8005824:	893a      	ldrh	r2, [r7, #8]
 8005826:	8979      	ldrh	r1, [r7, #10]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	2323      	movs	r3, #35	@ 0x23
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	4603      	mov	r3, r0
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f001 fe7e 	bl	8007534 <I2C_RequestMemoryWrite>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d022      	beq.n	8005884 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fd36 	bl	80042b4 <HAL_DMA_Abort_IT>
 8005848:	4603      	mov	r3, r0
 800584a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	2200      	movs	r2, #0
 8005852:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005862:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e049      	b.n	8005918 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058b0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c0:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e028      	b.n	8005918 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	f043 0210 	orr.w	r2, r3, #16
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e014      	b.n	8005918 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
  }
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	2000000c 	.word	0x2000000c
 8005924:	14f8b589 	.word	0x14f8b589
 8005928:	ffff0000 	.word	0xffff0000
 800592c:	08007831 	.word	0x08007831
 8005930:	080079ef 	.word	0x080079ef

08005934 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08c      	sub	sp, #48	@ 0x30
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	4608      	mov	r0, r1
 800593e:	4611      	mov	r1, r2
 8005940:	461a      	mov	r2, r3
 8005942:	4603      	mov	r3, r0
 8005944:	817b      	strh	r3, [r7, #10]
 8005946:	460b      	mov	r3, r1
 8005948:	813b      	strh	r3, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800594e:	f7fd fd49 	bl	80033e4 <HAL_GetTick>
 8005952:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b20      	cmp	r3, #32
 8005962:	f040 8172 	bne.w	8005c4a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005966:	4b93      	ldr	r3, [pc, #588]	@ (8005bb4 <HAL_I2C_Mem_Read_DMA+0x280>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	08db      	lsrs	r3, r3, #3
 800596c:	4a92      	ldr	r2, [pc, #584]	@ (8005bb8 <HAL_I2C_Mem_Read_DMA+0x284>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0a1a      	lsrs	r2, r3, #8
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009a      	lsls	r2, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3b01      	subs	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d112      	bne.n	80059b2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
 80059b0:	e14c      	b.n	8005c4c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d0df      	beq.n	8005980 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_I2C_Mem_Read_DMA+0x9a>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e13e      	b.n	8005c4c <HAL_I2C_Mem_Read_DMA+0x318>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d007      	beq.n	80059f4 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2222      	movs	r2, #34	@ 0x22
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2240      	movs	r2, #64	@ 0x40
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a62      	ldr	r2, [pc, #392]	@ (8005bbc <HAL_I2C_Mem_Read_DMA+0x288>)
 8005a34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005a36:	897a      	ldrh	r2, [r7, #10]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005a3c:	893a      	ldrh	r2, [r7, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80cc 	beq.w	8005bf0 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d02d      	beq.n	8005abc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	4a56      	ldr	r2, [pc, #344]	@ (8005bc0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005a66:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6c:	4a55      	ldr	r2, [pc, #340]	@ (8005bc4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005a6e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	2200      	movs	r2, #0
 8005a76:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	2200      	movs	r2, #0
 8005a86:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3310      	adds	r3, #16
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa6:	f7fe fbad 	bl	8004204 <HAL_DMA_Start_IT>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 8087 	bne.w	8005bc8 <HAL_I2C_Mem_Read_DMA+0x294>
 8005aba:	e013      	b.n	8005ae4 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0b3      	b.n	8005c4c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005ae4:	88f8      	ldrh	r0, [r7, #6]
 8005ae6:	893a      	ldrh	r2, [r7, #8]
 8005ae8:	8979      	ldrh	r1, [r7, #10]
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	2323      	movs	r3, #35	@ 0x23
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	4603      	mov	r3, r0
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f001 fdb3 	bl	8007660 <I2C_RequestMemoryRead>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d023      	beq.n	8005b48 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fbd5 	bl	80042b4 <HAL_DMA_Abort_IT>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	2200      	movs	r2, #0
 8005b16:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b26:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e081      	b.n	8005c4c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d108      	bne.n	8005b62 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e007      	b.n	8005b72 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b9e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	e049      	b.n	8005c46 <HAL_I2C_Mem_Read_DMA+0x312>
 8005bb2:	bf00      	nop
 8005bb4:	2000000c 	.word	0x2000000c
 8005bb8:	14f8b589 	.word	0x14f8b589
 8005bbc:	ffff0000 	.word	0xffff0000
 8005bc0:	08007831 	.word	0x08007831
 8005bc4:	080079ef 	.word	0x080079ef
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	f043 0210 	orr.w	r2, r3, #16
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e02d      	b.n	8005c4c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005bf0:	88f8      	ldrh	r0, [r7, #6]
 8005bf2:	893a      	ldrh	r2, [r7, #8]
 8005bf4:	8979      	ldrh	r1, [r7, #10]
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	2323      	movs	r3, #35	@ 0x23
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	4603      	mov	r3, r0
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f001 fd2d 	bl	8007660 <I2C_RequestMemoryRead>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e01d      	b.n	8005c4c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c34:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8005c4a:	2302      	movs	r3, #2
  }
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3728      	adds	r7, #40	@ 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d003      	beq.n	8005c8c <HAL_I2C_EV_IRQHandler+0x38>
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	f040 80c1 	bne.w	8005e0e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <HAL_I2C_EV_IRQHandler+0x6e>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005cac:	d003      	beq.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x62>
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005cb4:	d101      	bne.n	8005cba <HAL_I2C_EV_IRQHandler+0x66>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <HAL_I2C_EV_IRQHandler+0x68>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	f000 8132 	beq.w	8005f26 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00c      	beq.n	8005ce6 <HAL_I2C_EV_IRQHandler+0x92>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	0a5b      	lsrs	r3, r3, #9
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d006      	beq.n	8005ce6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f002 f9d5 	bl	8008088 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fd87 	bl	80067f2 <I2C_Master_SB>
 8005ce4:	e092      	b.n	8005e0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0xb2>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	0a5b      	lsrs	r3, r3, #9
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fdfd 	bl	80068fe <I2C_Master_ADD10>
 8005d04:	e082      	b.n	8005e0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_I2C_EV_IRQHandler+0xd2>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	0a5b      	lsrs	r3, r3, #9
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fe17 	bl	8006952 <I2C_Master_ADDR>
 8005d24:	e072      	b.n	8005e0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d03b      	beq.n	8005daa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d40:	f000 80f3 	beq.w	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	09db      	lsrs	r3, r3, #7
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	0a9b      	lsrs	r3, r3, #10
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f9df 	bl	800612c <I2C_MasterTransmit_TXE>
 8005d6e:	e04d      	b.n	8005e0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80d6 	beq.w	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	0a5b      	lsrs	r3, r3, #9
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80cf 	beq.w	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	2b21      	cmp	r3, #33	@ 0x21
 8005d90:	d103      	bne.n	8005d9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa66 	bl	8006264 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d98:	e0c7      	b.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b40      	cmp	r3, #64	@ 0x40
 8005d9e:	f040 80c4 	bne.w	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fad4 	bl	8006350 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005da8:	e0bf      	b.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005db8:	f000 80b7 	beq.w	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	099b      	lsrs	r3, r3, #6
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00f      	beq.n	8005de8 <HAL_I2C_EV_IRQHandler+0x194>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	0a9b      	lsrs	r3, r3, #10
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <HAL_I2C_EV_IRQHandler+0x194>
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb4d 	bl	8006480 <I2C_MasterReceive_RXNE>
 8005de6:	e011      	b.n	8005e0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	089b      	lsrs	r3, r3, #2
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 809a 	beq.w	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8093 	beq.w	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fc03 	bl	8006610 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0a:	e08e      	b.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005e0c:	e08d      	b.n	8005f2a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	e007      	b.n	8005e30 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d012      	beq.n	8005e62 <HAL_I2C_EV_IRQHandler+0x20e>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	0a5b      	lsrs	r3, r3, #9
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00c      	beq.n	8005e62 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 ffc8 	bl	8006df0 <I2C_Slave_ADDR>
 8005e60:	e066      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <HAL_I2C_EV_IRQHandler+0x22e>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	0a5b      	lsrs	r3, r3, #9
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 f802 	bl	8006e84 <I2C_Slave_STOPF>
 8005e80:	e056      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	2b21      	cmp	r3, #33	@ 0x21
 8005e86:	d002      	beq.n	8005e8e <HAL_I2C_EV_IRQHandler+0x23a>
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b29      	cmp	r3, #41	@ 0x29
 8005e8c:	d125      	bne.n	8005eda <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	09db      	lsrs	r3, r3, #7
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00f      	beq.n	8005eba <HAL_I2C_EV_IRQHandler+0x266>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	0a9b      	lsrs	r3, r3, #10
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <HAL_I2C_EV_IRQHandler+0x266>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	089b      	lsrs	r3, r3, #2
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fede 	bl	8006c74 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eb8:	e039      	b.n	8005f2e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	089b      	lsrs	r3, r3, #2
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d033      	beq.n	8005f2e <HAL_I2C_EV_IRQHandler+0x2da>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	0a5b      	lsrs	r3, r3, #9
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02d      	beq.n	8005f2e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ff0b 	bl	8006cee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ed8:	e029      	b.n	8005f2e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00f      	beq.n	8005f06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	0a9b      	lsrs	r3, r3, #10
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	089b      	lsrs	r3, r3, #2
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 ff16 	bl	8006d30 <I2C_SlaveReceive_RXNE>
 8005f04:	e014      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	089b      	lsrs	r3, r3, #2
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	0a5b      	lsrs	r3, r3, #9
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 ff44 	bl	8006dac <I2C_SlaveReceive_BTF>
 8005f24:	e004      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005f26:	bf00      	nop
 8005f28:	e002      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b08a      	sub	sp, #40	@ 0x28
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f58:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <HAL_I2C_ER_IRQHandler+0x4e>
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f82:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	0a5b      	lsrs	r3, r3, #9
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <HAL_I2C_ER_IRQHandler+0x78>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	f043 0302 	orr.w	r3, r3, #2
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005fac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	0a9b      	lsrs	r3, r3, #10
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d03f      	beq.n	800603a <HAL_I2C_ER_IRQHandler+0x104>
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d039      	beq.n	800603a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005fc6:	7efb      	ldrb	r3, [r7, #27]
 8005fc8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fde:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005fe0:	7ebb      	ldrb	r3, [r7, #26]
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d112      	bne.n	800600c <HAL_I2C_ER_IRQHandler+0xd6>
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10f      	bne.n	800600c <HAL_I2C_ER_IRQHandler+0xd6>
 8005fec:	7cfb      	ldrb	r3, [r7, #19]
 8005fee:	2b21      	cmp	r3, #33	@ 0x21
 8005ff0:	d008      	beq.n	8006004 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005ff2:	7cfb      	ldrb	r3, [r7, #19]
 8005ff4:	2b29      	cmp	r3, #41	@ 0x29
 8005ff6:	d005      	beq.n	8006004 <HAL_I2C_ER_IRQHandler+0xce>
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	2b28      	cmp	r3, #40	@ 0x28
 8005ffc:	d106      	bne.n	800600c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b21      	cmp	r3, #33	@ 0x21
 8006002:	d103      	bne.n	800600c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f86d 	bl	80070e4 <I2C_Slave_AF>
 800600a:	e016      	b.n	800603a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006014:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	f043 0304 	orr.w	r3, r3, #4
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800601e:	7efb      	ldrb	r3, [r7, #27]
 8006020:	2b10      	cmp	r3, #16
 8006022:	d002      	beq.n	800602a <HAL_I2C_ER_IRQHandler+0xf4>
 8006024:	7efb      	ldrb	r3, [r7, #27]
 8006026:	2b40      	cmp	r3, #64	@ 0x40
 8006028:	d107      	bne.n	800603a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006038:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	0adb      	lsrs	r3, r3, #11
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <HAL_I2C_ER_IRQHandler+0x12e>
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d008      	beq.n	8006064 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	f043 0308 	orr.w	r3, r3, #8
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006062:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 f8a8 	bl	80071cc <I2C_ITError>
  }
}
 800607c:	bf00      	nop
 800607e:	3728      	adds	r7, #40	@ 0x28
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
 80060e0:	4613      	mov	r3, r2
 80060e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006142:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d150      	bne.n	80061f4 <I2C_MasterTransmit_TXE+0xc8>
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b21      	cmp	r3, #33	@ 0x21
 8006156:	d14d      	bne.n	80061f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b08      	cmp	r3, #8
 800615c:	d01d      	beq.n	800619a <I2C_MasterTransmit_TXE+0x6e>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b20      	cmp	r3, #32
 8006162:	d01a      	beq.n	800619a <I2C_MasterTransmit_TXE+0x6e>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800616a:	d016      	beq.n	800619a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800617a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2211      	movs	r2, #17
 8006180:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ff76 	bl	8006084 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006198:	e060      	b.n	800625c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b40      	cmp	r3, #64	@ 0x40
 80061d2:	d107      	bne.n	80061e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7fb fa1f 	bl	8001620 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061e2:	e03b      	b.n	800625c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ff49 	bl	8006084 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061f2:	e033      	b.n	800625c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b21      	cmp	r3, #33	@ 0x21
 80061f8:	d005      	beq.n	8006206 <I2C_MasterTransmit_TXE+0xda>
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b40      	cmp	r3, #64	@ 0x40
 80061fe:	d12d      	bne.n	800625c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b22      	cmp	r3, #34	@ 0x22
 8006204:	d12a      	bne.n	800625c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d108      	bne.n	8006222 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800621e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006220:	e01c      	b.n	800625c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b40      	cmp	r3, #64	@ 0x40
 800622c:	d103      	bne.n	8006236 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f88e 	bl	8006350 <I2C_MemoryTransmit_TXE_BTF>
}
 8006234:	e012      	b.n	800625c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800625a:	e7ff      	b.n	800625c <I2C_MasterTransmit_TXE+0x130>
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006270:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b21      	cmp	r3, #33	@ 0x21
 800627c:	d164      	bne.n	8006348 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d012      	beq.n	80062ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80062ac:	e04c      	b.n	8006348 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d01d      	beq.n	80062f0 <I2C_MasterTransmit_BTF+0x8c>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d01a      	beq.n	80062f0 <I2C_MasterTransmit_BTF+0x8c>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062c0:	d016      	beq.n	80062f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2211      	movs	r2, #17
 80062d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff fecb 	bl	8006084 <HAL_I2C_MasterTxCpltCallback>
}
 80062ee:	e02b      	b.n	8006348 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800630e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b40      	cmp	r3, #64	@ 0x40
 8006328:	d107      	bne.n	800633a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fb f974 	bl	8001620 <HAL_I2C_MemTxCpltCallback>
}
 8006338:	e006      	b.n	8006348 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fe9e 	bl	8006084 <HAL_I2C_MasterTxCpltCallback>
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800635e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006364:	2b00      	cmp	r3, #0
 8006366:	d11d      	bne.n	80063a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d10b      	bne.n	8006388 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006374:	b2da      	uxtb	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006380:	1c9a      	adds	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006386:	e077      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	b29b      	uxth	r3, r3
 800638e:	121b      	asrs	r3, r3, #8
 8006390:	b2da      	uxtb	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80063a2:	e069      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10b      	bne.n	80063c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80063c2:	e059      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d152      	bne.n	8006472 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b22      	cmp	r3, #34	@ 0x22
 80063d0:	d10d      	bne.n	80063ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80063ec:	e044      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d015      	beq.n	8006424 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b21      	cmp	r3, #33	@ 0x21
 80063fc:	d112      	bne.n	8006424 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006422:	e029      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d124      	bne.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	2b21      	cmp	r3, #33	@ 0x21
 8006432:	d121      	bne.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006442:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006452:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb f8d8 	bl	8001620 <HAL_I2C_MemTxCpltCallback>
}
 8006470:	e002      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fe fcc0 	bl	8004df8 <I2C_Flush_DR>
}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b22      	cmp	r3, #34	@ 0x22
 8006492:	f040 80b9 	bne.w	8006608 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d921      	bls.n	80064ee <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	f040 8096 	bne.w	8006608 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ea:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80064ec:	e08c      	b.n	8006608 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d07f      	beq.n	80065f6 <I2C_MasterReceive_RXNE+0x176>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d002      	beq.n	8006502 <I2C_MasterReceive_RXNE+0x82>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d179      	bne.n	80065f6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fd02 	bl	8007f0c <I2C_WaitOnSTOPRequestThroughIT>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d14c      	bne.n	80065a8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800651c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800652c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b40      	cmp	r3, #64	@ 0x40
 8006566:	d10a      	bne.n	800657e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fb f860 	bl	800163c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800657c:	e044      	b.n	8006608 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d002      	beq.n	8006592 <I2C_MasterReceive_RXNE+0x112>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b20      	cmp	r3, #32
 8006590:	d103      	bne.n	800659a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30
 8006598:	e002      	b.n	80065a0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2212      	movs	r2, #18
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fd79 	bl	8006098 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065a6:	e02f      	b.n	8006608 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fd88 	bl	8006104 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065f4:	e008      	b.n	8006608 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006604:	605a      	str	r2, [r3, #4]
}
 8006606:	e7ff      	b.n	8006608 <I2C_MasterReceive_RXNE+0x188>
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b04      	cmp	r3, #4
 8006626:	d11b      	bne.n	8006660 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006636:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800665e:	e0c4      	b.n	80067ea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b03      	cmp	r3, #3
 8006668:	d129      	bne.n	80066be <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006678:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d00a      	beq.n	8006696 <I2C_MasterReceive_BTF+0x86>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d007      	beq.n	8006696 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006694:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80066bc:	e095      	b.n	80067ea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d17d      	bne.n	80067c4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d002      	beq.n	80066d4 <I2C_MasterReceive_BTF+0xc4>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b10      	cmp	r3, #16
 80066d2:	d108      	bne.n	80066e6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e016      	b.n	8006714 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d002      	beq.n	80066f2 <I2C_MasterReceive_BTF+0xe2>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d108      	bne.n	8006704 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e007      	b.n	8006714 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006712:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691a      	ldr	r2, [r3, #16]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800676e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b40      	cmp	r3, #64	@ 0x40
 8006782:	d10a      	bne.n	800679a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fa ff52 	bl	800163c <HAL_I2C_MemRxCpltCallback>
}
 8006798:	e027      	b.n	80067ea <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d002      	beq.n	80067ae <I2C_MasterReceive_BTF+0x19e>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d103      	bne.n	80067b6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80067b4:	e002      	b.n	80067bc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2212      	movs	r2, #18
 80067ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fc6b 	bl	8006098 <HAL_I2C_MasterRxCpltCallback>
}
 80067c2:	e012      	b.n	80067ea <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b40      	cmp	r3, #64	@ 0x40
 8006804:	d117      	bne.n	8006836 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800681e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006820:	e067      	b.n	80068f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	b2da      	uxtb	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	611a      	str	r2, [r3, #16]
}
 8006834:	e05d      	b.n	80068f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800683e:	d133      	bne.n	80068a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b21      	cmp	r3, #33	@ 0x21
 800684a:	d109      	bne.n	8006860 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006850:	b2db      	uxtb	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800685c:	611a      	str	r2, [r3, #16]
 800685e:	e008      	b.n	8006872 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <I2C_Master_SB+0x92>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d108      	bne.n	8006896 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	2b00      	cmp	r3, #0
 800688a:	d032      	beq.n	80068f2 <I2C_Master_SB+0x100>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02d      	beq.n	80068f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068a4:	605a      	str	r2, [r3, #4]
}
 80068a6:	e024      	b.n	80068f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10e      	bne.n	80068ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	11db      	asrs	r3, r3, #7
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0306 	and.w	r3, r3, #6
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f063 030f 	orn	r3, r3, #15
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	611a      	str	r2, [r3, #16]
}
 80068cc:	e011      	b.n	80068f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d10d      	bne.n	80068f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068da:	b29b      	uxth	r3, r3
 80068dc:	11db      	asrs	r3, r3, #7
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f003 0306 	and.w	r3, r3, #6
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f063 030e 	orn	r3, r3, #14
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	611a      	str	r2, [r3, #16]
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690a:	b2da      	uxtb	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <I2C_Master_ADD10+0x26>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800691e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d108      	bne.n	8006936 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00c      	beq.n	8006946 <I2C_Master_ADD10+0x48>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d007      	beq.n	8006946 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006944:	605a      	str	r2, [r3, #4]
  }
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006952:	b480      	push	{r7}
 8006954:	b091      	sub	sp, #68	@ 0x44
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006960:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b22      	cmp	r3, #34	@ 0x22
 800697a:	f040 8169 	bne.w	8006c50 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10f      	bne.n	80069a6 <I2C_Master_ADDR+0x54>
 8006986:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800698a:	2b40      	cmp	r3, #64	@ 0x40
 800698c:	d10b      	bne.n	80069a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800698e:	2300      	movs	r3, #0
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	633b      	str	r3, [r7, #48]	@ 0x30
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	e160      	b.n	8006c68 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d11d      	bne.n	80069ea <I2C_Master_ADDR+0x98>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80069b6:	d118      	bne.n	80069ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b8:	2300      	movs	r3, #0
 80069ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80069e8:	e13e      	b.n	8006c68 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d113      	bne.n	8006a1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f4:	2300      	movs	r3, #0
 80069f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e115      	b.n	8006c48 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	f040 808a 	bne.w	8006b3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a2e:	d137      	bne.n	8006aa0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a4e:	d113      	bne.n	8006a78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a60:	2300      	movs	r3, #0
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	e0e7      	b.n	8006c48 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a78:	2300      	movs	r3, #0
 8006a7a:	623b      	str	r3, [r7, #32]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	623b      	str	r3, [r7, #32]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	623b      	str	r3, [r7, #32]
 8006a8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e0d3      	b.n	8006c48 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d02e      	beq.n	8006b04 <I2C_Master_ADDR+0x1b2>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d02b      	beq.n	8006b04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	2b12      	cmp	r3, #18
 8006ab0:	d102      	bne.n	8006ab8 <I2C_Master_ADDR+0x166>
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d125      	bne.n	8006b04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d00e      	beq.n	8006adc <I2C_Master_ADDR+0x18a>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d00b      	beq.n	8006adc <I2C_Master_ADDR+0x18a>
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	2b10      	cmp	r3, #16
 8006ac8:	d008      	beq.n	8006adc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e007      	b.n	8006aec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006aea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	e0a1      	b.n	8006c48 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b14:	2300      	movs	r3, #0
 8006b16:	61bb      	str	r3, [r7, #24]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e085      	b.n	8006c48 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d14d      	bne.n	8006be2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d016      	beq.n	8006b7a <I2C_Master_ADDR+0x228>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d013      	beq.n	8006b7a <I2C_Master_ADDR+0x228>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d010      	beq.n	8006b7a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b66:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e007      	b.n	8006b8a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b88:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b98:	d117      	bne.n	8006bca <I2C_Master_ADDR+0x278>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ba0:	d00b      	beq.n	8006bba <I2C_Master_ADDR+0x268>
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d008      	beq.n	8006bba <I2C_Master_ADDR+0x268>
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d005      	beq.n	8006bba <I2C_Master_ADDR+0x268>
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d002      	beq.n	8006bba <I2C_Master_ADDR+0x268>
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	2b20      	cmp	r3, #32
 8006bb8:	d107      	bne.n	8006bca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	e032      	b.n	8006c48 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bf0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c00:	d117      	bne.n	8006c32 <I2C_Master_ADDR+0x2e0>
 8006c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c08:	d00b      	beq.n	8006c22 <I2C_Master_ADDR+0x2d0>
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d008      	beq.n	8006c22 <I2C_Master_ADDR+0x2d0>
 8006c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d005      	beq.n	8006c22 <I2C_Master_ADDR+0x2d0>
 8006c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d002      	beq.n	8006c22 <I2C_Master_ADDR+0x2d0>
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d107      	bne.n	8006c32 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006c4e:	e00b      	b.n	8006c68 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
}
 8006c66:	e7ff      	b.n	8006c68 <I2C_Master_ADDR+0x316>
 8006c68:	bf00      	nop
 8006c6a:	3744      	adds	r7, #68	@ 0x44
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d02b      	beq.n	8006ce6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d114      	bne.n	8006ce6 <I2C_SlaveTransmit_TXE+0x72>
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b29      	cmp	r3, #41	@ 0x29
 8006cc0:	d111      	bne.n	8006ce6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2221      	movs	r2, #33	@ 0x21
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2228      	movs	r2, #40	@ 0x28
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff f9e3 	bl	80060ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d011      	beq.n	8006d24 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d02c      	beq.n	8006da4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d114      	bne.n	8006da4 <I2C_SlaveReceive_RXNE+0x74>
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d7e:	d111      	bne.n	8006da4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2222      	movs	r2, #34	@ 0x22
 8006d94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2228      	movs	r2, #40	@ 0x28
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff f98e 	bl	80060c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d012      	beq.n	8006de4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e0a:	2b28      	cmp	r3, #40	@ 0x28
 8006e0c:	d127      	bne.n	8006e5e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	09db      	lsrs	r3, r3, #7
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	81bb      	strh	r3, [r7, #12]
 8006e40:	e002      	b.n	8006e48 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006e50:	89ba      	ldrh	r2, [r7, #12]
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff f93c 	bl	80060d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e5c:	e00e      	b.n	8006e7c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60bb      	str	r3, [r7, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	60bb      	str	r3, [r7, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ee0:	d172      	bne.n	8006fc8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b22      	cmp	r3, #34	@ 0x22
 8006ee6:	d002      	beq.n	8006eee <I2C_Slave_STOPF+0x6a>
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eec:	d135      	bne.n	8006f5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0a:	f043 0204 	orr.w	r2, r3, #4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fd fb70 	bl	800460c <HAL_DMA_GetState>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d049      	beq.n	8006fc6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f36:	4a69      	ldr	r2, [pc, #420]	@ (80070dc <I2C_Slave_STOPF+0x258>)
 8006f38:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fd f9b8 	bl	80042b4 <HAL_DMA_Abort_IT>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d03d      	beq.n	8006fc6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f58:	e035      	b.n	8006fc6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	f043 0204 	orr.w	r2, r3, #4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fd fb3a 	bl	800460c <HAL_DMA_GetState>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d014      	beq.n	8006fc8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80070dc <I2C_Slave_STOPF+0x258>)
 8006fa4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fd f982 	bl	80042b4 <HAL_DMA_Abort_IT>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d008      	beq.n	8006fc8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4798      	blx	r3
 8006fc4:	e000      	b.n	8006fc8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fc6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d03e      	beq.n	8007050 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d112      	bne.n	8007006 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007010:	2b40      	cmp	r3, #64	@ 0x40
 8007012:	d112      	bne.n	800703a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007048:	f043 0204 	orr.w	r2, r3, #4
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8b7 	bl	80071cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800705e:	e039      	b.n	80070d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b2a      	cmp	r3, #42	@ 0x2a
 8007064:	d109      	bne.n	800707a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2228      	movs	r2, #40	@ 0x28
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff f823 	bl	80060c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b28      	cmp	r3, #40	@ 0x28
 8007084:	d111      	bne.n	80070aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <I2C_Slave_STOPF+0x25c>)
 800708a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff f824 	bl	80060f0 <HAL_I2C_ListenCpltCallback>
}
 80070a8:	e014      	b.n	80070d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	2b22      	cmp	r3, #34	@ 0x22
 80070b0:	d002      	beq.n	80070b8 <I2C_Slave_STOPF+0x234>
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b22      	cmp	r3, #34	@ 0x22
 80070b6:	d10d      	bne.n	80070d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe fff6 	bl	80060c0 <HAL_I2C_SlaveRxCpltCallback>
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	08007a69 	.word	0x08007a69
 80070e0:	ffff0000 	.word	0xffff0000

080070e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d002      	beq.n	8007106 <I2C_Slave_AF+0x22>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b20      	cmp	r3, #32
 8007104:	d129      	bne.n	800715a <I2C_Slave_AF+0x76>
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	2b28      	cmp	r3, #40	@ 0x28
 800710a:	d126      	bne.n	800715a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a2e      	ldr	r2, [pc, #184]	@ (80071c8 <I2C_Slave_AF+0xe4>)
 8007110:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007120:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800712a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800713a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fe ffcc 	bl	80060f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007158:	e031      	b.n	80071be <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b21      	cmp	r3, #33	@ 0x21
 800715e:	d129      	bne.n	80071b4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a19      	ldr	r2, [pc, #100]	@ (80071c8 <I2C_Slave_AF+0xe4>)
 8007164:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2221      	movs	r2, #33	@ 0x21
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800718a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007194:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071a4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fd fe26 	bl	8004df8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fe ff7d 	bl	80060ac <HAL_I2C_SlaveTxCpltCallback>
}
 80071b2:	e004      	b.n	80071be <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071bc:	615a      	str	r2, [r3, #20]
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	ffff0000 	.word	0xffff0000

080071cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d002      	beq.n	80071f0 <I2C_ITError+0x24>
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b40      	cmp	r3, #64	@ 0x40
 80071ee:	d10a      	bne.n	8007206 <I2C_ITError+0x3a>
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	2b22      	cmp	r3, #34	@ 0x22
 80071f4:	d107      	bne.n	8007206 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007204:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800720c:	2b28      	cmp	r3, #40	@ 0x28
 800720e:	d107      	bne.n	8007220 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2228      	movs	r2, #40	@ 0x28
 800721a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800721e:	e015      	b.n	800724c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800722a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800722e:	d00a      	beq.n	8007246 <I2C_ITError+0x7a>
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b60      	cmp	r3, #96	@ 0x60
 8007234:	d007      	beq.n	8007246 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800725a:	d162      	bne.n	8007322 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800726a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b01      	cmp	r3, #1
 8007278:	d020      	beq.n	80072bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727e:	4a6a      	ldr	r2, [pc, #424]	@ (8007428 <I2C_ITError+0x25c>)
 8007280:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd f814 	bl	80042b4 <HAL_DMA_Abort_IT>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8089 	beq.w	80073a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0201 	bic.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072b6:	4610      	mov	r0, r2
 80072b8:	4798      	blx	r3
 80072ba:	e074      	b.n	80073a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c0:	4a59      	ldr	r2, [pc, #356]	@ (8007428 <I2C_ITError+0x25c>)
 80072c2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fc fff3 	bl	80042b4 <HAL_DMA_Abort_IT>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d068      	beq.n	80073a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072de:	2b40      	cmp	r3, #64	@ 0x40
 80072e0:	d10b      	bne.n	80072fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0201 	bic.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	e041      	b.n	80073a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b60      	cmp	r3, #96	@ 0x60
 800732c:	d125      	bne.n	800737a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007346:	2b40      	cmp	r3, #64	@ 0x40
 8007348:	d10b      	bne.n	8007362 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fe fed0 	bl	8006118 <HAL_I2C_AbortCpltCallback>
 8007378:	e015      	b.n	80073a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007384:	2b40      	cmp	r3, #64	@ 0x40
 8007386:	d10b      	bne.n	80073a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fe feaf 	bl	8006104 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10e      	bne.n	80073d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d109      	bne.n	80073d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d007      	beq.n	80073e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80073e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d113      	bne.n	8007420 <I2C_ITError+0x254>
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	2b28      	cmp	r3, #40	@ 0x28
 80073fc:	d110      	bne.n	8007420 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a0a      	ldr	r2, [pc, #40]	@ (800742c <I2C_ITError+0x260>)
 8007402:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fe fe68 	bl	80060f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007420:	bf00      	nop
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	08007a69 	.word	0x08007a69
 800742c:	ffff0000 	.word	0xffff0000

08007430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af02      	add	r7, sp, #8
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	460b      	mov	r3, r1
 800743e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d006      	beq.n	800745a <I2C_MasterRequestWrite+0x2a>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d003      	beq.n	800745a <I2C_MasterRequestWrite+0x2a>
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007458:	d108      	bne.n	800746c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e00b      	b.n	8007484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	2b12      	cmp	r3, #18
 8007472:	d107      	bne.n	8007484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fb91 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00d      	beq.n	80074b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074aa:	d103      	bne.n	80074b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e035      	b.n	8007524 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074c0:	d108      	bne.n	80074d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074c2:	897b      	ldrh	r3, [r7, #10]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80074d0:	611a      	str	r2, [r3, #16]
 80074d2:	e01b      	b.n	800750c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80074d4:	897b      	ldrh	r3, [r7, #10]
 80074d6:	11db      	asrs	r3, r3, #7
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	f003 0306 	and.w	r3, r3, #6
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f063 030f 	orn	r3, r3, #15
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	490e      	ldr	r1, [pc, #56]	@ (800752c <I2C_MasterRequestWrite+0xfc>)
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fbda 	bl	8007cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e010      	b.n	8007524 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007502:	897b      	ldrh	r3, [r7, #10]
 8007504:	b2da      	uxtb	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	4907      	ldr	r1, [pc, #28]	@ (8007530 <I2C_MasterRequestWrite+0x100>)
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fbca 	bl	8007cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	00010008 	.word	0x00010008
 8007530:	00010002 	.word	0x00010002

08007534 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af02      	add	r7, sp, #8
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	4608      	mov	r0, r1
 800753e:	4611      	mov	r1, r2
 8007540:	461a      	mov	r2, r3
 8007542:	4603      	mov	r3, r0
 8007544:	817b      	strh	r3, [r7, #10]
 8007546:	460b      	mov	r3, r1
 8007548:	813b      	strh	r3, [r7, #8]
 800754a:	4613      	mov	r3, r2
 800754c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800755c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	2200      	movs	r2, #0
 8007566:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fb24 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00d      	beq.n	8007592 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007584:	d103      	bne.n	800758e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800758c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e05f      	b.n	8007652 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007592:	897b      	ldrh	r3, [r7, #10]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80075a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	6a3a      	ldr	r2, [r7, #32]
 80075a6:	492d      	ldr	r1, [pc, #180]	@ (800765c <I2C_RequestMemoryWrite+0x128>)
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fb7f 	bl	8007cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e04c      	b.n	8007652 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d0:	6a39      	ldr	r1, [r7, #32]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fc0a 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d107      	bne.n	80075f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e02b      	b.n	8007652 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d105      	bne.n	800760c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007600:	893b      	ldrh	r3, [r7, #8]
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	611a      	str	r2, [r3, #16]
 800760a:	e021      	b.n	8007650 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800760c:	893b      	ldrh	r3, [r7, #8]
 800760e:	0a1b      	lsrs	r3, r3, #8
 8007610:	b29b      	uxth	r3, r3
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800761a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761c:	6a39      	ldr	r1, [r7, #32]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 fbe4 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00d      	beq.n	8007646 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	2b04      	cmp	r3, #4
 8007630:	d107      	bne.n	8007642 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007640:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e005      	b.n	8007652 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007646:	893b      	ldrh	r3, [r7, #8]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	00010002 	.word	0x00010002

08007660 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af02      	add	r7, sp, #8
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	4608      	mov	r0, r1
 800766a:	4611      	mov	r1, r2
 800766c:	461a      	mov	r2, r3
 800766e:	4603      	mov	r3, r0
 8007670:	817b      	strh	r3, [r7, #10]
 8007672:	460b      	mov	r3, r1
 8007674:	813b      	strh	r3, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007688:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007698:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fa86 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c0:	d103      	bne.n	80076ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e0aa      	b.n	8007824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ce:	897b      	ldrh	r3, [r7, #10]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	461a      	mov	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	6a3a      	ldr	r2, [r7, #32]
 80076e2:	4952      	ldr	r1, [pc, #328]	@ (800782c <I2C_RequestMemoryRead+0x1cc>)
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fae1 	bl	8007cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e097      	b.n	8007824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800770a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800770c:	6a39      	ldr	r1, [r7, #32]
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fb6c 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00d      	beq.n	8007736 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	2b04      	cmp	r3, #4
 8007720:	d107      	bne.n	8007732 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007730:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e076      	b.n	8007824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d105      	bne.n	8007748 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800773c:	893b      	ldrh	r3, [r7, #8]
 800773e:	b2da      	uxtb	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	611a      	str	r2, [r3, #16]
 8007746:	e021      	b.n	800778c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007748:	893b      	ldrh	r3, [r7, #8]
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	b29b      	uxth	r3, r3
 800774e:	b2da      	uxtb	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007758:	6a39      	ldr	r1, [r7, #32]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fb46 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00d      	beq.n	8007782 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2b04      	cmp	r3, #4
 800776c:	d107      	bne.n	800777e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800777c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e050      	b.n	8007824 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007782:	893b      	ldrh	r3, [r7, #8]
 8007784:	b2da      	uxtb	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800778c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800778e:	6a39      	ldr	r1, [r7, #32]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fb2b 	bl	8007dec <I2C_WaitOnTXEFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00d      	beq.n	80077b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d107      	bne.n	80077b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e035      	b.n	8007824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f9ef 	bl	8007bb8 <I2C_WaitOnFlagUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00d      	beq.n	80077fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ee:	d103      	bne.n	80077f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e013      	b.n	8007824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077fc:	897b      	ldrh	r3, [r7, #10]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	4906      	ldr	r1, [pc, #24]	@ (800782c <I2C_RequestMemoryRead+0x1cc>)
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fa4a 	bl	8007cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	00010002 	.word	0x00010002

08007830 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007844:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800784c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007852:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007862:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007870:	2200      	movs	r2, #0
 8007872:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007880:	2200      	movs	r2, #0
 8007882:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800788a:	2b21      	cmp	r3, #33	@ 0x21
 800788c:	d007      	beq.n	800789e <I2C_DMAXferCplt+0x6e>
 800788e:	7cfb      	ldrb	r3, [r7, #19]
 8007890:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007894:	2b22      	cmp	r3, #34	@ 0x22
 8007896:	d131      	bne.n	80078fc <I2C_DMAXferCplt+0xcc>
 8007898:	7cbb      	ldrb	r3, [r7, #18]
 800789a:	2b20      	cmp	r3, #32
 800789c:	d12e      	bne.n	80078fc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078ac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2200      	movs	r2, #0
 80078b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80078b4:	7cfb      	ldrb	r3, [r7, #19]
 80078b6:	2b29      	cmp	r3, #41	@ 0x29
 80078b8:	d10a      	bne.n	80078d0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2221      	movs	r2, #33	@ 0x21
 80078be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2228      	movs	r2, #40	@ 0x28
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078c8:	6978      	ldr	r0, [r7, #20]
 80078ca:	f7fe fbef 	bl	80060ac <HAL_I2C_SlaveTxCpltCallback>
 80078ce:	e00c      	b.n	80078ea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80078d4:	d109      	bne.n	80078ea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2222      	movs	r2, #34	@ 0x22
 80078da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2228      	movs	r2, #40	@ 0x28
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078e4:	6978      	ldr	r0, [r7, #20]
 80078e6:	f7fe fbeb 	bl	80060c0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80078f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80078fa:	e074      	b.n	80079e6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d06e      	beq.n	80079e6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	d107      	bne.n	8007922 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007920:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007930:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007938:	d009      	beq.n	800794e <I2C_DMAXferCplt+0x11e>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b08      	cmp	r3, #8
 800793e:	d006      	beq.n	800794e <I2C_DMAXferCplt+0x11e>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007946:	d002      	beq.n	800794e <I2C_DMAXferCplt+0x11e>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b20      	cmp	r3, #32
 800794c:	d107      	bne.n	800795e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800795c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800796c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800797c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2200      	movs	r2, #0
 8007982:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800798c:	6978      	ldr	r0, [r7, #20]
 800798e:	f7fe fbb9 	bl	8006104 <HAL_I2C_ErrorCallback>
}
 8007992:	e028      	b.n	80079e6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b40      	cmp	r3, #64	@ 0x40
 80079a6:	d10a      	bne.n	80079be <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2200      	movs	r2, #0
 80079b4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f7f9 fe40 	bl	800163c <HAL_I2C_MemRxCpltCallback>
}
 80079bc:	e013      	b.n	80079e6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d002      	beq.n	80079d2 <I2C_DMAXferCplt+0x1a2>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d103      	bne.n	80079da <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2200      	movs	r2, #0
 80079d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80079d8:	e002      	b.n	80079e0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2212      	movs	r2, #18
 80079de:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80079e0:	6978      	ldr	r0, [r7, #20]
 80079e2:	f7fe fb59 	bl	8006098 <HAL_I2C_MasterRxCpltCallback>
}
 80079e6:	bf00      	nop
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a08:	2200      	movs	r2, #0
 8007a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a18:	2200      	movs	r2, #0
 8007a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fc fe03 	bl	8004628 <HAL_DMA_GetError>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d01b      	beq.n	8007a60 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a36:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	f043 0210 	orr.w	r2, r3, #16
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7fe fb52 	bl	8006104 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a82:	4b4b      	ldr	r3, [pc, #300]	@ (8007bb0 <I2C_DMAAbort+0x148>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	4a4a      	ldr	r2, [pc, #296]	@ (8007bb4 <I2C_DMAAbort+0x14c>)
 8007a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8e:	0a1a      	lsrs	r2, r3, #8
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	00da      	lsls	r2, r3, #3
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa6:	f043 0220 	orr.w	r2, r3, #32
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007aae:	e00a      	b.n	8007ac6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac4:	d0ea      	beq.n	8007a9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b08:	2200      	movs	r2, #0
 8007b0a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b18:	2200      	movs	r2, #0
 8007b1a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b60      	cmp	r3, #96	@ 0x60
 8007b36:	d10e      	bne.n	8007b56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b4e:	6978      	ldr	r0, [r7, #20]
 8007b50:	f7fe fae2 	bl	8006118 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b54:	e027      	b.n	8007ba6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b56:	7cfb      	ldrb	r3, [r7, #19]
 8007b58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007b5c:	2b28      	cmp	r3, #40	@ 0x28
 8007b5e:	d117      	bne.n	8007b90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2228      	movs	r2, #40	@ 0x28
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007b8e:	e007      	b.n	8007ba0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007ba0:	6978      	ldr	r0, [r7, #20]
 8007ba2:	f7fe faaf 	bl	8006104 <HAL_I2C_ErrorCallback>
}
 8007ba6:	bf00      	nop
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	2000000c 	.word	0x2000000c
 8007bb4:	14f8b589 	.word	0x14f8b589

08007bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bc8:	e048      	b.n	8007c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd0:	d044      	beq.n	8007c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd2:	f7fb fc07 	bl	80033e4 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d302      	bcc.n	8007be8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d139      	bne.n	8007c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	0c1b      	lsrs	r3, r3, #16
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10d      	bne.n	8007c0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	43da      	mvns	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf0c      	ite	eq
 8007c04:	2301      	moveq	r3, #1
 8007c06:	2300      	movne	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	e00c      	b.n	8007c28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	43da      	mvns	r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d116      	bne.n	8007c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e023      	b.n	8007ca4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	0c1b      	lsrs	r3, r3, #16
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d10d      	bne.n	8007c82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	43da      	mvns	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4013      	ands	r3, r2
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bf0c      	ite	eq
 8007c78:	2301      	moveq	r3, #1
 8007c7a:	2300      	movne	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	e00c      	b.n	8007c9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	43da      	mvns	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d093      	beq.n	8007bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cba:	e071      	b.n	8007da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cca:	d123      	bne.n	8007d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d00:	f043 0204 	orr.w	r2, r3, #4
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e067      	b.n	8007de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d041      	beq.n	8007da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1c:	f7fb fb62 	bl	80033e4 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d302      	bcc.n	8007d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d136      	bne.n	8007da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d10c      	bne.n	8007d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	43da      	mvns	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4013      	ands	r3, r2
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bf14      	ite	ne
 8007d4e:	2301      	movne	r3, #1
 8007d50:	2300      	moveq	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	e00b      	b.n	8007d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	43da      	mvns	r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4013      	ands	r3, r2
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bf14      	ite	ne
 8007d68:	2301      	movne	r3, #1
 8007d6a:	2300      	moveq	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d016      	beq.n	8007da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8c:	f043 0220 	orr.w	r2, r3, #32
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e021      	b.n	8007de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	0c1b      	lsrs	r3, r3, #16
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d10c      	bne.n	8007dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	43da      	mvns	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4013      	ands	r3, r2
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bf14      	ite	ne
 8007dbc:	2301      	movne	r3, #1
 8007dbe:	2300      	moveq	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e00b      	b.n	8007ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	43da      	mvns	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	bf14      	ite	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	2300      	moveq	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f47f af6d 	bne.w	8007cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007df8:	e034      	b.n	8007e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f915 	bl	800802a <I2C_IsAcknowledgeFailed>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e034      	b.n	8007e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d028      	beq.n	8007e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e12:	f7fb fae7 	bl	80033e4 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d302      	bcc.n	8007e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11d      	bne.n	8007e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e32:	2b80      	cmp	r3, #128	@ 0x80
 8007e34:	d016      	beq.n	8007e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e007      	b.n	8007e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e6e:	2b80      	cmp	r3, #128	@ 0x80
 8007e70:	d1c3      	bne.n	8007dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e88:	e034      	b.n	8007ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f8cd 	bl	800802a <I2C_IsAcknowledgeFailed>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e034      	b.n	8007f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d028      	beq.n	8007ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea2:	f7fb fa9f 	bl	80033e4 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d302      	bcc.n	8007eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11d      	bne.n	8007ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d016      	beq.n	8007ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e007      	b.n	8007f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d1c3      	bne.n	8007e8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f18:	4b13      	ldr	r3, [pc, #76]	@ (8007f68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	08db      	lsrs	r3, r3, #3
 8007f1e:	4a13      	ldr	r2, [pc, #76]	@ (8007f6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007f20:	fba2 2303 	umull	r2, r3, r2, r3
 8007f24:	0a1a      	lsrs	r2, r3, #8
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	f043 0220 	orr.w	r2, r3, #32
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e008      	b.n	8007f5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f58:	d0e9      	beq.n	8007f2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	2000000c 	.word	0x2000000c
 8007f6c:	14f8b589 	.word	0x14f8b589

08007f70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f7c:	e049      	b.n	8008012 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d119      	bne.n	8007fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0210 	mvn.w	r2, #16
 8007f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e030      	b.n	8008022 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc0:	f7fb fa10 	bl	80033e4 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d302      	bcc.n	8007fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d11d      	bne.n	8008012 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe0:	2b40      	cmp	r3, #64	@ 0x40
 8007fe2:	d016      	beq.n	8008012 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffe:	f043 0220 	orr.w	r2, r3, #32
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e007      	b.n	8008022 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801c:	2b40      	cmp	r3, #64	@ 0x40
 800801e:	d1ae      	bne.n	8007f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800803c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008040:	d11b      	bne.n	800807a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800804a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008066:	f043 0204 	orr.w	r2, r3, #4
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008098:	d103      	bne.n	80080a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80080a0:	e007      	b.n	80080b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80080aa:	d102      	bne.n	80080b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2208      	movs	r2, #8
 80080b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af02      	add	r7, sp, #8
 80080c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e101      	b.n	80082d4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f006 fbe2 	bl	800e8b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2203      	movs	r2, #3
 80080f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080fe:	d102      	bne.n	8008106 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4618      	mov	r0, r3
 800810c:	f002 ff37 	bl	800af7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	7c1a      	ldrb	r2, [r3, #16]
 8008118:	f88d 2000 	strb.w	r2, [sp]
 800811c:	3304      	adds	r3, #4
 800811e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008120:	f002 fe16 	bl	800ad50 <USB_CoreInit>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d005      	beq.n	8008136 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e0ce      	b.n	80082d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2100      	movs	r1, #0
 800813c:	4618      	mov	r0, r3
 800813e:	f002 ff2f 	bl	800afa0 <USB_SetCurrentMode>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e0bf      	b.n	80082d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
 8008158:	e04a      	b.n	80081f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800815a:	7bfa      	ldrb	r2, [r7, #15]
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	4613      	mov	r3, r2
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	440b      	add	r3, r1
 8008168:	3315      	adds	r3, #21
 800816a:	2201      	movs	r2, #1
 800816c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800816e:	7bfa      	ldrb	r2, [r7, #15]
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	4613      	mov	r3, r2
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	3314      	adds	r3, #20
 800817e:	7bfa      	ldrb	r2, [r7, #15]
 8008180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008182:	7bfa      	ldrb	r2, [r7, #15]
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	b298      	uxth	r0, r3
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	332e      	adds	r3, #46	@ 0x2e
 8008196:	4602      	mov	r2, r0
 8008198:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800819a:	7bfa      	ldrb	r2, [r7, #15]
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	3318      	adds	r3, #24
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	331c      	adds	r3, #28
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80081c2:	7bfa      	ldrb	r2, [r7, #15]
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	3320      	adds	r3, #32
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80081d6:	7bfa      	ldrb	r2, [r7, #15]
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	3324      	adds	r3, #36	@ 0x24
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	3301      	adds	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	791b      	ldrb	r3, [r3, #4]
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d3af      	bcc.n	800815a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]
 80081fe:	e044      	b.n	800828a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008200:	7bfa      	ldrb	r2, [r7, #15]
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	4613      	mov	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008216:	7bfa      	ldrb	r2, [r7, #15]
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008228:	7bfa      	ldrb	r2, [r7, #15]
 800822a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008242:	7bfa      	ldrb	r2, [r7, #15]
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008258:	7bfa      	ldrb	r2, [r7, #15]
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	4613      	mov	r3, r2
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800826e:	7bfa      	ldrb	r2, [r7, #15]
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	3301      	adds	r3, #1
 8008288:	73fb      	strb	r3, [r7, #15]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	7bfa      	ldrb	r2, [r7, #15]
 8008290:	429a      	cmp	r2, r3
 8008292:	d3b5      	bcc.n	8008200 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7c1a      	ldrb	r2, [r3, #16]
 800829c:	f88d 2000 	strb.w	r2, [sp]
 80082a0:	3304      	adds	r3, #4
 80082a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082a4:	f002 fec8 	bl	800b038 <USB_DevInit>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e00c      	b.n	80082d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f003 ff12 	bl	800c0f6 <USB_DevDisconnect>

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <HAL_PCD_Start+0x1c>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e022      	b.n	800833e <HAL_PCD_Start+0x62>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d009      	beq.n	8008320 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008310:	2b01      	cmp	r3, #1
 8008312:	d105      	bne.n	8008320 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008318:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4618      	mov	r0, r3
 8008326:	f002 fe19 	bl	800af5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f003 fec0 	bl	800c0b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008346:	b590      	push	{r4, r7, lr}
 8008348:	b08d      	sub	sp, #52	@ 0x34
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4618      	mov	r0, r3
 800835e:	f003 ff7e 	bl	800c25e <USB_GetMode>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	f040 848c 	bne.w	8008c82 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4618      	mov	r0, r3
 8008370:	f003 fee2 	bl	800c138 <USB_ReadInterrupts>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8482 	beq.w	8008c80 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f003 fecf 	bl	800c138 <USB_ReadInterrupts>
 800839a:	4603      	mov	r3, r0
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d107      	bne.n	80083b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f002 0202 	and.w	r2, r2, #2
 80083b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f003 febd 	bl	800c138 <USB_ReadInterrupts>
 80083be:	4603      	mov	r3, r0
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d161      	bne.n	800848c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0210 	bic.w	r2, r2, #16
 80083d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f003 020f 	and.w	r2, r3, #15
 80083e4:	4613      	mov	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	3304      	adds	r3, #4
 80083f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80083fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008402:	d124      	bne.n	800844e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d035      	beq.n	800847c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	091b      	lsrs	r3, r3, #4
 8008418:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800841a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800841e:	b29b      	uxth	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	6a38      	ldr	r0, [r7, #32]
 8008424:	f003 fcf4 	bl	800be10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	091b      	lsrs	r3, r3, #4
 8008430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008434:	441a      	add	r2, r3
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	695a      	ldr	r2, [r3, #20]
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	091b      	lsrs	r3, r3, #4
 8008442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008446:	441a      	add	r2, r3
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	615a      	str	r2, [r3, #20]
 800844c:	e016      	b.n	800847c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008454:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008458:	d110      	bne.n	800847c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008460:	2208      	movs	r2, #8
 8008462:	4619      	mov	r1, r3
 8008464:	6a38      	ldr	r0, [r7, #32]
 8008466:	f003 fcd3 	bl	800be10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	695a      	ldr	r2, [r3, #20]
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	091b      	lsrs	r3, r3, #4
 8008472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008476:	441a      	add	r2, r3
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0210 	orr.w	r2, r2, #16
 800848a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f003 fe51 	bl	800c138 <USB_ReadInterrupts>
 8008496:	4603      	mov	r3, r0
 8008498:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800849c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80084a0:	f040 80a7 	bne.w	80085f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f003 fe56 	bl	800c15e <USB_ReadDevAllOutEpInterrupt>
 80084b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80084b4:	e099      	b.n	80085ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 808e 	beq.w	80085de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f003 fe7a 	bl	800c1c6 <USB_ReadDevOutEPInterrupt>
 80084d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ea:	461a      	mov	r2, r3
 80084ec:	2301      	movs	r3, #1
 80084ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80084f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fea4 	bl	8009240 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00c      	beq.n	800851c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850e:	461a      	mov	r2, r3
 8008510:	2308      	movs	r3, #8
 8008512:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008514:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 ff7a 	bl	8009410 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f003 0310 	and.w	r3, r3, #16
 8008522:	2b00      	cmp	r3, #0
 8008524:	d008      	beq.n	8008538 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008532:	461a      	mov	r2, r3
 8008534:	2310      	movs	r3, #16
 8008536:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d030      	beq.n	80085a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800854a:	2b80      	cmp	r3, #128	@ 0x80
 800854c:	d109      	bne.n	8008562 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800855c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008560:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008564:	4613      	mov	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	3304      	adds	r3, #4
 8008576:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	78db      	ldrb	r3, [r3, #3]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d108      	bne.n	8008592 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2200      	movs	r2, #0
 8008584:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	b2db      	uxtb	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f006 fa8d 	bl	800eaac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859e:	461a      	mov	r2, r3
 80085a0:	2302      	movs	r3, #2
 80085a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d008      	beq.n	80085c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ba:	461a      	mov	r2, r3
 80085bc:	2320      	movs	r3, #32
 80085be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d6:	461a      	mov	r2, r3
 80085d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80085dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	3301      	adds	r3, #1
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	085b      	lsrs	r3, r3, #1
 80085e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f47f af62 	bne.w	80084b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f003 fd9e 	bl	800c138 <USB_ReadInterrupts>
 80085fc:	4603      	mov	r3, r0
 80085fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008606:	f040 80db 	bne.w	80087c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f003 fdbf 	bl	800c192 <USB_ReadDevAllInEpInterrupt>
 8008614:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800861a:	e0cd      	b.n	80087b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80c2 	beq.w	80087ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	4611      	mov	r1, r2
 8008632:	4618      	mov	r0, r3
 8008634:	f003 fde5 	bl	800c202 <USB_ReadDevInEPInterrupt>
 8008638:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d057      	beq.n	80086f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	f003 030f 	and.w	r3, r3, #15
 800864a:	2201      	movs	r2, #1
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	43db      	mvns	r3, r3
 800865e:	69f9      	ldr	r1, [r7, #28]
 8008660:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008664:	4013      	ands	r3, r2
 8008666:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008674:	461a      	mov	r2, r3
 8008676:	2301      	movs	r3, #1
 8008678:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	799b      	ldrb	r3, [r3, #6]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d132      	bne.n	80086e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008686:	4613      	mov	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	3320      	adds	r3, #32
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008698:	4613      	mov	r3, r2
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4403      	add	r3, r0
 80086a2:	331c      	adds	r3, #28
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4419      	add	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ac:	4613      	mov	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4403      	add	r3, r0
 80086b6:	3320      	adds	r3, #32
 80086b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d113      	bne.n	80086e8 <HAL_PCD_IRQHandler+0x3a2>
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3324      	adds	r3, #36	@ 0x24
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d108      	bne.n	80086e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80086e0:	461a      	mov	r2, r3
 80086e2:	2101      	movs	r1, #1
 80086e4:	f003 fdec 	bl	800c2c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f006 f961 	bl	800e9b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d008      	beq.n	8008710 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800870a:	461a      	mov	r2, r3
 800870c:	2308      	movs	r3, #8
 800870e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f003 0310 	and.w	r3, r3, #16
 8008716:	2b00      	cmp	r3, #0
 8008718:	d008      	beq.n	800872c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008726:	461a      	mov	r2, r3
 8008728:	2310      	movs	r3, #16
 800872a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d008      	beq.n	8008748 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008742:	461a      	mov	r2, r3
 8008744:	2340      	movs	r3, #64	@ 0x40
 8008746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d023      	beq.n	800879a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008752:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008754:	6a38      	ldr	r0, [r7, #32]
 8008756:	f002 fdd3 	bl	800b300 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800875a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800875c:	4613      	mov	r3, r2
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	3310      	adds	r3, #16
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	4413      	add	r3, r2
 800876a:	3304      	adds	r3, #4
 800876c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	78db      	ldrb	r3, [r3, #3]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d108      	bne.n	8008788 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2200      	movs	r2, #0
 800877a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	b2db      	uxtb	r3, r3
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f006 f9a4 	bl	800ead0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008794:	461a      	mov	r2, r3
 8008796:	2302      	movs	r3, #2
 8008798:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80087a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fcbd 	bl	8009126 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	3301      	adds	r3, #1
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f47f af2e 	bne.w	800861c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f003 fcb7 	bl	800c138 <USB_ReadInterrupts>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087d4:	d122      	bne.n	800881c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087e4:	f023 0301 	bic.w	r3, r3, #1
 80087e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d108      	bne.n	8008806 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fea4 	bl	800954c <HAL_PCDEx_LPM_Callback>
 8008804:	e002      	b.n	800880c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f006 f942 	bl	800ea90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695a      	ldr	r2, [r3, #20]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800881a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f003 fc89 	bl	800c138 <USB_ReadInterrupts>
 8008826:	4603      	mov	r3, r0
 8008828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800882c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008830:	d112      	bne.n	8008858 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b01      	cmp	r3, #1
 8008840:	d102      	bne.n	8008848 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f006 f8fe 	bl	800ea44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695a      	ldr	r2, [r3, #20]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008856:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f003 fc6b 	bl	800c138 <USB_ReadInterrupts>
 8008862:	4603      	mov	r3, r0
 8008864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886c:	f040 80b7 	bne.w	80089de <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800887e:	f023 0301 	bic.w	r3, r3, #1
 8008882:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2110      	movs	r1, #16
 800888a:	4618      	mov	r0, r3
 800888c:	f002 fd38 	bl	800b300 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008890:	2300      	movs	r3, #0
 8008892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008894:	e046      	b.n	8008924 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a2:	461a      	mov	r2, r3
 80088a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d6:	461a      	mov	r2, r3
 80088d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	440a      	add	r2, r1
 8008914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008918:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800891c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800891e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008920:	3301      	adds	r3, #1
 8008922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	791b      	ldrb	r3, [r3, #4]
 8008928:	461a      	mov	r2, r3
 800892a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892c:	4293      	cmp	r3, r2
 800892e:	d3b2      	bcc.n	8008896 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800893e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008942:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7bdb      	ldrb	r3, [r3, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d016      	beq.n	800897a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008956:	69fa      	ldr	r2, [r7, #28]
 8008958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800895c:	f043 030b 	orr.w	r3, r3, #11
 8008960:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800896a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008972:	f043 030b 	orr.w	r3, r3, #11
 8008976:	6453      	str	r3, [r2, #68]	@ 0x44
 8008978:	e015      	b.n	80089a6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800898c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008990:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089a0:	f043 030b 	orr.w	r3, r3, #11
 80089a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089b4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80089b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089c8:	461a      	mov	r2, r3
 80089ca:	f003 fc79 	bl	800c2c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695a      	ldr	r2, [r3, #20]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80089dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f003 fba8 	bl	800c138 <USB_ReadInterrupts>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f2:	d123      	bne.n	8008a3c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f003 fc3e 	bl	800c27a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f002 fcf5 	bl	800b3f2 <USB_GetDevSpeed>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681c      	ldr	r4, [r3, #0]
 8008a14:	f001 f9ca 	bl	8009dac <HAL_RCC_GetHCLKFreq>
 8008a18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4620      	mov	r0, r4
 8008a22:	f002 f9f9 	bl	800ae18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f005 ffed 	bl	800ea06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	695a      	ldr	r2, [r3, #20]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f003 fb79 	bl	800c138 <USB_ReadInterrupts>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d10a      	bne.n	8008a66 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f005 ffca 	bl	800e9ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f002 0208 	and.w	r2, r2, #8
 8008a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f003 fb64 	bl	800c138 <USB_ReadInterrupts>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a76:	2b80      	cmp	r3, #128	@ 0x80
 8008a78:	d123      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a86:	2301      	movs	r3, #1
 8008a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a8a:	e014      	b.n	8008ab6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a90:	4613      	mov	r3, r2
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	440b      	add	r3, r1
 8008a9a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fb0a 	bl	80090c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	791b      	ldrb	r3, [r3, #4]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d3e4      	bcc.n	8008a8c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f003 fb36 	bl	800c138 <USB_ReadInterrupts>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ad6:	d13c      	bne.n	8008b52 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ad8:	2301      	movs	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8008adc:	e02b      	b.n	8008b36 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af2:	4613      	mov	r3, r2
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	440b      	add	r3, r1
 8008afc:	3318      	adds	r3, #24
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d115      	bne.n	8008b30 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008b04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da12      	bge.n	8008b30 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b0e:	4613      	mov	r3, r2
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	3317      	adds	r3, #23
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 faca 	bl	80090c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	3301      	adds	r3, #1
 8008b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	791b      	ldrb	r3, [r3, #4]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d3cd      	bcc.n	8008ade <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	695a      	ldr	r2, [r3, #20]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f003 faee 	bl	800c138 <USB_ReadInterrupts>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b66:	d156      	bne.n	8008c16 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b68:	2301      	movs	r3, #1
 8008b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b6c:	e045      	b.n	8008bfa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b82:	4613      	mov	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d12e      	bne.n	8008bf4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008b96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	da2b      	bge.n	8008bf4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	0c1a      	lsrs	r2, r3, #16
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008ba6:	4053      	eors	r3, r2
 8008ba8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d121      	bne.n	8008bf4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008bf0:	6053      	str	r3, [r2, #4]
            break;
 8008bf2:	e008      	b.n	8008c06 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	791b      	ldrb	r3, [r3, #4]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d3b3      	bcc.n	8008b6e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f003 fa8c 	bl	800c138 <USB_ReadInterrupts>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2a:	d10a      	bne.n	8008c42 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f005 ff61 	bl	800eaf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	695a      	ldr	r2, [r3, #20]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f003 fa76 	bl	800c138 <USB_ReadInterrupts>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f003 0304 	and.w	r3, r3, #4
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d115      	bne.n	8008c82 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f005 ff51 	bl	800eb10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6859      	ldr	r1, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	e000      	b.n	8008c82 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008c80:	bf00      	nop
    }
  }
}
 8008c82:	3734      	adds	r7, #52	@ 0x34
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd90      	pop	{r4, r7, pc}

08008c88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <HAL_PCD_SetAddress+0x1a>
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	e012      	b.n	8008cc8 <HAL_PCD_SetAddress+0x40>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	78fa      	ldrb	r2, [r7, #3]
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f003 f9d5 	bl	800c068 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	4608      	mov	r0, r1
 8008cda:	4611      	mov	r1, r2
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	70fb      	strb	r3, [r7, #3]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	803b      	strh	r3, [r7, #0]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da0f      	bge.n	8008d16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	f003 020f 	and.w	r2, r3, #15
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	3310      	adds	r3, #16
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	4413      	add	r3, r2
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	705a      	strb	r2, [r3, #1]
 8008d14:	e00f      	b.n	8008d36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	f003 020f 	and.w	r2, r3, #15
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	f003 030f 	and.w	r3, r3, #15
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008d42:	883b      	ldrh	r3, [r7, #0]
 8008d44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	78ba      	ldrb	r2, [r7, #2]
 8008d50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d004      	beq.n	8008d64 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008d64:	78bb      	ldrb	r3, [r7, #2]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d102      	bne.n	8008d70 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <HAL_PCD_EP_Open+0xae>
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	e00e      	b.n	8008d9c <HAL_PCD_EP_Open+0xcc>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f002 fb55 	bl	800b43c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da0f      	bge.n	8008dd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008db8:	78fb      	ldrb	r3, [r7, #3]
 8008dba:	f003 020f 	and.w	r2, r3, #15
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4413      	add	r3, r2
 8008dcc:	3304      	adds	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	705a      	strb	r2, [r3, #1]
 8008dd6:	e00f      	b.n	8008df8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	f003 020f 	and.w	r2, r3, #15
 8008dde:	4613      	mov	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	3304      	adds	r3, #4
 8008df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_PCD_EP_Close+0x6e>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e00e      	b.n	8008e30 <HAL_PCD_EP_Close+0x8c>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68f9      	ldr	r1, [r7, #12]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f002 fb93 	bl	800b54c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	603b      	str	r3, [r7, #0]
 8008e44:	460b      	mov	r3, r1
 8008e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	f003 020f 	and.w	r2, r3, #15
 8008e4e:	4613      	mov	r3, r2
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3304      	adds	r3, #4
 8008e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2200      	movs	r2, #0
 8008e72:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2200      	movs	r2, #0
 8008e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e7a:	7afb      	ldrb	r3, [r7, #11]
 8008e7c:	f003 030f 	and.w	r3, r3, #15
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	799b      	ldrb	r3, [r3, #6]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d102      	bne.n	8008e94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	799b      	ldrb	r3, [r3, #6]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6979      	ldr	r1, [r7, #20]
 8008ea0:	f002 fc30 	bl	800b704 <USB_EPStartXfer>

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	f003 020f 	and.w	r2, r3, #15
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	440b      	add	r3, r1
 8008ecc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008ed0:	681b      	ldr	r3, [r3, #0]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
 8008eea:	460b      	mov	r3, r1
 8008eec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	f003 020f 	and.w	r2, r3, #15
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	3310      	adds	r3, #16
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	3304      	adds	r3, #4
 8008f04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2200      	movs	r2, #0
 8008f16:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	799b      	ldrb	r3, [r3, #6]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d102      	bne.n	8008f38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	799b      	ldrb	r3, [r3, #6]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6979      	ldr	r1, [r7, #20]
 8008f44:	f002 fbde 	bl	800b704 <USB_EPStartXfer>

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	f003 030f 	and.w	r3, r3, #15
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	7912      	ldrb	r2, [r2, #4]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d901      	bls.n	8008f70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e04f      	b.n	8009010 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da0f      	bge.n	8008f98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	f003 020f 	and.w	r2, r3, #15
 8008f7e:	4613      	mov	r3, r2
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	3310      	adds	r3, #16
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	705a      	strb	r2, [r3, #1]
 8008f96:	e00d      	b.n	8008fb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4413      	add	r3, r2
 8008faa:	3304      	adds	r3, #4
 8008fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_PCD_EP_SetStall+0x82>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e01d      	b.n	8009010 <HAL_PCD_EP_SetStall+0xbe>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f002 ff6c 	bl	800bec0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	7999      	ldrb	r1, [r3, #6]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009000:	461a      	mov	r2, r3
 8009002:	f003 f95d 	bl	800c2c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	7912      	ldrb	r2, [r2, #4]
 800902e:	4293      	cmp	r3, r2
 8009030:	d901      	bls.n	8009036 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e042      	b.n	80090bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800903a:	2b00      	cmp	r3, #0
 800903c:	da0f      	bge.n	800905e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	4613      	mov	r3, r2
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	3310      	adds	r3, #16
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	3304      	adds	r3, #4
 8009054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	705a      	strb	r2, [r3, #1]
 800905c:	e00f      	b.n	800907e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800905e:	78fb      	ldrb	r3, [r7, #3]
 8009060:	f003 020f 	and.w	r2, r3, #15
 8009064:	4613      	mov	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	4413      	add	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	4413      	add	r3, r2
 8009074:	3304      	adds	r3, #4
 8009076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	f003 030f 	and.w	r3, r3, #15
 800908a:	b2da      	uxtb	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009096:	2b01      	cmp	r3, #1
 8009098:	d101      	bne.n	800909e <HAL_PCD_EP_ClrStall+0x86>
 800909a:	2302      	movs	r3, #2
 800909c:	e00e      	b.n	80090bc <HAL_PCD_EP_ClrStall+0xa4>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f002 ff75 	bl	800bf9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80090d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0c      	bge.n	80090f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	f003 020f 	and.w	r2, r3, #15
 80090de:	4613      	mov	r3, r2
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	3310      	adds	r3, #16
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	3304      	adds	r3, #4
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e00c      	b.n	800910c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	f003 020f 	and.w	r2, r3, #15
 80090f8:	4613      	mov	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	3304      	adds	r3, #4
 800910a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68f9      	ldr	r1, [r7, #12]
 8009112:	4618      	mov	r0, r3
 8009114:	f002 fd94 	bl	800bc40 <USB_EPStopXfer>
 8009118:	4603      	mov	r3, r0
 800911a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800911c:	7afb      	ldrb	r3, [r7, #11]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b08a      	sub	sp, #40	@ 0x28
 800912a:	af02      	add	r7, sp, #8
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4613      	mov	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	3310      	adds	r3, #16
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	4413      	add	r3, r2
 800914a:	3304      	adds	r3, #4
 800914c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	695a      	ldr	r2, [r3, #20]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	429a      	cmp	r2, r3
 8009158:	d901      	bls.n	800915e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e06b      	b.n	8009236 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	429a      	cmp	r2, r3
 8009172:	d902      	bls.n	800917a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	3303      	adds	r3, #3
 800917e:	089b      	lsrs	r3, r3, #2
 8009180:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009182:	e02a      	b.n	80091da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	691a      	ldr	r2, [r3, #16]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	429a      	cmp	r2, r3
 8009198:	d902      	bls.n	80091a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	3303      	adds	r3, #3
 80091a4:	089b      	lsrs	r3, r3, #2
 80091a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68d9      	ldr	r1, [r3, #12]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	4603      	mov	r3, r0
 80091bc:	6978      	ldr	r0, [r7, #20]
 80091be:	f002 fde9 	bl	800bd94 <USB_WritePacket>

    ep->xfer_buff  += len;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	441a      	add	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	695a      	ldr	r2, [r3, #20]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	441a      	add	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d809      	bhi.n	8009204 <PCD_WriteEmptyTxFifo+0xde>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	695a      	ldr	r2, [r3, #20]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d203      	bcs.n	8009204 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1bf      	bne.n	8009184 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	429a      	cmp	r2, r3
 800920e:	d811      	bhi.n	8009234 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	2201      	movs	r2, #1
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	43db      	mvns	r3, r3
 800922a:	6939      	ldr	r1, [r7, #16]
 800922c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009230:	4013      	ands	r3, r2
 8009232:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	333c      	adds	r3, #60	@ 0x3c
 8009258:	3304      	adds	r3, #4
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	799b      	ldrb	r3, [r3, #6]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d17b      	bne.n	800936e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d015      	beq.n	80092ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	4a61      	ldr	r2, [pc, #388]	@ (8009408 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009284:	4293      	cmp	r3, r2
 8009286:	f240 80b9 	bls.w	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 80b3 	beq.w	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	461a      	mov	r2, r3
 80092a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092a8:	6093      	str	r3, [r2, #8]
 80092aa:	e0a7      	b.n	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c2:	461a      	mov	r2, r3
 80092c4:	2320      	movs	r3, #32
 80092c6:	6093      	str	r3, [r2, #8]
 80092c8:	e098      	b.n	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f040 8093 	bne.w	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	4a4b      	ldr	r2, [pc, #300]	@ (8009408 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d90f      	bls.n	80092fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f4:	461a      	mov	r2, r3
 80092f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092fa:	6093      	str	r3, [r2, #8]
 80092fc:	e07e      	b.n	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4613      	mov	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	4413      	add	r3, r2
 8009310:	3304      	adds	r3, #4
 8009312:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a1a      	ldr	r2, [r3, #32]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	0159      	lsls	r1, r3, #5
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	440b      	add	r3, r1
 8009320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800932a:	1ad2      	subs	r2, r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d114      	bne.n	8009360 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009348:	461a      	mov	r2, r3
 800934a:	2101      	movs	r1, #1
 800934c:	f002 ffb8 	bl	800c2c0 <USB_EP0_OutStart>
 8009350:	e006      	b.n	8009360 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	441a      	add	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f005 fb0a 	bl	800e980 <HAL_PCD_DataOutStageCallback>
 800936c:	e046      	b.n	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4a26      	ldr	r2, [pc, #152]	@ (800940c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d124      	bne.n	80093c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800938c:	461a      	mov	r2, r3
 800938e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009392:	6093      	str	r3, [r2, #8]
 8009394:	e032      	b.n	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ac:	461a      	mov	r2, r3
 80093ae:	2320      	movs	r3, #32
 80093b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f005 fae1 	bl	800e980 <HAL_PCD_DataOutStageCallback>
 80093be:	e01d      	b.n	80093fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d114      	bne.n	80093f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	440b      	add	r3, r1
 80093d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d108      	bne.n	80093f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093e8:	461a      	mov	r2, r3
 80093ea:	2100      	movs	r1, #0
 80093ec:	f002 ff68 	bl	800c2c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f005 fac2 	bl	800e980 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3720      	adds	r7, #32
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	4f54300a 	.word	0x4f54300a
 800940c:	4f54310a 	.word	0x4f54310a

08009410 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	333c      	adds	r3, #60	@ 0x3c
 8009428:	3304      	adds	r3, #4
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4a15      	ldr	r2, [pc, #84]	@ (8009498 <PCD_EP_OutSetupPacket_int+0x88>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d90e      	bls.n	8009464 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800944c:	2b00      	cmp	r3, #0
 800944e:	d009      	beq.n	8009464 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945c:	461a      	mov	r2, r3
 800945e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009462:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f005 fa79 	bl	800e95c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4a0a      	ldr	r2, [pc, #40]	@ (8009498 <PCD_EP_OutSetupPacket_int+0x88>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d90c      	bls.n	800948c <PCD_EP_OutSetupPacket_int+0x7c>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	799b      	ldrb	r3, [r3, #6]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d108      	bne.n	800948c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009484:	461a      	mov	r2, r3
 8009486:	2101      	movs	r1, #1
 8009488:	f002 ff1a 	bl	800c2c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	4f54300a 	.word	0x4f54300a

0800949c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
 80094a8:	4613      	mov	r3, r2
 80094aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80094ba:	883b      	ldrh	r3, [r7, #0]
 80094bc:	0419      	lsls	r1, r3, #16
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80094c8:	e028      	b.n	800951c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4413      	add	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
 80094dc:	e00d      	b.n	80094fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	3340      	adds	r3, #64	@ 0x40
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	0c1b      	lsrs	r3, r3, #16
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	4413      	add	r3, r2
 80094f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	3301      	adds	r3, #1
 80094f8:	73fb      	strb	r3, [r7, #15]
 80094fa:	7bfa      	ldrb	r2, [r7, #15]
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	3b01      	subs	r3, #1
 8009500:	429a      	cmp	r2, r3
 8009502:	d3ec      	bcc.n	80094de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009504:	883b      	ldrh	r3, [r7, #0]
 8009506:	0418      	lsls	r0, r3, #16
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	3b01      	subs	r3, #1
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	4302      	orrs	r2, r0
 8009514:	3340      	adds	r3, #64	@ 0x40
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	887a      	ldrh	r2, [r7, #2]
 800953c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e267      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d075      	beq.n	800966e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009582:	4b88      	ldr	r3, [pc, #544]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f003 030c 	and.w	r3, r3, #12
 800958a:	2b04      	cmp	r3, #4
 800958c:	d00c      	beq.n	80095a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800958e:	4b85      	ldr	r3, [pc, #532]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009596:	2b08      	cmp	r3, #8
 8009598:	d112      	bne.n	80095c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800959a:	4b82      	ldr	r3, [pc, #520]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095a6:	d10b      	bne.n	80095c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095a8:	4b7e      	ldr	r3, [pc, #504]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d05b      	beq.n	800966c <HAL_RCC_OscConfig+0x108>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d157      	bne.n	800966c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e242      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095c8:	d106      	bne.n	80095d8 <HAL_RCC_OscConfig+0x74>
 80095ca:	4b76      	ldr	r3, [pc, #472]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a75      	ldr	r2, [pc, #468]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	e01d      	b.n	8009614 <HAL_RCC_OscConfig+0xb0>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095e0:	d10c      	bne.n	80095fc <HAL_RCC_OscConfig+0x98>
 80095e2:	4b70      	ldr	r3, [pc, #448]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a6f      	ldr	r2, [pc, #444]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	4b6d      	ldr	r3, [pc, #436]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a6c      	ldr	r2, [pc, #432]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	e00b      	b.n	8009614 <HAL_RCC_OscConfig+0xb0>
 80095fc:	4b69      	ldr	r3, [pc, #420]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a68      	ldr	r2, [pc, #416]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	4b66      	ldr	r3, [pc, #408]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a65      	ldr	r2, [pc, #404]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 800960e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d013      	beq.n	8009644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800961c:	f7f9 fee2 	bl	80033e4 <HAL_GetTick>
 8009620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009622:	e008      	b.n	8009636 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009624:	f7f9 fede 	bl	80033e4 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	2b64      	cmp	r3, #100	@ 0x64
 8009630:	d901      	bls.n	8009636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e207      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009636:	4b5b      	ldr	r3, [pc, #364]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0f0      	beq.n	8009624 <HAL_RCC_OscConfig+0xc0>
 8009642:	e014      	b.n	800966e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009644:	f7f9 fece 	bl	80033e4 <HAL_GetTick>
 8009648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800964a:	e008      	b.n	800965e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800964c:	f7f9 feca 	bl	80033e4 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b64      	cmp	r3, #100	@ 0x64
 8009658:	d901      	bls.n	800965e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e1f3      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800965e:	4b51      	ldr	r3, [pc, #324]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1f0      	bne.n	800964c <HAL_RCC_OscConfig+0xe8>
 800966a:	e000      	b.n	800966e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800966c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	d063      	beq.n	8009742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800967a:	4b4a      	ldr	r3, [pc, #296]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f003 030c 	and.w	r3, r3, #12
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00b      	beq.n	800969e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009686:	4b47      	ldr	r3, [pc, #284]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800968e:	2b08      	cmp	r3, #8
 8009690:	d11c      	bne.n	80096cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009692:	4b44      	ldr	r3, [pc, #272]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d116      	bne.n	80096cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800969e:	4b41      	ldr	r3, [pc, #260]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d005      	beq.n	80096b6 <HAL_RCC_OscConfig+0x152>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d001      	beq.n	80096b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e1c7      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096b6:	4b3b      	ldr	r3, [pc, #236]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	4937      	ldr	r1, [pc, #220]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096ca:	e03a      	b.n	8009742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d020      	beq.n	8009716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096d4:	4b34      	ldr	r3, [pc, #208]	@ (80097a8 <HAL_RCC_OscConfig+0x244>)
 80096d6:	2201      	movs	r2, #1
 80096d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096da:	f7f9 fe83 	bl	80033e4 <HAL_GetTick>
 80096de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096e0:	e008      	b.n	80096f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096e2:	f7f9 fe7f 	bl	80033e4 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d901      	bls.n	80096f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e1a8      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096f4:	4b2b      	ldr	r3, [pc, #172]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0f0      	beq.n	80096e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009700:	4b28      	ldr	r3, [pc, #160]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	4925      	ldr	r1, [pc, #148]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009710:	4313      	orrs	r3, r2
 8009712:	600b      	str	r3, [r1, #0]
 8009714:	e015      	b.n	8009742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009716:	4b24      	ldr	r3, [pc, #144]	@ (80097a8 <HAL_RCC_OscConfig+0x244>)
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800971c:	f7f9 fe62 	bl	80033e4 <HAL_GetTick>
 8009720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009722:	e008      	b.n	8009736 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009724:	f7f9 fe5e 	bl	80033e4 <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2b02      	cmp	r3, #2
 8009730:	d901      	bls.n	8009736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e187      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009736:	4b1b      	ldr	r3, [pc, #108]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1f0      	bne.n	8009724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0308 	and.w	r3, r3, #8
 800974a:	2b00      	cmp	r3, #0
 800974c:	d036      	beq.n	80097bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d016      	beq.n	8009784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009756:	4b15      	ldr	r3, [pc, #84]	@ (80097ac <HAL_RCC_OscConfig+0x248>)
 8009758:	2201      	movs	r2, #1
 800975a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800975c:	f7f9 fe42 	bl	80033e4 <HAL_GetTick>
 8009760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009762:	e008      	b.n	8009776 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009764:	f7f9 fe3e 	bl	80033e4 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d901      	bls.n	8009776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e167      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009776:	4b0b      	ldr	r3, [pc, #44]	@ (80097a4 <HAL_RCC_OscConfig+0x240>)
 8009778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800977a:	f003 0302 	and.w	r3, r3, #2
 800977e:	2b00      	cmp	r3, #0
 8009780:	d0f0      	beq.n	8009764 <HAL_RCC_OscConfig+0x200>
 8009782:	e01b      	b.n	80097bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009784:	4b09      	ldr	r3, [pc, #36]	@ (80097ac <HAL_RCC_OscConfig+0x248>)
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800978a:	f7f9 fe2b 	bl	80033e4 <HAL_GetTick>
 800978e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009790:	e00e      	b.n	80097b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009792:	f7f9 fe27 	bl	80033e4 <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	2b02      	cmp	r3, #2
 800979e:	d907      	bls.n	80097b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e150      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
 80097a4:	40023800 	.word	0x40023800
 80097a8:	42470000 	.word	0x42470000
 80097ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097b0:	4b88      	ldr	r3, [pc, #544]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80097b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1ea      	bne.n	8009792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8097 	beq.w	80098f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097ce:	4b81      	ldr	r3, [pc, #516]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80097d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10f      	bne.n	80097fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097da:	2300      	movs	r3, #0
 80097dc:	60bb      	str	r3, [r7, #8]
 80097de:	4b7d      	ldr	r3, [pc, #500]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80097e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e2:	4a7c      	ldr	r2, [pc, #496]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80097e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80097ea:	4b7a      	ldr	r3, [pc, #488]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f2:	60bb      	str	r3, [r7, #8]
 80097f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097f6:	2301      	movs	r3, #1
 80097f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097fa:	4b77      	ldr	r3, [pc, #476]	@ (80099d8 <HAL_RCC_OscConfig+0x474>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009802:	2b00      	cmp	r3, #0
 8009804:	d118      	bne.n	8009838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009806:	4b74      	ldr	r3, [pc, #464]	@ (80099d8 <HAL_RCC_OscConfig+0x474>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a73      	ldr	r2, [pc, #460]	@ (80099d8 <HAL_RCC_OscConfig+0x474>)
 800980c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009812:	f7f9 fde7 	bl	80033e4 <HAL_GetTick>
 8009816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009818:	e008      	b.n	800982c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800981a:	f7f9 fde3 	bl	80033e4 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	2b02      	cmp	r3, #2
 8009826:	d901      	bls.n	800982c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e10c      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800982c:	4b6a      	ldr	r3, [pc, #424]	@ (80099d8 <HAL_RCC_OscConfig+0x474>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0f0      	beq.n	800981a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d106      	bne.n	800984e <HAL_RCC_OscConfig+0x2ea>
 8009840:	4b64      	ldr	r3, [pc, #400]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009844:	4a63      	ldr	r2, [pc, #396]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009846:	f043 0301 	orr.w	r3, r3, #1
 800984a:	6713      	str	r3, [r2, #112]	@ 0x70
 800984c:	e01c      	b.n	8009888 <HAL_RCC_OscConfig+0x324>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2b05      	cmp	r3, #5
 8009854:	d10c      	bne.n	8009870 <HAL_RCC_OscConfig+0x30c>
 8009856:	4b5f      	ldr	r3, [pc, #380]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800985a:	4a5e      	ldr	r2, [pc, #376]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 800985c:	f043 0304 	orr.w	r3, r3, #4
 8009860:	6713      	str	r3, [r2, #112]	@ 0x70
 8009862:	4b5c      	ldr	r3, [pc, #368]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009866:	4a5b      	ldr	r2, [pc, #364]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009868:	f043 0301 	orr.w	r3, r3, #1
 800986c:	6713      	str	r3, [r2, #112]	@ 0x70
 800986e:	e00b      	b.n	8009888 <HAL_RCC_OscConfig+0x324>
 8009870:	4b58      	ldr	r3, [pc, #352]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009874:	4a57      	ldr	r2, [pc, #348]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009876:	f023 0301 	bic.w	r3, r3, #1
 800987a:	6713      	str	r3, [r2, #112]	@ 0x70
 800987c:	4b55      	ldr	r3, [pc, #340]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 800987e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009880:	4a54      	ldr	r2, [pc, #336]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009882:	f023 0304 	bic.w	r3, r3, #4
 8009886:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d015      	beq.n	80098bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009890:	f7f9 fda8 	bl	80033e4 <HAL_GetTick>
 8009894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009896:	e00a      	b.n	80098ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009898:	f7f9 fda4 	bl	80033e4 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e0cb      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098ae:	4b49      	ldr	r3, [pc, #292]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80098b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0ee      	beq.n	8009898 <HAL_RCC_OscConfig+0x334>
 80098ba:	e014      	b.n	80098e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098bc:	f7f9 fd92 	bl	80033e4 <HAL_GetTick>
 80098c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098c2:	e00a      	b.n	80098da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098c4:	f7f9 fd8e 	bl	80033e4 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d901      	bls.n	80098da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e0b5      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098da:	4b3e      	ldr	r3, [pc, #248]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80098dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1ee      	bne.n	80098c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d105      	bne.n	80098f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098ec:	4b39      	ldr	r3, [pc, #228]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80098ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f0:	4a38      	ldr	r2, [pc, #224]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80098f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 80a1 	beq.w	8009a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009902:	4b34      	ldr	r3, [pc, #208]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f003 030c 	and.w	r3, r3, #12
 800990a:	2b08      	cmp	r3, #8
 800990c:	d05c      	beq.n	80099c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	2b02      	cmp	r3, #2
 8009914:	d141      	bne.n	800999a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009916:	4b31      	ldr	r3, [pc, #196]	@ (80099dc <HAL_RCC_OscConfig+0x478>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800991c:	f7f9 fd62 	bl	80033e4 <HAL_GetTick>
 8009920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009922:	e008      	b.n	8009936 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009924:	f7f9 fd5e 	bl	80033e4 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b02      	cmp	r3, #2
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e087      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009936:	4b27      	ldr	r3, [pc, #156]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f0      	bne.n	8009924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69da      	ldr	r2, [r3, #28]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009950:	019b      	lsls	r3, r3, #6
 8009952:	431a      	orrs	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009958:	085b      	lsrs	r3, r3, #1
 800995a:	3b01      	subs	r3, #1
 800995c:	041b      	lsls	r3, r3, #16
 800995e:	431a      	orrs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009964:	061b      	lsls	r3, r3, #24
 8009966:	491b      	ldr	r1, [pc, #108]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 8009968:	4313      	orrs	r3, r2
 800996a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800996c:	4b1b      	ldr	r3, [pc, #108]	@ (80099dc <HAL_RCC_OscConfig+0x478>)
 800996e:	2201      	movs	r2, #1
 8009970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009972:	f7f9 fd37 	bl	80033e4 <HAL_GetTick>
 8009976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009978:	e008      	b.n	800998c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800997a:	f7f9 fd33 	bl	80033e4 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	2b02      	cmp	r3, #2
 8009986:	d901      	bls.n	800998c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e05c      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800998c:	4b11      	ldr	r3, [pc, #68]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d0f0      	beq.n	800997a <HAL_RCC_OscConfig+0x416>
 8009998:	e054      	b.n	8009a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800999a:	4b10      	ldr	r3, [pc, #64]	@ (80099dc <HAL_RCC_OscConfig+0x478>)
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099a0:	f7f9 fd20 	bl	80033e4 <HAL_GetTick>
 80099a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a8:	f7f9 fd1c 	bl	80033e4 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e045      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099ba:	4b06      	ldr	r3, [pc, #24]	@ (80099d4 <HAL_RCC_OscConfig+0x470>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1f0      	bne.n	80099a8 <HAL_RCC_OscConfig+0x444>
 80099c6:	e03d      	b.n	8009a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d107      	bne.n	80099e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e038      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
 80099d4:	40023800 	.word	0x40023800
 80099d8:	40007000 	.word	0x40007000
 80099dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80099e0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a50 <HAL_RCC_OscConfig+0x4ec>)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d028      	beq.n	8009a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d121      	bne.n	8009a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d11a      	bne.n	8009a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009a10:	4013      	ands	r3, r2
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d111      	bne.n	8009a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a26:	085b      	lsrs	r3, r3, #1
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d107      	bne.n	8009a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d001      	beq.n	8009a44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e000      	b.n	8009a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	40023800 	.word	0x40023800

08009a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e0cc      	b.n	8009c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a68:	4b68      	ldr	r3, [pc, #416]	@ (8009c0c <HAL_RCC_ClockConfig+0x1b8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d90c      	bls.n	8009a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a76:	4b65      	ldr	r3, [pc, #404]	@ (8009c0c <HAL_RCC_ClockConfig+0x1b8>)
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a7e:	4b63      	ldr	r3, [pc, #396]	@ (8009c0c <HAL_RCC_ClockConfig+0x1b8>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d001      	beq.n	8009a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0b8      	b.n	8009c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d020      	beq.n	8009ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d005      	beq.n	8009ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009aa8:	4b59      	ldr	r3, [pc, #356]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	4a58      	ldr	r2, [pc, #352]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0308 	and.w	r3, r3, #8
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ac0:	4b53      	ldr	r3, [pc, #332]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	4a52      	ldr	r2, [pc, #328]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009acc:	4b50      	ldr	r3, [pc, #320]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	494d      	ldr	r1, [pc, #308]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d044      	beq.n	8009b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d107      	bne.n	8009b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009af2:	4b47      	ldr	r3, [pc, #284]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d119      	bne.n	8009b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e07f      	b.n	8009c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d003      	beq.n	8009b12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d107      	bne.n	8009b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b12:	4b3f      	ldr	r3, [pc, #252]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d109      	bne.n	8009b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e06f      	b.n	8009c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b22:	4b3b      	ldr	r3, [pc, #236]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e067      	b.n	8009c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b32:	4b37      	ldr	r3, [pc, #220]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f023 0203 	bic.w	r2, r3, #3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	4934      	ldr	r1, [pc, #208]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b44:	f7f9 fc4e 	bl	80033e4 <HAL_GetTick>
 8009b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b4a:	e00a      	b.n	8009b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b4c:	f7f9 fc4a 	bl	80033e4 <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d901      	bls.n	8009b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e04f      	b.n	8009c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b62:	4b2b      	ldr	r3, [pc, #172]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f003 020c 	and.w	r2, r3, #12
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d1eb      	bne.n	8009b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b74:	4b25      	ldr	r3, [pc, #148]	@ (8009c0c <HAL_RCC_ClockConfig+0x1b8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d20c      	bcs.n	8009b9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b82:	4b22      	ldr	r3, [pc, #136]	@ (8009c0c <HAL_RCC_ClockConfig+0x1b8>)
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b8a:	4b20      	ldr	r3, [pc, #128]	@ (8009c0c <HAL_RCC_ClockConfig+0x1b8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d001      	beq.n	8009b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e032      	b.n	8009c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0304 	and.w	r3, r3, #4
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d008      	beq.n	8009bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ba8:	4b19      	ldr	r3, [pc, #100]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	4916      	ldr	r1, [pc, #88]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0308 	and.w	r3, r3, #8
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bc6:	4b12      	ldr	r3, [pc, #72]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	490e      	ldr	r1, [pc, #56]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009bda:	f000 f821 	bl	8009c20 <HAL_RCC_GetSysClockFreq>
 8009bde:	4602      	mov	r2, r0
 8009be0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c10 <HAL_RCC_ClockConfig+0x1bc>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	091b      	lsrs	r3, r3, #4
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	490a      	ldr	r1, [pc, #40]	@ (8009c14 <HAL_RCC_ClockConfig+0x1c0>)
 8009bec:	5ccb      	ldrb	r3, [r1, r3]
 8009bee:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf2:	4a09      	ldr	r2, [pc, #36]	@ (8009c18 <HAL_RCC_ClockConfig+0x1c4>)
 8009bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009bf6:	4b09      	ldr	r3, [pc, #36]	@ (8009c1c <HAL_RCC_ClockConfig+0x1c8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7f9 fbae 	bl	800335c <HAL_InitTick>

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40023c00 	.word	0x40023c00
 8009c10:	40023800 	.word	0x40023800
 8009c14:	0801458c 	.word	0x0801458c
 8009c18:	2000000c 	.word	0x2000000c
 8009c1c:	20000010 	.word	0x20000010

08009c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c24:	b090      	sub	sp, #64	@ 0x40
 8009c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c38:	4b59      	ldr	r3, [pc, #356]	@ (8009da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f003 030c 	and.w	r3, r3, #12
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d00d      	beq.n	8009c60 <HAL_RCC_GetSysClockFreq+0x40>
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	f200 80a1 	bhi.w	8009d8c <HAL_RCC_GetSysClockFreq+0x16c>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <HAL_RCC_GetSysClockFreq+0x34>
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d003      	beq.n	8009c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8009c52:	e09b      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c54:	4b53      	ldr	r3, [pc, #332]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009c58:	e09b      	b.n	8009d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c5a:	4b53      	ldr	r3, [pc, #332]	@ (8009da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009c5e:	e098      	b.n	8009d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c60:	4b4f      	ldr	r3, [pc, #316]	@ (8009da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c6a:	4b4d      	ldr	r3, [pc, #308]	@ (8009da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d028      	beq.n	8009cc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c76:	4b4a      	ldr	r3, [pc, #296]	@ (8009da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	099b      	lsrs	r3, r3, #6
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	623b      	str	r3, [r7, #32]
 8009c80:	627a      	str	r2, [r7, #36]	@ 0x24
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4b47      	ldr	r3, [pc, #284]	@ (8009da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009c8c:	fb03 f201 	mul.w	r2, r3, r1
 8009c90:	2300      	movs	r3, #0
 8009c92:	fb00 f303 	mul.w	r3, r0, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	4a43      	ldr	r2, [pc, #268]	@ (8009da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009c9a:	fba0 1202 	umull	r1, r2, r0, r2
 8009c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ca6:	4413      	add	r3, r2
 8009ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cac:	2200      	movs	r2, #0
 8009cae:	61bb      	str	r3, [r7, #24]
 8009cb0:	61fa      	str	r2, [r7, #28]
 8009cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009cba:	f7f6 ffed 	bl	8000c98 <__aeabi_uldivmod>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cc6:	e053      	b.n	8009d70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cc8:	4b35      	ldr	r3, [pc, #212]	@ (8009da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	099b      	lsrs	r3, r3, #6
 8009cce:	2200      	movs	r2, #0
 8009cd0:	613b      	str	r3, [r7, #16]
 8009cd2:	617a      	str	r2, [r7, #20]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009cda:	f04f 0b00 	mov.w	fp, #0
 8009cde:	4652      	mov	r2, sl
 8009ce0:	465b      	mov	r3, fp
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f04f 0100 	mov.w	r1, #0
 8009cea:	0159      	lsls	r1, r3, #5
 8009cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009cf0:	0150      	lsls	r0, r2, #5
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	ebb2 080a 	subs.w	r8, r2, sl
 8009cfa:	eb63 090b 	sbc.w	r9, r3, fp
 8009cfe:	f04f 0200 	mov.w	r2, #0
 8009d02:	f04f 0300 	mov.w	r3, #0
 8009d06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009d0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009d0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009d12:	ebb2 0408 	subs.w	r4, r2, r8
 8009d16:	eb63 0509 	sbc.w	r5, r3, r9
 8009d1a:	f04f 0200 	mov.w	r2, #0
 8009d1e:	f04f 0300 	mov.w	r3, #0
 8009d22:	00eb      	lsls	r3, r5, #3
 8009d24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d28:	00e2      	lsls	r2, r4, #3
 8009d2a:	4614      	mov	r4, r2
 8009d2c:	461d      	mov	r5, r3
 8009d2e:	eb14 030a 	adds.w	r3, r4, sl
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	eb45 030b 	adc.w	r3, r5, fp
 8009d38:	607b      	str	r3, [r7, #4]
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d46:	4629      	mov	r1, r5
 8009d48:	028b      	lsls	r3, r1, #10
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d50:	4621      	mov	r1, r4
 8009d52:	028a      	lsls	r2, r1, #10
 8009d54:	4610      	mov	r0, r2
 8009d56:	4619      	mov	r1, r3
 8009d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	60bb      	str	r3, [r7, #8]
 8009d5e:	60fa      	str	r2, [r7, #12]
 8009d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d64:	f7f6 ff98 	bl	8000c98 <__aeabi_uldivmod>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009d70:	4b0b      	ldr	r3, [pc, #44]	@ (8009da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	0c1b      	lsrs	r3, r3, #16
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009d80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009d8a:	e002      	b.n	8009d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3740      	adds	r7, #64	@ 0x40
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d9e:	bf00      	nop
 8009da0:	40023800 	.word	0x40023800
 8009da4:	00f42400 	.word	0x00f42400
 8009da8:	017d7840 	.word	0x017d7840

08009dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009db0:	4b03      	ldr	r3, [pc, #12]	@ (8009dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009db2:	681b      	ldr	r3, [r3, #0]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	2000000c 	.word	0x2000000c

08009dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009dc8:	f7ff fff0 	bl	8009dac <HAL_RCC_GetHCLKFreq>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	4b05      	ldr	r3, [pc, #20]	@ (8009de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	0a9b      	lsrs	r3, r3, #10
 8009dd4:	f003 0307 	and.w	r3, r3, #7
 8009dd8:	4903      	ldr	r1, [pc, #12]	@ (8009de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009dda:	5ccb      	ldrb	r3, [r1, r3]
 8009ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	40023800 	.word	0x40023800
 8009de8:	0801459c 	.word	0x0801459c

08009dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e041      	b.n	8009e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7f9 f826 	bl	8002e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f000 fc3c 	bl	800a6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d001      	beq.n	8009ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e044      	b.n	8009f2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0201 	orr.w	r2, r2, #1
 8009eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8009f3c <HAL_TIM_Base_Start_IT+0xb0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d018      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ece:	d013      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8009f40 <HAL_TIM_Base_Start_IT+0xb4>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d00e      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a19      	ldr	r2, [pc, #100]	@ (8009f44 <HAL_TIM_Base_Start_IT+0xb8>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d009      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a17      	ldr	r2, [pc, #92]	@ (8009f48 <HAL_TIM_Base_Start_IT+0xbc>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d004      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a16      	ldr	r2, [pc, #88]	@ (8009f4c <HAL_TIM_Base_Start_IT+0xc0>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d111      	bne.n	8009f1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b06      	cmp	r3, #6
 8009f08:	d010      	beq.n	8009f2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f042 0201 	orr.w	r2, r2, #1
 8009f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f1a:	e007      	b.n	8009f2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40000400 	.word	0x40000400
 8009f44:	40000800 	.word	0x40000800
 8009f48:	40000c00 	.word	0x40000c00
 8009f4c:	40014000 	.word	0x40014000

08009f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e041      	b.n	8009fe6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f839 	bl	8009fee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f000 fb8a 	bl	800a6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ff6:	bf00      	nop
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
	...

0800a004 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d109      	bne.n	800a028 <HAL_TIM_PWM_Start+0x24>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	bf14      	ite	ne
 800a020:	2301      	movne	r3, #1
 800a022:	2300      	moveq	r3, #0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	e022      	b.n	800a06e <HAL_TIM_PWM_Start+0x6a>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d109      	bne.n	800a042 <HAL_TIM_PWM_Start+0x3e>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b01      	cmp	r3, #1
 800a038:	bf14      	ite	ne
 800a03a:	2301      	movne	r3, #1
 800a03c:	2300      	moveq	r3, #0
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	e015      	b.n	800a06e <HAL_TIM_PWM_Start+0x6a>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b08      	cmp	r3, #8
 800a046:	d109      	bne.n	800a05c <HAL_TIM_PWM_Start+0x58>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b01      	cmp	r3, #1
 800a052:	bf14      	ite	ne
 800a054:	2301      	movne	r3, #1
 800a056:	2300      	moveq	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	e008      	b.n	800a06e <HAL_TIM_PWM_Start+0x6a>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b01      	cmp	r3, #1
 800a066:	bf14      	ite	ne
 800a068:	2301      	movne	r3, #1
 800a06a:	2300      	moveq	r3, #0
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e068      	b.n	800a148 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d104      	bne.n	800a086 <HAL_TIM_PWM_Start+0x82>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a084:	e013      	b.n	800a0ae <HAL_TIM_PWM_Start+0xaa>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d104      	bne.n	800a096 <HAL_TIM_PWM_Start+0x92>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a094:	e00b      	b.n	800a0ae <HAL_TIM_PWM_Start+0xaa>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d104      	bne.n	800a0a6 <HAL_TIM_PWM_Start+0xa2>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0a4:	e003      	b.n	800a0ae <HAL_TIM_PWM_Start+0xaa>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fda2 	bl	800ac00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a23      	ldr	r2, [pc, #140]	@ (800a150 <HAL_TIM_PWM_Start+0x14c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d107      	bne.n	800a0d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a1d      	ldr	r2, [pc, #116]	@ (800a150 <HAL_TIM_PWM_Start+0x14c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d018      	beq.n	800a112 <HAL_TIM_PWM_Start+0x10e>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0e8:	d013      	beq.n	800a112 <HAL_TIM_PWM_Start+0x10e>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a19      	ldr	r2, [pc, #100]	@ (800a154 <HAL_TIM_PWM_Start+0x150>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00e      	beq.n	800a112 <HAL_TIM_PWM_Start+0x10e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a17      	ldr	r2, [pc, #92]	@ (800a158 <HAL_TIM_PWM_Start+0x154>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d009      	beq.n	800a112 <HAL_TIM_PWM_Start+0x10e>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a16      	ldr	r2, [pc, #88]	@ (800a15c <HAL_TIM_PWM_Start+0x158>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d004      	beq.n	800a112 <HAL_TIM_PWM_Start+0x10e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a14      	ldr	r2, [pc, #80]	@ (800a160 <HAL_TIM_PWM_Start+0x15c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d111      	bne.n	800a136 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b06      	cmp	r3, #6
 800a122:	d010      	beq.n	800a146 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0201 	orr.w	r2, r2, #1
 800a132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a134:	e007      	b.n	800a146 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0201 	orr.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	40010000 	.word	0x40010000
 800a154:	40000400 	.word	0x40000400
 800a158:	40000800 	.word	0x40000800
 800a15c:	40000c00 	.word	0x40000c00
 800a160:	40014000 	.word	0x40014000

0800a164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d020      	beq.n	800a1c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d01b      	beq.n	800a1c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f06f 0202 	mvn.w	r2, #2
 800a198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fa5b 	bl	800a66a <HAL_TIM_IC_CaptureCallback>
 800a1b4:	e005      	b.n	800a1c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fa4d 	bl	800a656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fa5e 	bl	800a67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f003 0304 	and.w	r3, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d020      	beq.n	800a214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d01b      	beq.n	800a214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f06f 0204 	mvn.w	r2, #4
 800a1e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fa35 	bl	800a66a <HAL_TIM_IC_CaptureCallback>
 800a200:	e005      	b.n	800a20e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fa27 	bl	800a656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fa38 	bl	800a67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	f003 0308 	and.w	r3, r3, #8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d020      	beq.n	800a260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f003 0308 	and.w	r3, r3, #8
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01b      	beq.n	800a260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f06f 0208 	mvn.w	r2, #8
 800a230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2204      	movs	r2, #4
 800a236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	f003 0303 	and.w	r3, r3, #3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa0f 	bl	800a66a <HAL_TIM_IC_CaptureCallback>
 800a24c:	e005      	b.n	800a25a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa01 	bl	800a656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fa12 	bl	800a67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f003 0310 	and.w	r3, r3, #16
 800a266:	2b00      	cmp	r3, #0
 800a268:	d020      	beq.n	800a2ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	2b00      	cmp	r3, #0
 800a272:	d01b      	beq.n	800a2ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f06f 0210 	mvn.w	r2, #16
 800a27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2208      	movs	r2, #8
 800a282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f9e9 	bl	800a66a <HAL_TIM_IC_CaptureCallback>
 800a298:	e005      	b.n	800a2a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f9db 	bl	800a656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f9ec 	bl	800a67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00c      	beq.n	800a2d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d007      	beq.n	800a2d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0201 	mvn.w	r2, #1
 800a2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7f7 f974 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00c      	beq.n	800a2f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d007      	beq.n	800a2f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fd24 	bl	800ad3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f9bd 	bl	800a692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00c      	beq.n	800a33c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f003 0320 	and.w	r3, r3, #32
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d007      	beq.n	800a33c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f06f 0220 	mvn.w	r2, #32
 800a334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fcf6 	bl	800ad28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d101      	bne.n	800a362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a35e:	2302      	movs	r3, #2
 800a360:	e0ae      	b.n	800a4c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b0c      	cmp	r3, #12
 800a36e:	f200 809f 	bhi.w	800a4b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a372:	a201      	add	r2, pc, #4	@ (adr r2, 800a378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a378:	0800a3ad 	.word	0x0800a3ad
 800a37c:	0800a4b1 	.word	0x0800a4b1
 800a380:	0800a4b1 	.word	0x0800a4b1
 800a384:	0800a4b1 	.word	0x0800a4b1
 800a388:	0800a3ed 	.word	0x0800a3ed
 800a38c:	0800a4b1 	.word	0x0800a4b1
 800a390:	0800a4b1 	.word	0x0800a4b1
 800a394:	0800a4b1 	.word	0x0800a4b1
 800a398:	0800a42f 	.word	0x0800a42f
 800a39c:	0800a4b1 	.word	0x0800a4b1
 800a3a0:	0800a4b1 	.word	0x0800a4b1
 800a3a4:	0800a4b1 	.word	0x0800a4b1
 800a3a8:	0800a46f 	.word	0x0800a46f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68b9      	ldr	r1, [r7, #8]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f9fe 	bl	800a7b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699a      	ldr	r2, [r3, #24]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0208 	orr.w	r2, r2, #8
 800a3c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f022 0204 	bic.w	r2, r2, #4
 800a3d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6999      	ldr	r1, [r3, #24]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	691a      	ldr	r2, [r3, #16]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	619a      	str	r2, [r3, #24]
      break;
 800a3ea:	e064      	b.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fa44 	bl	800a880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	699a      	ldr	r2, [r3, #24]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6999      	ldr	r1, [r3, #24]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	021a      	lsls	r2, r3, #8
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	619a      	str	r2, [r3, #24]
      break;
 800a42c:	e043      	b.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68b9      	ldr	r1, [r7, #8]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fa8f 	bl	800a958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69da      	ldr	r2, [r3, #28]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f042 0208 	orr.w	r2, r2, #8
 800a448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	69da      	ldr	r2, [r3, #28]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f022 0204 	bic.w	r2, r2, #4
 800a458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69d9      	ldr	r1, [r3, #28]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	691a      	ldr	r2, [r3, #16]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	61da      	str	r2, [r3, #28]
      break;
 800a46c:	e023      	b.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fad9 	bl	800aa2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69da      	ldr	r2, [r3, #28]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69da      	ldr	r2, [r3, #28]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69d9      	ldr	r1, [r3, #28]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	021a      	lsls	r2, r3, #8
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	61da      	str	r2, [r3, #28]
      break;
 800a4ae:	e002      	b.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d101      	bne.n	800a4e4 <HAL_TIM_ConfigClockSource+0x1c>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e0b4      	b.n	800a64e <HAL_TIM_ConfigClockSource+0x186>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a50a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a51c:	d03e      	beq.n	800a59c <HAL_TIM_ConfigClockSource+0xd4>
 800a51e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a522:	f200 8087 	bhi.w	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a52a:	f000 8086 	beq.w	800a63a <HAL_TIM_ConfigClockSource+0x172>
 800a52e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a532:	d87f      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a534:	2b70      	cmp	r3, #112	@ 0x70
 800a536:	d01a      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0xa6>
 800a538:	2b70      	cmp	r3, #112	@ 0x70
 800a53a:	d87b      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a53c:	2b60      	cmp	r3, #96	@ 0x60
 800a53e:	d050      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x11a>
 800a540:	2b60      	cmp	r3, #96	@ 0x60
 800a542:	d877      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a544:	2b50      	cmp	r3, #80	@ 0x50
 800a546:	d03c      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0xfa>
 800a548:	2b50      	cmp	r3, #80	@ 0x50
 800a54a:	d873      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a54c:	2b40      	cmp	r3, #64	@ 0x40
 800a54e:	d058      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x13a>
 800a550:	2b40      	cmp	r3, #64	@ 0x40
 800a552:	d86f      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a554:	2b30      	cmp	r3, #48	@ 0x30
 800a556:	d064      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a558:	2b30      	cmp	r3, #48	@ 0x30
 800a55a:	d86b      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	d060      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a560:	2b20      	cmp	r3, #32
 800a562:	d867      	bhi.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d05c      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a568:	2b10      	cmp	r3, #16
 800a56a:	d05a      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0x15a>
 800a56c:	e062      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a57e:	f000 fb1f 	bl	800abc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	609a      	str	r2, [r3, #8]
      break;
 800a59a:	e04f      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5ac:	f000 fb08 	bl	800abc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5be:	609a      	str	r2, [r3, #8]
      break;
 800a5c0:	e03c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f000 fa7c 	bl	800aacc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2150      	movs	r1, #80	@ 0x50
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fad5 	bl	800ab8a <TIM_ITRx_SetConfig>
      break;
 800a5e0:	e02c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f000 fa9b 	bl	800ab2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2160      	movs	r1, #96	@ 0x60
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fac5 	bl	800ab8a <TIM_ITRx_SetConfig>
      break;
 800a600:	e01c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a60e:	461a      	mov	r2, r3
 800a610:	f000 fa5c 	bl	800aacc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2140      	movs	r1, #64	@ 0x40
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fab5 	bl	800ab8a <TIM_ITRx_SetConfig>
      break;
 800a620:	e00c      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4619      	mov	r1, r3
 800a62c:	4610      	mov	r0, r2
 800a62e:	f000 faac 	bl	800ab8a <TIM_ITRx_SetConfig>
      break;
 800a632:	e003      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	73fb      	strb	r3, [r7, #15]
      break;
 800a638:	e000      	b.n	800a63c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a63a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b083      	sub	sp, #12
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a69a:	bf00      	nop
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
	...

0800a6a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a37      	ldr	r2, [pc, #220]	@ (800a798 <TIM_Base_SetConfig+0xf0>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00f      	beq.n	800a6e0 <TIM_Base_SetConfig+0x38>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6c6:	d00b      	beq.n	800a6e0 <TIM_Base_SetConfig+0x38>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a34      	ldr	r2, [pc, #208]	@ (800a79c <TIM_Base_SetConfig+0xf4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d007      	beq.n	800a6e0 <TIM_Base_SetConfig+0x38>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a33      	ldr	r2, [pc, #204]	@ (800a7a0 <TIM_Base_SetConfig+0xf8>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d003      	beq.n	800a6e0 <TIM_Base_SetConfig+0x38>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a32      	ldr	r2, [pc, #200]	@ (800a7a4 <TIM_Base_SetConfig+0xfc>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d108      	bne.n	800a6f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a28      	ldr	r2, [pc, #160]	@ (800a798 <TIM_Base_SetConfig+0xf0>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d01b      	beq.n	800a732 <TIM_Base_SetConfig+0x8a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a700:	d017      	beq.n	800a732 <TIM_Base_SetConfig+0x8a>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a25      	ldr	r2, [pc, #148]	@ (800a79c <TIM_Base_SetConfig+0xf4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d013      	beq.n	800a732 <TIM_Base_SetConfig+0x8a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a24      	ldr	r2, [pc, #144]	@ (800a7a0 <TIM_Base_SetConfig+0xf8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d00f      	beq.n	800a732 <TIM_Base_SetConfig+0x8a>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a23      	ldr	r2, [pc, #140]	@ (800a7a4 <TIM_Base_SetConfig+0xfc>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00b      	beq.n	800a732 <TIM_Base_SetConfig+0x8a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a22      	ldr	r2, [pc, #136]	@ (800a7a8 <TIM_Base_SetConfig+0x100>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d007      	beq.n	800a732 <TIM_Base_SetConfig+0x8a>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a21      	ldr	r2, [pc, #132]	@ (800a7ac <TIM_Base_SetConfig+0x104>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d003      	beq.n	800a732 <TIM_Base_SetConfig+0x8a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a20      	ldr	r2, [pc, #128]	@ (800a7b0 <TIM_Base_SetConfig+0x108>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d108      	bne.n	800a744 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	689a      	ldr	r2, [r3, #8]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a0c      	ldr	r2, [pc, #48]	@ (800a798 <TIM_Base_SetConfig+0xf0>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d103      	bne.n	800a772 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	691a      	ldr	r2, [r3, #16]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f043 0204 	orr.w	r2, r3, #4
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	601a      	str	r2, [r3, #0]
}
 800a78a:	bf00      	nop
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	40010000 	.word	0x40010000
 800a79c:	40000400 	.word	0x40000400
 800a7a0:	40000800 	.word	0x40000800
 800a7a4:	40000c00 	.word	0x40000c00
 800a7a8:	40014000 	.word	0x40014000
 800a7ac:	40014400 	.word	0x40014400
 800a7b0:	40014800 	.word	0x40014800

0800a7b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	f023 0201 	bic.w	r2, r3, #1
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 0303 	bic.w	r3, r3, #3
 800a7ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f023 0302 	bic.w	r3, r3, #2
 800a7fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	4313      	orrs	r3, r2
 800a806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a1c      	ldr	r2, [pc, #112]	@ (800a87c <TIM_OC1_SetConfig+0xc8>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d10c      	bne.n	800a82a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f023 0308 	bic.w	r3, r3, #8
 800a816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	4313      	orrs	r3, r2
 800a820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f023 0304 	bic.w	r3, r3, #4
 800a828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a13      	ldr	r2, [pc, #76]	@ (800a87c <TIM_OC1_SetConfig+0xc8>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d111      	bne.n	800a856 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	4313      	orrs	r3, r2
 800a84a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	621a      	str	r2, [r3, #32]
}
 800a870:	bf00      	nop
 800a872:	371c      	adds	r7, #28
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	40010000 	.word	0x40010000

0800a880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	f023 0210 	bic.w	r2, r3, #16
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	021b      	lsls	r3, r3, #8
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f023 0320 	bic.w	r3, r3, #32
 800a8ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a1e      	ldr	r2, [pc, #120]	@ (800a954 <TIM_OC2_SetConfig+0xd4>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d10d      	bne.n	800a8fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a15      	ldr	r2, [pc, #84]	@ (800a954 <TIM_OC2_SetConfig+0xd4>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d113      	bne.n	800a92c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a90a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	4313      	orrs	r3, r2
 800a92a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	621a      	str	r2, [r3, #32]
}
 800a946:	bf00      	nop
 800a948:	371c      	adds	r7, #28
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	40010000 	.word	0x40010000

0800a958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f023 0303 	bic.w	r3, r3, #3
 800a98e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	021b      	lsls	r3, r3, #8
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa28 <TIM_OC3_SetConfig+0xd0>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d10d      	bne.n	800a9d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	021b      	lsls	r3, r3, #8
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a14      	ldr	r2, [pc, #80]	@ (800aa28 <TIM_OC3_SetConfig+0xd0>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d113      	bne.n	800aa02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	621a      	str	r2, [r3, #32]
}
 800aa1c:	bf00      	nop
 800aa1e:	371c      	adds	r7, #28
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	40010000 	.word	0x40010000

0800aa2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	031b      	lsls	r3, r3, #12
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a10      	ldr	r2, [pc, #64]	@ (800aac8 <TIM_OC4_SetConfig+0x9c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d109      	bne.n	800aaa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	019b      	lsls	r3, r3, #6
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	621a      	str	r2, [r3, #32]
}
 800aaba:	bf00      	nop
 800aabc:	371c      	adds	r7, #28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	40010000 	.word	0x40010000

0800aacc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	f023 0201 	bic.w	r2, r3, #1
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aaf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f023 030a 	bic.w	r3, r3, #10
 800ab08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	621a      	str	r2, [r3, #32]
}
 800ab1e:	bf00      	nop
 800ab20:	371c      	adds	r7, #28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b087      	sub	sp, #28
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	f023 0210 	bic.w	r2, r3, #16
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	031b      	lsls	r3, r3, #12
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ab66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	011b      	lsls	r3, r3, #4
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	621a      	str	r2, [r3, #32]
}
 800ab7e:	bf00      	nop
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	f043 0307 	orr.w	r3, r3, #7
 800abac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	609a      	str	r2, [r3, #8]
}
 800abb4:	bf00      	nop
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b087      	sub	sp, #28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800abda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	021a      	lsls	r2, r3, #8
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	431a      	orrs	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	609a      	str	r2, [r3, #8]
}
 800abf4:	bf00      	nop
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f003 031f 	and.w	r3, r3, #31
 800ac12:	2201      	movs	r2, #1
 800ac14:	fa02 f303 	lsl.w	r3, r2, r3
 800ac18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6a1a      	ldr	r2, [r3, #32]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	43db      	mvns	r3, r3
 800ac22:	401a      	ands	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6a1a      	ldr	r2, [r3, #32]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f003 031f 	and.w	r3, r3, #31
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	fa01 f303 	lsl.w	r3, r1, r3
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	621a      	str	r2, [r3, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	371c      	adds	r7, #28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
	...

0800ac4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d101      	bne.n	800ac64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac60:	2302      	movs	r3, #2
 800ac62:	e050      	b.n	800ad06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a1c      	ldr	r2, [pc, #112]	@ (800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d018      	beq.n	800acda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb0:	d013      	beq.n	800acda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a18      	ldr	r2, [pc, #96]	@ (800ad18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d00e      	beq.n	800acda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a16      	ldr	r2, [pc, #88]	@ (800ad1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d009      	beq.n	800acda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a15      	ldr	r2, [pc, #84]	@ (800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d004      	beq.n	800acda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a13      	ldr	r2, [pc, #76]	@ (800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d10c      	bne.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ace0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	4313      	orrs	r3, r2
 800acea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	40010000 	.word	0x40010000
 800ad18:	40000400 	.word	0x40000400
 800ad1c:	40000800 	.word	0x40000800
 800ad20:	40000c00 	.word	0x40000c00
 800ad24:	40014000 	.word	0x40014000

0800ad28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad50:	b084      	sub	sp, #16
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	f107 001c 	add.w	r0, r7, #28
 800ad5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d123      	bne.n	800adb2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ad7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ad92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d105      	bne.n	800ada6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 fae8 	bl	800c37c <USB_CoreReset>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]
 800adb0:	e01b      	b.n	800adea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 fadc 	bl	800c37c <USB_CoreReset>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800adc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d106      	bne.n	800adde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	639a      	str	r2, [r3, #56]	@ 0x38
 800addc:	e005      	b.n	800adea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800adea:	7fbb      	ldrb	r3, [r7, #30]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d10b      	bne.n	800ae08 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f043 0206 	orr.w	r2, r3, #6
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f043 0220 	orr.w	r2, r3, #32
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae14:	b004      	add	sp, #16
 800ae16:	4770      	bx	lr

0800ae18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	4613      	mov	r3, r2
 800ae24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d165      	bne.n	800aef8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4a41      	ldr	r2, [pc, #260]	@ (800af34 <USB_SetTurnaroundTime+0x11c>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d906      	bls.n	800ae42 <USB_SetTurnaroundTime+0x2a>
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	4a40      	ldr	r2, [pc, #256]	@ (800af38 <USB_SetTurnaroundTime+0x120>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d202      	bcs.n	800ae42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae3c:	230f      	movs	r3, #15
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	e062      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4a3c      	ldr	r2, [pc, #240]	@ (800af38 <USB_SetTurnaroundTime+0x120>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d306      	bcc.n	800ae58 <USB_SetTurnaroundTime+0x40>
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	4a3b      	ldr	r2, [pc, #236]	@ (800af3c <USB_SetTurnaroundTime+0x124>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d202      	bcs.n	800ae58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ae52:	230e      	movs	r3, #14
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	e057      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4a38      	ldr	r2, [pc, #224]	@ (800af3c <USB_SetTurnaroundTime+0x124>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d306      	bcc.n	800ae6e <USB_SetTurnaroundTime+0x56>
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	4a37      	ldr	r2, [pc, #220]	@ (800af40 <USB_SetTurnaroundTime+0x128>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d202      	bcs.n	800ae6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ae68:	230d      	movs	r3, #13
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	e04c      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	4a33      	ldr	r2, [pc, #204]	@ (800af40 <USB_SetTurnaroundTime+0x128>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d306      	bcc.n	800ae84 <USB_SetTurnaroundTime+0x6c>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	4a32      	ldr	r2, [pc, #200]	@ (800af44 <USB_SetTurnaroundTime+0x12c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d802      	bhi.n	800ae84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ae7e:	230c      	movs	r3, #12
 800ae80:	617b      	str	r3, [r7, #20]
 800ae82:	e041      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4a2f      	ldr	r2, [pc, #188]	@ (800af44 <USB_SetTurnaroundTime+0x12c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d906      	bls.n	800ae9a <USB_SetTurnaroundTime+0x82>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	4a2e      	ldr	r2, [pc, #184]	@ (800af48 <USB_SetTurnaroundTime+0x130>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d802      	bhi.n	800ae9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ae94:	230b      	movs	r3, #11
 800ae96:	617b      	str	r3, [r7, #20]
 800ae98:	e036      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	4a2a      	ldr	r2, [pc, #168]	@ (800af48 <USB_SetTurnaroundTime+0x130>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d906      	bls.n	800aeb0 <USB_SetTurnaroundTime+0x98>
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	4a29      	ldr	r2, [pc, #164]	@ (800af4c <USB_SetTurnaroundTime+0x134>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d802      	bhi.n	800aeb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aeaa:	230a      	movs	r3, #10
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e02b      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4a26      	ldr	r2, [pc, #152]	@ (800af4c <USB_SetTurnaroundTime+0x134>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d906      	bls.n	800aec6 <USB_SetTurnaroundTime+0xae>
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	4a25      	ldr	r2, [pc, #148]	@ (800af50 <USB_SetTurnaroundTime+0x138>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d202      	bcs.n	800aec6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aec0:	2309      	movs	r3, #9
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	e020      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	4a21      	ldr	r2, [pc, #132]	@ (800af50 <USB_SetTurnaroundTime+0x138>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d306      	bcc.n	800aedc <USB_SetTurnaroundTime+0xc4>
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	4a20      	ldr	r2, [pc, #128]	@ (800af54 <USB_SetTurnaroundTime+0x13c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d802      	bhi.n	800aedc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aed6:	2308      	movs	r3, #8
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	e015      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	4a1d      	ldr	r2, [pc, #116]	@ (800af54 <USB_SetTurnaroundTime+0x13c>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d906      	bls.n	800aef2 <USB_SetTurnaroundTime+0xda>
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	4a1c      	ldr	r2, [pc, #112]	@ (800af58 <USB_SetTurnaroundTime+0x140>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d202      	bcs.n	800aef2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aeec:	2307      	movs	r3, #7
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	e00a      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aef2:	2306      	movs	r3, #6
 800aef4:	617b      	str	r3, [r7, #20]
 800aef6:	e007      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aef8:	79fb      	ldrb	r3, [r7, #7]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d102      	bne.n	800af04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aefe:	2309      	movs	r3, #9
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e001      	b.n	800af08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800af04:	2309      	movs	r3, #9
 800af06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	68da      	ldr	r2, [r3, #12]
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	029b      	lsls	r3, r3, #10
 800af1c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800af20:	431a      	orrs	r2, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	371c      	adds	r7, #28
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	00d8acbf 	.word	0x00d8acbf
 800af38:	00e4e1c0 	.word	0x00e4e1c0
 800af3c:	00f42400 	.word	0x00f42400
 800af40:	01067380 	.word	0x01067380
 800af44:	011a499f 	.word	0x011a499f
 800af48:	01312cff 	.word	0x01312cff
 800af4c:	014ca43f 	.word	0x014ca43f
 800af50:	016e3600 	.word	0x016e3600
 800af54:	01a6ab1f 	.word	0x01a6ab1f
 800af58:	01e84800 	.word	0x01e84800

0800af5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f043 0201 	orr.w	r2, r3, #1
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f023 0201 	bic.w	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d115      	bne.n	800afee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800afce:	200a      	movs	r0, #10
 800afd0:	f7f8 fa14 	bl	80033fc <HAL_Delay>
      ms += 10U;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	330a      	adds	r3, #10
 800afd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 f93f 	bl	800c25e <USB_GetMode>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d01e      	beq.n	800b024 <USB_SetCurrentMode+0x84>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2bc7      	cmp	r3, #199	@ 0xc7
 800afea:	d9f0      	bls.n	800afce <USB_SetCurrentMode+0x2e>
 800afec:	e01a      	b.n	800b024 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800afee:	78fb      	ldrb	r3, [r7, #3]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d115      	bne.n	800b020 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b000:	200a      	movs	r0, #10
 800b002:	f7f8 f9fb 	bl	80033fc <HAL_Delay>
      ms += 10U;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	330a      	adds	r3, #10
 800b00a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 f926 	bl	800c25e <USB_GetMode>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d005      	beq.n	800b024 <USB_SetCurrentMode+0x84>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2bc7      	cmp	r3, #199	@ 0xc7
 800b01c:	d9f0      	bls.n	800b000 <USB_SetCurrentMode+0x60>
 800b01e:	e001      	b.n	800b024 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e005      	b.n	800b030 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2bc8      	cmp	r3, #200	@ 0xc8
 800b028:	d101      	bne.n	800b02e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e000      	b.n	800b030 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b038:	b084      	sub	sp, #16
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b086      	sub	sp, #24
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b052:	2300      	movs	r3, #0
 800b054:	613b      	str	r3, [r7, #16]
 800b056:	e009      	b.n	800b06c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	3340      	adds	r3, #64	@ 0x40
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	2200      	movs	r2, #0
 800b064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	3301      	adds	r3, #1
 800b06a:	613b      	str	r3, [r7, #16]
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b0e      	cmp	r3, #14
 800b070:	d9f2      	bls.n	800b058 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b072:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b076:	2b00      	cmp	r3, #0
 800b078:	d11c      	bne.n	800b0b4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b088:	f043 0302 	orr.w	r3, r3, #2
 800b08c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b092:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b09e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0b2:	e00b      	b.n	800b0cc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d10d      	bne.n	800b0fc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d104      	bne.n	800b0f2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f968 	bl	800b3c0 <USB_SetDevSpeed>
 800b0f0:	e008      	b.n	800b104 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f963 	bl	800b3c0 <USB_SetDevSpeed>
 800b0fa:	e003      	b.n	800b104 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b0fc:	2103      	movs	r1, #3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f95e 	bl	800b3c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b104:	2110      	movs	r1, #16
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f8fa 	bl	800b300 <USB_FlushTxFifo>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f924 	bl	800b364 <USB_FlushRxFifo>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b12c:	461a      	mov	r2, r3
 800b12e:	2300      	movs	r3, #0
 800b130:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b138:	461a      	mov	r2, r3
 800b13a:	2300      	movs	r3, #0
 800b13c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b144:	461a      	mov	r2, r3
 800b146:	2300      	movs	r3, #0
 800b148:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b14a:	2300      	movs	r3, #0
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	e043      	b.n	800b1d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b162:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b166:	d118      	bne.n	800b19a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b17a:	461a      	mov	r2, r3
 800b17c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b180:	6013      	str	r3, [r2, #0]
 800b182:	e013      	b.n	800b1ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	015a      	lsls	r2, r3, #5
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4413      	add	r3, r2
 800b18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b190:	461a      	mov	r2, r3
 800b192:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	e008      	b.n	800b1ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	613b      	str	r3, [r7, #16]
 800b1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b1dc:	461a      	mov	r2, r3
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d3b5      	bcc.n	800b150 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	613b      	str	r3, [r7, #16]
 800b1e8:	e043      	b.n	800b272 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	015a      	lsls	r2, r3, #5
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b200:	d118      	bne.n	800b234 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b214:	461a      	mov	r2, r3
 800b216:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	e013      	b.n	800b246 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22a:	461a      	mov	r2, r3
 800b22c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b230:	6013      	str	r3, [r2, #0]
 800b232:	e008      	b.n	800b246 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	015a      	lsls	r2, r3, #5
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	4413      	add	r3, r2
 800b23c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b240:	461a      	mov	r2, r3
 800b242:	2300      	movs	r3, #0
 800b244:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b252:	461a      	mov	r2, r3
 800b254:	2300      	movs	r3, #0
 800b256:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b264:	461a      	mov	r2, r3
 800b266:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b26a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	3301      	adds	r3, #1
 800b270:	613b      	str	r3, [r7, #16]
 800b272:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b276:	461a      	mov	r2, r3
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d3b5      	bcc.n	800b1ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b28c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b290:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b29e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b2a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d105      	bne.n	800b2b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	f043 0210 	orr.w	r2, r3, #16
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699a      	ldr	r2, [r3, #24]
 800b2b8:	4b10      	ldr	r3, [pc, #64]	@ (800b2fc <USB_DevInit+0x2c4>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b2c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d005      	beq.n	800b2d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	f043 0208 	orr.w	r2, r3, #8
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b2d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d107      	bne.n	800b2ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2e4:	f043 0304 	orr.w	r3, r3, #4
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2f8:	b004      	add	sp, #16
 800b2fa:	4770      	bx	lr
 800b2fc:	803c3800 	.word	0x803c3800

0800b300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3301      	adds	r3, #1
 800b312:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b31a:	d901      	bls.n	800b320 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e01b      	b.n	800b358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	daf2      	bge.n	800b30e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	019b      	lsls	r3, r3, #6
 800b330:	f043 0220 	orr.w	r2, r3, #32
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3301      	adds	r3, #1
 800b33c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b344:	d901      	bls.n	800b34a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	e006      	b.n	800b358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	f003 0320 	and.w	r3, r3, #32
 800b352:	2b20      	cmp	r3, #32
 800b354:	d0f0      	beq.n	800b338 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3301      	adds	r3, #1
 800b374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b37c:	d901      	bls.n	800b382 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b37e:	2303      	movs	r3, #3
 800b380:	e018      	b.n	800b3b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	daf2      	bge.n	800b370 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2210      	movs	r2, #16
 800b392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3301      	adds	r3, #1
 800b398:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3a0:	d901      	bls.n	800b3a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e006      	b.n	800b3b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	f003 0310 	and.w	r3, r3, #16
 800b3ae:	2b10      	cmp	r3, #16
 800b3b0:	d0f0      	beq.n	800b394 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	78fb      	ldrb	r3, [r7, #3]
 800b3da:	68f9      	ldr	r1, [r7, #12]
 800b3dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b087      	sub	sp, #28
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	f003 0306 	and.w	r3, r3, #6
 800b40a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d102      	bne.n	800b418 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b412:	2300      	movs	r3, #0
 800b414:	75fb      	strb	r3, [r7, #23]
 800b416:	e00a      	b.n	800b42e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d002      	beq.n	800b424 <USB_GetDevSpeed+0x32>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b06      	cmp	r3, #6
 800b422:	d102      	bne.n	800b42a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b424:	2302      	movs	r3, #2
 800b426:	75fb      	strb	r3, [r7, #23]
 800b428:	e001      	b.n	800b42e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b42a:	230f      	movs	r3, #15
 800b42c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b430:	4618      	mov	r0, r3
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d13a      	bne.n	800b4ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b45e:	69da      	ldr	r2, [r3, #28]
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	f003 030f 	and.w	r3, r3, #15
 800b468:	2101      	movs	r1, #1
 800b46a:	fa01 f303 	lsl.w	r3, r1, r3
 800b46e:	b29b      	uxth	r3, r3
 800b470:	68f9      	ldr	r1, [r7, #12]
 800b472:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b476:	4313      	orrs	r3, r2
 800b478:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	4413      	add	r3, r2
 800b482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d155      	bne.n	800b53c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	791b      	ldrb	r3, [r3, #4]
 800b4aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	059b      	lsls	r3, r3, #22
 800b4b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	0151      	lsls	r1, r2, #5
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	440a      	add	r2, r1
 800b4be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4ca:	6013      	str	r3, [r2, #0]
 800b4cc:	e036      	b.n	800b53c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4d4:	69da      	ldr	r2, [r3, #28]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	f003 030f 	and.w	r3, r3, #15
 800b4de:	2101      	movs	r1, #1
 800b4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e4:	041b      	lsls	r3, r3, #16
 800b4e6:	68f9      	ldr	r1, [r7, #12]
 800b4e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d11a      	bne.n	800b53c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	791b      	ldrb	r3, [r3, #4]
 800b520:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b522:	430b      	orrs	r3, r1
 800b524:	4313      	orrs	r3, r2
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	0151      	lsls	r1, r2, #5
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	440a      	add	r2, r1
 800b52e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b53a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d161      	bne.n	800b62c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b57a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b57e:	d11f      	bne.n	800b5c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	0151      	lsls	r1, r2, #5
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	440a      	add	r2, r1
 800b596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b59a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b59e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	015a      	lsls	r2, r3, #5
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	0151      	lsls	r1, r2, #5
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	440a      	add	r2, r1
 800b5b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	f003 030f 	and.w	r3, r3, #15
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	43db      	mvns	r3, r3
 800b5da:	68f9      	ldr	r1, [r7, #12]
 800b5dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5ea:	69da      	ldr	r2, [r3, #28]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	f003 030f 	and.w	r3, r3, #15
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	68f9      	ldr	r1, [r7, #12]
 800b600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b604:	4013      	ands	r3, r2
 800b606:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	0159      	lsls	r1, r3, #5
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	440b      	add	r3, r1
 800b61e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b622:	4619      	mov	r1, r3
 800b624:	4b35      	ldr	r3, [pc, #212]	@ (800b6fc <USB_DeactivateEndpoint+0x1b0>)
 800b626:	4013      	ands	r3, r2
 800b628:	600b      	str	r3, [r1, #0]
 800b62a:	e060      	b.n	800b6ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	015a      	lsls	r2, r3, #5
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4413      	add	r3, r2
 800b634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b63e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b642:	d11f      	bne.n	800b684 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	0151      	lsls	r1, r2, #5
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	440a      	add	r2, r1
 800b65a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b65e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b662:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	015a      	lsls	r2, r3, #5
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	0151      	lsls	r1, r2, #5
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	440a      	add	r2, r1
 800b67a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b67e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b68a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	f003 030f 	and.w	r3, r3, #15
 800b694:	2101      	movs	r1, #1
 800b696:	fa01 f303 	lsl.w	r3, r1, r3
 800b69a:	041b      	lsls	r3, r3, #16
 800b69c:	43db      	mvns	r3, r3
 800b69e:	68f9      	ldr	r1, [r7, #12]
 800b6a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ae:	69da      	ldr	r2, [r3, #28]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f003 030f 	and.w	r3, r3, #15
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	43db      	mvns	r3, r3
 800b6c2:	68f9      	ldr	r1, [r7, #12]
 800b6c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	0159      	lsls	r1, r3, #5
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	440b      	add	r3, r1
 800b6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4b05      	ldr	r3, [pc, #20]	@ (800b700 <USB_DeactivateEndpoint+0x1b4>)
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	ec337800 	.word	0xec337800
 800b700:	eff37800 	.word	0xeff37800

0800b704 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b08a      	sub	sp, #40	@ 0x28
 800b708:	af02      	add	r7, sp, #8
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	4613      	mov	r3, r2
 800b710:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	2b01      	cmp	r3, #1
 800b722:	f040 817f 	bne.w	800ba24 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d132      	bne.n	800b794 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	0151      	lsls	r1, r2, #5
 800b740:	69fa      	ldr	r2, [r7, #28]
 800b742:	440a      	add	r2, r1
 800b744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b748:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b74c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	015a      	lsls	r2, r3, #5
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	4413      	add	r3, r2
 800b75a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	69ba      	ldr	r2, [r7, #24]
 800b762:	0151      	lsls	r1, r2, #5
 800b764:	69fa      	ldr	r2, [r7, #28]
 800b766:	440a      	add	r2, r1
 800b768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b76c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	015a      	lsls	r2, r3, #5
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	4413      	add	r3, r2
 800b77a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	69ba      	ldr	r2, [r7, #24]
 800b782:	0151      	lsls	r1, r2, #5
 800b784:	69fa      	ldr	r2, [r7, #28]
 800b786:	440a      	add	r2, r1
 800b788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b78c:	0cdb      	lsrs	r3, r3, #19
 800b78e:	04db      	lsls	r3, r3, #19
 800b790:	6113      	str	r3, [r2, #16]
 800b792:	e097      	b.n	800b8c4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	0151      	lsls	r1, r2, #5
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	440a      	add	r2, r1
 800b7aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7ae:	0cdb      	lsrs	r3, r3, #19
 800b7b0:	04db      	lsls	r3, r3, #19
 800b7b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	69ba      	ldr	r2, [r7, #24]
 800b7c4:	0151      	lsls	r1, r2, #5
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	440a      	add	r2, r1
 800b7ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b7d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b7d6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d11a      	bne.n	800b814 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	691a      	ldr	r2, [r3, #16]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d903      	bls.n	800b7f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	689a      	ldr	r2, [r3, #8]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	015a      	lsls	r2, r3, #5
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	69ba      	ldr	r2, [r7, #24]
 800b802:	0151      	lsls	r1, r2, #5
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	440a      	add	r2, r1
 800b808:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b80c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b810:	6113      	str	r3, [r2, #16]
 800b812:	e044      	b.n	800b89e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	691a      	ldr	r2, [r3, #16]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	4413      	add	r3, r2
 800b81e:	1e5a      	subs	r2, r3, #1
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	fbb2 f3f3 	udiv	r3, r2, r3
 800b828:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	015a      	lsls	r2, r3, #5
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	4413      	add	r3, r2
 800b832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b836:	691a      	ldr	r2, [r3, #16]
 800b838:	8afb      	ldrh	r3, [r7, #22]
 800b83a:	04d9      	lsls	r1, r3, #19
 800b83c:	4ba4      	ldr	r3, [pc, #656]	@ (800bad0 <USB_EPStartXfer+0x3cc>)
 800b83e:	400b      	ands	r3, r1
 800b840:	69b9      	ldr	r1, [r7, #24]
 800b842:	0148      	lsls	r0, r1, #5
 800b844:	69f9      	ldr	r1, [r7, #28]
 800b846:	4401      	add	r1, r0
 800b848:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b84c:	4313      	orrs	r3, r2
 800b84e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	791b      	ldrb	r3, [r3, #4]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d122      	bne.n	800b89e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	69ba      	ldr	r2, [r7, #24]
 800b868:	0151      	lsls	r1, r2, #5
 800b86a:	69fa      	ldr	r2, [r7, #28]
 800b86c:	440a      	add	r2, r1
 800b86e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b872:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b876:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b884:	691a      	ldr	r2, [r3, #16]
 800b886:	8afb      	ldrh	r3, [r7, #22]
 800b888:	075b      	lsls	r3, r3, #29
 800b88a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b88e:	69b9      	ldr	r1, [r7, #24]
 800b890:	0148      	lsls	r0, r1, #5
 800b892:	69f9      	ldr	r1, [r7, #28]
 800b894:	4401      	add	r1, r0
 800b896:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b89a:	4313      	orrs	r3, r2
 800b89c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8aa:	691a      	ldr	r2, [r3, #16]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8b4:	69b9      	ldr	r1, [r7, #24]
 800b8b6:	0148      	lsls	r0, r1, #5
 800b8b8:	69f9      	ldr	r1, [r7, #28]
 800b8ba:	4401      	add	r1, r0
 800b8bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d14b      	bne.n	800b962 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d009      	beq.n	800b8e6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8de:	461a      	mov	r2, r3
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	69db      	ldr	r3, [r3, #28]
 800b8e4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	791b      	ldrb	r3, [r3, #4]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d128      	bne.n	800b940 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d110      	bne.n	800b920 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	0151      	lsls	r1, r2, #5
 800b910:	69fa      	ldr	r2, [r7, #28]
 800b912:	440a      	add	r2, r1
 800b914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	e00f      	b.n	800b940 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	0151      	lsls	r1, r2, #5
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	440a      	add	r2, r1
 800b936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b93a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b93e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	0151      	lsls	r1, r2, #5
 800b952:	69fa      	ldr	r2, [r7, #28]
 800b954:	440a      	add	r2, r1
 800b956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b95a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	e166      	b.n	800bc30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	015a      	lsls	r2, r3, #5
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	4413      	add	r3, r2
 800b96a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	69ba      	ldr	r2, [r7, #24]
 800b972:	0151      	lsls	r1, r2, #5
 800b974:	69fa      	ldr	r2, [r7, #28]
 800b976:	440a      	add	r2, r1
 800b978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b97c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b980:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	791b      	ldrb	r3, [r3, #4]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d015      	beq.n	800b9b6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 814e 	beq.w	800bc30 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b99a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	f003 030f 	and.w	r3, r3, #15
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9aa:	69f9      	ldr	r1, [r7, #28]
 800b9ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	634b      	str	r3, [r1, #52]	@ 0x34
 800b9b4:	e13c      	b.n	800bc30 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d110      	bne.n	800b9e8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	015a      	lsls	r2, r3, #5
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	69ba      	ldr	r2, [r7, #24]
 800b9d6:	0151      	lsls	r1, r2, #5
 800b9d8:	69fa      	ldr	r2, [r7, #28]
 800b9da:	440a      	add	r2, r1
 800b9dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	e00f      	b.n	800ba08 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	0151      	lsls	r1, r2, #5
 800b9fa:	69fa      	ldr	r2, [r7, #28]
 800b9fc:	440a      	add	r2, r1
 800b9fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba06:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	68d9      	ldr	r1, [r3, #12]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	b298      	uxth	r0, r3
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 f9b9 	bl	800bd94 <USB_WritePacket>
 800ba22:	e105      	b.n	800bc30 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	015a      	lsls	r2, r3, #5
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	0151      	lsls	r1, r2, #5
 800ba36:	69fa      	ldr	r2, [r7, #28]
 800ba38:	440a      	add	r2, r1
 800ba3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba3e:	0cdb      	lsrs	r3, r3, #19
 800ba40:	04db      	lsls	r3, r3, #19
 800ba42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	015a      	lsls	r2, r3, #5
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	0151      	lsls	r1, r2, #5
 800ba56:	69fa      	ldr	r2, [r7, #28]
 800ba58:	440a      	add	r2, r1
 800ba5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ba62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ba66:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d132      	bne.n	800bad4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	689a      	ldr	r2, [r3, #8]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	015a      	lsls	r2, r3, #5
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba92:	691a      	ldr	r2, [r3, #16]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba9c:	69b9      	ldr	r1, [r7, #24]
 800ba9e:	0148      	lsls	r0, r1, #5
 800baa0:	69f9      	ldr	r1, [r7, #28]
 800baa2:	4401      	add	r1, r0
 800baa4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800baa8:	4313      	orrs	r3, r2
 800baaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	0151      	lsls	r1, r2, #5
 800babe:	69fa      	ldr	r2, [r7, #28]
 800bac0:	440a      	add	r2, r1
 800bac2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bac6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800baca:	6113      	str	r3, [r2, #16]
 800bacc:	e062      	b.n	800bb94 <USB_EPStartXfer+0x490>
 800bace:	bf00      	nop
 800bad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d123      	bne.n	800bb24 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	015a      	lsls	r2, r3, #5
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae8:	691a      	ldr	r2, [r3, #16]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baf2:	69b9      	ldr	r1, [r7, #24]
 800baf4:	0148      	lsls	r0, r1, #5
 800baf6:	69f9      	ldr	r1, [r7, #28]
 800baf8:	4401      	add	r1, r0
 800bafa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bafe:	4313      	orrs	r3, r2
 800bb00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	69ba      	ldr	r2, [r7, #24]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb20:	6113      	str	r3, [r2, #16]
 800bb22:	e037      	b.n	800bb94 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	691a      	ldr	r2, [r3, #16]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	1e5a      	subs	r2, r3, #1
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	8afa      	ldrh	r2, [r7, #22]
 800bb40:	fb03 f202 	mul.w	r2, r3, r2
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	015a      	lsls	r2, r3, #5
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb54:	691a      	ldr	r2, [r3, #16]
 800bb56:	8afb      	ldrh	r3, [r7, #22]
 800bb58:	04d9      	lsls	r1, r3, #19
 800bb5a:	4b38      	ldr	r3, [pc, #224]	@ (800bc3c <USB_EPStartXfer+0x538>)
 800bb5c:	400b      	ands	r3, r1
 800bb5e:	69b9      	ldr	r1, [r7, #24]
 800bb60:	0148      	lsls	r0, r1, #5
 800bb62:	69f9      	ldr	r1, [r7, #28]
 800bb64:	4401      	add	r1, r0
 800bb66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb7a:	691a      	ldr	r2, [r3, #16]
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb84:	69b9      	ldr	r1, [r7, #24]
 800bb86:	0148      	lsls	r0, r1, #5
 800bb88:	69f9      	ldr	r1, [r7, #28]
 800bb8a:	4401      	add	r1, r0
 800bb8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bb90:	4313      	orrs	r3, r2
 800bb92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d10d      	bne.n	800bbb6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d009      	beq.n	800bbb6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	68d9      	ldr	r1, [r3, #12]
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	015a      	lsls	r2, r3, #5
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	4413      	add	r3, r2
 800bbae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbb2:	460a      	mov	r2, r1
 800bbb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	791b      	ldrb	r3, [r3, #4]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d128      	bne.n	800bc10 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d110      	bne.n	800bbf0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	0151      	lsls	r1, r2, #5
 800bbe0:	69fa      	ldr	r2, [r7, #28]
 800bbe2:	440a      	add	r2, r1
 800bbe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbe8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bbec:	6013      	str	r3, [r2, #0]
 800bbee:	e00f      	b.n	800bc10 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	015a      	lsls	r2, r3, #5
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	0151      	lsls	r1, r2, #5
 800bc02:	69fa      	ldr	r2, [r7, #28]
 800bc04:	440a      	add	r2, r1
 800bc06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69ba      	ldr	r2, [r7, #24]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	69fa      	ldr	r2, [r7, #28]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bc2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3720      	adds	r7, #32
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	1ff80000 	.word	0x1ff80000

0800bc40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	785b      	ldrb	r3, [r3, #1]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d14a      	bne.n	800bcf4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc76:	f040 8086 	bne.w	800bd86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	7812      	ldrb	r2, [r2, #0]
 800bc8e:	0151      	lsls	r1, r2, #5
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	440a      	add	r2, r1
 800bc94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	015a      	lsls	r2, r3, #5
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	4413      	add	r3, r2
 800bca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	7812      	ldrb	r2, [r2, #0]
 800bcb2:	0151      	lsls	r1, r2, #5
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	440a      	add	r2, r1
 800bcb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bcc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d902      	bls.n	800bcd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	75fb      	strb	r3, [r7, #23]
          break;
 800bcd6:	e056      	b.n	800bd86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	015a      	lsls	r2, r3, #5
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	4413      	add	r3, r2
 800bce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bcec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcf0:	d0e7      	beq.n	800bcc2 <USB_EPStopXfer+0x82>
 800bcf2:	e048      	b.n	800bd86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd0c:	d13b      	bne.n	800bd86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	015a      	lsls	r2, r3, #5
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	7812      	ldrb	r2, [r2, #0]
 800bd22:	0151      	lsls	r1, r2, #5
 800bd24:	693a      	ldr	r2, [r7, #16]
 800bd26:	440a      	add	r2, r1
 800bd28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	015a      	lsls	r2, r3, #5
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	7812      	ldrb	r2, [r2, #0]
 800bd46:	0151      	lsls	r1, r2, #5
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	440a      	add	r2, r1
 800bd4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d902      	bls.n	800bd6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	75fb      	strb	r3, [r7, #23]
          break;
 800bd6a:	e00c      	b.n	800bd86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd84:	d0e7      	beq.n	800bd56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	371c      	adds	r7, #28
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b089      	sub	sp, #36	@ 0x24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	4611      	mov	r1, r2
 800bda0:	461a      	mov	r2, r3
 800bda2:	460b      	mov	r3, r1
 800bda4:	71fb      	strb	r3, [r7, #7]
 800bda6:	4613      	mov	r3, r2
 800bda8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bdb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d123      	bne.n	800be02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bdba:	88bb      	ldrh	r3, [r7, #4]
 800bdbc:	3303      	adds	r3, #3
 800bdbe:	089b      	lsrs	r3, r3, #2
 800bdc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61bb      	str	r3, [r7, #24]
 800bdc6:	e018      	b.n	800bdfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	031a      	lsls	r2, r3, #12
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	3301      	adds	r3, #1
 800bde0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	3301      	adds	r3, #1
 800bde6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	3301      	adds	r3, #1
 800bdec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	61bb      	str	r3, [r7, #24]
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d3e2      	bcc.n	800bdc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3724      	adds	r7, #36	@ 0x24
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800be10:	b480      	push	{r7}
 800be12:	b08b      	sub	sp, #44	@ 0x2c
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	4613      	mov	r3, r2
 800be1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	089b      	lsrs	r3, r3, #2
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800be2e:	88fb      	ldrh	r3, [r7, #6]
 800be30:	f003 0303 	and.w	r3, r3, #3
 800be34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800be36:	2300      	movs	r3, #0
 800be38:	623b      	str	r3, [r7, #32]
 800be3a:	e014      	b.n	800be66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be46:	601a      	str	r2, [r3, #0]
    pDest++;
 800be48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4a:	3301      	adds	r3, #1
 800be4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be50:	3301      	adds	r3, #1
 800be52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be56:	3301      	adds	r3, #1
 800be58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5c:	3301      	adds	r3, #1
 800be5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	3301      	adds	r3, #1
 800be64:	623b      	str	r3, [r7, #32]
 800be66:	6a3a      	ldr	r2, [r7, #32]
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d3e6      	bcc.n	800be3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800be6e:	8bfb      	ldrh	r3, [r7, #30]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d01e      	beq.n	800beb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800be74:	2300      	movs	r3, #0
 800be76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be7e:	461a      	mov	r2, r3
 800be80:	f107 0310 	add.w	r3, r7, #16
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	fa22 f303 	lsr.w	r3, r2, r3
 800be94:	b2da      	uxtb	r2, r3
 800be96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be98:	701a      	strb	r2, [r3, #0]
      i++;
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	3301      	adds	r3, #1
 800be9e:	623b      	str	r3, [r7, #32]
      pDest++;
 800bea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea2:	3301      	adds	r3, #1
 800bea4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bea6:	8bfb      	ldrh	r3, [r7, #30]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800beac:	8bfb      	ldrh	r3, [r7, #30]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1ea      	bne.n	800be88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800beb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	372c      	adds	r7, #44	@ 0x2c
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	785b      	ldrb	r3, [r3, #1]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d12c      	bne.n	800bf36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	db12      	blt.n	800bf14 <USB_EPSetStall+0x54>
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00f      	beq.n	800bf14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	015a      	lsls	r2, r3, #5
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	0151      	lsls	r1, r2, #5
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	440a      	add	r2, r1
 800bf0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bf12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	015a      	lsls	r2, r3, #5
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	0151      	lsls	r1, r2, #5
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	440a      	add	r2, r1
 800bf2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	e02b      	b.n	800bf8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	015a      	lsls	r2, r3, #5
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	db12      	blt.n	800bf6e <USB_EPSetStall+0xae>
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00f      	beq.n	800bf6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	015a      	lsls	r2, r3, #5
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	4413      	add	r3, r2
 800bf56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	0151      	lsls	r1, r2, #5
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	440a      	add	r2, r1
 800bf64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bf6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	015a      	lsls	r2, r3, #5
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	4413      	add	r3, r2
 800bf76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	0151      	lsls	r1, r2, #5
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	440a      	add	r2, r1
 800bf84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d128      	bne.n	800c00a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	0151      	lsls	r1, r2, #5
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	440a      	add	r2, r1
 800bfce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bfd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	791b      	ldrb	r3, [r3, #4]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d003      	beq.n	800bfe8 <USB_EPClearStall+0x4c>
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	791b      	ldrb	r3, [r3, #4]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d138      	bne.n	800c05a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	015a      	lsls	r2, r3, #5
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	4413      	add	r3, r2
 800bff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	0151      	lsls	r1, r2, #5
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	440a      	add	r2, r1
 800bffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c006:	6013      	str	r3, [r2, #0]
 800c008:	e027      	b.n	800c05a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	0151      	lsls	r1, r2, #5
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	440a      	add	r2, r1
 800c020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c024:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c028:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	791b      	ldrb	r3, [r3, #4]
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d003      	beq.n	800c03a <USB_EPClearStall+0x9e>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	791b      	ldrb	r3, [r3, #4]
 800c036:	2b02      	cmp	r3, #2
 800c038:	d10f      	bne.n	800c05a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	015a      	lsls	r2, r3, #5
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	4413      	add	r3, r2
 800c042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	0151      	lsls	r1, r2, #5
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	440a      	add	r2, r1
 800c050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c058:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c086:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c08a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	78fb      	ldrb	r3, [r7, #3]
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c09c:	68f9      	ldr	r1, [r7, #12]
 800c09e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0ce:	f023 0303 	bic.w	r3, r3, #3
 800c0d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0e2:	f023 0302 	bic.w	r3, r3, #2
 800c0e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b085      	sub	sp, #20
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c110:	f023 0303 	bic.w	r3, r3, #3
 800c114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c124:	f043 0302 	orr.w	r3, r3, #2
 800c128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	695b      	ldr	r3, [r3, #20]
 800c144:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	4013      	ands	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c150:	68fb      	ldr	r3, [r7, #12]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c15e:	b480      	push	{r7}
 800c160:	b085      	sub	sp, #20
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	4013      	ands	r3, r2
 800c180:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	0c1b      	lsrs	r3, r3, #16
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c192:	b480      	push	{r7}
 800c194:	b085      	sub	sp, #20
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	b29b      	uxth	r3, r3
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b085      	sub	sp, #20
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c202:	b480      	push	{r7}
 800c204:	b087      	sub	sp, #28
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	460b      	mov	r3, r1
 800c20c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c224:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c226:	78fb      	ldrb	r3, [r7, #3]
 800c228:	f003 030f 	and.w	r3, r3, #15
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	fa22 f303 	lsr.w	r3, r2, r3
 800c232:	01db      	lsls	r3, r3, #7
 800c234:	b2db      	uxtb	r3, r3
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	4313      	orrs	r3, r2
 800c23a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	4013      	ands	r3, r2
 800c24e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c250:	68bb      	ldr	r3, [r7, #8]
}
 800c252:	4618      	mov	r0, r3
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	f003 0301 	and.w	r3, r3, #1
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b085      	sub	sp, #20
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c294:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c298:	f023 0307 	bic.w	r3, r3, #7
 800c29c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	333c      	adds	r3, #60	@ 0x3c
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	4a26      	ldr	r2, [pc, #152]	@ (800c378 <USB_EP0_OutStart+0xb8>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d90a      	bls.n	800c2fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2f4:	d101      	bne.n	800c2fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e037      	b.n	800c36a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c300:	461a      	mov	r2, r3
 800c302:	2300      	movs	r3, #0
 800c304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c314:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c328:	f043 0318 	orr.w	r3, r3, #24
 800c32c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c33c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c340:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c342:	7afb      	ldrb	r3, [r7, #11]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d10f      	bne.n	800c368 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c34e:	461a      	mov	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c362:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c366:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	371c      	adds	r7, #28
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	4f54300a 	.word	0x4f54300a

0800c37c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3301      	adds	r3, #1
 800c38c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c394:	d901      	bls.n	800c39a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c396:	2303      	movs	r3, #3
 800c398:	e022      	b.n	800c3e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	daf2      	bge.n	800c388 <USB_CoreReset+0xc>

  count = 10U;
 800c3a2:	230a      	movs	r3, #10
 800c3a4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800c3a6:	e002      	b.n	800c3ae <USB_CoreReset+0x32>
  {
    count--;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1f9      	bne.n	800c3a8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	f043 0201 	orr.w	r2, r3, #1
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3cc:	d901      	bls.n	800c3d2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	e006      	b.n	800c3e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d0f0      	beq.n	800c3c0 <USB_CoreReset+0x44>

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c3f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c3fc:	f002 fd20 	bl	800ee40 <USBD_static_malloc>
 800c400:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d109      	bne.n	800c41c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	32b0      	adds	r2, #176	@ 0xb0
 800c412:	2100      	movs	r1, #0
 800c414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c418:	2302      	movs	r3, #2
 800c41a:	e0d4      	b.n	800c5c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c41c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c420:	2100      	movs	r1, #0
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f003 fd91 	bl	800ff4a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	32b0      	adds	r2, #176	@ 0xb0
 800c432:	68f9      	ldr	r1, [r7, #12]
 800c434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	32b0      	adds	r2, #176	@ 0xb0
 800c442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	7c1b      	ldrb	r3, [r3, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d138      	bne.n	800c4c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c454:	4b5e      	ldr	r3, [pc, #376]	@ (800c5d0 <USBD_CDC_Init+0x1e4>)
 800c456:	7819      	ldrb	r1, [r3, #0]
 800c458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c45c:	2202      	movs	r2, #2
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f002 fbcb 	bl	800ebfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c464:	4b5a      	ldr	r3, [pc, #360]	@ (800c5d0 <USBD_CDC_Init+0x1e4>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	f003 020f 	and.w	r2, r3, #15
 800c46c:	6879      	ldr	r1, [r7, #4]
 800c46e:	4613      	mov	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	440b      	add	r3, r1
 800c478:	3323      	adds	r3, #35	@ 0x23
 800c47a:	2201      	movs	r2, #1
 800c47c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c47e:	4b55      	ldr	r3, [pc, #340]	@ (800c5d4 <USBD_CDC_Init+0x1e8>)
 800c480:	7819      	ldrb	r1, [r3, #0]
 800c482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c486:	2202      	movs	r2, #2
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f002 fbb6 	bl	800ebfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c48e:	4b51      	ldr	r3, [pc, #324]	@ (800c5d4 <USBD_CDC_Init+0x1e8>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	f003 020f 	and.w	r2, r3, #15
 800c496:	6879      	ldr	r1, [r7, #4]
 800c498:	4613      	mov	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	440b      	add	r3, r1
 800c4a2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c4aa:	4b4b      	ldr	r3, [pc, #300]	@ (800c5d8 <USBD_CDC_Init+0x1ec>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	f003 020f 	and.w	r2, r3, #15
 800c4b2:	6879      	ldr	r1, [r7, #4]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	440b      	add	r3, r1
 800c4be:	331c      	adds	r3, #28
 800c4c0:	2210      	movs	r2, #16
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	e035      	b.n	800c532 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c4c6:	4b42      	ldr	r3, [pc, #264]	@ (800c5d0 <USBD_CDC_Init+0x1e4>)
 800c4c8:	7819      	ldrb	r1, [r3, #0]
 800c4ca:	2340      	movs	r3, #64	@ 0x40
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f002 fb93 	bl	800ebfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c4d4:	4b3e      	ldr	r3, [pc, #248]	@ (800c5d0 <USBD_CDC_Init+0x1e4>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	f003 020f 	and.w	r2, r3, #15
 800c4dc:	6879      	ldr	r1, [r7, #4]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	440b      	add	r3, r1
 800c4e8:	3323      	adds	r3, #35	@ 0x23
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c4ee:	4b39      	ldr	r3, [pc, #228]	@ (800c5d4 <USBD_CDC_Init+0x1e8>)
 800c4f0:	7819      	ldrb	r1, [r3, #0]
 800c4f2:	2340      	movs	r3, #64	@ 0x40
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f002 fb7f 	bl	800ebfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c4fc:	4b35      	ldr	r3, [pc, #212]	@ (800c5d4 <USBD_CDC_Init+0x1e8>)
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	f003 020f 	and.w	r2, r3, #15
 800c504:	6879      	ldr	r1, [r7, #4]
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c514:	2201      	movs	r2, #1
 800c516:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c518:	4b2f      	ldr	r3, [pc, #188]	@ (800c5d8 <USBD_CDC_Init+0x1ec>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	f003 020f 	and.w	r2, r3, #15
 800c520:	6879      	ldr	r1, [r7, #4]
 800c522:	4613      	mov	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	440b      	add	r3, r1
 800c52c:	331c      	adds	r3, #28
 800c52e:	2210      	movs	r2, #16
 800c530:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c532:	4b29      	ldr	r3, [pc, #164]	@ (800c5d8 <USBD_CDC_Init+0x1ec>)
 800c534:	7819      	ldrb	r1, [r3, #0]
 800c536:	2308      	movs	r3, #8
 800c538:	2203      	movs	r2, #3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f002 fb5d 	bl	800ebfa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c540:	4b25      	ldr	r3, [pc, #148]	@ (800c5d8 <USBD_CDC_Init+0x1ec>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	f003 020f 	and.w	r2, r3, #15
 800c548:	6879      	ldr	r1, [r7, #4]
 800c54a:	4613      	mov	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	440b      	add	r3, r1
 800c554:	3323      	adds	r3, #35	@ 0x23
 800c556:	2201      	movs	r2, #1
 800c558:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	33b0      	adds	r3, #176	@ 0xb0
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2200      	movs	r2, #0
 800c582:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c590:	2302      	movs	r3, #2
 800c592:	e018      	b.n	800c5c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7c1b      	ldrb	r3, [r3, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c59c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d4 <USBD_CDC_Init+0x1e8>)
 800c59e:	7819      	ldrb	r1, [r3, #0]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f002 fc14 	bl	800edd8 <USBD_LL_PrepareReceive>
 800c5b0:	e008      	b.n	800c5c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5b2:	4b08      	ldr	r3, [pc, #32]	@ (800c5d4 <USBD_CDC_Init+0x1e8>)
 800c5b4:	7819      	ldrb	r1, [r3, #0]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5bc:	2340      	movs	r3, #64	@ 0x40
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f002 fc0a 	bl	800edd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	2000009f 	.word	0x2000009f
 800c5d4:	200000a0 	.word	0x200000a0
 800c5d8:	200000a1 	.word	0x200000a1

0800c5dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c5e8:	4b3a      	ldr	r3, [pc, #232]	@ (800c6d4 <USBD_CDC_DeInit+0xf8>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f002 fb29 	bl	800ec46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c5f4:	4b37      	ldr	r3, [pc, #220]	@ (800c6d4 <USBD_CDC_DeInit+0xf8>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	f003 020f 	and.w	r2, r3, #15
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	4613      	mov	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	440b      	add	r3, r1
 800c608:	3323      	adds	r3, #35	@ 0x23
 800c60a:	2200      	movs	r2, #0
 800c60c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c60e:	4b32      	ldr	r3, [pc, #200]	@ (800c6d8 <USBD_CDC_DeInit+0xfc>)
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f002 fb16 	bl	800ec46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c61a:	4b2f      	ldr	r3, [pc, #188]	@ (800c6d8 <USBD_CDC_DeInit+0xfc>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	f003 020f 	and.w	r2, r3, #15
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	4613      	mov	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	440b      	add	r3, r1
 800c62e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c636:	4b29      	ldr	r3, [pc, #164]	@ (800c6dc <USBD_CDC_DeInit+0x100>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f002 fb02 	bl	800ec46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c642:	4b26      	ldr	r3, [pc, #152]	@ (800c6dc <USBD_CDC_DeInit+0x100>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 020f 	and.w	r2, r3, #15
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	440b      	add	r3, r1
 800c656:	3323      	adds	r3, #35	@ 0x23
 800c658:	2200      	movs	r2, #0
 800c65a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c65c:	4b1f      	ldr	r3, [pc, #124]	@ (800c6dc <USBD_CDC_DeInit+0x100>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 020f 	and.w	r2, r3, #15
 800c664:	6879      	ldr	r1, [r7, #4]
 800c666:	4613      	mov	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	440b      	add	r3, r1
 800c670:	331c      	adds	r3, #28
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	32b0      	adds	r2, #176	@ 0xb0
 800c680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01f      	beq.n	800c6c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	33b0      	adds	r3, #176	@ 0xb0
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	4413      	add	r3, r2
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	32b0      	adds	r2, #176	@ 0xb0
 800c6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f002 fbd6 	bl	800ee5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	32b0      	adds	r2, #176	@ 0xb0
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	2000009f 	.word	0x2000009f
 800c6d8:	200000a0 	.word	0x200000a0
 800c6dc:	200000a1 	.word	0x200000a1

0800c6e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	32b0      	adds	r2, #176	@ 0xb0
 800c6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c6fe:	2300      	movs	r3, #0
 800c700:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e0bf      	b.n	800c890 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d050      	beq.n	800c7be <USBD_CDC_Setup+0xde>
 800c71c:	2b20      	cmp	r3, #32
 800c71e:	f040 80af 	bne.w	800c880 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	88db      	ldrh	r3, [r3, #6]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d03a      	beq.n	800c7a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	b25b      	sxtb	r3, r3
 800c730:	2b00      	cmp	r3, #0
 800c732:	da1b      	bge.n	800c76c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	33b0      	adds	r3, #176	@ 0xb0
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c74a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c74c:	683a      	ldr	r2, [r7, #0]
 800c74e:	88d2      	ldrh	r2, [r2, #6]
 800c750:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	88db      	ldrh	r3, [r3, #6]
 800c756:	2b07      	cmp	r3, #7
 800c758:	bf28      	it	cs
 800c75a:	2307      	movcs	r3, #7
 800c75c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	89fa      	ldrh	r2, [r7, #14]
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f001 fda9 	bl	800e2bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c76a:	e090      	b.n	800c88e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	785a      	ldrb	r2, [r3, #1]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	88db      	ldrh	r3, [r3, #6]
 800c77a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c77c:	d803      	bhi.n	800c786 <USBD_CDC_Setup+0xa6>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	88db      	ldrh	r3, [r3, #6]
 800c782:	b2da      	uxtb	r2, r3
 800c784:	e000      	b.n	800c788 <USBD_CDC_Setup+0xa8>
 800c786:	2240      	movs	r2, #64	@ 0x40
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c78e:	6939      	ldr	r1, [r7, #16]
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c796:	461a      	mov	r2, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f001 fdbe 	bl	800e31a <USBD_CtlPrepareRx>
      break;
 800c79e:	e076      	b.n	800c88e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	33b0      	adds	r3, #176	@ 0xb0
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	7850      	ldrb	r0, [r2, #1]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	4798      	blx	r3
      break;
 800c7bc:	e067      	b.n	800c88e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	785b      	ldrb	r3, [r3, #1]
 800c7c2:	2b0b      	cmp	r3, #11
 800c7c4:	d851      	bhi.n	800c86a <USBD_CDC_Setup+0x18a>
 800c7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c7cc <USBD_CDC_Setup+0xec>)
 800c7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7cc:	0800c7fd 	.word	0x0800c7fd
 800c7d0:	0800c879 	.word	0x0800c879
 800c7d4:	0800c86b 	.word	0x0800c86b
 800c7d8:	0800c86b 	.word	0x0800c86b
 800c7dc:	0800c86b 	.word	0x0800c86b
 800c7e0:	0800c86b 	.word	0x0800c86b
 800c7e4:	0800c86b 	.word	0x0800c86b
 800c7e8:	0800c86b 	.word	0x0800c86b
 800c7ec:	0800c86b 	.word	0x0800c86b
 800c7f0:	0800c86b 	.word	0x0800c86b
 800c7f4:	0800c827 	.word	0x0800c827
 800c7f8:	0800c851 	.word	0x0800c851
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b03      	cmp	r3, #3
 800c806:	d107      	bne.n	800c818 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c808:	f107 030a 	add.w	r3, r7, #10
 800c80c:	2202      	movs	r2, #2
 800c80e:	4619      	mov	r1, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f001 fd53 	bl	800e2bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c816:	e032      	b.n	800c87e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c818:	6839      	ldr	r1, [r7, #0]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f001 fcd1 	bl	800e1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c820:	2303      	movs	r3, #3
 800c822:	75fb      	strb	r3, [r7, #23]
          break;
 800c824:	e02b      	b.n	800c87e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	2b03      	cmp	r3, #3
 800c830:	d107      	bne.n	800c842 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c832:	f107 030d 	add.w	r3, r7, #13
 800c836:	2201      	movs	r2, #1
 800c838:	4619      	mov	r1, r3
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f001 fd3e 	bl	800e2bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c840:	e01d      	b.n	800c87e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f001 fcbc 	bl	800e1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c84a:	2303      	movs	r3, #3
 800c84c:	75fb      	strb	r3, [r7, #23]
          break;
 800c84e:	e016      	b.n	800c87e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b03      	cmp	r3, #3
 800c85a:	d00f      	beq.n	800c87c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f001 fcaf 	bl	800e1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c864:	2303      	movs	r3, #3
 800c866:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c868:	e008      	b.n	800c87c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f001 fca8 	bl	800e1c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c872:	2303      	movs	r3, #3
 800c874:	75fb      	strb	r3, [r7, #23]
          break;
 800c876:	e002      	b.n	800c87e <USBD_CDC_Setup+0x19e>
          break;
 800c878:	bf00      	nop
 800c87a:	e008      	b.n	800c88e <USBD_CDC_Setup+0x1ae>
          break;
 800c87c:	bf00      	nop
      }
      break;
 800c87e:	e006      	b.n	800c88e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f001 fc9d 	bl	800e1c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c888:	2303      	movs	r3, #3
 800c88a:	75fb      	strb	r3, [r7, #23]
      break;
 800c88c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	32b0      	adds	r2, #176	@ 0xb0
 800c8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	e065      	b.n	800c98e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	32b0      	adds	r2, #176	@ 0xb0
 800c8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c8d2:	78fb      	ldrb	r3, [r7, #3]
 800c8d4:	f003 020f 	and.w	r2, r3, #15
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	440b      	add	r3, r1
 800c8e4:	3314      	adds	r3, #20
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d02f      	beq.n	800c94c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	f003 020f 	and.w	r2, r3, #15
 800c8f2:	6879      	ldr	r1, [r7, #4]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	440b      	add	r3, r1
 800c8fe:	3314      	adds	r3, #20
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	78fb      	ldrb	r3, [r7, #3]
 800c904:	f003 010f 	and.w	r1, r3, #15
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	460b      	mov	r3, r1
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	440b      	add	r3, r1
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4403      	add	r3, r0
 800c914:	331c      	adds	r3, #28
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	fbb2 f1f3 	udiv	r1, r2, r3
 800c91c:	fb01 f303 	mul.w	r3, r1, r3
 800c920:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c922:	2b00      	cmp	r3, #0
 800c924:	d112      	bne.n	800c94c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c926:	78fb      	ldrb	r3, [r7, #3]
 800c928:	f003 020f 	and.w	r2, r3, #15
 800c92c:	6879      	ldr	r1, [r7, #4]
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	440b      	add	r3, r1
 800c938:	3314      	adds	r3, #20
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c93e:	78f9      	ldrb	r1, [r7, #3]
 800c940:	2300      	movs	r3, #0
 800c942:	2200      	movs	r2, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f002 fa26 	bl	800ed96 <USBD_LL_Transmit>
 800c94a:	e01f      	b.n	800c98c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	33b0      	adds	r3, #176	@ 0xb0
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d010      	beq.n	800c98c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	33b0      	adds	r3, #176	@ 0xb0
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c988:	78fa      	ldrb	r2, [r7, #3]
 800c98a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b084      	sub	sp, #16
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	460b      	mov	r3, r1
 800c9a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	32b0      	adds	r2, #176	@ 0xb0
 800c9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	32b0      	adds	r2, #176	@ 0xb0
 800c9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d101      	bne.n	800c9c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e01a      	b.n	800c9fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c9c8:	78fb      	ldrb	r3, [r7, #3]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f002 fa24 	bl	800ee1a <USBD_LL_GetRxDataSize>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	33b0      	adds	r3, #176	@ 0xb0
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b084      	sub	sp, #16
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	32b0      	adds	r2, #176	@ 0xb0
 800ca18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca24:	2303      	movs	r3, #3
 800ca26:	e024      	b.n	800ca72 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	33b0      	adds	r3, #176	@ 0xb0
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d019      	beq.n	800ca70 <USBD_CDC_EP0_RxReady+0x6a>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ca42:	2bff      	cmp	r3, #255	@ 0xff
 800ca44:	d014      	beq.n	800ca70 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	33b0      	adds	r3, #176	@ 0xb0
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ca5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ca66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	22ff      	movs	r2, #255	@ 0xff
 800ca6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca84:	2182      	movs	r1, #130	@ 0x82
 800ca86:	4818      	ldr	r0, [pc, #96]	@ (800cae8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca88:	f000 fd62 	bl	800d550 <USBD_GetEpDesc>
 800ca8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca8e:	2101      	movs	r1, #1
 800ca90:	4815      	ldr	r0, [pc, #84]	@ (800cae8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca92:	f000 fd5d 	bl	800d550 <USBD_GetEpDesc>
 800ca96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca98:	2181      	movs	r1, #129	@ 0x81
 800ca9a:	4813      	ldr	r0, [pc, #76]	@ (800cae8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca9c:	f000 fd58 	bl	800d550 <USBD_GetEpDesc>
 800caa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	2210      	movs	r2, #16
 800caac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d006      	beq.n	800cac2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cabc:	711a      	strb	r2, [r3, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d006      	beq.n	800cad6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2200      	movs	r2, #0
 800cacc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cad0:	711a      	strb	r2, [r3, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2243      	movs	r2, #67	@ 0x43
 800cada:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cadc:	4b02      	ldr	r3, [pc, #8]	@ (800cae8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	2000005c 	.word	0x2000005c

0800caec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800caf4:	2182      	movs	r1, #130	@ 0x82
 800caf6:	4818      	ldr	r0, [pc, #96]	@ (800cb58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800caf8:	f000 fd2a 	bl	800d550 <USBD_GetEpDesc>
 800cafc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cafe:	2101      	movs	r1, #1
 800cb00:	4815      	ldr	r0, [pc, #84]	@ (800cb58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cb02:	f000 fd25 	bl	800d550 <USBD_GetEpDesc>
 800cb06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cb08:	2181      	movs	r1, #129	@ 0x81
 800cb0a:	4813      	ldr	r0, [pc, #76]	@ (800cb58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cb0c:	f000 fd20 	bl	800d550 <USBD_GetEpDesc>
 800cb10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	2210      	movs	r2, #16
 800cb1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d006      	beq.n	800cb32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	2200      	movs	r2, #0
 800cb28:	711a      	strb	r2, [r3, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f042 0202 	orr.w	r2, r2, #2
 800cb30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d006      	beq.n	800cb46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	711a      	strb	r2, [r3, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f042 0202 	orr.w	r2, r2, #2
 800cb44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2243      	movs	r2, #67	@ 0x43
 800cb4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb4c:	4b02      	ldr	r3, [pc, #8]	@ (800cb58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	2000005c 	.word	0x2000005c

0800cb5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cb64:	2182      	movs	r1, #130	@ 0x82
 800cb66:	4818      	ldr	r0, [pc, #96]	@ (800cbc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb68:	f000 fcf2 	bl	800d550 <USBD_GetEpDesc>
 800cb6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cb6e:	2101      	movs	r1, #1
 800cb70:	4815      	ldr	r0, [pc, #84]	@ (800cbc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb72:	f000 fced 	bl	800d550 <USBD_GetEpDesc>
 800cb76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cb78:	2181      	movs	r1, #129	@ 0x81
 800cb7a:	4813      	ldr	r0, [pc, #76]	@ (800cbc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb7c:	f000 fce8 	bl	800d550 <USBD_GetEpDesc>
 800cb80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	2210      	movs	r2, #16
 800cb8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d006      	beq.n	800cba2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb9c:	711a      	strb	r2, [r3, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d006      	beq.n	800cbb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cbb0:	711a      	strb	r2, [r3, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2243      	movs	r2, #67	@ 0x43
 800cbba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cbbc:	4b02      	ldr	r3, [pc, #8]	@ (800cbc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3718      	adds	r7, #24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	2000005c 	.word	0x2000005c

0800cbcc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	220a      	movs	r2, #10
 800cbd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cbda:	4b03      	ldr	r3, [pc, #12]	@ (800cbe8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	20000018 	.word	0x20000018

0800cbec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	e009      	b.n	800cc14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	33b0      	adds	r3, #176	@ 0xb0
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b087      	sub	sp, #28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	32b0      	adds	r2, #176	@ 0xb0
 800cc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e008      	b.n	800cc58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	371c      	adds	r7, #28
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	32b0      	adds	r2, #176	@ 0xb0
 800cc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cc84:	2303      	movs	r3, #3
 800cc86:	e004      	b.n	800cc92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
	...

0800cca0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	32b0      	adds	r2, #176	@ 0xb0
 800ccb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e025      	b.n	800cd12 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d11f      	bne.n	800cd10 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ccd8:	4b10      	ldr	r3, [pc, #64]	@ (800cd1c <USBD_CDC_TransmitPacket+0x7c>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 020f 	and.w	r2, r3, #15
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	4613      	mov	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4403      	add	r3, r0
 800ccf2:	3314      	adds	r3, #20
 800ccf4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ccf6:	4b09      	ldr	r3, [pc, #36]	@ (800cd1c <USBD_CDC_TransmitPacket+0x7c>)
 800ccf8:	7819      	ldrb	r1, [r3, #0]
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f002 f845 	bl	800ed96 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	2000009f 	.word	0x2000009f

0800cd20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	32b0      	adds	r2, #176	@ 0xb0
 800cd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	32b0      	adds	r2, #176	@ 0xb0
 800cd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d101      	bne.n	800cd4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	e018      	b.n	800cd80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7c1b      	ldrb	r3, [r3, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd56:	4b0c      	ldr	r3, [pc, #48]	@ (800cd88 <USBD_CDC_ReceivePacket+0x68>)
 800cd58:	7819      	ldrb	r1, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f002 f837 	bl	800edd8 <USBD_LL_PrepareReceive>
 800cd6a:	e008      	b.n	800cd7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd6c:	4b06      	ldr	r3, [pc, #24]	@ (800cd88 <USBD_CDC_ReceivePacket+0x68>)
 800cd6e:	7819      	ldrb	r1, [r3, #0]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd76:	2340      	movs	r3, #64	@ 0x40
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f002 f82d 	bl	800edd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	200000a0 	.word	0x200000a0

0800cd8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	4613      	mov	r3, r2
 800cd98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d101      	bne.n	800cda4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cda0:	2303      	movs	r3, #3
 800cda2:	e01f      	b.n	800cde4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	79fa      	ldrb	r2, [r7, #7]
 800cdd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f001 fea7 	bl	800eb2c <USBD_LL_Init>
 800cdde:	4603      	mov	r3, r0
 800cde0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e025      	b.n	800ce50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	32ae      	adds	r2, #174	@ 0xae
 800ce16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00f      	beq.n	800ce40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	32ae      	adds	r2, #174	@ 0xae
 800ce2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce30:	f107 020e 	add.w	r2, r7, #14
 800ce34:	4610      	mov	r0, r2
 800ce36:	4798      	blx	r3
 800ce38:	4602      	mov	r2, r0
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 feaf 	bl	800ebc4 <USBD_LL_Start>
 800ce66:	4603      	mov	r3, r0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b084      	sub	sp, #16
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
 800ce8e:	460b      	mov	r3, r1
 800ce90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d009      	beq.n	800ceb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	78fa      	ldrb	r2, [r7, #3]
 800ceaa:	4611      	mov	r1, r2
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	4798      	blx	r3
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	460b      	mov	r3, r1
 800cec8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	78fa      	ldrb	r2, [r7, #3]
 800ced8:	4611      	mov	r1, r2
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	4798      	blx	r3
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cee4:	2303      	movs	r3, #3
 800cee6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b084      	sub	sp, #16
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f001 f922 	bl	800e14e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cf18:	461a      	mov	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cf26:	f003 031f 	and.w	r3, r3, #31
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d01a      	beq.n	800cf64 <USBD_LL_SetupStage+0x72>
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d822      	bhi.n	800cf78 <USBD_LL_SetupStage+0x86>
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <USBD_LL_SetupStage+0x4a>
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d00a      	beq.n	800cf50 <USBD_LL_SetupStage+0x5e>
 800cf3a:	e01d      	b.n	800cf78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fb77 	bl	800d638 <USBD_StdDevReq>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73fb      	strb	r3, [r7, #15]
      break;
 800cf4e:	e020      	b.n	800cf92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cf56:	4619      	mov	r1, r3
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 fbdf 	bl	800d71c <USBD_StdItfReq>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	73fb      	strb	r3, [r7, #15]
      break;
 800cf62:	e016      	b.n	800cf92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fc41 	bl	800d7f4 <USBD_StdEPReq>
 800cf72:	4603      	mov	r3, r0
 800cf74:	73fb      	strb	r3, [r7, #15]
      break;
 800cf76:	e00c      	b.n	800cf92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cf7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 fe7c 	bl	800ec84 <USBD_LL_StallEP>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf90:	bf00      	nop
  }

  return ret;
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	607a      	str	r2, [r7, #4]
 800cfa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800cfae:	7afb      	ldrb	r3, [r7, #11]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d177      	bne.n	800d0a4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cfba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cfc2:	2b03      	cmp	r3, #3
 800cfc4:	f040 80a1 	bne.w	800d10a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	8992      	ldrh	r2, [r2, #12]
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d91c      	bls.n	800d00e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	693a      	ldr	r2, [r7, #16]
 800cfda:	8992      	ldrh	r2, [r2, #12]
 800cfdc:	1a9a      	subs	r2, r3, r2
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	8992      	ldrh	r2, [r2, #12]
 800cfea:	441a      	add	r2, r3
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	6919      	ldr	r1, [r3, #16]
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	899b      	ldrh	r3, [r3, #12]
 800cff8:	461a      	mov	r2, r3
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	4293      	cmp	r3, r2
 800d000:	bf38      	it	cc
 800d002:	4613      	movcc	r3, r2
 800d004:	461a      	mov	r2, r3
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f001 f9a8 	bl	800e35c <USBD_CtlContinueRx>
 800d00c:	e07d      	b.n	800d10a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d014:	f003 031f 	and.w	r3, r3, #31
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d014      	beq.n	800d046 <USBD_LL_DataOutStage+0xaa>
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d81d      	bhi.n	800d05c <USBD_LL_DataOutStage+0xc0>
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <USBD_LL_DataOutStage+0x8e>
 800d024:	2b01      	cmp	r3, #1
 800d026:	d003      	beq.n	800d030 <USBD_LL_DataOutStage+0x94>
 800d028:	e018      	b.n	800d05c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d02a:	2300      	movs	r3, #0
 800d02c:	75bb      	strb	r3, [r7, #22]
            break;
 800d02e:	e018      	b.n	800d062 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d036:	b2db      	uxtb	r3, r3
 800d038:	4619      	mov	r1, r3
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f000 fa6e 	bl	800d51c <USBD_CoreFindIF>
 800d040:	4603      	mov	r3, r0
 800d042:	75bb      	strb	r3, [r7, #22]
            break;
 800d044:	e00d      	b.n	800d062 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	4619      	mov	r1, r3
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 fa70 	bl	800d536 <USBD_CoreFindEP>
 800d056:	4603      	mov	r3, r0
 800d058:	75bb      	strb	r3, [r7, #22]
            break;
 800d05a:	e002      	b.n	800d062 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d05c:	2300      	movs	r3, #0
 800d05e:	75bb      	strb	r3, [r7, #22]
            break;
 800d060:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d062:	7dbb      	ldrb	r3, [r7, #22]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d119      	bne.n	800d09c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b03      	cmp	r3, #3
 800d072:	d113      	bne.n	800d09c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d074:	7dba      	ldrb	r2, [r7, #22]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	32ae      	adds	r2, #174	@ 0xae
 800d07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00b      	beq.n	800d09c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800d084:	7dba      	ldrb	r2, [r7, #22]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d08c:	7dba      	ldrb	r2, [r7, #22]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	32ae      	adds	r2, #174	@ 0xae
 800d092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d096:	691b      	ldr	r3, [r3, #16]
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f001 f96e 	bl	800e37e <USBD_CtlSendStatus>
 800d0a2:	e032      	b.n	800d10a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d0a4:	7afb      	ldrb	r3, [r7, #11]
 800d0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f000 fa41 	bl	800d536 <USBD_CoreFindEP>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0b8:	7dbb      	ldrb	r3, [r7, #22]
 800d0ba:	2bff      	cmp	r3, #255	@ 0xff
 800d0bc:	d025      	beq.n	800d10a <USBD_LL_DataOutStage+0x16e>
 800d0be:	7dbb      	ldrb	r3, [r7, #22]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d122      	bne.n	800d10a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d117      	bne.n	800d100 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d0d0:	7dba      	ldrb	r2, [r7, #22]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	32ae      	adds	r2, #174	@ 0xae
 800d0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00f      	beq.n	800d100 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800d0e0:	7dba      	ldrb	r2, [r7, #22]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d0e8:	7dba      	ldrb	r2, [r7, #22]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	32ae      	adds	r2, #174	@ 0xae
 800d0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	7afa      	ldrb	r2, [r7, #11]
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	4798      	blx	r3
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d100:	7dfb      	ldrb	r3, [r7, #23]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800d106:	7dfb      	ldrb	r3, [r7, #23]
 800d108:	e000      	b.n	800d10c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	460b      	mov	r3, r1
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d122:	7afb      	ldrb	r3, [r7, #11]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d178      	bne.n	800d21a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	3314      	adds	r3, #20
 800d12c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d134:	2b02      	cmp	r3, #2
 800d136:	d163      	bne.n	800d200 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	8992      	ldrh	r2, [r2, #12]
 800d140:	4293      	cmp	r3, r2
 800d142:	d91c      	bls.n	800d17e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	8992      	ldrh	r2, [r2, #12]
 800d14c:	1a9a      	subs	r2, r3, r2
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	8992      	ldrh	r2, [r2, #12]
 800d15a:	441a      	add	r2, r3
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	6919      	ldr	r1, [r3, #16]
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	461a      	mov	r2, r3
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f001 f8c4 	bl	800e2f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d170:	2300      	movs	r3, #0
 800d172:	2200      	movs	r2, #0
 800d174:	2100      	movs	r1, #0
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f001 fe2e 	bl	800edd8 <USBD_LL_PrepareReceive>
 800d17c:	e040      	b.n	800d200 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	899b      	ldrh	r3, [r3, #12]
 800d182:	461a      	mov	r2, r3
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d11c      	bne.n	800d1c6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d194:	4293      	cmp	r3, r2
 800d196:	d316      	bcc.n	800d1c6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d20f      	bcs.n	800d1c6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f001 f8a4 	bl	800e2f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2100      	movs	r1, #0
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f001 fe0a 	bl	800edd8 <USBD_LL_PrepareReceive>
 800d1c4:	e01c      	b.n	800d200 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b03      	cmp	r3, #3
 800d1d0:	d10f      	bne.n	800d1f2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d009      	beq.n	800d1f2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1f2:	2180      	movs	r1, #128	@ 0x80
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f001 fd45 	bl	800ec84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f001 f8d2 	bl	800e3a4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d03a      	beq.n	800d280 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f7ff fe30 	bl	800ce70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2200      	movs	r2, #0
 800d214:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d218:	e032      	b.n	800d280 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d21a:	7afb      	ldrb	r3, [r7, #11]
 800d21c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d220:	b2db      	uxtb	r3, r3
 800d222:	4619      	mov	r1, r3
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f000 f986 	bl	800d536 <USBD_CoreFindEP>
 800d22a:	4603      	mov	r3, r0
 800d22c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d22e:	7dfb      	ldrb	r3, [r7, #23]
 800d230:	2bff      	cmp	r3, #255	@ 0xff
 800d232:	d025      	beq.n	800d280 <USBD_LL_DataInStage+0x16c>
 800d234:	7dfb      	ldrb	r3, [r7, #23]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d122      	bne.n	800d280 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d240:	b2db      	uxtb	r3, r3
 800d242:	2b03      	cmp	r3, #3
 800d244:	d11c      	bne.n	800d280 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d246:	7dfa      	ldrb	r2, [r7, #23]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	32ae      	adds	r2, #174	@ 0xae
 800d24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d014      	beq.n	800d280 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800d256:	7dfa      	ldrb	r2, [r7, #23]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d25e:	7dfa      	ldrb	r2, [r7, #23]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	32ae      	adds	r2, #174	@ 0xae
 800d264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	7afa      	ldrb	r2, [r7, #11]
 800d26c:	4611      	mov	r1, r2
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	4798      	blx	r3
 800d272:	4603      	mov	r3, r0
 800d274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d276:	7dbb      	ldrb	r3, [r7, #22]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800d27c:	7dbb      	ldrb	r3, [r7, #22]
 800d27e:	e000      	b.n	800d282 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3718      	adds	r7, #24
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b084      	sub	sp, #16
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d014      	beq.n	800d2f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00e      	beq.n	800d2f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	6852      	ldr	r2, [r2, #4]
 800d2de:	b2d2      	uxtb	r2, r2
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	4798      	blx	r3
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2f0:	2340      	movs	r3, #64	@ 0x40
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f001 fc7f 	bl	800ebfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2240      	movs	r2, #64	@ 0x40
 800d308:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d30c:	2340      	movs	r3, #64	@ 0x40
 800d30e:	2200      	movs	r2, #0
 800d310:	2180      	movs	r1, #128	@ 0x80
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f001 fc71 	bl	800ebfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2240      	movs	r2, #64	@ 0x40
 800d324:	841a      	strh	r2, [r3, #32]

  return ret;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	78fa      	ldrb	r2, [r7, #3]
 800d340:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b04      	cmp	r3, #4
 800d362:	d006      	beq.n	800d372 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2204      	movs	r2, #4
 800d376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d396:	b2db      	uxtb	r3, r3
 800d398:	2b04      	cmp	r3, #4
 800d39a:	d106      	bne.n	800d3aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d110      	bne.n	800d3ee <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00b      	beq.n	800d3ee <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d005      	beq.n	800d3ee <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	460b      	mov	r3, r1
 800d402:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	32ae      	adds	r2, #174	@ 0xae
 800d40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d101      	bne.n	800d41a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d416:	2303      	movs	r3, #3
 800d418:	e01c      	b.n	800d454 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b03      	cmp	r3, #3
 800d424:	d115      	bne.n	800d452 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	32ae      	adds	r2, #174	@ 0xae
 800d430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00b      	beq.n	800d452 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	32ae      	adds	r2, #174	@ 0xae
 800d444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	78fa      	ldrb	r2, [r7, #3]
 800d44c:	4611      	mov	r1, r2
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	32ae      	adds	r2, #174	@ 0xae
 800d472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d47a:	2303      	movs	r3, #3
 800d47c:	e01c      	b.n	800d4b8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b03      	cmp	r3, #3
 800d488:	d115      	bne.n	800d4b6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	32ae      	adds	r2, #174	@ 0xae
 800d494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00b      	beq.n	800d4b6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	32ae      	adds	r2, #174	@ 0xae
 800d4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ae:	78fa      	ldrb	r2, [r7, #3]
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00e      	beq.n	800d512 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	6852      	ldr	r2, [r2, #4]
 800d500:	b2d2      	uxtb	r2, r2
 800d502:	4611      	mov	r1, r2
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	4798      	blx	r3
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d50e:	2303      	movs	r3, #3
 800d510:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d512:	7bfb      	ldrb	r3, [r7, #15]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d528:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d536:	b480      	push	{r7}
 800d538:	b083      	sub	sp, #12
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	460b      	mov	r3, r1
 800d540:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d542:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d544:	4618      	mov	r0, r3
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d564:	2300      	movs	r3, #0
 800d566:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	885b      	ldrh	r3, [r3, #2]
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	7812      	ldrb	r2, [r2, #0]
 800d572:	4293      	cmp	r3, r2
 800d574:	d91f      	bls.n	800d5b6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d57c:	e013      	b.n	800d5a6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d57e:	f107 030a 	add.w	r3, r7, #10
 800d582:	4619      	mov	r1, r3
 800d584:	6978      	ldr	r0, [r7, #20]
 800d586:	f000 f81b 	bl	800d5c0 <USBD_GetNextDesc>
 800d58a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	785b      	ldrb	r3, [r3, #1]
 800d590:	2b05      	cmp	r3, #5
 800d592:	d108      	bne.n	800d5a6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	789b      	ldrb	r3, [r3, #2]
 800d59c:	78fa      	ldrb	r2, [r7, #3]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d008      	beq.n	800d5b4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	885b      	ldrh	r3, [r3, #2]
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	897b      	ldrh	r3, [r7, #10]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d8e5      	bhi.n	800d57e <USBD_GetEpDesc+0x2e>
 800d5b2:	e000      	b.n	800d5b6 <USBD_GetEpDesc+0x66>
          break;
 800d5b4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d5b6:	693b      	ldr	r3, [r7, #16]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	881b      	ldrh	r3, [r3, #0]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	7812      	ldrb	r2, [r2, #0]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b087      	sub	sp, #28
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	3301      	adds	r3, #1
 800d60e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d616:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d61a:	021b      	lsls	r3, r3, #8
 800d61c:	b21a      	sxth	r2, r3
 800d61e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d622:	4313      	orrs	r3, r2
 800d624:	b21b      	sxth	r3, r3
 800d626:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d628:	89fb      	ldrh	r3, [r7, #14]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	371c      	adds	r7, #28
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
	...

0800d638 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d64e:	2b40      	cmp	r3, #64	@ 0x40
 800d650:	d005      	beq.n	800d65e <USBD_StdDevReq+0x26>
 800d652:	2b40      	cmp	r3, #64	@ 0x40
 800d654:	d857      	bhi.n	800d706 <USBD_StdDevReq+0xce>
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00f      	beq.n	800d67a <USBD_StdDevReq+0x42>
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	d153      	bne.n	800d706 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	32ae      	adds	r2, #174	@ 0xae
 800d668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	4798      	blx	r3
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]
      break;
 800d678:	e04a      	b.n	800d710 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	785b      	ldrb	r3, [r3, #1]
 800d67e:	2b09      	cmp	r3, #9
 800d680:	d83b      	bhi.n	800d6fa <USBD_StdDevReq+0xc2>
 800d682:	a201      	add	r2, pc, #4	@ (adr r2, 800d688 <USBD_StdDevReq+0x50>)
 800d684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d688:	0800d6dd 	.word	0x0800d6dd
 800d68c:	0800d6f1 	.word	0x0800d6f1
 800d690:	0800d6fb 	.word	0x0800d6fb
 800d694:	0800d6e7 	.word	0x0800d6e7
 800d698:	0800d6fb 	.word	0x0800d6fb
 800d69c:	0800d6bb 	.word	0x0800d6bb
 800d6a0:	0800d6b1 	.word	0x0800d6b1
 800d6a4:	0800d6fb 	.word	0x0800d6fb
 800d6a8:	0800d6d3 	.word	0x0800d6d3
 800d6ac:	0800d6c5 	.word	0x0800d6c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fa3e 	bl	800db34 <USBD_GetDescriptor>
          break;
 800d6b8:	e024      	b.n	800d704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fba3 	bl	800de08 <USBD_SetAddress>
          break;
 800d6c2:	e01f      	b.n	800d704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fbe2 	bl	800de90 <USBD_SetConfig>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
          break;
 800d6d0:	e018      	b.n	800d704 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fc85 	bl	800dfe4 <USBD_GetConfig>
          break;
 800d6da:	e013      	b.n	800d704 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d6dc:	6839      	ldr	r1, [r7, #0]
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fcb6 	bl	800e050 <USBD_GetStatus>
          break;
 800d6e4:	e00e      	b.n	800d704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fce5 	bl	800e0b8 <USBD_SetFeature>
          break;
 800d6ee:	e009      	b.n	800d704 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fd09 	bl	800e10a <USBD_ClrFeature>
          break;
 800d6f8:	e004      	b.n	800d704 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fd60 	bl	800e1c2 <USBD_CtlError>
          break;
 800d702:	bf00      	nop
      }
      break;
 800d704:	e004      	b.n	800d710 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d706:	6839      	ldr	r1, [r7, #0]
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fd5a 	bl	800e1c2 <USBD_CtlError>
      break;
 800d70e:	bf00      	nop
  }

  return ret;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop

0800d71c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d726:	2300      	movs	r3, #0
 800d728:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d732:	2b40      	cmp	r3, #64	@ 0x40
 800d734:	d005      	beq.n	800d742 <USBD_StdItfReq+0x26>
 800d736:	2b40      	cmp	r3, #64	@ 0x40
 800d738:	d852      	bhi.n	800d7e0 <USBD_StdItfReq+0xc4>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <USBD_StdItfReq+0x26>
 800d73e:	2b20      	cmp	r3, #32
 800d740:	d14e      	bne.n	800d7e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	3b01      	subs	r3, #1
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d840      	bhi.n	800d7d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	889b      	ldrh	r3, [r3, #4]
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b01      	cmp	r3, #1
 800d758:	d836      	bhi.n	800d7c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	889b      	ldrh	r3, [r3, #4]
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	4619      	mov	r1, r3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff feda 	bl	800d51c <USBD_CoreFindIF>
 800d768:	4603      	mov	r3, r0
 800d76a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	2bff      	cmp	r3, #255	@ 0xff
 800d770:	d01d      	beq.n	800d7ae <USBD_StdItfReq+0x92>
 800d772:	7bbb      	ldrb	r3, [r7, #14]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d11a      	bne.n	800d7ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d778:	7bba      	ldrb	r2, [r7, #14]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	32ae      	adds	r2, #174	@ 0xae
 800d77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00f      	beq.n	800d7a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d788:	7bba      	ldrb	r2, [r7, #14]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d790:	7bba      	ldrb	r2, [r7, #14]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	32ae      	adds	r2, #174	@ 0xae
 800d796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	6839      	ldr	r1, [r7, #0]
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	4798      	blx	r3
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d7a6:	e004      	b.n	800d7b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d7ac:	e001      	b.n	800d7b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	88db      	ldrh	r3, [r3, #6]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d110      	bne.n	800d7dc <USBD_StdItfReq+0xc0>
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10d      	bne.n	800d7dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fddc 	bl	800e37e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d7c6:	e009      	b.n	800d7dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fcf9 	bl	800e1c2 <USBD_CtlError>
          break;
 800d7d0:	e004      	b.n	800d7dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fcf4 	bl	800e1c2 <USBD_CtlError>
          break;
 800d7da:	e000      	b.n	800d7de <USBD_StdItfReq+0xc2>
          break;
 800d7dc:	bf00      	nop
      }
      break;
 800d7de:	e004      	b.n	800d7ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fced 	bl	800e1c2 <USBD_CtlError>
      break;
 800d7e8:	bf00      	nop
  }

  return ret;
 800d7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	889b      	ldrh	r3, [r3, #4]
 800d806:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d810:	2b40      	cmp	r3, #64	@ 0x40
 800d812:	d007      	beq.n	800d824 <USBD_StdEPReq+0x30>
 800d814:	2b40      	cmp	r3, #64	@ 0x40
 800d816:	f200 8181 	bhi.w	800db1c <USBD_StdEPReq+0x328>
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d02a      	beq.n	800d874 <USBD_StdEPReq+0x80>
 800d81e:	2b20      	cmp	r3, #32
 800d820:	f040 817c 	bne.w	800db1c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d824:	7bbb      	ldrb	r3, [r7, #14]
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7ff fe84 	bl	800d536 <USBD_CoreFindEP>
 800d82e:	4603      	mov	r3, r0
 800d830:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d832:	7b7b      	ldrb	r3, [r7, #13]
 800d834:	2bff      	cmp	r3, #255	@ 0xff
 800d836:	f000 8176 	beq.w	800db26 <USBD_StdEPReq+0x332>
 800d83a:	7b7b      	ldrb	r3, [r7, #13]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f040 8172 	bne.w	800db26 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800d842:	7b7a      	ldrb	r2, [r7, #13]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d84a:	7b7a      	ldrb	r2, [r7, #13]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	32ae      	adds	r2, #174	@ 0xae
 800d850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	f000 8165 	beq.w	800db26 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d85c:	7b7a      	ldrb	r2, [r7, #13]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	32ae      	adds	r2, #174	@ 0xae
 800d862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	4798      	blx	r3
 800d86e:	4603      	mov	r3, r0
 800d870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d872:	e158      	b.n	800db26 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	785b      	ldrb	r3, [r3, #1]
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d008      	beq.n	800d88e <USBD_StdEPReq+0x9a>
 800d87c:	2b03      	cmp	r3, #3
 800d87e:	f300 8147 	bgt.w	800db10 <USBD_StdEPReq+0x31c>
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 809b 	beq.w	800d9be <USBD_StdEPReq+0x1ca>
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d03c      	beq.n	800d906 <USBD_StdEPReq+0x112>
 800d88c:	e140      	b.n	800db10 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b02      	cmp	r3, #2
 800d898:	d002      	beq.n	800d8a0 <USBD_StdEPReq+0xac>
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d016      	beq.n	800d8cc <USBD_StdEPReq+0xd8>
 800d89e:	e02c      	b.n	800d8fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00d      	beq.n	800d8c2 <USBD_StdEPReq+0xce>
 800d8a6:	7bbb      	ldrb	r3, [r7, #14]
 800d8a8:	2b80      	cmp	r3, #128	@ 0x80
 800d8aa:	d00a      	beq.n	800d8c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8ac:	7bbb      	ldrb	r3, [r7, #14]
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f001 f9e7 	bl	800ec84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8b6:	2180      	movs	r1, #128	@ 0x80
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f001 f9e3 	bl	800ec84 <USBD_LL_StallEP>
 800d8be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8c0:	e020      	b.n	800d904 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fc7c 	bl	800e1c2 <USBD_CtlError>
              break;
 800d8ca:	e01b      	b.n	800d904 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	885b      	ldrh	r3, [r3, #2]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10e      	bne.n	800d8f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d8d4:	7bbb      	ldrb	r3, [r7, #14]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00b      	beq.n	800d8f2 <USBD_StdEPReq+0xfe>
 800d8da:	7bbb      	ldrb	r3, [r7, #14]
 800d8dc:	2b80      	cmp	r3, #128	@ 0x80
 800d8de:	d008      	beq.n	800d8f2 <USBD_StdEPReq+0xfe>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	88db      	ldrh	r3, [r3, #6]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d104      	bne.n	800d8f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8e8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f001 f9c9 	bl	800ec84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fd43 	bl	800e37e <USBD_CtlSendStatus>

              break;
 800d8f8:	e004      	b.n	800d904 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 fc60 	bl	800e1c2 <USBD_CtlError>
              break;
 800d902:	bf00      	nop
          }
          break;
 800d904:	e109      	b.n	800db1a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d002      	beq.n	800d918 <USBD_StdEPReq+0x124>
 800d912:	2b03      	cmp	r3, #3
 800d914:	d016      	beq.n	800d944 <USBD_StdEPReq+0x150>
 800d916:	e04b      	b.n	800d9b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00d      	beq.n	800d93a <USBD_StdEPReq+0x146>
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
 800d920:	2b80      	cmp	r3, #128	@ 0x80
 800d922:	d00a      	beq.n	800d93a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d924:	7bbb      	ldrb	r3, [r7, #14]
 800d926:	4619      	mov	r1, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 f9ab 	bl	800ec84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d92e:	2180      	movs	r1, #128	@ 0x80
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f001 f9a7 	bl	800ec84 <USBD_LL_StallEP>
 800d936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d938:	e040      	b.n	800d9bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fc40 	bl	800e1c2 <USBD_CtlError>
              break;
 800d942:	e03b      	b.n	800d9bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	885b      	ldrh	r3, [r3, #2]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d136      	bne.n	800d9ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d94c:	7bbb      	ldrb	r3, [r7, #14]
 800d94e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d952:	2b00      	cmp	r3, #0
 800d954:	d004      	beq.n	800d960 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d956:	7bbb      	ldrb	r3, [r7, #14]
 800d958:	4619      	mov	r1, r3
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f001 f9b1 	bl	800ecc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 fd0c 	bl	800e37e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d966:	7bbb      	ldrb	r3, [r7, #14]
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7ff fde3 	bl	800d536 <USBD_CoreFindEP>
 800d970:	4603      	mov	r3, r0
 800d972:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d974:	7b7b      	ldrb	r3, [r7, #13]
 800d976:	2bff      	cmp	r3, #255	@ 0xff
 800d978:	d01f      	beq.n	800d9ba <USBD_StdEPReq+0x1c6>
 800d97a:	7b7b      	ldrb	r3, [r7, #13]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d11c      	bne.n	800d9ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d980:	7b7a      	ldrb	r2, [r7, #13]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d988:	7b7a      	ldrb	r2, [r7, #13]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	32ae      	adds	r2, #174	@ 0xae
 800d98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d010      	beq.n	800d9ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d998:	7b7a      	ldrb	r2, [r7, #13]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	32ae      	adds	r2, #174	@ 0xae
 800d99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	4798      	blx	r3
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d9ae:	e004      	b.n	800d9ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d9b0:	6839      	ldr	r1, [r7, #0]
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 fc05 	bl	800e1c2 <USBD_CtlError>
              break;
 800d9b8:	e000      	b.n	800d9bc <USBD_StdEPReq+0x1c8>
              break;
 800d9ba:	bf00      	nop
          }
          break;
 800d9bc:	e0ad      	b.n	800db1a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d002      	beq.n	800d9d0 <USBD_StdEPReq+0x1dc>
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d033      	beq.n	800da36 <USBD_StdEPReq+0x242>
 800d9ce:	e099      	b.n	800db04 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d007      	beq.n	800d9e6 <USBD_StdEPReq+0x1f2>
 800d9d6:	7bbb      	ldrb	r3, [r7, #14]
 800d9d8:	2b80      	cmp	r3, #128	@ 0x80
 800d9da:	d004      	beq.n	800d9e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fbef 	bl	800e1c2 <USBD_CtlError>
                break;
 800d9e4:	e093      	b.n	800db0e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	da0b      	bge.n	800da06 <USBD_StdEPReq+0x212>
 800d9ee:	7bbb      	ldrb	r3, [r7, #14]
 800d9f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	3310      	adds	r3, #16
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	4413      	add	r3, r2
 800da02:	3304      	adds	r3, #4
 800da04:	e00b      	b.n	800da1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da06:	7bbb      	ldrb	r3, [r7, #14]
 800da08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da0c:	4613      	mov	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	4413      	add	r3, r2
 800da1c:	3304      	adds	r3, #4
 800da1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	2200      	movs	r2, #0
 800da24:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	330e      	adds	r3, #14
 800da2a:	2202      	movs	r2, #2
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fc44 	bl	800e2bc <USBD_CtlSendData>
              break;
 800da34:	e06b      	b.n	800db0e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800da36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	da11      	bge.n	800da62 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800da3e:	7bbb      	ldrb	r3, [r7, #14]
 800da40:	f003 020f 	and.w	r2, r3, #15
 800da44:	6879      	ldr	r1, [r7, #4]
 800da46:	4613      	mov	r3, r2
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	4413      	add	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	440b      	add	r3, r1
 800da50:	3323      	adds	r3, #35	@ 0x23
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d117      	bne.n	800da88 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800da58:	6839      	ldr	r1, [r7, #0]
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fbb1 	bl	800e1c2 <USBD_CtlError>
                  break;
 800da60:	e055      	b.n	800db0e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800da62:	7bbb      	ldrb	r3, [r7, #14]
 800da64:	f003 020f 	and.w	r2, r3, #15
 800da68:	6879      	ldr	r1, [r7, #4]
 800da6a:	4613      	mov	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	440b      	add	r3, r1
 800da74:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d104      	bne.n	800da88 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fb9e 	bl	800e1c2 <USBD_CtlError>
                  break;
 800da86:	e042      	b.n	800db0e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	da0b      	bge.n	800daa8 <USBD_StdEPReq+0x2b4>
 800da90:	7bbb      	ldrb	r3, [r7, #14]
 800da92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	3310      	adds	r3, #16
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	4413      	add	r3, r2
 800daa4:	3304      	adds	r3, #4
 800daa6:	e00b      	b.n	800dac0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
 800daaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daae:	4613      	mov	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	4413      	add	r3, r2
 800dabe:	3304      	adds	r3, #4
 800dac0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dac2:	7bbb      	ldrb	r3, [r7, #14]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <USBD_StdEPReq+0x2da>
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	2b80      	cmp	r3, #128	@ 0x80
 800dacc:	d103      	bne.n	800dad6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	2200      	movs	r2, #0
 800dad2:	739a      	strb	r2, [r3, #14]
 800dad4:	e00e      	b.n	800daf4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	4619      	mov	r1, r3
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f001 f910 	bl	800ed00 <USBD_LL_IsStallEP>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2201      	movs	r2, #1
 800daea:	739a      	strb	r2, [r3, #14]
 800daec:	e002      	b.n	800daf4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2200      	movs	r2, #0
 800daf2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	330e      	adds	r3, #14
 800daf8:	2202      	movs	r2, #2
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fbdd 	bl	800e2bc <USBD_CtlSendData>
              break;
 800db02:	e004      	b.n	800db0e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800db04:	6839      	ldr	r1, [r7, #0]
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fb5b 	bl	800e1c2 <USBD_CtlError>
              break;
 800db0c:	bf00      	nop
          }
          break;
 800db0e:	e004      	b.n	800db1a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fb55 	bl	800e1c2 <USBD_CtlError>
          break;
 800db18:	bf00      	nop
      }
      break;
 800db1a:	e005      	b.n	800db28 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800db1c:	6839      	ldr	r1, [r7, #0]
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fb4f 	bl	800e1c2 <USBD_CtlError>
      break;
 800db24:	e000      	b.n	800db28 <USBD_StdEPReq+0x334>
      break;
 800db26:	bf00      	nop
  }

  return ret;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
	...

0800db34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db3e:	2300      	movs	r3, #0
 800db40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800db42:	2300      	movs	r3, #0
 800db44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800db46:	2300      	movs	r3, #0
 800db48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	885b      	ldrh	r3, [r3, #2]
 800db4e:	0a1b      	lsrs	r3, r3, #8
 800db50:	b29b      	uxth	r3, r3
 800db52:	3b01      	subs	r3, #1
 800db54:	2b06      	cmp	r3, #6
 800db56:	f200 8128 	bhi.w	800ddaa <USBD_GetDescriptor+0x276>
 800db5a:	a201      	add	r2, pc, #4	@ (adr r2, 800db60 <USBD_GetDescriptor+0x2c>)
 800db5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db60:	0800db7d 	.word	0x0800db7d
 800db64:	0800db95 	.word	0x0800db95
 800db68:	0800dbd5 	.word	0x0800dbd5
 800db6c:	0800ddab 	.word	0x0800ddab
 800db70:	0800ddab 	.word	0x0800ddab
 800db74:	0800dd4b 	.word	0x0800dd4b
 800db78:	0800dd77 	.word	0x0800dd77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	7c12      	ldrb	r2, [r2, #16]
 800db88:	f107 0108 	add.w	r1, r7, #8
 800db8c:	4610      	mov	r0, r2
 800db8e:	4798      	blx	r3
 800db90:	60f8      	str	r0, [r7, #12]
      break;
 800db92:	e112      	b.n	800ddba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7c1b      	ldrb	r3, [r3, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10d      	bne.n	800dbb8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba4:	f107 0208 	add.w	r2, r7, #8
 800dba8:	4610      	mov	r0, r2
 800dbaa:	4798      	blx	r3
 800dbac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	2202      	movs	r2, #2
 800dbb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dbb6:	e100      	b.n	800ddba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc0:	f107 0208 	add.w	r2, r7, #8
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	4798      	blx	r3
 800dbc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	2202      	movs	r2, #2
 800dbd0:	701a      	strb	r2, [r3, #0]
      break;
 800dbd2:	e0f2      	b.n	800ddba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	885b      	ldrh	r3, [r3, #2]
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b05      	cmp	r3, #5
 800dbdc:	f200 80ac 	bhi.w	800dd38 <USBD_GetDescriptor+0x204>
 800dbe0:	a201      	add	r2, pc, #4	@ (adr r2, 800dbe8 <USBD_GetDescriptor+0xb4>)
 800dbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe6:	bf00      	nop
 800dbe8:	0800dc01 	.word	0x0800dc01
 800dbec:	0800dc35 	.word	0x0800dc35
 800dbf0:	0800dc69 	.word	0x0800dc69
 800dbf4:	0800dc9d 	.word	0x0800dc9d
 800dbf8:	0800dcd1 	.word	0x0800dcd1
 800dbfc:	0800dd05 	.word	0x0800dd05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	7c12      	ldrb	r2, [r2, #16]
 800dc18:	f107 0108 	add.w	r1, r7, #8
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4798      	blx	r3
 800dc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc22:	e091      	b.n	800dd48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 facb 	bl	800e1c2 <USBD_CtlError>
            err++;
 800dc2c:	7afb      	ldrb	r3, [r7, #11]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	72fb      	strb	r3, [r7, #11]
          break;
 800dc32:	e089      	b.n	800dd48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00b      	beq.n	800dc58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	7c12      	ldrb	r2, [r2, #16]
 800dc4c:	f107 0108 	add.w	r1, r7, #8
 800dc50:	4610      	mov	r0, r2
 800dc52:	4798      	blx	r3
 800dc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc56:	e077      	b.n	800dd48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fab1 	bl	800e1c2 <USBD_CtlError>
            err++;
 800dc60:	7afb      	ldrb	r3, [r7, #11]
 800dc62:	3301      	adds	r3, #1
 800dc64:	72fb      	strb	r3, [r7, #11]
          break;
 800dc66:	e06f      	b.n	800dd48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00b      	beq.n	800dc8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	7c12      	ldrb	r2, [r2, #16]
 800dc80:	f107 0108 	add.w	r1, r7, #8
 800dc84:	4610      	mov	r0, r2
 800dc86:	4798      	blx	r3
 800dc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc8a:	e05d      	b.n	800dd48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fa97 	bl	800e1c2 <USBD_CtlError>
            err++;
 800dc94:	7afb      	ldrb	r3, [r7, #11]
 800dc96:	3301      	adds	r3, #1
 800dc98:	72fb      	strb	r3, [r7, #11]
          break;
 800dc9a:	e055      	b.n	800dd48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00b      	beq.n	800dcc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	7c12      	ldrb	r2, [r2, #16]
 800dcb4:	f107 0108 	add.w	r1, r7, #8
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
 800dcbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcbe:	e043      	b.n	800dd48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fa7d 	bl	800e1c2 <USBD_CtlError>
            err++;
 800dcc8:	7afb      	ldrb	r3, [r7, #11]
 800dcca:	3301      	adds	r3, #1
 800dccc:	72fb      	strb	r3, [r7, #11]
          break;
 800dcce:	e03b      	b.n	800dd48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00b      	beq.n	800dcf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	7c12      	ldrb	r2, [r2, #16]
 800dce8:	f107 0108 	add.w	r1, r7, #8
 800dcec:	4610      	mov	r0, r2
 800dcee:	4798      	blx	r3
 800dcf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcf2:	e029      	b.n	800dd48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa63 	bl	800e1c2 <USBD_CtlError>
            err++;
 800dcfc:	7afb      	ldrb	r3, [r7, #11]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	72fb      	strb	r3, [r7, #11]
          break;
 800dd02:	e021      	b.n	800dd48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd0a:	699b      	ldr	r3, [r3, #24]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00b      	beq.n	800dd28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd16:	699b      	ldr	r3, [r3, #24]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	7c12      	ldrb	r2, [r2, #16]
 800dd1c:	f107 0108 	add.w	r1, r7, #8
 800dd20:	4610      	mov	r0, r2
 800dd22:	4798      	blx	r3
 800dd24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd26:	e00f      	b.n	800dd48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fa49 	bl	800e1c2 <USBD_CtlError>
            err++;
 800dd30:	7afb      	ldrb	r3, [r7, #11]
 800dd32:	3301      	adds	r3, #1
 800dd34:	72fb      	strb	r3, [r7, #11]
          break;
 800dd36:	e007      	b.n	800dd48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 fa41 	bl	800e1c2 <USBD_CtlError>
          err++;
 800dd40:	7afb      	ldrb	r3, [r7, #11]
 800dd42:	3301      	adds	r3, #1
 800dd44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dd46:	bf00      	nop
      }
      break;
 800dd48:	e037      	b.n	800ddba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	7c1b      	ldrb	r3, [r3, #16]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d109      	bne.n	800dd66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd5a:	f107 0208 	add.w	r2, r7, #8
 800dd5e:	4610      	mov	r0, r2
 800dd60:	4798      	blx	r3
 800dd62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd64:	e029      	b.n	800ddba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fa2a 	bl	800e1c2 <USBD_CtlError>
        err++;
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	3301      	adds	r3, #1
 800dd72:	72fb      	strb	r3, [r7, #11]
      break;
 800dd74:	e021      	b.n	800ddba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	7c1b      	ldrb	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10d      	bne.n	800dd9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd86:	f107 0208 	add.w	r2, r7, #8
 800dd8a:	4610      	mov	r0, r2
 800dd8c:	4798      	blx	r3
 800dd8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	3301      	adds	r3, #1
 800dd94:	2207      	movs	r2, #7
 800dd96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd98:	e00f      	b.n	800ddba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 fa10 	bl	800e1c2 <USBD_CtlError>
        err++;
 800dda2:	7afb      	ldrb	r3, [r7, #11]
 800dda4:	3301      	adds	r3, #1
 800dda6:	72fb      	strb	r3, [r7, #11]
      break;
 800dda8:	e007      	b.n	800ddba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fa08 	bl	800e1c2 <USBD_CtlError>
      err++;
 800ddb2:	7afb      	ldrb	r3, [r7, #11]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	72fb      	strb	r3, [r7, #11]
      break;
 800ddb8:	bf00      	nop
  }

  if (err != 0U)
 800ddba:	7afb      	ldrb	r3, [r7, #11]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d11e      	bne.n	800ddfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	88db      	ldrh	r3, [r3, #6]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d016      	beq.n	800ddf6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ddc8:	893b      	ldrh	r3, [r7, #8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00e      	beq.n	800ddec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	88da      	ldrh	r2, [r3, #6]
 800ddd2:	893b      	ldrh	r3, [r7, #8]
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	bf28      	it	cs
 800ddd8:	4613      	movcs	r3, r2
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ddde:	893b      	ldrh	r3, [r7, #8]
 800dde0:	461a      	mov	r2, r3
 800dde2:	68f9      	ldr	r1, [r7, #12]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fa69 	bl	800e2bc <USBD_CtlSendData>
 800ddea:	e009      	b.n	800de00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f9e7 	bl	800e1c2 <USBD_CtlError>
 800ddf4:	e004      	b.n	800de00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fac1 	bl	800e37e <USBD_CtlSendStatus>
 800ddfc:	e000      	b.n	800de00 <USBD_GetDescriptor+0x2cc>
    return;
 800ddfe:	bf00      	nop
  }
}
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop

0800de08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	889b      	ldrh	r3, [r3, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d131      	bne.n	800de7e <USBD_SetAddress+0x76>
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	88db      	ldrh	r3, [r3, #6]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d12d      	bne.n	800de7e <USBD_SetAddress+0x76>
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	885b      	ldrh	r3, [r3, #2]
 800de26:	2b7f      	cmp	r3, #127	@ 0x7f
 800de28:	d829      	bhi.n	800de7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	885b      	ldrh	r3, [r3, #2]
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b03      	cmp	r3, #3
 800de40:	d104      	bne.n	800de4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f9bc 	bl	800e1c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de4a:	e01d      	b.n	800de88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	7bfa      	ldrb	r2, [r7, #15]
 800de50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800de54:	7bfb      	ldrb	r3, [r7, #15]
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 ff7d 	bl	800ed58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fa8d 	bl	800e37e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d004      	beq.n	800de74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2202      	movs	r2, #2
 800de6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de72:	e009      	b.n	800de88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2201      	movs	r2, #1
 800de78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de7c:	e004      	b.n	800de88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f99e 	bl	800e1c2 <USBD_CtlError>
  }
}
 800de86:	bf00      	nop
 800de88:	bf00      	nop
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	885b      	ldrh	r3, [r3, #2]
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	4b4e      	ldr	r3, [pc, #312]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800dea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dea8:	4b4d      	ldr	r3, [pc, #308]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d905      	bls.n	800debc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f985 	bl	800e1c2 <USBD_CtlError>
    return USBD_FAIL;
 800deb8:	2303      	movs	r3, #3
 800deba:	e08c      	b.n	800dfd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d002      	beq.n	800dece <USBD_SetConfig+0x3e>
 800dec8:	2b03      	cmp	r3, #3
 800deca:	d029      	beq.n	800df20 <USBD_SetConfig+0x90>
 800decc:	e075      	b.n	800dfba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dece:	4b44      	ldr	r3, [pc, #272]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d020      	beq.n	800df18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ded6:	4b42      	ldr	r3, [pc, #264]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dee0:	4b3f      	ldr	r3, [pc, #252]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7fe ffcd 	bl	800ce86 <USBD_SetClassConfig>
 800deec:	4603      	mov	r3, r0
 800deee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800def0:	7bfb      	ldrb	r3, [r7, #15]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d008      	beq.n	800df08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f962 	bl	800e1c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2202      	movs	r2, #2
 800df02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df06:	e065      	b.n	800dfd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fa38 	bl	800e37e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2203      	movs	r2, #3
 800df12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800df16:	e05d      	b.n	800dfd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 fa30 	bl	800e37e <USBD_CtlSendStatus>
      break;
 800df1e:	e059      	b.n	800dfd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800df20:	4b2f      	ldr	r3, [pc, #188]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d112      	bne.n	800df4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800df30:	4b2b      	ldr	r3, [pc, #172]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	461a      	mov	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df3a:	4b29      	ldr	r3, [pc, #164]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f7fe ffbc 	bl	800cebe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fa19 	bl	800e37e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df4c:	e042      	b.n	800dfd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800df4e:	4b24      	ldr	r3, [pc, #144]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	461a      	mov	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d02a      	beq.n	800dfb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	b2db      	uxtb	r3, r3
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7fe ffaa 	bl	800cebe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800df6a:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df74:	4b1a      	ldr	r3, [pc, #104]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	4619      	mov	r1, r3
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7fe ff83 	bl	800ce86 <USBD_SetClassConfig>
 800df80:	4603      	mov	r3, r0
 800df82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df84:	7bfb      	ldrb	r3, [r7, #15]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00f      	beq.n	800dfaa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 f918 	bl	800e1c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	b2db      	uxtb	r3, r3
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7fe ff8f 	bl	800cebe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dfa8:	e014      	b.n	800dfd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 f9e7 	bl	800e37e <USBD_CtlSendStatus>
      break;
 800dfb0:	e010      	b.n	800dfd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 f9e3 	bl	800e37e <USBD_CtlSendStatus>
      break;
 800dfb8:	e00c      	b.n	800dfd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f900 	bl	800e1c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfc2:	4b07      	ldr	r3, [pc, #28]	@ (800dfe0 <USBD_SetConfig+0x150>)
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7fe ff78 	bl	800cebe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dfce:	2303      	movs	r3, #3
 800dfd0:	73fb      	strb	r3, [r7, #15]
      break;
 800dfd2:	bf00      	nop
  }

  return ret;
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	20000ad4 	.word	0x20000ad4

0800dfe4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	88db      	ldrh	r3, [r3, #6]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d004      	beq.n	800e000 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f000 f8e2 	bl	800e1c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dffe:	e023      	b.n	800e048 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e006:	b2db      	uxtb	r3, r3
 800e008:	2b02      	cmp	r3, #2
 800e00a:	dc02      	bgt.n	800e012 <USBD_GetConfig+0x2e>
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dc03      	bgt.n	800e018 <USBD_GetConfig+0x34>
 800e010:	e015      	b.n	800e03e <USBD_GetConfig+0x5a>
 800e012:	2b03      	cmp	r3, #3
 800e014:	d00b      	beq.n	800e02e <USBD_GetConfig+0x4a>
 800e016:	e012      	b.n	800e03e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	3308      	adds	r3, #8
 800e022:	2201      	movs	r2, #1
 800e024:	4619      	mov	r1, r3
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 f948 	bl	800e2bc <USBD_CtlSendData>
        break;
 800e02c:	e00c      	b.n	800e048 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3304      	adds	r3, #4
 800e032:	2201      	movs	r2, #1
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f940 	bl	800e2bc <USBD_CtlSendData>
        break;
 800e03c:	e004      	b.n	800e048 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e03e:	6839      	ldr	r1, [r7, #0]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 f8be 	bl	800e1c2 <USBD_CtlError>
        break;
 800e046:	bf00      	nop
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e060:	b2db      	uxtb	r3, r3
 800e062:	3b01      	subs	r3, #1
 800e064:	2b02      	cmp	r3, #2
 800e066:	d81e      	bhi.n	800e0a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	88db      	ldrh	r3, [r3, #6]
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d004      	beq.n	800e07a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f8a5 	bl	800e1c2 <USBD_CtlError>
        break;
 800e078:	e01a      	b.n	800e0b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e086:	2b00      	cmp	r3, #0
 800e088:	d005      	beq.n	800e096 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	f043 0202 	orr.w	r2, r3, #2
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	330c      	adds	r3, #12
 800e09a:	2202      	movs	r2, #2
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f90c 	bl	800e2bc <USBD_CtlSendData>
      break;
 800e0a4:	e004      	b.n	800e0b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 f88a 	bl	800e1c2 <USBD_CtlError>
      break;
 800e0ae:	bf00      	nop
  }
}
 800e0b0:	bf00      	nop
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	885b      	ldrh	r3, [r3, #2]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d107      	bne.n	800e0da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f953 	bl	800e37e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e0d8:	e013      	b.n	800e102 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	885b      	ldrh	r3, [r3, #2]
 800e0de:	2b02      	cmp	r3, #2
 800e0e0:	d10b      	bne.n	800e0fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	889b      	ldrh	r3, [r3, #4]
 800e0e6:	0a1b      	lsrs	r3, r3, #8
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	b2da      	uxtb	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f943 	bl	800e37e <USBD_CtlSendStatus>
}
 800e0f8:	e003      	b.n	800e102 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 f860 	bl	800e1c2 <USBD_CtlError>
}
 800e102:	bf00      	nop
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b082      	sub	sp, #8
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	3b01      	subs	r3, #1
 800e11e:	2b02      	cmp	r3, #2
 800e120:	d80b      	bhi.n	800e13a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	885b      	ldrh	r3, [r3, #2]
 800e126:	2b01      	cmp	r3, #1
 800e128:	d10c      	bne.n	800e144 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f923 	bl	800e37e <USBD_CtlSendStatus>
      }
      break;
 800e138:	e004      	b.n	800e144 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f840 	bl	800e1c2 <USBD_CtlError>
      break;
 800e142:	e000      	b.n	800e146 <USBD_ClrFeature+0x3c>
      break;
 800e144:	bf00      	nop
  }
}
 800e146:	bf00      	nop
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b084      	sub	sp, #16
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	781a      	ldrb	r2, [r3, #0]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3301      	adds	r3, #1
 800e168:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	781a      	ldrb	r2, [r3, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3301      	adds	r3, #1
 800e176:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f7ff fa3d 	bl	800d5f8 <SWAPBYTE>
 800e17e:	4603      	mov	r3, r0
 800e180:	461a      	mov	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	3301      	adds	r3, #1
 800e18a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3301      	adds	r3, #1
 800e190:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f7ff fa30 	bl	800d5f8 <SWAPBYTE>
 800e198:	4603      	mov	r3, r0
 800e19a:	461a      	mov	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f7ff fa23 	bl	800d5f8 <SWAPBYTE>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	80da      	strh	r2, [r3, #6]
}
 800e1ba:	bf00      	nop
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1cc:	2180      	movs	r1, #128	@ 0x80
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 fd58 	bl	800ec84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fd54 	bl	800ec84 <USBD_LL_StallEP>
}
 800e1dc:	bf00      	nop
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d042      	beq.n	800e280 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e1fe:	6938      	ldr	r0, [r7, #16]
 800e200:	f000 f842 	bl	800e288 <USBD_GetLen>
 800e204:	4603      	mov	r3, r0
 800e206:	3301      	adds	r3, #1
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e20e:	d808      	bhi.n	800e222 <USBD_GetString+0x3e>
 800e210:	6938      	ldr	r0, [r7, #16]
 800e212:	f000 f839 	bl	800e288 <USBD_GetLen>
 800e216:	4603      	mov	r3, r0
 800e218:	3301      	adds	r3, #1
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	005b      	lsls	r3, r3, #1
 800e21e:	b29a      	uxth	r2, r3
 800e220:	e001      	b.n	800e226 <USBD_GetString+0x42>
 800e222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e22a:	7dfb      	ldrb	r3, [r7, #23]
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	4413      	add	r3, r2
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	7812      	ldrb	r2, [r2, #0]
 800e234:	701a      	strb	r2, [r3, #0]
  idx++;
 800e236:	7dfb      	ldrb	r3, [r7, #23]
 800e238:	3301      	adds	r3, #1
 800e23a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	4413      	add	r3, r2
 800e242:	2203      	movs	r2, #3
 800e244:	701a      	strb	r2, [r3, #0]
  idx++;
 800e246:	7dfb      	ldrb	r3, [r7, #23]
 800e248:	3301      	adds	r3, #1
 800e24a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e24c:	e013      	b.n	800e276 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e24e:	7dfb      	ldrb	r3, [r7, #23]
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	4413      	add	r3, r2
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	7812      	ldrb	r2, [r2, #0]
 800e258:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	3301      	adds	r3, #1
 800e25e:	613b      	str	r3, [r7, #16]
    idx++;
 800e260:	7dfb      	ldrb	r3, [r7, #23]
 800e262:	3301      	adds	r3, #1
 800e264:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e266:	7dfb      	ldrb	r3, [r7, #23]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	4413      	add	r3, r2
 800e26c:	2200      	movs	r2, #0
 800e26e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e270:	7dfb      	ldrb	r3, [r7, #23]
 800e272:	3301      	adds	r3, #1
 800e274:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e7      	bne.n	800e24e <USBD_GetString+0x6a>
 800e27e:	e000      	b.n	800e282 <USBD_GetString+0x9e>
    return;
 800e280:	bf00      	nop
  }
}
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e290:	2300      	movs	r3, #0
 800e292:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e298:	e005      	b.n	800e2a6 <USBD_GetLen+0x1e>
  {
    len++;
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
 800e29c:	3301      	adds	r3, #1
 800e29e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1f5      	bne.n	800e29a <USBD_GetLen+0x12>
  }

  return len;
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3714      	adds	r7, #20
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 fd54 	bl	800ed96 <USBD_LL_Transmit>

  return USBD_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	2100      	movs	r1, #0
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f000 fd43 	bl	800ed96 <USBD_LL_Transmit>

  return USBD_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b084      	sub	sp, #16
 800e31e:	af00      	add	r7, sp, #0
 800e320:	60f8      	str	r0, [r7, #12]
 800e322:	60b9      	str	r1, [r7, #8]
 800e324:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2203      	movs	r2, #3
 800e32a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	2100      	movs	r1, #0
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 fd43 	bl	800edd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e352:	2300      	movs	r3, #0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	2100      	movs	r1, #0
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f000 fd32 	bl	800edd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b082      	sub	sp, #8
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2204      	movs	r2, #4
 800e38a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e38e:	2300      	movs	r3, #0
 800e390:	2200      	movs	r2, #0
 800e392:	2100      	movs	r1, #0
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fcfe 	bl	800ed96 <USBD_LL_Transmit>

  return USBD_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2205      	movs	r2, #5
 800e3b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fd0c 	bl	800edd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
	...

0800e3cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	4912      	ldr	r1, [pc, #72]	@ (800e41c <MX_USB_DEVICE_Init+0x50>)
 800e3d4:	4812      	ldr	r0, [pc, #72]	@ (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e3d6:	f7fe fcd9 	bl	800cd8c <USBD_Init>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e3e0:	f7f3 fe6c 	bl	80020bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3e4:	490f      	ldr	r1, [pc, #60]	@ (800e424 <MX_USB_DEVICE_Init+0x58>)
 800e3e6:	480e      	ldr	r0, [pc, #56]	@ (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e3e8:	f7fe fd00 	bl	800cdec <USBD_RegisterClass>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e3f2:	f7f3 fe63 	bl	80020bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e3f6:	490c      	ldr	r1, [pc, #48]	@ (800e428 <MX_USB_DEVICE_Init+0x5c>)
 800e3f8:	4809      	ldr	r0, [pc, #36]	@ (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e3fa:	f7fe fbf7 	bl	800cbec <USBD_CDC_RegisterInterface>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e404:	f7f3 fe5a 	bl	80020bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e408:	4805      	ldr	r0, [pc, #20]	@ (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e40a:	f7fe fd25 	bl	800ce58 <USBD_Start>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e414:	f7f3 fe52 	bl	80020bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e418:	bf00      	nop
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	200000c0 	.word	0x200000c0
 800e420:	20000ad8 	.word	0x20000ad8
 800e424:	20000024 	.word	0x20000024
 800e428:	200000ac 	.word	0x200000ac

0800e42c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e430:	2200      	movs	r2, #0
 800e432:	4905      	ldr	r1, [pc, #20]	@ (800e448 <CDC_Init_FS+0x1c>)
 800e434:	4805      	ldr	r0, [pc, #20]	@ (800e44c <CDC_Init_FS+0x20>)
 800e436:	f7fe fbf3 	bl	800cc20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e43a:	4905      	ldr	r1, [pc, #20]	@ (800e450 <CDC_Init_FS+0x24>)
 800e43c:	4803      	ldr	r0, [pc, #12]	@ (800e44c <CDC_Init_FS+0x20>)
 800e43e:	f7fe fc11 	bl	800cc64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e442:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e444:	4618      	mov	r0, r3
 800e446:	bd80      	pop	{r7, pc}
 800e448:	20000fb4 	.word	0x20000fb4
 800e44c:	20000ad8 	.word	0x20000ad8
 800e450:	20000db4 	.word	0x20000db4

0800e454 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e454:	b480      	push	{r7}
 800e456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e458:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	4603      	mov	r3, r0
 800e46c:	6039      	str	r1, [r7, #0]
 800e46e:	71fb      	strb	r3, [r7, #7]
 800e470:	4613      	mov	r3, r2
 800e472:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	2b23      	cmp	r3, #35	@ 0x23
 800e478:	f200 8098 	bhi.w	800e5ac <CDC_Control_FS+0x148>
 800e47c:	a201      	add	r2, pc, #4	@ (adr r2, 800e484 <CDC_Control_FS+0x20>)
 800e47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e482:	bf00      	nop
 800e484:	0800e5ad 	.word	0x0800e5ad
 800e488:	0800e5ad 	.word	0x0800e5ad
 800e48c:	0800e5ad 	.word	0x0800e5ad
 800e490:	0800e5ad 	.word	0x0800e5ad
 800e494:	0800e5ad 	.word	0x0800e5ad
 800e498:	0800e5ad 	.word	0x0800e5ad
 800e49c:	0800e5ad 	.word	0x0800e5ad
 800e4a0:	0800e5ad 	.word	0x0800e5ad
 800e4a4:	0800e5ad 	.word	0x0800e5ad
 800e4a8:	0800e5ad 	.word	0x0800e5ad
 800e4ac:	0800e5ad 	.word	0x0800e5ad
 800e4b0:	0800e5ad 	.word	0x0800e5ad
 800e4b4:	0800e5ad 	.word	0x0800e5ad
 800e4b8:	0800e5ad 	.word	0x0800e5ad
 800e4bc:	0800e5ad 	.word	0x0800e5ad
 800e4c0:	0800e5ad 	.word	0x0800e5ad
 800e4c4:	0800e5ad 	.word	0x0800e5ad
 800e4c8:	0800e5ad 	.word	0x0800e5ad
 800e4cc:	0800e5ad 	.word	0x0800e5ad
 800e4d0:	0800e5ad 	.word	0x0800e5ad
 800e4d4:	0800e5ad 	.word	0x0800e5ad
 800e4d8:	0800e5ad 	.word	0x0800e5ad
 800e4dc:	0800e5ad 	.word	0x0800e5ad
 800e4e0:	0800e5ad 	.word	0x0800e5ad
 800e4e4:	0800e5ad 	.word	0x0800e5ad
 800e4e8:	0800e5ad 	.word	0x0800e5ad
 800e4ec:	0800e5ad 	.word	0x0800e5ad
 800e4f0:	0800e5ad 	.word	0x0800e5ad
 800e4f4:	0800e5ad 	.word	0x0800e5ad
 800e4f8:	0800e5ad 	.word	0x0800e5ad
 800e4fc:	0800e5ad 	.word	0x0800e5ad
 800e500:	0800e5ad 	.word	0x0800e5ad
 800e504:	0800e515 	.word	0x0800e515
 800e508:	0800e559 	.word	0x0800e559
 800e50c:	0800e5ad 	.word	0x0800e5ad
 800e510:	0800e5ad 	.word	0x0800e5ad
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	461a      	mov	r2, r3
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	3301      	adds	r3, #1
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	021b      	lsls	r3, r3, #8
 800e522:	431a      	orrs	r2, r3
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	3302      	adds	r3, #2
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	041b      	lsls	r3, r3, #16
 800e52c:	431a      	orrs	r2, r3
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	3303      	adds	r3, #3
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	061b      	lsls	r3, r3, #24
 800e536:	4313      	orrs	r3, r2
 800e538:	461a      	mov	r2, r3
 800e53a:	4b20      	ldr	r3, [pc, #128]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e53c:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	791a      	ldrb	r2, [r3, #4]
 800e542:	4b1e      	ldr	r3, [pc, #120]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e544:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	795a      	ldrb	r2, [r3, #5]
 800e54a:	4b1c      	ldr	r3, [pc, #112]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e54c:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	799a      	ldrb	r2, [r3, #6]
 800e552:	4b1a      	ldr	r3, [pc, #104]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e554:	719a      	strb	r2, [r3, #6]
     break;
 800e556:	e02a      	b.n	800e5ae <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800e558:	4b18      	ldr	r3, [pc, #96]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800e562:	4b16      	ldr	r3, [pc, #88]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	0a1a      	lsrs	r2, r3, #8
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	3301      	adds	r3, #1
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800e570:	4b12      	ldr	r3, [pc, #72]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	0c1a      	lsrs	r2, r3, #16
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	3302      	adds	r3, #2
 800e57a:	b2d2      	uxtb	r2, r2
 800e57c:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800e57e:	4b0f      	ldr	r3, [pc, #60]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	0e1a      	lsrs	r2, r3, #24
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	3303      	adds	r3, #3
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	3304      	adds	r3, #4
 800e590:	4a0a      	ldr	r2, [pc, #40]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e592:	7912      	ldrb	r2, [r2, #4]
 800e594:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	3305      	adds	r3, #5
 800e59a:	4a08      	ldr	r2, [pc, #32]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e59c:	7952      	ldrb	r2, [r2, #5]
 800e59e:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	3306      	adds	r3, #6
 800e5a4:	4a05      	ldr	r2, [pc, #20]	@ (800e5bc <CDC_Control_FS+0x158>)
 800e5a6:	7992      	ldrb	r2, [r2, #6]
 800e5a8:	701a      	strb	r2, [r3, #0]
     break;
 800e5aa:	e000      	b.n	800e5ae <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5ac:	bf00      	nop
  }

  return (USBD_OK);
 800e5ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	200000a4 	.word	0x200000a4

0800e5c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800e5ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e5fc <CDC_Receive_FS+0x3c>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d007      	beq.n	800e5e2 <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800e5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5fc <CDC_Receive_FS+0x3c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	6812      	ldr	r2, [r2, #0]
 800e5da:	b292      	uxth	r2, r2
 800e5dc:	4611      	mov	r1, r2
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	4806      	ldr	r0, [pc, #24]	@ (800e600 <CDC_Receive_FS+0x40>)
 800e5e6:	f7fe fb3d 	bl	800cc64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e5ea:	4805      	ldr	r0, [pc, #20]	@ (800e600 <CDC_Receive_FS+0x40>)
 800e5ec:	f7fe fb98 	bl	800cd20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e5f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	200011b4 	.word	0x200011b4
 800e600:	20000ad8 	.word	0x20000ad8

0800e604 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e614:	4b0d      	ldr	r3, [pc, #52]	@ (800e64c <CDC_Transmit_FS+0x48>)
 800e616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e61a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e626:	2301      	movs	r3, #1
 800e628:	e00b      	b.n	800e642 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e62a:	887b      	ldrh	r3, [r7, #2]
 800e62c:	461a      	mov	r2, r3
 800e62e:	6879      	ldr	r1, [r7, #4]
 800e630:	4806      	ldr	r0, [pc, #24]	@ (800e64c <CDC_Transmit_FS+0x48>)
 800e632:	f7fe faf5 	bl	800cc20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e636:	4805      	ldr	r0, [pc, #20]	@ (800e64c <CDC_Transmit_FS+0x48>)
 800e638:	f7fe fb32 	bl	800cca0 <USBD_CDC_TransmitPacket>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e640:	7bfb      	ldrb	r3, [r7, #15]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	20000ad8 	.word	0x20000ad8

0800e650 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	4613      	mov	r3, r2
 800e65c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e662:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e666:	4618      	mov	r0, r3
 800e668:	371c      	adds	r7, #28
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
	...

0800e674 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800e67c:	4a04      	ldr	r2, [pc, #16]	@ (800e690 <CDC_AttachRxData+0x1c>)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6013      	str	r3, [r2, #0]
}
 800e682:	bf00      	nop
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	200011b4 	.word	0x200011b4

0800e694 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	4603      	mov	r3, r0
 800e69c:	6039      	str	r1, [r7, #0]
 800e69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2212      	movs	r2, #18
 800e6a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e6a6:	4b03      	ldr	r3, [pc, #12]	@ (800e6b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	200000dc 	.word	0x200000dc

0800e6b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	2204      	movs	r2, #4
 800e6c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6ca:	4b03      	ldr	r3, [pc, #12]	@ (800e6d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	370c      	adds	r7, #12
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr
 800e6d8:	200000f0 	.word	0x200000f0

0800e6dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	6039      	str	r1, [r7, #0]
 800e6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6e8:	79fb      	ldrb	r3, [r7, #7]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d105      	bne.n	800e6fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	4907      	ldr	r1, [pc, #28]	@ (800e710 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6f2:	4808      	ldr	r0, [pc, #32]	@ (800e714 <USBD_FS_ProductStrDescriptor+0x38>)
 800e6f4:	f7ff fd76 	bl	800e1e4 <USBD_GetString>
 800e6f8:	e004      	b.n	800e704 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	4904      	ldr	r1, [pc, #16]	@ (800e710 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6fe:	4805      	ldr	r0, [pc, #20]	@ (800e714 <USBD_FS_ProductStrDescriptor+0x38>)
 800e700:	f7ff fd70 	bl	800e1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e704:	4b02      	ldr	r3, [pc, #8]	@ (800e710 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e706:	4618      	mov	r0, r3
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	200011b8 	.word	0x200011b8
 800e714:	080135d8 	.word	0x080135d8

0800e718 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	4603      	mov	r3, r0
 800e720:	6039      	str	r1, [r7, #0]
 800e722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e724:	683a      	ldr	r2, [r7, #0]
 800e726:	4904      	ldr	r1, [pc, #16]	@ (800e738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e728:	4804      	ldr	r0, [pc, #16]	@ (800e73c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e72a:	f7ff fd5b 	bl	800e1e4 <USBD_GetString>
  return USBD_StrDesc;
 800e72e:	4b02      	ldr	r3, [pc, #8]	@ (800e738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e730:	4618      	mov	r0, r3
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	200011b8 	.word	0x200011b8
 800e73c:	080135f0 	.word	0x080135f0

0800e740 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	6039      	str	r1, [r7, #0]
 800e74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	221a      	movs	r2, #26
 800e750:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e752:	f000 f843 	bl	800e7dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e756:	4b02      	ldr	r3, [pc, #8]	@ (800e760 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	200000f4 	.word	0x200000f4

0800e764 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4603      	mov	r3, r0
 800e76c:	6039      	str	r1, [r7, #0]
 800e76e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e770:	79fb      	ldrb	r3, [r7, #7]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d105      	bne.n	800e782 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	4907      	ldr	r1, [pc, #28]	@ (800e798 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e77a:	4808      	ldr	r0, [pc, #32]	@ (800e79c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e77c:	f7ff fd32 	bl	800e1e4 <USBD_GetString>
 800e780:	e004      	b.n	800e78c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	4904      	ldr	r1, [pc, #16]	@ (800e798 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e786:	4805      	ldr	r0, [pc, #20]	@ (800e79c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e788:	f7ff fd2c 	bl	800e1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e78c:	4b02      	ldr	r3, [pc, #8]	@ (800e798 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	200011b8 	.word	0x200011b8
 800e79c:	08013604 	.word	0x08013604

0800e7a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	6039      	str	r1, [r7, #0]
 800e7aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7ac:	79fb      	ldrb	r3, [r7, #7]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d105      	bne.n	800e7be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7b2:	683a      	ldr	r2, [r7, #0]
 800e7b4:	4907      	ldr	r1, [pc, #28]	@ (800e7d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7b6:	4808      	ldr	r0, [pc, #32]	@ (800e7d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7b8:	f7ff fd14 	bl	800e1e4 <USBD_GetString>
 800e7bc:	e004      	b.n	800e7c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	4904      	ldr	r1, [pc, #16]	@ (800e7d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7c2:	4805      	ldr	r0, [pc, #20]	@ (800e7d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7c4:	f7ff fd0e 	bl	800e1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7c8:	4b02      	ldr	r3, [pc, #8]	@ (800e7d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	200011b8 	.word	0x200011b8
 800e7d8:	08013610 	.word	0x08013610

0800e7dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e820 <Get_SerialNum+0x44>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e824 <Get_SerialNum+0x48>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e828 <Get_SerialNum+0x4c>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d009      	beq.n	800e816 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e802:	2208      	movs	r2, #8
 800e804:	4909      	ldr	r1, [pc, #36]	@ (800e82c <Get_SerialNum+0x50>)
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f000 f814 	bl	800e834 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e80c:	2204      	movs	r2, #4
 800e80e:	4908      	ldr	r1, [pc, #32]	@ (800e830 <Get_SerialNum+0x54>)
 800e810:	68b8      	ldr	r0, [r7, #8]
 800e812:	f000 f80f 	bl	800e834 <IntToUnicode>
  }
}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	1fff7a10 	.word	0x1fff7a10
 800e824:	1fff7a14 	.word	0x1fff7a14
 800e828:	1fff7a18 	.word	0x1fff7a18
 800e82c:	200000f6 	.word	0x200000f6
 800e830:	20000106 	.word	0x20000106

0800e834 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e834:	b480      	push	{r7}
 800e836:	b087      	sub	sp, #28
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	4613      	mov	r3, r2
 800e840:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e846:	2300      	movs	r3, #0
 800e848:	75fb      	strb	r3, [r7, #23]
 800e84a:	e027      	b.n	800e89c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	0f1b      	lsrs	r3, r3, #28
 800e850:	2b09      	cmp	r3, #9
 800e852:	d80b      	bhi.n	800e86c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	0f1b      	lsrs	r3, r3, #28
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	4619      	mov	r1, r3
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	440b      	add	r3, r1
 800e864:	3230      	adds	r2, #48	@ 0x30
 800e866:	b2d2      	uxtb	r2, r2
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	e00a      	b.n	800e882 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	0f1b      	lsrs	r3, r3, #28
 800e870:	b2da      	uxtb	r2, r3
 800e872:	7dfb      	ldrb	r3, [r7, #23]
 800e874:	005b      	lsls	r3, r3, #1
 800e876:	4619      	mov	r1, r3
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	440b      	add	r3, r1
 800e87c:	3237      	adds	r2, #55	@ 0x37
 800e87e:	b2d2      	uxtb	r2, r2
 800e880:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	011b      	lsls	r3, r3, #4
 800e886:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e888:	7dfb      	ldrb	r3, [r7, #23]
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	3301      	adds	r3, #1
 800e88e:	68ba      	ldr	r2, [r7, #8]
 800e890:	4413      	add	r3, r2
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e896:	7dfb      	ldrb	r3, [r7, #23]
 800e898:	3301      	adds	r3, #1
 800e89a:	75fb      	strb	r3, [r7, #23]
 800e89c:	7dfa      	ldrb	r2, [r7, #23]
 800e89e:	79fb      	ldrb	r3, [r7, #7]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d3d3      	bcc.n	800e84c <IntToUnicode+0x18>
  }
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop
 800e8a8:	371c      	adds	r7, #28
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08a      	sub	sp, #40	@ 0x28
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8bc:	f107 0314 	add.w	r3, r7, #20
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	605a      	str	r2, [r3, #4]
 800e8c6:	609a      	str	r2, [r3, #8]
 800e8c8:	60da      	str	r2, [r3, #12]
 800e8ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e8d4:	d13a      	bne.n	800e94c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	613b      	str	r3, [r7, #16]
 800e8da:	4b1e      	ldr	r3, [pc, #120]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8de:	4a1d      	ldr	r2, [pc, #116]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e8e0:	f043 0301 	orr.w	r3, r3, #1
 800e8e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800e8e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	613b      	str	r3, [r7, #16]
 800e8f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e8f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8f8:	2302      	movs	r3, #2
 800e8fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e900:	2303      	movs	r3, #3
 800e902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e904:	230a      	movs	r3, #10
 800e906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e908:	f107 0314 	add.w	r3, r7, #20
 800e90c:	4619      	mov	r1, r3
 800e90e:	4812      	ldr	r0, [pc, #72]	@ (800e958 <HAL_PCD_MspInit+0xa4>)
 800e910:	f7f5 ff76 	bl	8004800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e914:	4b0f      	ldr	r3, [pc, #60]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e918:	4a0e      	ldr	r2, [pc, #56]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e91e:	6353      	str	r3, [r2, #52]	@ 0x34
 800e920:	2300      	movs	r3, #0
 800e922:	60fb      	str	r3, [r7, #12]
 800e924:	4b0b      	ldr	r3, [pc, #44]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e928:	4a0a      	ldr	r2, [pc, #40]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e92a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e92e:	6453      	str	r3, [r2, #68]	@ 0x44
 800e930:	4b08      	ldr	r3, [pc, #32]	@ (800e954 <HAL_PCD_MspInit+0xa0>)
 800e932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e938:	60fb      	str	r3, [r7, #12]
 800e93a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e93c:	2200      	movs	r2, #0
 800e93e:	2100      	movs	r1, #0
 800e940:	2043      	movs	r0, #67	@ 0x43
 800e942:	f7f5 fb7a 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e946:	2043      	movs	r0, #67	@ 0x43
 800e948:	f7f5 fb93 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e94c:	bf00      	nop
 800e94e:	3728      	adds	r7, #40	@ 0x28
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	40023800 	.word	0x40023800
 800e958:	40020000 	.word	0x40020000

0800e95c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e970:	4619      	mov	r1, r3
 800e972:	4610      	mov	r0, r2
 800e974:	f7fe fabd 	bl	800cef2 <USBD_LL_SetupStage>
}
 800e978:	bf00      	nop
 800e97a:	3708      	adds	r7, #8
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	460b      	mov	r3, r1
 800e98a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e992:	78fa      	ldrb	r2, [r7, #3]
 800e994:	6879      	ldr	r1, [r7, #4]
 800e996:	4613      	mov	r3, r2
 800e998:	00db      	lsls	r3, r3, #3
 800e99a:	4413      	add	r3, r2
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	440b      	add	r3, r1
 800e9a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	78fb      	ldrb	r3, [r7, #3]
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	f7fe faf7 	bl	800cf9c <USBD_LL_DataOutStage>
}
 800e9ae:	bf00      	nop
 800e9b0:	3708      	adds	r7, #8
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e9c8:	78fa      	ldrb	r2, [r7, #3]
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	00db      	lsls	r3, r3, #3
 800e9d0:	4413      	add	r3, r2
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	440b      	add	r3, r1
 800e9d6:	3320      	adds	r3, #32
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	f7fe fb99 	bl	800d114 <USBD_LL_DataInStage>
}
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b082      	sub	sp, #8
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fe fcdd 	bl	800d3b8 <USBD_LL_SOF>
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	79db      	ldrb	r3, [r3, #7]
 800ea16:	2b02      	cmp	r3, #2
 800ea18:	d001      	beq.n	800ea1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea1a:	f7f3 fb4f 	bl	80020bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea24:	7bfa      	ldrb	r2, [r7, #15]
 800ea26:	4611      	mov	r1, r2
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fe fc81 	bl	800d330 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fe fc28 	bl	800d28a <USBD_LL_Reset>
}
 800ea3a:	bf00      	nop
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
	...

0800ea44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fe fc7c 	bl	800d350 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	6812      	ldr	r2, [r2, #0]
 800ea66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ea6a:	f043 0301 	orr.w	r3, r3, #1
 800ea6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7adb      	ldrb	r3, [r3, #11]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d005      	beq.n	800ea84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea78:	4b04      	ldr	r3, [pc, #16]	@ (800ea8c <HAL_PCD_SuspendCallback+0x48>)
 800ea7a:	691b      	ldr	r3, [r3, #16]
 800ea7c:	4a03      	ldr	r2, [pc, #12]	@ (800ea8c <HAL_PCD_SuspendCallback+0x48>)
 800ea7e:	f043 0306 	orr.w	r3, r3, #6
 800ea82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea84:	bf00      	nop
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	e000ed00 	.word	0xe000ed00

0800ea90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fe fc72 	bl	800d388 <USBD_LL_Resume>
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eabe:	78fa      	ldrb	r2, [r7, #3]
 800eac0:	4611      	mov	r1, r2
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe fcca 	bl	800d45c <USBD_LL_IsoOUTIncomplete>
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eae2:	78fa      	ldrb	r2, [r7, #3]
 800eae4:	4611      	mov	r1, r2
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fe fc86 	bl	800d3f8 <USBD_LL_IsoINIncomplete>
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fe fcdc 	bl	800d4c0 <USBD_LL_DevConnected>
}
 800eb08:	bf00      	nop
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fcd9 	bl	800d4d6 <USBD_LL_DevDisconnected>
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d13c      	bne.n	800ebb6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb3c:	4a20      	ldr	r2, [pc, #128]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a1e      	ldr	r2, [pc, #120]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb48:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb4c:	4b1c      	ldr	r3, [pc, #112]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800eb52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eb54:	4b1a      	ldr	r3, [pc, #104]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb56:	2204      	movs	r2, #4
 800eb58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb5a:	4b19      	ldr	r3, [pc, #100]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb5c:	2202      	movs	r2, #2
 800eb5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb60:	4b17      	ldr	r3, [pc, #92]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb66:	4b16      	ldr	r3, [pc, #88]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb68:	2202      	movs	r2, #2
 800eb6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb6c:	4b14      	ldr	r3, [pc, #80]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb72:	4b13      	ldr	r3, [pc, #76]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb78:	4b11      	ldr	r3, [pc, #68]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb7e:	4b10      	ldr	r3, [pc, #64]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb84:	4b0e      	ldr	r3, [pc, #56]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb8a:	480d      	ldr	r0, [pc, #52]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb8c:	f7f9 fa97 	bl	80080be <HAL_PCD_Init>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eb96:	f7f3 fa91 	bl	80020bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eb9a:	2180      	movs	r1, #128	@ 0x80
 800eb9c:	4808      	ldr	r0, [pc, #32]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eb9e:	f7fa fcc4 	bl	800952a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eba2:	2240      	movs	r2, #64	@ 0x40
 800eba4:	2100      	movs	r1, #0
 800eba6:	4806      	ldr	r0, [pc, #24]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800eba8:	f7fa fc78 	bl	800949c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebac:	2280      	movs	r2, #128	@ 0x80
 800ebae:	2101      	movs	r1, #1
 800ebb0:	4803      	ldr	r0, [pc, #12]	@ (800ebc0 <USBD_LL_Init+0x94>)
 800ebb2:	f7fa fc73 	bl	800949c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	200013b8 	.word	0x200013b8

0800ebc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f9 fb7e 	bl	80082dc <HAL_PCD_Start>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 f942 	bl	800ee70 <USBD_Get_USB_Status>
 800ebec:	4603      	mov	r3, r0
 800ebee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b084      	sub	sp, #16
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	4608      	mov	r0, r1
 800ec04:	4611      	mov	r1, r2
 800ec06:	461a      	mov	r2, r3
 800ec08:	4603      	mov	r3, r0
 800ec0a:	70fb      	strb	r3, [r7, #3]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70bb      	strb	r3, [r7, #2]
 800ec10:	4613      	mov	r3, r2
 800ec12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec14:	2300      	movs	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ec22:	78bb      	ldrb	r3, [r7, #2]
 800ec24:	883a      	ldrh	r2, [r7, #0]
 800ec26:	78f9      	ldrb	r1, [r7, #3]
 800ec28:	f7fa f852 	bl	8008cd0 <HAL_PCD_EP_Open>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec30:	7bfb      	ldrb	r3, [r7, #15]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 f91c 	bl	800ee70 <USBD_Get_USB_Status>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b084      	sub	sp, #16
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	460b      	mov	r3, r1
 800ec50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec56:	2300      	movs	r3, #0
 800ec58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec60:	78fa      	ldrb	r2, [r7, #3]
 800ec62:	4611      	mov	r1, r2
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fa f89d 	bl	8008da4 <HAL_PCD_EP_Close>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f000 f8fd 	bl	800ee70 <USBD_Get_USB_Status>
 800ec76:	4603      	mov	r3, r0
 800ec78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec90:	2300      	movs	r3, #0
 800ec92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec9e:	78fa      	ldrb	r2, [r7, #3]
 800eca0:	4611      	mov	r1, r2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fa f955 	bl	8008f52 <HAL_PCD_EP_SetStall>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f000 f8de 	bl	800ee70 <USBD_Get_USB_Status>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b084      	sub	sp, #16
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	460b      	mov	r3, r1
 800eccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ecdc:	78fa      	ldrb	r2, [r7, #3]
 800ecde:	4611      	mov	r1, r2
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fa f999 	bl	8009018 <HAL_PCD_EP_ClrStall>
 800ece6:	4603      	mov	r3, r0
 800ece8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f000 f8bf 	bl	800ee70 <USBD_Get_USB_Status>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	da0b      	bge.n	800ed34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed1c:	78fb      	ldrb	r3, [r7, #3]
 800ed1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed22:	68f9      	ldr	r1, [r7, #12]
 800ed24:	4613      	mov	r3, r2
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	4413      	add	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	440b      	add	r3, r1
 800ed2e:	3316      	adds	r3, #22
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	e00b      	b.n	800ed4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed34:	78fb      	ldrb	r3, [r7, #3]
 800ed36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed3a:	68f9      	ldr	r1, [r7, #12]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	4413      	add	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	440b      	add	r3, r1
 800ed46:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ed4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed72:	78fa      	ldrb	r2, [r7, #3]
 800ed74:	4611      	mov	r1, r2
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7f9 ff86 	bl	8008c88 <HAL_PCD_SetAddress>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 f874 	bl	800ee70 <USBD_Get_USB_Status>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b086      	sub	sp, #24
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	60f8      	str	r0, [r7, #12]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
 800eda2:	460b      	mov	r3, r1
 800eda4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800edb4:	7af9      	ldrb	r1, [r7, #11]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	f7fa f890 	bl	8008ede <HAL_PCD_EP_Transmit>
 800edbe:	4603      	mov	r3, r0
 800edc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 f853 	bl	800ee70 <USBD_Get_USB_Status>
 800edca:	4603      	mov	r3, r0
 800edcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edce:	7dbb      	ldrb	r3, [r7, #22]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	607a      	str	r2, [r7, #4]
 800ede2:	603b      	str	r3, [r7, #0]
 800ede4:	460b      	mov	r3, r1
 800ede6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede8:	2300      	movs	r3, #0
 800edea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800edf6:	7af9      	ldrb	r1, [r7, #11]
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	f7fa f81c 	bl	8008e38 <HAL_PCD_EP_Receive>
 800ee00:	4603      	mov	r3, r0
 800ee02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 f832 	bl	800ee70 <USBD_Get_USB_Status>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee10:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3718      	adds	r7, #24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	460b      	mov	r3, r1
 800ee24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee2c:	78fa      	ldrb	r2, [r7, #3]
 800ee2e:	4611      	mov	r1, r2
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fa f83c 	bl	8008eae <HAL_PCD_EP_GetRxCount>
 800ee36:	4603      	mov	r3, r0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee48:	4b03      	ldr	r3, [pc, #12]	@ (800ee58 <USBD_static_malloc+0x18>)
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	2000189c 	.word	0x2000189c

0800ee5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]

}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b085      	sub	sp, #20
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4603      	mov	r3, r0
 800ee78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee7e:	79fb      	ldrb	r3, [r7, #7]
 800ee80:	2b03      	cmp	r3, #3
 800ee82:	d817      	bhi.n	800eeb4 <USBD_Get_USB_Status+0x44>
 800ee84:	a201      	add	r2, pc, #4	@ (adr r2, 800ee8c <USBD_Get_USB_Status+0x1c>)
 800ee86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee8a:	bf00      	nop
 800ee8c:	0800ee9d 	.word	0x0800ee9d
 800ee90:	0800eea3 	.word	0x0800eea3
 800ee94:	0800eea9 	.word	0x0800eea9
 800ee98:	0800eeaf 	.word	0x0800eeaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eea0:	e00b      	b.n	800eeba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eea2:	2303      	movs	r3, #3
 800eea4:	73fb      	strb	r3, [r7, #15]
    break;
 800eea6:	e008      	b.n	800eeba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	73fb      	strb	r3, [r7, #15]
    break;
 800eeac:	e005      	b.n	800eeba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb2:	e002      	b.n	800eeba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb8:	bf00      	nop
  }
  return usb_status;
 800eeba:	7bfb      	ldrb	r3, [r7, #15]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3714      	adds	r7, #20
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <malloc>:
 800eec8:	4b02      	ldr	r3, [pc, #8]	@ (800eed4 <malloc+0xc>)
 800eeca:	4601      	mov	r1, r0
 800eecc:	6818      	ldr	r0, [r3, #0]
 800eece:	f000 b825 	b.w	800ef1c <_malloc_r>
 800eed2:	bf00      	nop
 800eed4:	2000011c 	.word	0x2000011c

0800eed8 <sbrk_aligned>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	4e0f      	ldr	r6, [pc, #60]	@ (800ef18 <sbrk_aligned+0x40>)
 800eedc:	460c      	mov	r4, r1
 800eede:	6831      	ldr	r1, [r6, #0]
 800eee0:	4605      	mov	r5, r0
 800eee2:	b911      	cbnz	r1, 800eeea <sbrk_aligned+0x12>
 800eee4:	f001 f872 	bl	800ffcc <_sbrk_r>
 800eee8:	6030      	str	r0, [r6, #0]
 800eeea:	4621      	mov	r1, r4
 800eeec:	4628      	mov	r0, r5
 800eeee:	f001 f86d 	bl	800ffcc <_sbrk_r>
 800eef2:	1c43      	adds	r3, r0, #1
 800eef4:	d103      	bne.n	800eefe <sbrk_aligned+0x26>
 800eef6:	f04f 34ff 	mov.w	r4, #4294967295
 800eefa:	4620      	mov	r0, r4
 800eefc:	bd70      	pop	{r4, r5, r6, pc}
 800eefe:	1cc4      	adds	r4, r0, #3
 800ef00:	f024 0403 	bic.w	r4, r4, #3
 800ef04:	42a0      	cmp	r0, r4
 800ef06:	d0f8      	beq.n	800eefa <sbrk_aligned+0x22>
 800ef08:	1a21      	subs	r1, r4, r0
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	f001 f85e 	bl	800ffcc <_sbrk_r>
 800ef10:	3001      	adds	r0, #1
 800ef12:	d1f2      	bne.n	800eefa <sbrk_aligned+0x22>
 800ef14:	e7ef      	b.n	800eef6 <sbrk_aligned+0x1e>
 800ef16:	bf00      	nop
 800ef18:	20001abc 	.word	0x20001abc

0800ef1c <_malloc_r>:
 800ef1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef20:	1ccd      	adds	r5, r1, #3
 800ef22:	f025 0503 	bic.w	r5, r5, #3
 800ef26:	3508      	adds	r5, #8
 800ef28:	2d0c      	cmp	r5, #12
 800ef2a:	bf38      	it	cc
 800ef2c:	250c      	movcc	r5, #12
 800ef2e:	2d00      	cmp	r5, #0
 800ef30:	4606      	mov	r6, r0
 800ef32:	db01      	blt.n	800ef38 <_malloc_r+0x1c>
 800ef34:	42a9      	cmp	r1, r5
 800ef36:	d904      	bls.n	800ef42 <_malloc_r+0x26>
 800ef38:	230c      	movs	r3, #12
 800ef3a:	6033      	str	r3, [r6, #0]
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f018 <_malloc_r+0xfc>
 800ef46:	f000 f869 	bl	800f01c <__malloc_lock>
 800ef4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef4e:	461c      	mov	r4, r3
 800ef50:	bb44      	cbnz	r4, 800efa4 <_malloc_r+0x88>
 800ef52:	4629      	mov	r1, r5
 800ef54:	4630      	mov	r0, r6
 800ef56:	f7ff ffbf 	bl	800eed8 <sbrk_aligned>
 800ef5a:	1c43      	adds	r3, r0, #1
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	d158      	bne.n	800f012 <_malloc_r+0xf6>
 800ef60:	f8d8 4000 	ldr.w	r4, [r8]
 800ef64:	4627      	mov	r7, r4
 800ef66:	2f00      	cmp	r7, #0
 800ef68:	d143      	bne.n	800eff2 <_malloc_r+0xd6>
 800ef6a:	2c00      	cmp	r4, #0
 800ef6c:	d04b      	beq.n	800f006 <_malloc_r+0xea>
 800ef6e:	6823      	ldr	r3, [r4, #0]
 800ef70:	4639      	mov	r1, r7
 800ef72:	4630      	mov	r0, r6
 800ef74:	eb04 0903 	add.w	r9, r4, r3
 800ef78:	f001 f828 	bl	800ffcc <_sbrk_r>
 800ef7c:	4581      	cmp	r9, r0
 800ef7e:	d142      	bne.n	800f006 <_malloc_r+0xea>
 800ef80:	6821      	ldr	r1, [r4, #0]
 800ef82:	1a6d      	subs	r5, r5, r1
 800ef84:	4629      	mov	r1, r5
 800ef86:	4630      	mov	r0, r6
 800ef88:	f7ff ffa6 	bl	800eed8 <sbrk_aligned>
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	d03a      	beq.n	800f006 <_malloc_r+0xea>
 800ef90:	6823      	ldr	r3, [r4, #0]
 800ef92:	442b      	add	r3, r5
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	f8d8 3000 	ldr.w	r3, [r8]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	bb62      	cbnz	r2, 800eff8 <_malloc_r+0xdc>
 800ef9e:	f8c8 7000 	str.w	r7, [r8]
 800efa2:	e00f      	b.n	800efc4 <_malloc_r+0xa8>
 800efa4:	6822      	ldr	r2, [r4, #0]
 800efa6:	1b52      	subs	r2, r2, r5
 800efa8:	d420      	bmi.n	800efec <_malloc_r+0xd0>
 800efaa:	2a0b      	cmp	r2, #11
 800efac:	d917      	bls.n	800efde <_malloc_r+0xc2>
 800efae:	1961      	adds	r1, r4, r5
 800efb0:	42a3      	cmp	r3, r4
 800efb2:	6025      	str	r5, [r4, #0]
 800efb4:	bf18      	it	ne
 800efb6:	6059      	strne	r1, [r3, #4]
 800efb8:	6863      	ldr	r3, [r4, #4]
 800efba:	bf08      	it	eq
 800efbc:	f8c8 1000 	streq.w	r1, [r8]
 800efc0:	5162      	str	r2, [r4, r5]
 800efc2:	604b      	str	r3, [r1, #4]
 800efc4:	4630      	mov	r0, r6
 800efc6:	f000 f82f 	bl	800f028 <__malloc_unlock>
 800efca:	f104 000b 	add.w	r0, r4, #11
 800efce:	1d23      	adds	r3, r4, #4
 800efd0:	f020 0007 	bic.w	r0, r0, #7
 800efd4:	1ac2      	subs	r2, r0, r3
 800efd6:	bf1c      	itt	ne
 800efd8:	1a1b      	subne	r3, r3, r0
 800efda:	50a3      	strne	r3, [r4, r2]
 800efdc:	e7af      	b.n	800ef3e <_malloc_r+0x22>
 800efde:	6862      	ldr	r2, [r4, #4]
 800efe0:	42a3      	cmp	r3, r4
 800efe2:	bf0c      	ite	eq
 800efe4:	f8c8 2000 	streq.w	r2, [r8]
 800efe8:	605a      	strne	r2, [r3, #4]
 800efea:	e7eb      	b.n	800efc4 <_malloc_r+0xa8>
 800efec:	4623      	mov	r3, r4
 800efee:	6864      	ldr	r4, [r4, #4]
 800eff0:	e7ae      	b.n	800ef50 <_malloc_r+0x34>
 800eff2:	463c      	mov	r4, r7
 800eff4:	687f      	ldr	r7, [r7, #4]
 800eff6:	e7b6      	b.n	800ef66 <_malloc_r+0x4a>
 800eff8:	461a      	mov	r2, r3
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	42a3      	cmp	r3, r4
 800effe:	d1fb      	bne.n	800eff8 <_malloc_r+0xdc>
 800f000:	2300      	movs	r3, #0
 800f002:	6053      	str	r3, [r2, #4]
 800f004:	e7de      	b.n	800efc4 <_malloc_r+0xa8>
 800f006:	230c      	movs	r3, #12
 800f008:	6033      	str	r3, [r6, #0]
 800f00a:	4630      	mov	r0, r6
 800f00c:	f000 f80c 	bl	800f028 <__malloc_unlock>
 800f010:	e794      	b.n	800ef3c <_malloc_r+0x20>
 800f012:	6005      	str	r5, [r0, #0]
 800f014:	e7d6      	b.n	800efc4 <_malloc_r+0xa8>
 800f016:	bf00      	nop
 800f018:	20001ac0 	.word	0x20001ac0

0800f01c <__malloc_lock>:
 800f01c:	4801      	ldr	r0, [pc, #4]	@ (800f024 <__malloc_lock+0x8>)
 800f01e:	f001 b822 	b.w	8010066 <__retarget_lock_acquire_recursive>
 800f022:	bf00      	nop
 800f024:	20001c04 	.word	0x20001c04

0800f028 <__malloc_unlock>:
 800f028:	4801      	ldr	r0, [pc, #4]	@ (800f030 <__malloc_unlock+0x8>)
 800f02a:	f001 b81d 	b.w	8010068 <__retarget_lock_release_recursive>
 800f02e:	bf00      	nop
 800f030:	20001c04 	.word	0x20001c04

0800f034 <__cvt>:
 800f034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f038:	ec57 6b10 	vmov	r6, r7, d0
 800f03c:	2f00      	cmp	r7, #0
 800f03e:	460c      	mov	r4, r1
 800f040:	4619      	mov	r1, r3
 800f042:	463b      	mov	r3, r7
 800f044:	bfbb      	ittet	lt
 800f046:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f04a:	461f      	movlt	r7, r3
 800f04c:	2300      	movge	r3, #0
 800f04e:	232d      	movlt	r3, #45	@ 0x2d
 800f050:	700b      	strb	r3, [r1, #0]
 800f052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f054:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f058:	4691      	mov	r9, r2
 800f05a:	f023 0820 	bic.w	r8, r3, #32
 800f05e:	bfbc      	itt	lt
 800f060:	4632      	movlt	r2, r6
 800f062:	4616      	movlt	r6, r2
 800f064:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f068:	d005      	beq.n	800f076 <__cvt+0x42>
 800f06a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f06e:	d100      	bne.n	800f072 <__cvt+0x3e>
 800f070:	3401      	adds	r4, #1
 800f072:	2102      	movs	r1, #2
 800f074:	e000      	b.n	800f078 <__cvt+0x44>
 800f076:	2103      	movs	r1, #3
 800f078:	ab03      	add	r3, sp, #12
 800f07a:	9301      	str	r3, [sp, #4]
 800f07c:	ab02      	add	r3, sp, #8
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	ec47 6b10 	vmov	d0, r6, r7
 800f084:	4653      	mov	r3, sl
 800f086:	4622      	mov	r2, r4
 800f088:	f001 f87e 	bl	8010188 <_dtoa_r>
 800f08c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f090:	4605      	mov	r5, r0
 800f092:	d119      	bne.n	800f0c8 <__cvt+0x94>
 800f094:	f019 0f01 	tst.w	r9, #1
 800f098:	d00e      	beq.n	800f0b8 <__cvt+0x84>
 800f09a:	eb00 0904 	add.w	r9, r0, r4
 800f09e:	2200      	movs	r2, #0
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	4639      	mov	r1, r7
 800f0a6:	f7f1 fd17 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0aa:	b108      	cbz	r0, 800f0b0 <__cvt+0x7c>
 800f0ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0b0:	2230      	movs	r2, #48	@ 0x30
 800f0b2:	9b03      	ldr	r3, [sp, #12]
 800f0b4:	454b      	cmp	r3, r9
 800f0b6:	d31e      	bcc.n	800f0f6 <__cvt+0xc2>
 800f0b8:	9b03      	ldr	r3, [sp, #12]
 800f0ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0bc:	1b5b      	subs	r3, r3, r5
 800f0be:	4628      	mov	r0, r5
 800f0c0:	6013      	str	r3, [r2, #0]
 800f0c2:	b004      	add	sp, #16
 800f0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f0cc:	eb00 0904 	add.w	r9, r0, r4
 800f0d0:	d1e5      	bne.n	800f09e <__cvt+0x6a>
 800f0d2:	7803      	ldrb	r3, [r0, #0]
 800f0d4:	2b30      	cmp	r3, #48	@ 0x30
 800f0d6:	d10a      	bne.n	800f0ee <__cvt+0xba>
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2300      	movs	r3, #0
 800f0dc:	4630      	mov	r0, r6
 800f0de:	4639      	mov	r1, r7
 800f0e0:	f7f1 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0e4:	b918      	cbnz	r0, 800f0ee <__cvt+0xba>
 800f0e6:	f1c4 0401 	rsb	r4, r4, #1
 800f0ea:	f8ca 4000 	str.w	r4, [sl]
 800f0ee:	f8da 3000 	ldr.w	r3, [sl]
 800f0f2:	4499      	add	r9, r3
 800f0f4:	e7d3      	b.n	800f09e <__cvt+0x6a>
 800f0f6:	1c59      	adds	r1, r3, #1
 800f0f8:	9103      	str	r1, [sp, #12]
 800f0fa:	701a      	strb	r2, [r3, #0]
 800f0fc:	e7d9      	b.n	800f0b2 <__cvt+0x7e>

0800f0fe <__exponent>:
 800f0fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f100:	2900      	cmp	r1, #0
 800f102:	bfba      	itte	lt
 800f104:	4249      	neglt	r1, r1
 800f106:	232d      	movlt	r3, #45	@ 0x2d
 800f108:	232b      	movge	r3, #43	@ 0x2b
 800f10a:	2909      	cmp	r1, #9
 800f10c:	7002      	strb	r2, [r0, #0]
 800f10e:	7043      	strb	r3, [r0, #1]
 800f110:	dd29      	ble.n	800f166 <__exponent+0x68>
 800f112:	f10d 0307 	add.w	r3, sp, #7
 800f116:	461d      	mov	r5, r3
 800f118:	270a      	movs	r7, #10
 800f11a:	461a      	mov	r2, r3
 800f11c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f120:	fb07 1416 	mls	r4, r7, r6, r1
 800f124:	3430      	adds	r4, #48	@ 0x30
 800f126:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f12a:	460c      	mov	r4, r1
 800f12c:	2c63      	cmp	r4, #99	@ 0x63
 800f12e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f132:	4631      	mov	r1, r6
 800f134:	dcf1      	bgt.n	800f11a <__exponent+0x1c>
 800f136:	3130      	adds	r1, #48	@ 0x30
 800f138:	1e94      	subs	r4, r2, #2
 800f13a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f13e:	1c41      	adds	r1, r0, #1
 800f140:	4623      	mov	r3, r4
 800f142:	42ab      	cmp	r3, r5
 800f144:	d30a      	bcc.n	800f15c <__exponent+0x5e>
 800f146:	f10d 0309 	add.w	r3, sp, #9
 800f14a:	1a9b      	subs	r3, r3, r2
 800f14c:	42ac      	cmp	r4, r5
 800f14e:	bf88      	it	hi
 800f150:	2300      	movhi	r3, #0
 800f152:	3302      	adds	r3, #2
 800f154:	4403      	add	r3, r0
 800f156:	1a18      	subs	r0, r3, r0
 800f158:	b003      	add	sp, #12
 800f15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f15c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f160:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f164:	e7ed      	b.n	800f142 <__exponent+0x44>
 800f166:	2330      	movs	r3, #48	@ 0x30
 800f168:	3130      	adds	r1, #48	@ 0x30
 800f16a:	7083      	strb	r3, [r0, #2]
 800f16c:	70c1      	strb	r1, [r0, #3]
 800f16e:	1d03      	adds	r3, r0, #4
 800f170:	e7f1      	b.n	800f156 <__exponent+0x58>
	...

0800f174 <_printf_float>:
 800f174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f178:	b08d      	sub	sp, #52	@ 0x34
 800f17a:	460c      	mov	r4, r1
 800f17c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f180:	4616      	mov	r6, r2
 800f182:	461f      	mov	r7, r3
 800f184:	4605      	mov	r5, r0
 800f186:	f000 fee9 	bl	800ff5c <_localeconv_r>
 800f18a:	6803      	ldr	r3, [r0, #0]
 800f18c:	9304      	str	r3, [sp, #16]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7f1 f876 	bl	8000280 <strlen>
 800f194:	2300      	movs	r3, #0
 800f196:	930a      	str	r3, [sp, #40]	@ 0x28
 800f198:	f8d8 3000 	ldr.w	r3, [r8]
 800f19c:	9005      	str	r0, [sp, #20]
 800f19e:	3307      	adds	r3, #7
 800f1a0:	f023 0307 	bic.w	r3, r3, #7
 800f1a4:	f103 0208 	add.w	r2, r3, #8
 800f1a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f1ac:	f8d4 b000 	ldr.w	fp, [r4]
 800f1b0:	f8c8 2000 	str.w	r2, [r8]
 800f1b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f1bc:	9307      	str	r3, [sp, #28]
 800f1be:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f1c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ca:	4b9c      	ldr	r3, [pc, #624]	@ (800f43c <_printf_float+0x2c8>)
 800f1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d0:	f7f1 fcb4 	bl	8000b3c <__aeabi_dcmpun>
 800f1d4:	bb70      	cbnz	r0, 800f234 <_printf_float+0xc0>
 800f1d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1da:	4b98      	ldr	r3, [pc, #608]	@ (800f43c <_printf_float+0x2c8>)
 800f1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e0:	f7f1 fc8e 	bl	8000b00 <__aeabi_dcmple>
 800f1e4:	bb30      	cbnz	r0, 800f234 <_printf_float+0xc0>
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	4640      	mov	r0, r8
 800f1ec:	4649      	mov	r1, r9
 800f1ee:	f7f1 fc7d 	bl	8000aec <__aeabi_dcmplt>
 800f1f2:	b110      	cbz	r0, 800f1fa <_printf_float+0x86>
 800f1f4:	232d      	movs	r3, #45	@ 0x2d
 800f1f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1fa:	4a91      	ldr	r2, [pc, #580]	@ (800f440 <_printf_float+0x2cc>)
 800f1fc:	4b91      	ldr	r3, [pc, #580]	@ (800f444 <_printf_float+0x2d0>)
 800f1fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f202:	bf8c      	ite	hi
 800f204:	4690      	movhi	r8, r2
 800f206:	4698      	movls	r8, r3
 800f208:	2303      	movs	r3, #3
 800f20a:	6123      	str	r3, [r4, #16]
 800f20c:	f02b 0304 	bic.w	r3, fp, #4
 800f210:	6023      	str	r3, [r4, #0]
 800f212:	f04f 0900 	mov.w	r9, #0
 800f216:	9700      	str	r7, [sp, #0]
 800f218:	4633      	mov	r3, r6
 800f21a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f21c:	4621      	mov	r1, r4
 800f21e:	4628      	mov	r0, r5
 800f220:	f000 f9d2 	bl	800f5c8 <_printf_common>
 800f224:	3001      	adds	r0, #1
 800f226:	f040 808d 	bne.w	800f344 <_printf_float+0x1d0>
 800f22a:	f04f 30ff 	mov.w	r0, #4294967295
 800f22e:	b00d      	add	sp, #52	@ 0x34
 800f230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f234:	4642      	mov	r2, r8
 800f236:	464b      	mov	r3, r9
 800f238:	4640      	mov	r0, r8
 800f23a:	4649      	mov	r1, r9
 800f23c:	f7f1 fc7e 	bl	8000b3c <__aeabi_dcmpun>
 800f240:	b140      	cbz	r0, 800f254 <_printf_float+0xe0>
 800f242:	464b      	mov	r3, r9
 800f244:	2b00      	cmp	r3, #0
 800f246:	bfbc      	itt	lt
 800f248:	232d      	movlt	r3, #45	@ 0x2d
 800f24a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f24e:	4a7e      	ldr	r2, [pc, #504]	@ (800f448 <_printf_float+0x2d4>)
 800f250:	4b7e      	ldr	r3, [pc, #504]	@ (800f44c <_printf_float+0x2d8>)
 800f252:	e7d4      	b.n	800f1fe <_printf_float+0x8a>
 800f254:	6863      	ldr	r3, [r4, #4]
 800f256:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f25a:	9206      	str	r2, [sp, #24]
 800f25c:	1c5a      	adds	r2, r3, #1
 800f25e:	d13b      	bne.n	800f2d8 <_printf_float+0x164>
 800f260:	2306      	movs	r3, #6
 800f262:	6063      	str	r3, [r4, #4]
 800f264:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f268:	2300      	movs	r3, #0
 800f26a:	6022      	str	r2, [r4, #0]
 800f26c:	9303      	str	r3, [sp, #12]
 800f26e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f270:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f274:	ab09      	add	r3, sp, #36	@ 0x24
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	6861      	ldr	r1, [r4, #4]
 800f27a:	ec49 8b10 	vmov	d0, r8, r9
 800f27e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f282:	4628      	mov	r0, r5
 800f284:	f7ff fed6 	bl	800f034 <__cvt>
 800f288:	9b06      	ldr	r3, [sp, #24]
 800f28a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f28c:	2b47      	cmp	r3, #71	@ 0x47
 800f28e:	4680      	mov	r8, r0
 800f290:	d129      	bne.n	800f2e6 <_printf_float+0x172>
 800f292:	1cc8      	adds	r0, r1, #3
 800f294:	db02      	blt.n	800f29c <_printf_float+0x128>
 800f296:	6863      	ldr	r3, [r4, #4]
 800f298:	4299      	cmp	r1, r3
 800f29a:	dd41      	ble.n	800f320 <_printf_float+0x1ac>
 800f29c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f2a0:	fa5f fa8a 	uxtb.w	sl, sl
 800f2a4:	3901      	subs	r1, #1
 800f2a6:	4652      	mov	r2, sl
 800f2a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f2ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800f2ae:	f7ff ff26 	bl	800f0fe <__exponent>
 800f2b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2b4:	1813      	adds	r3, r2, r0
 800f2b6:	2a01      	cmp	r2, #1
 800f2b8:	4681      	mov	r9, r0
 800f2ba:	6123      	str	r3, [r4, #16]
 800f2bc:	dc02      	bgt.n	800f2c4 <_printf_float+0x150>
 800f2be:	6822      	ldr	r2, [r4, #0]
 800f2c0:	07d2      	lsls	r2, r2, #31
 800f2c2:	d501      	bpl.n	800f2c8 <_printf_float+0x154>
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	6123      	str	r3, [r4, #16]
 800f2c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d0a2      	beq.n	800f216 <_printf_float+0xa2>
 800f2d0:	232d      	movs	r3, #45	@ 0x2d
 800f2d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d6:	e79e      	b.n	800f216 <_printf_float+0xa2>
 800f2d8:	9a06      	ldr	r2, [sp, #24]
 800f2da:	2a47      	cmp	r2, #71	@ 0x47
 800f2dc:	d1c2      	bne.n	800f264 <_printf_float+0xf0>
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1c0      	bne.n	800f264 <_printf_float+0xf0>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e7bd      	b.n	800f262 <_printf_float+0xee>
 800f2e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f2ea:	d9db      	bls.n	800f2a4 <_printf_float+0x130>
 800f2ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f2f0:	d118      	bne.n	800f324 <_printf_float+0x1b0>
 800f2f2:	2900      	cmp	r1, #0
 800f2f4:	6863      	ldr	r3, [r4, #4]
 800f2f6:	dd0b      	ble.n	800f310 <_printf_float+0x19c>
 800f2f8:	6121      	str	r1, [r4, #16]
 800f2fa:	b913      	cbnz	r3, 800f302 <_printf_float+0x18e>
 800f2fc:	6822      	ldr	r2, [r4, #0]
 800f2fe:	07d0      	lsls	r0, r2, #31
 800f300:	d502      	bpl.n	800f308 <_printf_float+0x194>
 800f302:	3301      	adds	r3, #1
 800f304:	440b      	add	r3, r1
 800f306:	6123      	str	r3, [r4, #16]
 800f308:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f30a:	f04f 0900 	mov.w	r9, #0
 800f30e:	e7db      	b.n	800f2c8 <_printf_float+0x154>
 800f310:	b913      	cbnz	r3, 800f318 <_printf_float+0x1a4>
 800f312:	6822      	ldr	r2, [r4, #0]
 800f314:	07d2      	lsls	r2, r2, #31
 800f316:	d501      	bpl.n	800f31c <_printf_float+0x1a8>
 800f318:	3302      	adds	r3, #2
 800f31a:	e7f4      	b.n	800f306 <_printf_float+0x192>
 800f31c:	2301      	movs	r3, #1
 800f31e:	e7f2      	b.n	800f306 <_printf_float+0x192>
 800f320:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f326:	4299      	cmp	r1, r3
 800f328:	db05      	blt.n	800f336 <_printf_float+0x1c2>
 800f32a:	6823      	ldr	r3, [r4, #0]
 800f32c:	6121      	str	r1, [r4, #16]
 800f32e:	07d8      	lsls	r0, r3, #31
 800f330:	d5ea      	bpl.n	800f308 <_printf_float+0x194>
 800f332:	1c4b      	adds	r3, r1, #1
 800f334:	e7e7      	b.n	800f306 <_printf_float+0x192>
 800f336:	2900      	cmp	r1, #0
 800f338:	bfd4      	ite	le
 800f33a:	f1c1 0202 	rsble	r2, r1, #2
 800f33e:	2201      	movgt	r2, #1
 800f340:	4413      	add	r3, r2
 800f342:	e7e0      	b.n	800f306 <_printf_float+0x192>
 800f344:	6823      	ldr	r3, [r4, #0]
 800f346:	055a      	lsls	r2, r3, #21
 800f348:	d407      	bmi.n	800f35a <_printf_float+0x1e6>
 800f34a:	6923      	ldr	r3, [r4, #16]
 800f34c:	4642      	mov	r2, r8
 800f34e:	4631      	mov	r1, r6
 800f350:	4628      	mov	r0, r5
 800f352:	47b8      	blx	r7
 800f354:	3001      	adds	r0, #1
 800f356:	d12b      	bne.n	800f3b0 <_printf_float+0x23c>
 800f358:	e767      	b.n	800f22a <_printf_float+0xb6>
 800f35a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f35e:	f240 80dd 	bls.w	800f51c <_printf_float+0x3a8>
 800f362:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f366:	2200      	movs	r2, #0
 800f368:	2300      	movs	r3, #0
 800f36a:	f7f1 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800f36e:	2800      	cmp	r0, #0
 800f370:	d033      	beq.n	800f3da <_printf_float+0x266>
 800f372:	4a37      	ldr	r2, [pc, #220]	@ (800f450 <_printf_float+0x2dc>)
 800f374:	2301      	movs	r3, #1
 800f376:	4631      	mov	r1, r6
 800f378:	4628      	mov	r0, r5
 800f37a:	47b8      	blx	r7
 800f37c:	3001      	adds	r0, #1
 800f37e:	f43f af54 	beq.w	800f22a <_printf_float+0xb6>
 800f382:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f386:	4543      	cmp	r3, r8
 800f388:	db02      	blt.n	800f390 <_printf_float+0x21c>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	07d8      	lsls	r0, r3, #31
 800f38e:	d50f      	bpl.n	800f3b0 <_printf_float+0x23c>
 800f390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f394:	4631      	mov	r1, r6
 800f396:	4628      	mov	r0, r5
 800f398:	47b8      	blx	r7
 800f39a:	3001      	adds	r0, #1
 800f39c:	f43f af45 	beq.w	800f22a <_printf_float+0xb6>
 800f3a0:	f04f 0900 	mov.w	r9, #0
 800f3a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3a8:	f104 0a1a 	add.w	sl, r4, #26
 800f3ac:	45c8      	cmp	r8, r9
 800f3ae:	dc09      	bgt.n	800f3c4 <_printf_float+0x250>
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	079b      	lsls	r3, r3, #30
 800f3b4:	f100 8103 	bmi.w	800f5be <_printf_float+0x44a>
 800f3b8:	68e0      	ldr	r0, [r4, #12]
 800f3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3bc:	4298      	cmp	r0, r3
 800f3be:	bfb8      	it	lt
 800f3c0:	4618      	movlt	r0, r3
 800f3c2:	e734      	b.n	800f22e <_printf_float+0xba>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	4652      	mov	r2, sl
 800f3c8:	4631      	mov	r1, r6
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	47b8      	blx	r7
 800f3ce:	3001      	adds	r0, #1
 800f3d0:	f43f af2b 	beq.w	800f22a <_printf_float+0xb6>
 800f3d4:	f109 0901 	add.w	r9, r9, #1
 800f3d8:	e7e8      	b.n	800f3ac <_printf_float+0x238>
 800f3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dc39      	bgt.n	800f454 <_printf_float+0x2e0>
 800f3e0:	4a1b      	ldr	r2, [pc, #108]	@ (800f450 <_printf_float+0x2dc>)
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	4631      	mov	r1, r6
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	47b8      	blx	r7
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	f43f af1d 	beq.w	800f22a <_printf_float+0xb6>
 800f3f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f3f4:	ea59 0303 	orrs.w	r3, r9, r3
 800f3f8:	d102      	bne.n	800f400 <_printf_float+0x28c>
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	07d9      	lsls	r1, r3, #31
 800f3fe:	d5d7      	bpl.n	800f3b0 <_printf_float+0x23c>
 800f400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	f43f af0d 	beq.w	800f22a <_printf_float+0xb6>
 800f410:	f04f 0a00 	mov.w	sl, #0
 800f414:	f104 0b1a 	add.w	fp, r4, #26
 800f418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41a:	425b      	negs	r3, r3
 800f41c:	4553      	cmp	r3, sl
 800f41e:	dc01      	bgt.n	800f424 <_printf_float+0x2b0>
 800f420:	464b      	mov	r3, r9
 800f422:	e793      	b.n	800f34c <_printf_float+0x1d8>
 800f424:	2301      	movs	r3, #1
 800f426:	465a      	mov	r2, fp
 800f428:	4631      	mov	r1, r6
 800f42a:	4628      	mov	r0, r5
 800f42c:	47b8      	blx	r7
 800f42e:	3001      	adds	r0, #1
 800f430:	f43f aefb 	beq.w	800f22a <_printf_float+0xb6>
 800f434:	f10a 0a01 	add.w	sl, sl, #1
 800f438:	e7ee      	b.n	800f418 <_printf_float+0x2a4>
 800f43a:	bf00      	nop
 800f43c:	7fefffff 	.word	0x7fefffff
 800f440:	080145b0 	.word	0x080145b0
 800f444:	080145ac 	.word	0x080145ac
 800f448:	080145b8 	.word	0x080145b8
 800f44c:	080145b4 	.word	0x080145b4
 800f450:	080145bc 	.word	0x080145bc
 800f454:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f456:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f45a:	4553      	cmp	r3, sl
 800f45c:	bfa8      	it	ge
 800f45e:	4653      	movge	r3, sl
 800f460:	2b00      	cmp	r3, #0
 800f462:	4699      	mov	r9, r3
 800f464:	dc36      	bgt.n	800f4d4 <_printf_float+0x360>
 800f466:	f04f 0b00 	mov.w	fp, #0
 800f46a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f46e:	f104 021a 	add.w	r2, r4, #26
 800f472:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f474:	9306      	str	r3, [sp, #24]
 800f476:	eba3 0309 	sub.w	r3, r3, r9
 800f47a:	455b      	cmp	r3, fp
 800f47c:	dc31      	bgt.n	800f4e2 <_printf_float+0x36e>
 800f47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f480:	459a      	cmp	sl, r3
 800f482:	dc3a      	bgt.n	800f4fa <_printf_float+0x386>
 800f484:	6823      	ldr	r3, [r4, #0]
 800f486:	07da      	lsls	r2, r3, #31
 800f488:	d437      	bmi.n	800f4fa <_printf_float+0x386>
 800f48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f48c:	ebaa 0903 	sub.w	r9, sl, r3
 800f490:	9b06      	ldr	r3, [sp, #24]
 800f492:	ebaa 0303 	sub.w	r3, sl, r3
 800f496:	4599      	cmp	r9, r3
 800f498:	bfa8      	it	ge
 800f49a:	4699      	movge	r9, r3
 800f49c:	f1b9 0f00 	cmp.w	r9, #0
 800f4a0:	dc33      	bgt.n	800f50a <_printf_float+0x396>
 800f4a2:	f04f 0800 	mov.w	r8, #0
 800f4a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4aa:	f104 0b1a 	add.w	fp, r4, #26
 800f4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b0:	ebaa 0303 	sub.w	r3, sl, r3
 800f4b4:	eba3 0309 	sub.w	r3, r3, r9
 800f4b8:	4543      	cmp	r3, r8
 800f4ba:	f77f af79 	ble.w	800f3b0 <_printf_float+0x23c>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	465a      	mov	r2, fp
 800f4c2:	4631      	mov	r1, r6
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	47b8      	blx	r7
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	f43f aeae 	beq.w	800f22a <_printf_float+0xb6>
 800f4ce:	f108 0801 	add.w	r8, r8, #1
 800f4d2:	e7ec      	b.n	800f4ae <_printf_float+0x33a>
 800f4d4:	4642      	mov	r2, r8
 800f4d6:	4631      	mov	r1, r6
 800f4d8:	4628      	mov	r0, r5
 800f4da:	47b8      	blx	r7
 800f4dc:	3001      	adds	r0, #1
 800f4de:	d1c2      	bne.n	800f466 <_printf_float+0x2f2>
 800f4e0:	e6a3      	b.n	800f22a <_printf_float+0xb6>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	4631      	mov	r1, r6
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	9206      	str	r2, [sp, #24]
 800f4ea:	47b8      	blx	r7
 800f4ec:	3001      	adds	r0, #1
 800f4ee:	f43f ae9c 	beq.w	800f22a <_printf_float+0xb6>
 800f4f2:	9a06      	ldr	r2, [sp, #24]
 800f4f4:	f10b 0b01 	add.w	fp, fp, #1
 800f4f8:	e7bb      	b.n	800f472 <_printf_float+0x2fe>
 800f4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4fe:	4631      	mov	r1, r6
 800f500:	4628      	mov	r0, r5
 800f502:	47b8      	blx	r7
 800f504:	3001      	adds	r0, #1
 800f506:	d1c0      	bne.n	800f48a <_printf_float+0x316>
 800f508:	e68f      	b.n	800f22a <_printf_float+0xb6>
 800f50a:	9a06      	ldr	r2, [sp, #24]
 800f50c:	464b      	mov	r3, r9
 800f50e:	4442      	add	r2, r8
 800f510:	4631      	mov	r1, r6
 800f512:	4628      	mov	r0, r5
 800f514:	47b8      	blx	r7
 800f516:	3001      	adds	r0, #1
 800f518:	d1c3      	bne.n	800f4a2 <_printf_float+0x32e>
 800f51a:	e686      	b.n	800f22a <_printf_float+0xb6>
 800f51c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f520:	f1ba 0f01 	cmp.w	sl, #1
 800f524:	dc01      	bgt.n	800f52a <_printf_float+0x3b6>
 800f526:	07db      	lsls	r3, r3, #31
 800f528:	d536      	bpl.n	800f598 <_printf_float+0x424>
 800f52a:	2301      	movs	r3, #1
 800f52c:	4642      	mov	r2, r8
 800f52e:	4631      	mov	r1, r6
 800f530:	4628      	mov	r0, r5
 800f532:	47b8      	blx	r7
 800f534:	3001      	adds	r0, #1
 800f536:	f43f ae78 	beq.w	800f22a <_printf_float+0xb6>
 800f53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	47b8      	blx	r7
 800f544:	3001      	adds	r0, #1
 800f546:	f43f ae70 	beq.w	800f22a <_printf_float+0xb6>
 800f54a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f54e:	2200      	movs	r2, #0
 800f550:	2300      	movs	r3, #0
 800f552:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f556:	f7f1 fabf 	bl	8000ad8 <__aeabi_dcmpeq>
 800f55a:	b9c0      	cbnz	r0, 800f58e <_printf_float+0x41a>
 800f55c:	4653      	mov	r3, sl
 800f55e:	f108 0201 	add.w	r2, r8, #1
 800f562:	4631      	mov	r1, r6
 800f564:	4628      	mov	r0, r5
 800f566:	47b8      	blx	r7
 800f568:	3001      	adds	r0, #1
 800f56a:	d10c      	bne.n	800f586 <_printf_float+0x412>
 800f56c:	e65d      	b.n	800f22a <_printf_float+0xb6>
 800f56e:	2301      	movs	r3, #1
 800f570:	465a      	mov	r2, fp
 800f572:	4631      	mov	r1, r6
 800f574:	4628      	mov	r0, r5
 800f576:	47b8      	blx	r7
 800f578:	3001      	adds	r0, #1
 800f57a:	f43f ae56 	beq.w	800f22a <_printf_float+0xb6>
 800f57e:	f108 0801 	add.w	r8, r8, #1
 800f582:	45d0      	cmp	r8, sl
 800f584:	dbf3      	blt.n	800f56e <_printf_float+0x3fa>
 800f586:	464b      	mov	r3, r9
 800f588:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f58c:	e6df      	b.n	800f34e <_printf_float+0x1da>
 800f58e:	f04f 0800 	mov.w	r8, #0
 800f592:	f104 0b1a 	add.w	fp, r4, #26
 800f596:	e7f4      	b.n	800f582 <_printf_float+0x40e>
 800f598:	2301      	movs	r3, #1
 800f59a:	4642      	mov	r2, r8
 800f59c:	e7e1      	b.n	800f562 <_printf_float+0x3ee>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	464a      	mov	r2, r9
 800f5a2:	4631      	mov	r1, r6
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b8      	blx	r7
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	f43f ae3e 	beq.w	800f22a <_printf_float+0xb6>
 800f5ae:	f108 0801 	add.w	r8, r8, #1
 800f5b2:	68e3      	ldr	r3, [r4, #12]
 800f5b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5b6:	1a5b      	subs	r3, r3, r1
 800f5b8:	4543      	cmp	r3, r8
 800f5ba:	dcf0      	bgt.n	800f59e <_printf_float+0x42a>
 800f5bc:	e6fc      	b.n	800f3b8 <_printf_float+0x244>
 800f5be:	f04f 0800 	mov.w	r8, #0
 800f5c2:	f104 0919 	add.w	r9, r4, #25
 800f5c6:	e7f4      	b.n	800f5b2 <_printf_float+0x43e>

0800f5c8 <_printf_common>:
 800f5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5cc:	4616      	mov	r6, r2
 800f5ce:	4698      	mov	r8, r3
 800f5d0:	688a      	ldr	r2, [r1, #8]
 800f5d2:	690b      	ldr	r3, [r1, #16]
 800f5d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	bfb8      	it	lt
 800f5dc:	4613      	movlt	r3, r2
 800f5de:	6033      	str	r3, [r6, #0]
 800f5e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	b10a      	cbz	r2, 800f5ee <_printf_common+0x26>
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	6033      	str	r3, [r6, #0]
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	0699      	lsls	r1, r3, #26
 800f5f2:	bf42      	ittt	mi
 800f5f4:	6833      	ldrmi	r3, [r6, #0]
 800f5f6:	3302      	addmi	r3, #2
 800f5f8:	6033      	strmi	r3, [r6, #0]
 800f5fa:	6825      	ldr	r5, [r4, #0]
 800f5fc:	f015 0506 	ands.w	r5, r5, #6
 800f600:	d106      	bne.n	800f610 <_printf_common+0x48>
 800f602:	f104 0a19 	add.w	sl, r4, #25
 800f606:	68e3      	ldr	r3, [r4, #12]
 800f608:	6832      	ldr	r2, [r6, #0]
 800f60a:	1a9b      	subs	r3, r3, r2
 800f60c:	42ab      	cmp	r3, r5
 800f60e:	dc26      	bgt.n	800f65e <_printf_common+0x96>
 800f610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f614:	6822      	ldr	r2, [r4, #0]
 800f616:	3b00      	subs	r3, #0
 800f618:	bf18      	it	ne
 800f61a:	2301      	movne	r3, #1
 800f61c:	0692      	lsls	r2, r2, #26
 800f61e:	d42b      	bmi.n	800f678 <_printf_common+0xb0>
 800f620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f624:	4641      	mov	r1, r8
 800f626:	4638      	mov	r0, r7
 800f628:	47c8      	blx	r9
 800f62a:	3001      	adds	r0, #1
 800f62c:	d01e      	beq.n	800f66c <_printf_common+0xa4>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	6922      	ldr	r2, [r4, #16]
 800f632:	f003 0306 	and.w	r3, r3, #6
 800f636:	2b04      	cmp	r3, #4
 800f638:	bf02      	ittt	eq
 800f63a:	68e5      	ldreq	r5, [r4, #12]
 800f63c:	6833      	ldreq	r3, [r6, #0]
 800f63e:	1aed      	subeq	r5, r5, r3
 800f640:	68a3      	ldr	r3, [r4, #8]
 800f642:	bf0c      	ite	eq
 800f644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f648:	2500      	movne	r5, #0
 800f64a:	4293      	cmp	r3, r2
 800f64c:	bfc4      	itt	gt
 800f64e:	1a9b      	subgt	r3, r3, r2
 800f650:	18ed      	addgt	r5, r5, r3
 800f652:	2600      	movs	r6, #0
 800f654:	341a      	adds	r4, #26
 800f656:	42b5      	cmp	r5, r6
 800f658:	d11a      	bne.n	800f690 <_printf_common+0xc8>
 800f65a:	2000      	movs	r0, #0
 800f65c:	e008      	b.n	800f670 <_printf_common+0xa8>
 800f65e:	2301      	movs	r3, #1
 800f660:	4652      	mov	r2, sl
 800f662:	4641      	mov	r1, r8
 800f664:	4638      	mov	r0, r7
 800f666:	47c8      	blx	r9
 800f668:	3001      	adds	r0, #1
 800f66a:	d103      	bne.n	800f674 <_printf_common+0xac>
 800f66c:	f04f 30ff 	mov.w	r0, #4294967295
 800f670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f674:	3501      	adds	r5, #1
 800f676:	e7c6      	b.n	800f606 <_printf_common+0x3e>
 800f678:	18e1      	adds	r1, r4, r3
 800f67a:	1c5a      	adds	r2, r3, #1
 800f67c:	2030      	movs	r0, #48	@ 0x30
 800f67e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f682:	4422      	add	r2, r4
 800f684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f68c:	3302      	adds	r3, #2
 800f68e:	e7c7      	b.n	800f620 <_printf_common+0x58>
 800f690:	2301      	movs	r3, #1
 800f692:	4622      	mov	r2, r4
 800f694:	4641      	mov	r1, r8
 800f696:	4638      	mov	r0, r7
 800f698:	47c8      	blx	r9
 800f69a:	3001      	adds	r0, #1
 800f69c:	d0e6      	beq.n	800f66c <_printf_common+0xa4>
 800f69e:	3601      	adds	r6, #1
 800f6a0:	e7d9      	b.n	800f656 <_printf_common+0x8e>
	...

0800f6a4 <_printf_i>:
 800f6a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a8:	7e0f      	ldrb	r7, [r1, #24]
 800f6aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f6ac:	2f78      	cmp	r7, #120	@ 0x78
 800f6ae:	4691      	mov	r9, r2
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	469a      	mov	sl, r3
 800f6b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f6ba:	d807      	bhi.n	800f6cc <_printf_i+0x28>
 800f6bc:	2f62      	cmp	r7, #98	@ 0x62
 800f6be:	d80a      	bhi.n	800f6d6 <_printf_i+0x32>
 800f6c0:	2f00      	cmp	r7, #0
 800f6c2:	f000 80d1 	beq.w	800f868 <_printf_i+0x1c4>
 800f6c6:	2f58      	cmp	r7, #88	@ 0x58
 800f6c8:	f000 80b8 	beq.w	800f83c <_printf_i+0x198>
 800f6cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f6d4:	e03a      	b.n	800f74c <_printf_i+0xa8>
 800f6d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f6da:	2b15      	cmp	r3, #21
 800f6dc:	d8f6      	bhi.n	800f6cc <_printf_i+0x28>
 800f6de:	a101      	add	r1, pc, #4	@ (adr r1, 800f6e4 <_printf_i+0x40>)
 800f6e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6e4:	0800f73d 	.word	0x0800f73d
 800f6e8:	0800f751 	.word	0x0800f751
 800f6ec:	0800f6cd 	.word	0x0800f6cd
 800f6f0:	0800f6cd 	.word	0x0800f6cd
 800f6f4:	0800f6cd 	.word	0x0800f6cd
 800f6f8:	0800f6cd 	.word	0x0800f6cd
 800f6fc:	0800f751 	.word	0x0800f751
 800f700:	0800f6cd 	.word	0x0800f6cd
 800f704:	0800f6cd 	.word	0x0800f6cd
 800f708:	0800f6cd 	.word	0x0800f6cd
 800f70c:	0800f6cd 	.word	0x0800f6cd
 800f710:	0800f84f 	.word	0x0800f84f
 800f714:	0800f77b 	.word	0x0800f77b
 800f718:	0800f809 	.word	0x0800f809
 800f71c:	0800f6cd 	.word	0x0800f6cd
 800f720:	0800f6cd 	.word	0x0800f6cd
 800f724:	0800f871 	.word	0x0800f871
 800f728:	0800f6cd 	.word	0x0800f6cd
 800f72c:	0800f77b 	.word	0x0800f77b
 800f730:	0800f6cd 	.word	0x0800f6cd
 800f734:	0800f6cd 	.word	0x0800f6cd
 800f738:	0800f811 	.word	0x0800f811
 800f73c:	6833      	ldr	r3, [r6, #0]
 800f73e:	1d1a      	adds	r2, r3, #4
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	6032      	str	r2, [r6, #0]
 800f744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f74c:	2301      	movs	r3, #1
 800f74e:	e09c      	b.n	800f88a <_printf_i+0x1e6>
 800f750:	6833      	ldr	r3, [r6, #0]
 800f752:	6820      	ldr	r0, [r4, #0]
 800f754:	1d19      	adds	r1, r3, #4
 800f756:	6031      	str	r1, [r6, #0]
 800f758:	0606      	lsls	r6, r0, #24
 800f75a:	d501      	bpl.n	800f760 <_printf_i+0xbc>
 800f75c:	681d      	ldr	r5, [r3, #0]
 800f75e:	e003      	b.n	800f768 <_printf_i+0xc4>
 800f760:	0645      	lsls	r5, r0, #25
 800f762:	d5fb      	bpl.n	800f75c <_printf_i+0xb8>
 800f764:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f768:	2d00      	cmp	r5, #0
 800f76a:	da03      	bge.n	800f774 <_printf_i+0xd0>
 800f76c:	232d      	movs	r3, #45	@ 0x2d
 800f76e:	426d      	negs	r5, r5
 800f770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f774:	4858      	ldr	r0, [pc, #352]	@ (800f8d8 <_printf_i+0x234>)
 800f776:	230a      	movs	r3, #10
 800f778:	e011      	b.n	800f79e <_printf_i+0xfa>
 800f77a:	6821      	ldr	r1, [r4, #0]
 800f77c:	6833      	ldr	r3, [r6, #0]
 800f77e:	0608      	lsls	r0, r1, #24
 800f780:	f853 5b04 	ldr.w	r5, [r3], #4
 800f784:	d402      	bmi.n	800f78c <_printf_i+0xe8>
 800f786:	0649      	lsls	r1, r1, #25
 800f788:	bf48      	it	mi
 800f78a:	b2ad      	uxthmi	r5, r5
 800f78c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f78e:	4852      	ldr	r0, [pc, #328]	@ (800f8d8 <_printf_i+0x234>)
 800f790:	6033      	str	r3, [r6, #0]
 800f792:	bf14      	ite	ne
 800f794:	230a      	movne	r3, #10
 800f796:	2308      	moveq	r3, #8
 800f798:	2100      	movs	r1, #0
 800f79a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f79e:	6866      	ldr	r6, [r4, #4]
 800f7a0:	60a6      	str	r6, [r4, #8]
 800f7a2:	2e00      	cmp	r6, #0
 800f7a4:	db05      	blt.n	800f7b2 <_printf_i+0x10e>
 800f7a6:	6821      	ldr	r1, [r4, #0]
 800f7a8:	432e      	orrs	r6, r5
 800f7aa:	f021 0104 	bic.w	r1, r1, #4
 800f7ae:	6021      	str	r1, [r4, #0]
 800f7b0:	d04b      	beq.n	800f84a <_printf_i+0x1a6>
 800f7b2:	4616      	mov	r6, r2
 800f7b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7b8:	fb03 5711 	mls	r7, r3, r1, r5
 800f7bc:	5dc7      	ldrb	r7, [r0, r7]
 800f7be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7c2:	462f      	mov	r7, r5
 800f7c4:	42bb      	cmp	r3, r7
 800f7c6:	460d      	mov	r5, r1
 800f7c8:	d9f4      	bls.n	800f7b4 <_printf_i+0x110>
 800f7ca:	2b08      	cmp	r3, #8
 800f7cc:	d10b      	bne.n	800f7e6 <_printf_i+0x142>
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	07df      	lsls	r7, r3, #31
 800f7d2:	d508      	bpl.n	800f7e6 <_printf_i+0x142>
 800f7d4:	6923      	ldr	r3, [r4, #16]
 800f7d6:	6861      	ldr	r1, [r4, #4]
 800f7d8:	4299      	cmp	r1, r3
 800f7da:	bfde      	ittt	le
 800f7dc:	2330      	movle	r3, #48	@ 0x30
 800f7de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f7e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f7e6:	1b92      	subs	r2, r2, r6
 800f7e8:	6122      	str	r2, [r4, #16]
 800f7ea:	f8cd a000 	str.w	sl, [sp]
 800f7ee:	464b      	mov	r3, r9
 800f7f0:	aa03      	add	r2, sp, #12
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	4640      	mov	r0, r8
 800f7f6:	f7ff fee7 	bl	800f5c8 <_printf_common>
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	d14a      	bne.n	800f894 <_printf_i+0x1f0>
 800f7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f802:	b004      	add	sp, #16
 800f804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f808:	6823      	ldr	r3, [r4, #0]
 800f80a:	f043 0320 	orr.w	r3, r3, #32
 800f80e:	6023      	str	r3, [r4, #0]
 800f810:	4832      	ldr	r0, [pc, #200]	@ (800f8dc <_printf_i+0x238>)
 800f812:	2778      	movs	r7, #120	@ 0x78
 800f814:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	6831      	ldr	r1, [r6, #0]
 800f81c:	061f      	lsls	r7, r3, #24
 800f81e:	f851 5b04 	ldr.w	r5, [r1], #4
 800f822:	d402      	bmi.n	800f82a <_printf_i+0x186>
 800f824:	065f      	lsls	r7, r3, #25
 800f826:	bf48      	it	mi
 800f828:	b2ad      	uxthmi	r5, r5
 800f82a:	6031      	str	r1, [r6, #0]
 800f82c:	07d9      	lsls	r1, r3, #31
 800f82e:	bf44      	itt	mi
 800f830:	f043 0320 	orrmi.w	r3, r3, #32
 800f834:	6023      	strmi	r3, [r4, #0]
 800f836:	b11d      	cbz	r5, 800f840 <_printf_i+0x19c>
 800f838:	2310      	movs	r3, #16
 800f83a:	e7ad      	b.n	800f798 <_printf_i+0xf4>
 800f83c:	4826      	ldr	r0, [pc, #152]	@ (800f8d8 <_printf_i+0x234>)
 800f83e:	e7e9      	b.n	800f814 <_printf_i+0x170>
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	f023 0320 	bic.w	r3, r3, #32
 800f846:	6023      	str	r3, [r4, #0]
 800f848:	e7f6      	b.n	800f838 <_printf_i+0x194>
 800f84a:	4616      	mov	r6, r2
 800f84c:	e7bd      	b.n	800f7ca <_printf_i+0x126>
 800f84e:	6833      	ldr	r3, [r6, #0]
 800f850:	6825      	ldr	r5, [r4, #0]
 800f852:	6961      	ldr	r1, [r4, #20]
 800f854:	1d18      	adds	r0, r3, #4
 800f856:	6030      	str	r0, [r6, #0]
 800f858:	062e      	lsls	r6, r5, #24
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	d501      	bpl.n	800f862 <_printf_i+0x1be>
 800f85e:	6019      	str	r1, [r3, #0]
 800f860:	e002      	b.n	800f868 <_printf_i+0x1c4>
 800f862:	0668      	lsls	r0, r5, #25
 800f864:	d5fb      	bpl.n	800f85e <_printf_i+0x1ba>
 800f866:	8019      	strh	r1, [r3, #0]
 800f868:	2300      	movs	r3, #0
 800f86a:	6123      	str	r3, [r4, #16]
 800f86c:	4616      	mov	r6, r2
 800f86e:	e7bc      	b.n	800f7ea <_printf_i+0x146>
 800f870:	6833      	ldr	r3, [r6, #0]
 800f872:	1d1a      	adds	r2, r3, #4
 800f874:	6032      	str	r2, [r6, #0]
 800f876:	681e      	ldr	r6, [r3, #0]
 800f878:	6862      	ldr	r2, [r4, #4]
 800f87a:	2100      	movs	r1, #0
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7f0 fcaf 	bl	80001e0 <memchr>
 800f882:	b108      	cbz	r0, 800f888 <_printf_i+0x1e4>
 800f884:	1b80      	subs	r0, r0, r6
 800f886:	6060      	str	r0, [r4, #4]
 800f888:	6863      	ldr	r3, [r4, #4]
 800f88a:	6123      	str	r3, [r4, #16]
 800f88c:	2300      	movs	r3, #0
 800f88e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f892:	e7aa      	b.n	800f7ea <_printf_i+0x146>
 800f894:	6923      	ldr	r3, [r4, #16]
 800f896:	4632      	mov	r2, r6
 800f898:	4649      	mov	r1, r9
 800f89a:	4640      	mov	r0, r8
 800f89c:	47d0      	blx	sl
 800f89e:	3001      	adds	r0, #1
 800f8a0:	d0ad      	beq.n	800f7fe <_printf_i+0x15a>
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	079b      	lsls	r3, r3, #30
 800f8a6:	d413      	bmi.n	800f8d0 <_printf_i+0x22c>
 800f8a8:	68e0      	ldr	r0, [r4, #12]
 800f8aa:	9b03      	ldr	r3, [sp, #12]
 800f8ac:	4298      	cmp	r0, r3
 800f8ae:	bfb8      	it	lt
 800f8b0:	4618      	movlt	r0, r3
 800f8b2:	e7a6      	b.n	800f802 <_printf_i+0x15e>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	4632      	mov	r2, r6
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	4640      	mov	r0, r8
 800f8bc:	47d0      	blx	sl
 800f8be:	3001      	adds	r0, #1
 800f8c0:	d09d      	beq.n	800f7fe <_printf_i+0x15a>
 800f8c2:	3501      	adds	r5, #1
 800f8c4:	68e3      	ldr	r3, [r4, #12]
 800f8c6:	9903      	ldr	r1, [sp, #12]
 800f8c8:	1a5b      	subs	r3, r3, r1
 800f8ca:	42ab      	cmp	r3, r5
 800f8cc:	dcf2      	bgt.n	800f8b4 <_printf_i+0x210>
 800f8ce:	e7eb      	b.n	800f8a8 <_printf_i+0x204>
 800f8d0:	2500      	movs	r5, #0
 800f8d2:	f104 0619 	add.w	r6, r4, #25
 800f8d6:	e7f5      	b.n	800f8c4 <_printf_i+0x220>
 800f8d8:	080145be 	.word	0x080145be
 800f8dc:	080145cf 	.word	0x080145cf

0800f8e0 <_scanf_float>:
 800f8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e4:	b087      	sub	sp, #28
 800f8e6:	4691      	mov	r9, r2
 800f8e8:	9303      	str	r3, [sp, #12]
 800f8ea:	688b      	ldr	r3, [r1, #8]
 800f8ec:	1e5a      	subs	r2, r3, #1
 800f8ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f8f2:	bf81      	itttt	hi
 800f8f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f8f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800f8fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f900:	608b      	strhi	r3, [r1, #8]
 800f902:	680b      	ldr	r3, [r1, #0]
 800f904:	460a      	mov	r2, r1
 800f906:	f04f 0500 	mov.w	r5, #0
 800f90a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f90e:	f842 3b1c 	str.w	r3, [r2], #28
 800f912:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f916:	4680      	mov	r8, r0
 800f918:	460c      	mov	r4, r1
 800f91a:	bf98      	it	ls
 800f91c:	f04f 0b00 	movls.w	fp, #0
 800f920:	9201      	str	r2, [sp, #4]
 800f922:	4616      	mov	r6, r2
 800f924:	46aa      	mov	sl, r5
 800f926:	462f      	mov	r7, r5
 800f928:	9502      	str	r5, [sp, #8]
 800f92a:	68a2      	ldr	r2, [r4, #8]
 800f92c:	b15a      	cbz	r2, 800f946 <_scanf_float+0x66>
 800f92e:	f8d9 3000 	ldr.w	r3, [r9]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2b4e      	cmp	r3, #78	@ 0x4e
 800f936:	d863      	bhi.n	800fa00 <_scanf_float+0x120>
 800f938:	2b40      	cmp	r3, #64	@ 0x40
 800f93a:	d83b      	bhi.n	800f9b4 <_scanf_float+0xd4>
 800f93c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f940:	b2c8      	uxtb	r0, r1
 800f942:	280e      	cmp	r0, #14
 800f944:	d939      	bls.n	800f9ba <_scanf_float+0xda>
 800f946:	b11f      	cbz	r7, 800f950 <_scanf_float+0x70>
 800f948:	6823      	ldr	r3, [r4, #0]
 800f94a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f954:	f1ba 0f01 	cmp.w	sl, #1
 800f958:	f200 8114 	bhi.w	800fb84 <_scanf_float+0x2a4>
 800f95c:	9b01      	ldr	r3, [sp, #4]
 800f95e:	429e      	cmp	r6, r3
 800f960:	f200 8105 	bhi.w	800fb6e <_scanf_float+0x28e>
 800f964:	2001      	movs	r0, #1
 800f966:	b007      	add	sp, #28
 800f968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f970:	2a0d      	cmp	r2, #13
 800f972:	d8e8      	bhi.n	800f946 <_scanf_float+0x66>
 800f974:	a101      	add	r1, pc, #4	@ (adr r1, 800f97c <_scanf_float+0x9c>)
 800f976:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f97a:	bf00      	nop
 800f97c:	0800fac5 	.word	0x0800fac5
 800f980:	0800f947 	.word	0x0800f947
 800f984:	0800f947 	.word	0x0800f947
 800f988:	0800f947 	.word	0x0800f947
 800f98c:	0800fb21 	.word	0x0800fb21
 800f990:	0800fafb 	.word	0x0800fafb
 800f994:	0800f947 	.word	0x0800f947
 800f998:	0800f947 	.word	0x0800f947
 800f99c:	0800fad3 	.word	0x0800fad3
 800f9a0:	0800f947 	.word	0x0800f947
 800f9a4:	0800f947 	.word	0x0800f947
 800f9a8:	0800f947 	.word	0x0800f947
 800f9ac:	0800f947 	.word	0x0800f947
 800f9b0:	0800fa8f 	.word	0x0800fa8f
 800f9b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f9b8:	e7da      	b.n	800f970 <_scanf_float+0x90>
 800f9ba:	290e      	cmp	r1, #14
 800f9bc:	d8c3      	bhi.n	800f946 <_scanf_float+0x66>
 800f9be:	a001      	add	r0, pc, #4	@ (adr r0, 800f9c4 <_scanf_float+0xe4>)
 800f9c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9c4:	0800fa7f 	.word	0x0800fa7f
 800f9c8:	0800f947 	.word	0x0800f947
 800f9cc:	0800fa7f 	.word	0x0800fa7f
 800f9d0:	0800fb0f 	.word	0x0800fb0f
 800f9d4:	0800f947 	.word	0x0800f947
 800f9d8:	0800fa21 	.word	0x0800fa21
 800f9dc:	0800fa65 	.word	0x0800fa65
 800f9e0:	0800fa65 	.word	0x0800fa65
 800f9e4:	0800fa65 	.word	0x0800fa65
 800f9e8:	0800fa65 	.word	0x0800fa65
 800f9ec:	0800fa65 	.word	0x0800fa65
 800f9f0:	0800fa65 	.word	0x0800fa65
 800f9f4:	0800fa65 	.word	0x0800fa65
 800f9f8:	0800fa65 	.word	0x0800fa65
 800f9fc:	0800fa65 	.word	0x0800fa65
 800fa00:	2b6e      	cmp	r3, #110	@ 0x6e
 800fa02:	d809      	bhi.n	800fa18 <_scanf_float+0x138>
 800fa04:	2b60      	cmp	r3, #96	@ 0x60
 800fa06:	d8b1      	bhi.n	800f96c <_scanf_float+0x8c>
 800fa08:	2b54      	cmp	r3, #84	@ 0x54
 800fa0a:	d07b      	beq.n	800fb04 <_scanf_float+0x224>
 800fa0c:	2b59      	cmp	r3, #89	@ 0x59
 800fa0e:	d19a      	bne.n	800f946 <_scanf_float+0x66>
 800fa10:	2d07      	cmp	r5, #7
 800fa12:	d198      	bne.n	800f946 <_scanf_float+0x66>
 800fa14:	2508      	movs	r5, #8
 800fa16:	e02f      	b.n	800fa78 <_scanf_float+0x198>
 800fa18:	2b74      	cmp	r3, #116	@ 0x74
 800fa1a:	d073      	beq.n	800fb04 <_scanf_float+0x224>
 800fa1c:	2b79      	cmp	r3, #121	@ 0x79
 800fa1e:	e7f6      	b.n	800fa0e <_scanf_float+0x12e>
 800fa20:	6821      	ldr	r1, [r4, #0]
 800fa22:	05c8      	lsls	r0, r1, #23
 800fa24:	d51e      	bpl.n	800fa64 <_scanf_float+0x184>
 800fa26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fa2a:	6021      	str	r1, [r4, #0]
 800fa2c:	3701      	adds	r7, #1
 800fa2e:	f1bb 0f00 	cmp.w	fp, #0
 800fa32:	d003      	beq.n	800fa3c <_scanf_float+0x15c>
 800fa34:	3201      	adds	r2, #1
 800fa36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa3a:	60a2      	str	r2, [r4, #8]
 800fa3c:	68a3      	ldr	r3, [r4, #8]
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	60a3      	str	r3, [r4, #8]
 800fa42:	6923      	ldr	r3, [r4, #16]
 800fa44:	3301      	adds	r3, #1
 800fa46:	6123      	str	r3, [r4, #16]
 800fa48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f8c9 3004 	str.w	r3, [r9, #4]
 800fa54:	f340 8082 	ble.w	800fb5c <_scanf_float+0x27c>
 800fa58:	f8d9 3000 	ldr.w	r3, [r9]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	f8c9 3000 	str.w	r3, [r9]
 800fa62:	e762      	b.n	800f92a <_scanf_float+0x4a>
 800fa64:	eb1a 0105 	adds.w	r1, sl, r5
 800fa68:	f47f af6d 	bne.w	800f946 <_scanf_float+0x66>
 800fa6c:	6822      	ldr	r2, [r4, #0]
 800fa6e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fa72:	6022      	str	r2, [r4, #0]
 800fa74:	460d      	mov	r5, r1
 800fa76:	468a      	mov	sl, r1
 800fa78:	f806 3b01 	strb.w	r3, [r6], #1
 800fa7c:	e7de      	b.n	800fa3c <_scanf_float+0x15c>
 800fa7e:	6822      	ldr	r2, [r4, #0]
 800fa80:	0610      	lsls	r0, r2, #24
 800fa82:	f57f af60 	bpl.w	800f946 <_scanf_float+0x66>
 800fa86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fa8a:	6022      	str	r2, [r4, #0]
 800fa8c:	e7f4      	b.n	800fa78 <_scanf_float+0x198>
 800fa8e:	f1ba 0f00 	cmp.w	sl, #0
 800fa92:	d10c      	bne.n	800faae <_scanf_float+0x1ce>
 800fa94:	b977      	cbnz	r7, 800fab4 <_scanf_float+0x1d4>
 800fa96:	6822      	ldr	r2, [r4, #0]
 800fa98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fa9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800faa0:	d108      	bne.n	800fab4 <_scanf_float+0x1d4>
 800faa2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800faa6:	6022      	str	r2, [r4, #0]
 800faa8:	f04f 0a01 	mov.w	sl, #1
 800faac:	e7e4      	b.n	800fa78 <_scanf_float+0x198>
 800faae:	f1ba 0f02 	cmp.w	sl, #2
 800fab2:	d050      	beq.n	800fb56 <_scanf_float+0x276>
 800fab4:	2d01      	cmp	r5, #1
 800fab6:	d002      	beq.n	800fabe <_scanf_float+0x1de>
 800fab8:	2d04      	cmp	r5, #4
 800faba:	f47f af44 	bne.w	800f946 <_scanf_float+0x66>
 800fabe:	3501      	adds	r5, #1
 800fac0:	b2ed      	uxtb	r5, r5
 800fac2:	e7d9      	b.n	800fa78 <_scanf_float+0x198>
 800fac4:	f1ba 0f01 	cmp.w	sl, #1
 800fac8:	f47f af3d 	bne.w	800f946 <_scanf_float+0x66>
 800facc:	f04f 0a02 	mov.w	sl, #2
 800fad0:	e7d2      	b.n	800fa78 <_scanf_float+0x198>
 800fad2:	b975      	cbnz	r5, 800faf2 <_scanf_float+0x212>
 800fad4:	2f00      	cmp	r7, #0
 800fad6:	f47f af37 	bne.w	800f948 <_scanf_float+0x68>
 800fada:	6822      	ldr	r2, [r4, #0]
 800fadc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fae0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fae4:	f040 8103 	bne.w	800fcee <_scanf_float+0x40e>
 800fae8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800faec:	6022      	str	r2, [r4, #0]
 800faee:	2501      	movs	r5, #1
 800faf0:	e7c2      	b.n	800fa78 <_scanf_float+0x198>
 800faf2:	2d03      	cmp	r5, #3
 800faf4:	d0e3      	beq.n	800fabe <_scanf_float+0x1de>
 800faf6:	2d05      	cmp	r5, #5
 800faf8:	e7df      	b.n	800faba <_scanf_float+0x1da>
 800fafa:	2d02      	cmp	r5, #2
 800fafc:	f47f af23 	bne.w	800f946 <_scanf_float+0x66>
 800fb00:	2503      	movs	r5, #3
 800fb02:	e7b9      	b.n	800fa78 <_scanf_float+0x198>
 800fb04:	2d06      	cmp	r5, #6
 800fb06:	f47f af1e 	bne.w	800f946 <_scanf_float+0x66>
 800fb0a:	2507      	movs	r5, #7
 800fb0c:	e7b4      	b.n	800fa78 <_scanf_float+0x198>
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	0591      	lsls	r1, r2, #22
 800fb12:	f57f af18 	bpl.w	800f946 <_scanf_float+0x66>
 800fb16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fb1a:	6022      	str	r2, [r4, #0]
 800fb1c:	9702      	str	r7, [sp, #8]
 800fb1e:	e7ab      	b.n	800fa78 <_scanf_float+0x198>
 800fb20:	6822      	ldr	r2, [r4, #0]
 800fb22:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fb26:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fb2a:	d005      	beq.n	800fb38 <_scanf_float+0x258>
 800fb2c:	0550      	lsls	r0, r2, #21
 800fb2e:	f57f af0a 	bpl.w	800f946 <_scanf_float+0x66>
 800fb32:	2f00      	cmp	r7, #0
 800fb34:	f000 80db 	beq.w	800fcee <_scanf_float+0x40e>
 800fb38:	0591      	lsls	r1, r2, #22
 800fb3a:	bf58      	it	pl
 800fb3c:	9902      	ldrpl	r1, [sp, #8]
 800fb3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb42:	bf58      	it	pl
 800fb44:	1a79      	subpl	r1, r7, r1
 800fb46:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fb4a:	bf58      	it	pl
 800fb4c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb50:	6022      	str	r2, [r4, #0]
 800fb52:	2700      	movs	r7, #0
 800fb54:	e790      	b.n	800fa78 <_scanf_float+0x198>
 800fb56:	f04f 0a03 	mov.w	sl, #3
 800fb5a:	e78d      	b.n	800fa78 <_scanf_float+0x198>
 800fb5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fb60:	4649      	mov	r1, r9
 800fb62:	4640      	mov	r0, r8
 800fb64:	4798      	blx	r3
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f43f aedf 	beq.w	800f92a <_scanf_float+0x4a>
 800fb6c:	e6eb      	b.n	800f946 <_scanf_float+0x66>
 800fb6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb76:	464a      	mov	r2, r9
 800fb78:	4640      	mov	r0, r8
 800fb7a:	4798      	blx	r3
 800fb7c:	6923      	ldr	r3, [r4, #16]
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	6123      	str	r3, [r4, #16]
 800fb82:	e6eb      	b.n	800f95c <_scanf_float+0x7c>
 800fb84:	1e6b      	subs	r3, r5, #1
 800fb86:	2b06      	cmp	r3, #6
 800fb88:	d824      	bhi.n	800fbd4 <_scanf_float+0x2f4>
 800fb8a:	2d02      	cmp	r5, #2
 800fb8c:	d836      	bhi.n	800fbfc <_scanf_float+0x31c>
 800fb8e:	9b01      	ldr	r3, [sp, #4]
 800fb90:	429e      	cmp	r6, r3
 800fb92:	f67f aee7 	bls.w	800f964 <_scanf_float+0x84>
 800fb96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb9e:	464a      	mov	r2, r9
 800fba0:	4640      	mov	r0, r8
 800fba2:	4798      	blx	r3
 800fba4:	6923      	ldr	r3, [r4, #16]
 800fba6:	3b01      	subs	r3, #1
 800fba8:	6123      	str	r3, [r4, #16]
 800fbaa:	e7f0      	b.n	800fb8e <_scanf_float+0x2ae>
 800fbac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fbb4:	464a      	mov	r2, r9
 800fbb6:	4640      	mov	r0, r8
 800fbb8:	4798      	blx	r3
 800fbba:	6923      	ldr	r3, [r4, #16]
 800fbbc:	3b01      	subs	r3, #1
 800fbbe:	6123      	str	r3, [r4, #16]
 800fbc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbc4:	fa5f fa8a 	uxtb.w	sl, sl
 800fbc8:	f1ba 0f02 	cmp.w	sl, #2
 800fbcc:	d1ee      	bne.n	800fbac <_scanf_float+0x2cc>
 800fbce:	3d03      	subs	r5, #3
 800fbd0:	b2ed      	uxtb	r5, r5
 800fbd2:	1b76      	subs	r6, r6, r5
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	05da      	lsls	r2, r3, #23
 800fbd8:	d530      	bpl.n	800fc3c <_scanf_float+0x35c>
 800fbda:	055b      	lsls	r3, r3, #21
 800fbdc:	d511      	bpl.n	800fc02 <_scanf_float+0x322>
 800fbde:	9b01      	ldr	r3, [sp, #4]
 800fbe0:	429e      	cmp	r6, r3
 800fbe2:	f67f aebf 	bls.w	800f964 <_scanf_float+0x84>
 800fbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbee:	464a      	mov	r2, r9
 800fbf0:	4640      	mov	r0, r8
 800fbf2:	4798      	blx	r3
 800fbf4:	6923      	ldr	r3, [r4, #16]
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	6123      	str	r3, [r4, #16]
 800fbfa:	e7f0      	b.n	800fbde <_scanf_float+0x2fe>
 800fbfc:	46aa      	mov	sl, r5
 800fbfe:	46b3      	mov	fp, r6
 800fc00:	e7de      	b.n	800fbc0 <_scanf_float+0x2e0>
 800fc02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc06:	6923      	ldr	r3, [r4, #16]
 800fc08:	2965      	cmp	r1, #101	@ 0x65
 800fc0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc12:	6123      	str	r3, [r4, #16]
 800fc14:	d00c      	beq.n	800fc30 <_scanf_float+0x350>
 800fc16:	2945      	cmp	r1, #69	@ 0x45
 800fc18:	d00a      	beq.n	800fc30 <_scanf_float+0x350>
 800fc1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc1e:	464a      	mov	r2, r9
 800fc20:	4640      	mov	r0, r8
 800fc22:	4798      	blx	r3
 800fc24:	6923      	ldr	r3, [r4, #16]
 800fc26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	1eb5      	subs	r5, r6, #2
 800fc2e:	6123      	str	r3, [r4, #16]
 800fc30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc34:	464a      	mov	r2, r9
 800fc36:	4640      	mov	r0, r8
 800fc38:	4798      	blx	r3
 800fc3a:	462e      	mov	r6, r5
 800fc3c:	6822      	ldr	r2, [r4, #0]
 800fc3e:	f012 0210 	ands.w	r2, r2, #16
 800fc42:	d001      	beq.n	800fc48 <_scanf_float+0x368>
 800fc44:	2000      	movs	r0, #0
 800fc46:	e68e      	b.n	800f966 <_scanf_float+0x86>
 800fc48:	7032      	strb	r2, [r6, #0]
 800fc4a:	6823      	ldr	r3, [r4, #0]
 800fc4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fc50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc54:	d125      	bne.n	800fca2 <_scanf_float+0x3c2>
 800fc56:	9b02      	ldr	r3, [sp, #8]
 800fc58:	429f      	cmp	r7, r3
 800fc5a:	d00a      	beq.n	800fc72 <_scanf_float+0x392>
 800fc5c:	1bda      	subs	r2, r3, r7
 800fc5e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fc62:	429e      	cmp	r6, r3
 800fc64:	bf28      	it	cs
 800fc66:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fc6a:	4922      	ldr	r1, [pc, #136]	@ (800fcf4 <_scanf_float+0x414>)
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	f000 f907 	bl	800fe80 <siprintf>
 800fc72:	9901      	ldr	r1, [sp, #4]
 800fc74:	2200      	movs	r2, #0
 800fc76:	4640      	mov	r0, r8
 800fc78:	f002 fb4e 	bl	8012318 <_strtod_r>
 800fc7c:	9b03      	ldr	r3, [sp, #12]
 800fc7e:	6821      	ldr	r1, [r4, #0]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f011 0f02 	tst.w	r1, #2
 800fc86:	ec57 6b10 	vmov	r6, r7, d0
 800fc8a:	f103 0204 	add.w	r2, r3, #4
 800fc8e:	d015      	beq.n	800fcbc <_scanf_float+0x3dc>
 800fc90:	9903      	ldr	r1, [sp, #12]
 800fc92:	600a      	str	r2, [r1, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	e9c3 6700 	strd	r6, r7, [r3]
 800fc9a:	68e3      	ldr	r3, [r4, #12]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	60e3      	str	r3, [r4, #12]
 800fca0:	e7d0      	b.n	800fc44 <_scanf_float+0x364>
 800fca2:	9b04      	ldr	r3, [sp, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d0e4      	beq.n	800fc72 <_scanf_float+0x392>
 800fca8:	9905      	ldr	r1, [sp, #20]
 800fcaa:	230a      	movs	r3, #10
 800fcac:	3101      	adds	r1, #1
 800fcae:	4640      	mov	r0, r8
 800fcb0:	f002 fbb2 	bl	8012418 <_strtol_r>
 800fcb4:	9b04      	ldr	r3, [sp, #16]
 800fcb6:	9e05      	ldr	r6, [sp, #20]
 800fcb8:	1ac2      	subs	r2, r0, r3
 800fcba:	e7d0      	b.n	800fc5e <_scanf_float+0x37e>
 800fcbc:	f011 0f04 	tst.w	r1, #4
 800fcc0:	9903      	ldr	r1, [sp, #12]
 800fcc2:	600a      	str	r2, [r1, #0]
 800fcc4:	d1e6      	bne.n	800fc94 <_scanf_float+0x3b4>
 800fcc6:	681d      	ldr	r5, [r3, #0]
 800fcc8:	4632      	mov	r2, r6
 800fcca:	463b      	mov	r3, r7
 800fccc:	4630      	mov	r0, r6
 800fcce:	4639      	mov	r1, r7
 800fcd0:	f7f0 ff34 	bl	8000b3c <__aeabi_dcmpun>
 800fcd4:	b128      	cbz	r0, 800fce2 <_scanf_float+0x402>
 800fcd6:	4808      	ldr	r0, [pc, #32]	@ (800fcf8 <_scanf_float+0x418>)
 800fcd8:	f000 f9c8 	bl	801006c <nanf>
 800fcdc:	ed85 0a00 	vstr	s0, [r5]
 800fce0:	e7db      	b.n	800fc9a <_scanf_float+0x3ba>
 800fce2:	4630      	mov	r0, r6
 800fce4:	4639      	mov	r1, r7
 800fce6:	f7f0 ff87 	bl	8000bf8 <__aeabi_d2f>
 800fcea:	6028      	str	r0, [r5, #0]
 800fcec:	e7d5      	b.n	800fc9a <_scanf_float+0x3ba>
 800fcee:	2700      	movs	r7, #0
 800fcf0:	e62e      	b.n	800f950 <_scanf_float+0x70>
 800fcf2:	bf00      	nop
 800fcf4:	080145e0 	.word	0x080145e0
 800fcf8:	08014721 	.word	0x08014721

0800fcfc <std>:
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	4604      	mov	r4, r0
 800fd02:	e9c0 3300 	strd	r3, r3, [r0]
 800fd06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd0a:	6083      	str	r3, [r0, #8]
 800fd0c:	8181      	strh	r1, [r0, #12]
 800fd0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd10:	81c2      	strh	r2, [r0, #14]
 800fd12:	6183      	str	r3, [r0, #24]
 800fd14:	4619      	mov	r1, r3
 800fd16:	2208      	movs	r2, #8
 800fd18:	305c      	adds	r0, #92	@ 0x5c
 800fd1a:	f000 f916 	bl	800ff4a <memset>
 800fd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <std+0x58>)
 800fd20:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd22:	4b0d      	ldr	r3, [pc, #52]	@ (800fd58 <std+0x5c>)
 800fd24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd26:	4b0d      	ldr	r3, [pc, #52]	@ (800fd5c <std+0x60>)
 800fd28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <std+0x64>)
 800fd2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <std+0x68>)
 800fd30:	6224      	str	r4, [r4, #32]
 800fd32:	429c      	cmp	r4, r3
 800fd34:	d006      	beq.n	800fd44 <std+0x48>
 800fd36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd3a:	4294      	cmp	r4, r2
 800fd3c:	d002      	beq.n	800fd44 <std+0x48>
 800fd3e:	33d0      	adds	r3, #208	@ 0xd0
 800fd40:	429c      	cmp	r4, r3
 800fd42:	d105      	bne.n	800fd50 <std+0x54>
 800fd44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd4c:	f000 b98a 	b.w	8010064 <__retarget_lock_init_recursive>
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	0800fec5 	.word	0x0800fec5
 800fd58:	0800fee7 	.word	0x0800fee7
 800fd5c:	0800ff1f 	.word	0x0800ff1f
 800fd60:	0800ff43 	.word	0x0800ff43
 800fd64:	20001ac4 	.word	0x20001ac4

0800fd68 <stdio_exit_handler>:
 800fd68:	4a02      	ldr	r2, [pc, #8]	@ (800fd74 <stdio_exit_handler+0xc>)
 800fd6a:	4903      	ldr	r1, [pc, #12]	@ (800fd78 <stdio_exit_handler+0x10>)
 800fd6c:	4803      	ldr	r0, [pc, #12]	@ (800fd7c <stdio_exit_handler+0x14>)
 800fd6e:	f000 b869 	b.w	800fe44 <_fwalk_sglue>
 800fd72:	bf00      	nop
 800fd74:	20000110 	.word	0x20000110
 800fd78:	080127d5 	.word	0x080127d5
 800fd7c:	20000120 	.word	0x20000120

0800fd80 <cleanup_stdio>:
 800fd80:	6841      	ldr	r1, [r0, #4]
 800fd82:	4b0c      	ldr	r3, [pc, #48]	@ (800fdb4 <cleanup_stdio+0x34>)
 800fd84:	4299      	cmp	r1, r3
 800fd86:	b510      	push	{r4, lr}
 800fd88:	4604      	mov	r4, r0
 800fd8a:	d001      	beq.n	800fd90 <cleanup_stdio+0x10>
 800fd8c:	f002 fd22 	bl	80127d4 <_fflush_r>
 800fd90:	68a1      	ldr	r1, [r4, #8]
 800fd92:	4b09      	ldr	r3, [pc, #36]	@ (800fdb8 <cleanup_stdio+0x38>)
 800fd94:	4299      	cmp	r1, r3
 800fd96:	d002      	beq.n	800fd9e <cleanup_stdio+0x1e>
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f002 fd1b 	bl	80127d4 <_fflush_r>
 800fd9e:	68e1      	ldr	r1, [r4, #12]
 800fda0:	4b06      	ldr	r3, [pc, #24]	@ (800fdbc <cleanup_stdio+0x3c>)
 800fda2:	4299      	cmp	r1, r3
 800fda4:	d004      	beq.n	800fdb0 <cleanup_stdio+0x30>
 800fda6:	4620      	mov	r0, r4
 800fda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdac:	f002 bd12 	b.w	80127d4 <_fflush_r>
 800fdb0:	bd10      	pop	{r4, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20001ac4 	.word	0x20001ac4
 800fdb8:	20001b2c 	.word	0x20001b2c
 800fdbc:	20001b94 	.word	0x20001b94

0800fdc0 <global_stdio_init.part.0>:
 800fdc0:	b510      	push	{r4, lr}
 800fdc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf0 <global_stdio_init.part.0+0x30>)
 800fdc4:	4c0b      	ldr	r4, [pc, #44]	@ (800fdf4 <global_stdio_init.part.0+0x34>)
 800fdc6:	4a0c      	ldr	r2, [pc, #48]	@ (800fdf8 <global_stdio_init.part.0+0x38>)
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2104      	movs	r1, #4
 800fdd0:	f7ff ff94 	bl	800fcfc <std>
 800fdd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fdd8:	2201      	movs	r2, #1
 800fdda:	2109      	movs	r1, #9
 800fddc:	f7ff ff8e 	bl	800fcfc <std>
 800fde0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fde4:	2202      	movs	r2, #2
 800fde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdea:	2112      	movs	r1, #18
 800fdec:	f7ff bf86 	b.w	800fcfc <std>
 800fdf0:	20001bfc 	.word	0x20001bfc
 800fdf4:	20001ac4 	.word	0x20001ac4
 800fdf8:	0800fd69 	.word	0x0800fd69

0800fdfc <__sfp_lock_acquire>:
 800fdfc:	4801      	ldr	r0, [pc, #4]	@ (800fe04 <__sfp_lock_acquire+0x8>)
 800fdfe:	f000 b932 	b.w	8010066 <__retarget_lock_acquire_recursive>
 800fe02:	bf00      	nop
 800fe04:	20001c05 	.word	0x20001c05

0800fe08 <__sfp_lock_release>:
 800fe08:	4801      	ldr	r0, [pc, #4]	@ (800fe10 <__sfp_lock_release+0x8>)
 800fe0a:	f000 b92d 	b.w	8010068 <__retarget_lock_release_recursive>
 800fe0e:	bf00      	nop
 800fe10:	20001c05 	.word	0x20001c05

0800fe14 <__sinit>:
 800fe14:	b510      	push	{r4, lr}
 800fe16:	4604      	mov	r4, r0
 800fe18:	f7ff fff0 	bl	800fdfc <__sfp_lock_acquire>
 800fe1c:	6a23      	ldr	r3, [r4, #32]
 800fe1e:	b11b      	cbz	r3, 800fe28 <__sinit+0x14>
 800fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe24:	f7ff bff0 	b.w	800fe08 <__sfp_lock_release>
 800fe28:	4b04      	ldr	r3, [pc, #16]	@ (800fe3c <__sinit+0x28>)
 800fe2a:	6223      	str	r3, [r4, #32]
 800fe2c:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <__sinit+0x2c>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1f5      	bne.n	800fe20 <__sinit+0xc>
 800fe34:	f7ff ffc4 	bl	800fdc0 <global_stdio_init.part.0>
 800fe38:	e7f2      	b.n	800fe20 <__sinit+0xc>
 800fe3a:	bf00      	nop
 800fe3c:	0800fd81 	.word	0x0800fd81
 800fe40:	20001bfc 	.word	0x20001bfc

0800fe44 <_fwalk_sglue>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	4607      	mov	r7, r0
 800fe4a:	4688      	mov	r8, r1
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	2600      	movs	r6, #0
 800fe50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe54:	f1b9 0901 	subs.w	r9, r9, #1
 800fe58:	d505      	bpl.n	800fe66 <_fwalk_sglue+0x22>
 800fe5a:	6824      	ldr	r4, [r4, #0]
 800fe5c:	2c00      	cmp	r4, #0
 800fe5e:	d1f7      	bne.n	800fe50 <_fwalk_sglue+0xc>
 800fe60:	4630      	mov	r0, r6
 800fe62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d907      	bls.n	800fe7c <_fwalk_sglue+0x38>
 800fe6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe70:	3301      	adds	r3, #1
 800fe72:	d003      	beq.n	800fe7c <_fwalk_sglue+0x38>
 800fe74:	4629      	mov	r1, r5
 800fe76:	4638      	mov	r0, r7
 800fe78:	47c0      	blx	r8
 800fe7a:	4306      	orrs	r6, r0
 800fe7c:	3568      	adds	r5, #104	@ 0x68
 800fe7e:	e7e9      	b.n	800fe54 <_fwalk_sglue+0x10>

0800fe80 <siprintf>:
 800fe80:	b40e      	push	{r1, r2, r3}
 800fe82:	b510      	push	{r4, lr}
 800fe84:	b09d      	sub	sp, #116	@ 0x74
 800fe86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fe88:	9002      	str	r0, [sp, #8]
 800fe8a:	9006      	str	r0, [sp, #24]
 800fe8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe90:	480a      	ldr	r0, [pc, #40]	@ (800febc <siprintf+0x3c>)
 800fe92:	9107      	str	r1, [sp, #28]
 800fe94:	9104      	str	r1, [sp, #16]
 800fe96:	490a      	ldr	r1, [pc, #40]	@ (800fec0 <siprintf+0x40>)
 800fe98:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe9c:	9105      	str	r1, [sp, #20]
 800fe9e:	2400      	movs	r4, #0
 800fea0:	a902      	add	r1, sp, #8
 800fea2:	6800      	ldr	r0, [r0, #0]
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fea8:	f002 fb14 	bl	80124d4 <_svfiprintf_r>
 800feac:	9b02      	ldr	r3, [sp, #8]
 800feae:	701c      	strb	r4, [r3, #0]
 800feb0:	b01d      	add	sp, #116	@ 0x74
 800feb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb6:	b003      	add	sp, #12
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	2000011c 	.word	0x2000011c
 800fec0:	ffff0208 	.word	0xffff0208

0800fec4 <__sread>:
 800fec4:	b510      	push	{r4, lr}
 800fec6:	460c      	mov	r4, r1
 800fec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fecc:	f000 f86c 	bl	800ffa8 <_read_r>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	bfab      	itete	ge
 800fed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fed6:	89a3      	ldrhlt	r3, [r4, #12]
 800fed8:	181b      	addge	r3, r3, r0
 800feda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fede:	bfac      	ite	ge
 800fee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fee2:	81a3      	strhlt	r3, [r4, #12]
 800fee4:	bd10      	pop	{r4, pc}

0800fee6 <__swrite>:
 800fee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feea:	461f      	mov	r7, r3
 800feec:	898b      	ldrh	r3, [r1, #12]
 800feee:	05db      	lsls	r3, r3, #23
 800fef0:	4605      	mov	r5, r0
 800fef2:	460c      	mov	r4, r1
 800fef4:	4616      	mov	r6, r2
 800fef6:	d505      	bpl.n	800ff04 <__swrite+0x1e>
 800fef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefc:	2302      	movs	r3, #2
 800fefe:	2200      	movs	r2, #0
 800ff00:	f000 f840 	bl	800ff84 <_lseek_r>
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff0e:	81a3      	strh	r3, [r4, #12]
 800ff10:	4632      	mov	r2, r6
 800ff12:	463b      	mov	r3, r7
 800ff14:	4628      	mov	r0, r5
 800ff16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1a:	f000 b867 	b.w	800ffec <_write_r>

0800ff1e <__sseek>:
 800ff1e:	b510      	push	{r4, lr}
 800ff20:	460c      	mov	r4, r1
 800ff22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff26:	f000 f82d 	bl	800ff84 <_lseek_r>
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	89a3      	ldrh	r3, [r4, #12]
 800ff2e:	bf15      	itete	ne
 800ff30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff3a:	81a3      	strheq	r3, [r4, #12]
 800ff3c:	bf18      	it	ne
 800ff3e:	81a3      	strhne	r3, [r4, #12]
 800ff40:	bd10      	pop	{r4, pc}

0800ff42 <__sclose>:
 800ff42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff46:	f000 b80d 	b.w	800ff64 <_close_r>

0800ff4a <memset>:
 800ff4a:	4402      	add	r2, r0
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d100      	bne.n	800ff54 <memset+0xa>
 800ff52:	4770      	bx	lr
 800ff54:	f803 1b01 	strb.w	r1, [r3], #1
 800ff58:	e7f9      	b.n	800ff4e <memset+0x4>
	...

0800ff5c <_localeconv_r>:
 800ff5c:	4800      	ldr	r0, [pc, #0]	@ (800ff60 <_localeconv_r+0x4>)
 800ff5e:	4770      	bx	lr
 800ff60:	2000025c 	.word	0x2000025c

0800ff64 <_close_r>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4d06      	ldr	r5, [pc, #24]	@ (800ff80 <_close_r+0x1c>)
 800ff68:	2300      	movs	r3, #0
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	4608      	mov	r0, r1
 800ff6e:	602b      	str	r3, [r5, #0]
 800ff70:	f7f3 f92b 	bl	80031ca <_close>
 800ff74:	1c43      	adds	r3, r0, #1
 800ff76:	d102      	bne.n	800ff7e <_close_r+0x1a>
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	b103      	cbz	r3, 800ff7e <_close_r+0x1a>
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	bd38      	pop	{r3, r4, r5, pc}
 800ff80:	20001c00 	.word	0x20001c00

0800ff84 <_lseek_r>:
 800ff84:	b538      	push	{r3, r4, r5, lr}
 800ff86:	4d07      	ldr	r5, [pc, #28]	@ (800ffa4 <_lseek_r+0x20>)
 800ff88:	4604      	mov	r4, r0
 800ff8a:	4608      	mov	r0, r1
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	2200      	movs	r2, #0
 800ff90:	602a      	str	r2, [r5, #0]
 800ff92:	461a      	mov	r2, r3
 800ff94:	f7f3 f940 	bl	8003218 <_lseek>
 800ff98:	1c43      	adds	r3, r0, #1
 800ff9a:	d102      	bne.n	800ffa2 <_lseek_r+0x1e>
 800ff9c:	682b      	ldr	r3, [r5, #0]
 800ff9e:	b103      	cbz	r3, 800ffa2 <_lseek_r+0x1e>
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	20001c00 	.word	0x20001c00

0800ffa8 <_read_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4d07      	ldr	r5, [pc, #28]	@ (800ffc8 <_read_r+0x20>)
 800ffac:	4604      	mov	r4, r0
 800ffae:	4608      	mov	r0, r1
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	602a      	str	r2, [r5, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f7f3 f8ce 	bl	8003158 <_read>
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	d102      	bne.n	800ffc6 <_read_r+0x1e>
 800ffc0:	682b      	ldr	r3, [r5, #0]
 800ffc2:	b103      	cbz	r3, 800ffc6 <_read_r+0x1e>
 800ffc4:	6023      	str	r3, [r4, #0]
 800ffc6:	bd38      	pop	{r3, r4, r5, pc}
 800ffc8:	20001c00 	.word	0x20001c00

0800ffcc <_sbrk_r>:
 800ffcc:	b538      	push	{r3, r4, r5, lr}
 800ffce:	4d06      	ldr	r5, [pc, #24]	@ (800ffe8 <_sbrk_r+0x1c>)
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	602b      	str	r3, [r5, #0]
 800ffd8:	f7f3 f92c 	bl	8003234 <_sbrk>
 800ffdc:	1c43      	adds	r3, r0, #1
 800ffde:	d102      	bne.n	800ffe6 <_sbrk_r+0x1a>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	b103      	cbz	r3, 800ffe6 <_sbrk_r+0x1a>
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	bd38      	pop	{r3, r4, r5, pc}
 800ffe8:	20001c00 	.word	0x20001c00

0800ffec <_write_r>:
 800ffec:	b538      	push	{r3, r4, r5, lr}
 800ffee:	4d07      	ldr	r5, [pc, #28]	@ (801000c <_write_r+0x20>)
 800fff0:	4604      	mov	r4, r0
 800fff2:	4608      	mov	r0, r1
 800fff4:	4611      	mov	r1, r2
 800fff6:	2200      	movs	r2, #0
 800fff8:	602a      	str	r2, [r5, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	f7f3 f8c9 	bl	8003192 <_write>
 8010000:	1c43      	adds	r3, r0, #1
 8010002:	d102      	bne.n	801000a <_write_r+0x1e>
 8010004:	682b      	ldr	r3, [r5, #0]
 8010006:	b103      	cbz	r3, 801000a <_write_r+0x1e>
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	bd38      	pop	{r3, r4, r5, pc}
 801000c:	20001c00 	.word	0x20001c00

08010010 <__errno>:
 8010010:	4b01      	ldr	r3, [pc, #4]	@ (8010018 <__errno+0x8>)
 8010012:	6818      	ldr	r0, [r3, #0]
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	2000011c 	.word	0x2000011c

0801001c <__libc_init_array>:
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	4d0d      	ldr	r5, [pc, #52]	@ (8010054 <__libc_init_array+0x38>)
 8010020:	4c0d      	ldr	r4, [pc, #52]	@ (8010058 <__libc_init_array+0x3c>)
 8010022:	1b64      	subs	r4, r4, r5
 8010024:	10a4      	asrs	r4, r4, #2
 8010026:	2600      	movs	r6, #0
 8010028:	42a6      	cmp	r6, r4
 801002a:	d109      	bne.n	8010040 <__libc_init_array+0x24>
 801002c:	4d0b      	ldr	r5, [pc, #44]	@ (801005c <__libc_init_array+0x40>)
 801002e:	4c0c      	ldr	r4, [pc, #48]	@ (8010060 <__libc_init_array+0x44>)
 8010030:	f003 fab0 	bl	8013594 <_init>
 8010034:	1b64      	subs	r4, r4, r5
 8010036:	10a4      	asrs	r4, r4, #2
 8010038:	2600      	movs	r6, #0
 801003a:	42a6      	cmp	r6, r4
 801003c:	d105      	bne.n	801004a <__libc_init_array+0x2e>
 801003e:	bd70      	pop	{r4, r5, r6, pc}
 8010040:	f855 3b04 	ldr.w	r3, [r5], #4
 8010044:	4798      	blx	r3
 8010046:	3601      	adds	r6, #1
 8010048:	e7ee      	b.n	8010028 <__libc_init_array+0xc>
 801004a:	f855 3b04 	ldr.w	r3, [r5], #4
 801004e:	4798      	blx	r3
 8010050:	3601      	adds	r6, #1
 8010052:	e7f2      	b.n	801003a <__libc_init_array+0x1e>
 8010054:	080149dc 	.word	0x080149dc
 8010058:	080149dc 	.word	0x080149dc
 801005c:	080149dc 	.word	0x080149dc
 8010060:	080149e0 	.word	0x080149e0

08010064 <__retarget_lock_init_recursive>:
 8010064:	4770      	bx	lr

08010066 <__retarget_lock_acquire_recursive>:
 8010066:	4770      	bx	lr

08010068 <__retarget_lock_release_recursive>:
 8010068:	4770      	bx	lr
	...

0801006c <nanf>:
 801006c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010074 <nanf+0x8>
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	7fc00000 	.word	0x7fc00000

08010078 <quorem>:
 8010078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801007c:	6903      	ldr	r3, [r0, #16]
 801007e:	690c      	ldr	r4, [r1, #16]
 8010080:	42a3      	cmp	r3, r4
 8010082:	4607      	mov	r7, r0
 8010084:	db7e      	blt.n	8010184 <quorem+0x10c>
 8010086:	3c01      	subs	r4, #1
 8010088:	f101 0814 	add.w	r8, r1, #20
 801008c:	00a3      	lsls	r3, r4, #2
 801008e:	f100 0514 	add.w	r5, r0, #20
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010098:	9301      	str	r3, [sp, #4]
 801009a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801009e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100a2:	3301      	adds	r3, #1
 80100a4:	429a      	cmp	r2, r3
 80100a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80100ae:	d32e      	bcc.n	801010e <quorem+0x96>
 80100b0:	f04f 0a00 	mov.w	sl, #0
 80100b4:	46c4      	mov	ip, r8
 80100b6:	46ae      	mov	lr, r5
 80100b8:	46d3      	mov	fp, sl
 80100ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100be:	b298      	uxth	r0, r3
 80100c0:	fb06 a000 	mla	r0, r6, r0, sl
 80100c4:	0c02      	lsrs	r2, r0, #16
 80100c6:	0c1b      	lsrs	r3, r3, #16
 80100c8:	fb06 2303 	mla	r3, r6, r3, r2
 80100cc:	f8de 2000 	ldr.w	r2, [lr]
 80100d0:	b280      	uxth	r0, r0
 80100d2:	b292      	uxth	r2, r2
 80100d4:	1a12      	subs	r2, r2, r0
 80100d6:	445a      	add	r2, fp
 80100d8:	f8de 0000 	ldr.w	r0, [lr]
 80100dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80100e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80100ea:	b292      	uxth	r2, r2
 80100ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80100f0:	45e1      	cmp	r9, ip
 80100f2:	f84e 2b04 	str.w	r2, [lr], #4
 80100f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80100fa:	d2de      	bcs.n	80100ba <quorem+0x42>
 80100fc:	9b00      	ldr	r3, [sp, #0]
 80100fe:	58eb      	ldr	r3, [r5, r3]
 8010100:	b92b      	cbnz	r3, 801010e <quorem+0x96>
 8010102:	9b01      	ldr	r3, [sp, #4]
 8010104:	3b04      	subs	r3, #4
 8010106:	429d      	cmp	r5, r3
 8010108:	461a      	mov	r2, r3
 801010a:	d32f      	bcc.n	801016c <quorem+0xf4>
 801010c:	613c      	str	r4, [r7, #16]
 801010e:	4638      	mov	r0, r7
 8010110:	f001 f910 	bl	8011334 <__mcmp>
 8010114:	2800      	cmp	r0, #0
 8010116:	db25      	blt.n	8010164 <quorem+0xec>
 8010118:	4629      	mov	r1, r5
 801011a:	2000      	movs	r0, #0
 801011c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010120:	f8d1 c000 	ldr.w	ip, [r1]
 8010124:	fa1f fe82 	uxth.w	lr, r2
 8010128:	fa1f f38c 	uxth.w	r3, ip
 801012c:	eba3 030e 	sub.w	r3, r3, lr
 8010130:	4403      	add	r3, r0
 8010132:	0c12      	lsrs	r2, r2, #16
 8010134:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010138:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801013c:	b29b      	uxth	r3, r3
 801013e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010142:	45c1      	cmp	r9, r8
 8010144:	f841 3b04 	str.w	r3, [r1], #4
 8010148:	ea4f 4022 	mov.w	r0, r2, asr #16
 801014c:	d2e6      	bcs.n	801011c <quorem+0xa4>
 801014e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010156:	b922      	cbnz	r2, 8010162 <quorem+0xea>
 8010158:	3b04      	subs	r3, #4
 801015a:	429d      	cmp	r5, r3
 801015c:	461a      	mov	r2, r3
 801015e:	d30b      	bcc.n	8010178 <quorem+0x100>
 8010160:	613c      	str	r4, [r7, #16]
 8010162:	3601      	adds	r6, #1
 8010164:	4630      	mov	r0, r6
 8010166:	b003      	add	sp, #12
 8010168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016c:	6812      	ldr	r2, [r2, #0]
 801016e:	3b04      	subs	r3, #4
 8010170:	2a00      	cmp	r2, #0
 8010172:	d1cb      	bne.n	801010c <quorem+0x94>
 8010174:	3c01      	subs	r4, #1
 8010176:	e7c6      	b.n	8010106 <quorem+0x8e>
 8010178:	6812      	ldr	r2, [r2, #0]
 801017a:	3b04      	subs	r3, #4
 801017c:	2a00      	cmp	r2, #0
 801017e:	d1ef      	bne.n	8010160 <quorem+0xe8>
 8010180:	3c01      	subs	r4, #1
 8010182:	e7ea      	b.n	801015a <quorem+0xe2>
 8010184:	2000      	movs	r0, #0
 8010186:	e7ee      	b.n	8010166 <quorem+0xee>

08010188 <_dtoa_r>:
 8010188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018c:	69c7      	ldr	r7, [r0, #28]
 801018e:	b097      	sub	sp, #92	@ 0x5c
 8010190:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010194:	ec55 4b10 	vmov	r4, r5, d0
 8010198:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801019a:	9107      	str	r1, [sp, #28]
 801019c:	4681      	mov	r9, r0
 801019e:	920c      	str	r2, [sp, #48]	@ 0x30
 80101a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80101a2:	b97f      	cbnz	r7, 80101c4 <_dtoa_r+0x3c>
 80101a4:	2010      	movs	r0, #16
 80101a6:	f7fe fe8f 	bl	800eec8 <malloc>
 80101aa:	4602      	mov	r2, r0
 80101ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80101b0:	b920      	cbnz	r0, 80101bc <_dtoa_r+0x34>
 80101b2:	4ba9      	ldr	r3, [pc, #676]	@ (8010458 <_dtoa_r+0x2d0>)
 80101b4:	21ef      	movs	r1, #239	@ 0xef
 80101b6:	48a9      	ldr	r0, [pc, #676]	@ (801045c <_dtoa_r+0x2d4>)
 80101b8:	f002 fb76 	bl	80128a8 <__assert_func>
 80101bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80101c0:	6007      	str	r7, [r0, #0]
 80101c2:	60c7      	str	r7, [r0, #12]
 80101c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101c8:	6819      	ldr	r1, [r3, #0]
 80101ca:	b159      	cbz	r1, 80101e4 <_dtoa_r+0x5c>
 80101cc:	685a      	ldr	r2, [r3, #4]
 80101ce:	604a      	str	r2, [r1, #4]
 80101d0:	2301      	movs	r3, #1
 80101d2:	4093      	lsls	r3, r2
 80101d4:	608b      	str	r3, [r1, #8]
 80101d6:	4648      	mov	r0, r9
 80101d8:	f000 fe30 	bl	8010e3c <_Bfree>
 80101dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101e0:	2200      	movs	r2, #0
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	1e2b      	subs	r3, r5, #0
 80101e6:	bfb9      	ittee	lt
 80101e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80101ec:	9305      	strlt	r3, [sp, #20]
 80101ee:	2300      	movge	r3, #0
 80101f0:	6033      	strge	r3, [r6, #0]
 80101f2:	9f05      	ldr	r7, [sp, #20]
 80101f4:	4b9a      	ldr	r3, [pc, #616]	@ (8010460 <_dtoa_r+0x2d8>)
 80101f6:	bfbc      	itt	lt
 80101f8:	2201      	movlt	r2, #1
 80101fa:	6032      	strlt	r2, [r6, #0]
 80101fc:	43bb      	bics	r3, r7
 80101fe:	d112      	bne.n	8010226 <_dtoa_r+0x9e>
 8010200:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010202:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010206:	6013      	str	r3, [r2, #0]
 8010208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801020c:	4323      	orrs	r3, r4
 801020e:	f000 855a 	beq.w	8010cc6 <_dtoa_r+0xb3e>
 8010212:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010214:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010474 <_dtoa_r+0x2ec>
 8010218:	2b00      	cmp	r3, #0
 801021a:	f000 855c 	beq.w	8010cd6 <_dtoa_r+0xb4e>
 801021e:	f10a 0303 	add.w	r3, sl, #3
 8010222:	f000 bd56 	b.w	8010cd2 <_dtoa_r+0xb4a>
 8010226:	ed9d 7b04 	vldr	d7, [sp, #16]
 801022a:	2200      	movs	r2, #0
 801022c:	ec51 0b17 	vmov	r0, r1, d7
 8010230:	2300      	movs	r3, #0
 8010232:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010236:	f7f0 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 801023a:	4680      	mov	r8, r0
 801023c:	b158      	cbz	r0, 8010256 <_dtoa_r+0xce>
 801023e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010240:	2301      	movs	r3, #1
 8010242:	6013      	str	r3, [r2, #0]
 8010244:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010246:	b113      	cbz	r3, 801024e <_dtoa_r+0xc6>
 8010248:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801024a:	4b86      	ldr	r3, [pc, #536]	@ (8010464 <_dtoa_r+0x2dc>)
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010478 <_dtoa_r+0x2f0>
 8010252:	f000 bd40 	b.w	8010cd6 <_dtoa_r+0xb4e>
 8010256:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801025a:	aa14      	add	r2, sp, #80	@ 0x50
 801025c:	a915      	add	r1, sp, #84	@ 0x54
 801025e:	4648      	mov	r0, r9
 8010260:	f001 f988 	bl	8011574 <__d2b>
 8010264:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010268:	9002      	str	r0, [sp, #8]
 801026a:	2e00      	cmp	r6, #0
 801026c:	d078      	beq.n	8010360 <_dtoa_r+0x1d8>
 801026e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010270:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801027c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010280:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010284:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010288:	4619      	mov	r1, r3
 801028a:	2200      	movs	r2, #0
 801028c:	4b76      	ldr	r3, [pc, #472]	@ (8010468 <_dtoa_r+0x2e0>)
 801028e:	f7f0 f803 	bl	8000298 <__aeabi_dsub>
 8010292:	a36b      	add	r3, pc, #428	@ (adr r3, 8010440 <_dtoa_r+0x2b8>)
 8010294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010298:	f7f0 f9b6 	bl	8000608 <__aeabi_dmul>
 801029c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010448 <_dtoa_r+0x2c0>)
 801029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a2:	f7ef fffb 	bl	800029c <__adddf3>
 80102a6:	4604      	mov	r4, r0
 80102a8:	4630      	mov	r0, r6
 80102aa:	460d      	mov	r5, r1
 80102ac:	f7f0 f942 	bl	8000534 <__aeabi_i2d>
 80102b0:	a367      	add	r3, pc, #412	@ (adr r3, 8010450 <_dtoa_r+0x2c8>)
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	f7f0 f9a7 	bl	8000608 <__aeabi_dmul>
 80102ba:	4602      	mov	r2, r0
 80102bc:	460b      	mov	r3, r1
 80102be:	4620      	mov	r0, r4
 80102c0:	4629      	mov	r1, r5
 80102c2:	f7ef ffeb 	bl	800029c <__adddf3>
 80102c6:	4604      	mov	r4, r0
 80102c8:	460d      	mov	r5, r1
 80102ca:	f7f0 fc4d 	bl	8000b68 <__aeabi_d2iz>
 80102ce:	2200      	movs	r2, #0
 80102d0:	4607      	mov	r7, r0
 80102d2:	2300      	movs	r3, #0
 80102d4:	4620      	mov	r0, r4
 80102d6:	4629      	mov	r1, r5
 80102d8:	f7f0 fc08 	bl	8000aec <__aeabi_dcmplt>
 80102dc:	b140      	cbz	r0, 80102f0 <_dtoa_r+0x168>
 80102de:	4638      	mov	r0, r7
 80102e0:	f7f0 f928 	bl	8000534 <__aeabi_i2d>
 80102e4:	4622      	mov	r2, r4
 80102e6:	462b      	mov	r3, r5
 80102e8:	f7f0 fbf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80102ec:	b900      	cbnz	r0, 80102f0 <_dtoa_r+0x168>
 80102ee:	3f01      	subs	r7, #1
 80102f0:	2f16      	cmp	r7, #22
 80102f2:	d852      	bhi.n	801039a <_dtoa_r+0x212>
 80102f4:	4b5d      	ldr	r3, [pc, #372]	@ (801046c <_dtoa_r+0x2e4>)
 80102f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010302:	f7f0 fbf3 	bl	8000aec <__aeabi_dcmplt>
 8010306:	2800      	cmp	r0, #0
 8010308:	d049      	beq.n	801039e <_dtoa_r+0x216>
 801030a:	3f01      	subs	r7, #1
 801030c:	2300      	movs	r3, #0
 801030e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010310:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010312:	1b9b      	subs	r3, r3, r6
 8010314:	1e5a      	subs	r2, r3, #1
 8010316:	bf45      	ittet	mi
 8010318:	f1c3 0301 	rsbmi	r3, r3, #1
 801031c:	9300      	strmi	r3, [sp, #0]
 801031e:	2300      	movpl	r3, #0
 8010320:	2300      	movmi	r3, #0
 8010322:	9206      	str	r2, [sp, #24]
 8010324:	bf54      	ite	pl
 8010326:	9300      	strpl	r3, [sp, #0]
 8010328:	9306      	strmi	r3, [sp, #24]
 801032a:	2f00      	cmp	r7, #0
 801032c:	db39      	blt.n	80103a2 <_dtoa_r+0x21a>
 801032e:	9b06      	ldr	r3, [sp, #24]
 8010330:	970d      	str	r7, [sp, #52]	@ 0x34
 8010332:	443b      	add	r3, r7
 8010334:	9306      	str	r3, [sp, #24]
 8010336:	2300      	movs	r3, #0
 8010338:	9308      	str	r3, [sp, #32]
 801033a:	9b07      	ldr	r3, [sp, #28]
 801033c:	2b09      	cmp	r3, #9
 801033e:	d863      	bhi.n	8010408 <_dtoa_r+0x280>
 8010340:	2b05      	cmp	r3, #5
 8010342:	bfc4      	itt	gt
 8010344:	3b04      	subgt	r3, #4
 8010346:	9307      	strgt	r3, [sp, #28]
 8010348:	9b07      	ldr	r3, [sp, #28]
 801034a:	f1a3 0302 	sub.w	r3, r3, #2
 801034e:	bfcc      	ite	gt
 8010350:	2400      	movgt	r4, #0
 8010352:	2401      	movle	r4, #1
 8010354:	2b03      	cmp	r3, #3
 8010356:	d863      	bhi.n	8010420 <_dtoa_r+0x298>
 8010358:	e8df f003 	tbb	[pc, r3]
 801035c:	2b375452 	.word	0x2b375452
 8010360:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010364:	441e      	add	r6, r3
 8010366:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801036a:	2b20      	cmp	r3, #32
 801036c:	bfc1      	itttt	gt
 801036e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010372:	409f      	lslgt	r7, r3
 8010374:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010378:	fa24 f303 	lsrgt.w	r3, r4, r3
 801037c:	bfd6      	itet	le
 801037e:	f1c3 0320 	rsble	r3, r3, #32
 8010382:	ea47 0003 	orrgt.w	r0, r7, r3
 8010386:	fa04 f003 	lslle.w	r0, r4, r3
 801038a:	f7f0 f8c3 	bl	8000514 <__aeabi_ui2d>
 801038e:	2201      	movs	r2, #1
 8010390:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010394:	3e01      	subs	r6, #1
 8010396:	9212      	str	r2, [sp, #72]	@ 0x48
 8010398:	e776      	b.n	8010288 <_dtoa_r+0x100>
 801039a:	2301      	movs	r3, #1
 801039c:	e7b7      	b.n	801030e <_dtoa_r+0x186>
 801039e:	9010      	str	r0, [sp, #64]	@ 0x40
 80103a0:	e7b6      	b.n	8010310 <_dtoa_r+0x188>
 80103a2:	9b00      	ldr	r3, [sp, #0]
 80103a4:	1bdb      	subs	r3, r3, r7
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	427b      	negs	r3, r7
 80103aa:	9308      	str	r3, [sp, #32]
 80103ac:	2300      	movs	r3, #0
 80103ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80103b0:	e7c3      	b.n	801033a <_dtoa_r+0x1b2>
 80103b2:	2301      	movs	r3, #1
 80103b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103b8:	eb07 0b03 	add.w	fp, r7, r3
 80103bc:	f10b 0301 	add.w	r3, fp, #1
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	9303      	str	r3, [sp, #12]
 80103c4:	bfb8      	it	lt
 80103c6:	2301      	movlt	r3, #1
 80103c8:	e006      	b.n	80103d8 <_dtoa_r+0x250>
 80103ca:	2301      	movs	r3, #1
 80103cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80103ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	dd28      	ble.n	8010426 <_dtoa_r+0x29e>
 80103d4:	469b      	mov	fp, r3
 80103d6:	9303      	str	r3, [sp, #12]
 80103d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80103dc:	2100      	movs	r1, #0
 80103de:	2204      	movs	r2, #4
 80103e0:	f102 0514 	add.w	r5, r2, #20
 80103e4:	429d      	cmp	r5, r3
 80103e6:	d926      	bls.n	8010436 <_dtoa_r+0x2ae>
 80103e8:	6041      	str	r1, [r0, #4]
 80103ea:	4648      	mov	r0, r9
 80103ec:	f000 fce6 	bl	8010dbc <_Balloc>
 80103f0:	4682      	mov	sl, r0
 80103f2:	2800      	cmp	r0, #0
 80103f4:	d142      	bne.n	801047c <_dtoa_r+0x2f4>
 80103f6:	4b1e      	ldr	r3, [pc, #120]	@ (8010470 <_dtoa_r+0x2e8>)
 80103f8:	4602      	mov	r2, r0
 80103fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80103fe:	e6da      	b.n	80101b6 <_dtoa_r+0x2e>
 8010400:	2300      	movs	r3, #0
 8010402:	e7e3      	b.n	80103cc <_dtoa_r+0x244>
 8010404:	2300      	movs	r3, #0
 8010406:	e7d5      	b.n	80103b4 <_dtoa_r+0x22c>
 8010408:	2401      	movs	r4, #1
 801040a:	2300      	movs	r3, #0
 801040c:	9307      	str	r3, [sp, #28]
 801040e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010410:	f04f 3bff 	mov.w	fp, #4294967295
 8010414:	2200      	movs	r2, #0
 8010416:	f8cd b00c 	str.w	fp, [sp, #12]
 801041a:	2312      	movs	r3, #18
 801041c:	920c      	str	r2, [sp, #48]	@ 0x30
 801041e:	e7db      	b.n	80103d8 <_dtoa_r+0x250>
 8010420:	2301      	movs	r3, #1
 8010422:	9309      	str	r3, [sp, #36]	@ 0x24
 8010424:	e7f4      	b.n	8010410 <_dtoa_r+0x288>
 8010426:	f04f 0b01 	mov.w	fp, #1
 801042a:	f8cd b00c 	str.w	fp, [sp, #12]
 801042e:	465b      	mov	r3, fp
 8010430:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010434:	e7d0      	b.n	80103d8 <_dtoa_r+0x250>
 8010436:	3101      	adds	r1, #1
 8010438:	0052      	lsls	r2, r2, #1
 801043a:	e7d1      	b.n	80103e0 <_dtoa_r+0x258>
 801043c:	f3af 8000 	nop.w
 8010440:	636f4361 	.word	0x636f4361
 8010444:	3fd287a7 	.word	0x3fd287a7
 8010448:	8b60c8b3 	.word	0x8b60c8b3
 801044c:	3fc68a28 	.word	0x3fc68a28
 8010450:	509f79fb 	.word	0x509f79fb
 8010454:	3fd34413 	.word	0x3fd34413
 8010458:	080145f2 	.word	0x080145f2
 801045c:	08014609 	.word	0x08014609
 8010460:	7ff00000 	.word	0x7ff00000
 8010464:	080145bd 	.word	0x080145bd
 8010468:	3ff80000 	.word	0x3ff80000
 801046c:	080147b8 	.word	0x080147b8
 8010470:	08014661 	.word	0x08014661
 8010474:	080145ee 	.word	0x080145ee
 8010478:	080145bc 	.word	0x080145bc
 801047c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010480:	6018      	str	r0, [r3, #0]
 8010482:	9b03      	ldr	r3, [sp, #12]
 8010484:	2b0e      	cmp	r3, #14
 8010486:	f200 80a1 	bhi.w	80105cc <_dtoa_r+0x444>
 801048a:	2c00      	cmp	r4, #0
 801048c:	f000 809e 	beq.w	80105cc <_dtoa_r+0x444>
 8010490:	2f00      	cmp	r7, #0
 8010492:	dd33      	ble.n	80104fc <_dtoa_r+0x374>
 8010494:	4b9c      	ldr	r3, [pc, #624]	@ (8010708 <_dtoa_r+0x580>)
 8010496:	f007 020f 	and.w	r2, r7, #15
 801049a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801049e:	ed93 7b00 	vldr	d7, [r3]
 80104a2:	05f8      	lsls	r0, r7, #23
 80104a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80104a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80104ac:	d516      	bpl.n	80104dc <_dtoa_r+0x354>
 80104ae:	4b97      	ldr	r3, [pc, #604]	@ (801070c <_dtoa_r+0x584>)
 80104b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80104b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104b8:	f7f0 f9d0 	bl	800085c <__aeabi_ddiv>
 80104bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104c0:	f004 040f 	and.w	r4, r4, #15
 80104c4:	2603      	movs	r6, #3
 80104c6:	4d91      	ldr	r5, [pc, #580]	@ (801070c <_dtoa_r+0x584>)
 80104c8:	b954      	cbnz	r4, 80104e0 <_dtoa_r+0x358>
 80104ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104d2:	f7f0 f9c3 	bl	800085c <__aeabi_ddiv>
 80104d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104da:	e028      	b.n	801052e <_dtoa_r+0x3a6>
 80104dc:	2602      	movs	r6, #2
 80104de:	e7f2      	b.n	80104c6 <_dtoa_r+0x33e>
 80104e0:	07e1      	lsls	r1, r4, #31
 80104e2:	d508      	bpl.n	80104f6 <_dtoa_r+0x36e>
 80104e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80104e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80104ec:	f7f0 f88c 	bl	8000608 <__aeabi_dmul>
 80104f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80104f4:	3601      	adds	r6, #1
 80104f6:	1064      	asrs	r4, r4, #1
 80104f8:	3508      	adds	r5, #8
 80104fa:	e7e5      	b.n	80104c8 <_dtoa_r+0x340>
 80104fc:	f000 80af 	beq.w	801065e <_dtoa_r+0x4d6>
 8010500:	427c      	negs	r4, r7
 8010502:	4b81      	ldr	r3, [pc, #516]	@ (8010708 <_dtoa_r+0x580>)
 8010504:	4d81      	ldr	r5, [pc, #516]	@ (801070c <_dtoa_r+0x584>)
 8010506:	f004 020f 	and.w	r2, r4, #15
 801050a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010516:	f7f0 f877 	bl	8000608 <__aeabi_dmul>
 801051a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801051e:	1124      	asrs	r4, r4, #4
 8010520:	2300      	movs	r3, #0
 8010522:	2602      	movs	r6, #2
 8010524:	2c00      	cmp	r4, #0
 8010526:	f040 808f 	bne.w	8010648 <_dtoa_r+0x4c0>
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1d3      	bne.n	80104d6 <_dtoa_r+0x34e>
 801052e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010530:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010534:	2b00      	cmp	r3, #0
 8010536:	f000 8094 	beq.w	8010662 <_dtoa_r+0x4da>
 801053a:	4b75      	ldr	r3, [pc, #468]	@ (8010710 <_dtoa_r+0x588>)
 801053c:	2200      	movs	r2, #0
 801053e:	4620      	mov	r0, r4
 8010540:	4629      	mov	r1, r5
 8010542:	f7f0 fad3 	bl	8000aec <__aeabi_dcmplt>
 8010546:	2800      	cmp	r0, #0
 8010548:	f000 808b 	beq.w	8010662 <_dtoa_r+0x4da>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	2b00      	cmp	r3, #0
 8010550:	f000 8087 	beq.w	8010662 <_dtoa_r+0x4da>
 8010554:	f1bb 0f00 	cmp.w	fp, #0
 8010558:	dd34      	ble.n	80105c4 <_dtoa_r+0x43c>
 801055a:	4620      	mov	r0, r4
 801055c:	4b6d      	ldr	r3, [pc, #436]	@ (8010714 <_dtoa_r+0x58c>)
 801055e:	2200      	movs	r2, #0
 8010560:	4629      	mov	r1, r5
 8010562:	f7f0 f851 	bl	8000608 <__aeabi_dmul>
 8010566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801056a:	f107 38ff 	add.w	r8, r7, #4294967295
 801056e:	3601      	adds	r6, #1
 8010570:	465c      	mov	r4, fp
 8010572:	4630      	mov	r0, r6
 8010574:	f7ef ffde 	bl	8000534 <__aeabi_i2d>
 8010578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801057c:	f7f0 f844 	bl	8000608 <__aeabi_dmul>
 8010580:	4b65      	ldr	r3, [pc, #404]	@ (8010718 <_dtoa_r+0x590>)
 8010582:	2200      	movs	r2, #0
 8010584:	f7ef fe8a 	bl	800029c <__adddf3>
 8010588:	4605      	mov	r5, r0
 801058a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801058e:	2c00      	cmp	r4, #0
 8010590:	d16a      	bne.n	8010668 <_dtoa_r+0x4e0>
 8010592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010596:	4b61      	ldr	r3, [pc, #388]	@ (801071c <_dtoa_r+0x594>)
 8010598:	2200      	movs	r2, #0
 801059a:	f7ef fe7d 	bl	8000298 <__aeabi_dsub>
 801059e:	4602      	mov	r2, r0
 80105a0:	460b      	mov	r3, r1
 80105a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80105a6:	462a      	mov	r2, r5
 80105a8:	4633      	mov	r3, r6
 80105aa:	f7f0 fabd 	bl	8000b28 <__aeabi_dcmpgt>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	f040 8298 	bne.w	8010ae4 <_dtoa_r+0x95c>
 80105b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105b8:	462a      	mov	r2, r5
 80105ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80105be:	f7f0 fa95 	bl	8000aec <__aeabi_dcmplt>
 80105c2:	bb38      	cbnz	r0, 8010614 <_dtoa_r+0x48c>
 80105c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80105c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80105cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f2c0 8157 	blt.w	8010882 <_dtoa_r+0x6fa>
 80105d4:	2f0e      	cmp	r7, #14
 80105d6:	f300 8154 	bgt.w	8010882 <_dtoa_r+0x6fa>
 80105da:	4b4b      	ldr	r3, [pc, #300]	@ (8010708 <_dtoa_r+0x580>)
 80105dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80105e0:	ed93 7b00 	vldr	d7, [r3]
 80105e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	ed8d 7b00 	vstr	d7, [sp]
 80105ec:	f280 80e5 	bge.w	80107ba <_dtoa_r+0x632>
 80105f0:	9b03      	ldr	r3, [sp, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f300 80e1 	bgt.w	80107ba <_dtoa_r+0x632>
 80105f8:	d10c      	bne.n	8010614 <_dtoa_r+0x48c>
 80105fa:	4b48      	ldr	r3, [pc, #288]	@ (801071c <_dtoa_r+0x594>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	ec51 0b17 	vmov	r0, r1, d7
 8010602:	f7f0 f801 	bl	8000608 <__aeabi_dmul>
 8010606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801060a:	f7f0 fa83 	bl	8000b14 <__aeabi_dcmpge>
 801060e:	2800      	cmp	r0, #0
 8010610:	f000 8266 	beq.w	8010ae0 <_dtoa_r+0x958>
 8010614:	2400      	movs	r4, #0
 8010616:	4625      	mov	r5, r4
 8010618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801061a:	4656      	mov	r6, sl
 801061c:	ea6f 0803 	mvn.w	r8, r3
 8010620:	2700      	movs	r7, #0
 8010622:	4621      	mov	r1, r4
 8010624:	4648      	mov	r0, r9
 8010626:	f000 fc09 	bl	8010e3c <_Bfree>
 801062a:	2d00      	cmp	r5, #0
 801062c:	f000 80bd 	beq.w	80107aa <_dtoa_r+0x622>
 8010630:	b12f      	cbz	r7, 801063e <_dtoa_r+0x4b6>
 8010632:	42af      	cmp	r7, r5
 8010634:	d003      	beq.n	801063e <_dtoa_r+0x4b6>
 8010636:	4639      	mov	r1, r7
 8010638:	4648      	mov	r0, r9
 801063a:	f000 fbff 	bl	8010e3c <_Bfree>
 801063e:	4629      	mov	r1, r5
 8010640:	4648      	mov	r0, r9
 8010642:	f000 fbfb 	bl	8010e3c <_Bfree>
 8010646:	e0b0      	b.n	80107aa <_dtoa_r+0x622>
 8010648:	07e2      	lsls	r2, r4, #31
 801064a:	d505      	bpl.n	8010658 <_dtoa_r+0x4d0>
 801064c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010650:	f7ef ffda 	bl	8000608 <__aeabi_dmul>
 8010654:	3601      	adds	r6, #1
 8010656:	2301      	movs	r3, #1
 8010658:	1064      	asrs	r4, r4, #1
 801065a:	3508      	adds	r5, #8
 801065c:	e762      	b.n	8010524 <_dtoa_r+0x39c>
 801065e:	2602      	movs	r6, #2
 8010660:	e765      	b.n	801052e <_dtoa_r+0x3a6>
 8010662:	9c03      	ldr	r4, [sp, #12]
 8010664:	46b8      	mov	r8, r7
 8010666:	e784      	b.n	8010572 <_dtoa_r+0x3ea>
 8010668:	4b27      	ldr	r3, [pc, #156]	@ (8010708 <_dtoa_r+0x580>)
 801066a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801066c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010670:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010674:	4454      	add	r4, sl
 8010676:	2900      	cmp	r1, #0
 8010678:	d054      	beq.n	8010724 <_dtoa_r+0x59c>
 801067a:	4929      	ldr	r1, [pc, #164]	@ (8010720 <_dtoa_r+0x598>)
 801067c:	2000      	movs	r0, #0
 801067e:	f7f0 f8ed 	bl	800085c <__aeabi_ddiv>
 8010682:	4633      	mov	r3, r6
 8010684:	462a      	mov	r2, r5
 8010686:	f7ef fe07 	bl	8000298 <__aeabi_dsub>
 801068a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801068e:	4656      	mov	r6, sl
 8010690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010694:	f7f0 fa68 	bl	8000b68 <__aeabi_d2iz>
 8010698:	4605      	mov	r5, r0
 801069a:	f7ef ff4b 	bl	8000534 <__aeabi_i2d>
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106a6:	f7ef fdf7 	bl	8000298 <__aeabi_dsub>
 80106aa:	3530      	adds	r5, #48	@ 0x30
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80106b4:	f806 5b01 	strb.w	r5, [r6], #1
 80106b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80106bc:	f7f0 fa16 	bl	8000aec <__aeabi_dcmplt>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d172      	bne.n	80107aa <_dtoa_r+0x622>
 80106c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106c8:	4911      	ldr	r1, [pc, #68]	@ (8010710 <_dtoa_r+0x588>)
 80106ca:	2000      	movs	r0, #0
 80106cc:	f7ef fde4 	bl	8000298 <__aeabi_dsub>
 80106d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80106d4:	f7f0 fa0a 	bl	8000aec <__aeabi_dcmplt>
 80106d8:	2800      	cmp	r0, #0
 80106da:	f040 80b4 	bne.w	8010846 <_dtoa_r+0x6be>
 80106de:	42a6      	cmp	r6, r4
 80106e0:	f43f af70 	beq.w	80105c4 <_dtoa_r+0x43c>
 80106e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80106e8:	4b0a      	ldr	r3, [pc, #40]	@ (8010714 <_dtoa_r+0x58c>)
 80106ea:	2200      	movs	r2, #0
 80106ec:	f7ef ff8c 	bl	8000608 <__aeabi_dmul>
 80106f0:	4b08      	ldr	r3, [pc, #32]	@ (8010714 <_dtoa_r+0x58c>)
 80106f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80106f6:	2200      	movs	r2, #0
 80106f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106fc:	f7ef ff84 	bl	8000608 <__aeabi_dmul>
 8010700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010704:	e7c4      	b.n	8010690 <_dtoa_r+0x508>
 8010706:	bf00      	nop
 8010708:	080147b8 	.word	0x080147b8
 801070c:	08014790 	.word	0x08014790
 8010710:	3ff00000 	.word	0x3ff00000
 8010714:	40240000 	.word	0x40240000
 8010718:	401c0000 	.word	0x401c0000
 801071c:	40140000 	.word	0x40140000
 8010720:	3fe00000 	.word	0x3fe00000
 8010724:	4631      	mov	r1, r6
 8010726:	4628      	mov	r0, r5
 8010728:	f7ef ff6e 	bl	8000608 <__aeabi_dmul>
 801072c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010730:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010732:	4656      	mov	r6, sl
 8010734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010738:	f7f0 fa16 	bl	8000b68 <__aeabi_d2iz>
 801073c:	4605      	mov	r5, r0
 801073e:	f7ef fef9 	bl	8000534 <__aeabi_i2d>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801074a:	f7ef fda5 	bl	8000298 <__aeabi_dsub>
 801074e:	3530      	adds	r5, #48	@ 0x30
 8010750:	f806 5b01 	strb.w	r5, [r6], #1
 8010754:	4602      	mov	r2, r0
 8010756:	460b      	mov	r3, r1
 8010758:	42a6      	cmp	r6, r4
 801075a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801075e:	f04f 0200 	mov.w	r2, #0
 8010762:	d124      	bne.n	80107ae <_dtoa_r+0x626>
 8010764:	4baf      	ldr	r3, [pc, #700]	@ (8010a24 <_dtoa_r+0x89c>)
 8010766:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801076a:	f7ef fd97 	bl	800029c <__adddf3>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010776:	f7f0 f9d7 	bl	8000b28 <__aeabi_dcmpgt>
 801077a:	2800      	cmp	r0, #0
 801077c:	d163      	bne.n	8010846 <_dtoa_r+0x6be>
 801077e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010782:	49a8      	ldr	r1, [pc, #672]	@ (8010a24 <_dtoa_r+0x89c>)
 8010784:	2000      	movs	r0, #0
 8010786:	f7ef fd87 	bl	8000298 <__aeabi_dsub>
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010792:	f7f0 f9ab 	bl	8000aec <__aeabi_dcmplt>
 8010796:	2800      	cmp	r0, #0
 8010798:	f43f af14 	beq.w	80105c4 <_dtoa_r+0x43c>
 801079c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801079e:	1e73      	subs	r3, r6, #1
 80107a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80107a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80107a6:	2b30      	cmp	r3, #48	@ 0x30
 80107a8:	d0f8      	beq.n	801079c <_dtoa_r+0x614>
 80107aa:	4647      	mov	r7, r8
 80107ac:	e03b      	b.n	8010826 <_dtoa_r+0x69e>
 80107ae:	4b9e      	ldr	r3, [pc, #632]	@ (8010a28 <_dtoa_r+0x8a0>)
 80107b0:	f7ef ff2a 	bl	8000608 <__aeabi_dmul>
 80107b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107b8:	e7bc      	b.n	8010734 <_dtoa_r+0x5ac>
 80107ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80107be:	4656      	mov	r6, sl
 80107c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107c4:	4620      	mov	r0, r4
 80107c6:	4629      	mov	r1, r5
 80107c8:	f7f0 f848 	bl	800085c <__aeabi_ddiv>
 80107cc:	f7f0 f9cc 	bl	8000b68 <__aeabi_d2iz>
 80107d0:	4680      	mov	r8, r0
 80107d2:	f7ef feaf 	bl	8000534 <__aeabi_i2d>
 80107d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107da:	f7ef ff15 	bl	8000608 <__aeabi_dmul>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4620      	mov	r0, r4
 80107e4:	4629      	mov	r1, r5
 80107e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80107ea:	f7ef fd55 	bl	8000298 <__aeabi_dsub>
 80107ee:	f806 4b01 	strb.w	r4, [r6], #1
 80107f2:	9d03      	ldr	r5, [sp, #12]
 80107f4:	eba6 040a 	sub.w	r4, r6, sl
 80107f8:	42a5      	cmp	r5, r4
 80107fa:	4602      	mov	r2, r0
 80107fc:	460b      	mov	r3, r1
 80107fe:	d133      	bne.n	8010868 <_dtoa_r+0x6e0>
 8010800:	f7ef fd4c 	bl	800029c <__adddf3>
 8010804:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010808:	4604      	mov	r4, r0
 801080a:	460d      	mov	r5, r1
 801080c:	f7f0 f98c 	bl	8000b28 <__aeabi_dcmpgt>
 8010810:	b9c0      	cbnz	r0, 8010844 <_dtoa_r+0x6bc>
 8010812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010816:	4620      	mov	r0, r4
 8010818:	4629      	mov	r1, r5
 801081a:	f7f0 f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 801081e:	b110      	cbz	r0, 8010826 <_dtoa_r+0x69e>
 8010820:	f018 0f01 	tst.w	r8, #1
 8010824:	d10e      	bne.n	8010844 <_dtoa_r+0x6bc>
 8010826:	9902      	ldr	r1, [sp, #8]
 8010828:	4648      	mov	r0, r9
 801082a:	f000 fb07 	bl	8010e3c <_Bfree>
 801082e:	2300      	movs	r3, #0
 8010830:	7033      	strb	r3, [r6, #0]
 8010832:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010834:	3701      	adds	r7, #1
 8010836:	601f      	str	r7, [r3, #0]
 8010838:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801083a:	2b00      	cmp	r3, #0
 801083c:	f000 824b 	beq.w	8010cd6 <_dtoa_r+0xb4e>
 8010840:	601e      	str	r6, [r3, #0]
 8010842:	e248      	b.n	8010cd6 <_dtoa_r+0xb4e>
 8010844:	46b8      	mov	r8, r7
 8010846:	4633      	mov	r3, r6
 8010848:	461e      	mov	r6, r3
 801084a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801084e:	2a39      	cmp	r2, #57	@ 0x39
 8010850:	d106      	bne.n	8010860 <_dtoa_r+0x6d8>
 8010852:	459a      	cmp	sl, r3
 8010854:	d1f8      	bne.n	8010848 <_dtoa_r+0x6c0>
 8010856:	2230      	movs	r2, #48	@ 0x30
 8010858:	f108 0801 	add.w	r8, r8, #1
 801085c:	f88a 2000 	strb.w	r2, [sl]
 8010860:	781a      	ldrb	r2, [r3, #0]
 8010862:	3201      	adds	r2, #1
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	e7a0      	b.n	80107aa <_dtoa_r+0x622>
 8010868:	4b6f      	ldr	r3, [pc, #444]	@ (8010a28 <_dtoa_r+0x8a0>)
 801086a:	2200      	movs	r2, #0
 801086c:	f7ef fecc 	bl	8000608 <__aeabi_dmul>
 8010870:	2200      	movs	r2, #0
 8010872:	2300      	movs	r3, #0
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	f7f0 f92e 	bl	8000ad8 <__aeabi_dcmpeq>
 801087c:	2800      	cmp	r0, #0
 801087e:	d09f      	beq.n	80107c0 <_dtoa_r+0x638>
 8010880:	e7d1      	b.n	8010826 <_dtoa_r+0x69e>
 8010882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010884:	2a00      	cmp	r2, #0
 8010886:	f000 80ea 	beq.w	8010a5e <_dtoa_r+0x8d6>
 801088a:	9a07      	ldr	r2, [sp, #28]
 801088c:	2a01      	cmp	r2, #1
 801088e:	f300 80cd 	bgt.w	8010a2c <_dtoa_r+0x8a4>
 8010892:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010894:	2a00      	cmp	r2, #0
 8010896:	f000 80c1 	beq.w	8010a1c <_dtoa_r+0x894>
 801089a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801089e:	9c08      	ldr	r4, [sp, #32]
 80108a0:	9e00      	ldr	r6, [sp, #0]
 80108a2:	9a00      	ldr	r2, [sp, #0]
 80108a4:	441a      	add	r2, r3
 80108a6:	9200      	str	r2, [sp, #0]
 80108a8:	9a06      	ldr	r2, [sp, #24]
 80108aa:	2101      	movs	r1, #1
 80108ac:	441a      	add	r2, r3
 80108ae:	4648      	mov	r0, r9
 80108b0:	9206      	str	r2, [sp, #24]
 80108b2:	f000 fbc1 	bl	8011038 <__i2b>
 80108b6:	4605      	mov	r5, r0
 80108b8:	b166      	cbz	r6, 80108d4 <_dtoa_r+0x74c>
 80108ba:	9b06      	ldr	r3, [sp, #24]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd09      	ble.n	80108d4 <_dtoa_r+0x74c>
 80108c0:	42b3      	cmp	r3, r6
 80108c2:	9a00      	ldr	r2, [sp, #0]
 80108c4:	bfa8      	it	ge
 80108c6:	4633      	movge	r3, r6
 80108c8:	1ad2      	subs	r2, r2, r3
 80108ca:	9200      	str	r2, [sp, #0]
 80108cc:	9a06      	ldr	r2, [sp, #24]
 80108ce:	1af6      	subs	r6, r6, r3
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	9306      	str	r3, [sp, #24]
 80108d4:	9b08      	ldr	r3, [sp, #32]
 80108d6:	b30b      	cbz	r3, 801091c <_dtoa_r+0x794>
 80108d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 80c6 	beq.w	8010a6c <_dtoa_r+0x8e4>
 80108e0:	2c00      	cmp	r4, #0
 80108e2:	f000 80c0 	beq.w	8010a66 <_dtoa_r+0x8de>
 80108e6:	4629      	mov	r1, r5
 80108e8:	4622      	mov	r2, r4
 80108ea:	4648      	mov	r0, r9
 80108ec:	f000 fc5c 	bl	80111a8 <__pow5mult>
 80108f0:	9a02      	ldr	r2, [sp, #8]
 80108f2:	4601      	mov	r1, r0
 80108f4:	4605      	mov	r5, r0
 80108f6:	4648      	mov	r0, r9
 80108f8:	f000 fbb4 	bl	8011064 <__multiply>
 80108fc:	9902      	ldr	r1, [sp, #8]
 80108fe:	4680      	mov	r8, r0
 8010900:	4648      	mov	r0, r9
 8010902:	f000 fa9b 	bl	8010e3c <_Bfree>
 8010906:	9b08      	ldr	r3, [sp, #32]
 8010908:	1b1b      	subs	r3, r3, r4
 801090a:	9308      	str	r3, [sp, #32]
 801090c:	f000 80b1 	beq.w	8010a72 <_dtoa_r+0x8ea>
 8010910:	9a08      	ldr	r2, [sp, #32]
 8010912:	4641      	mov	r1, r8
 8010914:	4648      	mov	r0, r9
 8010916:	f000 fc47 	bl	80111a8 <__pow5mult>
 801091a:	9002      	str	r0, [sp, #8]
 801091c:	2101      	movs	r1, #1
 801091e:	4648      	mov	r0, r9
 8010920:	f000 fb8a 	bl	8011038 <__i2b>
 8010924:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010926:	4604      	mov	r4, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 81d8 	beq.w	8010cde <_dtoa_r+0xb56>
 801092e:	461a      	mov	r2, r3
 8010930:	4601      	mov	r1, r0
 8010932:	4648      	mov	r0, r9
 8010934:	f000 fc38 	bl	80111a8 <__pow5mult>
 8010938:	9b07      	ldr	r3, [sp, #28]
 801093a:	2b01      	cmp	r3, #1
 801093c:	4604      	mov	r4, r0
 801093e:	f300 809f 	bgt.w	8010a80 <_dtoa_r+0x8f8>
 8010942:	9b04      	ldr	r3, [sp, #16]
 8010944:	2b00      	cmp	r3, #0
 8010946:	f040 8097 	bne.w	8010a78 <_dtoa_r+0x8f0>
 801094a:	9b05      	ldr	r3, [sp, #20]
 801094c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010950:	2b00      	cmp	r3, #0
 8010952:	f040 8093 	bne.w	8010a7c <_dtoa_r+0x8f4>
 8010956:	9b05      	ldr	r3, [sp, #20]
 8010958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801095c:	0d1b      	lsrs	r3, r3, #20
 801095e:	051b      	lsls	r3, r3, #20
 8010960:	b133      	cbz	r3, 8010970 <_dtoa_r+0x7e8>
 8010962:	9b00      	ldr	r3, [sp, #0]
 8010964:	3301      	adds	r3, #1
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	9b06      	ldr	r3, [sp, #24]
 801096a:	3301      	adds	r3, #1
 801096c:	9306      	str	r3, [sp, #24]
 801096e:	2301      	movs	r3, #1
 8010970:	9308      	str	r3, [sp, #32]
 8010972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010974:	2b00      	cmp	r3, #0
 8010976:	f000 81b8 	beq.w	8010cea <_dtoa_r+0xb62>
 801097a:	6923      	ldr	r3, [r4, #16]
 801097c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010980:	6918      	ldr	r0, [r3, #16]
 8010982:	f000 fb0d 	bl	8010fa0 <__hi0bits>
 8010986:	f1c0 0020 	rsb	r0, r0, #32
 801098a:	9b06      	ldr	r3, [sp, #24]
 801098c:	4418      	add	r0, r3
 801098e:	f010 001f 	ands.w	r0, r0, #31
 8010992:	f000 8082 	beq.w	8010a9a <_dtoa_r+0x912>
 8010996:	f1c0 0320 	rsb	r3, r0, #32
 801099a:	2b04      	cmp	r3, #4
 801099c:	dd73      	ble.n	8010a86 <_dtoa_r+0x8fe>
 801099e:	9b00      	ldr	r3, [sp, #0]
 80109a0:	f1c0 001c 	rsb	r0, r0, #28
 80109a4:	4403      	add	r3, r0
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	9b06      	ldr	r3, [sp, #24]
 80109aa:	4403      	add	r3, r0
 80109ac:	4406      	add	r6, r0
 80109ae:	9306      	str	r3, [sp, #24]
 80109b0:	9b00      	ldr	r3, [sp, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	dd05      	ble.n	80109c2 <_dtoa_r+0x83a>
 80109b6:	9902      	ldr	r1, [sp, #8]
 80109b8:	461a      	mov	r2, r3
 80109ba:	4648      	mov	r0, r9
 80109bc:	f000 fc4e 	bl	801125c <__lshift>
 80109c0:	9002      	str	r0, [sp, #8]
 80109c2:	9b06      	ldr	r3, [sp, #24]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	dd05      	ble.n	80109d4 <_dtoa_r+0x84c>
 80109c8:	4621      	mov	r1, r4
 80109ca:	461a      	mov	r2, r3
 80109cc:	4648      	mov	r0, r9
 80109ce:	f000 fc45 	bl	801125c <__lshift>
 80109d2:	4604      	mov	r4, r0
 80109d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d061      	beq.n	8010a9e <_dtoa_r+0x916>
 80109da:	9802      	ldr	r0, [sp, #8]
 80109dc:	4621      	mov	r1, r4
 80109de:	f000 fca9 	bl	8011334 <__mcmp>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	da5b      	bge.n	8010a9e <_dtoa_r+0x916>
 80109e6:	2300      	movs	r3, #0
 80109e8:	9902      	ldr	r1, [sp, #8]
 80109ea:	220a      	movs	r2, #10
 80109ec:	4648      	mov	r0, r9
 80109ee:	f000 fa47 	bl	8010e80 <__multadd>
 80109f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f4:	9002      	str	r0, [sp, #8]
 80109f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f000 8177 	beq.w	8010cee <_dtoa_r+0xb66>
 8010a00:	4629      	mov	r1, r5
 8010a02:	2300      	movs	r3, #0
 8010a04:	220a      	movs	r2, #10
 8010a06:	4648      	mov	r0, r9
 8010a08:	f000 fa3a 	bl	8010e80 <__multadd>
 8010a0c:	f1bb 0f00 	cmp.w	fp, #0
 8010a10:	4605      	mov	r5, r0
 8010a12:	dc6f      	bgt.n	8010af4 <_dtoa_r+0x96c>
 8010a14:	9b07      	ldr	r3, [sp, #28]
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	dc49      	bgt.n	8010aae <_dtoa_r+0x926>
 8010a1a:	e06b      	b.n	8010af4 <_dtoa_r+0x96c>
 8010a1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a22:	e73c      	b.n	801089e <_dtoa_r+0x716>
 8010a24:	3fe00000 	.word	0x3fe00000
 8010a28:	40240000 	.word	0x40240000
 8010a2c:	9b03      	ldr	r3, [sp, #12]
 8010a2e:	1e5c      	subs	r4, r3, #1
 8010a30:	9b08      	ldr	r3, [sp, #32]
 8010a32:	42a3      	cmp	r3, r4
 8010a34:	db09      	blt.n	8010a4a <_dtoa_r+0x8c2>
 8010a36:	1b1c      	subs	r4, r3, r4
 8010a38:	9b03      	ldr	r3, [sp, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	f6bf af30 	bge.w	80108a0 <_dtoa_r+0x718>
 8010a40:	9b00      	ldr	r3, [sp, #0]
 8010a42:	9a03      	ldr	r2, [sp, #12]
 8010a44:	1a9e      	subs	r6, r3, r2
 8010a46:	2300      	movs	r3, #0
 8010a48:	e72b      	b.n	80108a2 <_dtoa_r+0x71a>
 8010a4a:	9b08      	ldr	r3, [sp, #32]
 8010a4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a4e:	9408      	str	r4, [sp, #32]
 8010a50:	1ae3      	subs	r3, r4, r3
 8010a52:	441a      	add	r2, r3
 8010a54:	9e00      	ldr	r6, [sp, #0]
 8010a56:	9b03      	ldr	r3, [sp, #12]
 8010a58:	920d      	str	r2, [sp, #52]	@ 0x34
 8010a5a:	2400      	movs	r4, #0
 8010a5c:	e721      	b.n	80108a2 <_dtoa_r+0x71a>
 8010a5e:	9c08      	ldr	r4, [sp, #32]
 8010a60:	9e00      	ldr	r6, [sp, #0]
 8010a62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010a64:	e728      	b.n	80108b8 <_dtoa_r+0x730>
 8010a66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010a6a:	e751      	b.n	8010910 <_dtoa_r+0x788>
 8010a6c:	9a08      	ldr	r2, [sp, #32]
 8010a6e:	9902      	ldr	r1, [sp, #8]
 8010a70:	e750      	b.n	8010914 <_dtoa_r+0x78c>
 8010a72:	f8cd 8008 	str.w	r8, [sp, #8]
 8010a76:	e751      	b.n	801091c <_dtoa_r+0x794>
 8010a78:	2300      	movs	r3, #0
 8010a7a:	e779      	b.n	8010970 <_dtoa_r+0x7e8>
 8010a7c:	9b04      	ldr	r3, [sp, #16]
 8010a7e:	e777      	b.n	8010970 <_dtoa_r+0x7e8>
 8010a80:	2300      	movs	r3, #0
 8010a82:	9308      	str	r3, [sp, #32]
 8010a84:	e779      	b.n	801097a <_dtoa_r+0x7f2>
 8010a86:	d093      	beq.n	80109b0 <_dtoa_r+0x828>
 8010a88:	9a00      	ldr	r2, [sp, #0]
 8010a8a:	331c      	adds	r3, #28
 8010a8c:	441a      	add	r2, r3
 8010a8e:	9200      	str	r2, [sp, #0]
 8010a90:	9a06      	ldr	r2, [sp, #24]
 8010a92:	441a      	add	r2, r3
 8010a94:	441e      	add	r6, r3
 8010a96:	9206      	str	r2, [sp, #24]
 8010a98:	e78a      	b.n	80109b0 <_dtoa_r+0x828>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	e7f4      	b.n	8010a88 <_dtoa_r+0x900>
 8010a9e:	9b03      	ldr	r3, [sp, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	46b8      	mov	r8, r7
 8010aa4:	dc20      	bgt.n	8010ae8 <_dtoa_r+0x960>
 8010aa6:	469b      	mov	fp, r3
 8010aa8:	9b07      	ldr	r3, [sp, #28]
 8010aaa:	2b02      	cmp	r3, #2
 8010aac:	dd1e      	ble.n	8010aec <_dtoa_r+0x964>
 8010aae:	f1bb 0f00 	cmp.w	fp, #0
 8010ab2:	f47f adb1 	bne.w	8010618 <_dtoa_r+0x490>
 8010ab6:	4621      	mov	r1, r4
 8010ab8:	465b      	mov	r3, fp
 8010aba:	2205      	movs	r2, #5
 8010abc:	4648      	mov	r0, r9
 8010abe:	f000 f9df 	bl	8010e80 <__multadd>
 8010ac2:	4601      	mov	r1, r0
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	9802      	ldr	r0, [sp, #8]
 8010ac8:	f000 fc34 	bl	8011334 <__mcmp>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	f77f ada3 	ble.w	8010618 <_dtoa_r+0x490>
 8010ad2:	4656      	mov	r6, sl
 8010ad4:	2331      	movs	r3, #49	@ 0x31
 8010ad6:	f806 3b01 	strb.w	r3, [r6], #1
 8010ada:	f108 0801 	add.w	r8, r8, #1
 8010ade:	e59f      	b.n	8010620 <_dtoa_r+0x498>
 8010ae0:	9c03      	ldr	r4, [sp, #12]
 8010ae2:	46b8      	mov	r8, r7
 8010ae4:	4625      	mov	r5, r4
 8010ae6:	e7f4      	b.n	8010ad2 <_dtoa_r+0x94a>
 8010ae8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 8101 	beq.w	8010cf6 <_dtoa_r+0xb6e>
 8010af4:	2e00      	cmp	r6, #0
 8010af6:	dd05      	ble.n	8010b04 <_dtoa_r+0x97c>
 8010af8:	4629      	mov	r1, r5
 8010afa:	4632      	mov	r2, r6
 8010afc:	4648      	mov	r0, r9
 8010afe:	f000 fbad 	bl	801125c <__lshift>
 8010b02:	4605      	mov	r5, r0
 8010b04:	9b08      	ldr	r3, [sp, #32]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d05c      	beq.n	8010bc4 <_dtoa_r+0xa3c>
 8010b0a:	6869      	ldr	r1, [r5, #4]
 8010b0c:	4648      	mov	r0, r9
 8010b0e:	f000 f955 	bl	8010dbc <_Balloc>
 8010b12:	4606      	mov	r6, r0
 8010b14:	b928      	cbnz	r0, 8010b22 <_dtoa_r+0x99a>
 8010b16:	4b82      	ldr	r3, [pc, #520]	@ (8010d20 <_dtoa_r+0xb98>)
 8010b18:	4602      	mov	r2, r0
 8010b1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b1e:	f7ff bb4a 	b.w	80101b6 <_dtoa_r+0x2e>
 8010b22:	692a      	ldr	r2, [r5, #16]
 8010b24:	3202      	adds	r2, #2
 8010b26:	0092      	lsls	r2, r2, #2
 8010b28:	f105 010c 	add.w	r1, r5, #12
 8010b2c:	300c      	adds	r0, #12
 8010b2e:	f001 fea5 	bl	801287c <memcpy>
 8010b32:	2201      	movs	r2, #1
 8010b34:	4631      	mov	r1, r6
 8010b36:	4648      	mov	r0, r9
 8010b38:	f000 fb90 	bl	801125c <__lshift>
 8010b3c:	f10a 0301 	add.w	r3, sl, #1
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	eb0a 030b 	add.w	r3, sl, fp
 8010b46:	9308      	str	r3, [sp, #32]
 8010b48:	9b04      	ldr	r3, [sp, #16]
 8010b4a:	f003 0301 	and.w	r3, r3, #1
 8010b4e:	462f      	mov	r7, r5
 8010b50:	9306      	str	r3, [sp, #24]
 8010b52:	4605      	mov	r5, r0
 8010b54:	9b00      	ldr	r3, [sp, #0]
 8010b56:	9802      	ldr	r0, [sp, #8]
 8010b58:	4621      	mov	r1, r4
 8010b5a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010b5e:	f7ff fa8b 	bl	8010078 <quorem>
 8010b62:	4603      	mov	r3, r0
 8010b64:	3330      	adds	r3, #48	@ 0x30
 8010b66:	9003      	str	r0, [sp, #12]
 8010b68:	4639      	mov	r1, r7
 8010b6a:	9802      	ldr	r0, [sp, #8]
 8010b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b6e:	f000 fbe1 	bl	8011334 <__mcmp>
 8010b72:	462a      	mov	r2, r5
 8010b74:	9004      	str	r0, [sp, #16]
 8010b76:	4621      	mov	r1, r4
 8010b78:	4648      	mov	r0, r9
 8010b7a:	f000 fbf7 	bl	801136c <__mdiff>
 8010b7e:	68c2      	ldr	r2, [r0, #12]
 8010b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b82:	4606      	mov	r6, r0
 8010b84:	bb02      	cbnz	r2, 8010bc8 <_dtoa_r+0xa40>
 8010b86:	4601      	mov	r1, r0
 8010b88:	9802      	ldr	r0, [sp, #8]
 8010b8a:	f000 fbd3 	bl	8011334 <__mcmp>
 8010b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b90:	4602      	mov	r2, r0
 8010b92:	4631      	mov	r1, r6
 8010b94:	4648      	mov	r0, r9
 8010b96:	920c      	str	r2, [sp, #48]	@ 0x30
 8010b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b9a:	f000 f94f 	bl	8010e3c <_Bfree>
 8010b9e:	9b07      	ldr	r3, [sp, #28]
 8010ba0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010ba2:	9e00      	ldr	r6, [sp, #0]
 8010ba4:	ea42 0103 	orr.w	r1, r2, r3
 8010ba8:	9b06      	ldr	r3, [sp, #24]
 8010baa:	4319      	orrs	r1, r3
 8010bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bae:	d10d      	bne.n	8010bcc <_dtoa_r+0xa44>
 8010bb0:	2b39      	cmp	r3, #57	@ 0x39
 8010bb2:	d027      	beq.n	8010c04 <_dtoa_r+0xa7c>
 8010bb4:	9a04      	ldr	r2, [sp, #16]
 8010bb6:	2a00      	cmp	r2, #0
 8010bb8:	dd01      	ble.n	8010bbe <_dtoa_r+0xa36>
 8010bba:	9b03      	ldr	r3, [sp, #12]
 8010bbc:	3331      	adds	r3, #49	@ 0x31
 8010bbe:	f88b 3000 	strb.w	r3, [fp]
 8010bc2:	e52e      	b.n	8010622 <_dtoa_r+0x49a>
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	e7b9      	b.n	8010b3c <_dtoa_r+0x9b4>
 8010bc8:	2201      	movs	r2, #1
 8010bca:	e7e2      	b.n	8010b92 <_dtoa_r+0xa0a>
 8010bcc:	9904      	ldr	r1, [sp, #16]
 8010bce:	2900      	cmp	r1, #0
 8010bd0:	db04      	blt.n	8010bdc <_dtoa_r+0xa54>
 8010bd2:	9807      	ldr	r0, [sp, #28]
 8010bd4:	4301      	orrs	r1, r0
 8010bd6:	9806      	ldr	r0, [sp, #24]
 8010bd8:	4301      	orrs	r1, r0
 8010bda:	d120      	bne.n	8010c1e <_dtoa_r+0xa96>
 8010bdc:	2a00      	cmp	r2, #0
 8010bde:	ddee      	ble.n	8010bbe <_dtoa_r+0xa36>
 8010be0:	9902      	ldr	r1, [sp, #8]
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	2201      	movs	r2, #1
 8010be6:	4648      	mov	r0, r9
 8010be8:	f000 fb38 	bl	801125c <__lshift>
 8010bec:	4621      	mov	r1, r4
 8010bee:	9002      	str	r0, [sp, #8]
 8010bf0:	f000 fba0 	bl	8011334 <__mcmp>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	9b00      	ldr	r3, [sp, #0]
 8010bf8:	dc02      	bgt.n	8010c00 <_dtoa_r+0xa78>
 8010bfa:	d1e0      	bne.n	8010bbe <_dtoa_r+0xa36>
 8010bfc:	07da      	lsls	r2, r3, #31
 8010bfe:	d5de      	bpl.n	8010bbe <_dtoa_r+0xa36>
 8010c00:	2b39      	cmp	r3, #57	@ 0x39
 8010c02:	d1da      	bne.n	8010bba <_dtoa_r+0xa32>
 8010c04:	2339      	movs	r3, #57	@ 0x39
 8010c06:	f88b 3000 	strb.w	r3, [fp]
 8010c0a:	4633      	mov	r3, r6
 8010c0c:	461e      	mov	r6, r3
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c14:	2a39      	cmp	r2, #57	@ 0x39
 8010c16:	d04e      	beq.n	8010cb6 <_dtoa_r+0xb2e>
 8010c18:	3201      	adds	r2, #1
 8010c1a:	701a      	strb	r2, [r3, #0]
 8010c1c:	e501      	b.n	8010622 <_dtoa_r+0x49a>
 8010c1e:	2a00      	cmp	r2, #0
 8010c20:	dd03      	ble.n	8010c2a <_dtoa_r+0xaa2>
 8010c22:	2b39      	cmp	r3, #57	@ 0x39
 8010c24:	d0ee      	beq.n	8010c04 <_dtoa_r+0xa7c>
 8010c26:	3301      	adds	r3, #1
 8010c28:	e7c9      	b.n	8010bbe <_dtoa_r+0xa36>
 8010c2a:	9a00      	ldr	r2, [sp, #0]
 8010c2c:	9908      	ldr	r1, [sp, #32]
 8010c2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010c32:	428a      	cmp	r2, r1
 8010c34:	d028      	beq.n	8010c88 <_dtoa_r+0xb00>
 8010c36:	9902      	ldr	r1, [sp, #8]
 8010c38:	2300      	movs	r3, #0
 8010c3a:	220a      	movs	r2, #10
 8010c3c:	4648      	mov	r0, r9
 8010c3e:	f000 f91f 	bl	8010e80 <__multadd>
 8010c42:	42af      	cmp	r7, r5
 8010c44:	9002      	str	r0, [sp, #8]
 8010c46:	f04f 0300 	mov.w	r3, #0
 8010c4a:	f04f 020a 	mov.w	r2, #10
 8010c4e:	4639      	mov	r1, r7
 8010c50:	4648      	mov	r0, r9
 8010c52:	d107      	bne.n	8010c64 <_dtoa_r+0xadc>
 8010c54:	f000 f914 	bl	8010e80 <__multadd>
 8010c58:	4607      	mov	r7, r0
 8010c5a:	4605      	mov	r5, r0
 8010c5c:	9b00      	ldr	r3, [sp, #0]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	9300      	str	r3, [sp, #0]
 8010c62:	e777      	b.n	8010b54 <_dtoa_r+0x9cc>
 8010c64:	f000 f90c 	bl	8010e80 <__multadd>
 8010c68:	4629      	mov	r1, r5
 8010c6a:	4607      	mov	r7, r0
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	220a      	movs	r2, #10
 8010c70:	4648      	mov	r0, r9
 8010c72:	f000 f905 	bl	8010e80 <__multadd>
 8010c76:	4605      	mov	r5, r0
 8010c78:	e7f0      	b.n	8010c5c <_dtoa_r+0xad4>
 8010c7a:	f1bb 0f00 	cmp.w	fp, #0
 8010c7e:	bfcc      	ite	gt
 8010c80:	465e      	movgt	r6, fp
 8010c82:	2601      	movle	r6, #1
 8010c84:	4456      	add	r6, sl
 8010c86:	2700      	movs	r7, #0
 8010c88:	9902      	ldr	r1, [sp, #8]
 8010c8a:	9300      	str	r3, [sp, #0]
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	4648      	mov	r0, r9
 8010c90:	f000 fae4 	bl	801125c <__lshift>
 8010c94:	4621      	mov	r1, r4
 8010c96:	9002      	str	r0, [sp, #8]
 8010c98:	f000 fb4c 	bl	8011334 <__mcmp>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	dcb4      	bgt.n	8010c0a <_dtoa_r+0xa82>
 8010ca0:	d102      	bne.n	8010ca8 <_dtoa_r+0xb20>
 8010ca2:	9b00      	ldr	r3, [sp, #0]
 8010ca4:	07db      	lsls	r3, r3, #31
 8010ca6:	d4b0      	bmi.n	8010c0a <_dtoa_r+0xa82>
 8010ca8:	4633      	mov	r3, r6
 8010caa:	461e      	mov	r6, r3
 8010cac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cb0:	2a30      	cmp	r2, #48	@ 0x30
 8010cb2:	d0fa      	beq.n	8010caa <_dtoa_r+0xb22>
 8010cb4:	e4b5      	b.n	8010622 <_dtoa_r+0x49a>
 8010cb6:	459a      	cmp	sl, r3
 8010cb8:	d1a8      	bne.n	8010c0c <_dtoa_r+0xa84>
 8010cba:	2331      	movs	r3, #49	@ 0x31
 8010cbc:	f108 0801 	add.w	r8, r8, #1
 8010cc0:	f88a 3000 	strb.w	r3, [sl]
 8010cc4:	e4ad      	b.n	8010622 <_dtoa_r+0x49a>
 8010cc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010cc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010d24 <_dtoa_r+0xb9c>
 8010ccc:	b11b      	cbz	r3, 8010cd6 <_dtoa_r+0xb4e>
 8010cce:	f10a 0308 	add.w	r3, sl, #8
 8010cd2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010cd4:	6013      	str	r3, [r2, #0]
 8010cd6:	4650      	mov	r0, sl
 8010cd8:	b017      	add	sp, #92	@ 0x5c
 8010cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cde:	9b07      	ldr	r3, [sp, #28]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	f77f ae2e 	ble.w	8010942 <_dtoa_r+0x7ba>
 8010ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ce8:	9308      	str	r3, [sp, #32]
 8010cea:	2001      	movs	r0, #1
 8010cec:	e64d      	b.n	801098a <_dtoa_r+0x802>
 8010cee:	f1bb 0f00 	cmp.w	fp, #0
 8010cf2:	f77f aed9 	ble.w	8010aa8 <_dtoa_r+0x920>
 8010cf6:	4656      	mov	r6, sl
 8010cf8:	9802      	ldr	r0, [sp, #8]
 8010cfa:	4621      	mov	r1, r4
 8010cfc:	f7ff f9bc 	bl	8010078 <quorem>
 8010d00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010d04:	f806 3b01 	strb.w	r3, [r6], #1
 8010d08:	eba6 020a 	sub.w	r2, r6, sl
 8010d0c:	4593      	cmp	fp, r2
 8010d0e:	ddb4      	ble.n	8010c7a <_dtoa_r+0xaf2>
 8010d10:	9902      	ldr	r1, [sp, #8]
 8010d12:	2300      	movs	r3, #0
 8010d14:	220a      	movs	r2, #10
 8010d16:	4648      	mov	r0, r9
 8010d18:	f000 f8b2 	bl	8010e80 <__multadd>
 8010d1c:	9002      	str	r0, [sp, #8]
 8010d1e:	e7eb      	b.n	8010cf8 <_dtoa_r+0xb70>
 8010d20:	08014661 	.word	0x08014661
 8010d24:	080145e5 	.word	0x080145e5

08010d28 <_free_r>:
 8010d28:	b538      	push	{r3, r4, r5, lr}
 8010d2a:	4605      	mov	r5, r0
 8010d2c:	2900      	cmp	r1, #0
 8010d2e:	d041      	beq.n	8010db4 <_free_r+0x8c>
 8010d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d34:	1f0c      	subs	r4, r1, #4
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	bfb8      	it	lt
 8010d3a:	18e4      	addlt	r4, r4, r3
 8010d3c:	f7fe f96e 	bl	800f01c <__malloc_lock>
 8010d40:	4a1d      	ldr	r2, [pc, #116]	@ (8010db8 <_free_r+0x90>)
 8010d42:	6813      	ldr	r3, [r2, #0]
 8010d44:	b933      	cbnz	r3, 8010d54 <_free_r+0x2c>
 8010d46:	6063      	str	r3, [r4, #4]
 8010d48:	6014      	str	r4, [r2, #0]
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d50:	f7fe b96a 	b.w	800f028 <__malloc_unlock>
 8010d54:	42a3      	cmp	r3, r4
 8010d56:	d908      	bls.n	8010d6a <_free_r+0x42>
 8010d58:	6820      	ldr	r0, [r4, #0]
 8010d5a:	1821      	adds	r1, r4, r0
 8010d5c:	428b      	cmp	r3, r1
 8010d5e:	bf01      	itttt	eq
 8010d60:	6819      	ldreq	r1, [r3, #0]
 8010d62:	685b      	ldreq	r3, [r3, #4]
 8010d64:	1809      	addeq	r1, r1, r0
 8010d66:	6021      	streq	r1, [r4, #0]
 8010d68:	e7ed      	b.n	8010d46 <_free_r+0x1e>
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	b10b      	cbz	r3, 8010d74 <_free_r+0x4c>
 8010d70:	42a3      	cmp	r3, r4
 8010d72:	d9fa      	bls.n	8010d6a <_free_r+0x42>
 8010d74:	6811      	ldr	r1, [r2, #0]
 8010d76:	1850      	adds	r0, r2, r1
 8010d78:	42a0      	cmp	r0, r4
 8010d7a:	d10b      	bne.n	8010d94 <_free_r+0x6c>
 8010d7c:	6820      	ldr	r0, [r4, #0]
 8010d7e:	4401      	add	r1, r0
 8010d80:	1850      	adds	r0, r2, r1
 8010d82:	4283      	cmp	r3, r0
 8010d84:	6011      	str	r1, [r2, #0]
 8010d86:	d1e0      	bne.n	8010d4a <_free_r+0x22>
 8010d88:	6818      	ldr	r0, [r3, #0]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	6053      	str	r3, [r2, #4]
 8010d8e:	4408      	add	r0, r1
 8010d90:	6010      	str	r0, [r2, #0]
 8010d92:	e7da      	b.n	8010d4a <_free_r+0x22>
 8010d94:	d902      	bls.n	8010d9c <_free_r+0x74>
 8010d96:	230c      	movs	r3, #12
 8010d98:	602b      	str	r3, [r5, #0]
 8010d9a:	e7d6      	b.n	8010d4a <_free_r+0x22>
 8010d9c:	6820      	ldr	r0, [r4, #0]
 8010d9e:	1821      	adds	r1, r4, r0
 8010da0:	428b      	cmp	r3, r1
 8010da2:	bf04      	itt	eq
 8010da4:	6819      	ldreq	r1, [r3, #0]
 8010da6:	685b      	ldreq	r3, [r3, #4]
 8010da8:	6063      	str	r3, [r4, #4]
 8010daa:	bf04      	itt	eq
 8010dac:	1809      	addeq	r1, r1, r0
 8010dae:	6021      	streq	r1, [r4, #0]
 8010db0:	6054      	str	r4, [r2, #4]
 8010db2:	e7ca      	b.n	8010d4a <_free_r+0x22>
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	bf00      	nop
 8010db8:	20001ac0 	.word	0x20001ac0

08010dbc <_Balloc>:
 8010dbc:	b570      	push	{r4, r5, r6, lr}
 8010dbe:	69c6      	ldr	r6, [r0, #28]
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	460d      	mov	r5, r1
 8010dc4:	b976      	cbnz	r6, 8010de4 <_Balloc+0x28>
 8010dc6:	2010      	movs	r0, #16
 8010dc8:	f7fe f87e 	bl	800eec8 <malloc>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	61e0      	str	r0, [r4, #28]
 8010dd0:	b920      	cbnz	r0, 8010ddc <_Balloc+0x20>
 8010dd2:	4b18      	ldr	r3, [pc, #96]	@ (8010e34 <_Balloc+0x78>)
 8010dd4:	4818      	ldr	r0, [pc, #96]	@ (8010e38 <_Balloc+0x7c>)
 8010dd6:	216b      	movs	r1, #107	@ 0x6b
 8010dd8:	f001 fd66 	bl	80128a8 <__assert_func>
 8010ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010de0:	6006      	str	r6, [r0, #0]
 8010de2:	60c6      	str	r6, [r0, #12]
 8010de4:	69e6      	ldr	r6, [r4, #28]
 8010de6:	68f3      	ldr	r3, [r6, #12]
 8010de8:	b183      	cbz	r3, 8010e0c <_Balloc+0x50>
 8010dea:	69e3      	ldr	r3, [r4, #28]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010df2:	b9b8      	cbnz	r0, 8010e24 <_Balloc+0x68>
 8010df4:	2101      	movs	r1, #1
 8010df6:	fa01 f605 	lsl.w	r6, r1, r5
 8010dfa:	1d72      	adds	r2, r6, #5
 8010dfc:	0092      	lsls	r2, r2, #2
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f001 fd70 	bl	80128e4 <_calloc_r>
 8010e04:	b160      	cbz	r0, 8010e20 <_Balloc+0x64>
 8010e06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e0a:	e00e      	b.n	8010e2a <_Balloc+0x6e>
 8010e0c:	2221      	movs	r2, #33	@ 0x21
 8010e0e:	2104      	movs	r1, #4
 8010e10:	4620      	mov	r0, r4
 8010e12:	f001 fd67 	bl	80128e4 <_calloc_r>
 8010e16:	69e3      	ldr	r3, [r4, #28]
 8010e18:	60f0      	str	r0, [r6, #12]
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d1e4      	bne.n	8010dea <_Balloc+0x2e>
 8010e20:	2000      	movs	r0, #0
 8010e22:	bd70      	pop	{r4, r5, r6, pc}
 8010e24:	6802      	ldr	r2, [r0, #0]
 8010e26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e30:	e7f7      	b.n	8010e22 <_Balloc+0x66>
 8010e32:	bf00      	nop
 8010e34:	080145f2 	.word	0x080145f2
 8010e38:	08014672 	.word	0x08014672

08010e3c <_Bfree>:
 8010e3c:	b570      	push	{r4, r5, r6, lr}
 8010e3e:	69c6      	ldr	r6, [r0, #28]
 8010e40:	4605      	mov	r5, r0
 8010e42:	460c      	mov	r4, r1
 8010e44:	b976      	cbnz	r6, 8010e64 <_Bfree+0x28>
 8010e46:	2010      	movs	r0, #16
 8010e48:	f7fe f83e 	bl	800eec8 <malloc>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	61e8      	str	r0, [r5, #28]
 8010e50:	b920      	cbnz	r0, 8010e5c <_Bfree+0x20>
 8010e52:	4b09      	ldr	r3, [pc, #36]	@ (8010e78 <_Bfree+0x3c>)
 8010e54:	4809      	ldr	r0, [pc, #36]	@ (8010e7c <_Bfree+0x40>)
 8010e56:	218f      	movs	r1, #143	@ 0x8f
 8010e58:	f001 fd26 	bl	80128a8 <__assert_func>
 8010e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e60:	6006      	str	r6, [r0, #0]
 8010e62:	60c6      	str	r6, [r0, #12]
 8010e64:	b13c      	cbz	r4, 8010e76 <_Bfree+0x3a>
 8010e66:	69eb      	ldr	r3, [r5, #28]
 8010e68:	6862      	ldr	r2, [r4, #4]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e70:	6021      	str	r1, [r4, #0]
 8010e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e76:	bd70      	pop	{r4, r5, r6, pc}
 8010e78:	080145f2 	.word	0x080145f2
 8010e7c:	08014672 	.word	0x08014672

08010e80 <__multadd>:
 8010e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e84:	690d      	ldr	r5, [r1, #16]
 8010e86:	4607      	mov	r7, r0
 8010e88:	460c      	mov	r4, r1
 8010e8a:	461e      	mov	r6, r3
 8010e8c:	f101 0c14 	add.w	ip, r1, #20
 8010e90:	2000      	movs	r0, #0
 8010e92:	f8dc 3000 	ldr.w	r3, [ip]
 8010e96:	b299      	uxth	r1, r3
 8010e98:	fb02 6101 	mla	r1, r2, r1, r6
 8010e9c:	0c1e      	lsrs	r6, r3, #16
 8010e9e:	0c0b      	lsrs	r3, r1, #16
 8010ea0:	fb02 3306 	mla	r3, r2, r6, r3
 8010ea4:	b289      	uxth	r1, r1
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010eac:	4285      	cmp	r5, r0
 8010eae:	f84c 1b04 	str.w	r1, [ip], #4
 8010eb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010eb6:	dcec      	bgt.n	8010e92 <__multadd+0x12>
 8010eb8:	b30e      	cbz	r6, 8010efe <__multadd+0x7e>
 8010eba:	68a3      	ldr	r3, [r4, #8]
 8010ebc:	42ab      	cmp	r3, r5
 8010ebe:	dc19      	bgt.n	8010ef4 <__multadd+0x74>
 8010ec0:	6861      	ldr	r1, [r4, #4]
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	3101      	adds	r1, #1
 8010ec6:	f7ff ff79 	bl	8010dbc <_Balloc>
 8010eca:	4680      	mov	r8, r0
 8010ecc:	b928      	cbnz	r0, 8010eda <__multadd+0x5a>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8010f04 <__multadd+0x84>)
 8010ed2:	480d      	ldr	r0, [pc, #52]	@ (8010f08 <__multadd+0x88>)
 8010ed4:	21ba      	movs	r1, #186	@ 0xba
 8010ed6:	f001 fce7 	bl	80128a8 <__assert_func>
 8010eda:	6922      	ldr	r2, [r4, #16]
 8010edc:	3202      	adds	r2, #2
 8010ede:	f104 010c 	add.w	r1, r4, #12
 8010ee2:	0092      	lsls	r2, r2, #2
 8010ee4:	300c      	adds	r0, #12
 8010ee6:	f001 fcc9 	bl	801287c <memcpy>
 8010eea:	4621      	mov	r1, r4
 8010eec:	4638      	mov	r0, r7
 8010eee:	f7ff ffa5 	bl	8010e3c <_Bfree>
 8010ef2:	4644      	mov	r4, r8
 8010ef4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ef8:	3501      	adds	r5, #1
 8010efa:	615e      	str	r6, [r3, #20]
 8010efc:	6125      	str	r5, [r4, #16]
 8010efe:	4620      	mov	r0, r4
 8010f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f04:	08014661 	.word	0x08014661
 8010f08:	08014672 	.word	0x08014672

08010f0c <__s2b>:
 8010f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f10:	460c      	mov	r4, r1
 8010f12:	4615      	mov	r5, r2
 8010f14:	461f      	mov	r7, r3
 8010f16:	2209      	movs	r2, #9
 8010f18:	3308      	adds	r3, #8
 8010f1a:	4606      	mov	r6, r0
 8010f1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f20:	2100      	movs	r1, #0
 8010f22:	2201      	movs	r2, #1
 8010f24:	429a      	cmp	r2, r3
 8010f26:	db09      	blt.n	8010f3c <__s2b+0x30>
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f7ff ff47 	bl	8010dbc <_Balloc>
 8010f2e:	b940      	cbnz	r0, 8010f42 <__s2b+0x36>
 8010f30:	4602      	mov	r2, r0
 8010f32:	4b19      	ldr	r3, [pc, #100]	@ (8010f98 <__s2b+0x8c>)
 8010f34:	4819      	ldr	r0, [pc, #100]	@ (8010f9c <__s2b+0x90>)
 8010f36:	21d3      	movs	r1, #211	@ 0xd3
 8010f38:	f001 fcb6 	bl	80128a8 <__assert_func>
 8010f3c:	0052      	lsls	r2, r2, #1
 8010f3e:	3101      	adds	r1, #1
 8010f40:	e7f0      	b.n	8010f24 <__s2b+0x18>
 8010f42:	9b08      	ldr	r3, [sp, #32]
 8010f44:	6143      	str	r3, [r0, #20]
 8010f46:	2d09      	cmp	r5, #9
 8010f48:	f04f 0301 	mov.w	r3, #1
 8010f4c:	6103      	str	r3, [r0, #16]
 8010f4e:	dd16      	ble.n	8010f7e <__s2b+0x72>
 8010f50:	f104 0909 	add.w	r9, r4, #9
 8010f54:	46c8      	mov	r8, r9
 8010f56:	442c      	add	r4, r5
 8010f58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f5c:	4601      	mov	r1, r0
 8010f5e:	3b30      	subs	r3, #48	@ 0x30
 8010f60:	220a      	movs	r2, #10
 8010f62:	4630      	mov	r0, r6
 8010f64:	f7ff ff8c 	bl	8010e80 <__multadd>
 8010f68:	45a0      	cmp	r8, r4
 8010f6a:	d1f5      	bne.n	8010f58 <__s2b+0x4c>
 8010f6c:	f1a5 0408 	sub.w	r4, r5, #8
 8010f70:	444c      	add	r4, r9
 8010f72:	1b2d      	subs	r5, r5, r4
 8010f74:	1963      	adds	r3, r4, r5
 8010f76:	42bb      	cmp	r3, r7
 8010f78:	db04      	blt.n	8010f84 <__s2b+0x78>
 8010f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f7e:	340a      	adds	r4, #10
 8010f80:	2509      	movs	r5, #9
 8010f82:	e7f6      	b.n	8010f72 <__s2b+0x66>
 8010f84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f88:	4601      	mov	r1, r0
 8010f8a:	3b30      	subs	r3, #48	@ 0x30
 8010f8c:	220a      	movs	r2, #10
 8010f8e:	4630      	mov	r0, r6
 8010f90:	f7ff ff76 	bl	8010e80 <__multadd>
 8010f94:	e7ee      	b.n	8010f74 <__s2b+0x68>
 8010f96:	bf00      	nop
 8010f98:	08014661 	.word	0x08014661
 8010f9c:	08014672 	.word	0x08014672

08010fa0 <__hi0bits>:
 8010fa0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	bf36      	itet	cc
 8010fa8:	0403      	lslcc	r3, r0, #16
 8010faa:	2000      	movcs	r0, #0
 8010fac:	2010      	movcc	r0, #16
 8010fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010fb2:	bf3c      	itt	cc
 8010fb4:	021b      	lslcc	r3, r3, #8
 8010fb6:	3008      	addcc	r0, #8
 8010fb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fbc:	bf3c      	itt	cc
 8010fbe:	011b      	lslcc	r3, r3, #4
 8010fc0:	3004      	addcc	r0, #4
 8010fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fc6:	bf3c      	itt	cc
 8010fc8:	009b      	lslcc	r3, r3, #2
 8010fca:	3002      	addcc	r0, #2
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	db05      	blt.n	8010fdc <__hi0bits+0x3c>
 8010fd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010fd4:	f100 0001 	add.w	r0, r0, #1
 8010fd8:	bf08      	it	eq
 8010fda:	2020      	moveq	r0, #32
 8010fdc:	4770      	bx	lr

08010fde <__lo0bits>:
 8010fde:	6803      	ldr	r3, [r0, #0]
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	f013 0007 	ands.w	r0, r3, #7
 8010fe6:	d00b      	beq.n	8011000 <__lo0bits+0x22>
 8010fe8:	07d9      	lsls	r1, r3, #31
 8010fea:	d421      	bmi.n	8011030 <__lo0bits+0x52>
 8010fec:	0798      	lsls	r0, r3, #30
 8010fee:	bf49      	itett	mi
 8010ff0:	085b      	lsrmi	r3, r3, #1
 8010ff2:	089b      	lsrpl	r3, r3, #2
 8010ff4:	2001      	movmi	r0, #1
 8010ff6:	6013      	strmi	r3, [r2, #0]
 8010ff8:	bf5c      	itt	pl
 8010ffa:	6013      	strpl	r3, [r2, #0]
 8010ffc:	2002      	movpl	r0, #2
 8010ffe:	4770      	bx	lr
 8011000:	b299      	uxth	r1, r3
 8011002:	b909      	cbnz	r1, 8011008 <__lo0bits+0x2a>
 8011004:	0c1b      	lsrs	r3, r3, #16
 8011006:	2010      	movs	r0, #16
 8011008:	b2d9      	uxtb	r1, r3
 801100a:	b909      	cbnz	r1, 8011010 <__lo0bits+0x32>
 801100c:	3008      	adds	r0, #8
 801100e:	0a1b      	lsrs	r3, r3, #8
 8011010:	0719      	lsls	r1, r3, #28
 8011012:	bf04      	itt	eq
 8011014:	091b      	lsreq	r3, r3, #4
 8011016:	3004      	addeq	r0, #4
 8011018:	0799      	lsls	r1, r3, #30
 801101a:	bf04      	itt	eq
 801101c:	089b      	lsreq	r3, r3, #2
 801101e:	3002      	addeq	r0, #2
 8011020:	07d9      	lsls	r1, r3, #31
 8011022:	d403      	bmi.n	801102c <__lo0bits+0x4e>
 8011024:	085b      	lsrs	r3, r3, #1
 8011026:	f100 0001 	add.w	r0, r0, #1
 801102a:	d003      	beq.n	8011034 <__lo0bits+0x56>
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	4770      	bx	lr
 8011030:	2000      	movs	r0, #0
 8011032:	4770      	bx	lr
 8011034:	2020      	movs	r0, #32
 8011036:	4770      	bx	lr

08011038 <__i2b>:
 8011038:	b510      	push	{r4, lr}
 801103a:	460c      	mov	r4, r1
 801103c:	2101      	movs	r1, #1
 801103e:	f7ff febd 	bl	8010dbc <_Balloc>
 8011042:	4602      	mov	r2, r0
 8011044:	b928      	cbnz	r0, 8011052 <__i2b+0x1a>
 8011046:	4b05      	ldr	r3, [pc, #20]	@ (801105c <__i2b+0x24>)
 8011048:	4805      	ldr	r0, [pc, #20]	@ (8011060 <__i2b+0x28>)
 801104a:	f240 1145 	movw	r1, #325	@ 0x145
 801104e:	f001 fc2b 	bl	80128a8 <__assert_func>
 8011052:	2301      	movs	r3, #1
 8011054:	6144      	str	r4, [r0, #20]
 8011056:	6103      	str	r3, [r0, #16]
 8011058:	bd10      	pop	{r4, pc}
 801105a:	bf00      	nop
 801105c:	08014661 	.word	0x08014661
 8011060:	08014672 	.word	0x08014672

08011064 <__multiply>:
 8011064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011068:	4617      	mov	r7, r2
 801106a:	690a      	ldr	r2, [r1, #16]
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	429a      	cmp	r2, r3
 8011070:	bfa8      	it	ge
 8011072:	463b      	movge	r3, r7
 8011074:	4689      	mov	r9, r1
 8011076:	bfa4      	itt	ge
 8011078:	460f      	movge	r7, r1
 801107a:	4699      	movge	r9, r3
 801107c:	693d      	ldr	r5, [r7, #16]
 801107e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	6879      	ldr	r1, [r7, #4]
 8011086:	eb05 060a 	add.w	r6, r5, sl
 801108a:	42b3      	cmp	r3, r6
 801108c:	b085      	sub	sp, #20
 801108e:	bfb8      	it	lt
 8011090:	3101      	addlt	r1, #1
 8011092:	f7ff fe93 	bl	8010dbc <_Balloc>
 8011096:	b930      	cbnz	r0, 80110a6 <__multiply+0x42>
 8011098:	4602      	mov	r2, r0
 801109a:	4b41      	ldr	r3, [pc, #260]	@ (80111a0 <__multiply+0x13c>)
 801109c:	4841      	ldr	r0, [pc, #260]	@ (80111a4 <__multiply+0x140>)
 801109e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80110a2:	f001 fc01 	bl	80128a8 <__assert_func>
 80110a6:	f100 0414 	add.w	r4, r0, #20
 80110aa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80110ae:	4623      	mov	r3, r4
 80110b0:	2200      	movs	r2, #0
 80110b2:	4573      	cmp	r3, lr
 80110b4:	d320      	bcc.n	80110f8 <__multiply+0x94>
 80110b6:	f107 0814 	add.w	r8, r7, #20
 80110ba:	f109 0114 	add.w	r1, r9, #20
 80110be:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80110c2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80110c6:	9302      	str	r3, [sp, #8]
 80110c8:	1beb      	subs	r3, r5, r7
 80110ca:	3b15      	subs	r3, #21
 80110cc:	f023 0303 	bic.w	r3, r3, #3
 80110d0:	3304      	adds	r3, #4
 80110d2:	3715      	adds	r7, #21
 80110d4:	42bd      	cmp	r5, r7
 80110d6:	bf38      	it	cc
 80110d8:	2304      	movcc	r3, #4
 80110da:	9301      	str	r3, [sp, #4]
 80110dc:	9b02      	ldr	r3, [sp, #8]
 80110de:	9103      	str	r1, [sp, #12]
 80110e0:	428b      	cmp	r3, r1
 80110e2:	d80c      	bhi.n	80110fe <__multiply+0x9a>
 80110e4:	2e00      	cmp	r6, #0
 80110e6:	dd03      	ble.n	80110f0 <__multiply+0x8c>
 80110e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d055      	beq.n	801119c <__multiply+0x138>
 80110f0:	6106      	str	r6, [r0, #16]
 80110f2:	b005      	add	sp, #20
 80110f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f8:	f843 2b04 	str.w	r2, [r3], #4
 80110fc:	e7d9      	b.n	80110b2 <__multiply+0x4e>
 80110fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8011102:	f1ba 0f00 	cmp.w	sl, #0
 8011106:	d01f      	beq.n	8011148 <__multiply+0xe4>
 8011108:	46c4      	mov	ip, r8
 801110a:	46a1      	mov	r9, r4
 801110c:	2700      	movs	r7, #0
 801110e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011112:	f8d9 3000 	ldr.w	r3, [r9]
 8011116:	fa1f fb82 	uxth.w	fp, r2
 801111a:	b29b      	uxth	r3, r3
 801111c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011120:	443b      	add	r3, r7
 8011122:	f8d9 7000 	ldr.w	r7, [r9]
 8011126:	0c12      	lsrs	r2, r2, #16
 8011128:	0c3f      	lsrs	r7, r7, #16
 801112a:	fb0a 7202 	mla	r2, sl, r2, r7
 801112e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011132:	b29b      	uxth	r3, r3
 8011134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011138:	4565      	cmp	r5, ip
 801113a:	f849 3b04 	str.w	r3, [r9], #4
 801113e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011142:	d8e4      	bhi.n	801110e <__multiply+0xaa>
 8011144:	9b01      	ldr	r3, [sp, #4]
 8011146:	50e7      	str	r7, [r4, r3]
 8011148:	9b03      	ldr	r3, [sp, #12]
 801114a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801114e:	3104      	adds	r1, #4
 8011150:	f1b9 0f00 	cmp.w	r9, #0
 8011154:	d020      	beq.n	8011198 <__multiply+0x134>
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	4647      	mov	r7, r8
 801115a:	46a4      	mov	ip, r4
 801115c:	f04f 0a00 	mov.w	sl, #0
 8011160:	f8b7 b000 	ldrh.w	fp, [r7]
 8011164:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011168:	fb09 220b 	mla	r2, r9, fp, r2
 801116c:	4452      	add	r2, sl
 801116e:	b29b      	uxth	r3, r3
 8011170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011174:	f84c 3b04 	str.w	r3, [ip], #4
 8011178:	f857 3b04 	ldr.w	r3, [r7], #4
 801117c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011180:	f8bc 3000 	ldrh.w	r3, [ip]
 8011184:	fb09 330a 	mla	r3, r9, sl, r3
 8011188:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801118c:	42bd      	cmp	r5, r7
 801118e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011192:	d8e5      	bhi.n	8011160 <__multiply+0xfc>
 8011194:	9a01      	ldr	r2, [sp, #4]
 8011196:	50a3      	str	r3, [r4, r2]
 8011198:	3404      	adds	r4, #4
 801119a:	e79f      	b.n	80110dc <__multiply+0x78>
 801119c:	3e01      	subs	r6, #1
 801119e:	e7a1      	b.n	80110e4 <__multiply+0x80>
 80111a0:	08014661 	.word	0x08014661
 80111a4:	08014672 	.word	0x08014672

080111a8 <__pow5mult>:
 80111a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111ac:	4615      	mov	r5, r2
 80111ae:	f012 0203 	ands.w	r2, r2, #3
 80111b2:	4607      	mov	r7, r0
 80111b4:	460e      	mov	r6, r1
 80111b6:	d007      	beq.n	80111c8 <__pow5mult+0x20>
 80111b8:	4c25      	ldr	r4, [pc, #148]	@ (8011250 <__pow5mult+0xa8>)
 80111ba:	3a01      	subs	r2, #1
 80111bc:	2300      	movs	r3, #0
 80111be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111c2:	f7ff fe5d 	bl	8010e80 <__multadd>
 80111c6:	4606      	mov	r6, r0
 80111c8:	10ad      	asrs	r5, r5, #2
 80111ca:	d03d      	beq.n	8011248 <__pow5mult+0xa0>
 80111cc:	69fc      	ldr	r4, [r7, #28]
 80111ce:	b97c      	cbnz	r4, 80111f0 <__pow5mult+0x48>
 80111d0:	2010      	movs	r0, #16
 80111d2:	f7fd fe79 	bl	800eec8 <malloc>
 80111d6:	4602      	mov	r2, r0
 80111d8:	61f8      	str	r0, [r7, #28]
 80111da:	b928      	cbnz	r0, 80111e8 <__pow5mult+0x40>
 80111dc:	4b1d      	ldr	r3, [pc, #116]	@ (8011254 <__pow5mult+0xac>)
 80111de:	481e      	ldr	r0, [pc, #120]	@ (8011258 <__pow5mult+0xb0>)
 80111e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80111e4:	f001 fb60 	bl	80128a8 <__assert_func>
 80111e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111ec:	6004      	str	r4, [r0, #0]
 80111ee:	60c4      	str	r4, [r0, #12]
 80111f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80111f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111f8:	b94c      	cbnz	r4, 801120e <__pow5mult+0x66>
 80111fa:	f240 2171 	movw	r1, #625	@ 0x271
 80111fe:	4638      	mov	r0, r7
 8011200:	f7ff ff1a 	bl	8011038 <__i2b>
 8011204:	2300      	movs	r3, #0
 8011206:	f8c8 0008 	str.w	r0, [r8, #8]
 801120a:	4604      	mov	r4, r0
 801120c:	6003      	str	r3, [r0, #0]
 801120e:	f04f 0900 	mov.w	r9, #0
 8011212:	07eb      	lsls	r3, r5, #31
 8011214:	d50a      	bpl.n	801122c <__pow5mult+0x84>
 8011216:	4631      	mov	r1, r6
 8011218:	4622      	mov	r2, r4
 801121a:	4638      	mov	r0, r7
 801121c:	f7ff ff22 	bl	8011064 <__multiply>
 8011220:	4631      	mov	r1, r6
 8011222:	4680      	mov	r8, r0
 8011224:	4638      	mov	r0, r7
 8011226:	f7ff fe09 	bl	8010e3c <_Bfree>
 801122a:	4646      	mov	r6, r8
 801122c:	106d      	asrs	r5, r5, #1
 801122e:	d00b      	beq.n	8011248 <__pow5mult+0xa0>
 8011230:	6820      	ldr	r0, [r4, #0]
 8011232:	b938      	cbnz	r0, 8011244 <__pow5mult+0x9c>
 8011234:	4622      	mov	r2, r4
 8011236:	4621      	mov	r1, r4
 8011238:	4638      	mov	r0, r7
 801123a:	f7ff ff13 	bl	8011064 <__multiply>
 801123e:	6020      	str	r0, [r4, #0]
 8011240:	f8c0 9000 	str.w	r9, [r0]
 8011244:	4604      	mov	r4, r0
 8011246:	e7e4      	b.n	8011212 <__pow5mult+0x6a>
 8011248:	4630      	mov	r0, r6
 801124a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801124e:	bf00      	nop
 8011250:	08014784 	.word	0x08014784
 8011254:	080145f2 	.word	0x080145f2
 8011258:	08014672 	.word	0x08014672

0801125c <__lshift>:
 801125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011260:	460c      	mov	r4, r1
 8011262:	6849      	ldr	r1, [r1, #4]
 8011264:	6923      	ldr	r3, [r4, #16]
 8011266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801126a:	68a3      	ldr	r3, [r4, #8]
 801126c:	4607      	mov	r7, r0
 801126e:	4691      	mov	r9, r2
 8011270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011274:	f108 0601 	add.w	r6, r8, #1
 8011278:	42b3      	cmp	r3, r6
 801127a:	db0b      	blt.n	8011294 <__lshift+0x38>
 801127c:	4638      	mov	r0, r7
 801127e:	f7ff fd9d 	bl	8010dbc <_Balloc>
 8011282:	4605      	mov	r5, r0
 8011284:	b948      	cbnz	r0, 801129a <__lshift+0x3e>
 8011286:	4602      	mov	r2, r0
 8011288:	4b28      	ldr	r3, [pc, #160]	@ (801132c <__lshift+0xd0>)
 801128a:	4829      	ldr	r0, [pc, #164]	@ (8011330 <__lshift+0xd4>)
 801128c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011290:	f001 fb0a 	bl	80128a8 <__assert_func>
 8011294:	3101      	adds	r1, #1
 8011296:	005b      	lsls	r3, r3, #1
 8011298:	e7ee      	b.n	8011278 <__lshift+0x1c>
 801129a:	2300      	movs	r3, #0
 801129c:	f100 0114 	add.w	r1, r0, #20
 80112a0:	f100 0210 	add.w	r2, r0, #16
 80112a4:	4618      	mov	r0, r3
 80112a6:	4553      	cmp	r3, sl
 80112a8:	db33      	blt.n	8011312 <__lshift+0xb6>
 80112aa:	6920      	ldr	r0, [r4, #16]
 80112ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112b0:	f104 0314 	add.w	r3, r4, #20
 80112b4:	f019 091f 	ands.w	r9, r9, #31
 80112b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112c0:	d02b      	beq.n	801131a <__lshift+0xbe>
 80112c2:	f1c9 0e20 	rsb	lr, r9, #32
 80112c6:	468a      	mov	sl, r1
 80112c8:	2200      	movs	r2, #0
 80112ca:	6818      	ldr	r0, [r3, #0]
 80112cc:	fa00 f009 	lsl.w	r0, r0, r9
 80112d0:	4310      	orrs	r0, r2
 80112d2:	f84a 0b04 	str.w	r0, [sl], #4
 80112d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80112da:	459c      	cmp	ip, r3
 80112dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80112e0:	d8f3      	bhi.n	80112ca <__lshift+0x6e>
 80112e2:	ebac 0304 	sub.w	r3, ip, r4
 80112e6:	3b15      	subs	r3, #21
 80112e8:	f023 0303 	bic.w	r3, r3, #3
 80112ec:	3304      	adds	r3, #4
 80112ee:	f104 0015 	add.w	r0, r4, #21
 80112f2:	4560      	cmp	r0, ip
 80112f4:	bf88      	it	hi
 80112f6:	2304      	movhi	r3, #4
 80112f8:	50ca      	str	r2, [r1, r3]
 80112fa:	b10a      	cbz	r2, 8011300 <__lshift+0xa4>
 80112fc:	f108 0602 	add.w	r6, r8, #2
 8011300:	3e01      	subs	r6, #1
 8011302:	4638      	mov	r0, r7
 8011304:	612e      	str	r6, [r5, #16]
 8011306:	4621      	mov	r1, r4
 8011308:	f7ff fd98 	bl	8010e3c <_Bfree>
 801130c:	4628      	mov	r0, r5
 801130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011312:	f842 0f04 	str.w	r0, [r2, #4]!
 8011316:	3301      	adds	r3, #1
 8011318:	e7c5      	b.n	80112a6 <__lshift+0x4a>
 801131a:	3904      	subs	r1, #4
 801131c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011320:	f841 2f04 	str.w	r2, [r1, #4]!
 8011324:	459c      	cmp	ip, r3
 8011326:	d8f9      	bhi.n	801131c <__lshift+0xc0>
 8011328:	e7ea      	b.n	8011300 <__lshift+0xa4>
 801132a:	bf00      	nop
 801132c:	08014661 	.word	0x08014661
 8011330:	08014672 	.word	0x08014672

08011334 <__mcmp>:
 8011334:	690a      	ldr	r2, [r1, #16]
 8011336:	4603      	mov	r3, r0
 8011338:	6900      	ldr	r0, [r0, #16]
 801133a:	1a80      	subs	r0, r0, r2
 801133c:	b530      	push	{r4, r5, lr}
 801133e:	d10e      	bne.n	801135e <__mcmp+0x2a>
 8011340:	3314      	adds	r3, #20
 8011342:	3114      	adds	r1, #20
 8011344:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011348:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801134c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011354:	4295      	cmp	r5, r2
 8011356:	d003      	beq.n	8011360 <__mcmp+0x2c>
 8011358:	d205      	bcs.n	8011366 <__mcmp+0x32>
 801135a:	f04f 30ff 	mov.w	r0, #4294967295
 801135e:	bd30      	pop	{r4, r5, pc}
 8011360:	42a3      	cmp	r3, r4
 8011362:	d3f3      	bcc.n	801134c <__mcmp+0x18>
 8011364:	e7fb      	b.n	801135e <__mcmp+0x2a>
 8011366:	2001      	movs	r0, #1
 8011368:	e7f9      	b.n	801135e <__mcmp+0x2a>
	...

0801136c <__mdiff>:
 801136c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011370:	4689      	mov	r9, r1
 8011372:	4606      	mov	r6, r0
 8011374:	4611      	mov	r1, r2
 8011376:	4648      	mov	r0, r9
 8011378:	4614      	mov	r4, r2
 801137a:	f7ff ffdb 	bl	8011334 <__mcmp>
 801137e:	1e05      	subs	r5, r0, #0
 8011380:	d112      	bne.n	80113a8 <__mdiff+0x3c>
 8011382:	4629      	mov	r1, r5
 8011384:	4630      	mov	r0, r6
 8011386:	f7ff fd19 	bl	8010dbc <_Balloc>
 801138a:	4602      	mov	r2, r0
 801138c:	b928      	cbnz	r0, 801139a <__mdiff+0x2e>
 801138e:	4b3f      	ldr	r3, [pc, #252]	@ (801148c <__mdiff+0x120>)
 8011390:	f240 2137 	movw	r1, #567	@ 0x237
 8011394:	483e      	ldr	r0, [pc, #248]	@ (8011490 <__mdiff+0x124>)
 8011396:	f001 fa87 	bl	80128a8 <__assert_func>
 801139a:	2301      	movs	r3, #1
 801139c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113a0:	4610      	mov	r0, r2
 80113a2:	b003      	add	sp, #12
 80113a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a8:	bfbc      	itt	lt
 80113aa:	464b      	movlt	r3, r9
 80113ac:	46a1      	movlt	r9, r4
 80113ae:	4630      	mov	r0, r6
 80113b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113b4:	bfba      	itte	lt
 80113b6:	461c      	movlt	r4, r3
 80113b8:	2501      	movlt	r5, #1
 80113ba:	2500      	movge	r5, #0
 80113bc:	f7ff fcfe 	bl	8010dbc <_Balloc>
 80113c0:	4602      	mov	r2, r0
 80113c2:	b918      	cbnz	r0, 80113cc <__mdiff+0x60>
 80113c4:	4b31      	ldr	r3, [pc, #196]	@ (801148c <__mdiff+0x120>)
 80113c6:	f240 2145 	movw	r1, #581	@ 0x245
 80113ca:	e7e3      	b.n	8011394 <__mdiff+0x28>
 80113cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80113d0:	6926      	ldr	r6, [r4, #16]
 80113d2:	60c5      	str	r5, [r0, #12]
 80113d4:	f109 0310 	add.w	r3, r9, #16
 80113d8:	f109 0514 	add.w	r5, r9, #20
 80113dc:	f104 0e14 	add.w	lr, r4, #20
 80113e0:	f100 0b14 	add.w	fp, r0, #20
 80113e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80113e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80113ec:	9301      	str	r3, [sp, #4]
 80113ee:	46d9      	mov	r9, fp
 80113f0:	f04f 0c00 	mov.w	ip, #0
 80113f4:	9b01      	ldr	r3, [sp, #4]
 80113f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80113fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80113fe:	9301      	str	r3, [sp, #4]
 8011400:	fa1f f38a 	uxth.w	r3, sl
 8011404:	4619      	mov	r1, r3
 8011406:	b283      	uxth	r3, r0
 8011408:	1acb      	subs	r3, r1, r3
 801140a:	0c00      	lsrs	r0, r0, #16
 801140c:	4463      	add	r3, ip
 801140e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011412:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011416:	b29b      	uxth	r3, r3
 8011418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801141c:	4576      	cmp	r6, lr
 801141e:	f849 3b04 	str.w	r3, [r9], #4
 8011422:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011426:	d8e5      	bhi.n	80113f4 <__mdiff+0x88>
 8011428:	1b33      	subs	r3, r6, r4
 801142a:	3b15      	subs	r3, #21
 801142c:	f023 0303 	bic.w	r3, r3, #3
 8011430:	3415      	adds	r4, #21
 8011432:	3304      	adds	r3, #4
 8011434:	42a6      	cmp	r6, r4
 8011436:	bf38      	it	cc
 8011438:	2304      	movcc	r3, #4
 801143a:	441d      	add	r5, r3
 801143c:	445b      	add	r3, fp
 801143e:	461e      	mov	r6, r3
 8011440:	462c      	mov	r4, r5
 8011442:	4544      	cmp	r4, r8
 8011444:	d30e      	bcc.n	8011464 <__mdiff+0xf8>
 8011446:	f108 0103 	add.w	r1, r8, #3
 801144a:	1b49      	subs	r1, r1, r5
 801144c:	f021 0103 	bic.w	r1, r1, #3
 8011450:	3d03      	subs	r5, #3
 8011452:	45a8      	cmp	r8, r5
 8011454:	bf38      	it	cc
 8011456:	2100      	movcc	r1, #0
 8011458:	440b      	add	r3, r1
 801145a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801145e:	b191      	cbz	r1, 8011486 <__mdiff+0x11a>
 8011460:	6117      	str	r7, [r2, #16]
 8011462:	e79d      	b.n	80113a0 <__mdiff+0x34>
 8011464:	f854 1b04 	ldr.w	r1, [r4], #4
 8011468:	46e6      	mov	lr, ip
 801146a:	0c08      	lsrs	r0, r1, #16
 801146c:	fa1c fc81 	uxtah	ip, ip, r1
 8011470:	4471      	add	r1, lr
 8011472:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011476:	b289      	uxth	r1, r1
 8011478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801147c:	f846 1b04 	str.w	r1, [r6], #4
 8011480:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011484:	e7dd      	b.n	8011442 <__mdiff+0xd6>
 8011486:	3f01      	subs	r7, #1
 8011488:	e7e7      	b.n	801145a <__mdiff+0xee>
 801148a:	bf00      	nop
 801148c:	08014661 	.word	0x08014661
 8011490:	08014672 	.word	0x08014672

08011494 <__ulp>:
 8011494:	b082      	sub	sp, #8
 8011496:	ed8d 0b00 	vstr	d0, [sp]
 801149a:	9a01      	ldr	r2, [sp, #4]
 801149c:	4b0f      	ldr	r3, [pc, #60]	@ (80114dc <__ulp+0x48>)
 801149e:	4013      	ands	r3, r2
 80114a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	dc08      	bgt.n	80114ba <__ulp+0x26>
 80114a8:	425b      	negs	r3, r3
 80114aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80114ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114b2:	da04      	bge.n	80114be <__ulp+0x2a>
 80114b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80114b8:	4113      	asrs	r3, r2
 80114ba:	2200      	movs	r2, #0
 80114bc:	e008      	b.n	80114d0 <__ulp+0x3c>
 80114be:	f1a2 0314 	sub.w	r3, r2, #20
 80114c2:	2b1e      	cmp	r3, #30
 80114c4:	bfda      	itte	le
 80114c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80114ca:	40da      	lsrle	r2, r3
 80114cc:	2201      	movgt	r2, #1
 80114ce:	2300      	movs	r3, #0
 80114d0:	4619      	mov	r1, r3
 80114d2:	4610      	mov	r0, r2
 80114d4:	ec41 0b10 	vmov	d0, r0, r1
 80114d8:	b002      	add	sp, #8
 80114da:	4770      	bx	lr
 80114dc:	7ff00000 	.word	0x7ff00000

080114e0 <__b2d>:
 80114e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e4:	6906      	ldr	r6, [r0, #16]
 80114e6:	f100 0814 	add.w	r8, r0, #20
 80114ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80114ee:	1f37      	subs	r7, r6, #4
 80114f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80114f4:	4610      	mov	r0, r2
 80114f6:	f7ff fd53 	bl	8010fa0 <__hi0bits>
 80114fa:	f1c0 0320 	rsb	r3, r0, #32
 80114fe:	280a      	cmp	r0, #10
 8011500:	600b      	str	r3, [r1, #0]
 8011502:	491b      	ldr	r1, [pc, #108]	@ (8011570 <__b2d+0x90>)
 8011504:	dc15      	bgt.n	8011532 <__b2d+0x52>
 8011506:	f1c0 0c0b 	rsb	ip, r0, #11
 801150a:	fa22 f30c 	lsr.w	r3, r2, ip
 801150e:	45b8      	cmp	r8, r7
 8011510:	ea43 0501 	orr.w	r5, r3, r1
 8011514:	bf34      	ite	cc
 8011516:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801151a:	2300      	movcs	r3, #0
 801151c:	3015      	adds	r0, #21
 801151e:	fa02 f000 	lsl.w	r0, r2, r0
 8011522:	fa23 f30c 	lsr.w	r3, r3, ip
 8011526:	4303      	orrs	r3, r0
 8011528:	461c      	mov	r4, r3
 801152a:	ec45 4b10 	vmov	d0, r4, r5
 801152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011532:	45b8      	cmp	r8, r7
 8011534:	bf3a      	itte	cc
 8011536:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801153a:	f1a6 0708 	subcc.w	r7, r6, #8
 801153e:	2300      	movcs	r3, #0
 8011540:	380b      	subs	r0, #11
 8011542:	d012      	beq.n	801156a <__b2d+0x8a>
 8011544:	f1c0 0120 	rsb	r1, r0, #32
 8011548:	fa23 f401 	lsr.w	r4, r3, r1
 801154c:	4082      	lsls	r2, r0
 801154e:	4322      	orrs	r2, r4
 8011550:	4547      	cmp	r7, r8
 8011552:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011556:	bf8c      	ite	hi
 8011558:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801155c:	2200      	movls	r2, #0
 801155e:	4083      	lsls	r3, r0
 8011560:	40ca      	lsrs	r2, r1
 8011562:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011566:	4313      	orrs	r3, r2
 8011568:	e7de      	b.n	8011528 <__b2d+0x48>
 801156a:	ea42 0501 	orr.w	r5, r2, r1
 801156e:	e7db      	b.n	8011528 <__b2d+0x48>
 8011570:	3ff00000 	.word	0x3ff00000

08011574 <__d2b>:
 8011574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011578:	460f      	mov	r7, r1
 801157a:	2101      	movs	r1, #1
 801157c:	ec59 8b10 	vmov	r8, r9, d0
 8011580:	4616      	mov	r6, r2
 8011582:	f7ff fc1b 	bl	8010dbc <_Balloc>
 8011586:	4604      	mov	r4, r0
 8011588:	b930      	cbnz	r0, 8011598 <__d2b+0x24>
 801158a:	4602      	mov	r2, r0
 801158c:	4b23      	ldr	r3, [pc, #140]	@ (801161c <__d2b+0xa8>)
 801158e:	4824      	ldr	r0, [pc, #144]	@ (8011620 <__d2b+0xac>)
 8011590:	f240 310f 	movw	r1, #783	@ 0x30f
 8011594:	f001 f988 	bl	80128a8 <__assert_func>
 8011598:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801159c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115a0:	b10d      	cbz	r5, 80115a6 <__d2b+0x32>
 80115a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80115a6:	9301      	str	r3, [sp, #4]
 80115a8:	f1b8 0300 	subs.w	r3, r8, #0
 80115ac:	d023      	beq.n	80115f6 <__d2b+0x82>
 80115ae:	4668      	mov	r0, sp
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	f7ff fd14 	bl	8010fde <__lo0bits>
 80115b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115ba:	b1d0      	cbz	r0, 80115f2 <__d2b+0x7e>
 80115bc:	f1c0 0320 	rsb	r3, r0, #32
 80115c0:	fa02 f303 	lsl.w	r3, r2, r3
 80115c4:	430b      	orrs	r3, r1
 80115c6:	40c2      	lsrs	r2, r0
 80115c8:	6163      	str	r3, [r4, #20]
 80115ca:	9201      	str	r2, [sp, #4]
 80115cc:	9b01      	ldr	r3, [sp, #4]
 80115ce:	61a3      	str	r3, [r4, #24]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	bf0c      	ite	eq
 80115d4:	2201      	moveq	r2, #1
 80115d6:	2202      	movne	r2, #2
 80115d8:	6122      	str	r2, [r4, #16]
 80115da:	b1a5      	cbz	r5, 8011606 <__d2b+0x92>
 80115dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80115e0:	4405      	add	r5, r0
 80115e2:	603d      	str	r5, [r7, #0]
 80115e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80115e8:	6030      	str	r0, [r6, #0]
 80115ea:	4620      	mov	r0, r4
 80115ec:	b003      	add	sp, #12
 80115ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115f2:	6161      	str	r1, [r4, #20]
 80115f4:	e7ea      	b.n	80115cc <__d2b+0x58>
 80115f6:	a801      	add	r0, sp, #4
 80115f8:	f7ff fcf1 	bl	8010fde <__lo0bits>
 80115fc:	9b01      	ldr	r3, [sp, #4]
 80115fe:	6163      	str	r3, [r4, #20]
 8011600:	3020      	adds	r0, #32
 8011602:	2201      	movs	r2, #1
 8011604:	e7e8      	b.n	80115d8 <__d2b+0x64>
 8011606:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801160a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801160e:	6038      	str	r0, [r7, #0]
 8011610:	6918      	ldr	r0, [r3, #16]
 8011612:	f7ff fcc5 	bl	8010fa0 <__hi0bits>
 8011616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801161a:	e7e5      	b.n	80115e8 <__d2b+0x74>
 801161c:	08014661 	.word	0x08014661
 8011620:	08014672 	.word	0x08014672

08011624 <__ratio>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b085      	sub	sp, #20
 801162a:	e9cd 1000 	strd	r1, r0, [sp]
 801162e:	a902      	add	r1, sp, #8
 8011630:	f7ff ff56 	bl	80114e0 <__b2d>
 8011634:	9800      	ldr	r0, [sp, #0]
 8011636:	a903      	add	r1, sp, #12
 8011638:	ec55 4b10 	vmov	r4, r5, d0
 801163c:	f7ff ff50 	bl	80114e0 <__b2d>
 8011640:	9b01      	ldr	r3, [sp, #4]
 8011642:	6919      	ldr	r1, [r3, #16]
 8011644:	9b00      	ldr	r3, [sp, #0]
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	1ac9      	subs	r1, r1, r3
 801164a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801164e:	1a9b      	subs	r3, r3, r2
 8011650:	ec5b ab10 	vmov	sl, fp, d0
 8011654:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011658:	2b00      	cmp	r3, #0
 801165a:	bfce      	itee	gt
 801165c:	462a      	movgt	r2, r5
 801165e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011662:	465a      	movle	r2, fp
 8011664:	462f      	mov	r7, r5
 8011666:	46d9      	mov	r9, fp
 8011668:	bfcc      	ite	gt
 801166a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801166e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011672:	464b      	mov	r3, r9
 8011674:	4652      	mov	r2, sl
 8011676:	4620      	mov	r0, r4
 8011678:	4639      	mov	r1, r7
 801167a:	f7ef f8ef 	bl	800085c <__aeabi_ddiv>
 801167e:	ec41 0b10 	vmov	d0, r0, r1
 8011682:	b005      	add	sp, #20
 8011684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011688 <__copybits>:
 8011688:	3901      	subs	r1, #1
 801168a:	b570      	push	{r4, r5, r6, lr}
 801168c:	1149      	asrs	r1, r1, #5
 801168e:	6914      	ldr	r4, [r2, #16]
 8011690:	3101      	adds	r1, #1
 8011692:	f102 0314 	add.w	r3, r2, #20
 8011696:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801169a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801169e:	1f05      	subs	r5, r0, #4
 80116a0:	42a3      	cmp	r3, r4
 80116a2:	d30c      	bcc.n	80116be <__copybits+0x36>
 80116a4:	1aa3      	subs	r3, r4, r2
 80116a6:	3b11      	subs	r3, #17
 80116a8:	f023 0303 	bic.w	r3, r3, #3
 80116ac:	3211      	adds	r2, #17
 80116ae:	42a2      	cmp	r2, r4
 80116b0:	bf88      	it	hi
 80116b2:	2300      	movhi	r3, #0
 80116b4:	4418      	add	r0, r3
 80116b6:	2300      	movs	r3, #0
 80116b8:	4288      	cmp	r0, r1
 80116ba:	d305      	bcc.n	80116c8 <__copybits+0x40>
 80116bc:	bd70      	pop	{r4, r5, r6, pc}
 80116be:	f853 6b04 	ldr.w	r6, [r3], #4
 80116c2:	f845 6f04 	str.w	r6, [r5, #4]!
 80116c6:	e7eb      	b.n	80116a0 <__copybits+0x18>
 80116c8:	f840 3b04 	str.w	r3, [r0], #4
 80116cc:	e7f4      	b.n	80116b8 <__copybits+0x30>

080116ce <__any_on>:
 80116ce:	f100 0214 	add.w	r2, r0, #20
 80116d2:	6900      	ldr	r0, [r0, #16]
 80116d4:	114b      	asrs	r3, r1, #5
 80116d6:	4298      	cmp	r0, r3
 80116d8:	b510      	push	{r4, lr}
 80116da:	db11      	blt.n	8011700 <__any_on+0x32>
 80116dc:	dd0a      	ble.n	80116f4 <__any_on+0x26>
 80116de:	f011 011f 	ands.w	r1, r1, #31
 80116e2:	d007      	beq.n	80116f4 <__any_on+0x26>
 80116e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116e8:	fa24 f001 	lsr.w	r0, r4, r1
 80116ec:	fa00 f101 	lsl.w	r1, r0, r1
 80116f0:	428c      	cmp	r4, r1
 80116f2:	d10b      	bne.n	801170c <__any_on+0x3e>
 80116f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d803      	bhi.n	8011704 <__any_on+0x36>
 80116fc:	2000      	movs	r0, #0
 80116fe:	bd10      	pop	{r4, pc}
 8011700:	4603      	mov	r3, r0
 8011702:	e7f7      	b.n	80116f4 <__any_on+0x26>
 8011704:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011708:	2900      	cmp	r1, #0
 801170a:	d0f5      	beq.n	80116f8 <__any_on+0x2a>
 801170c:	2001      	movs	r0, #1
 801170e:	e7f6      	b.n	80116fe <__any_on+0x30>

08011710 <sulp>:
 8011710:	b570      	push	{r4, r5, r6, lr}
 8011712:	4604      	mov	r4, r0
 8011714:	460d      	mov	r5, r1
 8011716:	ec45 4b10 	vmov	d0, r4, r5
 801171a:	4616      	mov	r6, r2
 801171c:	f7ff feba 	bl	8011494 <__ulp>
 8011720:	ec51 0b10 	vmov	r0, r1, d0
 8011724:	b17e      	cbz	r6, 8011746 <sulp+0x36>
 8011726:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801172a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801172e:	2b00      	cmp	r3, #0
 8011730:	dd09      	ble.n	8011746 <sulp+0x36>
 8011732:	051b      	lsls	r3, r3, #20
 8011734:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011738:	2400      	movs	r4, #0
 801173a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801173e:	4622      	mov	r2, r4
 8011740:	462b      	mov	r3, r5
 8011742:	f7ee ff61 	bl	8000608 <__aeabi_dmul>
 8011746:	ec41 0b10 	vmov	d0, r0, r1
 801174a:	bd70      	pop	{r4, r5, r6, pc}
 801174c:	0000      	movs	r0, r0
	...

08011750 <_strtod_l>:
 8011750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011754:	b09f      	sub	sp, #124	@ 0x7c
 8011756:	460c      	mov	r4, r1
 8011758:	9217      	str	r2, [sp, #92]	@ 0x5c
 801175a:	2200      	movs	r2, #0
 801175c:	921a      	str	r2, [sp, #104]	@ 0x68
 801175e:	9005      	str	r0, [sp, #20]
 8011760:	f04f 0a00 	mov.w	sl, #0
 8011764:	f04f 0b00 	mov.w	fp, #0
 8011768:	460a      	mov	r2, r1
 801176a:	9219      	str	r2, [sp, #100]	@ 0x64
 801176c:	7811      	ldrb	r1, [r2, #0]
 801176e:	292b      	cmp	r1, #43	@ 0x2b
 8011770:	d04a      	beq.n	8011808 <_strtod_l+0xb8>
 8011772:	d838      	bhi.n	80117e6 <_strtod_l+0x96>
 8011774:	290d      	cmp	r1, #13
 8011776:	d832      	bhi.n	80117de <_strtod_l+0x8e>
 8011778:	2908      	cmp	r1, #8
 801177a:	d832      	bhi.n	80117e2 <_strtod_l+0x92>
 801177c:	2900      	cmp	r1, #0
 801177e:	d03b      	beq.n	80117f8 <_strtod_l+0xa8>
 8011780:	2200      	movs	r2, #0
 8011782:	920e      	str	r2, [sp, #56]	@ 0x38
 8011784:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011786:	782a      	ldrb	r2, [r5, #0]
 8011788:	2a30      	cmp	r2, #48	@ 0x30
 801178a:	f040 80b2 	bne.w	80118f2 <_strtod_l+0x1a2>
 801178e:	786a      	ldrb	r2, [r5, #1]
 8011790:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011794:	2a58      	cmp	r2, #88	@ 0x58
 8011796:	d16e      	bne.n	8011876 <_strtod_l+0x126>
 8011798:	9302      	str	r3, [sp, #8]
 801179a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801179c:	9301      	str	r3, [sp, #4]
 801179e:	ab1a      	add	r3, sp, #104	@ 0x68
 80117a0:	9300      	str	r3, [sp, #0]
 80117a2:	4a8f      	ldr	r2, [pc, #572]	@ (80119e0 <_strtod_l+0x290>)
 80117a4:	9805      	ldr	r0, [sp, #20]
 80117a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80117a8:	a919      	add	r1, sp, #100	@ 0x64
 80117aa:	f001 f917 	bl	80129dc <__gethex>
 80117ae:	f010 060f 	ands.w	r6, r0, #15
 80117b2:	4604      	mov	r4, r0
 80117b4:	d005      	beq.n	80117c2 <_strtod_l+0x72>
 80117b6:	2e06      	cmp	r6, #6
 80117b8:	d128      	bne.n	801180c <_strtod_l+0xbc>
 80117ba:	3501      	adds	r5, #1
 80117bc:	2300      	movs	r3, #0
 80117be:	9519      	str	r5, [sp, #100]	@ 0x64
 80117c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80117c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f040 858e 	bne.w	80122e6 <_strtod_l+0xb96>
 80117ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117cc:	b1cb      	cbz	r3, 8011802 <_strtod_l+0xb2>
 80117ce:	4652      	mov	r2, sl
 80117d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80117d4:	ec43 2b10 	vmov	d0, r2, r3
 80117d8:	b01f      	add	sp, #124	@ 0x7c
 80117da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117de:	2920      	cmp	r1, #32
 80117e0:	d1ce      	bne.n	8011780 <_strtod_l+0x30>
 80117e2:	3201      	adds	r2, #1
 80117e4:	e7c1      	b.n	801176a <_strtod_l+0x1a>
 80117e6:	292d      	cmp	r1, #45	@ 0x2d
 80117e8:	d1ca      	bne.n	8011780 <_strtod_l+0x30>
 80117ea:	2101      	movs	r1, #1
 80117ec:	910e      	str	r1, [sp, #56]	@ 0x38
 80117ee:	1c51      	adds	r1, r2, #1
 80117f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80117f2:	7852      	ldrb	r2, [r2, #1]
 80117f4:	2a00      	cmp	r2, #0
 80117f6:	d1c5      	bne.n	8011784 <_strtod_l+0x34>
 80117f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80117fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f040 8570 	bne.w	80122e2 <_strtod_l+0xb92>
 8011802:	4652      	mov	r2, sl
 8011804:	465b      	mov	r3, fp
 8011806:	e7e5      	b.n	80117d4 <_strtod_l+0x84>
 8011808:	2100      	movs	r1, #0
 801180a:	e7ef      	b.n	80117ec <_strtod_l+0x9c>
 801180c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801180e:	b13a      	cbz	r2, 8011820 <_strtod_l+0xd0>
 8011810:	2135      	movs	r1, #53	@ 0x35
 8011812:	a81c      	add	r0, sp, #112	@ 0x70
 8011814:	f7ff ff38 	bl	8011688 <__copybits>
 8011818:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801181a:	9805      	ldr	r0, [sp, #20]
 801181c:	f7ff fb0e 	bl	8010e3c <_Bfree>
 8011820:	3e01      	subs	r6, #1
 8011822:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011824:	2e04      	cmp	r6, #4
 8011826:	d806      	bhi.n	8011836 <_strtod_l+0xe6>
 8011828:	e8df f006 	tbb	[pc, r6]
 801182c:	201d0314 	.word	0x201d0314
 8011830:	14          	.byte	0x14
 8011831:	00          	.byte	0x00
 8011832:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011836:	05e1      	lsls	r1, r4, #23
 8011838:	bf48      	it	mi
 801183a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801183e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011842:	0d1b      	lsrs	r3, r3, #20
 8011844:	051b      	lsls	r3, r3, #20
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1bb      	bne.n	80117c2 <_strtod_l+0x72>
 801184a:	f7fe fbe1 	bl	8010010 <__errno>
 801184e:	2322      	movs	r3, #34	@ 0x22
 8011850:	6003      	str	r3, [r0, #0]
 8011852:	e7b6      	b.n	80117c2 <_strtod_l+0x72>
 8011854:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011858:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801185c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011860:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011864:	e7e7      	b.n	8011836 <_strtod_l+0xe6>
 8011866:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80119e8 <_strtod_l+0x298>
 801186a:	e7e4      	b.n	8011836 <_strtod_l+0xe6>
 801186c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011870:	f04f 3aff 	mov.w	sl, #4294967295
 8011874:	e7df      	b.n	8011836 <_strtod_l+0xe6>
 8011876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	9219      	str	r2, [sp, #100]	@ 0x64
 801187c:	785b      	ldrb	r3, [r3, #1]
 801187e:	2b30      	cmp	r3, #48	@ 0x30
 8011880:	d0f9      	beq.n	8011876 <_strtod_l+0x126>
 8011882:	2b00      	cmp	r3, #0
 8011884:	d09d      	beq.n	80117c2 <_strtod_l+0x72>
 8011886:	2301      	movs	r3, #1
 8011888:	2700      	movs	r7, #0
 801188a:	9308      	str	r3, [sp, #32]
 801188c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801188e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011890:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011892:	46b9      	mov	r9, r7
 8011894:	220a      	movs	r2, #10
 8011896:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011898:	7805      	ldrb	r5, [r0, #0]
 801189a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801189e:	b2d9      	uxtb	r1, r3
 80118a0:	2909      	cmp	r1, #9
 80118a2:	d928      	bls.n	80118f6 <_strtod_l+0x1a6>
 80118a4:	494f      	ldr	r1, [pc, #316]	@ (80119e4 <_strtod_l+0x294>)
 80118a6:	2201      	movs	r2, #1
 80118a8:	f000 ffd6 	bl	8012858 <strncmp>
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d032      	beq.n	8011916 <_strtod_l+0x1c6>
 80118b0:	2000      	movs	r0, #0
 80118b2:	462a      	mov	r2, r5
 80118b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80118b6:	464d      	mov	r5, r9
 80118b8:	4603      	mov	r3, r0
 80118ba:	2a65      	cmp	r2, #101	@ 0x65
 80118bc:	d001      	beq.n	80118c2 <_strtod_l+0x172>
 80118be:	2a45      	cmp	r2, #69	@ 0x45
 80118c0:	d114      	bne.n	80118ec <_strtod_l+0x19c>
 80118c2:	b91d      	cbnz	r5, 80118cc <_strtod_l+0x17c>
 80118c4:	9a08      	ldr	r2, [sp, #32]
 80118c6:	4302      	orrs	r2, r0
 80118c8:	d096      	beq.n	80117f8 <_strtod_l+0xa8>
 80118ca:	2500      	movs	r5, #0
 80118cc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80118ce:	1c62      	adds	r2, r4, #1
 80118d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80118d2:	7862      	ldrb	r2, [r4, #1]
 80118d4:	2a2b      	cmp	r2, #43	@ 0x2b
 80118d6:	d07a      	beq.n	80119ce <_strtod_l+0x27e>
 80118d8:	2a2d      	cmp	r2, #45	@ 0x2d
 80118da:	d07e      	beq.n	80119da <_strtod_l+0x28a>
 80118dc:	f04f 0c00 	mov.w	ip, #0
 80118e0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80118e4:	2909      	cmp	r1, #9
 80118e6:	f240 8085 	bls.w	80119f4 <_strtod_l+0x2a4>
 80118ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80118ec:	f04f 0800 	mov.w	r8, #0
 80118f0:	e0a5      	b.n	8011a3e <_strtod_l+0x2ee>
 80118f2:	2300      	movs	r3, #0
 80118f4:	e7c8      	b.n	8011888 <_strtod_l+0x138>
 80118f6:	f1b9 0f08 	cmp.w	r9, #8
 80118fa:	bfd8      	it	le
 80118fc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80118fe:	f100 0001 	add.w	r0, r0, #1
 8011902:	bfda      	itte	le
 8011904:	fb02 3301 	mlale	r3, r2, r1, r3
 8011908:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801190a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801190e:	f109 0901 	add.w	r9, r9, #1
 8011912:	9019      	str	r0, [sp, #100]	@ 0x64
 8011914:	e7bf      	b.n	8011896 <_strtod_l+0x146>
 8011916:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011918:	1c5a      	adds	r2, r3, #1
 801191a:	9219      	str	r2, [sp, #100]	@ 0x64
 801191c:	785a      	ldrb	r2, [r3, #1]
 801191e:	f1b9 0f00 	cmp.w	r9, #0
 8011922:	d03b      	beq.n	801199c <_strtod_l+0x24c>
 8011924:	900a      	str	r0, [sp, #40]	@ 0x28
 8011926:	464d      	mov	r5, r9
 8011928:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801192c:	2b09      	cmp	r3, #9
 801192e:	d912      	bls.n	8011956 <_strtod_l+0x206>
 8011930:	2301      	movs	r3, #1
 8011932:	e7c2      	b.n	80118ba <_strtod_l+0x16a>
 8011934:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011936:	1c5a      	adds	r2, r3, #1
 8011938:	9219      	str	r2, [sp, #100]	@ 0x64
 801193a:	785a      	ldrb	r2, [r3, #1]
 801193c:	3001      	adds	r0, #1
 801193e:	2a30      	cmp	r2, #48	@ 0x30
 8011940:	d0f8      	beq.n	8011934 <_strtod_l+0x1e4>
 8011942:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011946:	2b08      	cmp	r3, #8
 8011948:	f200 84d2 	bhi.w	80122f0 <_strtod_l+0xba0>
 801194c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801194e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011950:	2000      	movs	r0, #0
 8011952:	930c      	str	r3, [sp, #48]	@ 0x30
 8011954:	4605      	mov	r5, r0
 8011956:	3a30      	subs	r2, #48	@ 0x30
 8011958:	f100 0301 	add.w	r3, r0, #1
 801195c:	d018      	beq.n	8011990 <_strtod_l+0x240>
 801195e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011960:	4419      	add	r1, r3
 8011962:	910a      	str	r1, [sp, #40]	@ 0x28
 8011964:	462e      	mov	r6, r5
 8011966:	f04f 0e0a 	mov.w	lr, #10
 801196a:	1c71      	adds	r1, r6, #1
 801196c:	eba1 0c05 	sub.w	ip, r1, r5
 8011970:	4563      	cmp	r3, ip
 8011972:	dc15      	bgt.n	80119a0 <_strtod_l+0x250>
 8011974:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011978:	182b      	adds	r3, r5, r0
 801197a:	2b08      	cmp	r3, #8
 801197c:	f105 0501 	add.w	r5, r5, #1
 8011980:	4405      	add	r5, r0
 8011982:	dc1a      	bgt.n	80119ba <_strtod_l+0x26a>
 8011984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011986:	230a      	movs	r3, #10
 8011988:	fb03 2301 	mla	r3, r3, r1, r2
 801198c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801198e:	2300      	movs	r3, #0
 8011990:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011992:	1c51      	adds	r1, r2, #1
 8011994:	9119      	str	r1, [sp, #100]	@ 0x64
 8011996:	7852      	ldrb	r2, [r2, #1]
 8011998:	4618      	mov	r0, r3
 801199a:	e7c5      	b.n	8011928 <_strtod_l+0x1d8>
 801199c:	4648      	mov	r0, r9
 801199e:	e7ce      	b.n	801193e <_strtod_l+0x1ee>
 80119a0:	2e08      	cmp	r6, #8
 80119a2:	dc05      	bgt.n	80119b0 <_strtod_l+0x260>
 80119a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80119a6:	fb0e f606 	mul.w	r6, lr, r6
 80119aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80119ac:	460e      	mov	r6, r1
 80119ae:	e7dc      	b.n	801196a <_strtod_l+0x21a>
 80119b0:	2910      	cmp	r1, #16
 80119b2:	bfd8      	it	le
 80119b4:	fb0e f707 	mulle.w	r7, lr, r7
 80119b8:	e7f8      	b.n	80119ac <_strtod_l+0x25c>
 80119ba:	2b0f      	cmp	r3, #15
 80119bc:	bfdc      	itt	le
 80119be:	230a      	movle	r3, #10
 80119c0:	fb03 2707 	mlale	r7, r3, r7, r2
 80119c4:	e7e3      	b.n	801198e <_strtod_l+0x23e>
 80119c6:	2300      	movs	r3, #0
 80119c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80119ca:	2301      	movs	r3, #1
 80119cc:	e77a      	b.n	80118c4 <_strtod_l+0x174>
 80119ce:	f04f 0c00 	mov.w	ip, #0
 80119d2:	1ca2      	adds	r2, r4, #2
 80119d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80119d6:	78a2      	ldrb	r2, [r4, #2]
 80119d8:	e782      	b.n	80118e0 <_strtod_l+0x190>
 80119da:	f04f 0c01 	mov.w	ip, #1
 80119de:	e7f8      	b.n	80119d2 <_strtod_l+0x282>
 80119e0:	08014894 	.word	0x08014894
 80119e4:	080146cb 	.word	0x080146cb
 80119e8:	7ff00000 	.word	0x7ff00000
 80119ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80119ee:	1c51      	adds	r1, r2, #1
 80119f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80119f2:	7852      	ldrb	r2, [r2, #1]
 80119f4:	2a30      	cmp	r2, #48	@ 0x30
 80119f6:	d0f9      	beq.n	80119ec <_strtod_l+0x29c>
 80119f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80119fc:	2908      	cmp	r1, #8
 80119fe:	f63f af75 	bhi.w	80118ec <_strtod_l+0x19c>
 8011a02:	3a30      	subs	r2, #48	@ 0x30
 8011a04:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011a08:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011a0a:	f04f 080a 	mov.w	r8, #10
 8011a0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011a10:	1c56      	adds	r6, r2, #1
 8011a12:	9619      	str	r6, [sp, #100]	@ 0x64
 8011a14:	7852      	ldrb	r2, [r2, #1]
 8011a16:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011a1a:	f1be 0f09 	cmp.w	lr, #9
 8011a1e:	d939      	bls.n	8011a94 <_strtod_l+0x344>
 8011a20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011a22:	1a76      	subs	r6, r6, r1
 8011a24:	2e08      	cmp	r6, #8
 8011a26:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011a2a:	dc03      	bgt.n	8011a34 <_strtod_l+0x2e4>
 8011a2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a2e:	4588      	cmp	r8, r1
 8011a30:	bfa8      	it	ge
 8011a32:	4688      	movge	r8, r1
 8011a34:	f1bc 0f00 	cmp.w	ip, #0
 8011a38:	d001      	beq.n	8011a3e <_strtod_l+0x2ee>
 8011a3a:	f1c8 0800 	rsb	r8, r8, #0
 8011a3e:	2d00      	cmp	r5, #0
 8011a40:	d14e      	bne.n	8011ae0 <_strtod_l+0x390>
 8011a42:	9908      	ldr	r1, [sp, #32]
 8011a44:	4308      	orrs	r0, r1
 8011a46:	f47f aebc 	bne.w	80117c2 <_strtod_l+0x72>
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f47f aed4 	bne.w	80117f8 <_strtod_l+0xa8>
 8011a50:	2a69      	cmp	r2, #105	@ 0x69
 8011a52:	d028      	beq.n	8011aa6 <_strtod_l+0x356>
 8011a54:	dc25      	bgt.n	8011aa2 <_strtod_l+0x352>
 8011a56:	2a49      	cmp	r2, #73	@ 0x49
 8011a58:	d025      	beq.n	8011aa6 <_strtod_l+0x356>
 8011a5a:	2a4e      	cmp	r2, #78	@ 0x4e
 8011a5c:	f47f aecc 	bne.w	80117f8 <_strtod_l+0xa8>
 8011a60:	499a      	ldr	r1, [pc, #616]	@ (8011ccc <_strtod_l+0x57c>)
 8011a62:	a819      	add	r0, sp, #100	@ 0x64
 8011a64:	f001 f9dc 	bl	8012e20 <__match>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	f43f aec5 	beq.w	80117f8 <_strtod_l+0xa8>
 8011a6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	2b28      	cmp	r3, #40	@ 0x28
 8011a74:	d12e      	bne.n	8011ad4 <_strtod_l+0x384>
 8011a76:	4996      	ldr	r1, [pc, #600]	@ (8011cd0 <_strtod_l+0x580>)
 8011a78:	aa1c      	add	r2, sp, #112	@ 0x70
 8011a7a:	a819      	add	r0, sp, #100	@ 0x64
 8011a7c:	f001 f9e4 	bl	8012e48 <__hexnan>
 8011a80:	2805      	cmp	r0, #5
 8011a82:	d127      	bne.n	8011ad4 <_strtod_l+0x384>
 8011a84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011a86:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011a8a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011a8e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011a92:	e696      	b.n	80117c2 <_strtod_l+0x72>
 8011a94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a96:	fb08 2101 	mla	r1, r8, r1, r2
 8011a9a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011aa0:	e7b5      	b.n	8011a0e <_strtod_l+0x2be>
 8011aa2:	2a6e      	cmp	r2, #110	@ 0x6e
 8011aa4:	e7da      	b.n	8011a5c <_strtod_l+0x30c>
 8011aa6:	498b      	ldr	r1, [pc, #556]	@ (8011cd4 <_strtod_l+0x584>)
 8011aa8:	a819      	add	r0, sp, #100	@ 0x64
 8011aaa:	f001 f9b9 	bl	8012e20 <__match>
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	f43f aea2 	beq.w	80117f8 <_strtod_l+0xa8>
 8011ab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ab6:	4988      	ldr	r1, [pc, #544]	@ (8011cd8 <_strtod_l+0x588>)
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	a819      	add	r0, sp, #100	@ 0x64
 8011abc:	9319      	str	r3, [sp, #100]	@ 0x64
 8011abe:	f001 f9af 	bl	8012e20 <__match>
 8011ac2:	b910      	cbnz	r0, 8011aca <_strtod_l+0x37a>
 8011ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	9319      	str	r3, [sp, #100]	@ 0x64
 8011aca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011ce8 <_strtod_l+0x598>
 8011ace:	f04f 0a00 	mov.w	sl, #0
 8011ad2:	e676      	b.n	80117c2 <_strtod_l+0x72>
 8011ad4:	4881      	ldr	r0, [pc, #516]	@ (8011cdc <_strtod_l+0x58c>)
 8011ad6:	f000 fedf 	bl	8012898 <nan>
 8011ada:	ec5b ab10 	vmov	sl, fp, d0
 8011ade:	e670      	b.n	80117c2 <_strtod_l+0x72>
 8011ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ae2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011ae4:	eba8 0303 	sub.w	r3, r8, r3
 8011ae8:	f1b9 0f00 	cmp.w	r9, #0
 8011aec:	bf08      	it	eq
 8011aee:	46a9      	moveq	r9, r5
 8011af0:	2d10      	cmp	r5, #16
 8011af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011af4:	462c      	mov	r4, r5
 8011af6:	bfa8      	it	ge
 8011af8:	2410      	movge	r4, #16
 8011afa:	f7ee fd0b 	bl	8000514 <__aeabi_ui2d>
 8011afe:	2d09      	cmp	r5, #9
 8011b00:	4682      	mov	sl, r0
 8011b02:	468b      	mov	fp, r1
 8011b04:	dc13      	bgt.n	8011b2e <_strtod_l+0x3de>
 8011b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	f43f ae5a 	beq.w	80117c2 <_strtod_l+0x72>
 8011b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b10:	dd78      	ble.n	8011c04 <_strtod_l+0x4b4>
 8011b12:	2b16      	cmp	r3, #22
 8011b14:	dc5f      	bgt.n	8011bd6 <_strtod_l+0x486>
 8011b16:	4972      	ldr	r1, [pc, #456]	@ (8011ce0 <_strtod_l+0x590>)
 8011b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b20:	4652      	mov	r2, sl
 8011b22:	465b      	mov	r3, fp
 8011b24:	f7ee fd70 	bl	8000608 <__aeabi_dmul>
 8011b28:	4682      	mov	sl, r0
 8011b2a:	468b      	mov	fp, r1
 8011b2c:	e649      	b.n	80117c2 <_strtod_l+0x72>
 8011b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8011ce0 <_strtod_l+0x590>)
 8011b30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011b38:	f7ee fd66 	bl	8000608 <__aeabi_dmul>
 8011b3c:	4682      	mov	sl, r0
 8011b3e:	4638      	mov	r0, r7
 8011b40:	468b      	mov	fp, r1
 8011b42:	f7ee fce7 	bl	8000514 <__aeabi_ui2d>
 8011b46:	4602      	mov	r2, r0
 8011b48:	460b      	mov	r3, r1
 8011b4a:	4650      	mov	r0, sl
 8011b4c:	4659      	mov	r1, fp
 8011b4e:	f7ee fba5 	bl	800029c <__adddf3>
 8011b52:	2d0f      	cmp	r5, #15
 8011b54:	4682      	mov	sl, r0
 8011b56:	468b      	mov	fp, r1
 8011b58:	ddd5      	ble.n	8011b06 <_strtod_l+0x3b6>
 8011b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b5c:	1b2c      	subs	r4, r5, r4
 8011b5e:	441c      	add	r4, r3
 8011b60:	2c00      	cmp	r4, #0
 8011b62:	f340 8093 	ble.w	8011c8c <_strtod_l+0x53c>
 8011b66:	f014 030f 	ands.w	r3, r4, #15
 8011b6a:	d00a      	beq.n	8011b82 <_strtod_l+0x432>
 8011b6c:	495c      	ldr	r1, [pc, #368]	@ (8011ce0 <_strtod_l+0x590>)
 8011b6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b72:	4652      	mov	r2, sl
 8011b74:	465b      	mov	r3, fp
 8011b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b7a:	f7ee fd45 	bl	8000608 <__aeabi_dmul>
 8011b7e:	4682      	mov	sl, r0
 8011b80:	468b      	mov	fp, r1
 8011b82:	f034 040f 	bics.w	r4, r4, #15
 8011b86:	d073      	beq.n	8011c70 <_strtod_l+0x520>
 8011b88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011b8c:	dd49      	ble.n	8011c22 <_strtod_l+0x4d2>
 8011b8e:	2400      	movs	r4, #0
 8011b90:	46a0      	mov	r8, r4
 8011b92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011b94:	46a1      	mov	r9, r4
 8011b96:	9a05      	ldr	r2, [sp, #20]
 8011b98:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011ce8 <_strtod_l+0x598>
 8011b9c:	2322      	movs	r3, #34	@ 0x22
 8011b9e:	6013      	str	r3, [r2, #0]
 8011ba0:	f04f 0a00 	mov.w	sl, #0
 8011ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	f43f ae0b 	beq.w	80117c2 <_strtod_l+0x72>
 8011bac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011bae:	9805      	ldr	r0, [sp, #20]
 8011bb0:	f7ff f944 	bl	8010e3c <_Bfree>
 8011bb4:	9805      	ldr	r0, [sp, #20]
 8011bb6:	4649      	mov	r1, r9
 8011bb8:	f7ff f940 	bl	8010e3c <_Bfree>
 8011bbc:	9805      	ldr	r0, [sp, #20]
 8011bbe:	4641      	mov	r1, r8
 8011bc0:	f7ff f93c 	bl	8010e3c <_Bfree>
 8011bc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011bc6:	9805      	ldr	r0, [sp, #20]
 8011bc8:	f7ff f938 	bl	8010e3c <_Bfree>
 8011bcc:	9805      	ldr	r0, [sp, #20]
 8011bce:	4621      	mov	r1, r4
 8011bd0:	f7ff f934 	bl	8010e3c <_Bfree>
 8011bd4:	e5f5      	b.n	80117c2 <_strtod_l+0x72>
 8011bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	dbbc      	blt.n	8011b5a <_strtod_l+0x40a>
 8011be0:	4c3f      	ldr	r4, [pc, #252]	@ (8011ce0 <_strtod_l+0x590>)
 8011be2:	f1c5 050f 	rsb	r5, r5, #15
 8011be6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011bea:	4652      	mov	r2, sl
 8011bec:	465b      	mov	r3, fp
 8011bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bf2:	f7ee fd09 	bl	8000608 <__aeabi_dmul>
 8011bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bf8:	1b5d      	subs	r5, r3, r5
 8011bfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011c02:	e78f      	b.n	8011b24 <_strtod_l+0x3d4>
 8011c04:	3316      	adds	r3, #22
 8011c06:	dba8      	blt.n	8011b5a <_strtod_l+0x40a>
 8011c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c0a:	eba3 0808 	sub.w	r8, r3, r8
 8011c0e:	4b34      	ldr	r3, [pc, #208]	@ (8011ce0 <_strtod_l+0x590>)
 8011c10:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011c14:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011c18:	4650      	mov	r0, sl
 8011c1a:	4659      	mov	r1, fp
 8011c1c:	f7ee fe1e 	bl	800085c <__aeabi_ddiv>
 8011c20:	e782      	b.n	8011b28 <_strtod_l+0x3d8>
 8011c22:	2300      	movs	r3, #0
 8011c24:	4f2f      	ldr	r7, [pc, #188]	@ (8011ce4 <_strtod_l+0x594>)
 8011c26:	1124      	asrs	r4, r4, #4
 8011c28:	4650      	mov	r0, sl
 8011c2a:	4659      	mov	r1, fp
 8011c2c:	461e      	mov	r6, r3
 8011c2e:	2c01      	cmp	r4, #1
 8011c30:	dc21      	bgt.n	8011c76 <_strtod_l+0x526>
 8011c32:	b10b      	cbz	r3, 8011c38 <_strtod_l+0x4e8>
 8011c34:	4682      	mov	sl, r0
 8011c36:	468b      	mov	fp, r1
 8011c38:	492a      	ldr	r1, [pc, #168]	@ (8011ce4 <_strtod_l+0x594>)
 8011c3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011c3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011c42:	4652      	mov	r2, sl
 8011c44:	465b      	mov	r3, fp
 8011c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c4a:	f7ee fcdd 	bl	8000608 <__aeabi_dmul>
 8011c4e:	4b26      	ldr	r3, [pc, #152]	@ (8011ce8 <_strtod_l+0x598>)
 8011c50:	460a      	mov	r2, r1
 8011c52:	400b      	ands	r3, r1
 8011c54:	4925      	ldr	r1, [pc, #148]	@ (8011cec <_strtod_l+0x59c>)
 8011c56:	428b      	cmp	r3, r1
 8011c58:	4682      	mov	sl, r0
 8011c5a:	d898      	bhi.n	8011b8e <_strtod_l+0x43e>
 8011c5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011c60:	428b      	cmp	r3, r1
 8011c62:	bf86      	itte	hi
 8011c64:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011cf0 <_strtod_l+0x5a0>
 8011c68:	f04f 3aff 	movhi.w	sl, #4294967295
 8011c6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011c70:	2300      	movs	r3, #0
 8011c72:	9308      	str	r3, [sp, #32]
 8011c74:	e076      	b.n	8011d64 <_strtod_l+0x614>
 8011c76:	07e2      	lsls	r2, r4, #31
 8011c78:	d504      	bpl.n	8011c84 <_strtod_l+0x534>
 8011c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c7e:	f7ee fcc3 	bl	8000608 <__aeabi_dmul>
 8011c82:	2301      	movs	r3, #1
 8011c84:	3601      	adds	r6, #1
 8011c86:	1064      	asrs	r4, r4, #1
 8011c88:	3708      	adds	r7, #8
 8011c8a:	e7d0      	b.n	8011c2e <_strtod_l+0x4de>
 8011c8c:	d0f0      	beq.n	8011c70 <_strtod_l+0x520>
 8011c8e:	4264      	negs	r4, r4
 8011c90:	f014 020f 	ands.w	r2, r4, #15
 8011c94:	d00a      	beq.n	8011cac <_strtod_l+0x55c>
 8011c96:	4b12      	ldr	r3, [pc, #72]	@ (8011ce0 <_strtod_l+0x590>)
 8011c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c9c:	4650      	mov	r0, sl
 8011c9e:	4659      	mov	r1, fp
 8011ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca4:	f7ee fdda 	bl	800085c <__aeabi_ddiv>
 8011ca8:	4682      	mov	sl, r0
 8011caa:	468b      	mov	fp, r1
 8011cac:	1124      	asrs	r4, r4, #4
 8011cae:	d0df      	beq.n	8011c70 <_strtod_l+0x520>
 8011cb0:	2c1f      	cmp	r4, #31
 8011cb2:	dd1f      	ble.n	8011cf4 <_strtod_l+0x5a4>
 8011cb4:	2400      	movs	r4, #0
 8011cb6:	46a0      	mov	r8, r4
 8011cb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011cba:	46a1      	mov	r9, r4
 8011cbc:	9a05      	ldr	r2, [sp, #20]
 8011cbe:	2322      	movs	r3, #34	@ 0x22
 8011cc0:	f04f 0a00 	mov.w	sl, #0
 8011cc4:	f04f 0b00 	mov.w	fp, #0
 8011cc8:	6013      	str	r3, [r2, #0]
 8011cca:	e76b      	b.n	8011ba4 <_strtod_l+0x454>
 8011ccc:	080145b9 	.word	0x080145b9
 8011cd0:	08014880 	.word	0x08014880
 8011cd4:	080145b1 	.word	0x080145b1
 8011cd8:	080145e8 	.word	0x080145e8
 8011cdc:	08014721 	.word	0x08014721
 8011ce0:	080147b8 	.word	0x080147b8
 8011ce4:	08014790 	.word	0x08014790
 8011ce8:	7ff00000 	.word	0x7ff00000
 8011cec:	7ca00000 	.word	0x7ca00000
 8011cf0:	7fefffff 	.word	0x7fefffff
 8011cf4:	f014 0310 	ands.w	r3, r4, #16
 8011cf8:	bf18      	it	ne
 8011cfa:	236a      	movne	r3, #106	@ 0x6a
 8011cfc:	4ea9      	ldr	r6, [pc, #676]	@ (8011fa4 <_strtod_l+0x854>)
 8011cfe:	9308      	str	r3, [sp, #32]
 8011d00:	4650      	mov	r0, sl
 8011d02:	4659      	mov	r1, fp
 8011d04:	2300      	movs	r3, #0
 8011d06:	07e7      	lsls	r7, r4, #31
 8011d08:	d504      	bpl.n	8011d14 <_strtod_l+0x5c4>
 8011d0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d0e:	f7ee fc7b 	bl	8000608 <__aeabi_dmul>
 8011d12:	2301      	movs	r3, #1
 8011d14:	1064      	asrs	r4, r4, #1
 8011d16:	f106 0608 	add.w	r6, r6, #8
 8011d1a:	d1f4      	bne.n	8011d06 <_strtod_l+0x5b6>
 8011d1c:	b10b      	cbz	r3, 8011d22 <_strtod_l+0x5d2>
 8011d1e:	4682      	mov	sl, r0
 8011d20:	468b      	mov	fp, r1
 8011d22:	9b08      	ldr	r3, [sp, #32]
 8011d24:	b1b3      	cbz	r3, 8011d54 <_strtod_l+0x604>
 8011d26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011d2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	4659      	mov	r1, fp
 8011d32:	dd0f      	ble.n	8011d54 <_strtod_l+0x604>
 8011d34:	2b1f      	cmp	r3, #31
 8011d36:	dd56      	ble.n	8011de6 <_strtod_l+0x696>
 8011d38:	2b34      	cmp	r3, #52	@ 0x34
 8011d3a:	bfde      	ittt	le
 8011d3c:	f04f 33ff 	movle.w	r3, #4294967295
 8011d40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011d44:	4093      	lslle	r3, r2
 8011d46:	f04f 0a00 	mov.w	sl, #0
 8011d4a:	bfcc      	ite	gt
 8011d4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011d50:	ea03 0b01 	andle.w	fp, r3, r1
 8011d54:	2200      	movs	r2, #0
 8011d56:	2300      	movs	r3, #0
 8011d58:	4650      	mov	r0, sl
 8011d5a:	4659      	mov	r1, fp
 8011d5c:	f7ee febc 	bl	8000ad8 <__aeabi_dcmpeq>
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d1a7      	bne.n	8011cb4 <_strtod_l+0x564>
 8011d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011d6a:	9805      	ldr	r0, [sp, #20]
 8011d6c:	462b      	mov	r3, r5
 8011d6e:	464a      	mov	r2, r9
 8011d70:	f7ff f8cc 	bl	8010f0c <__s2b>
 8011d74:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011d76:	2800      	cmp	r0, #0
 8011d78:	f43f af09 	beq.w	8011b8e <_strtod_l+0x43e>
 8011d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d80:	2a00      	cmp	r2, #0
 8011d82:	eba3 0308 	sub.w	r3, r3, r8
 8011d86:	bfa8      	it	ge
 8011d88:	2300      	movge	r3, #0
 8011d8a:	9312      	str	r3, [sp, #72]	@ 0x48
 8011d8c:	2400      	movs	r4, #0
 8011d8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011d92:	9316      	str	r3, [sp, #88]	@ 0x58
 8011d94:	46a0      	mov	r8, r4
 8011d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d98:	9805      	ldr	r0, [sp, #20]
 8011d9a:	6859      	ldr	r1, [r3, #4]
 8011d9c:	f7ff f80e 	bl	8010dbc <_Balloc>
 8011da0:	4681      	mov	r9, r0
 8011da2:	2800      	cmp	r0, #0
 8011da4:	f43f aef7 	beq.w	8011b96 <_strtod_l+0x446>
 8011da8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011daa:	691a      	ldr	r2, [r3, #16]
 8011dac:	3202      	adds	r2, #2
 8011dae:	f103 010c 	add.w	r1, r3, #12
 8011db2:	0092      	lsls	r2, r2, #2
 8011db4:	300c      	adds	r0, #12
 8011db6:	f000 fd61 	bl	801287c <memcpy>
 8011dba:	ec4b ab10 	vmov	d0, sl, fp
 8011dbe:	9805      	ldr	r0, [sp, #20]
 8011dc0:	aa1c      	add	r2, sp, #112	@ 0x70
 8011dc2:	a91b      	add	r1, sp, #108	@ 0x6c
 8011dc4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011dc8:	f7ff fbd4 	bl	8011574 <__d2b>
 8011dcc:	901a      	str	r0, [sp, #104]	@ 0x68
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	f43f aee1 	beq.w	8011b96 <_strtod_l+0x446>
 8011dd4:	9805      	ldr	r0, [sp, #20]
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	f7ff f92e 	bl	8011038 <__i2b>
 8011ddc:	4680      	mov	r8, r0
 8011dde:	b948      	cbnz	r0, 8011df4 <_strtod_l+0x6a4>
 8011de0:	f04f 0800 	mov.w	r8, #0
 8011de4:	e6d7      	b.n	8011b96 <_strtod_l+0x446>
 8011de6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dea:	fa02 f303 	lsl.w	r3, r2, r3
 8011dee:	ea03 0a0a 	and.w	sl, r3, sl
 8011df2:	e7af      	b.n	8011d54 <_strtod_l+0x604>
 8011df4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011df6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011df8:	2d00      	cmp	r5, #0
 8011dfa:	bfab      	itete	ge
 8011dfc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011dfe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011e00:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011e02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011e04:	bfac      	ite	ge
 8011e06:	18ef      	addge	r7, r5, r3
 8011e08:	1b5e      	sublt	r6, r3, r5
 8011e0a:	9b08      	ldr	r3, [sp, #32]
 8011e0c:	1aed      	subs	r5, r5, r3
 8011e0e:	4415      	add	r5, r2
 8011e10:	4b65      	ldr	r3, [pc, #404]	@ (8011fa8 <_strtod_l+0x858>)
 8011e12:	3d01      	subs	r5, #1
 8011e14:	429d      	cmp	r5, r3
 8011e16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011e1a:	da50      	bge.n	8011ebe <_strtod_l+0x76e>
 8011e1c:	1b5b      	subs	r3, r3, r5
 8011e1e:	2b1f      	cmp	r3, #31
 8011e20:	eba2 0203 	sub.w	r2, r2, r3
 8011e24:	f04f 0101 	mov.w	r1, #1
 8011e28:	dc3d      	bgt.n	8011ea6 <_strtod_l+0x756>
 8011e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8011e2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011e30:	2300      	movs	r3, #0
 8011e32:	9310      	str	r3, [sp, #64]	@ 0x40
 8011e34:	18bd      	adds	r5, r7, r2
 8011e36:	9b08      	ldr	r3, [sp, #32]
 8011e38:	42af      	cmp	r7, r5
 8011e3a:	4416      	add	r6, r2
 8011e3c:	441e      	add	r6, r3
 8011e3e:	463b      	mov	r3, r7
 8011e40:	bfa8      	it	ge
 8011e42:	462b      	movge	r3, r5
 8011e44:	42b3      	cmp	r3, r6
 8011e46:	bfa8      	it	ge
 8011e48:	4633      	movge	r3, r6
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	bfc2      	ittt	gt
 8011e4e:	1aed      	subgt	r5, r5, r3
 8011e50:	1af6      	subgt	r6, r6, r3
 8011e52:	1aff      	subgt	r7, r7, r3
 8011e54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	dd16      	ble.n	8011e88 <_strtod_l+0x738>
 8011e5a:	4641      	mov	r1, r8
 8011e5c:	9805      	ldr	r0, [sp, #20]
 8011e5e:	461a      	mov	r2, r3
 8011e60:	f7ff f9a2 	bl	80111a8 <__pow5mult>
 8011e64:	4680      	mov	r8, r0
 8011e66:	2800      	cmp	r0, #0
 8011e68:	d0ba      	beq.n	8011de0 <_strtod_l+0x690>
 8011e6a:	4601      	mov	r1, r0
 8011e6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011e6e:	9805      	ldr	r0, [sp, #20]
 8011e70:	f7ff f8f8 	bl	8011064 <__multiply>
 8011e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e76:	2800      	cmp	r0, #0
 8011e78:	f43f ae8d 	beq.w	8011b96 <_strtod_l+0x446>
 8011e7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011e7e:	9805      	ldr	r0, [sp, #20]
 8011e80:	f7fe ffdc 	bl	8010e3c <_Bfree>
 8011e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e86:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e88:	2d00      	cmp	r5, #0
 8011e8a:	dc1d      	bgt.n	8011ec8 <_strtod_l+0x778>
 8011e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	dd23      	ble.n	8011eda <_strtod_l+0x78a>
 8011e92:	4649      	mov	r1, r9
 8011e94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011e96:	9805      	ldr	r0, [sp, #20]
 8011e98:	f7ff f986 	bl	80111a8 <__pow5mult>
 8011e9c:	4681      	mov	r9, r0
 8011e9e:	b9e0      	cbnz	r0, 8011eda <_strtod_l+0x78a>
 8011ea0:	f04f 0900 	mov.w	r9, #0
 8011ea4:	e677      	b.n	8011b96 <_strtod_l+0x446>
 8011ea6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011eaa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011eae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011eb2:	35e2      	adds	r5, #226	@ 0xe2
 8011eb4:	fa01 f305 	lsl.w	r3, r1, r5
 8011eb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8011eba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011ebc:	e7ba      	b.n	8011e34 <_strtod_l+0x6e4>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011ec6:	e7b5      	b.n	8011e34 <_strtod_l+0x6e4>
 8011ec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011eca:	9805      	ldr	r0, [sp, #20]
 8011ecc:	462a      	mov	r2, r5
 8011ece:	f7ff f9c5 	bl	801125c <__lshift>
 8011ed2:	901a      	str	r0, [sp, #104]	@ 0x68
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	d1d9      	bne.n	8011e8c <_strtod_l+0x73c>
 8011ed8:	e65d      	b.n	8011b96 <_strtod_l+0x446>
 8011eda:	2e00      	cmp	r6, #0
 8011edc:	dd07      	ble.n	8011eee <_strtod_l+0x79e>
 8011ede:	4649      	mov	r1, r9
 8011ee0:	9805      	ldr	r0, [sp, #20]
 8011ee2:	4632      	mov	r2, r6
 8011ee4:	f7ff f9ba 	bl	801125c <__lshift>
 8011ee8:	4681      	mov	r9, r0
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d0d8      	beq.n	8011ea0 <_strtod_l+0x750>
 8011eee:	2f00      	cmp	r7, #0
 8011ef0:	dd08      	ble.n	8011f04 <_strtod_l+0x7b4>
 8011ef2:	4641      	mov	r1, r8
 8011ef4:	9805      	ldr	r0, [sp, #20]
 8011ef6:	463a      	mov	r2, r7
 8011ef8:	f7ff f9b0 	bl	801125c <__lshift>
 8011efc:	4680      	mov	r8, r0
 8011efe:	2800      	cmp	r0, #0
 8011f00:	f43f ae49 	beq.w	8011b96 <_strtod_l+0x446>
 8011f04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f06:	9805      	ldr	r0, [sp, #20]
 8011f08:	464a      	mov	r2, r9
 8011f0a:	f7ff fa2f 	bl	801136c <__mdiff>
 8011f0e:	4604      	mov	r4, r0
 8011f10:	2800      	cmp	r0, #0
 8011f12:	f43f ae40 	beq.w	8011b96 <_strtod_l+0x446>
 8011f16:	68c3      	ldr	r3, [r0, #12]
 8011f18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	60c3      	str	r3, [r0, #12]
 8011f1e:	4641      	mov	r1, r8
 8011f20:	f7ff fa08 	bl	8011334 <__mcmp>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	da45      	bge.n	8011fb4 <_strtod_l+0x864>
 8011f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f2a:	ea53 030a 	orrs.w	r3, r3, sl
 8011f2e:	d16b      	bne.n	8012008 <_strtod_l+0x8b8>
 8011f30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d167      	bne.n	8012008 <_strtod_l+0x8b8>
 8011f38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011f3c:	0d1b      	lsrs	r3, r3, #20
 8011f3e:	051b      	lsls	r3, r3, #20
 8011f40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011f44:	d960      	bls.n	8012008 <_strtod_l+0x8b8>
 8011f46:	6963      	ldr	r3, [r4, #20]
 8011f48:	b913      	cbnz	r3, 8011f50 <_strtod_l+0x800>
 8011f4a:	6923      	ldr	r3, [r4, #16]
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	dd5b      	ble.n	8012008 <_strtod_l+0x8b8>
 8011f50:	4621      	mov	r1, r4
 8011f52:	2201      	movs	r2, #1
 8011f54:	9805      	ldr	r0, [sp, #20]
 8011f56:	f7ff f981 	bl	801125c <__lshift>
 8011f5a:	4641      	mov	r1, r8
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	f7ff f9e9 	bl	8011334 <__mcmp>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	dd50      	ble.n	8012008 <_strtod_l+0x8b8>
 8011f66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011f6a:	9a08      	ldr	r2, [sp, #32]
 8011f6c:	0d1b      	lsrs	r3, r3, #20
 8011f6e:	051b      	lsls	r3, r3, #20
 8011f70:	2a00      	cmp	r2, #0
 8011f72:	d06a      	beq.n	801204a <_strtod_l+0x8fa>
 8011f74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011f78:	d867      	bhi.n	801204a <_strtod_l+0x8fa>
 8011f7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011f7e:	f67f ae9d 	bls.w	8011cbc <_strtod_l+0x56c>
 8011f82:	4b0a      	ldr	r3, [pc, #40]	@ (8011fac <_strtod_l+0x85c>)
 8011f84:	4650      	mov	r0, sl
 8011f86:	4659      	mov	r1, fp
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f7ee fb3d 	bl	8000608 <__aeabi_dmul>
 8011f8e:	4b08      	ldr	r3, [pc, #32]	@ (8011fb0 <_strtod_l+0x860>)
 8011f90:	400b      	ands	r3, r1
 8011f92:	4682      	mov	sl, r0
 8011f94:	468b      	mov	fp, r1
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f47f ae08 	bne.w	8011bac <_strtod_l+0x45c>
 8011f9c:	9a05      	ldr	r2, [sp, #20]
 8011f9e:	2322      	movs	r3, #34	@ 0x22
 8011fa0:	6013      	str	r3, [r2, #0]
 8011fa2:	e603      	b.n	8011bac <_strtod_l+0x45c>
 8011fa4:	080148a8 	.word	0x080148a8
 8011fa8:	fffffc02 	.word	0xfffffc02
 8011fac:	39500000 	.word	0x39500000
 8011fb0:	7ff00000 	.word	0x7ff00000
 8011fb4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011fb8:	d165      	bne.n	8012086 <_strtod_l+0x936>
 8011fba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fc0:	b35a      	cbz	r2, 801201a <_strtod_l+0x8ca>
 8011fc2:	4a9f      	ldr	r2, [pc, #636]	@ (8012240 <_strtod_l+0xaf0>)
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d12b      	bne.n	8012020 <_strtod_l+0x8d0>
 8011fc8:	9b08      	ldr	r3, [sp, #32]
 8011fca:	4651      	mov	r1, sl
 8011fcc:	b303      	cbz	r3, 8012010 <_strtod_l+0x8c0>
 8011fce:	4b9d      	ldr	r3, [pc, #628]	@ (8012244 <_strtod_l+0xaf4>)
 8011fd0:	465a      	mov	r2, fp
 8011fd2:	4013      	ands	r3, r2
 8011fd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8011fdc:	d81b      	bhi.n	8012016 <_strtod_l+0x8c6>
 8011fde:	0d1b      	lsrs	r3, r3, #20
 8011fe0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8011fe8:	4299      	cmp	r1, r3
 8011fea:	d119      	bne.n	8012020 <_strtod_l+0x8d0>
 8011fec:	4b96      	ldr	r3, [pc, #600]	@ (8012248 <_strtod_l+0xaf8>)
 8011fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d102      	bne.n	8011ffa <_strtod_l+0x8aa>
 8011ff4:	3101      	adds	r1, #1
 8011ff6:	f43f adce 	beq.w	8011b96 <_strtod_l+0x446>
 8011ffa:	4b92      	ldr	r3, [pc, #584]	@ (8012244 <_strtod_l+0xaf4>)
 8011ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ffe:	401a      	ands	r2, r3
 8012000:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012004:	f04f 0a00 	mov.w	sl, #0
 8012008:	9b08      	ldr	r3, [sp, #32]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d1b9      	bne.n	8011f82 <_strtod_l+0x832>
 801200e:	e5cd      	b.n	8011bac <_strtod_l+0x45c>
 8012010:	f04f 33ff 	mov.w	r3, #4294967295
 8012014:	e7e8      	b.n	8011fe8 <_strtod_l+0x898>
 8012016:	4613      	mov	r3, r2
 8012018:	e7e6      	b.n	8011fe8 <_strtod_l+0x898>
 801201a:	ea53 030a 	orrs.w	r3, r3, sl
 801201e:	d0a2      	beq.n	8011f66 <_strtod_l+0x816>
 8012020:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012022:	b1db      	cbz	r3, 801205c <_strtod_l+0x90c>
 8012024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012026:	4213      	tst	r3, r2
 8012028:	d0ee      	beq.n	8012008 <_strtod_l+0x8b8>
 801202a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801202c:	9a08      	ldr	r2, [sp, #32]
 801202e:	4650      	mov	r0, sl
 8012030:	4659      	mov	r1, fp
 8012032:	b1bb      	cbz	r3, 8012064 <_strtod_l+0x914>
 8012034:	f7ff fb6c 	bl	8011710 <sulp>
 8012038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801203c:	ec53 2b10 	vmov	r2, r3, d0
 8012040:	f7ee f92c 	bl	800029c <__adddf3>
 8012044:	4682      	mov	sl, r0
 8012046:	468b      	mov	fp, r1
 8012048:	e7de      	b.n	8012008 <_strtod_l+0x8b8>
 801204a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801204e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012052:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012056:	f04f 3aff 	mov.w	sl, #4294967295
 801205a:	e7d5      	b.n	8012008 <_strtod_l+0x8b8>
 801205c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801205e:	ea13 0f0a 	tst.w	r3, sl
 8012062:	e7e1      	b.n	8012028 <_strtod_l+0x8d8>
 8012064:	f7ff fb54 	bl	8011710 <sulp>
 8012068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801206c:	ec53 2b10 	vmov	r2, r3, d0
 8012070:	f7ee f912 	bl	8000298 <__aeabi_dsub>
 8012074:	2200      	movs	r2, #0
 8012076:	2300      	movs	r3, #0
 8012078:	4682      	mov	sl, r0
 801207a:	468b      	mov	fp, r1
 801207c:	f7ee fd2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8012080:	2800      	cmp	r0, #0
 8012082:	d0c1      	beq.n	8012008 <_strtod_l+0x8b8>
 8012084:	e61a      	b.n	8011cbc <_strtod_l+0x56c>
 8012086:	4641      	mov	r1, r8
 8012088:	4620      	mov	r0, r4
 801208a:	f7ff facb 	bl	8011624 <__ratio>
 801208e:	ec57 6b10 	vmov	r6, r7, d0
 8012092:	2200      	movs	r2, #0
 8012094:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012098:	4630      	mov	r0, r6
 801209a:	4639      	mov	r1, r7
 801209c:	f7ee fd30 	bl	8000b00 <__aeabi_dcmple>
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d06f      	beq.n	8012184 <_strtod_l+0xa34>
 80120a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d17a      	bne.n	80121a0 <_strtod_l+0xa50>
 80120aa:	f1ba 0f00 	cmp.w	sl, #0
 80120ae:	d158      	bne.n	8012162 <_strtod_l+0xa12>
 80120b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d15a      	bne.n	8012170 <_strtod_l+0xa20>
 80120ba:	4b64      	ldr	r3, [pc, #400]	@ (801224c <_strtod_l+0xafc>)
 80120bc:	2200      	movs	r2, #0
 80120be:	4630      	mov	r0, r6
 80120c0:	4639      	mov	r1, r7
 80120c2:	f7ee fd13 	bl	8000aec <__aeabi_dcmplt>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d159      	bne.n	801217e <_strtod_l+0xa2e>
 80120ca:	4630      	mov	r0, r6
 80120cc:	4639      	mov	r1, r7
 80120ce:	4b60      	ldr	r3, [pc, #384]	@ (8012250 <_strtod_l+0xb00>)
 80120d0:	2200      	movs	r2, #0
 80120d2:	f7ee fa99 	bl	8000608 <__aeabi_dmul>
 80120d6:	4606      	mov	r6, r0
 80120d8:	460f      	mov	r7, r1
 80120da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80120de:	9606      	str	r6, [sp, #24]
 80120e0:	9307      	str	r3, [sp, #28]
 80120e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80120e6:	4d57      	ldr	r5, [pc, #348]	@ (8012244 <_strtod_l+0xaf4>)
 80120e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80120ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120ee:	401d      	ands	r5, r3
 80120f0:	4b58      	ldr	r3, [pc, #352]	@ (8012254 <_strtod_l+0xb04>)
 80120f2:	429d      	cmp	r5, r3
 80120f4:	f040 80b2 	bne.w	801225c <_strtod_l+0xb0c>
 80120f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80120fe:	ec4b ab10 	vmov	d0, sl, fp
 8012102:	f7ff f9c7 	bl	8011494 <__ulp>
 8012106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801210a:	ec51 0b10 	vmov	r0, r1, d0
 801210e:	f7ee fa7b 	bl	8000608 <__aeabi_dmul>
 8012112:	4652      	mov	r2, sl
 8012114:	465b      	mov	r3, fp
 8012116:	f7ee f8c1 	bl	800029c <__adddf3>
 801211a:	460b      	mov	r3, r1
 801211c:	4949      	ldr	r1, [pc, #292]	@ (8012244 <_strtod_l+0xaf4>)
 801211e:	4a4e      	ldr	r2, [pc, #312]	@ (8012258 <_strtod_l+0xb08>)
 8012120:	4019      	ands	r1, r3
 8012122:	4291      	cmp	r1, r2
 8012124:	4682      	mov	sl, r0
 8012126:	d942      	bls.n	80121ae <_strtod_l+0xa5e>
 8012128:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801212a:	4b47      	ldr	r3, [pc, #284]	@ (8012248 <_strtod_l+0xaf8>)
 801212c:	429a      	cmp	r2, r3
 801212e:	d103      	bne.n	8012138 <_strtod_l+0x9e8>
 8012130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012132:	3301      	adds	r3, #1
 8012134:	f43f ad2f 	beq.w	8011b96 <_strtod_l+0x446>
 8012138:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012248 <_strtod_l+0xaf8>
 801213c:	f04f 3aff 	mov.w	sl, #4294967295
 8012140:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012142:	9805      	ldr	r0, [sp, #20]
 8012144:	f7fe fe7a 	bl	8010e3c <_Bfree>
 8012148:	9805      	ldr	r0, [sp, #20]
 801214a:	4649      	mov	r1, r9
 801214c:	f7fe fe76 	bl	8010e3c <_Bfree>
 8012150:	9805      	ldr	r0, [sp, #20]
 8012152:	4641      	mov	r1, r8
 8012154:	f7fe fe72 	bl	8010e3c <_Bfree>
 8012158:	9805      	ldr	r0, [sp, #20]
 801215a:	4621      	mov	r1, r4
 801215c:	f7fe fe6e 	bl	8010e3c <_Bfree>
 8012160:	e619      	b.n	8011d96 <_strtod_l+0x646>
 8012162:	f1ba 0f01 	cmp.w	sl, #1
 8012166:	d103      	bne.n	8012170 <_strtod_l+0xa20>
 8012168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801216a:	2b00      	cmp	r3, #0
 801216c:	f43f ada6 	beq.w	8011cbc <_strtod_l+0x56c>
 8012170:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012220 <_strtod_l+0xad0>
 8012174:	4f35      	ldr	r7, [pc, #212]	@ (801224c <_strtod_l+0xafc>)
 8012176:	ed8d 7b06 	vstr	d7, [sp, #24]
 801217a:	2600      	movs	r6, #0
 801217c:	e7b1      	b.n	80120e2 <_strtod_l+0x992>
 801217e:	4f34      	ldr	r7, [pc, #208]	@ (8012250 <_strtod_l+0xb00>)
 8012180:	2600      	movs	r6, #0
 8012182:	e7aa      	b.n	80120da <_strtod_l+0x98a>
 8012184:	4b32      	ldr	r3, [pc, #200]	@ (8012250 <_strtod_l+0xb00>)
 8012186:	4630      	mov	r0, r6
 8012188:	4639      	mov	r1, r7
 801218a:	2200      	movs	r2, #0
 801218c:	f7ee fa3c 	bl	8000608 <__aeabi_dmul>
 8012190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012192:	4606      	mov	r6, r0
 8012194:	460f      	mov	r7, r1
 8012196:	2b00      	cmp	r3, #0
 8012198:	d09f      	beq.n	80120da <_strtod_l+0x98a>
 801219a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801219e:	e7a0      	b.n	80120e2 <_strtod_l+0x992>
 80121a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012228 <_strtod_l+0xad8>
 80121a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80121a8:	ec57 6b17 	vmov	r6, r7, d7
 80121ac:	e799      	b.n	80120e2 <_strtod_l+0x992>
 80121ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80121b2:	9b08      	ldr	r3, [sp, #32]
 80121b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d1c1      	bne.n	8012140 <_strtod_l+0x9f0>
 80121bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80121c0:	0d1b      	lsrs	r3, r3, #20
 80121c2:	051b      	lsls	r3, r3, #20
 80121c4:	429d      	cmp	r5, r3
 80121c6:	d1bb      	bne.n	8012140 <_strtod_l+0x9f0>
 80121c8:	4630      	mov	r0, r6
 80121ca:	4639      	mov	r1, r7
 80121cc:	f7ee fd7c 	bl	8000cc8 <__aeabi_d2lz>
 80121d0:	f7ee f9ec 	bl	80005ac <__aeabi_l2d>
 80121d4:	4602      	mov	r2, r0
 80121d6:	460b      	mov	r3, r1
 80121d8:	4630      	mov	r0, r6
 80121da:	4639      	mov	r1, r7
 80121dc:	f7ee f85c 	bl	8000298 <__aeabi_dsub>
 80121e0:	460b      	mov	r3, r1
 80121e2:	4602      	mov	r2, r0
 80121e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80121e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80121ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121ee:	ea46 060a 	orr.w	r6, r6, sl
 80121f2:	431e      	orrs	r6, r3
 80121f4:	d06f      	beq.n	80122d6 <_strtod_l+0xb86>
 80121f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012230 <_strtod_l+0xae0>)
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	f7ee fc76 	bl	8000aec <__aeabi_dcmplt>
 8012200:	2800      	cmp	r0, #0
 8012202:	f47f acd3 	bne.w	8011bac <_strtod_l+0x45c>
 8012206:	a30c      	add	r3, pc, #48	@ (adr r3, 8012238 <_strtod_l+0xae8>)
 8012208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012210:	f7ee fc8a 	bl	8000b28 <__aeabi_dcmpgt>
 8012214:	2800      	cmp	r0, #0
 8012216:	d093      	beq.n	8012140 <_strtod_l+0x9f0>
 8012218:	e4c8      	b.n	8011bac <_strtod_l+0x45c>
 801221a:	bf00      	nop
 801221c:	f3af 8000 	nop.w
 8012220:	00000000 	.word	0x00000000
 8012224:	bff00000 	.word	0xbff00000
 8012228:	00000000 	.word	0x00000000
 801222c:	3ff00000 	.word	0x3ff00000
 8012230:	94a03595 	.word	0x94a03595
 8012234:	3fdfffff 	.word	0x3fdfffff
 8012238:	35afe535 	.word	0x35afe535
 801223c:	3fe00000 	.word	0x3fe00000
 8012240:	000fffff 	.word	0x000fffff
 8012244:	7ff00000 	.word	0x7ff00000
 8012248:	7fefffff 	.word	0x7fefffff
 801224c:	3ff00000 	.word	0x3ff00000
 8012250:	3fe00000 	.word	0x3fe00000
 8012254:	7fe00000 	.word	0x7fe00000
 8012258:	7c9fffff 	.word	0x7c9fffff
 801225c:	9b08      	ldr	r3, [sp, #32]
 801225e:	b323      	cbz	r3, 80122aa <_strtod_l+0xb5a>
 8012260:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012264:	d821      	bhi.n	80122aa <_strtod_l+0xb5a>
 8012266:	a328      	add	r3, pc, #160	@ (adr r3, 8012308 <_strtod_l+0xbb8>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	4630      	mov	r0, r6
 801226e:	4639      	mov	r1, r7
 8012270:	f7ee fc46 	bl	8000b00 <__aeabi_dcmple>
 8012274:	b1a0      	cbz	r0, 80122a0 <_strtod_l+0xb50>
 8012276:	4639      	mov	r1, r7
 8012278:	4630      	mov	r0, r6
 801227a:	f7ee fc9d 	bl	8000bb8 <__aeabi_d2uiz>
 801227e:	2801      	cmp	r0, #1
 8012280:	bf38      	it	cc
 8012282:	2001      	movcc	r0, #1
 8012284:	f7ee f946 	bl	8000514 <__aeabi_ui2d>
 8012288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801228a:	4606      	mov	r6, r0
 801228c:	460f      	mov	r7, r1
 801228e:	b9fb      	cbnz	r3, 80122d0 <_strtod_l+0xb80>
 8012290:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012294:	9014      	str	r0, [sp, #80]	@ 0x50
 8012296:	9315      	str	r3, [sp, #84]	@ 0x54
 8012298:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801229c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80122a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80122a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80122a6:	1b5b      	subs	r3, r3, r5
 80122a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80122aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80122ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80122b2:	f7ff f8ef 	bl	8011494 <__ulp>
 80122b6:	4650      	mov	r0, sl
 80122b8:	ec53 2b10 	vmov	r2, r3, d0
 80122bc:	4659      	mov	r1, fp
 80122be:	f7ee f9a3 	bl	8000608 <__aeabi_dmul>
 80122c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80122c6:	f7ed ffe9 	bl	800029c <__adddf3>
 80122ca:	4682      	mov	sl, r0
 80122cc:	468b      	mov	fp, r1
 80122ce:	e770      	b.n	80121b2 <_strtod_l+0xa62>
 80122d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80122d4:	e7e0      	b.n	8012298 <_strtod_l+0xb48>
 80122d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012310 <_strtod_l+0xbc0>)
 80122d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122dc:	f7ee fc06 	bl	8000aec <__aeabi_dcmplt>
 80122e0:	e798      	b.n	8012214 <_strtod_l+0xac4>
 80122e2:	2300      	movs	r3, #0
 80122e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80122e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80122e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122ea:	6013      	str	r3, [r2, #0]
 80122ec:	f7ff ba6d 	b.w	80117ca <_strtod_l+0x7a>
 80122f0:	2a65      	cmp	r2, #101	@ 0x65
 80122f2:	f43f ab68 	beq.w	80119c6 <_strtod_l+0x276>
 80122f6:	2a45      	cmp	r2, #69	@ 0x45
 80122f8:	f43f ab65 	beq.w	80119c6 <_strtod_l+0x276>
 80122fc:	2301      	movs	r3, #1
 80122fe:	f7ff bba0 	b.w	8011a42 <_strtod_l+0x2f2>
 8012302:	bf00      	nop
 8012304:	f3af 8000 	nop.w
 8012308:	ffc00000 	.word	0xffc00000
 801230c:	41dfffff 	.word	0x41dfffff
 8012310:	94a03595 	.word	0x94a03595
 8012314:	3fcfffff 	.word	0x3fcfffff

08012318 <_strtod_r>:
 8012318:	4b01      	ldr	r3, [pc, #4]	@ (8012320 <_strtod_r+0x8>)
 801231a:	f7ff ba19 	b.w	8011750 <_strtod_l>
 801231e:	bf00      	nop
 8012320:	2000016c 	.word	0x2000016c

08012324 <_strtol_l.isra.0>:
 8012324:	2b24      	cmp	r3, #36	@ 0x24
 8012326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801232a:	4686      	mov	lr, r0
 801232c:	4690      	mov	r8, r2
 801232e:	d801      	bhi.n	8012334 <_strtol_l.isra.0+0x10>
 8012330:	2b01      	cmp	r3, #1
 8012332:	d106      	bne.n	8012342 <_strtol_l.isra.0+0x1e>
 8012334:	f7fd fe6c 	bl	8010010 <__errno>
 8012338:	2316      	movs	r3, #22
 801233a:	6003      	str	r3, [r0, #0]
 801233c:	2000      	movs	r0, #0
 801233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012342:	4834      	ldr	r0, [pc, #208]	@ (8012414 <_strtol_l.isra.0+0xf0>)
 8012344:	460d      	mov	r5, r1
 8012346:	462a      	mov	r2, r5
 8012348:	f815 4b01 	ldrb.w	r4, [r5], #1
 801234c:	5d06      	ldrb	r6, [r0, r4]
 801234e:	f016 0608 	ands.w	r6, r6, #8
 8012352:	d1f8      	bne.n	8012346 <_strtol_l.isra.0+0x22>
 8012354:	2c2d      	cmp	r4, #45	@ 0x2d
 8012356:	d110      	bne.n	801237a <_strtol_l.isra.0+0x56>
 8012358:	782c      	ldrb	r4, [r5, #0]
 801235a:	2601      	movs	r6, #1
 801235c:	1c95      	adds	r5, r2, #2
 801235e:	f033 0210 	bics.w	r2, r3, #16
 8012362:	d115      	bne.n	8012390 <_strtol_l.isra.0+0x6c>
 8012364:	2c30      	cmp	r4, #48	@ 0x30
 8012366:	d10d      	bne.n	8012384 <_strtol_l.isra.0+0x60>
 8012368:	782a      	ldrb	r2, [r5, #0]
 801236a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801236e:	2a58      	cmp	r2, #88	@ 0x58
 8012370:	d108      	bne.n	8012384 <_strtol_l.isra.0+0x60>
 8012372:	786c      	ldrb	r4, [r5, #1]
 8012374:	3502      	adds	r5, #2
 8012376:	2310      	movs	r3, #16
 8012378:	e00a      	b.n	8012390 <_strtol_l.isra.0+0x6c>
 801237a:	2c2b      	cmp	r4, #43	@ 0x2b
 801237c:	bf04      	itt	eq
 801237e:	782c      	ldrbeq	r4, [r5, #0]
 8012380:	1c95      	addeq	r5, r2, #2
 8012382:	e7ec      	b.n	801235e <_strtol_l.isra.0+0x3a>
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1f6      	bne.n	8012376 <_strtol_l.isra.0+0x52>
 8012388:	2c30      	cmp	r4, #48	@ 0x30
 801238a:	bf14      	ite	ne
 801238c:	230a      	movne	r3, #10
 801238e:	2308      	moveq	r3, #8
 8012390:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012394:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012398:	2200      	movs	r2, #0
 801239a:	fbbc f9f3 	udiv	r9, ip, r3
 801239e:	4610      	mov	r0, r2
 80123a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80123a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80123a8:	2f09      	cmp	r7, #9
 80123aa:	d80f      	bhi.n	80123cc <_strtol_l.isra.0+0xa8>
 80123ac:	463c      	mov	r4, r7
 80123ae:	42a3      	cmp	r3, r4
 80123b0:	dd1b      	ble.n	80123ea <_strtol_l.isra.0+0xc6>
 80123b2:	1c57      	adds	r7, r2, #1
 80123b4:	d007      	beq.n	80123c6 <_strtol_l.isra.0+0xa2>
 80123b6:	4581      	cmp	r9, r0
 80123b8:	d314      	bcc.n	80123e4 <_strtol_l.isra.0+0xc0>
 80123ba:	d101      	bne.n	80123c0 <_strtol_l.isra.0+0x9c>
 80123bc:	45a2      	cmp	sl, r4
 80123be:	db11      	blt.n	80123e4 <_strtol_l.isra.0+0xc0>
 80123c0:	fb00 4003 	mla	r0, r0, r3, r4
 80123c4:	2201      	movs	r2, #1
 80123c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123ca:	e7eb      	b.n	80123a4 <_strtol_l.isra.0+0x80>
 80123cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80123d0:	2f19      	cmp	r7, #25
 80123d2:	d801      	bhi.n	80123d8 <_strtol_l.isra.0+0xb4>
 80123d4:	3c37      	subs	r4, #55	@ 0x37
 80123d6:	e7ea      	b.n	80123ae <_strtol_l.isra.0+0x8a>
 80123d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80123dc:	2f19      	cmp	r7, #25
 80123de:	d804      	bhi.n	80123ea <_strtol_l.isra.0+0xc6>
 80123e0:	3c57      	subs	r4, #87	@ 0x57
 80123e2:	e7e4      	b.n	80123ae <_strtol_l.isra.0+0x8a>
 80123e4:	f04f 32ff 	mov.w	r2, #4294967295
 80123e8:	e7ed      	b.n	80123c6 <_strtol_l.isra.0+0xa2>
 80123ea:	1c53      	adds	r3, r2, #1
 80123ec:	d108      	bne.n	8012400 <_strtol_l.isra.0+0xdc>
 80123ee:	2322      	movs	r3, #34	@ 0x22
 80123f0:	f8ce 3000 	str.w	r3, [lr]
 80123f4:	4660      	mov	r0, ip
 80123f6:	f1b8 0f00 	cmp.w	r8, #0
 80123fa:	d0a0      	beq.n	801233e <_strtol_l.isra.0+0x1a>
 80123fc:	1e69      	subs	r1, r5, #1
 80123fe:	e006      	b.n	801240e <_strtol_l.isra.0+0xea>
 8012400:	b106      	cbz	r6, 8012404 <_strtol_l.isra.0+0xe0>
 8012402:	4240      	negs	r0, r0
 8012404:	f1b8 0f00 	cmp.w	r8, #0
 8012408:	d099      	beq.n	801233e <_strtol_l.isra.0+0x1a>
 801240a:	2a00      	cmp	r2, #0
 801240c:	d1f6      	bne.n	80123fc <_strtol_l.isra.0+0xd8>
 801240e:	f8c8 1000 	str.w	r1, [r8]
 8012412:	e794      	b.n	801233e <_strtol_l.isra.0+0x1a>
 8012414:	080148d1 	.word	0x080148d1

08012418 <_strtol_r>:
 8012418:	f7ff bf84 	b.w	8012324 <_strtol_l.isra.0>

0801241c <__ssputs_r>:
 801241c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012420:	688e      	ldr	r6, [r1, #8]
 8012422:	461f      	mov	r7, r3
 8012424:	42be      	cmp	r6, r7
 8012426:	680b      	ldr	r3, [r1, #0]
 8012428:	4682      	mov	sl, r0
 801242a:	460c      	mov	r4, r1
 801242c:	4690      	mov	r8, r2
 801242e:	d82d      	bhi.n	801248c <__ssputs_r+0x70>
 8012430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012434:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012438:	d026      	beq.n	8012488 <__ssputs_r+0x6c>
 801243a:	6965      	ldr	r5, [r4, #20]
 801243c:	6909      	ldr	r1, [r1, #16]
 801243e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012442:	eba3 0901 	sub.w	r9, r3, r1
 8012446:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801244a:	1c7b      	adds	r3, r7, #1
 801244c:	444b      	add	r3, r9
 801244e:	106d      	asrs	r5, r5, #1
 8012450:	429d      	cmp	r5, r3
 8012452:	bf38      	it	cc
 8012454:	461d      	movcc	r5, r3
 8012456:	0553      	lsls	r3, r2, #21
 8012458:	d527      	bpl.n	80124aa <__ssputs_r+0x8e>
 801245a:	4629      	mov	r1, r5
 801245c:	f7fc fd5e 	bl	800ef1c <_malloc_r>
 8012460:	4606      	mov	r6, r0
 8012462:	b360      	cbz	r0, 80124be <__ssputs_r+0xa2>
 8012464:	6921      	ldr	r1, [r4, #16]
 8012466:	464a      	mov	r2, r9
 8012468:	f000 fa08 	bl	801287c <memcpy>
 801246c:	89a3      	ldrh	r3, [r4, #12]
 801246e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012476:	81a3      	strh	r3, [r4, #12]
 8012478:	6126      	str	r6, [r4, #16]
 801247a:	6165      	str	r5, [r4, #20]
 801247c:	444e      	add	r6, r9
 801247e:	eba5 0509 	sub.w	r5, r5, r9
 8012482:	6026      	str	r6, [r4, #0]
 8012484:	60a5      	str	r5, [r4, #8]
 8012486:	463e      	mov	r6, r7
 8012488:	42be      	cmp	r6, r7
 801248a:	d900      	bls.n	801248e <__ssputs_r+0x72>
 801248c:	463e      	mov	r6, r7
 801248e:	6820      	ldr	r0, [r4, #0]
 8012490:	4632      	mov	r2, r6
 8012492:	4641      	mov	r1, r8
 8012494:	f000 f9c6 	bl	8012824 <memmove>
 8012498:	68a3      	ldr	r3, [r4, #8]
 801249a:	1b9b      	subs	r3, r3, r6
 801249c:	60a3      	str	r3, [r4, #8]
 801249e:	6823      	ldr	r3, [r4, #0]
 80124a0:	4433      	add	r3, r6
 80124a2:	6023      	str	r3, [r4, #0]
 80124a4:	2000      	movs	r0, #0
 80124a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124aa:	462a      	mov	r2, r5
 80124ac:	f000 fd79 	bl	8012fa2 <_realloc_r>
 80124b0:	4606      	mov	r6, r0
 80124b2:	2800      	cmp	r0, #0
 80124b4:	d1e0      	bne.n	8012478 <__ssputs_r+0x5c>
 80124b6:	6921      	ldr	r1, [r4, #16]
 80124b8:	4650      	mov	r0, sl
 80124ba:	f7fe fc35 	bl	8010d28 <_free_r>
 80124be:	230c      	movs	r3, #12
 80124c0:	f8ca 3000 	str.w	r3, [sl]
 80124c4:	89a3      	ldrh	r3, [r4, #12]
 80124c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124ca:	81a3      	strh	r3, [r4, #12]
 80124cc:	f04f 30ff 	mov.w	r0, #4294967295
 80124d0:	e7e9      	b.n	80124a6 <__ssputs_r+0x8a>
	...

080124d4 <_svfiprintf_r>:
 80124d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d8:	4698      	mov	r8, r3
 80124da:	898b      	ldrh	r3, [r1, #12]
 80124dc:	061b      	lsls	r3, r3, #24
 80124de:	b09d      	sub	sp, #116	@ 0x74
 80124e0:	4607      	mov	r7, r0
 80124e2:	460d      	mov	r5, r1
 80124e4:	4614      	mov	r4, r2
 80124e6:	d510      	bpl.n	801250a <_svfiprintf_r+0x36>
 80124e8:	690b      	ldr	r3, [r1, #16]
 80124ea:	b973      	cbnz	r3, 801250a <_svfiprintf_r+0x36>
 80124ec:	2140      	movs	r1, #64	@ 0x40
 80124ee:	f7fc fd15 	bl	800ef1c <_malloc_r>
 80124f2:	6028      	str	r0, [r5, #0]
 80124f4:	6128      	str	r0, [r5, #16]
 80124f6:	b930      	cbnz	r0, 8012506 <_svfiprintf_r+0x32>
 80124f8:	230c      	movs	r3, #12
 80124fa:	603b      	str	r3, [r7, #0]
 80124fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012500:	b01d      	add	sp, #116	@ 0x74
 8012502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012506:	2340      	movs	r3, #64	@ 0x40
 8012508:	616b      	str	r3, [r5, #20]
 801250a:	2300      	movs	r3, #0
 801250c:	9309      	str	r3, [sp, #36]	@ 0x24
 801250e:	2320      	movs	r3, #32
 8012510:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012514:	f8cd 800c 	str.w	r8, [sp, #12]
 8012518:	2330      	movs	r3, #48	@ 0x30
 801251a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80126b8 <_svfiprintf_r+0x1e4>
 801251e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012522:	f04f 0901 	mov.w	r9, #1
 8012526:	4623      	mov	r3, r4
 8012528:	469a      	mov	sl, r3
 801252a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801252e:	b10a      	cbz	r2, 8012534 <_svfiprintf_r+0x60>
 8012530:	2a25      	cmp	r2, #37	@ 0x25
 8012532:	d1f9      	bne.n	8012528 <_svfiprintf_r+0x54>
 8012534:	ebba 0b04 	subs.w	fp, sl, r4
 8012538:	d00b      	beq.n	8012552 <_svfiprintf_r+0x7e>
 801253a:	465b      	mov	r3, fp
 801253c:	4622      	mov	r2, r4
 801253e:	4629      	mov	r1, r5
 8012540:	4638      	mov	r0, r7
 8012542:	f7ff ff6b 	bl	801241c <__ssputs_r>
 8012546:	3001      	adds	r0, #1
 8012548:	f000 80a7 	beq.w	801269a <_svfiprintf_r+0x1c6>
 801254c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801254e:	445a      	add	r2, fp
 8012550:	9209      	str	r2, [sp, #36]	@ 0x24
 8012552:	f89a 3000 	ldrb.w	r3, [sl]
 8012556:	2b00      	cmp	r3, #0
 8012558:	f000 809f 	beq.w	801269a <_svfiprintf_r+0x1c6>
 801255c:	2300      	movs	r3, #0
 801255e:	f04f 32ff 	mov.w	r2, #4294967295
 8012562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012566:	f10a 0a01 	add.w	sl, sl, #1
 801256a:	9304      	str	r3, [sp, #16]
 801256c:	9307      	str	r3, [sp, #28]
 801256e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012572:	931a      	str	r3, [sp, #104]	@ 0x68
 8012574:	4654      	mov	r4, sl
 8012576:	2205      	movs	r2, #5
 8012578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801257c:	484e      	ldr	r0, [pc, #312]	@ (80126b8 <_svfiprintf_r+0x1e4>)
 801257e:	f7ed fe2f 	bl	80001e0 <memchr>
 8012582:	9a04      	ldr	r2, [sp, #16]
 8012584:	b9d8      	cbnz	r0, 80125be <_svfiprintf_r+0xea>
 8012586:	06d0      	lsls	r0, r2, #27
 8012588:	bf44      	itt	mi
 801258a:	2320      	movmi	r3, #32
 801258c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012590:	0711      	lsls	r1, r2, #28
 8012592:	bf44      	itt	mi
 8012594:	232b      	movmi	r3, #43	@ 0x2b
 8012596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801259a:	f89a 3000 	ldrb.w	r3, [sl]
 801259e:	2b2a      	cmp	r3, #42	@ 0x2a
 80125a0:	d015      	beq.n	80125ce <_svfiprintf_r+0xfa>
 80125a2:	9a07      	ldr	r2, [sp, #28]
 80125a4:	4654      	mov	r4, sl
 80125a6:	2000      	movs	r0, #0
 80125a8:	f04f 0c0a 	mov.w	ip, #10
 80125ac:	4621      	mov	r1, r4
 80125ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125b2:	3b30      	subs	r3, #48	@ 0x30
 80125b4:	2b09      	cmp	r3, #9
 80125b6:	d94b      	bls.n	8012650 <_svfiprintf_r+0x17c>
 80125b8:	b1b0      	cbz	r0, 80125e8 <_svfiprintf_r+0x114>
 80125ba:	9207      	str	r2, [sp, #28]
 80125bc:	e014      	b.n	80125e8 <_svfiprintf_r+0x114>
 80125be:	eba0 0308 	sub.w	r3, r0, r8
 80125c2:	fa09 f303 	lsl.w	r3, r9, r3
 80125c6:	4313      	orrs	r3, r2
 80125c8:	9304      	str	r3, [sp, #16]
 80125ca:	46a2      	mov	sl, r4
 80125cc:	e7d2      	b.n	8012574 <_svfiprintf_r+0xa0>
 80125ce:	9b03      	ldr	r3, [sp, #12]
 80125d0:	1d19      	adds	r1, r3, #4
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	9103      	str	r1, [sp, #12]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	bfbb      	ittet	lt
 80125da:	425b      	neglt	r3, r3
 80125dc:	f042 0202 	orrlt.w	r2, r2, #2
 80125e0:	9307      	strge	r3, [sp, #28]
 80125e2:	9307      	strlt	r3, [sp, #28]
 80125e4:	bfb8      	it	lt
 80125e6:	9204      	strlt	r2, [sp, #16]
 80125e8:	7823      	ldrb	r3, [r4, #0]
 80125ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80125ec:	d10a      	bne.n	8012604 <_svfiprintf_r+0x130>
 80125ee:	7863      	ldrb	r3, [r4, #1]
 80125f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80125f2:	d132      	bne.n	801265a <_svfiprintf_r+0x186>
 80125f4:	9b03      	ldr	r3, [sp, #12]
 80125f6:	1d1a      	adds	r2, r3, #4
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	9203      	str	r2, [sp, #12]
 80125fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012600:	3402      	adds	r4, #2
 8012602:	9305      	str	r3, [sp, #20]
 8012604:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80126c8 <_svfiprintf_r+0x1f4>
 8012608:	7821      	ldrb	r1, [r4, #0]
 801260a:	2203      	movs	r2, #3
 801260c:	4650      	mov	r0, sl
 801260e:	f7ed fde7 	bl	80001e0 <memchr>
 8012612:	b138      	cbz	r0, 8012624 <_svfiprintf_r+0x150>
 8012614:	9b04      	ldr	r3, [sp, #16]
 8012616:	eba0 000a 	sub.w	r0, r0, sl
 801261a:	2240      	movs	r2, #64	@ 0x40
 801261c:	4082      	lsls	r2, r0
 801261e:	4313      	orrs	r3, r2
 8012620:	3401      	adds	r4, #1
 8012622:	9304      	str	r3, [sp, #16]
 8012624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012628:	4824      	ldr	r0, [pc, #144]	@ (80126bc <_svfiprintf_r+0x1e8>)
 801262a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801262e:	2206      	movs	r2, #6
 8012630:	f7ed fdd6 	bl	80001e0 <memchr>
 8012634:	2800      	cmp	r0, #0
 8012636:	d036      	beq.n	80126a6 <_svfiprintf_r+0x1d2>
 8012638:	4b21      	ldr	r3, [pc, #132]	@ (80126c0 <_svfiprintf_r+0x1ec>)
 801263a:	bb1b      	cbnz	r3, 8012684 <_svfiprintf_r+0x1b0>
 801263c:	9b03      	ldr	r3, [sp, #12]
 801263e:	3307      	adds	r3, #7
 8012640:	f023 0307 	bic.w	r3, r3, #7
 8012644:	3308      	adds	r3, #8
 8012646:	9303      	str	r3, [sp, #12]
 8012648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801264a:	4433      	add	r3, r6
 801264c:	9309      	str	r3, [sp, #36]	@ 0x24
 801264e:	e76a      	b.n	8012526 <_svfiprintf_r+0x52>
 8012650:	fb0c 3202 	mla	r2, ip, r2, r3
 8012654:	460c      	mov	r4, r1
 8012656:	2001      	movs	r0, #1
 8012658:	e7a8      	b.n	80125ac <_svfiprintf_r+0xd8>
 801265a:	2300      	movs	r3, #0
 801265c:	3401      	adds	r4, #1
 801265e:	9305      	str	r3, [sp, #20]
 8012660:	4619      	mov	r1, r3
 8012662:	f04f 0c0a 	mov.w	ip, #10
 8012666:	4620      	mov	r0, r4
 8012668:	f810 2b01 	ldrb.w	r2, [r0], #1
 801266c:	3a30      	subs	r2, #48	@ 0x30
 801266e:	2a09      	cmp	r2, #9
 8012670:	d903      	bls.n	801267a <_svfiprintf_r+0x1a6>
 8012672:	2b00      	cmp	r3, #0
 8012674:	d0c6      	beq.n	8012604 <_svfiprintf_r+0x130>
 8012676:	9105      	str	r1, [sp, #20]
 8012678:	e7c4      	b.n	8012604 <_svfiprintf_r+0x130>
 801267a:	fb0c 2101 	mla	r1, ip, r1, r2
 801267e:	4604      	mov	r4, r0
 8012680:	2301      	movs	r3, #1
 8012682:	e7f0      	b.n	8012666 <_svfiprintf_r+0x192>
 8012684:	ab03      	add	r3, sp, #12
 8012686:	9300      	str	r3, [sp, #0]
 8012688:	462a      	mov	r2, r5
 801268a:	4b0e      	ldr	r3, [pc, #56]	@ (80126c4 <_svfiprintf_r+0x1f0>)
 801268c:	a904      	add	r1, sp, #16
 801268e:	4638      	mov	r0, r7
 8012690:	f7fc fd70 	bl	800f174 <_printf_float>
 8012694:	1c42      	adds	r2, r0, #1
 8012696:	4606      	mov	r6, r0
 8012698:	d1d6      	bne.n	8012648 <_svfiprintf_r+0x174>
 801269a:	89ab      	ldrh	r3, [r5, #12]
 801269c:	065b      	lsls	r3, r3, #25
 801269e:	f53f af2d 	bmi.w	80124fc <_svfiprintf_r+0x28>
 80126a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126a4:	e72c      	b.n	8012500 <_svfiprintf_r+0x2c>
 80126a6:	ab03      	add	r3, sp, #12
 80126a8:	9300      	str	r3, [sp, #0]
 80126aa:	462a      	mov	r2, r5
 80126ac:	4b05      	ldr	r3, [pc, #20]	@ (80126c4 <_svfiprintf_r+0x1f0>)
 80126ae:	a904      	add	r1, sp, #16
 80126b0:	4638      	mov	r0, r7
 80126b2:	f7fc fff7 	bl	800f6a4 <_printf_i>
 80126b6:	e7ed      	b.n	8012694 <_svfiprintf_r+0x1c0>
 80126b8:	080146cd 	.word	0x080146cd
 80126bc:	080146d7 	.word	0x080146d7
 80126c0:	0800f175 	.word	0x0800f175
 80126c4:	0801241d 	.word	0x0801241d
 80126c8:	080146d3 	.word	0x080146d3

080126cc <__sflush_r>:
 80126cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126d4:	0716      	lsls	r6, r2, #28
 80126d6:	4605      	mov	r5, r0
 80126d8:	460c      	mov	r4, r1
 80126da:	d454      	bmi.n	8012786 <__sflush_r+0xba>
 80126dc:	684b      	ldr	r3, [r1, #4]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	dc02      	bgt.n	80126e8 <__sflush_r+0x1c>
 80126e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	dd48      	ble.n	801277a <__sflush_r+0xae>
 80126e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126ea:	2e00      	cmp	r6, #0
 80126ec:	d045      	beq.n	801277a <__sflush_r+0xae>
 80126ee:	2300      	movs	r3, #0
 80126f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126f4:	682f      	ldr	r7, [r5, #0]
 80126f6:	6a21      	ldr	r1, [r4, #32]
 80126f8:	602b      	str	r3, [r5, #0]
 80126fa:	d030      	beq.n	801275e <__sflush_r+0x92>
 80126fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126fe:	89a3      	ldrh	r3, [r4, #12]
 8012700:	0759      	lsls	r1, r3, #29
 8012702:	d505      	bpl.n	8012710 <__sflush_r+0x44>
 8012704:	6863      	ldr	r3, [r4, #4]
 8012706:	1ad2      	subs	r2, r2, r3
 8012708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801270a:	b10b      	cbz	r3, 8012710 <__sflush_r+0x44>
 801270c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801270e:	1ad2      	subs	r2, r2, r3
 8012710:	2300      	movs	r3, #0
 8012712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012714:	6a21      	ldr	r1, [r4, #32]
 8012716:	4628      	mov	r0, r5
 8012718:	47b0      	blx	r6
 801271a:	1c43      	adds	r3, r0, #1
 801271c:	89a3      	ldrh	r3, [r4, #12]
 801271e:	d106      	bne.n	801272e <__sflush_r+0x62>
 8012720:	6829      	ldr	r1, [r5, #0]
 8012722:	291d      	cmp	r1, #29
 8012724:	d82b      	bhi.n	801277e <__sflush_r+0xb2>
 8012726:	4a2a      	ldr	r2, [pc, #168]	@ (80127d0 <__sflush_r+0x104>)
 8012728:	40ca      	lsrs	r2, r1
 801272a:	07d6      	lsls	r6, r2, #31
 801272c:	d527      	bpl.n	801277e <__sflush_r+0xb2>
 801272e:	2200      	movs	r2, #0
 8012730:	6062      	str	r2, [r4, #4]
 8012732:	04d9      	lsls	r1, r3, #19
 8012734:	6922      	ldr	r2, [r4, #16]
 8012736:	6022      	str	r2, [r4, #0]
 8012738:	d504      	bpl.n	8012744 <__sflush_r+0x78>
 801273a:	1c42      	adds	r2, r0, #1
 801273c:	d101      	bne.n	8012742 <__sflush_r+0x76>
 801273e:	682b      	ldr	r3, [r5, #0]
 8012740:	b903      	cbnz	r3, 8012744 <__sflush_r+0x78>
 8012742:	6560      	str	r0, [r4, #84]	@ 0x54
 8012744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012746:	602f      	str	r7, [r5, #0]
 8012748:	b1b9      	cbz	r1, 801277a <__sflush_r+0xae>
 801274a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801274e:	4299      	cmp	r1, r3
 8012750:	d002      	beq.n	8012758 <__sflush_r+0x8c>
 8012752:	4628      	mov	r0, r5
 8012754:	f7fe fae8 	bl	8010d28 <_free_r>
 8012758:	2300      	movs	r3, #0
 801275a:	6363      	str	r3, [r4, #52]	@ 0x34
 801275c:	e00d      	b.n	801277a <__sflush_r+0xae>
 801275e:	2301      	movs	r3, #1
 8012760:	4628      	mov	r0, r5
 8012762:	47b0      	blx	r6
 8012764:	4602      	mov	r2, r0
 8012766:	1c50      	adds	r0, r2, #1
 8012768:	d1c9      	bne.n	80126fe <__sflush_r+0x32>
 801276a:	682b      	ldr	r3, [r5, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d0c6      	beq.n	80126fe <__sflush_r+0x32>
 8012770:	2b1d      	cmp	r3, #29
 8012772:	d001      	beq.n	8012778 <__sflush_r+0xac>
 8012774:	2b16      	cmp	r3, #22
 8012776:	d11e      	bne.n	80127b6 <__sflush_r+0xea>
 8012778:	602f      	str	r7, [r5, #0]
 801277a:	2000      	movs	r0, #0
 801277c:	e022      	b.n	80127c4 <__sflush_r+0xf8>
 801277e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012782:	b21b      	sxth	r3, r3
 8012784:	e01b      	b.n	80127be <__sflush_r+0xf2>
 8012786:	690f      	ldr	r7, [r1, #16]
 8012788:	2f00      	cmp	r7, #0
 801278a:	d0f6      	beq.n	801277a <__sflush_r+0xae>
 801278c:	0793      	lsls	r3, r2, #30
 801278e:	680e      	ldr	r6, [r1, #0]
 8012790:	bf08      	it	eq
 8012792:	694b      	ldreq	r3, [r1, #20]
 8012794:	600f      	str	r7, [r1, #0]
 8012796:	bf18      	it	ne
 8012798:	2300      	movne	r3, #0
 801279a:	eba6 0807 	sub.w	r8, r6, r7
 801279e:	608b      	str	r3, [r1, #8]
 80127a0:	f1b8 0f00 	cmp.w	r8, #0
 80127a4:	dde9      	ble.n	801277a <__sflush_r+0xae>
 80127a6:	6a21      	ldr	r1, [r4, #32]
 80127a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80127aa:	4643      	mov	r3, r8
 80127ac:	463a      	mov	r2, r7
 80127ae:	4628      	mov	r0, r5
 80127b0:	47b0      	blx	r6
 80127b2:	2800      	cmp	r0, #0
 80127b4:	dc08      	bgt.n	80127c8 <__sflush_r+0xfc>
 80127b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127be:	81a3      	strh	r3, [r4, #12]
 80127c0:	f04f 30ff 	mov.w	r0, #4294967295
 80127c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c8:	4407      	add	r7, r0
 80127ca:	eba8 0800 	sub.w	r8, r8, r0
 80127ce:	e7e7      	b.n	80127a0 <__sflush_r+0xd4>
 80127d0:	20400001 	.word	0x20400001

080127d4 <_fflush_r>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	690b      	ldr	r3, [r1, #16]
 80127d8:	4605      	mov	r5, r0
 80127da:	460c      	mov	r4, r1
 80127dc:	b913      	cbnz	r3, 80127e4 <_fflush_r+0x10>
 80127de:	2500      	movs	r5, #0
 80127e0:	4628      	mov	r0, r5
 80127e2:	bd38      	pop	{r3, r4, r5, pc}
 80127e4:	b118      	cbz	r0, 80127ee <_fflush_r+0x1a>
 80127e6:	6a03      	ldr	r3, [r0, #32]
 80127e8:	b90b      	cbnz	r3, 80127ee <_fflush_r+0x1a>
 80127ea:	f7fd fb13 	bl	800fe14 <__sinit>
 80127ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d0f3      	beq.n	80127de <_fflush_r+0xa>
 80127f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127f8:	07d0      	lsls	r0, r2, #31
 80127fa:	d404      	bmi.n	8012806 <_fflush_r+0x32>
 80127fc:	0599      	lsls	r1, r3, #22
 80127fe:	d402      	bmi.n	8012806 <_fflush_r+0x32>
 8012800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012802:	f7fd fc30 	bl	8010066 <__retarget_lock_acquire_recursive>
 8012806:	4628      	mov	r0, r5
 8012808:	4621      	mov	r1, r4
 801280a:	f7ff ff5f 	bl	80126cc <__sflush_r>
 801280e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012810:	07da      	lsls	r2, r3, #31
 8012812:	4605      	mov	r5, r0
 8012814:	d4e4      	bmi.n	80127e0 <_fflush_r+0xc>
 8012816:	89a3      	ldrh	r3, [r4, #12]
 8012818:	059b      	lsls	r3, r3, #22
 801281a:	d4e1      	bmi.n	80127e0 <_fflush_r+0xc>
 801281c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801281e:	f7fd fc23 	bl	8010068 <__retarget_lock_release_recursive>
 8012822:	e7dd      	b.n	80127e0 <_fflush_r+0xc>

08012824 <memmove>:
 8012824:	4288      	cmp	r0, r1
 8012826:	b510      	push	{r4, lr}
 8012828:	eb01 0402 	add.w	r4, r1, r2
 801282c:	d902      	bls.n	8012834 <memmove+0x10>
 801282e:	4284      	cmp	r4, r0
 8012830:	4623      	mov	r3, r4
 8012832:	d807      	bhi.n	8012844 <memmove+0x20>
 8012834:	1e43      	subs	r3, r0, #1
 8012836:	42a1      	cmp	r1, r4
 8012838:	d008      	beq.n	801284c <memmove+0x28>
 801283a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801283e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012842:	e7f8      	b.n	8012836 <memmove+0x12>
 8012844:	4402      	add	r2, r0
 8012846:	4601      	mov	r1, r0
 8012848:	428a      	cmp	r2, r1
 801284a:	d100      	bne.n	801284e <memmove+0x2a>
 801284c:	bd10      	pop	{r4, pc}
 801284e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012856:	e7f7      	b.n	8012848 <memmove+0x24>

08012858 <strncmp>:
 8012858:	b510      	push	{r4, lr}
 801285a:	b16a      	cbz	r2, 8012878 <strncmp+0x20>
 801285c:	3901      	subs	r1, #1
 801285e:	1884      	adds	r4, r0, r2
 8012860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012864:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012868:	429a      	cmp	r2, r3
 801286a:	d103      	bne.n	8012874 <strncmp+0x1c>
 801286c:	42a0      	cmp	r0, r4
 801286e:	d001      	beq.n	8012874 <strncmp+0x1c>
 8012870:	2a00      	cmp	r2, #0
 8012872:	d1f5      	bne.n	8012860 <strncmp+0x8>
 8012874:	1ad0      	subs	r0, r2, r3
 8012876:	bd10      	pop	{r4, pc}
 8012878:	4610      	mov	r0, r2
 801287a:	e7fc      	b.n	8012876 <strncmp+0x1e>

0801287c <memcpy>:
 801287c:	440a      	add	r2, r1
 801287e:	4291      	cmp	r1, r2
 8012880:	f100 33ff 	add.w	r3, r0, #4294967295
 8012884:	d100      	bne.n	8012888 <memcpy+0xc>
 8012886:	4770      	bx	lr
 8012888:	b510      	push	{r4, lr}
 801288a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801288e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012892:	4291      	cmp	r1, r2
 8012894:	d1f9      	bne.n	801288a <memcpy+0xe>
 8012896:	bd10      	pop	{r4, pc}

08012898 <nan>:
 8012898:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80128a0 <nan+0x8>
 801289c:	4770      	bx	lr
 801289e:	bf00      	nop
 80128a0:	00000000 	.word	0x00000000
 80128a4:	7ff80000 	.word	0x7ff80000

080128a8 <__assert_func>:
 80128a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128aa:	4614      	mov	r4, r2
 80128ac:	461a      	mov	r2, r3
 80128ae:	4b09      	ldr	r3, [pc, #36]	@ (80128d4 <__assert_func+0x2c>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	4605      	mov	r5, r0
 80128b4:	68d8      	ldr	r0, [r3, #12]
 80128b6:	b14c      	cbz	r4, 80128cc <__assert_func+0x24>
 80128b8:	4b07      	ldr	r3, [pc, #28]	@ (80128d8 <__assert_func+0x30>)
 80128ba:	9100      	str	r1, [sp, #0]
 80128bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128c0:	4906      	ldr	r1, [pc, #24]	@ (80128dc <__assert_func+0x34>)
 80128c2:	462b      	mov	r3, r5
 80128c4:	f000 fba8 	bl	8013018 <fiprintf>
 80128c8:	f000 fbb8 	bl	801303c <abort>
 80128cc:	4b04      	ldr	r3, [pc, #16]	@ (80128e0 <__assert_func+0x38>)
 80128ce:	461c      	mov	r4, r3
 80128d0:	e7f3      	b.n	80128ba <__assert_func+0x12>
 80128d2:	bf00      	nop
 80128d4:	2000011c 	.word	0x2000011c
 80128d8:	080146e6 	.word	0x080146e6
 80128dc:	080146f3 	.word	0x080146f3
 80128e0:	08014721 	.word	0x08014721

080128e4 <_calloc_r>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	fba1 5402 	umull	r5, r4, r1, r2
 80128ea:	b934      	cbnz	r4, 80128fa <_calloc_r+0x16>
 80128ec:	4629      	mov	r1, r5
 80128ee:	f7fc fb15 	bl	800ef1c <_malloc_r>
 80128f2:	4606      	mov	r6, r0
 80128f4:	b928      	cbnz	r0, 8012902 <_calloc_r+0x1e>
 80128f6:	4630      	mov	r0, r6
 80128f8:	bd70      	pop	{r4, r5, r6, pc}
 80128fa:	220c      	movs	r2, #12
 80128fc:	6002      	str	r2, [r0, #0]
 80128fe:	2600      	movs	r6, #0
 8012900:	e7f9      	b.n	80128f6 <_calloc_r+0x12>
 8012902:	462a      	mov	r2, r5
 8012904:	4621      	mov	r1, r4
 8012906:	f7fd fb20 	bl	800ff4a <memset>
 801290a:	e7f4      	b.n	80128f6 <_calloc_r+0x12>

0801290c <rshift>:
 801290c:	6903      	ldr	r3, [r0, #16]
 801290e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012916:	ea4f 1261 	mov.w	r2, r1, asr #5
 801291a:	f100 0414 	add.w	r4, r0, #20
 801291e:	dd45      	ble.n	80129ac <rshift+0xa0>
 8012920:	f011 011f 	ands.w	r1, r1, #31
 8012924:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012928:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801292c:	d10c      	bne.n	8012948 <rshift+0x3c>
 801292e:	f100 0710 	add.w	r7, r0, #16
 8012932:	4629      	mov	r1, r5
 8012934:	42b1      	cmp	r1, r6
 8012936:	d334      	bcc.n	80129a2 <rshift+0x96>
 8012938:	1a9b      	subs	r3, r3, r2
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	1eea      	subs	r2, r5, #3
 801293e:	4296      	cmp	r6, r2
 8012940:	bf38      	it	cc
 8012942:	2300      	movcc	r3, #0
 8012944:	4423      	add	r3, r4
 8012946:	e015      	b.n	8012974 <rshift+0x68>
 8012948:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801294c:	f1c1 0820 	rsb	r8, r1, #32
 8012950:	40cf      	lsrs	r7, r1
 8012952:	f105 0e04 	add.w	lr, r5, #4
 8012956:	46a1      	mov	r9, r4
 8012958:	4576      	cmp	r6, lr
 801295a:	46f4      	mov	ip, lr
 801295c:	d815      	bhi.n	801298a <rshift+0x7e>
 801295e:	1a9a      	subs	r2, r3, r2
 8012960:	0092      	lsls	r2, r2, #2
 8012962:	3a04      	subs	r2, #4
 8012964:	3501      	adds	r5, #1
 8012966:	42ae      	cmp	r6, r5
 8012968:	bf38      	it	cc
 801296a:	2200      	movcc	r2, #0
 801296c:	18a3      	adds	r3, r4, r2
 801296e:	50a7      	str	r7, [r4, r2]
 8012970:	b107      	cbz	r7, 8012974 <rshift+0x68>
 8012972:	3304      	adds	r3, #4
 8012974:	1b1a      	subs	r2, r3, r4
 8012976:	42a3      	cmp	r3, r4
 8012978:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801297c:	bf08      	it	eq
 801297e:	2300      	moveq	r3, #0
 8012980:	6102      	str	r2, [r0, #16]
 8012982:	bf08      	it	eq
 8012984:	6143      	streq	r3, [r0, #20]
 8012986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801298a:	f8dc c000 	ldr.w	ip, [ip]
 801298e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012992:	ea4c 0707 	orr.w	r7, ip, r7
 8012996:	f849 7b04 	str.w	r7, [r9], #4
 801299a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801299e:	40cf      	lsrs	r7, r1
 80129a0:	e7da      	b.n	8012958 <rshift+0x4c>
 80129a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80129a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80129aa:	e7c3      	b.n	8012934 <rshift+0x28>
 80129ac:	4623      	mov	r3, r4
 80129ae:	e7e1      	b.n	8012974 <rshift+0x68>

080129b0 <__hexdig_fun>:
 80129b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80129b4:	2b09      	cmp	r3, #9
 80129b6:	d802      	bhi.n	80129be <__hexdig_fun+0xe>
 80129b8:	3820      	subs	r0, #32
 80129ba:	b2c0      	uxtb	r0, r0
 80129bc:	4770      	bx	lr
 80129be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80129c2:	2b05      	cmp	r3, #5
 80129c4:	d801      	bhi.n	80129ca <__hexdig_fun+0x1a>
 80129c6:	3847      	subs	r0, #71	@ 0x47
 80129c8:	e7f7      	b.n	80129ba <__hexdig_fun+0xa>
 80129ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80129ce:	2b05      	cmp	r3, #5
 80129d0:	d801      	bhi.n	80129d6 <__hexdig_fun+0x26>
 80129d2:	3827      	subs	r0, #39	@ 0x27
 80129d4:	e7f1      	b.n	80129ba <__hexdig_fun+0xa>
 80129d6:	2000      	movs	r0, #0
 80129d8:	4770      	bx	lr
	...

080129dc <__gethex>:
 80129dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e0:	b085      	sub	sp, #20
 80129e2:	468a      	mov	sl, r1
 80129e4:	9302      	str	r3, [sp, #8]
 80129e6:	680b      	ldr	r3, [r1, #0]
 80129e8:	9001      	str	r0, [sp, #4]
 80129ea:	4690      	mov	r8, r2
 80129ec:	1c9c      	adds	r4, r3, #2
 80129ee:	46a1      	mov	r9, r4
 80129f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80129f4:	2830      	cmp	r0, #48	@ 0x30
 80129f6:	d0fa      	beq.n	80129ee <__gethex+0x12>
 80129f8:	eba9 0303 	sub.w	r3, r9, r3
 80129fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8012a00:	f7ff ffd6 	bl	80129b0 <__hexdig_fun>
 8012a04:	4605      	mov	r5, r0
 8012a06:	2800      	cmp	r0, #0
 8012a08:	d168      	bne.n	8012adc <__gethex+0x100>
 8012a0a:	49a0      	ldr	r1, [pc, #640]	@ (8012c8c <__gethex+0x2b0>)
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	4648      	mov	r0, r9
 8012a10:	f7ff ff22 	bl	8012858 <strncmp>
 8012a14:	4607      	mov	r7, r0
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d167      	bne.n	8012aea <__gethex+0x10e>
 8012a1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012a1e:	4626      	mov	r6, r4
 8012a20:	f7ff ffc6 	bl	80129b0 <__hexdig_fun>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d062      	beq.n	8012aee <__gethex+0x112>
 8012a28:	4623      	mov	r3, r4
 8012a2a:	7818      	ldrb	r0, [r3, #0]
 8012a2c:	2830      	cmp	r0, #48	@ 0x30
 8012a2e:	4699      	mov	r9, r3
 8012a30:	f103 0301 	add.w	r3, r3, #1
 8012a34:	d0f9      	beq.n	8012a2a <__gethex+0x4e>
 8012a36:	f7ff ffbb 	bl	80129b0 <__hexdig_fun>
 8012a3a:	fab0 f580 	clz	r5, r0
 8012a3e:	096d      	lsrs	r5, r5, #5
 8012a40:	f04f 0b01 	mov.w	fp, #1
 8012a44:	464a      	mov	r2, r9
 8012a46:	4616      	mov	r6, r2
 8012a48:	3201      	adds	r2, #1
 8012a4a:	7830      	ldrb	r0, [r6, #0]
 8012a4c:	f7ff ffb0 	bl	80129b0 <__hexdig_fun>
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d1f8      	bne.n	8012a46 <__gethex+0x6a>
 8012a54:	498d      	ldr	r1, [pc, #564]	@ (8012c8c <__gethex+0x2b0>)
 8012a56:	2201      	movs	r2, #1
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7ff fefd 	bl	8012858 <strncmp>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d13f      	bne.n	8012ae2 <__gethex+0x106>
 8012a62:	b944      	cbnz	r4, 8012a76 <__gethex+0x9a>
 8012a64:	1c74      	adds	r4, r6, #1
 8012a66:	4622      	mov	r2, r4
 8012a68:	4616      	mov	r6, r2
 8012a6a:	3201      	adds	r2, #1
 8012a6c:	7830      	ldrb	r0, [r6, #0]
 8012a6e:	f7ff ff9f 	bl	80129b0 <__hexdig_fun>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d1f8      	bne.n	8012a68 <__gethex+0x8c>
 8012a76:	1ba4      	subs	r4, r4, r6
 8012a78:	00a7      	lsls	r7, r4, #2
 8012a7a:	7833      	ldrb	r3, [r6, #0]
 8012a7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012a80:	2b50      	cmp	r3, #80	@ 0x50
 8012a82:	d13e      	bne.n	8012b02 <__gethex+0x126>
 8012a84:	7873      	ldrb	r3, [r6, #1]
 8012a86:	2b2b      	cmp	r3, #43	@ 0x2b
 8012a88:	d033      	beq.n	8012af2 <__gethex+0x116>
 8012a8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8012a8c:	d034      	beq.n	8012af8 <__gethex+0x11c>
 8012a8e:	1c71      	adds	r1, r6, #1
 8012a90:	2400      	movs	r4, #0
 8012a92:	7808      	ldrb	r0, [r1, #0]
 8012a94:	f7ff ff8c 	bl	80129b0 <__hexdig_fun>
 8012a98:	1e43      	subs	r3, r0, #1
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	2b18      	cmp	r3, #24
 8012a9e:	d830      	bhi.n	8012b02 <__gethex+0x126>
 8012aa0:	f1a0 0210 	sub.w	r2, r0, #16
 8012aa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012aa8:	f7ff ff82 	bl	80129b0 <__hexdig_fun>
 8012aac:	f100 3cff 	add.w	ip, r0, #4294967295
 8012ab0:	fa5f fc8c 	uxtb.w	ip, ip
 8012ab4:	f1bc 0f18 	cmp.w	ip, #24
 8012ab8:	f04f 030a 	mov.w	r3, #10
 8012abc:	d91e      	bls.n	8012afc <__gethex+0x120>
 8012abe:	b104      	cbz	r4, 8012ac2 <__gethex+0xe6>
 8012ac0:	4252      	negs	r2, r2
 8012ac2:	4417      	add	r7, r2
 8012ac4:	f8ca 1000 	str.w	r1, [sl]
 8012ac8:	b1ed      	cbz	r5, 8012b06 <__gethex+0x12a>
 8012aca:	f1bb 0f00 	cmp.w	fp, #0
 8012ace:	bf0c      	ite	eq
 8012ad0:	2506      	moveq	r5, #6
 8012ad2:	2500      	movne	r5, #0
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	b005      	add	sp, #20
 8012ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012adc:	2500      	movs	r5, #0
 8012ade:	462c      	mov	r4, r5
 8012ae0:	e7b0      	b.n	8012a44 <__gethex+0x68>
 8012ae2:	2c00      	cmp	r4, #0
 8012ae4:	d1c7      	bne.n	8012a76 <__gethex+0x9a>
 8012ae6:	4627      	mov	r7, r4
 8012ae8:	e7c7      	b.n	8012a7a <__gethex+0x9e>
 8012aea:	464e      	mov	r6, r9
 8012aec:	462f      	mov	r7, r5
 8012aee:	2501      	movs	r5, #1
 8012af0:	e7c3      	b.n	8012a7a <__gethex+0x9e>
 8012af2:	2400      	movs	r4, #0
 8012af4:	1cb1      	adds	r1, r6, #2
 8012af6:	e7cc      	b.n	8012a92 <__gethex+0xb6>
 8012af8:	2401      	movs	r4, #1
 8012afa:	e7fb      	b.n	8012af4 <__gethex+0x118>
 8012afc:	fb03 0002 	mla	r0, r3, r2, r0
 8012b00:	e7ce      	b.n	8012aa0 <__gethex+0xc4>
 8012b02:	4631      	mov	r1, r6
 8012b04:	e7de      	b.n	8012ac4 <__gethex+0xe8>
 8012b06:	eba6 0309 	sub.w	r3, r6, r9
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	2b07      	cmp	r3, #7
 8012b10:	dc0a      	bgt.n	8012b28 <__gethex+0x14c>
 8012b12:	9801      	ldr	r0, [sp, #4]
 8012b14:	f7fe f952 	bl	8010dbc <_Balloc>
 8012b18:	4604      	mov	r4, r0
 8012b1a:	b940      	cbnz	r0, 8012b2e <__gethex+0x152>
 8012b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8012c90 <__gethex+0x2b4>)
 8012b1e:	4602      	mov	r2, r0
 8012b20:	21e4      	movs	r1, #228	@ 0xe4
 8012b22:	485c      	ldr	r0, [pc, #368]	@ (8012c94 <__gethex+0x2b8>)
 8012b24:	f7ff fec0 	bl	80128a8 <__assert_func>
 8012b28:	3101      	adds	r1, #1
 8012b2a:	105b      	asrs	r3, r3, #1
 8012b2c:	e7ef      	b.n	8012b0e <__gethex+0x132>
 8012b2e:	f100 0a14 	add.w	sl, r0, #20
 8012b32:	2300      	movs	r3, #0
 8012b34:	4655      	mov	r5, sl
 8012b36:	469b      	mov	fp, r3
 8012b38:	45b1      	cmp	r9, r6
 8012b3a:	d337      	bcc.n	8012bac <__gethex+0x1d0>
 8012b3c:	f845 bb04 	str.w	fp, [r5], #4
 8012b40:	eba5 050a 	sub.w	r5, r5, sl
 8012b44:	10ad      	asrs	r5, r5, #2
 8012b46:	6125      	str	r5, [r4, #16]
 8012b48:	4658      	mov	r0, fp
 8012b4a:	f7fe fa29 	bl	8010fa0 <__hi0bits>
 8012b4e:	016d      	lsls	r5, r5, #5
 8012b50:	f8d8 6000 	ldr.w	r6, [r8]
 8012b54:	1a2d      	subs	r5, r5, r0
 8012b56:	42b5      	cmp	r5, r6
 8012b58:	dd54      	ble.n	8012c04 <__gethex+0x228>
 8012b5a:	1bad      	subs	r5, r5, r6
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f7fe fdb5 	bl	80116ce <__any_on>
 8012b64:	4681      	mov	r9, r0
 8012b66:	b178      	cbz	r0, 8012b88 <__gethex+0x1ac>
 8012b68:	1e6b      	subs	r3, r5, #1
 8012b6a:	1159      	asrs	r1, r3, #5
 8012b6c:	f003 021f 	and.w	r2, r3, #31
 8012b70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012b74:	f04f 0901 	mov.w	r9, #1
 8012b78:	fa09 f202 	lsl.w	r2, r9, r2
 8012b7c:	420a      	tst	r2, r1
 8012b7e:	d003      	beq.n	8012b88 <__gethex+0x1ac>
 8012b80:	454b      	cmp	r3, r9
 8012b82:	dc36      	bgt.n	8012bf2 <__gethex+0x216>
 8012b84:	f04f 0902 	mov.w	r9, #2
 8012b88:	4629      	mov	r1, r5
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f7ff febe 	bl	801290c <rshift>
 8012b90:	442f      	add	r7, r5
 8012b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b96:	42bb      	cmp	r3, r7
 8012b98:	da42      	bge.n	8012c20 <__gethex+0x244>
 8012b9a:	9801      	ldr	r0, [sp, #4]
 8012b9c:	4621      	mov	r1, r4
 8012b9e:	f7fe f94d 	bl	8010e3c <_Bfree>
 8012ba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	6013      	str	r3, [r2, #0]
 8012ba8:	25a3      	movs	r5, #163	@ 0xa3
 8012baa:	e793      	b.n	8012ad4 <__gethex+0xf8>
 8012bac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012bb0:	2a2e      	cmp	r2, #46	@ 0x2e
 8012bb2:	d012      	beq.n	8012bda <__gethex+0x1fe>
 8012bb4:	2b20      	cmp	r3, #32
 8012bb6:	d104      	bne.n	8012bc2 <__gethex+0x1e6>
 8012bb8:	f845 bb04 	str.w	fp, [r5], #4
 8012bbc:	f04f 0b00 	mov.w	fp, #0
 8012bc0:	465b      	mov	r3, fp
 8012bc2:	7830      	ldrb	r0, [r6, #0]
 8012bc4:	9303      	str	r3, [sp, #12]
 8012bc6:	f7ff fef3 	bl	80129b0 <__hexdig_fun>
 8012bca:	9b03      	ldr	r3, [sp, #12]
 8012bcc:	f000 000f 	and.w	r0, r0, #15
 8012bd0:	4098      	lsls	r0, r3
 8012bd2:	ea4b 0b00 	orr.w	fp, fp, r0
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	e7ae      	b.n	8012b38 <__gethex+0x15c>
 8012bda:	45b1      	cmp	r9, r6
 8012bdc:	d8ea      	bhi.n	8012bb4 <__gethex+0x1d8>
 8012bde:	492b      	ldr	r1, [pc, #172]	@ (8012c8c <__gethex+0x2b0>)
 8012be0:	9303      	str	r3, [sp, #12]
 8012be2:	2201      	movs	r2, #1
 8012be4:	4630      	mov	r0, r6
 8012be6:	f7ff fe37 	bl	8012858 <strncmp>
 8012bea:	9b03      	ldr	r3, [sp, #12]
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d1e1      	bne.n	8012bb4 <__gethex+0x1d8>
 8012bf0:	e7a2      	b.n	8012b38 <__gethex+0x15c>
 8012bf2:	1ea9      	subs	r1, r5, #2
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f7fe fd6a 	bl	80116ce <__any_on>
 8012bfa:	2800      	cmp	r0, #0
 8012bfc:	d0c2      	beq.n	8012b84 <__gethex+0x1a8>
 8012bfe:	f04f 0903 	mov.w	r9, #3
 8012c02:	e7c1      	b.n	8012b88 <__gethex+0x1ac>
 8012c04:	da09      	bge.n	8012c1a <__gethex+0x23e>
 8012c06:	1b75      	subs	r5, r6, r5
 8012c08:	4621      	mov	r1, r4
 8012c0a:	9801      	ldr	r0, [sp, #4]
 8012c0c:	462a      	mov	r2, r5
 8012c0e:	f7fe fb25 	bl	801125c <__lshift>
 8012c12:	1b7f      	subs	r7, r7, r5
 8012c14:	4604      	mov	r4, r0
 8012c16:	f100 0a14 	add.w	sl, r0, #20
 8012c1a:	f04f 0900 	mov.w	r9, #0
 8012c1e:	e7b8      	b.n	8012b92 <__gethex+0x1b6>
 8012c20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012c24:	42bd      	cmp	r5, r7
 8012c26:	dd6f      	ble.n	8012d08 <__gethex+0x32c>
 8012c28:	1bed      	subs	r5, r5, r7
 8012c2a:	42ae      	cmp	r6, r5
 8012c2c:	dc34      	bgt.n	8012c98 <__gethex+0x2bc>
 8012c2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012c32:	2b02      	cmp	r3, #2
 8012c34:	d022      	beq.n	8012c7c <__gethex+0x2a0>
 8012c36:	2b03      	cmp	r3, #3
 8012c38:	d024      	beq.n	8012c84 <__gethex+0x2a8>
 8012c3a:	2b01      	cmp	r3, #1
 8012c3c:	d115      	bne.n	8012c6a <__gethex+0x28e>
 8012c3e:	42ae      	cmp	r6, r5
 8012c40:	d113      	bne.n	8012c6a <__gethex+0x28e>
 8012c42:	2e01      	cmp	r6, #1
 8012c44:	d10b      	bne.n	8012c5e <__gethex+0x282>
 8012c46:	9a02      	ldr	r2, [sp, #8]
 8012c48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c4c:	6013      	str	r3, [r2, #0]
 8012c4e:	2301      	movs	r3, #1
 8012c50:	6123      	str	r3, [r4, #16]
 8012c52:	f8ca 3000 	str.w	r3, [sl]
 8012c56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c58:	2562      	movs	r5, #98	@ 0x62
 8012c5a:	601c      	str	r4, [r3, #0]
 8012c5c:	e73a      	b.n	8012ad4 <__gethex+0xf8>
 8012c5e:	1e71      	subs	r1, r6, #1
 8012c60:	4620      	mov	r0, r4
 8012c62:	f7fe fd34 	bl	80116ce <__any_on>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d1ed      	bne.n	8012c46 <__gethex+0x26a>
 8012c6a:	9801      	ldr	r0, [sp, #4]
 8012c6c:	4621      	mov	r1, r4
 8012c6e:	f7fe f8e5 	bl	8010e3c <_Bfree>
 8012c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c74:	2300      	movs	r3, #0
 8012c76:	6013      	str	r3, [r2, #0]
 8012c78:	2550      	movs	r5, #80	@ 0x50
 8012c7a:	e72b      	b.n	8012ad4 <__gethex+0xf8>
 8012c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d1f3      	bne.n	8012c6a <__gethex+0x28e>
 8012c82:	e7e0      	b.n	8012c46 <__gethex+0x26a>
 8012c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d1dd      	bne.n	8012c46 <__gethex+0x26a>
 8012c8a:	e7ee      	b.n	8012c6a <__gethex+0x28e>
 8012c8c:	080146cb 	.word	0x080146cb
 8012c90:	08014661 	.word	0x08014661
 8012c94:	08014722 	.word	0x08014722
 8012c98:	1e6f      	subs	r7, r5, #1
 8012c9a:	f1b9 0f00 	cmp.w	r9, #0
 8012c9e:	d130      	bne.n	8012d02 <__gethex+0x326>
 8012ca0:	b127      	cbz	r7, 8012cac <__gethex+0x2d0>
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f7fe fd12 	bl	80116ce <__any_on>
 8012caa:	4681      	mov	r9, r0
 8012cac:	117a      	asrs	r2, r7, #5
 8012cae:	2301      	movs	r3, #1
 8012cb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012cb4:	f007 071f 	and.w	r7, r7, #31
 8012cb8:	40bb      	lsls	r3, r7
 8012cba:	4213      	tst	r3, r2
 8012cbc:	4629      	mov	r1, r5
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	bf18      	it	ne
 8012cc2:	f049 0902 	orrne.w	r9, r9, #2
 8012cc6:	f7ff fe21 	bl	801290c <rshift>
 8012cca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012cce:	1b76      	subs	r6, r6, r5
 8012cd0:	2502      	movs	r5, #2
 8012cd2:	f1b9 0f00 	cmp.w	r9, #0
 8012cd6:	d047      	beq.n	8012d68 <__gethex+0x38c>
 8012cd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012cdc:	2b02      	cmp	r3, #2
 8012cde:	d015      	beq.n	8012d0c <__gethex+0x330>
 8012ce0:	2b03      	cmp	r3, #3
 8012ce2:	d017      	beq.n	8012d14 <__gethex+0x338>
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	d109      	bne.n	8012cfc <__gethex+0x320>
 8012ce8:	f019 0f02 	tst.w	r9, #2
 8012cec:	d006      	beq.n	8012cfc <__gethex+0x320>
 8012cee:	f8da 3000 	ldr.w	r3, [sl]
 8012cf2:	ea49 0903 	orr.w	r9, r9, r3
 8012cf6:	f019 0f01 	tst.w	r9, #1
 8012cfa:	d10e      	bne.n	8012d1a <__gethex+0x33e>
 8012cfc:	f045 0510 	orr.w	r5, r5, #16
 8012d00:	e032      	b.n	8012d68 <__gethex+0x38c>
 8012d02:	f04f 0901 	mov.w	r9, #1
 8012d06:	e7d1      	b.n	8012cac <__gethex+0x2d0>
 8012d08:	2501      	movs	r5, #1
 8012d0a:	e7e2      	b.n	8012cd2 <__gethex+0x2f6>
 8012d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d0e:	f1c3 0301 	rsb	r3, r3, #1
 8012d12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d0f0      	beq.n	8012cfc <__gethex+0x320>
 8012d1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012d1e:	f104 0314 	add.w	r3, r4, #20
 8012d22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012d26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012d2a:	f04f 0c00 	mov.w	ip, #0
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012d38:	d01b      	beq.n	8012d72 <__gethex+0x396>
 8012d3a:	3201      	adds	r2, #1
 8012d3c:	6002      	str	r2, [r0, #0]
 8012d3e:	2d02      	cmp	r5, #2
 8012d40:	f104 0314 	add.w	r3, r4, #20
 8012d44:	d13c      	bne.n	8012dc0 <__gethex+0x3e4>
 8012d46:	f8d8 2000 	ldr.w	r2, [r8]
 8012d4a:	3a01      	subs	r2, #1
 8012d4c:	42b2      	cmp	r2, r6
 8012d4e:	d109      	bne.n	8012d64 <__gethex+0x388>
 8012d50:	1171      	asrs	r1, r6, #5
 8012d52:	2201      	movs	r2, #1
 8012d54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d58:	f006 061f 	and.w	r6, r6, #31
 8012d5c:	fa02 f606 	lsl.w	r6, r2, r6
 8012d60:	421e      	tst	r6, r3
 8012d62:	d13a      	bne.n	8012dda <__gethex+0x3fe>
 8012d64:	f045 0520 	orr.w	r5, r5, #32
 8012d68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d6a:	601c      	str	r4, [r3, #0]
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	601f      	str	r7, [r3, #0]
 8012d70:	e6b0      	b.n	8012ad4 <__gethex+0xf8>
 8012d72:	4299      	cmp	r1, r3
 8012d74:	f843 cc04 	str.w	ip, [r3, #-4]
 8012d78:	d8d9      	bhi.n	8012d2e <__gethex+0x352>
 8012d7a:	68a3      	ldr	r3, [r4, #8]
 8012d7c:	459b      	cmp	fp, r3
 8012d7e:	db17      	blt.n	8012db0 <__gethex+0x3d4>
 8012d80:	6861      	ldr	r1, [r4, #4]
 8012d82:	9801      	ldr	r0, [sp, #4]
 8012d84:	3101      	adds	r1, #1
 8012d86:	f7fe f819 	bl	8010dbc <_Balloc>
 8012d8a:	4681      	mov	r9, r0
 8012d8c:	b918      	cbnz	r0, 8012d96 <__gethex+0x3ba>
 8012d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8012df8 <__gethex+0x41c>)
 8012d90:	4602      	mov	r2, r0
 8012d92:	2184      	movs	r1, #132	@ 0x84
 8012d94:	e6c5      	b.n	8012b22 <__gethex+0x146>
 8012d96:	6922      	ldr	r2, [r4, #16]
 8012d98:	3202      	adds	r2, #2
 8012d9a:	f104 010c 	add.w	r1, r4, #12
 8012d9e:	0092      	lsls	r2, r2, #2
 8012da0:	300c      	adds	r0, #12
 8012da2:	f7ff fd6b 	bl	801287c <memcpy>
 8012da6:	4621      	mov	r1, r4
 8012da8:	9801      	ldr	r0, [sp, #4]
 8012daa:	f7fe f847 	bl	8010e3c <_Bfree>
 8012dae:	464c      	mov	r4, r9
 8012db0:	6923      	ldr	r3, [r4, #16]
 8012db2:	1c5a      	adds	r2, r3, #1
 8012db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012db8:	6122      	str	r2, [r4, #16]
 8012dba:	2201      	movs	r2, #1
 8012dbc:	615a      	str	r2, [r3, #20]
 8012dbe:	e7be      	b.n	8012d3e <__gethex+0x362>
 8012dc0:	6922      	ldr	r2, [r4, #16]
 8012dc2:	455a      	cmp	r2, fp
 8012dc4:	dd0b      	ble.n	8012dde <__gethex+0x402>
 8012dc6:	2101      	movs	r1, #1
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f7ff fd9f 	bl	801290c <rshift>
 8012dce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012dd2:	3701      	adds	r7, #1
 8012dd4:	42bb      	cmp	r3, r7
 8012dd6:	f6ff aee0 	blt.w	8012b9a <__gethex+0x1be>
 8012dda:	2501      	movs	r5, #1
 8012ddc:	e7c2      	b.n	8012d64 <__gethex+0x388>
 8012dde:	f016 061f 	ands.w	r6, r6, #31
 8012de2:	d0fa      	beq.n	8012dda <__gethex+0x3fe>
 8012de4:	4453      	add	r3, sl
 8012de6:	f1c6 0620 	rsb	r6, r6, #32
 8012dea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012dee:	f7fe f8d7 	bl	8010fa0 <__hi0bits>
 8012df2:	42b0      	cmp	r0, r6
 8012df4:	dbe7      	blt.n	8012dc6 <__gethex+0x3ea>
 8012df6:	e7f0      	b.n	8012dda <__gethex+0x3fe>
 8012df8:	08014661 	.word	0x08014661

08012dfc <L_shift>:
 8012dfc:	f1c2 0208 	rsb	r2, r2, #8
 8012e00:	0092      	lsls	r2, r2, #2
 8012e02:	b570      	push	{r4, r5, r6, lr}
 8012e04:	f1c2 0620 	rsb	r6, r2, #32
 8012e08:	6843      	ldr	r3, [r0, #4]
 8012e0a:	6804      	ldr	r4, [r0, #0]
 8012e0c:	fa03 f506 	lsl.w	r5, r3, r6
 8012e10:	432c      	orrs	r4, r5
 8012e12:	40d3      	lsrs	r3, r2
 8012e14:	6004      	str	r4, [r0, #0]
 8012e16:	f840 3f04 	str.w	r3, [r0, #4]!
 8012e1a:	4288      	cmp	r0, r1
 8012e1c:	d3f4      	bcc.n	8012e08 <L_shift+0xc>
 8012e1e:	bd70      	pop	{r4, r5, r6, pc}

08012e20 <__match>:
 8012e20:	b530      	push	{r4, r5, lr}
 8012e22:	6803      	ldr	r3, [r0, #0]
 8012e24:	3301      	adds	r3, #1
 8012e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e2a:	b914      	cbnz	r4, 8012e32 <__match+0x12>
 8012e2c:	6003      	str	r3, [r0, #0]
 8012e2e:	2001      	movs	r0, #1
 8012e30:	bd30      	pop	{r4, r5, pc}
 8012e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012e3a:	2d19      	cmp	r5, #25
 8012e3c:	bf98      	it	ls
 8012e3e:	3220      	addls	r2, #32
 8012e40:	42a2      	cmp	r2, r4
 8012e42:	d0f0      	beq.n	8012e26 <__match+0x6>
 8012e44:	2000      	movs	r0, #0
 8012e46:	e7f3      	b.n	8012e30 <__match+0x10>

08012e48 <__hexnan>:
 8012e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4c:	680b      	ldr	r3, [r1, #0]
 8012e4e:	6801      	ldr	r1, [r0, #0]
 8012e50:	115e      	asrs	r6, r3, #5
 8012e52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012e56:	f013 031f 	ands.w	r3, r3, #31
 8012e5a:	b087      	sub	sp, #28
 8012e5c:	bf18      	it	ne
 8012e5e:	3604      	addne	r6, #4
 8012e60:	2500      	movs	r5, #0
 8012e62:	1f37      	subs	r7, r6, #4
 8012e64:	4682      	mov	sl, r0
 8012e66:	4690      	mov	r8, r2
 8012e68:	9301      	str	r3, [sp, #4]
 8012e6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8012e6e:	46b9      	mov	r9, r7
 8012e70:	463c      	mov	r4, r7
 8012e72:	9502      	str	r5, [sp, #8]
 8012e74:	46ab      	mov	fp, r5
 8012e76:	784a      	ldrb	r2, [r1, #1]
 8012e78:	1c4b      	adds	r3, r1, #1
 8012e7a:	9303      	str	r3, [sp, #12]
 8012e7c:	b342      	cbz	r2, 8012ed0 <__hexnan+0x88>
 8012e7e:	4610      	mov	r0, r2
 8012e80:	9105      	str	r1, [sp, #20]
 8012e82:	9204      	str	r2, [sp, #16]
 8012e84:	f7ff fd94 	bl	80129b0 <__hexdig_fun>
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	d151      	bne.n	8012f30 <__hexnan+0xe8>
 8012e8c:	9a04      	ldr	r2, [sp, #16]
 8012e8e:	9905      	ldr	r1, [sp, #20]
 8012e90:	2a20      	cmp	r2, #32
 8012e92:	d818      	bhi.n	8012ec6 <__hexnan+0x7e>
 8012e94:	9b02      	ldr	r3, [sp, #8]
 8012e96:	459b      	cmp	fp, r3
 8012e98:	dd13      	ble.n	8012ec2 <__hexnan+0x7a>
 8012e9a:	454c      	cmp	r4, r9
 8012e9c:	d206      	bcs.n	8012eac <__hexnan+0x64>
 8012e9e:	2d07      	cmp	r5, #7
 8012ea0:	dc04      	bgt.n	8012eac <__hexnan+0x64>
 8012ea2:	462a      	mov	r2, r5
 8012ea4:	4649      	mov	r1, r9
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f7ff ffa8 	bl	8012dfc <L_shift>
 8012eac:	4544      	cmp	r4, r8
 8012eae:	d952      	bls.n	8012f56 <__hexnan+0x10e>
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	f1a4 0904 	sub.w	r9, r4, #4
 8012eb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8012eba:	f8cd b008 	str.w	fp, [sp, #8]
 8012ebe:	464c      	mov	r4, r9
 8012ec0:	461d      	mov	r5, r3
 8012ec2:	9903      	ldr	r1, [sp, #12]
 8012ec4:	e7d7      	b.n	8012e76 <__hexnan+0x2e>
 8012ec6:	2a29      	cmp	r2, #41	@ 0x29
 8012ec8:	d157      	bne.n	8012f7a <__hexnan+0x132>
 8012eca:	3102      	adds	r1, #2
 8012ecc:	f8ca 1000 	str.w	r1, [sl]
 8012ed0:	f1bb 0f00 	cmp.w	fp, #0
 8012ed4:	d051      	beq.n	8012f7a <__hexnan+0x132>
 8012ed6:	454c      	cmp	r4, r9
 8012ed8:	d206      	bcs.n	8012ee8 <__hexnan+0xa0>
 8012eda:	2d07      	cmp	r5, #7
 8012edc:	dc04      	bgt.n	8012ee8 <__hexnan+0xa0>
 8012ede:	462a      	mov	r2, r5
 8012ee0:	4649      	mov	r1, r9
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f7ff ff8a 	bl	8012dfc <L_shift>
 8012ee8:	4544      	cmp	r4, r8
 8012eea:	d936      	bls.n	8012f5a <__hexnan+0x112>
 8012eec:	f1a8 0204 	sub.w	r2, r8, #4
 8012ef0:	4623      	mov	r3, r4
 8012ef2:	f853 1b04 	ldr.w	r1, [r3], #4
 8012ef6:	f842 1f04 	str.w	r1, [r2, #4]!
 8012efa:	429f      	cmp	r7, r3
 8012efc:	d2f9      	bcs.n	8012ef2 <__hexnan+0xaa>
 8012efe:	1b3b      	subs	r3, r7, r4
 8012f00:	f023 0303 	bic.w	r3, r3, #3
 8012f04:	3304      	adds	r3, #4
 8012f06:	3401      	adds	r4, #1
 8012f08:	3e03      	subs	r6, #3
 8012f0a:	42b4      	cmp	r4, r6
 8012f0c:	bf88      	it	hi
 8012f0e:	2304      	movhi	r3, #4
 8012f10:	4443      	add	r3, r8
 8012f12:	2200      	movs	r2, #0
 8012f14:	f843 2b04 	str.w	r2, [r3], #4
 8012f18:	429f      	cmp	r7, r3
 8012f1a:	d2fb      	bcs.n	8012f14 <__hexnan+0xcc>
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	b91b      	cbnz	r3, 8012f28 <__hexnan+0xe0>
 8012f20:	4547      	cmp	r7, r8
 8012f22:	d128      	bne.n	8012f76 <__hexnan+0x12e>
 8012f24:	2301      	movs	r3, #1
 8012f26:	603b      	str	r3, [r7, #0]
 8012f28:	2005      	movs	r0, #5
 8012f2a:	b007      	add	sp, #28
 8012f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f30:	3501      	adds	r5, #1
 8012f32:	2d08      	cmp	r5, #8
 8012f34:	f10b 0b01 	add.w	fp, fp, #1
 8012f38:	dd06      	ble.n	8012f48 <__hexnan+0x100>
 8012f3a:	4544      	cmp	r4, r8
 8012f3c:	d9c1      	bls.n	8012ec2 <__hexnan+0x7a>
 8012f3e:	2300      	movs	r3, #0
 8012f40:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f44:	2501      	movs	r5, #1
 8012f46:	3c04      	subs	r4, #4
 8012f48:	6822      	ldr	r2, [r4, #0]
 8012f4a:	f000 000f 	and.w	r0, r0, #15
 8012f4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012f52:	6020      	str	r0, [r4, #0]
 8012f54:	e7b5      	b.n	8012ec2 <__hexnan+0x7a>
 8012f56:	2508      	movs	r5, #8
 8012f58:	e7b3      	b.n	8012ec2 <__hexnan+0x7a>
 8012f5a:	9b01      	ldr	r3, [sp, #4]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d0dd      	beq.n	8012f1c <__hexnan+0xd4>
 8012f60:	f1c3 0320 	rsb	r3, r3, #32
 8012f64:	f04f 32ff 	mov.w	r2, #4294967295
 8012f68:	40da      	lsrs	r2, r3
 8012f6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012f6e:	4013      	ands	r3, r2
 8012f70:	f846 3c04 	str.w	r3, [r6, #-4]
 8012f74:	e7d2      	b.n	8012f1c <__hexnan+0xd4>
 8012f76:	3f04      	subs	r7, #4
 8012f78:	e7d0      	b.n	8012f1c <__hexnan+0xd4>
 8012f7a:	2004      	movs	r0, #4
 8012f7c:	e7d5      	b.n	8012f2a <__hexnan+0xe2>

08012f7e <__ascii_mbtowc>:
 8012f7e:	b082      	sub	sp, #8
 8012f80:	b901      	cbnz	r1, 8012f84 <__ascii_mbtowc+0x6>
 8012f82:	a901      	add	r1, sp, #4
 8012f84:	b142      	cbz	r2, 8012f98 <__ascii_mbtowc+0x1a>
 8012f86:	b14b      	cbz	r3, 8012f9c <__ascii_mbtowc+0x1e>
 8012f88:	7813      	ldrb	r3, [r2, #0]
 8012f8a:	600b      	str	r3, [r1, #0]
 8012f8c:	7812      	ldrb	r2, [r2, #0]
 8012f8e:	1e10      	subs	r0, r2, #0
 8012f90:	bf18      	it	ne
 8012f92:	2001      	movne	r0, #1
 8012f94:	b002      	add	sp, #8
 8012f96:	4770      	bx	lr
 8012f98:	4610      	mov	r0, r2
 8012f9a:	e7fb      	b.n	8012f94 <__ascii_mbtowc+0x16>
 8012f9c:	f06f 0001 	mvn.w	r0, #1
 8012fa0:	e7f8      	b.n	8012f94 <__ascii_mbtowc+0x16>

08012fa2 <_realloc_r>:
 8012fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa6:	4607      	mov	r7, r0
 8012fa8:	4614      	mov	r4, r2
 8012faa:	460d      	mov	r5, r1
 8012fac:	b921      	cbnz	r1, 8012fb8 <_realloc_r+0x16>
 8012fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb2:	4611      	mov	r1, r2
 8012fb4:	f7fb bfb2 	b.w	800ef1c <_malloc_r>
 8012fb8:	b92a      	cbnz	r2, 8012fc6 <_realloc_r+0x24>
 8012fba:	f7fd feb5 	bl	8010d28 <_free_r>
 8012fbe:	4625      	mov	r5, r4
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc6:	f000 f840 	bl	801304a <_malloc_usable_size_r>
 8012fca:	4284      	cmp	r4, r0
 8012fcc:	4606      	mov	r6, r0
 8012fce:	d802      	bhi.n	8012fd6 <_realloc_r+0x34>
 8012fd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012fd4:	d8f4      	bhi.n	8012fc0 <_realloc_r+0x1e>
 8012fd6:	4621      	mov	r1, r4
 8012fd8:	4638      	mov	r0, r7
 8012fda:	f7fb ff9f 	bl	800ef1c <_malloc_r>
 8012fde:	4680      	mov	r8, r0
 8012fe0:	b908      	cbnz	r0, 8012fe6 <_realloc_r+0x44>
 8012fe2:	4645      	mov	r5, r8
 8012fe4:	e7ec      	b.n	8012fc0 <_realloc_r+0x1e>
 8012fe6:	42b4      	cmp	r4, r6
 8012fe8:	4622      	mov	r2, r4
 8012fea:	4629      	mov	r1, r5
 8012fec:	bf28      	it	cs
 8012fee:	4632      	movcs	r2, r6
 8012ff0:	f7ff fc44 	bl	801287c <memcpy>
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	4638      	mov	r0, r7
 8012ff8:	f7fd fe96 	bl	8010d28 <_free_r>
 8012ffc:	e7f1      	b.n	8012fe2 <_realloc_r+0x40>

08012ffe <__ascii_wctomb>:
 8012ffe:	4603      	mov	r3, r0
 8013000:	4608      	mov	r0, r1
 8013002:	b141      	cbz	r1, 8013016 <__ascii_wctomb+0x18>
 8013004:	2aff      	cmp	r2, #255	@ 0xff
 8013006:	d904      	bls.n	8013012 <__ascii_wctomb+0x14>
 8013008:	228a      	movs	r2, #138	@ 0x8a
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	f04f 30ff 	mov.w	r0, #4294967295
 8013010:	4770      	bx	lr
 8013012:	700a      	strb	r2, [r1, #0]
 8013014:	2001      	movs	r0, #1
 8013016:	4770      	bx	lr

08013018 <fiprintf>:
 8013018:	b40e      	push	{r1, r2, r3}
 801301a:	b503      	push	{r0, r1, lr}
 801301c:	4601      	mov	r1, r0
 801301e:	ab03      	add	r3, sp, #12
 8013020:	4805      	ldr	r0, [pc, #20]	@ (8013038 <fiprintf+0x20>)
 8013022:	f853 2b04 	ldr.w	r2, [r3], #4
 8013026:	6800      	ldr	r0, [r0, #0]
 8013028:	9301      	str	r3, [sp, #4]
 801302a:	f000 f83f 	bl	80130ac <_vfiprintf_r>
 801302e:	b002      	add	sp, #8
 8013030:	f85d eb04 	ldr.w	lr, [sp], #4
 8013034:	b003      	add	sp, #12
 8013036:	4770      	bx	lr
 8013038:	2000011c 	.word	0x2000011c

0801303c <abort>:
 801303c:	b508      	push	{r3, lr}
 801303e:	2006      	movs	r0, #6
 8013040:	f000 fa08 	bl	8013454 <raise>
 8013044:	2001      	movs	r0, #1
 8013046:	f7f0 f87c 	bl	8003142 <_exit>

0801304a <_malloc_usable_size_r>:
 801304a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801304e:	1f18      	subs	r0, r3, #4
 8013050:	2b00      	cmp	r3, #0
 8013052:	bfbc      	itt	lt
 8013054:	580b      	ldrlt	r3, [r1, r0]
 8013056:	18c0      	addlt	r0, r0, r3
 8013058:	4770      	bx	lr

0801305a <__sfputc_r>:
 801305a:	6893      	ldr	r3, [r2, #8]
 801305c:	3b01      	subs	r3, #1
 801305e:	2b00      	cmp	r3, #0
 8013060:	b410      	push	{r4}
 8013062:	6093      	str	r3, [r2, #8]
 8013064:	da08      	bge.n	8013078 <__sfputc_r+0x1e>
 8013066:	6994      	ldr	r4, [r2, #24]
 8013068:	42a3      	cmp	r3, r4
 801306a:	db01      	blt.n	8013070 <__sfputc_r+0x16>
 801306c:	290a      	cmp	r1, #10
 801306e:	d103      	bne.n	8013078 <__sfputc_r+0x1e>
 8013070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013074:	f000 b932 	b.w	80132dc <__swbuf_r>
 8013078:	6813      	ldr	r3, [r2, #0]
 801307a:	1c58      	adds	r0, r3, #1
 801307c:	6010      	str	r0, [r2, #0]
 801307e:	7019      	strb	r1, [r3, #0]
 8013080:	4608      	mov	r0, r1
 8013082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013086:	4770      	bx	lr

08013088 <__sfputs_r>:
 8013088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308a:	4606      	mov	r6, r0
 801308c:	460f      	mov	r7, r1
 801308e:	4614      	mov	r4, r2
 8013090:	18d5      	adds	r5, r2, r3
 8013092:	42ac      	cmp	r4, r5
 8013094:	d101      	bne.n	801309a <__sfputs_r+0x12>
 8013096:	2000      	movs	r0, #0
 8013098:	e007      	b.n	80130aa <__sfputs_r+0x22>
 801309a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801309e:	463a      	mov	r2, r7
 80130a0:	4630      	mov	r0, r6
 80130a2:	f7ff ffda 	bl	801305a <__sfputc_r>
 80130a6:	1c43      	adds	r3, r0, #1
 80130a8:	d1f3      	bne.n	8013092 <__sfputs_r+0xa>
 80130aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130ac <_vfiprintf_r>:
 80130ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130b0:	460d      	mov	r5, r1
 80130b2:	b09d      	sub	sp, #116	@ 0x74
 80130b4:	4614      	mov	r4, r2
 80130b6:	4698      	mov	r8, r3
 80130b8:	4606      	mov	r6, r0
 80130ba:	b118      	cbz	r0, 80130c4 <_vfiprintf_r+0x18>
 80130bc:	6a03      	ldr	r3, [r0, #32]
 80130be:	b90b      	cbnz	r3, 80130c4 <_vfiprintf_r+0x18>
 80130c0:	f7fc fea8 	bl	800fe14 <__sinit>
 80130c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130c6:	07d9      	lsls	r1, r3, #31
 80130c8:	d405      	bmi.n	80130d6 <_vfiprintf_r+0x2a>
 80130ca:	89ab      	ldrh	r3, [r5, #12]
 80130cc:	059a      	lsls	r2, r3, #22
 80130ce:	d402      	bmi.n	80130d6 <_vfiprintf_r+0x2a>
 80130d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130d2:	f7fc ffc8 	bl	8010066 <__retarget_lock_acquire_recursive>
 80130d6:	89ab      	ldrh	r3, [r5, #12]
 80130d8:	071b      	lsls	r3, r3, #28
 80130da:	d501      	bpl.n	80130e0 <_vfiprintf_r+0x34>
 80130dc:	692b      	ldr	r3, [r5, #16]
 80130de:	b99b      	cbnz	r3, 8013108 <_vfiprintf_r+0x5c>
 80130e0:	4629      	mov	r1, r5
 80130e2:	4630      	mov	r0, r6
 80130e4:	f000 f938 	bl	8013358 <__swsetup_r>
 80130e8:	b170      	cbz	r0, 8013108 <_vfiprintf_r+0x5c>
 80130ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130ec:	07dc      	lsls	r4, r3, #31
 80130ee:	d504      	bpl.n	80130fa <_vfiprintf_r+0x4e>
 80130f0:	f04f 30ff 	mov.w	r0, #4294967295
 80130f4:	b01d      	add	sp, #116	@ 0x74
 80130f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fa:	89ab      	ldrh	r3, [r5, #12]
 80130fc:	0598      	lsls	r0, r3, #22
 80130fe:	d4f7      	bmi.n	80130f0 <_vfiprintf_r+0x44>
 8013100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013102:	f7fc ffb1 	bl	8010068 <__retarget_lock_release_recursive>
 8013106:	e7f3      	b.n	80130f0 <_vfiprintf_r+0x44>
 8013108:	2300      	movs	r3, #0
 801310a:	9309      	str	r3, [sp, #36]	@ 0x24
 801310c:	2320      	movs	r3, #32
 801310e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013112:	f8cd 800c 	str.w	r8, [sp, #12]
 8013116:	2330      	movs	r3, #48	@ 0x30
 8013118:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80132c8 <_vfiprintf_r+0x21c>
 801311c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013120:	f04f 0901 	mov.w	r9, #1
 8013124:	4623      	mov	r3, r4
 8013126:	469a      	mov	sl, r3
 8013128:	f813 2b01 	ldrb.w	r2, [r3], #1
 801312c:	b10a      	cbz	r2, 8013132 <_vfiprintf_r+0x86>
 801312e:	2a25      	cmp	r2, #37	@ 0x25
 8013130:	d1f9      	bne.n	8013126 <_vfiprintf_r+0x7a>
 8013132:	ebba 0b04 	subs.w	fp, sl, r4
 8013136:	d00b      	beq.n	8013150 <_vfiprintf_r+0xa4>
 8013138:	465b      	mov	r3, fp
 801313a:	4622      	mov	r2, r4
 801313c:	4629      	mov	r1, r5
 801313e:	4630      	mov	r0, r6
 8013140:	f7ff ffa2 	bl	8013088 <__sfputs_r>
 8013144:	3001      	adds	r0, #1
 8013146:	f000 80a7 	beq.w	8013298 <_vfiprintf_r+0x1ec>
 801314a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801314c:	445a      	add	r2, fp
 801314e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013150:	f89a 3000 	ldrb.w	r3, [sl]
 8013154:	2b00      	cmp	r3, #0
 8013156:	f000 809f 	beq.w	8013298 <_vfiprintf_r+0x1ec>
 801315a:	2300      	movs	r3, #0
 801315c:	f04f 32ff 	mov.w	r2, #4294967295
 8013160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013164:	f10a 0a01 	add.w	sl, sl, #1
 8013168:	9304      	str	r3, [sp, #16]
 801316a:	9307      	str	r3, [sp, #28]
 801316c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013170:	931a      	str	r3, [sp, #104]	@ 0x68
 8013172:	4654      	mov	r4, sl
 8013174:	2205      	movs	r2, #5
 8013176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801317a:	4853      	ldr	r0, [pc, #332]	@ (80132c8 <_vfiprintf_r+0x21c>)
 801317c:	f7ed f830 	bl	80001e0 <memchr>
 8013180:	9a04      	ldr	r2, [sp, #16]
 8013182:	b9d8      	cbnz	r0, 80131bc <_vfiprintf_r+0x110>
 8013184:	06d1      	lsls	r1, r2, #27
 8013186:	bf44      	itt	mi
 8013188:	2320      	movmi	r3, #32
 801318a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801318e:	0713      	lsls	r3, r2, #28
 8013190:	bf44      	itt	mi
 8013192:	232b      	movmi	r3, #43	@ 0x2b
 8013194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013198:	f89a 3000 	ldrb.w	r3, [sl]
 801319c:	2b2a      	cmp	r3, #42	@ 0x2a
 801319e:	d015      	beq.n	80131cc <_vfiprintf_r+0x120>
 80131a0:	9a07      	ldr	r2, [sp, #28]
 80131a2:	4654      	mov	r4, sl
 80131a4:	2000      	movs	r0, #0
 80131a6:	f04f 0c0a 	mov.w	ip, #10
 80131aa:	4621      	mov	r1, r4
 80131ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131b0:	3b30      	subs	r3, #48	@ 0x30
 80131b2:	2b09      	cmp	r3, #9
 80131b4:	d94b      	bls.n	801324e <_vfiprintf_r+0x1a2>
 80131b6:	b1b0      	cbz	r0, 80131e6 <_vfiprintf_r+0x13a>
 80131b8:	9207      	str	r2, [sp, #28]
 80131ba:	e014      	b.n	80131e6 <_vfiprintf_r+0x13a>
 80131bc:	eba0 0308 	sub.w	r3, r0, r8
 80131c0:	fa09 f303 	lsl.w	r3, r9, r3
 80131c4:	4313      	orrs	r3, r2
 80131c6:	9304      	str	r3, [sp, #16]
 80131c8:	46a2      	mov	sl, r4
 80131ca:	e7d2      	b.n	8013172 <_vfiprintf_r+0xc6>
 80131cc:	9b03      	ldr	r3, [sp, #12]
 80131ce:	1d19      	adds	r1, r3, #4
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	9103      	str	r1, [sp, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	bfbb      	ittet	lt
 80131d8:	425b      	neglt	r3, r3
 80131da:	f042 0202 	orrlt.w	r2, r2, #2
 80131de:	9307      	strge	r3, [sp, #28]
 80131e0:	9307      	strlt	r3, [sp, #28]
 80131e2:	bfb8      	it	lt
 80131e4:	9204      	strlt	r2, [sp, #16]
 80131e6:	7823      	ldrb	r3, [r4, #0]
 80131e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80131ea:	d10a      	bne.n	8013202 <_vfiprintf_r+0x156>
 80131ec:	7863      	ldrb	r3, [r4, #1]
 80131ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80131f0:	d132      	bne.n	8013258 <_vfiprintf_r+0x1ac>
 80131f2:	9b03      	ldr	r3, [sp, #12]
 80131f4:	1d1a      	adds	r2, r3, #4
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	9203      	str	r2, [sp, #12]
 80131fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131fe:	3402      	adds	r4, #2
 8013200:	9305      	str	r3, [sp, #20]
 8013202:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80132d8 <_vfiprintf_r+0x22c>
 8013206:	7821      	ldrb	r1, [r4, #0]
 8013208:	2203      	movs	r2, #3
 801320a:	4650      	mov	r0, sl
 801320c:	f7ec ffe8 	bl	80001e0 <memchr>
 8013210:	b138      	cbz	r0, 8013222 <_vfiprintf_r+0x176>
 8013212:	9b04      	ldr	r3, [sp, #16]
 8013214:	eba0 000a 	sub.w	r0, r0, sl
 8013218:	2240      	movs	r2, #64	@ 0x40
 801321a:	4082      	lsls	r2, r0
 801321c:	4313      	orrs	r3, r2
 801321e:	3401      	adds	r4, #1
 8013220:	9304      	str	r3, [sp, #16]
 8013222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013226:	4829      	ldr	r0, [pc, #164]	@ (80132cc <_vfiprintf_r+0x220>)
 8013228:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801322c:	2206      	movs	r2, #6
 801322e:	f7ec ffd7 	bl	80001e0 <memchr>
 8013232:	2800      	cmp	r0, #0
 8013234:	d03f      	beq.n	80132b6 <_vfiprintf_r+0x20a>
 8013236:	4b26      	ldr	r3, [pc, #152]	@ (80132d0 <_vfiprintf_r+0x224>)
 8013238:	bb1b      	cbnz	r3, 8013282 <_vfiprintf_r+0x1d6>
 801323a:	9b03      	ldr	r3, [sp, #12]
 801323c:	3307      	adds	r3, #7
 801323e:	f023 0307 	bic.w	r3, r3, #7
 8013242:	3308      	adds	r3, #8
 8013244:	9303      	str	r3, [sp, #12]
 8013246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013248:	443b      	add	r3, r7
 801324a:	9309      	str	r3, [sp, #36]	@ 0x24
 801324c:	e76a      	b.n	8013124 <_vfiprintf_r+0x78>
 801324e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013252:	460c      	mov	r4, r1
 8013254:	2001      	movs	r0, #1
 8013256:	e7a8      	b.n	80131aa <_vfiprintf_r+0xfe>
 8013258:	2300      	movs	r3, #0
 801325a:	3401      	adds	r4, #1
 801325c:	9305      	str	r3, [sp, #20]
 801325e:	4619      	mov	r1, r3
 8013260:	f04f 0c0a 	mov.w	ip, #10
 8013264:	4620      	mov	r0, r4
 8013266:	f810 2b01 	ldrb.w	r2, [r0], #1
 801326a:	3a30      	subs	r2, #48	@ 0x30
 801326c:	2a09      	cmp	r2, #9
 801326e:	d903      	bls.n	8013278 <_vfiprintf_r+0x1cc>
 8013270:	2b00      	cmp	r3, #0
 8013272:	d0c6      	beq.n	8013202 <_vfiprintf_r+0x156>
 8013274:	9105      	str	r1, [sp, #20]
 8013276:	e7c4      	b.n	8013202 <_vfiprintf_r+0x156>
 8013278:	fb0c 2101 	mla	r1, ip, r1, r2
 801327c:	4604      	mov	r4, r0
 801327e:	2301      	movs	r3, #1
 8013280:	e7f0      	b.n	8013264 <_vfiprintf_r+0x1b8>
 8013282:	ab03      	add	r3, sp, #12
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	462a      	mov	r2, r5
 8013288:	4b12      	ldr	r3, [pc, #72]	@ (80132d4 <_vfiprintf_r+0x228>)
 801328a:	a904      	add	r1, sp, #16
 801328c:	4630      	mov	r0, r6
 801328e:	f7fb ff71 	bl	800f174 <_printf_float>
 8013292:	4607      	mov	r7, r0
 8013294:	1c78      	adds	r0, r7, #1
 8013296:	d1d6      	bne.n	8013246 <_vfiprintf_r+0x19a>
 8013298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801329a:	07d9      	lsls	r1, r3, #31
 801329c:	d405      	bmi.n	80132aa <_vfiprintf_r+0x1fe>
 801329e:	89ab      	ldrh	r3, [r5, #12]
 80132a0:	059a      	lsls	r2, r3, #22
 80132a2:	d402      	bmi.n	80132aa <_vfiprintf_r+0x1fe>
 80132a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80132a6:	f7fc fedf 	bl	8010068 <__retarget_lock_release_recursive>
 80132aa:	89ab      	ldrh	r3, [r5, #12]
 80132ac:	065b      	lsls	r3, r3, #25
 80132ae:	f53f af1f 	bmi.w	80130f0 <_vfiprintf_r+0x44>
 80132b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132b4:	e71e      	b.n	80130f4 <_vfiprintf_r+0x48>
 80132b6:	ab03      	add	r3, sp, #12
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	462a      	mov	r2, r5
 80132bc:	4b05      	ldr	r3, [pc, #20]	@ (80132d4 <_vfiprintf_r+0x228>)
 80132be:	a904      	add	r1, sp, #16
 80132c0:	4630      	mov	r0, r6
 80132c2:	f7fc f9ef 	bl	800f6a4 <_printf_i>
 80132c6:	e7e4      	b.n	8013292 <_vfiprintf_r+0x1e6>
 80132c8:	080146cd 	.word	0x080146cd
 80132cc:	080146d7 	.word	0x080146d7
 80132d0:	0800f175 	.word	0x0800f175
 80132d4:	08013089 	.word	0x08013089
 80132d8:	080146d3 	.word	0x080146d3

080132dc <__swbuf_r>:
 80132dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132de:	460e      	mov	r6, r1
 80132e0:	4614      	mov	r4, r2
 80132e2:	4605      	mov	r5, r0
 80132e4:	b118      	cbz	r0, 80132ee <__swbuf_r+0x12>
 80132e6:	6a03      	ldr	r3, [r0, #32]
 80132e8:	b90b      	cbnz	r3, 80132ee <__swbuf_r+0x12>
 80132ea:	f7fc fd93 	bl	800fe14 <__sinit>
 80132ee:	69a3      	ldr	r3, [r4, #24]
 80132f0:	60a3      	str	r3, [r4, #8]
 80132f2:	89a3      	ldrh	r3, [r4, #12]
 80132f4:	071a      	lsls	r2, r3, #28
 80132f6:	d501      	bpl.n	80132fc <__swbuf_r+0x20>
 80132f8:	6923      	ldr	r3, [r4, #16]
 80132fa:	b943      	cbnz	r3, 801330e <__swbuf_r+0x32>
 80132fc:	4621      	mov	r1, r4
 80132fe:	4628      	mov	r0, r5
 8013300:	f000 f82a 	bl	8013358 <__swsetup_r>
 8013304:	b118      	cbz	r0, 801330e <__swbuf_r+0x32>
 8013306:	f04f 37ff 	mov.w	r7, #4294967295
 801330a:	4638      	mov	r0, r7
 801330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801330e:	6823      	ldr	r3, [r4, #0]
 8013310:	6922      	ldr	r2, [r4, #16]
 8013312:	1a98      	subs	r0, r3, r2
 8013314:	6963      	ldr	r3, [r4, #20]
 8013316:	b2f6      	uxtb	r6, r6
 8013318:	4283      	cmp	r3, r0
 801331a:	4637      	mov	r7, r6
 801331c:	dc05      	bgt.n	801332a <__swbuf_r+0x4e>
 801331e:	4621      	mov	r1, r4
 8013320:	4628      	mov	r0, r5
 8013322:	f7ff fa57 	bl	80127d4 <_fflush_r>
 8013326:	2800      	cmp	r0, #0
 8013328:	d1ed      	bne.n	8013306 <__swbuf_r+0x2a>
 801332a:	68a3      	ldr	r3, [r4, #8]
 801332c:	3b01      	subs	r3, #1
 801332e:	60a3      	str	r3, [r4, #8]
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	6022      	str	r2, [r4, #0]
 8013336:	701e      	strb	r6, [r3, #0]
 8013338:	6962      	ldr	r2, [r4, #20]
 801333a:	1c43      	adds	r3, r0, #1
 801333c:	429a      	cmp	r2, r3
 801333e:	d004      	beq.n	801334a <__swbuf_r+0x6e>
 8013340:	89a3      	ldrh	r3, [r4, #12]
 8013342:	07db      	lsls	r3, r3, #31
 8013344:	d5e1      	bpl.n	801330a <__swbuf_r+0x2e>
 8013346:	2e0a      	cmp	r6, #10
 8013348:	d1df      	bne.n	801330a <__swbuf_r+0x2e>
 801334a:	4621      	mov	r1, r4
 801334c:	4628      	mov	r0, r5
 801334e:	f7ff fa41 	bl	80127d4 <_fflush_r>
 8013352:	2800      	cmp	r0, #0
 8013354:	d0d9      	beq.n	801330a <__swbuf_r+0x2e>
 8013356:	e7d6      	b.n	8013306 <__swbuf_r+0x2a>

08013358 <__swsetup_r>:
 8013358:	b538      	push	{r3, r4, r5, lr}
 801335a:	4b29      	ldr	r3, [pc, #164]	@ (8013400 <__swsetup_r+0xa8>)
 801335c:	4605      	mov	r5, r0
 801335e:	6818      	ldr	r0, [r3, #0]
 8013360:	460c      	mov	r4, r1
 8013362:	b118      	cbz	r0, 801336c <__swsetup_r+0x14>
 8013364:	6a03      	ldr	r3, [r0, #32]
 8013366:	b90b      	cbnz	r3, 801336c <__swsetup_r+0x14>
 8013368:	f7fc fd54 	bl	800fe14 <__sinit>
 801336c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013370:	0719      	lsls	r1, r3, #28
 8013372:	d422      	bmi.n	80133ba <__swsetup_r+0x62>
 8013374:	06da      	lsls	r2, r3, #27
 8013376:	d407      	bmi.n	8013388 <__swsetup_r+0x30>
 8013378:	2209      	movs	r2, #9
 801337a:	602a      	str	r2, [r5, #0]
 801337c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013380:	81a3      	strh	r3, [r4, #12]
 8013382:	f04f 30ff 	mov.w	r0, #4294967295
 8013386:	e033      	b.n	80133f0 <__swsetup_r+0x98>
 8013388:	0758      	lsls	r0, r3, #29
 801338a:	d512      	bpl.n	80133b2 <__swsetup_r+0x5a>
 801338c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801338e:	b141      	cbz	r1, 80133a2 <__swsetup_r+0x4a>
 8013390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013394:	4299      	cmp	r1, r3
 8013396:	d002      	beq.n	801339e <__swsetup_r+0x46>
 8013398:	4628      	mov	r0, r5
 801339a:	f7fd fcc5 	bl	8010d28 <_free_r>
 801339e:	2300      	movs	r3, #0
 80133a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80133a2:	89a3      	ldrh	r3, [r4, #12]
 80133a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80133a8:	81a3      	strh	r3, [r4, #12]
 80133aa:	2300      	movs	r3, #0
 80133ac:	6063      	str	r3, [r4, #4]
 80133ae:	6923      	ldr	r3, [r4, #16]
 80133b0:	6023      	str	r3, [r4, #0]
 80133b2:	89a3      	ldrh	r3, [r4, #12]
 80133b4:	f043 0308 	orr.w	r3, r3, #8
 80133b8:	81a3      	strh	r3, [r4, #12]
 80133ba:	6923      	ldr	r3, [r4, #16]
 80133bc:	b94b      	cbnz	r3, 80133d2 <__swsetup_r+0x7a>
 80133be:	89a3      	ldrh	r3, [r4, #12]
 80133c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80133c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80133c8:	d003      	beq.n	80133d2 <__swsetup_r+0x7a>
 80133ca:	4621      	mov	r1, r4
 80133cc:	4628      	mov	r0, r5
 80133ce:	f000 f883 	bl	80134d8 <__smakebuf_r>
 80133d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133d6:	f013 0201 	ands.w	r2, r3, #1
 80133da:	d00a      	beq.n	80133f2 <__swsetup_r+0x9a>
 80133dc:	2200      	movs	r2, #0
 80133de:	60a2      	str	r2, [r4, #8]
 80133e0:	6962      	ldr	r2, [r4, #20]
 80133e2:	4252      	negs	r2, r2
 80133e4:	61a2      	str	r2, [r4, #24]
 80133e6:	6922      	ldr	r2, [r4, #16]
 80133e8:	b942      	cbnz	r2, 80133fc <__swsetup_r+0xa4>
 80133ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80133ee:	d1c5      	bne.n	801337c <__swsetup_r+0x24>
 80133f0:	bd38      	pop	{r3, r4, r5, pc}
 80133f2:	0799      	lsls	r1, r3, #30
 80133f4:	bf58      	it	pl
 80133f6:	6962      	ldrpl	r2, [r4, #20]
 80133f8:	60a2      	str	r2, [r4, #8]
 80133fa:	e7f4      	b.n	80133e6 <__swsetup_r+0x8e>
 80133fc:	2000      	movs	r0, #0
 80133fe:	e7f7      	b.n	80133f0 <__swsetup_r+0x98>
 8013400:	2000011c 	.word	0x2000011c

08013404 <_raise_r>:
 8013404:	291f      	cmp	r1, #31
 8013406:	b538      	push	{r3, r4, r5, lr}
 8013408:	4605      	mov	r5, r0
 801340a:	460c      	mov	r4, r1
 801340c:	d904      	bls.n	8013418 <_raise_r+0x14>
 801340e:	2316      	movs	r3, #22
 8013410:	6003      	str	r3, [r0, #0]
 8013412:	f04f 30ff 	mov.w	r0, #4294967295
 8013416:	bd38      	pop	{r3, r4, r5, pc}
 8013418:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801341a:	b112      	cbz	r2, 8013422 <_raise_r+0x1e>
 801341c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013420:	b94b      	cbnz	r3, 8013436 <_raise_r+0x32>
 8013422:	4628      	mov	r0, r5
 8013424:	f000 f830 	bl	8013488 <_getpid_r>
 8013428:	4622      	mov	r2, r4
 801342a:	4601      	mov	r1, r0
 801342c:	4628      	mov	r0, r5
 801342e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013432:	f000 b817 	b.w	8013464 <_kill_r>
 8013436:	2b01      	cmp	r3, #1
 8013438:	d00a      	beq.n	8013450 <_raise_r+0x4c>
 801343a:	1c59      	adds	r1, r3, #1
 801343c:	d103      	bne.n	8013446 <_raise_r+0x42>
 801343e:	2316      	movs	r3, #22
 8013440:	6003      	str	r3, [r0, #0]
 8013442:	2001      	movs	r0, #1
 8013444:	e7e7      	b.n	8013416 <_raise_r+0x12>
 8013446:	2100      	movs	r1, #0
 8013448:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801344c:	4620      	mov	r0, r4
 801344e:	4798      	blx	r3
 8013450:	2000      	movs	r0, #0
 8013452:	e7e0      	b.n	8013416 <_raise_r+0x12>

08013454 <raise>:
 8013454:	4b02      	ldr	r3, [pc, #8]	@ (8013460 <raise+0xc>)
 8013456:	4601      	mov	r1, r0
 8013458:	6818      	ldr	r0, [r3, #0]
 801345a:	f7ff bfd3 	b.w	8013404 <_raise_r>
 801345e:	bf00      	nop
 8013460:	2000011c 	.word	0x2000011c

08013464 <_kill_r>:
 8013464:	b538      	push	{r3, r4, r5, lr}
 8013466:	4d07      	ldr	r5, [pc, #28]	@ (8013484 <_kill_r+0x20>)
 8013468:	2300      	movs	r3, #0
 801346a:	4604      	mov	r4, r0
 801346c:	4608      	mov	r0, r1
 801346e:	4611      	mov	r1, r2
 8013470:	602b      	str	r3, [r5, #0]
 8013472:	f7ef fe56 	bl	8003122 <_kill>
 8013476:	1c43      	adds	r3, r0, #1
 8013478:	d102      	bne.n	8013480 <_kill_r+0x1c>
 801347a:	682b      	ldr	r3, [r5, #0]
 801347c:	b103      	cbz	r3, 8013480 <_kill_r+0x1c>
 801347e:	6023      	str	r3, [r4, #0]
 8013480:	bd38      	pop	{r3, r4, r5, pc}
 8013482:	bf00      	nop
 8013484:	20001c00 	.word	0x20001c00

08013488 <_getpid_r>:
 8013488:	f7ef be43 	b.w	8003112 <_getpid>

0801348c <__swhatbuf_r>:
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	460c      	mov	r4, r1
 8013490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013494:	2900      	cmp	r1, #0
 8013496:	b096      	sub	sp, #88	@ 0x58
 8013498:	4615      	mov	r5, r2
 801349a:	461e      	mov	r6, r3
 801349c:	da0d      	bge.n	80134ba <__swhatbuf_r+0x2e>
 801349e:	89a3      	ldrh	r3, [r4, #12]
 80134a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80134a4:	f04f 0100 	mov.w	r1, #0
 80134a8:	bf14      	ite	ne
 80134aa:	2340      	movne	r3, #64	@ 0x40
 80134ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80134b0:	2000      	movs	r0, #0
 80134b2:	6031      	str	r1, [r6, #0]
 80134b4:	602b      	str	r3, [r5, #0]
 80134b6:	b016      	add	sp, #88	@ 0x58
 80134b8:	bd70      	pop	{r4, r5, r6, pc}
 80134ba:	466a      	mov	r2, sp
 80134bc:	f000 f848 	bl	8013550 <_fstat_r>
 80134c0:	2800      	cmp	r0, #0
 80134c2:	dbec      	blt.n	801349e <__swhatbuf_r+0x12>
 80134c4:	9901      	ldr	r1, [sp, #4]
 80134c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80134ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80134ce:	4259      	negs	r1, r3
 80134d0:	4159      	adcs	r1, r3
 80134d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80134d6:	e7eb      	b.n	80134b0 <__swhatbuf_r+0x24>

080134d8 <__smakebuf_r>:
 80134d8:	898b      	ldrh	r3, [r1, #12]
 80134da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134dc:	079d      	lsls	r5, r3, #30
 80134de:	4606      	mov	r6, r0
 80134e0:	460c      	mov	r4, r1
 80134e2:	d507      	bpl.n	80134f4 <__smakebuf_r+0x1c>
 80134e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80134e8:	6023      	str	r3, [r4, #0]
 80134ea:	6123      	str	r3, [r4, #16]
 80134ec:	2301      	movs	r3, #1
 80134ee:	6163      	str	r3, [r4, #20]
 80134f0:	b003      	add	sp, #12
 80134f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134f4:	ab01      	add	r3, sp, #4
 80134f6:	466a      	mov	r2, sp
 80134f8:	f7ff ffc8 	bl	801348c <__swhatbuf_r>
 80134fc:	9f00      	ldr	r7, [sp, #0]
 80134fe:	4605      	mov	r5, r0
 8013500:	4639      	mov	r1, r7
 8013502:	4630      	mov	r0, r6
 8013504:	f7fb fd0a 	bl	800ef1c <_malloc_r>
 8013508:	b948      	cbnz	r0, 801351e <__smakebuf_r+0x46>
 801350a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801350e:	059a      	lsls	r2, r3, #22
 8013510:	d4ee      	bmi.n	80134f0 <__smakebuf_r+0x18>
 8013512:	f023 0303 	bic.w	r3, r3, #3
 8013516:	f043 0302 	orr.w	r3, r3, #2
 801351a:	81a3      	strh	r3, [r4, #12]
 801351c:	e7e2      	b.n	80134e4 <__smakebuf_r+0xc>
 801351e:	89a3      	ldrh	r3, [r4, #12]
 8013520:	6020      	str	r0, [r4, #0]
 8013522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013526:	81a3      	strh	r3, [r4, #12]
 8013528:	9b01      	ldr	r3, [sp, #4]
 801352a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801352e:	b15b      	cbz	r3, 8013548 <__smakebuf_r+0x70>
 8013530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013534:	4630      	mov	r0, r6
 8013536:	f000 f81d 	bl	8013574 <_isatty_r>
 801353a:	b128      	cbz	r0, 8013548 <__smakebuf_r+0x70>
 801353c:	89a3      	ldrh	r3, [r4, #12]
 801353e:	f023 0303 	bic.w	r3, r3, #3
 8013542:	f043 0301 	orr.w	r3, r3, #1
 8013546:	81a3      	strh	r3, [r4, #12]
 8013548:	89a3      	ldrh	r3, [r4, #12]
 801354a:	431d      	orrs	r5, r3
 801354c:	81a5      	strh	r5, [r4, #12]
 801354e:	e7cf      	b.n	80134f0 <__smakebuf_r+0x18>

08013550 <_fstat_r>:
 8013550:	b538      	push	{r3, r4, r5, lr}
 8013552:	4d07      	ldr	r5, [pc, #28]	@ (8013570 <_fstat_r+0x20>)
 8013554:	2300      	movs	r3, #0
 8013556:	4604      	mov	r4, r0
 8013558:	4608      	mov	r0, r1
 801355a:	4611      	mov	r1, r2
 801355c:	602b      	str	r3, [r5, #0]
 801355e:	f7ef fe40 	bl	80031e2 <_fstat>
 8013562:	1c43      	adds	r3, r0, #1
 8013564:	d102      	bne.n	801356c <_fstat_r+0x1c>
 8013566:	682b      	ldr	r3, [r5, #0]
 8013568:	b103      	cbz	r3, 801356c <_fstat_r+0x1c>
 801356a:	6023      	str	r3, [r4, #0]
 801356c:	bd38      	pop	{r3, r4, r5, pc}
 801356e:	bf00      	nop
 8013570:	20001c00 	.word	0x20001c00

08013574 <_isatty_r>:
 8013574:	b538      	push	{r3, r4, r5, lr}
 8013576:	4d06      	ldr	r5, [pc, #24]	@ (8013590 <_isatty_r+0x1c>)
 8013578:	2300      	movs	r3, #0
 801357a:	4604      	mov	r4, r0
 801357c:	4608      	mov	r0, r1
 801357e:	602b      	str	r3, [r5, #0]
 8013580:	f7ef fe3f 	bl	8003202 <_isatty>
 8013584:	1c43      	adds	r3, r0, #1
 8013586:	d102      	bne.n	801358e <_isatty_r+0x1a>
 8013588:	682b      	ldr	r3, [r5, #0]
 801358a:	b103      	cbz	r3, 801358e <_isatty_r+0x1a>
 801358c:	6023      	str	r3, [r4, #0]
 801358e:	bd38      	pop	{r3, r4, r5, pc}
 8013590:	20001c00 	.word	0x20001c00

08013594 <_init>:
 8013594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013596:	bf00      	nop
 8013598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801359a:	bc08      	pop	{r3}
 801359c:	469e      	mov	lr, r3
 801359e:	4770      	bx	lr

080135a0 <_fini>:
 80135a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a2:	bf00      	nop
 80135a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135a6:	bc08      	pop	{r3}
 80135a8:	469e      	mov	lr, r3
 80135aa:	4770      	bx	lr
