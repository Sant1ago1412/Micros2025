
BlackScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800e270  0800e270  0000f270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e71c  0800e71c  00010158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e71c  0800e71c  0000f71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e724  0800e724  00010158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e724  0800e724  0000f724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e728  0800e728  0000f728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800e72c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000181c  20000158  0800e884  00010158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001974  0800e884  00010974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6a0  00000000  00000000  00010188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004302  00000000  00000000  0002a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  0002eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001290  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007670  00000000  00000000  000315d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f210  00000000  00000000  00038c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a008f  00000000  00000000  00057e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a38  00000000  00000000  000f7f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000fe964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e258 	.word	0x0800e258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800e258 	.word	0x0800e258

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:
_work casts;
int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00d f9a4 	bl	800d908 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00d f99c 	bl	800d908 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000017c 	.word	0x2000017c

080005ec <UP_sendInfo>:

void UP_sendInfo(_eEstadoMEFcmd CMD,uint8_t *bufferAux,uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000602:	2300      	movs	r3, #0
 8000604:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000608:	2300      	movs	r3, #0
 800060a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000618:	3330      	adds	r3, #48	@ 0x30
 800061a:	443b      	add	r3, r7
 800061c:	2255      	movs	r2, #85	@ 0x55
 800061e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 8000622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800062c:	3330      	adds	r3, #48	@ 0x30
 800062e:	443b      	add	r3, r7
 8000630:	224e      	movs	r2, #78	@ 0x4e
 8000632:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000640:	3330      	adds	r3, #48	@ 0x30
 8000642:	443b      	add	r3, r7
 8000644:	2245      	movs	r2, #69	@ 0x45
 8000646:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 800064a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000654:	3330      	adds	r3, #48	@ 0x30
 8000656:	443b      	add	r3, r7
 8000658:	2252      	movs	r2, #82	@ 0x52
 800065a:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes+1;
 800065e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000668:	4619      	mov	r1, r3
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8000674:	443b      	add	r3, r7
 8000676:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800067a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000684:	3330      	adds	r3, #48	@ 0x30
 8000686:	443b      	add	r3, r7
 8000688:	223a      	movs	r2, #58	@ 0x3a
 800068a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=CMD;
 800068e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000698:	3330      	adds	r3, #48	@ 0x30
 800069a:	443b      	add	r3, r7
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006a8:	e012      	b.n	80006d0 <UP_sendInfo+0xe4>
        bufAux[indiceAux++] = bufferAux[i];
 80006aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	441a      	add	r2, r3
 80006b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006b6:	1c59      	adds	r1, r3, #1
 80006b8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	3330      	adds	r3, #48	@ 0x30
 80006c0:	443b      	add	r3, r7
 80006c2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ca:	3301      	adds	r3, #1
 80006cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006d0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbe6      	blt.n	80006aa <UP_sendInfo+0xbe>

    cks=0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006e8:	e022      	b.n	8000730 <UP_sendInfo+0x144>
        cks^= bufAux[i];
 80006ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ee:	3330      	adds	r3, #48	@ 0x30
 80006f0:	443b      	add	r3, r7
 80006f2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006fa:	4053      	eors	r3, r2
 80006fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 8000700:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <UP_sendInfo+0x180>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68d8      	ldr	r0, [r3, #12]
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <UP_sendInfo+0x180>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	795a      	ldrb	r2, [r3, #5]
 8000710:	1c54      	adds	r4, r2, #1
 8000712:	b2e4      	uxtb	r4, r4
 8000714:	715c      	strb	r4, [r3, #5]
 8000716:	4613      	mov	r3, r2
 8000718:	4403      	add	r3, r0
 800071a:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800071e:	443a      	add	r2, r7
 8000720:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000724:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000726:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800072a:	3301      	adds	r3, #1
 800072c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000730:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000738:	429a      	cmp	r2, r3
 800073a:	d3d6      	bcc.n	80006ea <UP_sendInfo+0xfe>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <UP_sendInfo+0x180>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68d9      	ldr	r1, [r3, #12]
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <UP_sendInfo+0x180>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	795a      	ldrb	r2, [r3, #5]
 8000748:	1c50      	adds	r0, r2, #1
 800074a:	b2c0      	uxtb	r0, r0
 800074c:	7158      	strb	r0, [r3, #5]
 800074e:	4613      	mov	r3, r2
 8000750:	440b      	add	r3, r1
 8000752:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000756:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <UP_sendInfo+0x180>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000760:	741a      	strb	r2, [r3, #16]

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	@ 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bc90      	pop	{r4, r7}
 800076a:	4770      	bx	lr
 800076c:	2000017c 	.word	0x2000017c

08000770 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	78db      	ldrb	r3, [r3, #3]
 800077c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800077e:	e0e2      	b.n	8000946 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000780:	4b76      	ldr	r3, [pc, #472]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b06      	cmp	r3, #6
 8000786:	f200 80d7 	bhi.w	8000938 <UP_decodeHeader+0x1c8>
 800078a:	a201      	add	r2, pc, #4	@ (adr r2, 8000790 <UP_decodeHeader+0x20>)
 800078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000790:	080007ad 	.word	0x080007ad
 8000794:	080007d5 	.word	0x080007d5
 8000798:	08000809 	.word	0x08000809
 800079c:	0800083d 	.word	0x0800083d
 80007a0:	08000871 	.word	0x08000871
 80007a4:	08000899 	.word	0x08000899
 80007a8:	080008db 	.word	0x080008db
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	1c59      	adds	r1, r3, #1
 80007b6:	b2c8      	uxtb	r0, r1
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	7108      	strb	r0, [r1, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b55      	cmp	r3, #85	@ 0x55
 80007c2:	f040 80bd 	bne.w	8000940 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007c6:	4b65      	ldr	r3, [pc, #404]	@ (800095c <UP_decodeHeader+0x1ec>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007d2:	e0b5      	b.n	8000940 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689a      	ldr	r2, [r3, #8]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	1c59      	adds	r1, r3, #1
 80007de:	b2c8      	uxtb	r0, r1
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	7108      	strb	r0, [r1, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ea:	d103      	bne.n	80007f4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007ec:	4b5b      	ldr	r3, [pc, #364]	@ (800095c <UP_decodeHeader+0x1ec>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007f2:	e0a8      	b.n	8000946 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000800:	4b56      	ldr	r3, [pc, #344]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
                break;
 8000806:	e09e      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	1c59      	adds	r1, r3, #1
 8000812:	b2c8      	uxtb	r0, r1
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	7108      	strb	r0, [r1, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b45      	cmp	r3, #69	@ 0x45
 800081e:	d103      	bne.n	8000828 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000820:	4b4e      	ldr	r3, [pc, #312]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000822:	2203      	movs	r2, #3
 8000824:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000826:	e08e      	b.n	8000946 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	3b01      	subs	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000834:	4b49      	ldr	r3, [pc, #292]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
                break;
 800083a:	e084      	b.n	8000946 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	1c59      	adds	r1, r3, #1
 8000846:	b2c8      	uxtb	r0, r1
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	7108      	strb	r0, [r1, #4]
 800084c:	4413      	add	r3, r2
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b52      	cmp	r3, #82	@ 0x52
 8000852:	d103      	bne.n	800085c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000854:	4b41      	ldr	r3, [pc, #260]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000856:	2204      	movs	r2, #4
 8000858:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800085a:	e074      	b.n	8000946 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	3b01      	subs	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000868:	4b3c      	ldr	r3, [pc, #240]	@ (800095c <UP_decodeHeader+0x1ec>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
            break;
 800086e:	e06a      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	791a      	ldrb	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <UP_decodeHeader+0x1f0>)
 800088e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000890:	4b32      	ldr	r3, [pc, #200]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000892:	2205      	movs	r2, #5
 8000894:	701a      	strb	r2, [r3, #0]
                break;
 8000896:	e056      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	1c59      	adds	r1, r3, #1
 80008a2:	b2c8      	uxtb	r0, r1
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	7108      	strb	r0, [r1, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80008ae:	d10a      	bne.n	80008c6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80008b0:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <UP_decodeHeader+0x1ec>)
 80008b2:	2206      	movs	r2, #6
 80008b4:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80008b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <UP_decodeHeader+0x1f0>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008c4:	e03f      	b.n	8000946 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <UP_decodeHeader+0x1ec>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
                break;
 80008d8:	e035      	b.n	8000946 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <UP_decodeHeader+0x1f0>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d90f      	bls.n	8000902 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	1c59      	adds	r1, r3, #1
 80008ec:	b2c8      	uxtb	r0, r1
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	7108      	strb	r0, [r1, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	4053      	eors	r3, r2
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <UP_decodeHeader+0x1f0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	3b01      	subs	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <UP_decodeHeader+0x1f0>)
 800090c:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <UP_decodeHeader+0x1f0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d116      	bne.n	8000944 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <UP_decodeHeader+0x1ec>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	789a      	ldrb	r2, [r3, #2]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	7909      	ldrb	r1, [r1, #4]
 8000928:	440b      	add	r3, r1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d109      	bne.n	8000944 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f817 	bl	8000964 <UP_decodeData>
                    }
                }

                break;
 8000936:	e005      	b.n	8000944 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <UP_decodeHeader+0x1ec>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
                break;
 800093e:	e002      	b.n	8000946 <UP_decodeHeader+0x1d6>
                break;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <UP_decodeHeader+0x1d6>
                break;
 8000944:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	429a      	cmp	r2, r3
 800094e:	f47f af17 	bne.w	8000780 <UP_decodeHeader+0x10>
        }
    }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000178 	.word	0x20000178
 8000960:	20000180 	.word	0x20000180

08000964 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800096c:	2300      	movs	r3, #0
 800096e:	77bb      	strb	r3, [r7, #30]
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	785b      	ldrb	r3, [r3, #1]
 800097c:	3302      	adds	r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	3bf0      	subs	r3, #240	@ 0xf0
 8000984:	2b03      	cmp	r3, #3
 8000986:	d84a      	bhi.n	8000a1e <UP_decodeData+0xba>
 8000988:	a201      	add	r2, pc, #4	@ (adr r2, 8000990 <UP_decodeData+0x2c>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009b7 	.word	0x080009b7
 8000998:	080009cd 	.word	0x080009cd
 800099c:	080009df 	.word	0x080009df
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80009a0:	7fbb      	ldrb	r3, [r7, #30]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	77ba      	strb	r2, [r7, #30]
 80009a6:	3320      	adds	r3, #32
 80009a8:	443b      	add	r3, r7
 80009aa:	22f0      	movs	r2, #240	@ 0xf0
 80009ac:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80009b0:	2302      	movs	r3, #2
 80009b2:	77fb      	strb	r3, [r7, #31]

    break;
 80009b4:	e03e      	b.n	8000a34 <UP_decodeData+0xd0>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80009b6:	7fbb      	ldrb	r3, [r7, #30]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	77ba      	strb	r2, [r7, #30]
 80009bc:	3320      	adds	r3, #32
 80009be:	443b      	add	r3, r7
 80009c0:	22f1      	movs	r2, #241	@ 0xf1
 80009c2:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009c6:	2302      	movs	r3, #2
 80009c8:	77fb      	strb	r3, [r7, #31]

    break;
 80009ca:	e033      	b.n	8000a34 <UP_decodeData+0xd0>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009cc:	7fbb      	ldrb	r3, [r7, #30]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	77ba      	strb	r2, [r7, #30]
 80009d2:	3320      	adds	r3, #32
 80009d4:	443b      	add	r3, r7
 80009d6:	22f2      	movs	r2, #242	@ 0xf2
 80009d8:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009dc:	e02a      	b.n	8000a34 <UP_decodeData+0xd0>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009de:	7fbb      	ldrb	r3, [r7, #30]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	77ba      	strb	r2, [r7, #30]
 80009e4:	3320      	adds	r3, #32
 80009e6:	443b      	add	r3, r7
 80009e8:	22f3      	movs	r2, #243	@ 0xf3
 80009ea:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	3303      	adds	r3, #3
 80009f8:	4413      	add	r3, r2
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <UP_decodeData+0xec>)
 80009fe:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <UP_decodeData+0xec>)
 8000a10:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <UP_decodeData+0xec>)
 8000a14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <UP_decodeData+0xf0>)
 8000a1a:	801a      	strh	r2, [r3, #0]

    break;
 8000a1c:	e00a      	b.n	8000a34 <UP_decodeData+0xd0>

    default:

        bufAux[indiceAux++]=0xFF;
 8000a1e:	7fbb      	ldrb	r3, [r7, #30]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	77ba      	strb	r2, [r7, #30]
 8000a24:	3320      	adds	r3, #32
 8000a26:	443b      	add	r3, r7
 8000a28:	22ff      	movs	r2, #255	@ 0xff
 8000a2a:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	77fb      	strb	r3, [r7, #31]

    break;
 8000a32:	bf00      	nop
    }

    UP_sendInfo(datosComLib->indexStart+2,bufAux,bytes);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	3302      	adds	r3, #2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	7ffa      	ldrb	r2, [r7, #31]
 8000a3e:	f107 0108 	add.w	r1, r7, #8
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdd2 	bl	80005ec <UP_sendInfo>
}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000174 	.word	0x20000174
 8000a54:	20000000 	.word	0x20000000

08000a58 <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	81fb      	strh	r3, [r7, #14]
 8000a68:	e016      	b.n	8000a98 <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	441a      	add	r2, r3
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <UP_datafromUSB+0x58>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	490e      	ldr	r1, [pc, #56]	@ (8000ab0 <UP_datafromUSB+0x58>)
 8000a78:	6809      	ldr	r1, [r1, #0]
 8000a7a:	78c9      	ldrb	r1, [r1, #3]
 8000a7c:	b2c9      	uxtb	r1, r1
 8000a7e:	440b      	add	r3, r1
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <UP_datafromUSB+0x58>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	78da      	ldrb	r2, [r3, #3]
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	3201      	adds	r2, #1
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	3301      	adds	r3, #1
 8000a96:	81fb      	strh	r3, [r7, #14]
 8000a98:	89fa      	ldrh	r2, [r7, #14]
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3e4      	bcc.n	8000a6a <UP_datafromUSB+0x12>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000017c 	.word	0x2000017c

08000ab4 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	809a      	strh	r2, [r3, #4]

}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_ADC_ConvCpltCallback>:
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000aec:	2300      	movs	r3, #0
 8000aee:	77fb      	strb	r3, [r7, #31]
 8000af0:	e00c      	b.n	8000b0c <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000af2:	7ffa      	ldrb	r2, [r7, #31]
 8000af4:	7ffb      	ldrb	r3, [r7, #31]
 8000af6:	490b      	ldr	r1, [pc, #44]	@ (8000b24 <HAL_ADC_ConvCpltCallback+0x44>)
 8000af8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000afc:	f107 000c 	add.w	r0, r7, #12
 8000b00:	4909      	ldr	r1, [pc, #36]	@ (8000b28 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b02:	f00c ffb7 	bl	800da74 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000b06:	7ffb      	ldrb	r3, [r7, #31]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	77fb      	strb	r3, [r7, #31]
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	2b07      	cmp	r3, #7
 8000b10:	d9ef      	bls.n	8000af2 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b18:	f002 fd2f 	bl	800357a <HAL_GPIO_TogglePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200003cc 	.word	0x200003cc
 8000b28:	0800e270 	.word	0x0800e270
 8000b2c:	40020800 	.word	0x40020800

08000b30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d104      	bne.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000b42:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b44:	7813      	ldrb	r3, [r2, #0]
 8000b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4a:	7013      	strb	r3, [r2, #0]
	}
	if (htim->Instance == TIM10) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d102      	bne.n	8000b5c <HAL_TIM_PeriodElapsedCallback+0x2c>
		MPU6050_Read_All(&mpuValues);
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b58:	f000 fcb6 	bl	80014c8 <MPU6050_Read_All>
		}
	}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40014800 	.word	0x40014800
 8000b68:	200003dc 	.word	0x200003dc
 8000b6c:	40014400 	.word	0x40014400
 8000b70:	200003f0 	.word	0x200003f0

08000b74 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b80:	2b78      	cmp	r3, #120	@ 0x78
 8000b82:	d101      	bne.n	8000b88 <HAL_I2C_MemTxCpltCallback+0x14>
		SSD1306_DMAREADY();
 8000b84:	f000 ff6a 	bl	8001a5c <SSD1306_DMAREADY>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress==MPU6050_ADDR){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9c:	2bd0      	cmp	r3, #208	@ 0xd0
 8000b9e:	d102      	bne.n	8000ba6 <HAL_I2C_MemRxCpltCallback+0x16>
		mpuValues.DMAREADY=1;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <HAL_I2C_MemRxCpltCallback+0x24>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	771a      	strb	r2, [r3, #28]
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200003f0 	.word	0x200003f0

08000bb8 <task10ms>:

void task10ms(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

	static uint8_t ticker=0;
	if(ticker%10==0){
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <task10ms+0x74>)
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <task10ms+0x78>)
 8000bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc6:	08d9      	lsrs	r1, r3, #3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <task10ms+0x34>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000bd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bdc:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <task10ms+0x7c>)
 8000bde:	f002 fccc 	bl	800357a <HAL_GPIO_TogglePin>
		UP_sendInfo(MPUDATA,mpuValues.Rec_Data, 15);
 8000be2:	220f      	movs	r2, #15
 8000be4:	4914      	ldr	r1, [pc, #80]	@ (8000c38 <task10ms+0x80>)
 8000be6:	20f4      	movs	r0, #244	@ 0xf4
 8000be8:	f7ff fd00 	bl	80005ec <UP_sendInfo>
	}
	if(ticker==255){
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <task10ms+0x74>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2bff      	cmp	r3, #255	@ 0xff
 8000bf2:	d112      	bne.n	8000c1a <task10ms+0x62>
		if(!SISINIT){
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <task10ms+0x84>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <task10ms+0x52>
			SSD1306_Clear();
 8000c02:	f000 feef 	bl	80019e4 <SSD1306_Clear>
			SSD1306_RefreshReady();
 8000c06:	f000 ff35 	bl	8001a74 <SSD1306_RefreshReady>
		}
		SISINIT=TRUE;
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <task10ms+0x84>)
 8000c0c:	7813      	ldrb	r3, [r2, #0]
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c12:	7013      	strb	r3, [r2, #0]
		ticker=0;
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <task10ms+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	}
	ticker++;
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <task10ms+0x74>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <task10ms+0x74>)
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000040e 	.word	0x2000040e
 8000c30:	cccccccd 	.word	0xcccccccd
 8000c34:	40020800 	.word	0x40020800
 8000c38:	200003fe 	.word	0x200003fe
 8000c3c:	200003dc 	.word	0x200003dc

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c46:	f001 fa07 	bl	8002058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4a:	f000 f88b 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4e:	f000 fa63 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c52:	f000 fa39 	bl	80010c8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000c56:	f00c f8d9 	bl	800ce0c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000c5a:	f000 f96b 	bl	8000f34 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000c5e:	f000 fa0f 	bl	8001080 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000c62:	f000 f8e7 	bl	8000e34 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c66:	f000 f937 	bl	8000ed8 <MX_I2C1_Init>
  MX_TIM10_Init();
 8000c6a:	f000 f9e5 	bl	8001038 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000c6e:	482e      	ldr	r0, [pc, #184]	@ (8000d28 <main+0xe8>)
 8000c70:	f007 fe2c 	bl	80088cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000c74:	482d      	ldr	r0, [pc, #180]	@ (8000d2c <main+0xec>)
 8000c76:	f007 fe29 	bl	80088cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000c7a:	482d      	ldr	r0, [pc, #180]	@ (8000d30 <main+0xf0>)
 8000c7c:	f007 fe26 	bl	80088cc <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c80:	2104      	movs	r1, #4
 8000c82:	4829      	ldr	r0, [pc, #164]	@ (8000d28 <main+0xe8>)
 8000c84:	f007 fede 	bl	8008a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4827      	ldr	r0, [pc, #156]	@ (8000d28 <main+0xe8>)
 8000c8c:	f007 feda 	bl	8008a44 <HAL_TIM_PWM_Start>

  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8000c90:	4928      	ldr	r1, [pc, #160]	@ (8000d34 <main+0xf4>)
 8000c92:	4829      	ldr	r0, [pc, #164]	@ (8000d38 <main+0xf8>)
 8000c94:	f000 fecc 	bl	8001a30 <Display_Set_I2C_Master_Transmit>
  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
 8000c98:	4928      	ldr	r1, [pc, #160]	@ (8000d3c <main+0xfc>)
 8000c9a:	4829      	ldr	r0, [pc, #164]	@ (8000d40 <main+0x100>)
 8000c9c:	f000 fc9a 	bl	80015d4 <MPU6050_I2C_Blocking>
  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
 8000ca0:	4928      	ldr	r1, [pc, #160]	@ (8000d44 <main+0x104>)
 8000ca2:	4825      	ldr	r0, [pc, #148]	@ (8000d38 <main+0xf8>)
 8000ca4:	f000 fc80 	bl	80015a8 <MPU6050_NonBlocking_DMA>
  SSD1306_Init();
 8000ca8:	f000 fd12 	bl	80016d0 <SSD1306_Init>
  MPU6050_Init(&mpuValues);
 8000cac:	4826      	ldr	r0, [pc, #152]	@ (8000d48 <main+0x108>)
 8000cae:	f000 fba1 	bl	80013f4 <MPU6050_Init>
  CDC_AttachRxData(&UP_datafromUSB);
 8000cb2:	4826      	ldr	r0, [pc, #152]	@ (8000d4c <main+0x10c>)
 8000cb4:	f00c f9fe 	bl	800d0b4 <CDC_AttachRxData>
  myFlags.allFlags=0;
 8000cb8:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <main+0x110>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4824      	ldr	r0, [pc, #144]	@ (8000d54 <main+0x114>)
 8000cc2:	f7ff fc73 	bl	80005ac <UP_initprotocol>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <main+0xe8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4821      	ldr	r0, [pc, #132]	@ (8000d58 <main+0x118>)
 8000cd2:	f7ff feef 	bl	8000ab4 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <main+0xe8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481e      	ldr	r0, [pc, #120]	@ (8000d5c <main+0x11c>)
 8000ce2:	f7ff fee7 	bl	8000ab4 <en_InitENG>

  SSD1306_RefreshReady();
 8000ce6:	f000 fec5 	bl	8001a74 <SSD1306_RefreshReady>
  SSD1306_DrawBitmap(0, 0, LogoMicros, 128, 64, WHITE);
 8000cea:	2301      	movs	r3, #1
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	2340      	movs	r3, #64	@ 0x40
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2380      	movs	r3, #128	@ 0x80
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d60 <main+0x120>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fc81 	bl	8001600 <SSD1306_DrawBitmap>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <main+0x110>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <main+0xda>
		 task10ms();
 8000d0c:	f7ff ff54 	bl	8000bb8 <task10ms>
		 IS10MS=FALSE;
 8000d10:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <main+0x110>)
 8000d12:	7813      	ldrb	r3, [r2, #0]
 8000d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d18:	7013      	strb	r3, [r2, #0]
	  }
	UP_comunicationsTask(&datosComSerie);
 8000d1a:	480e      	ldr	r0, [pc, #56]	@ (8000d54 <main+0x114>)
 8000d1c:	f000 fa88 	bl	8001230 <UP_comunicationsTask>
	SSD1306_UpdateScreen();
 8000d20:	f000 fd84 	bl	800182c <SSD1306_UpdateScreen>
	  if(IS10MS){
 8000d24:	e7eb      	b.n	8000cfe <main+0xbe>
 8000d26:	bf00      	nop
 8000d28:	200002e0 	.word	0x200002e0
 8000d2c:	20000370 	.word	0x20000370
 8000d30:	20000328 	.word	0x20000328
 8000d34:	080012fd 	.word	0x080012fd
 8000d38:	080012c5 	.word	0x080012c5
 8000d3c:	08001331 	.word	0x08001331
 8000d40:	080013a9 	.word	0x080013a9
 8000d44:	08001371 	.word	0x08001371
 8000d48:	200003f0 	.word	0x200003f0
 8000d4c:	08000a59 	.word	0x08000a59
 8000d50:	200003dc 	.word	0x200003dc
 8000d54:	200003b8 	.word	0x200003b8
 8000d58:	200003e0 	.word	0x200003e0
 8000d5c:	200003e8 	.word	0x200003e8
 8000d60:	0800e2c8 	.word	0x0800e2c8

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	@ 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2230      	movs	r2, #48	@ 0x30
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00c fea0 	bl	800dab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <SystemClock_Config+0xc8>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d90:	4a26      	ldr	r2, [pc, #152]	@ (8000e2c <SystemClock_Config+0xc8>)
 8000d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d98:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <SystemClock_Config+0xc8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <SystemClock_Config+0xcc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <SystemClock_Config+0xcc>)
 8000dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <SystemClock_Config+0xcc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dd4:	2319      	movs	r3, #25
 8000dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dd8:	23c0      	movs	r3, #192	@ 0xc0
 8000dda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4618      	mov	r0, r3
 8000dea:	f007 f8db 	bl	8007fa4 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df4:	f000 faf8 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2103      	movs	r1, #3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 fb3d 	bl	8008494 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e20:	f000 fae2 	bl	80013e8 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	@ 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e48:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <MX_ADC1_Init+0x9c>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e76:	4a17      	ldr	r2, [pc, #92]	@ (8000ed4 <MX_ADC1_Init+0xa0>)
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e94:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e96:	f001 f975 	bl	8002184 <HAL_ADC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f000 faa2 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000eb6:	f001 facd 	bl	8002454 <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec0:	f000 fa92 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000184 	.word	0x20000184
 8000ed0:	40012000 	.word	0x40012000
 8000ed4:	0f000001 	.word	0x0f000001

08000ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000ede:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <MX_I2C1_Init+0x54>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000ee4:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <MX_I2C1_Init+0x58>)
 8000ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000ef6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <MX_I2C1_Init+0x50>)
 8000f16:	f002 fb4b 	bl	80035b0 <HAL_I2C_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f20:	f000 fa62 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200001cc 	.word	0x200001cc
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	00061a80 	.word	0x00061a80

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	@ 0x38
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b32      	ldr	r3, [pc, #200]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000f66:	4a33      	ldr	r2, [pc, #204]	@ (8001034 <MX_TIM3_Init+0x100>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000f78:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b2a      	ldr	r3, [pc, #168]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8a:	4829      	ldr	r0, [pc, #164]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000f8c:	f007 fc4e 	bl	800882c <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f96:	f000 fa27 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4822      	ldr	r0, [pc, #136]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000fa8:	f007 ffae 	bl	8008f08 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fb2:	f000 fa19 	bl	80013e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb6:	481e      	ldr	r0, [pc, #120]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000fb8:	f007 fcea 	bl	8008990 <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fc2:	f000 fa11 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4816      	ldr	r0, [pc, #88]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000fd6:	f008 fb59 	bl	800968c <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fe0:	f000 fa02 	bl	80013e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	@ 0x60
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8000ffc:	f007 fec2 	bl	8008d84 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001006:	f000 f9ef 	bl	80013e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2204      	movs	r2, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8001012:	f007 feb7 	bl	8008d84 <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800101c:	f000 f9e4 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <MX_TIM3_Init+0xfc>)
 8001022:	f000 fee3 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	@ 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200002e0 	.word	0x200002e0
 8001034:	40000400 	.word	0x40000400

08001038 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_TIM10_Init+0x40>)
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <MX_TIM10_Init+0x44>)
 8001040:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 47;
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <MX_TIM10_Init+0x40>)
 8001044:	222f      	movs	r2, #47	@ 0x2f
 8001046:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <MX_TIM10_Init+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_TIM10_Init+0x40>)
 8001050:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001054:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <MX_TIM10_Init+0x40>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_TIM10_Init+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_TIM10_Init+0x40>)
 8001064:	f007 fbe2 	bl	800882c <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800106e:	f000 f9bb 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000328 	.word	0x20000328
 800107c:	40014400 	.word	0x40014400

08001080 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_TIM11_Init+0x40>)
 8001086:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <MX_TIM11_Init+0x44>)
 8001088:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <MX_TIM11_Init+0x40>)
 800108c:	225f      	movs	r2, #95	@ 0x5f
 800108e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_TIM11_Init+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <MX_TIM11_Init+0x40>)
 8001098:	f242 720f 	movw	r2, #9999	@ 0x270f
 800109c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MX_TIM11_Init+0x40>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_TIM11_Init+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_TIM11_Init+0x40>)
 80010ac:	f007 fbbe 	bl	800882c <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80010b6:	f000 f997 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000370 	.word	0x20000370
 80010c4:	40014800 	.word	0x40014800

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_DMA_Init+0x4c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001114 <MX_DMA_Init+0x4c>)
 80010d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <MX_DMA_Init+0x4c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	200b      	movs	r0, #11
 80010f0:	f001 fcc3 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010f4:	200b      	movs	r0, #11
 80010f6:	f001 fcdc 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	200c      	movs	r0, #12
 8001100:	f001 fcbb 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001104:	200c      	movs	r0, #12
 8001106:	f001 fcd4 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a3a      	ldr	r2, [pc, #232]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a33      	ldr	r2, [pc, #204]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <MX_GPIO_Init+0x108>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <MX_GPIO_Init+0x108>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a2c      	ldr	r2, [pc, #176]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <MX_GPIO_Init+0x108>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_GPIO_Init+0x108>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a4:	481f      	ldr	r0, [pc, #124]	@ (8001224 <MX_GPIO_Init+0x10c>)
 80011a6:	f002 f9cf 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80011b0:	481d      	ldr	r0, [pc, #116]	@ (8001228 <MX_GPIO_Init+0x110>)
 80011b2:	f002 f9c9 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2108      	movs	r1, #8
 80011ba:	481c      	ldr	r0, [pc, #112]	@ (800122c <MX_GPIO_Init+0x114>)
 80011bc:	f002 f9c4 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4812      	ldr	r0, [pc, #72]	@ (8001224 <MX_GPIO_Init+0x10c>)
 80011da:	f002 f831 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 80011de:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_GPIO_Init+0x110>)
 80011f8:	f002 f822 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 80011fc:	2308      	movs	r3, #8
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_GPIO_Init+0x114>)
 8001214:	f002 f814 	bl	8003240 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	@ 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	791a      	ldrb	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	429a      	cmp	r2, r3
 8001244:	d007      	beq.n	8001256 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fa92 	bl	8000770 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	799a      	ldrb	r2, [r3, #6]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	795b      	ldrb	r3, [r3, #5]
 800125e:	429a      	cmp	r2, r3
 8001260:	d02b      	beq.n	80012ba <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	795a      	ldrb	r2, [r3, #5]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	799b      	ldrb	r3, [r3, #6]
 800126a:	429a      	cmp	r2, r3
 800126c:	d908      	bls.n	8001280 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	795a      	ldrb	r2, [r3, #5]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	741a      	strb	r2, [r3, #16]
 800127e:	e006      	b.n	800128e <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	799b      	ldrb	r3, [r3, #6]
 8001284:	f1c3 0304 	rsb	r3, r3, #4
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	7992      	ldrb	r2, [r2, #6]
 8001296:	441a      	add	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7c1b      	ldrb	r3, [r3, #16]
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f00b fed0 	bl	800d044 <CDC_Transmit_FS>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d107      	bne.n	80012ba <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	799a      	ldrb	r2, [r3, #6]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7c1b      	ldrb	r3, [r3, #16]
 80012b2:	4413      	add	r3, r2
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <I2C_DMA_Transmit>:

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60ba      	str	r2, [r7, #8]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	81fb      	strh	r3, [r7, #14]
 80012d2:	460b      	mov	r3, r1
 80012d4:	81bb      	strh	r3, [r7, #12]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80012da:	89ba      	ldrh	r2, [r7, #12]
 80012dc:	89f9      	ldrh	r1, [r7, #14]
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <I2C_DMA_Transmit+0x34>)
 80012ea:	f002 fee5 	bl	80040b8 <HAL_I2C_Mem_Write_DMA>
	return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001cc 	.word	0x200001cc

080012fc <I2C_1_Abstract_Master_Transmit_Blocking>:

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4603      	mov	r3, r0
 8001308:	81fb      	strh	r3, [r7, #14]
 800130a:	4613      	mov	r3, r2
 800130c:	81bb      	strh	r3, [r7, #12]
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800130e:	89ba      	ldrh	r2, [r7, #12]
 8001310:	89f9      	ldrh	r1, [r7, #14]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	4613      	mov	r3, r2
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	4804      	ldr	r0, [pc, #16]	@ (800132c <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 800131c:	f002 faa2 	bl	8003864 <HAL_I2C_Master_Transmit>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001cc 	.word	0x200001cc

08001330 <I2C_1_Abstract_Mem_Write_Blocking>:

uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af04      	add	r7, sp, #16
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	80fb      	strh	r3, [r7, #6]
 800133c:	460b      	mov	r3, r1
 800133e:	717b      	strb	r3, [r7, #5]
 8001340:	4613      	mov	r3, r2
 8001342:	713b      	strb	r3, [r7, #4]
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8001344:	797b      	ldrb	r3, [r7, #5]
 8001346:	b29a      	uxth	r2, r3
 8001348:	793b      	ldrb	r3, [r7, #4]
 800134a:	b298      	uxth	r0, r3
 800134c:	88f9      	ldrh	r1, [r7, #6]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	8a3b      	ldrh	r3, [r7, #16]
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4603      	mov	r3, r0
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800135e:	f002 fb7f 	bl	8003a60 <HAL_I2C_Mem_Write>
 8001362:	4603      	mov	r3, r0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200001cc 	.word	0x200001cc

08001370 <I2C_DMA_Recive>:

uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	461a      	mov	r2, r3
 800137a:	4603      	mov	r3, r0
 800137c:	81fb      	strh	r3, [r7, #14]
 800137e:	460b      	mov	r3, r1
 8001380:	81bb      	strh	r3, [r7, #12]
 8001382:	4613      	mov	r3, r2
 8001384:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8001386:	89ba      	ldrh	r2, [r7, #12]
 8001388:	89f9      	ldrh	r1, [r7, #14]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	4803      	ldr	r0, [pc, #12]	@ (80013a4 <I2C_DMA_Recive+0x34>)
 8001396:	f002 ffed 	bl	8004374 <HAL_I2C_Mem_Read_DMA>
	return 1;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001cc 	.word	0x200001cc

080013a8 <I2C_RBlocking>:

uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4603      	mov	r3, r0
 80013b2:	81fb      	strh	r3, [r7, #14]
 80013b4:	460b      	mov	r3, r1
 80013b6:	81bb      	strh	r3, [r7, #12]
 80013b8:	4613      	mov	r3, r2
 80013ba:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
 80013bc:	8978      	ldrh	r0, [r7, #10]
 80013be:	89ba      	ldrh	r2, [r7, #12]
 80013c0:	89f9      	ldrh	r1, [r7, #14]
 80013c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	8b3b      	ldrh	r3, [r7, #24]
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4603      	mov	r3, r0
 80013d2:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <I2C_RBlocking+0x3c>)
 80013d4:	f002 fc3e 	bl	8003c54 <HAL_I2C_Mem_Read>
	return 1;
 80013d8:	2301      	movs	r3, #1

}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001cc 	.word	0x200001cc

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <Error_Handler+0x8>

080013f4 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(MPU6050_t *MpuData){
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]

    uint8_t check;
    uint8_t Data;

    MpuData->DMAREADY=1;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	771a      	strb	r2, [r3, #28]
    // check device ID WHO_AM_I

    I2C_Recive_Blocking(MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);
 8001402:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <MPU6050_Init+0xcc>)
 8001404:	681c      	ldr	r4, [r3, #0]
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	2201      	movs	r2, #1
 800140c:	9200      	str	r2, [sp, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	2175      	movs	r1, #117	@ 0x75
 8001412:	20d0      	movs	r0, #208	@ 0xd0
 8001414:	47a0      	blx	r4
    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b68      	cmp	r3, #104	@ 0x68
 800141a:	d14c      	bne.n	80014b6 <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 800141c:	2300      	movs	r3, #0
 800141e:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,1000);
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <MPU6050_Init+0xd0>)
 8001422:	681c      	ldr	r4, [r3, #0]
 8001424:	f107 030e 	add.w	r3, r7, #14
 8001428:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800142c:	9201      	str	r2, [sp, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	2201      	movs	r2, #1
 8001434:	216b      	movs	r1, #107	@ 0x6b
 8001436:	20d0      	movs	r0, #208	@ 0xd0
 8001438:	47a0      	blx	r4

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800143a:	2307      	movs	r3, #7
 800143c:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <MPU6050_Init+0xd0>)
 8001440:	681c      	ldr	r4, [r3, #0]
 8001442:	f107 030e 	add.w	r3, r7, #14
 8001446:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	2119      	movs	r1, #25
 8001454:	20d0      	movs	r0, #208	@ 0xd0
 8001456:	47a0      	blx	r4

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <MPU6050_Init+0xd0>)
 800145e:	681c      	ldr	r4, [r3, #0]
 8001460:	f107 030e 	add.w	r3, r7, #14
 8001464:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001468:	9201      	str	r2, [sp, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	9200      	str	r2, [sp, #0]
 800146e:	2201      	movs	r2, #1
 8001470:	211c      	movs	r1, #28
 8001472:	20d0      	movs	r0, #208	@ 0xd0
 8001474:	47a0      	blx	r4

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000);
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MPU6050_Init+0xd0>)
 800147c:	681c      	ldr	r4, [r3, #0]
 800147e:	f107 030e 	add.w	r3, r7, #14
 8001482:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	9200      	str	r2, [sp, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	211b      	movs	r1, #27
 8001490:	20d0      	movs	r0, #208	@ 0xd0
 8001492:	47a0      	blx	r4

        Data = 0x03;
 8001494:	2303      	movs	r3, #3
 8001496:	73bb      	strb	r3, [r7, #14]
        I2C_Transmit_Blocking(MPU6050_ADDR, LOWPASS_CONFIG, 1, &Data, 1,1000);
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MPU6050_Init+0xd0>)
 800149a:	681c      	ldr	r4, [r3, #0]
 800149c:	f107 030e 	add.w	r3, r7, #14
 80014a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	9200      	str	r2, [sp, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	211a      	movs	r1, #26
 80014ae:	20d0      	movs	r0, #208	@ 0xd0
 80014b0:	47a0      	blx	r4

        return 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <MPU6050_Init+0xc4>
    }
    return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	20000418 	.word	0x20000418
 80014c4:	2000041c 	.word	0x2000041c

080014c8 <MPU6050_Read_All>:
//
//    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
//    MpuData.Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
//}

void MPU6050_Read_All(MPU6050_t *MpuData) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if(!MpuData->DMAREADY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7f1b      	ldrb	r3, [r3, #28]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d060      	beq.n	800159a <MPU6050_Read_All+0xd2>
    	return;

    I2C_Recive(MPU6050_ADDR, ACCEL_XOUT_H_REG,MpuData->Rec_Data, 14);
 80014d8:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <MPU6050_Read_All+0xdc>)
 80014da:	681c      	ldr	r4, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f103 020e 	add.w	r2, r3, #14
 80014e2:	230e      	movs	r3, #14
 80014e4:	213b      	movs	r1, #59	@ 0x3b
 80014e6:	20d0      	movs	r0, #208	@ 0xd0
 80014e8:	47a0      	blx	r4
    MpuData->DMAREADY=0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	771a      	strb	r2, [r3, #28]


    MpuData->Accel_X_RAW = (int16_t) (MpuData->Rec_Data[0] << 8 | MpuData->Rec_Data[1]);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7b9b      	ldrb	r3, [r3, #14]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7bdb      	ldrb	r3, [r3, #15]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	801a      	strh	r2, [r3, #0]
    MpuData->Accel_Y_RAW = (int16_t) (MpuData->Rec_Data[2] << 8 | MpuData->Rec_Data[3]);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7c1b      	ldrb	r3, [r3, #16]
 800150c:	b21b      	sxth	r3, r3
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7c5b      	ldrb	r3, [r3, #17]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21a      	sxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	805a      	strh	r2, [r3, #2]
    MpuData->Accel_Z_RAW = (int16_t) (MpuData->Rec_Data[4] << 8 | MpuData->Rec_Data[5]);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7c9b      	ldrb	r3, [r3, #18]
 8001524:	b21b      	sxth	r3, r3
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7cdb      	ldrb	r3, [r3, #19]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21a      	sxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	809a      	strh	r2, [r3, #4]
    MpuData->temp 		 = 			 (MpuData->Rec_Data[6] << 8 | MpuData->Rec_Data[7]);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7d1b      	ldrb	r3, [r3, #20]
 800153c:	b21b      	sxth	r3, r3
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7d5b      	ldrb	r3, [r3, #21]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	80da      	strh	r2, [r3, #6]
    MpuData->Gyro_X_RAW  = (int16_t) (MpuData->Rec_Data[8] << 8 | MpuData->Rec_Data[9]);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7d9b      	ldrb	r3, [r3, #22]
 8001554:	b21b      	sxth	r3, r3
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7ddb      	ldrb	r3, [r3, #23]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21a      	sxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	811a      	strh	r2, [r3, #8]
    MpuData->Gyro_Y_RAW  = (int16_t) (MpuData->Rec_Data[10]<< 8 | MpuData->Rec_Data[11]);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e1b      	ldrb	r3, [r3, #24]
 800156c:	b21b      	sxth	r3, r3
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7e5b      	ldrb	r3, [r3, #25]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	815a      	strh	r2, [r3, #10]
    MpuData->Gyro_Z_RAW  = (int16_t) (MpuData->Rec_Data[12]<< 8 | MpuData->Rec_Data[13]);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e9b      	ldrb	r3, [r3, #26]
 8001584:	b21b      	sxth	r3, r3
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7edb      	ldrb	r3, [r3, #27]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	819a      	strh	r2, [r3, #12]
 8001598:	e000      	b.n	800159c <MPU6050_Read_All+0xd4>
    	return;
 800159a:	bf00      	nop
//    }
//    if (fabs(MpuData.KalmanAngleY) > 90)
//        MpuData.Gx = -MpuData.Gx;
//    MpuData.KalmanAngleX = Kalman_getAngle(&KalmanX, roll, MpuData.Gy, dt);

}
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000410 	.word	0x20000410

080015a8 <MPU6050_NonBlocking_DMA>:
//    Kalman->P[1][1] -= K[1] * P01_temp;
//
//    return Kalman->angle;
//};

void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	I2C_Transmit = Master_Transmit;
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <MPU6050_NonBlocking_DMA+0x24>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
	I2C_Recive = Master_Recive;
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <MPU6050_NonBlocking_DMA+0x28>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000414 	.word	0x20000414
 80015d0:	20000410 	.word	0x20000410

080015d4 <MPU6050_I2C_Blocking>:
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	I2C_Recive_Blocking = Recive_Blocking;
 80015de:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <MPU6050_I2C_Blocking+0x24>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6013      	str	r3, [r2, #0]
	I2C_Transmit_Blocking = Transmit_Blocking;
 80015e4:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <MPU6050_I2C_Blocking+0x28>)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6013      	str	r3, [r2, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000418 	.word	0x20000418
 80015fc:	2000041c 	.word	0x2000041c

08001600 <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	461a      	mov	r2, r3
 800160a:	4603      	mov	r3, r0
 800160c:	81fb      	strh	r3, [r7, #14]
 800160e:	460b      	mov	r3, r1
 8001610:	81bb      	strh	r3, [r7, #12]
 8001612:	4613      	mov	r3, r2
 8001614:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 8001616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161a:	3307      	adds	r3, #7
 800161c:	2b00      	cmp	r3, #0
 800161e:	da00      	bge.n	8001622 <SSD1306_DrawBitmap+0x22>
 8001620:	3307      	adds	r3, #7
 8001622:	10db      	asrs	r3, r3, #3
 8001624:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 800162a:	2300      	movs	r3, #0
 800162c:	82bb      	strh	r3, [r7, #20]
 800162e:	e044      	b.n	80016ba <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	827b      	strh	r3, [r7, #18]
 8001634:	e02f      	b.n	8001696 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001636:	8a7b      	ldrh	r3, [r7, #18]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
 8001646:	e012      	b.n	800166e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001648:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800164c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001650:	fb03 f202 	mul.w	r2, r3, r2
 8001654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001658:	2b00      	cmp	r3, #0
 800165a:	da00      	bge.n	800165e <SSD1306_DrawBitmap+0x5e>
 800165c:	3307      	adds	r3, #7
 800165e:	10db      	asrs	r3, r3, #3
 8001660:	b21b      	sxth	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800166e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001672:	2b00      	cmp	r3, #0
 8001674:	da09      	bge.n	800168a <SSD1306_DrawBitmap+0x8a>
 8001676:	89fa      	ldrh	r2, [r7, #14]
 8001678:	8a7b      	ldrh	r3, [r7, #18]
 800167a:	4413      	add	r3, r2
 800167c:	b29b      	uxth	r3, r3
 800167e:	89b9      	ldrh	r1, [r7, #12]
 8001680:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f94d 	bl	8001924 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800168a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	827b      	strh	r3, [r7, #18]
 8001696:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbc9      	blt.n	8001636 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80016a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	82bb      	strh	r3, [r7, #20]
 80016ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	81bb      	strh	r3, [r7, #12]
 80016ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dbb4      	blt.n	8001630 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <SSD1306_Init>:

void SSD1306_Init()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

	SSD1306_WRITECOMMAND(0xAE);
 80016d4:	22ae      	movs	r2, #174	@ 0xae
 80016d6:	2100      	movs	r1, #0
 80016d8:	2078      	movs	r0, #120	@ 0x78
 80016da:	f000 f98d 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 80016de:	2220      	movs	r2, #32
 80016e0:	2100      	movs	r1, #0
 80016e2:	2078      	movs	r0, #120	@ 0x78
 80016e4:	f000 f988 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80016e8:	2210      	movs	r2, #16
 80016ea:	2100      	movs	r1, #0
 80016ec:	2078      	movs	r0, #120	@ 0x78
 80016ee:	f000 f983 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 80016f2:	22b0      	movs	r2, #176	@ 0xb0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2078      	movs	r0, #120	@ 0x78
 80016f8:	f000 f97e 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 80016fc:	22c8      	movs	r2, #200	@ 0xc8
 80016fe:	2100      	movs	r1, #0
 8001700:	2078      	movs	r0, #120	@ 0x78
 8001702:	f000 f979 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2078      	movs	r0, #120	@ 0x78
 800170c:	f000 f974 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001710:	2210      	movs	r2, #16
 8001712:	2100      	movs	r1, #0
 8001714:	2078      	movs	r0, #120	@ 0x78
 8001716:	f000 f96f 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 800171a:	2240      	movs	r2, #64	@ 0x40
 800171c:	2100      	movs	r1, #0
 800171e:	2078      	movs	r0, #120	@ 0x78
 8001720:	f000 f96a 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001724:	2281      	movs	r2, #129	@ 0x81
 8001726:	2100      	movs	r1, #0
 8001728:	2078      	movs	r0, #120	@ 0x78
 800172a:	f000 f965 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800172e:	22ff      	movs	r2, #255	@ 0xff
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	@ 0x78
 8001734:	f000 f960 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001738:	22a1      	movs	r2, #161	@ 0xa1
 800173a:	2100      	movs	r1, #0
 800173c:	2078      	movs	r0, #120	@ 0x78
 800173e:	f000 f95b 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001742:	22a6      	movs	r2, #166	@ 0xa6
 8001744:	2100      	movs	r1, #0
 8001746:	2078      	movs	r0, #120	@ 0x78
 8001748:	f000 f956 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 800174c:	22a8      	movs	r2, #168	@ 0xa8
 800174e:	2100      	movs	r1, #0
 8001750:	2078      	movs	r0, #120	@ 0x78
 8001752:	f000 f951 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001756:	223f      	movs	r2, #63	@ 0x3f
 8001758:	2100      	movs	r1, #0
 800175a:	2078      	movs	r0, #120	@ 0x78
 800175c:	f000 f94c 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8001760:	22a4      	movs	r2, #164	@ 0xa4
 8001762:	2100      	movs	r1, #0
 8001764:	2078      	movs	r0, #120	@ 0x78
 8001766:	f000 f947 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 800176a:	22d3      	movs	r2, #211	@ 0xd3
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	@ 0x78
 8001770:	f000 f942 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2078      	movs	r0, #120	@ 0x78
 800177a:	f000 f93d 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 800177e:	22d5      	movs	r2, #213	@ 0xd5
 8001780:	2100      	movs	r1, #0
 8001782:	2078      	movs	r0, #120	@ 0x78
 8001784:	f000 f938 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001788:	22f0      	movs	r2, #240	@ 0xf0
 800178a:	2100      	movs	r1, #0
 800178c:	2078      	movs	r0, #120	@ 0x78
 800178e:	f000 f933 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8001792:	22d9      	movs	r2, #217	@ 0xd9
 8001794:	2100      	movs	r1, #0
 8001796:	2078      	movs	r0, #120	@ 0x78
 8001798:	f000 f92e 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 800179c:	2222      	movs	r2, #34	@ 0x22
 800179e:	2100      	movs	r1, #0
 80017a0:	2078      	movs	r0, #120	@ 0x78
 80017a2:	f000 f929 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 80017a6:	22da      	movs	r2, #218	@ 0xda
 80017a8:	2100      	movs	r1, #0
 80017aa:	2078      	movs	r0, #120	@ 0x78
 80017ac:	f000 f924 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017b0:	2212      	movs	r2, #18
 80017b2:	2100      	movs	r1, #0
 80017b4:	2078      	movs	r0, #120	@ 0x78
 80017b6:	f000 f91f 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 80017ba:	22db      	movs	r2, #219	@ 0xdb
 80017bc:	2100      	movs	r1, #0
 80017be:	2078      	movs	r0, #120	@ 0x78
 80017c0:	f000 f91a 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 80017c4:	2220      	movs	r2, #32
 80017c6:	2100      	movs	r1, #0
 80017c8:	2078      	movs	r0, #120	@ 0x78
 80017ca:	f000 f915 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 80017ce:	228d      	movs	r2, #141	@ 0x8d
 80017d0:	2100      	movs	r1, #0
 80017d2:	2078      	movs	r0, #120	@ 0x78
 80017d4:	f000 f910 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 80017d8:	2214      	movs	r2, #20
 80017da:	2100      	movs	r1, #0
 80017dc:	2078      	movs	r0, #120	@ 0x78
 80017de:	f000 f90b 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 80017e2:	22af      	movs	r2, #175	@ 0xaf
 80017e4:	2100      	movs	r1, #0
 80017e6:	2078      	movs	r0, #120	@ 0x78
 80017e8:	f000 f906 	bl	80019f8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017ec:	222e      	movs	r2, #46	@ 0x2e
 80017ee:	2100      	movs	r1, #0
 80017f0:	2078      	movs	r0, #120	@ 0x78
 80017f2:	f000 f901 	bl	80019f8 <SSD1306_I2C_Write>

	SSD1306.CurrentX = 0;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <SSD1306_Init+0x158>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <SSD1306_Init+0x158>)
 80017fe:	2200      	movs	r2, #0
 8001800:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <SSD1306_Init+0x158>)
 8001804:	2201      	movs	r2, #1
 8001806:	715a      	strb	r2, [r3, #5]
	SSD1306.Page=0;
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <SSD1306_Init+0x158>)
 800180a:	2200      	movs	r2, #0
 800180c:	719a      	strb	r2, [r3, #6]
	SSD1306.DMA = CMD;
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <SSD1306_Init+0x158>)
 8001810:	2200      	movs	r2, #0
 8001812:	71da      	strb	r2, [r3, #7]
	SSD1306.Needtorefresh=1;
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <SSD1306_Init+0x158>)
 8001816:	2201      	movs	r2, #1
 8001818:	741a      	strb	r2, [r3, #16]
	SSD1306_Fill(BLACK);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f86a 	bl	80018f4 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001820:	f000 f804 	bl	800182c <SSD1306_UpdateScreen>

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000828 	.word	0x20000828

0800182c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 800182c:	b598      	push	{r3, r4, r7, lr}
 800182e:	af00      	add	r7, sp, #0
	if(SSD1306.DMAREADY && SSD1306.Needtorefresh){
 8001830:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001832:	7c5b      	ldrb	r3, [r3, #17]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d052      	beq.n	80018de <SSD1306_UpdateScreen+0xb2>
 8001838:	4b2a      	ldr	r3, [pc, #168]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 800183a:	7c1b      	ldrb	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d04e      	beq.n	80018de <SSD1306_UpdateScreen+0xb2>
		switch(SSD1306.DMA){
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001842:	79db      	ldrb	r3, [r3, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01c      	beq.n	8001882 <SSD1306_UpdateScreen+0x56>
 8001848:	2b01      	cmp	r3, #1
 800184a:	d137      	bne.n	80018bc <SSD1306_UpdateScreen+0x90>
			case Data:
				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x40, &SSD1306_Buffer[SSD1306_WIDTH*SSD1306.Page], SSD1306_WIDTH)==1){
 800184c:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <SSD1306_UpdateScreen+0xbc>)
 800184e:	681c      	ldr	r4, [r3, #0]
 8001850:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001852:	799b      	ldrb	r3, [r3, #6]
 8001854:	01db      	lsls	r3, r3, #7
 8001856:	4a25      	ldr	r2, [pc, #148]	@ (80018ec <SSD1306_UpdateScreen+0xc0>)
 8001858:	441a      	add	r2, r3
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	2140      	movs	r1, #64	@ 0x40
 800185e:	2078      	movs	r0, #120	@ 0x78
 8001860:	47a0      	blx	r4
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d12d      	bne.n	80018c4 <SSD1306_UpdateScreen+0x98>
					SSD1306.Page++;
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 800186a:	799b      	ldrb	r3, [r3, #6]
 800186c:	3301      	adds	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001872:	719a      	strb	r2, [r3, #6]
					SSD1306.DMA=CMD;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001876:	2200      	movs	r2, #0
 8001878:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 800187c:	2200      	movs	r2, #0
 800187e:	745a      	strb	r2, [r3, #17]
				}
				break;
 8001880:	e020      	b.n	80018c4 <SSD1306_UpdateScreen+0x98>
			case CMD:

				SSD1306.Commands[0]=0xB0 + SSD1306.Page;
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001884:	799b      	ldrb	r3, [r3, #6]
 8001886:	3b50      	subs	r3, #80	@ 0x50
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 800188c:	721a      	strb	r2, [r3, #8]
				SSD1306.Commands[1]=0x00;
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001890:	2200      	movs	r2, #0
 8001892:	725a      	strb	r2, [r3, #9]
				SSD1306.Commands[2]=0x10;
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 8001896:	2210      	movs	r2, #16
 8001898:	729a      	strb	r2, [r3, #10]

				if(I2C_DMA_Master_Transmit(SSD1306_I2C_ADDR,0x00, &SSD1306.Commands[0],3)==1){
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <SSD1306_UpdateScreen+0xbc>)
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	2303      	movs	r3, #3
 80018a0:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <SSD1306_UpdateScreen+0xc4>)
 80018a2:	2100      	movs	r1, #0
 80018a4:	2078      	movs	r0, #120	@ 0x78
 80018a6:	47a0      	blx	r4
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d10c      	bne.n	80018c8 <SSD1306_UpdateScreen+0x9c>
					SSD1306.DMA=Data;
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	71da      	strb	r2, [r3, #7]
					SSD1306.DMAREADY=0;
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	745a      	strb	r2, [r3, #17]
				}
				break;
 80018ba:	e005      	b.n	80018c8 <SSD1306_UpdateScreen+0x9c>

			default:
				SSD1306.Page=8;
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 80018be:	2208      	movs	r2, #8
 80018c0:	719a      	strb	r2, [r3, #6]
				break;
 80018c2:	e002      	b.n	80018ca <SSD1306_UpdateScreen+0x9e>
				break;
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <SSD1306_UpdateScreen+0x9e>
				break;
 80018c8:	bf00      	nop
			}
		if(SSD1306.Page>7){
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 80018cc:	799b      	ldrb	r3, [r3, #6]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d905      	bls.n	80018de <SSD1306_UpdateScreen+0xb2>
			SSD1306.Page=0;
 80018d2:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	719a      	strb	r2, [r3, #6]
			SSD1306.Needtorefresh=0;
 80018d8:	4b02      	ldr	r3, [pc, #8]	@ (80018e4 <SSD1306_UpdateScreen+0xb8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	741a      	strb	r2, [r3, #16]
		}
	}
}
 80018de:	bf00      	nop
 80018e0:	bd98      	pop	{r3, r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000828 	.word	0x20000828
 80018e8:	20000820 	.word	0x20000820
 80018ec:	20000420 	.word	0x20000420
 80018f0:	20000830 	.word	0x20000830

080018f4 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <SSD1306_Fill+0x14>
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <SSD1306_Fill+0x16>
 8001908:	23ff      	movs	r3, #255	@ 0xff
 800190a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190e:	4619      	mov	r1, r3
 8001910:	4803      	ldr	r0, [pc, #12]	@ (8001920 <SSD1306_Fill+0x2c>)
 8001912:	f00c f8d1 	bl	800dab8 <memset>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000420 	.word	0x20000420

08001924 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	460b      	mov	r3, r1
 8001930:	80bb      	strh	r3, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2b7f      	cmp	r3, #127	@ 0x7f
 800193a:	d848      	bhi.n	80019ce <SSD1306_DrawPixel+0xaa>
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001940:	d845      	bhi.n	80019ce <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <SSD1306_DrawPixel+0xb8>)
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d11a      	bne.n	8001994 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	08db      	lsrs	r3, r3, #3
 8001964:	b298      	uxth	r0, r3
 8001966:	4603      	mov	r3, r0
 8001968:	01db      	lsls	r3, r3, #7
 800196a:	4413      	add	r3, r2
 800196c:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <SSD1306_DrawPixel+0xbc>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	b25a      	sxtb	r2, r3
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	b25b      	sxtb	r3, r3
 8001980:	4313      	orrs	r3, r2
 8001982:	b259      	sxtb	r1, r3
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	4603      	mov	r3, r0
 8001988:	01db      	lsls	r3, r3, #7
 800198a:	4413      	add	r3, r2
 800198c:	b2c9      	uxtb	r1, r1
 800198e:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <SSD1306_DrawPixel+0xbc>)
 8001990:	54d1      	strb	r1, [r2, r3]
 8001992:	e01d      	b.n	80019d0 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	88bb      	ldrh	r3, [r7, #4]
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	b298      	uxth	r0, r3
 800199c:	4603      	mov	r3, r0
 800199e:	01db      	lsls	r3, r3, #7
 80019a0:	4413      	add	r3, r2
 80019a2:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <SSD1306_DrawPixel+0xbc>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	b25a      	sxtb	r2, r3
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	4013      	ands	r3, r2
 80019bc:	b259      	sxtb	r1, r3
 80019be:	88fa      	ldrh	r2, [r7, #6]
 80019c0:	4603      	mov	r3, r0
 80019c2:	01db      	lsls	r3, r3, #7
 80019c4:	4413      	add	r3, r2
 80019c6:	b2c9      	uxtb	r1, r1
 80019c8:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <SSD1306_DrawPixel+0xbc>)
 80019ca:	54d1      	strb	r1, [r2, r3]
 80019cc:	e000      	b.n	80019d0 <SSD1306_DrawPixel+0xac>
		return;
 80019ce:	bf00      	nop
	}
}
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000828 	.word	0x20000828
 80019e0:	20000420 	.word	0x20000420

080019e4 <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff ff83 	bl	80018f4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019ee:	f7ff ff1d 	bl	800182c <SSD1306_UpdateScreen>
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <SSD1306_I2C_Write>:
//uint8_t SSD1306_I2C_WriteMulti(uint8_t address, uint16_t reg, uint8_t* data, uint16_t count) {
//
//	return (uint8_t)I2C_DMA_Master_Transmit(address, reg, data, count);
//}

void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	460b      	mov	r3, r1
 8001a04:	71bb      	strb	r3, [r7, #6]
 8001a06:	4613      	mov	r3, r2
 8001a08:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a0e:	797b      	ldrb	r3, [r7, #5]
 8001a10:	737b      	strb	r3, [r7, #13]
	I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <SSD1306_I2C_Write+0x34>)
 8001a14:	681c      	ldr	r4, [r3, #0]
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	b298      	uxth	r0, r3
 8001a1a:	f107 010c 	add.w	r1, r7, #12
 8001a1e:	230a      	movs	r3, #10
 8001a20:	2202      	movs	r2, #2
 8001a22:	47a0      	blx	r4
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	20000824 	.word	0x20000824

08001a30 <Display_Set_I2C_Master_Transmit>:

void Display_Set_I2C_Master_Transmit(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg, uint8_t *pData, uint16_t Size),uint8_t (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	I2C_DMA_Master_Transmit = Master_Transmit;
 8001a3a:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <Display_Set_I2C_Master_Transmit+0x24>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8001a40:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <Display_Set_I2C_Master_Transmit+0x28>)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6013      	str	r3, [r2, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000820 	.word	0x20000820
 8001a58:	20000824 	.word	0x20000824

08001a5c <SSD1306_DMAREADY>:

void SSD1306_DMAREADY(){
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	SSD1306.DMAREADY=1;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <SSD1306_DMAREADY+0x14>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	745a      	strb	r2, [r3, #17]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000828 	.word	0x20000828

08001a74 <SSD1306_RefreshReady>:

void SSD1306_RefreshReady(){
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	SSD1306.Needtorefresh=1;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <SSD1306_RefreshReady+0x14>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	741a      	strb	r2, [r3, #16]
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000828 	.word	0x20000828

08001a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a28      	ldr	r2, [pc, #160]	@ (8001b9c <HAL_ADC_MspInit+0xc0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d149      	bne.n	8001b92 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b27      	ldr	r3, [pc, #156]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	4a26      	ldr	r2, [pc, #152]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <HAL_ADC_MspInit+0xc4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001b52:	23fe      	movs	r3, #254	@ 0xfe
 8001b54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	@ (8001ba4 <HAL_ADC_MspInit+0xc8>)
 8001b66:	f001 fb6b 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480a      	ldr	r0, [pc, #40]	@ (8001ba8 <HAL_ADC_MspInit+0xcc>)
 8001b7e:	f001 fb5f 	bl	8003240 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2012      	movs	r0, #18
 8001b88:	f000 ff77 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b8c:	2012      	movs	r0, #18
 8001b8e:	f000 ff90 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	@ 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020400 	.word	0x40020400

08001bac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d08 <HAL_I2C_MspInit+0x15c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f040 8097 	bne.w	8001cfe <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d0c <HAL_I2C_MspInit+0x160>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001d0c <HAL_I2C_MspInit+0x160>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be0:	4b4a      	ldr	r3, [pc, #296]	@ (8001d0c <HAL_I2C_MspInit+0x160>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bec:	23c0      	movs	r3, #192	@ 0xc0
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4842      	ldr	r0, [pc, #264]	@ (8001d10 <HAL_I2C_MspInit+0x164>)
 8001c08:	f001 fb1a 	bl	8003240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <HAL_I2C_MspInit+0x160>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	4a3d      	ldr	r2, [pc, #244]	@ (8001d0c <HAL_I2C_MspInit+0x160>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <HAL_I2C_MspInit+0x160>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001c28:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d18 <HAL_I2C_MspInit+0x16c>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001c2e:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c34:	4b37      	ldr	r3, [pc, #220]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c36:	2240      	movs	r2, #64	@ 0x40
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3a:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c48:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c4e:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c66:	482b      	ldr	r0, [pc, #172]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c68:	f000 ff3e 	bl	8002ae8 <HAL_DMA_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001c72:	f7ff fbb9 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c7c:	4a25      	ldr	r2, [pc, #148]	@ (8001d14 <HAL_I2C_MspInit+0x168>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001c84:	4a26      	ldr	r2, [pc, #152]	@ (8001d20 <HAL_I2C_MspInit+0x174>)
 8001c86:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001c8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c90:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c96:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cbc:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001cc2:	4816      	ldr	r0, [pc, #88]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001cc4:	f000 ff10 	bl	8002ae8 <HAL_DMA_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001cce:	f7ff fb8b 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cd8:	4a10      	ldr	r2, [pc, #64]	@ (8001d1c <HAL_I2C_MspInit+0x170>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	201f      	movs	r0, #31
 8001ce4:	f000 fec9 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ce8:	201f      	movs	r0, #31
 8001cea:	f000 fee2 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2020      	movs	r0, #32
 8001cf4:	f000 fec1 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cf8:	2020      	movs	r0, #32
 8001cfa:	f000 feda 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020400 	.word	0x40020400
 8001d14:	20000220 	.word	0x20000220
 8001d18:	40026028 	.word	0x40026028
 8001d1c:	20000280 	.word	0x20000280
 8001d20:	40026010 	.word	0x40026010

08001d24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2a      	ldr	r2, [pc, #168]	@ (8001ddc <HAL_TIM_Base_MspInit+0xb8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d116      	bne.n	8001d64 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a28      	ldr	r2, [pc, #160]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d46:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	201d      	movs	r0, #29
 8001d58:	f000 fe8f 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d5c:	201d      	movs	r0, #29
 8001d5e:	f000 fea8 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001d62:	e036      	b.n	8001dd2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1e      	ldr	r2, [pc, #120]	@ (8001de4 <HAL_TIM_Base_MspInit+0xc0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d116      	bne.n	8001d9c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a1a      	ldr	r2, [pc, #104]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2019      	movs	r0, #25
 8001d90:	f000 fe73 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d94:	2019      	movs	r0, #25
 8001d96:	f000 fe8c 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 8001d9a:	e01a      	b.n	8001dd2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a11      	ldr	r2, [pc, #68]	@ (8001de8 <HAL_TIM_Base_MspInit+0xc4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d115      	bne.n	8001dd2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_TIM_Base_MspInit+0xbc>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	201a      	movs	r0, #26
 8001dc8:	f000 fe57 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001dcc:	201a      	movs	r0, #26
 8001dce:	f000 fe70 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40014400 	.word	0x40014400
 8001de8:	40014800 	.word	0x40014800

08001dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <HAL_TIM_MspPostInit+0x68>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11d      	bne.n	8001e4a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_TIM_MspPostInit+0x6c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	@ (8001e58 <HAL_TIM_MspPostInit+0x6c>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <HAL_TIM_MspPostInit+0x6c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 8001e2a:	2330      	movs	r3, #48	@ 0x30
 8001e2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <HAL_TIM_MspPostInit+0x70>)
 8001e46:	f001 f9fb 	bl	8003240 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <NMI_Handler+0x4>

08001e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <MemManage_Handler+0x4>

08001e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb6:	f000 f921 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ec6:	f000 ff37 	bl	8002d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000280 	.word	0x20000280

08001ed4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <DMA1_Stream1_IRQHandler+0x10>)
 8001eda:	f000 ff2d 	bl	8002d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000220 	.word	0x20000220

08001ee8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <ADC_IRQHandler+0x10>)
 8001eee:	f000 f98c 	bl	800220a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000184 	.word	0x20000184

08001efc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f02:	f006 fe4f 	bl	8008ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000328 	.word	0x20000328

08001f10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f16:	f006 fe45 	bl	8008ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000370 	.word	0x20000370

08001f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <TIM3_IRQHandler+0x10>)
 8001f2a:	f006 fe3b 	bl	8008ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200002e0 	.word	0x200002e0

08001f38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <I2C1_EV_IRQHandler+0x10>)
 8001f3e:	f002 fba9 	bl	8004694 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200001cc 	.word	0x200001cc

08001f4c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <I2C1_ER_IRQHandler+0x10>)
 8001f52:	f002 fd10 	bl	8004976 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200001cc 	.word	0x200001cc

08001f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <OTG_FS_IRQHandler+0x10>)
 8001f66:	f004 ff0e 	bl	8006d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20001128 	.word	0x20001128

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	@ (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f00b fda0 	bl	800dae8 <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <_sbrk+0x64>)
 8001fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20020000 	.word	0x20020000
 8001fd4:	00000400 	.word	0x00000400
 8001fd8:	2000083c 	.word	0x2000083c
 8001fdc:	20001978 	.word	0x20001978

08001fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <SystemInit+0x20>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <SystemInit+0x20>)
 8001fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800203c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002008:	f7ff ffea 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480c      	ldr	r0, [pc, #48]	@ (8002040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800200e:	490d      	ldr	r1, [pc, #52]	@ (8002044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002024:	4c0a      	ldr	r4, [pc, #40]	@ (8002050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002032:	f00b fd5f 	bl	800daf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002036:	f7fe fe03 	bl	8000c40 <main>
  bx  lr    
 800203a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800203c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002044:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8002048:	0800e72c 	.word	0x0800e72c
  ldr r2, =_sbss
 800204c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002050:	20001974 	.word	0x20001974

08002054 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <DMA1_Stream2_IRQHandler>
	...

08002058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800205c:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <HAL_Init+0x40>)
 8002062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_Init+0x40>)
 800206e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <HAL_Init+0x40>)
 800207a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002080:	2003      	movs	r0, #3
 8002082:	f000 fcef 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002086:	200f      	movs	r0, #15
 8002088:	f000 f808 	bl	800209c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208c:	f7ff fcfe 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023c00 	.word	0x40023c00

0800209c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_InitTick+0x54>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_InitTick+0x58>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fd07 	bl	8002ace <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f000 fccf 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	@ (80020f8 <HAL_InitTick+0x5c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000004 	.word	0x20000004
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	20000008 	.word	0x20000008

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000000c 	.word	0x2000000c
 8002120:	20000840 	.word	0x20000840

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000840 	.word	0x20000840

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000000c 	.word	0x2000000c

08002184 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e033      	b.n	8002202 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fc9a 	bl	8001adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021ca:	f023 0302 	bic.w	r3, r3, #2
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fa6e 	bl	80026b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80021f2:	e001      	b.n	80021f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d049      	beq.n	80022d4 <HAL_ADC_IRQHandler+0xca>
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d046      	beq.n	80022d4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d12b      	bne.n	80022c4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d127      	bne.n	80022c4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800228c:	2b00      	cmp	r3, #0
 800228e:	d119      	bne.n	80022c4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0220 	bic.w	r2, r2, #32
 800229e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7fe fc0b 	bl	8000ae0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0212 	mvn.w	r2, #18
 80022d2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d057      	beq.n	800239a <HAL_ADC_IRQHandler+0x190>
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d054      	beq.n	800239a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d139      	bne.n	800238a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12b      	bne.n	800238a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d124      	bne.n	800238a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11d      	bne.n	800238a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002364:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa90 	bl	80028b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 020c 	mvn.w	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x1d6>
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d014      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10d      	bne.n	80023e0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f82a 	bl	800242a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0201 	mvn.w	r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d015      	beq.n	8002422 <HAL_ADC_IRQHandler+0x218>
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d012      	beq.n	8002422 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	f043 0202 	orr.w	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0220 	mvn.w	r2, #32
 8002410:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f813 	bl	800243e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0220 	mvn.w	r2, #32
 8002420:	601a      	str	r2, [r3, #0]
  }
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1c>
 800246c:	2302      	movs	r3, #2
 800246e:	e113      	b.n	8002698 <HAL_ADC_ConfigChannel+0x244>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b09      	cmp	r3, #9
 800247e:	d925      	bls.n	80024cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68d9      	ldr	r1, [r3, #12]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	3b1e      	subs	r3, #30
 8002496:	2207      	movs	r2, #7
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43da      	mvns	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	400a      	ands	r2, r1
 80024a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68d9      	ldr	r1, [r3, #12]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	4603      	mov	r3, r0
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4403      	add	r3, r0
 80024be:	3b1e      	subs	r3, #30
 80024c0:	409a      	lsls	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	e022      	b.n	8002512 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6919      	ldr	r1, [r3, #16]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	2207      	movs	r2, #7
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	400a      	ands	r2, r1
 80024ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6919      	ldr	r1, [r3, #16]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	4603      	mov	r3, r0
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4403      	add	r3, r0
 8002508:	409a      	lsls	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b06      	cmp	r3, #6
 8002518:	d824      	bhi.n	8002564 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b05      	subs	r3, #5
 800252c:	221f      	movs	r2, #31
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	400a      	ands	r2, r1
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	4618      	mov	r0, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3b05      	subs	r3, #5
 8002556:	fa00 f203 	lsl.w	r2, r0, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	@ 0x34
 8002562:	e04c      	b.n	80025fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d824      	bhi.n	80025b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	3b23      	subs	r3, #35	@ 0x23
 800257e:	221f      	movs	r2, #31
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43da      	mvns	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	400a      	ands	r2, r1
 800258c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b23      	subs	r3, #35	@ 0x23
 80025a8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80025b4:	e023      	b.n	80025fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3b41      	subs	r3, #65	@ 0x41
 80025c8:	221f      	movs	r2, #31
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	400a      	ands	r2, r1
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4618      	mov	r0, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	3b41      	subs	r3, #65	@ 0x41
 80025f2:	fa00 f203 	lsl.w	r2, r0, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fe:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <HAL_ADC_ConfigChannel+0x250>)
 8002600:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a28      	ldr	r2, [pc, #160]	@ (80026a8 <HAL_ADC_ConfigChannel+0x254>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10f      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1d8>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b12      	cmp	r3, #18
 8002612:	d10b      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1d      	ldr	r2, [pc, #116]	@ (80026a8 <HAL_ADC_ConfigChannel+0x254>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d12b      	bne.n	800268e <HAL_ADC_ConfigChannel+0x23a>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1c      	ldr	r2, [pc, #112]	@ (80026ac <HAL_ADC_ConfigChannel+0x258>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d003      	beq.n	8002648 <HAL_ADC_ConfigChannel+0x1f4>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b11      	cmp	r3, #17
 8002646:	d122      	bne.n	800268e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a11      	ldr	r2, [pc, #68]	@ (80026ac <HAL_ADC_ConfigChannel+0x258>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d111      	bne.n	800268e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_ADC_ConfigChannel+0x25c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a11      	ldr	r2, [pc, #68]	@ (80026b4 <HAL_ADC_ConfigChannel+0x260>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	0c9a      	lsrs	r2, r3, #18
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002680:	e002      	b.n	8002688 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40012300 	.word	0x40012300
 80026a8:	40012000 	.word	0x40012000
 80026ac:	10000012 	.word	0x10000012
 80026b0:	20000004 	.word	0x20000004
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c0:	4b79      	ldr	r3, [pc, #484]	@ (80028a8 <ADC_Init+0x1f0>)
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	021a      	lsls	r2, r3, #8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002710:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	4a58      	ldr	r2, [pc, #352]	@ (80028ac <ADC_Init+0x1f4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d022      	beq.n	8002796 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800275e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002780:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e00f      	b.n	80027b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0202 	bic.w	r2, r2, #2
 80027c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6899      	ldr	r1, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7e1b      	ldrb	r3, [r3, #24]
 80027d0:	005a      	lsls	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002802:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	3b01      	subs	r3, #1
 8002810:	035a      	lsls	r2, r3, #13
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	e007      	b.n	800282c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800282a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800283a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	3b01      	subs	r3, #1
 8002848:	051a      	lsls	r2, r3, #20
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002860:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800286e:	025a      	lsls	r2, r3, #9
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6899      	ldr	r1, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	029a      	lsls	r2, r3, #10
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	609a      	str	r2, [r3, #8]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40012300 	.word	0x40012300
 80028ac:	0f000001 	.word	0x0f000001

080028b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	@ (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f7ff ff8e 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff29 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff3e 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff8e 	bl	80029b8 <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5d 	bl	8002964 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff31 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa2 	bl	8002a20 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff fb16 	bl	8002124 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e099      	b.n	8002c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b24:	e00f      	b.n	8002b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b26:	f7ff fafd 	bl	8002124 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d908      	bls.n	8002b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e078      	b.n	8002c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e8      	bne.n	8002b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4b38      	ldr	r3, [pc, #224]	@ (8002c40 <HAL_DMA_Init+0x158>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d117      	bne.n	8002c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 faab 	bl	8003148 <DMA_CheckFifoParam>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c06:	2301      	movs	r3, #1
 8002c08:	e016      	b.n	8002c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa62 	bl	80030dc <DMA_CalcBaseAndBitshift>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	223f      	movs	r2, #63	@ 0x3f
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	f010803f 	.word	0xf010803f

08002c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Start_IT+0x26>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e040      	b.n	8002cec <HAL_DMA_Start_IT+0xa8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12f      	bne.n	8002cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f9f4 	bl	8003080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	223f      	movs	r2, #63	@ 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0216 	orr.w	r2, r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2280      	movs	r2, #128	@ 0x80
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00c      	b.n	8002d2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2205      	movs	r2, #5
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d44:	4b8e      	ldr	r3, [pc, #568]	@ (8002f80 <HAL_DMA_IRQHandler+0x248>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a8e      	ldr	r2, [pc, #568]	@ (8002f84 <HAL_DMA_IRQHandler+0x24c>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0a9b      	lsrs	r3, r3, #10
 8002d50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	2208      	movs	r2, #8
 8002d64:	409a      	lsls	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01a      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0204 	bic.w	r2, r2, #4
 8002d8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	2208      	movs	r2, #8
 8002d92:	409a      	lsls	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	2201      	movs	r2, #1
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd2:	f043 0202 	orr.w	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	2204      	movs	r2, #4
 8002de0:	409a      	lsls	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e14:	2210      	movs	r2, #16
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d043      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d03c      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e32:	2210      	movs	r2, #16
 8002e34:	409a      	lsls	r2, r3
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d018      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d024      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	e01f      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01b      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
 8002e78:	e016      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0208 	bic.w	r2, r2, #8
 8002e96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	2220      	movs	r2, #32
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 808f 	beq.w	8002fd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8087 	beq.w	8002fd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	2220      	movs	r2, #32
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	d136      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0216 	bic.w	r2, r2, #22
 8002ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <HAL_DMA_IRQHandler+0x1da>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0208 	bic.w	r2, r2, #8
 8002f20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f26:	223f      	movs	r2, #63	@ 0x3f
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d07e      	beq.n	8003044 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
        }
        return;
 8002f4e:	e079      	b.n	8003044 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01d      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d031      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
 8002f7c:	e02c      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x2a0>
 8002f7e:	bf00      	nop
 8002f80:	20000004 	.word	0x20000004
 8002f84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d023      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
 8002f98:	e01e      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10f      	bne.n	8002fc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0210 	bic.w	r2, r2, #16
 8002fb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d032      	beq.n	8003046 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d022      	beq.n	8003032 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2205      	movs	r2, #5
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	3301      	adds	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	d307      	bcc.n	8003020 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f2      	bne.n	8003004 <HAL_DMA_IRQHandler+0x2cc>
 800301e:	e000      	b.n	8003022 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003020:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
 8003042:	e000      	b.n	8003046 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003044:	bf00      	nop
    }
  }
}
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800305a:	b2db      	uxtb	r3, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800309c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	d108      	bne.n	80030c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030be:	e007      	b.n	80030d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3b10      	subs	r3, #16
 80030ec:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <DMA_CalcBaseAndBitshift+0x64>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f6:	4a13      	ldr	r2, [pc, #76]	@ (8003144 <DMA_CalcBaseAndBitshift+0x68>)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d909      	bls.n	800311e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	659a      	str	r2, [r3, #88]	@ 0x58
 800311c:	e007      	b.n	800312e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	aaaaaaab 	.word	0xaaaaaaab
 8003144:	0800e6e0 	.word	0x0800e6e0

08003148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11f      	bne.n	80031a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d856      	bhi.n	8003216 <DMA_CheckFifoParam+0xce>
 8003168:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <DMA_CheckFifoParam+0x28>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003181 	.word	0x08003181
 8003174:	08003193 	.word	0x08003193
 8003178:	08003181 	.word	0x08003181
 800317c:	08003217 	.word	0x08003217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d046      	beq.n	800321a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003190:	e043      	b.n	800321a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800319a:	d140      	bne.n	800321e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e03d      	b.n	800321e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031aa:	d121      	bne.n	80031f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d837      	bhi.n	8003222 <DMA_CheckFifoParam+0xda>
 80031b2:	a201      	add	r2, pc, #4	@ (adr r2, 80031b8 <DMA_CheckFifoParam+0x70>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031cf 	.word	0x080031cf
 80031c0:	080031c9 	.word	0x080031c9
 80031c4:	080031e1 	.word	0x080031e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e030      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d025      	beq.n	8003226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031de:	e022      	b.n	8003226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031e8:	d11f      	bne.n	800322a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ee:	e01c      	b.n	800322a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d903      	bls.n	80031fe <DMA_CheckFifoParam+0xb6>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d003      	beq.n	8003204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031fc:	e018      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      break;
 8003202:	e015      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e00b      	b.n	800322e <DMA_CheckFifoParam+0xe6>
      break;
 8003216:	bf00      	nop
 8003218:	e00a      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e008      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;   
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
    }
  } 
  
  return status; 
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e159      	b.n	8003510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	429a      	cmp	r2, r3
 8003276:	f040 8148 	bne.w	800350a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d005      	beq.n	8003292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	2b02      	cmp	r3, #2
 8003290:	d130      	bne.n	80032f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c8:	2201      	movs	r2, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 0201 	and.w	r2, r3, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d017      	beq.n	8003330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d123      	bne.n	8003384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0203 	and.w	r2, r3, #3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a2 	beq.w	800350a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b57      	ldr	r3, [pc, #348]	@ (8003528 <HAL_GPIO_Init+0x2e8>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	4a56      	ldr	r2, [pc, #344]	@ (8003528 <HAL_GPIO_Init+0x2e8>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d6:	4b54      	ldr	r3, [pc, #336]	@ (8003528 <HAL_GPIO_Init+0x2e8>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e2:	4a52      	ldr	r2, [pc, #328]	@ (800352c <HAL_GPIO_Init+0x2ec>)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a49      	ldr	r2, [pc, #292]	@ (8003530 <HAL_GPIO_Init+0x2f0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d019      	beq.n	8003442 <HAL_GPIO_Init+0x202>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a48      	ldr	r2, [pc, #288]	@ (8003534 <HAL_GPIO_Init+0x2f4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x1fe>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a47      	ldr	r2, [pc, #284]	@ (8003538 <HAL_GPIO_Init+0x2f8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x1fa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a46      	ldr	r2, [pc, #280]	@ (800353c <HAL_GPIO_Init+0x2fc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x1f6>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a45      	ldr	r2, [pc, #276]	@ (8003540 <HAL_GPIO_Init+0x300>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x1f2>
 800342e:	2304      	movs	r3, #4
 8003430:	e008      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003432:	2307      	movs	r3, #7
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003436:	2303      	movs	r3, #3
 8003438:	e004      	b.n	8003444 <HAL_GPIO_Init+0x204>
 800343a:	2302      	movs	r3, #2
 800343c:	e002      	b.n	8003444 <HAL_GPIO_Init+0x204>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003442:	2300      	movs	r3, #0
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f002 0203 	and.w	r2, r2, #3
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	4093      	lsls	r3, r2
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003454:	4935      	ldr	r1, [pc, #212]	@ (800352c <HAL_GPIO_Init+0x2ec>)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003462:	4b38      	ldr	r3, [pc, #224]	@ (8003544 <HAL_GPIO_Init+0x304>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003486:	4a2f      	ldr	r2, [pc, #188]	@ (8003544 <HAL_GPIO_Init+0x304>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800348c:	4b2d      	ldr	r3, [pc, #180]	@ (8003544 <HAL_GPIO_Init+0x304>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b0:	4a24      	ldr	r2, [pc, #144]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b6:	4b23      	ldr	r3, [pc, #140]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034da:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e0:	4b18      	ldr	r3, [pc, #96]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003504:	4a0f      	ldr	r2, [pc, #60]	@ (8003544 <HAL_GPIO_Init+0x304>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3301      	adds	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	f67f aea2 	bls.w	800325c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3724      	adds	r7, #36	@ 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40013800 	.word	0x40013800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400
 8003538:	40020800 	.word	0x40020800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40021000 	.word	0x40021000
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003564:	e003      	b.n	800356e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	041a      	lsls	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	619a      	str	r2, [r3, #24]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800358c:	887a      	ldrh	r2, [r7, #2]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	041a      	lsls	r2, r3, #16
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	43d9      	mvns	r1, r3
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	400b      	ands	r3, r1
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e12b      	b.n	800381a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fe fae8 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	@ 0x24
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003614:	f005 f8f6 	bl	8008804 <HAL_RCC_GetPCLK1Freq>
 8003618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4a81      	ldr	r2, [pc, #516]	@ (8003824 <HAL_I2C_Init+0x274>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d807      	bhi.n	8003634 <HAL_I2C_Init+0x84>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a80      	ldr	r2, [pc, #512]	@ (8003828 <HAL_I2C_Init+0x278>)
 8003628:	4293      	cmp	r3, r2
 800362a:	bf94      	ite	ls
 800362c:	2301      	movls	r3, #1
 800362e:	2300      	movhi	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e006      	b.n	8003642 <HAL_I2C_Init+0x92>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a7d      	ldr	r2, [pc, #500]	@ (800382c <HAL_I2C_Init+0x27c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	bf94      	ite	ls
 800363c:	2301      	movls	r3, #1
 800363e:	2300      	movhi	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0e7      	b.n	800381a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a78      	ldr	r2, [pc, #480]	@ (8003830 <HAL_I2C_Init+0x280>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0c9b      	lsrs	r3, r3, #18
 8003654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a6a      	ldr	r2, [pc, #424]	@ (8003824 <HAL_I2C_Init+0x274>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d802      	bhi.n	8003684 <HAL_I2C_Init+0xd4>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3301      	adds	r3, #1
 8003682:	e009      	b.n	8003698 <HAL_I2C_Init+0xe8>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	4a69      	ldr	r2, [pc, #420]	@ (8003834 <HAL_I2C_Init+0x284>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	099b      	lsrs	r3, r3, #6
 8003696:	3301      	adds	r3, #1
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	430b      	orrs	r3, r1
 800369e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	495c      	ldr	r1, [pc, #368]	@ (8003824 <HAL_I2C_Init+0x274>)
 80036b4:	428b      	cmp	r3, r1
 80036b6:	d819      	bhi.n	80036ec <HAL_I2C_Init+0x13c>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1e59      	subs	r1, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c6:	1c59      	adds	r1, r3, #1
 80036c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036cc:	400b      	ands	r3, r1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_I2C_Init+0x138>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e59      	subs	r1, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e6:	e051      	b.n	800378c <HAL_I2C_Init+0x1dc>
 80036e8:	2304      	movs	r3, #4
 80036ea:	e04f      	b.n	800378c <HAL_I2C_Init+0x1dc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d111      	bne.n	8003718 <HAL_I2C_Init+0x168>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1e58      	subs	r0, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e012      	b.n	800373e <HAL_I2C_Init+0x18e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1e58      	subs	r0, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	0099      	lsls	r1, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	fbb0 f3f3 	udiv	r3, r0, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Init+0x196>
 8003742:	2301      	movs	r3, #1
 8003744:	e022      	b.n	800378c <HAL_I2C_Init+0x1dc>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10e      	bne.n	800376c <HAL_I2C_Init+0x1bc>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e58      	subs	r0, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	440b      	add	r3, r1
 800375c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800376a:	e00f      	b.n	800378c <HAL_I2C_Init+0x1dc>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e58      	subs	r0, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	0099      	lsls	r1, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	6809      	ldr	r1, [r1, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6911      	ldr	r1, [r2, #16]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68d2      	ldr	r2, [r2, #12]
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	000186a0 	.word	0x000186a0
 8003828:	001e847f 	.word	0x001e847f
 800382c:	003d08ff 	.word	0x003d08ff
 8003830:	431bde83 	.word	0x431bde83
 8003834:	10624dd3 	.word	0x10624dd3

08003838 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384a:	2b80      	cmp	r3, #128	@ 0x80
 800384c:	d103      	bne.n	8003856 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
  }
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	461a      	mov	r2, r3
 8003870:	460b      	mov	r3, r1
 8003872:	817b      	strh	r3, [r7, #10]
 8003874:	4613      	mov	r3, r2
 8003876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7fe fc54 	bl	8002124 <HAL_GetTick>
 800387c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	f040 80e0 	bne.w	8003a4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2319      	movs	r3, #25
 8003892:	2201      	movs	r2, #1
 8003894:	4970      	ldr	r1, [pc, #448]	@ (8003a58 <HAL_I2C_Master_Transmit+0x1f4>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f002 feae 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
 80038a4:	e0d3      	b.n	8003a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_I2C_Master_Transmit+0x50>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0cc      	b.n	8003a4e <HAL_I2C_Master_Transmit+0x1ea>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d007      	beq.n	80038da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2221      	movs	r2, #33	@ 0x21
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2210      	movs	r2, #16
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	893a      	ldrh	r2, [r7, #8]
 800390a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a50      	ldr	r2, [pc, #320]	@ (8003a5c <HAL_I2C_Master_Transmit+0x1f8>)
 800391a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800391c:	8979      	ldrh	r1, [r7, #10]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f002 faa4 	bl	8005e70 <I2C_MasterRequestWrite>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e08d      	b.n	8003a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003948:	e066      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	6a39      	ldr	r1, [r7, #32]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f002 ff6c 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	2b04      	cmp	r3, #4
 8003960:	d107      	bne.n	8003972 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06b      	b.n	8003a4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11b      	bne.n	80039ec <HAL_I2C_Master_Transmit+0x188>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d017      	beq.n	80039ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	6a39      	ldr	r1, [r7, #32]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f002 ff63 	bl	80068bc <I2C_WaitOnBTFFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e01a      	b.n	8003a4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d194      	bne.n	800394a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	00100002 	.word	0x00100002
 8003a5c:	ffff0000 	.word	0xffff0000

08003a60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a7a:	f7fe fb53 	bl	8002124 <HAL_GetTick>
 8003a7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	f040 80d9 	bne.w	8003c40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2319      	movs	r3, #25
 8003a94:	2201      	movs	r2, #1
 8003a96:	496d      	ldr	r1, [pc, #436]	@ (8003c4c <HAL_I2C_Mem_Write+0x1ec>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f002 fdad 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0cc      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2C_Mem_Write+0x56>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0c5      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d007      	beq.n	8003adc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2221      	movs	r2, #33	@ 0x21
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2240      	movs	r2, #64	@ 0x40
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003c50 <HAL_I2C_Mem_Write+0x1f0>)
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1e:	88f8      	ldrh	r0, [r7, #6]
 8003b20:	893a      	ldrh	r2, [r7, #8]
 8003b22:	8979      	ldrh	r1, [r7, #10]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f002 fa20 	bl	8005f74 <I2C_RequestMemoryWrite>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d052      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e081      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f002 fe72 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d107      	bne.n	8003b66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d11b      	bne.n	8003be0 <HAL_I2C_Mem_Write+0x180>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d017      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1aa      	bne.n	8003b3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f002 fe65 	bl	80068bc <I2C_WaitOnBTFFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d107      	bne.n	8003c10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e016      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	00100002 	.word	0x00100002
 8003c50:	ffff0000 	.word	0xffff0000

08003c54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	@ 0x30
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	460b      	mov	r3, r1
 8003c68:	813b      	strh	r3, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c6e:	f7fe fa59 	bl	8002124 <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	f040 8214 	bne.w	80040aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2319      	movs	r3, #25
 8003c88:	2201      	movs	r2, #1
 8003c8a:	497b      	ldr	r1, [pc, #492]	@ (8003e78 <HAL_I2C_Mem_Read+0x224>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f002 fcb3 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e207      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2C_Mem_Read+0x56>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e200      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2222      	movs	r2, #34	@ 0x22
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	@ 0x40
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e7c <HAL_I2C_Mem_Read+0x228>)
 8003d10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d12:	88f8      	ldrh	r0, [r7, #6]
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f002 f9bc 	bl	80060a0 <I2C_RequestMemoryRead>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1bc      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d113      	bne.n	8003d62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e190      	b.n	8004084 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d11b      	bne.n	8003da2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e170      	b.n	8004084 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d11b      	bne.n	8003de2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	e150      	b.n	8004084 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003df8:	e144      	b.n	8004084 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	f200 80f1 	bhi.w	8003fe6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d123      	bne.n	8003e54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f002 fdcd 	bl	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e145      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e52:	e117      	b.n	8004084 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d14e      	bne.n	8003efa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e62:	2200      	movs	r2, #0
 8003e64:	4906      	ldr	r1, [pc, #24]	@ (8003e80 <HAL_I2C_Mem_Read+0x22c>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f002 fbc6 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e11a      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
 8003e76:	bf00      	nop
 8003e78:	00100002 	.word	0x00100002
 8003e7c:	ffff0000 	.word	0xffff0000
 8003e80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ef8:	e0c4      	b.n	8004084 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	2200      	movs	r2, #0
 8003f02:	496c      	ldr	r1, [pc, #432]	@ (80040b4 <HAL_I2C_Mem_Read+0x460>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f002 fb77 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cb      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4955      	ldr	r1, [pc, #340]	@ (80040b4 <HAL_I2C_Mem_Read+0x460>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f002 fb49 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e09d      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fe4:	e04e      	b.n	8004084 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f002 fce0 	bl	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e058      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d124      	bne.n	8004084 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	2b03      	cmp	r3, #3
 8004040:	d107      	bne.n	8004052 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004050:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	f47f aeb6 	bne.w	8003dfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	@ 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00010004 	.word	0x00010004

080040b8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	@ 0x28
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	817b      	strh	r3, [r7, #10]
 80040ca:	460b      	mov	r3, r1
 80040cc:	813b      	strh	r3, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d6:	f7fe f825 	bl	8002124 <HAL_GetTick>
 80040da:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	f040 8136 	bne.w	8004356 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80040ea:	4b9d      	ldr	r3, [pc, #628]	@ (8004360 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	4a9c      	ldr	r2, [pc, #624]	@ (8004364 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0a1a      	lsrs	r2, r3, #8
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3b01      	subs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d112      	bne.n	8004136 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
 8004134:	e110      	b.n	8004358 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d0df      	beq.n	8004104 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_I2C_Mem_Write_DMA+0x9a>
 800414e:	2302      	movs	r3, #2
 8004150:	e102      	b.n	8004358 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b01      	cmp	r3, #1
 8004166:	d007      	beq.n	8004178 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	@ 0x21
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004368 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80041b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80041ba:	897a      	ldrh	r2, [r7, #10]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80041c0:	893a      	ldrh	r2, [r7, #8]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a9 	beq.w	800432e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02a      	beq.n	800423a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e8:	4a60      	ldr	r2, [pc, #384]	@ (800436c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80041ea:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f0:	4a5f      	ldr	r2, [pc, #380]	@ (8004370 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80041f2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004200:	2200      	movs	r2, #0
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004208:	2200      	movs	r2, #0
 800420a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	2200      	movs	r2, #0
 8004212:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	4619      	mov	r1, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3310      	adds	r3, #16
 8004224:	461a      	mov	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422a:	f7fe fd0b 	bl	8002c44 <HAL_DMA_Start_IT>
 800422e:	4603      	mov	r3, r0
 8004230:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004232:	7efb      	ldrb	r3, [r7, #27]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d166      	bne.n	8004306 <HAL_I2C_Mem_Write_DMA+0x24e>
 8004238:	e013      	b.n	8004262 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07a      	b.n	8004358 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004262:	88f8      	ldrh	r0, [r7, #6]
 8004264:	893a      	ldrh	r2, [r7, #8]
 8004266:	8979      	ldrh	r1, [r7, #10]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	2323      	movs	r3, #35	@ 0x23
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f001 fe7e 	bl	8005f74 <I2C_RequestMemoryWrite>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d022      	beq.n	80042c4 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fd36 	bl	8002cf4 <HAL_DMA_Abort_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	2200      	movs	r2, #0
 8004292:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e049      	b.n	8004358 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004300:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e028      	b.n	8004358 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f043 0210 	orr.w	r2, r3, #16
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e014      	b.n	8004358 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004356:	2302      	movs	r3, #2
  }
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000004 	.word	0x20000004
 8004364:	14f8b589 	.word	0x14f8b589
 8004368:	ffff0000 	.word	0xffff0000
 800436c:	08006271 	.word	0x08006271
 8004370:	0800642f 	.word	0x0800642f

08004374 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	@ 0x30
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800438e:	f7fd fec9 	bl	8002124 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	f040 8172 	bne.w	800468a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80043a6:	4b93      	ldr	r3, [pc, #588]	@ (80045f4 <HAL_I2C_Mem_Read_DMA+0x280>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	08db      	lsrs	r3, r3, #3
 80043ac:	4a92      	ldr	r2, [pc, #584]	@ (80045f8 <HAL_I2C_Mem_Read_DMA+0x284>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0a1a      	lsrs	r2, r3, #8
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d112      	bne.n	80043f2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	e14c      	b.n	800468c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d0df      	beq.n	80043c0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_I2C_Mem_Read_DMA+0x9a>
 800440a:	2302      	movs	r3, #2
 800440c:	e13e      	b.n	800468c <HAL_I2C_Mem_Read_DMA+0x318>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d007      	beq.n	8004434 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2222      	movs	r2, #34	@ 0x22
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2240      	movs	r2, #64	@ 0x40
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800445e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a62      	ldr	r2, [pc, #392]	@ (80045fc <HAL_I2C_Mem_Read_DMA+0x288>)
 8004474:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004476:	897a      	ldrh	r2, [r7, #10]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800447c:	893a      	ldrh	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80cc 	beq.w	8004630 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02d      	beq.n	80044fc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	4a56      	ldr	r2, [pc, #344]	@ (8004600 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80044a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	4a55      	ldr	r2, [pc, #340]	@ (8004604 <HAL_I2C_Mem_Read_DMA+0x290>)
 80044ae:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	2200      	movs	r2, #0
 80044b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	2200      	movs	r2, #0
 80044be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	2200      	movs	r2, #0
 80044c6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	2200      	movs	r2, #0
 80044ce:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3310      	adds	r3, #16
 80044da:	4619      	mov	r1, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	461a      	mov	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e6:	f7fe fbad 	bl	8002c44 <HAL_DMA_Start_IT>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80044f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8087 	bne.w	8004608 <HAL_I2C_Mem_Read_DMA+0x294>
 80044fa:	e013      	b.n	8004524 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b3      	b.n	800468c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004524:	88f8      	ldrh	r0, [r7, #6]
 8004526:	893a      	ldrh	r2, [r7, #8]
 8004528:	8979      	ldrh	r1, [r7, #10]
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	2323      	movs	r3, #35	@ 0x23
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4603      	mov	r3, r0
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f001 fdb3 	bl	80060a0 <I2C_RequestMemoryRead>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d023      	beq.n	8004588 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fbd5 	bl	8002cf4 <HAL_DMA_Abort_IT>
 800454a:	4603      	mov	r3, r0
 800454c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	2200      	movs	r2, #0
 8004556:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004566:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e081      	b.n	800468c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	2b01      	cmp	r3, #1
 800458e:	d108      	bne.n	80045a2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e007      	b.n	80045b2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045de:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	e049      	b.n	8004686 <HAL_I2C_Mem_Read_DMA+0x312>
 80045f2:	bf00      	nop
 80045f4:	20000004 	.word	0x20000004
 80045f8:	14f8b589 	.word	0x14f8b589
 80045fc:	ffff0000 	.word	0xffff0000
 8004600:	08006271 	.word	0x08006271
 8004604:	0800642f 	.word	0x0800642f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	f043 0210 	orr.w	r2, r3, #16
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e02d      	b.n	800468c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004630:	88f8      	ldrh	r0, [r7, #6]
 8004632:	893a      	ldrh	r2, [r7, #8]
 8004634:	8979      	ldrh	r1, [r7, #10]
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	2323      	movs	r3, #35	@ 0x23
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4603      	mov	r3, r0
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f001 fd2d 	bl	80060a0 <I2C_RequestMemoryRead>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e01d      	b.n	800468c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004674:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	@ 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d003      	beq.n	80046cc <HAL_I2C_EV_IRQHandler+0x38>
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b40      	cmp	r3, #64	@ 0x40
 80046c8:	f040 80c1 	bne.w	800484e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10d      	bne.n	8004702 <HAL_I2C_EV_IRQHandler+0x6e>
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046ec:	d003      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x62>
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046f4:	d101      	bne.n	80046fa <HAL_I2C_EV_IRQHandler+0x66>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <HAL_I2C_EV_IRQHandler+0x68>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f000 8132 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_I2C_EV_IRQHandler+0x92>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	0a5b      	lsrs	r3, r3, #9
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f002 f9d5 	bl	8006ac8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fd87 	bl	8005232 <I2C_Master_SB>
 8004724:	e092      	b.n	800484c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0xb2>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	0a5b      	lsrs	r3, r3, #9
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fdfd 	bl	800533e <I2C_Master_ADD10>
 8004744:	e082      	b.n	800484c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_I2C_EV_IRQHandler+0xd2>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	0a5b      	lsrs	r3, r3, #9
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fe17 	bl	8005392 <I2C_Master_ADDR>
 8004764:	e072      	b.n	800484c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d03b      	beq.n	80047ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800477c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004780:	f000 80f3 	beq.w	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	09db      	lsrs	r3, r3, #7
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00f      	beq.n	80047b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	0a9b      	lsrs	r3, r3, #10
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f9df 	bl	8004b6c <I2C_MasterTransmit_TXE>
 80047ae:	e04d      	b.n	800484c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80d6 	beq.w	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	0a5b      	lsrs	r3, r3, #9
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80cf 	beq.w	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047cc:	7bbb      	ldrb	r3, [r7, #14]
 80047ce:	2b21      	cmp	r3, #33	@ 0x21
 80047d0:	d103      	bne.n	80047da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa66 	bl	8004ca4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d8:	e0c7      	b.n	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b40      	cmp	r3, #64	@ 0x40
 80047de:	f040 80c4 	bne.w	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fad4 	bl	8004d90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e8:	e0bf      	b.n	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f8:	f000 80b7 	beq.w	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	099b      	lsrs	r3, r3, #6
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00f      	beq.n	8004828 <HAL_I2C_EV_IRQHandler+0x194>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	0a9b      	lsrs	r3, r3, #10
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d009      	beq.n	8004828 <HAL_I2C_EV_IRQHandler+0x194>
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fb4d 	bl	8004ec0 <I2C_MasterReceive_RXNE>
 8004826:	e011      	b.n	800484c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 809a 	beq.w	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	0a5b      	lsrs	r3, r3, #9
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8093 	beq.w	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fc03 	bl	8005050 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484a:	e08e      	b.n	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
 800484c:	e08d      	b.n	800496a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e007      	b.n	8004870 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d012      	beq.n	80048a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	0a5b      	lsrs	r3, r3, #9
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004898:	69b9      	ldr	r1, [r7, #24]
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 ffc8 	bl	8005830 <I2C_Slave_ADDR>
 80048a0:	e066      	b.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	0a5b      	lsrs	r3, r3, #9
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f001 f802 	bl	80058c4 <I2C_Slave_STOPF>
 80048c0:	e056      	b.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	2b21      	cmp	r3, #33	@ 0x21
 80048c6:	d002      	beq.n	80048ce <HAL_I2C_EV_IRQHandler+0x23a>
 80048c8:	7bbb      	ldrb	r3, [r7, #14]
 80048ca:	2b29      	cmp	r3, #41	@ 0x29
 80048cc:	d125      	bne.n	800491a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	09db      	lsrs	r3, r3, #7
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00f      	beq.n	80048fa <HAL_I2C_EV_IRQHandler+0x266>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	0a9b      	lsrs	r3, r3, #10
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_I2C_EV_IRQHandler+0x266>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fede 	bl	80056b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f8:	e039      	b.n	800496e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d033      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x2da>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	0a5b      	lsrs	r3, r3, #9
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d02d      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 ff0b 	bl	800572e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004918:	e029      	b.n	800496e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00f      	beq.n	8004946 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	0a9b      	lsrs	r3, r3, #10
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 ff16 	bl	8005770 <I2C_SlaveReceive_RXNE>
 8004944:	e014      	b.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	089b      	lsrs	r3, r3, #2
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00e      	beq.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	0a5b      	lsrs	r3, r3, #9
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 ff44 	bl	80057ec <I2C_SlaveReceive_BTF>
 8004964:	e004      	b.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800496e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	@ 0x28
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004998:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00e      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	0a5b      	lsrs	r3, r3, #9
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00e      	beq.n	80049ee <HAL_I2C_ER_IRQHandler+0x78>
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80049ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	0a9b      	lsrs	r3, r3, #10
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d03f      	beq.n	8004a7a <HAL_I2C_ER_IRQHandler+0x104>
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d039      	beq.n	8004a7a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a06:	7efb      	ldrb	r3, [r7, #27]
 8004a08:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a18:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a20:	7ebb      	ldrb	r3, [r7, #26]
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d112      	bne.n	8004a4c <HAL_I2C_ER_IRQHandler+0xd6>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <HAL_I2C_ER_IRQHandler+0xd6>
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	2b21      	cmp	r3, #33	@ 0x21
 8004a30:	d008      	beq.n	8004a44 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b29      	cmp	r3, #41	@ 0x29
 8004a36:	d005      	beq.n	8004a44 <HAL_I2C_ER_IRQHandler+0xce>
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	2b28      	cmp	r3, #40	@ 0x28
 8004a3c:	d106      	bne.n	8004a4c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b21      	cmp	r3, #33	@ 0x21
 8004a42:	d103      	bne.n	8004a4c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f001 f86d 	bl	8005b24 <I2C_Slave_AF>
 8004a4a:	e016      	b.n	8004a7a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a54:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a5e:	7efb      	ldrb	r3, [r7, #27]
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d002      	beq.n	8004a6a <HAL_I2C_ER_IRQHandler+0xf4>
 8004a64:	7efb      	ldrb	r3, [r7, #27]
 8004a66:	2b40      	cmp	r3, #64	@ 0x40
 8004a68:	d107      	bne.n	8004a7a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a78:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	0adb      	lsrs	r3, r3, #11
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00e      	beq.n	8004aa4 <HAL_I2C_ER_IRQHandler+0x12e>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	f043 0308 	orr.w	r3, r3, #8
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004aa2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f001 f8a8 	bl	8005c0c <I2C_ITError>
  }
}
 8004abc:	bf00      	nop
 8004abe:	3728      	adds	r7, #40	@ 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]
 8004b20:	4613      	mov	r3, r2
 8004b22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d150      	bne.n	8004c34 <I2C_MasterTransmit_TXE+0xc8>
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2b21      	cmp	r3, #33	@ 0x21
 8004b96:	d14d      	bne.n	8004c34 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d01d      	beq.n	8004bda <I2C_MasterTransmit_TXE+0x6e>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d01a      	beq.n	8004bda <I2C_MasterTransmit_TXE+0x6e>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004baa:	d016      	beq.n	8004bda <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2211      	movs	r2, #17
 8004bc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ff76 	bl	8004ac4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bd8:	e060      	b.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004be8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d107      	bne.n	8004c24 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fb ffa9 	bl	8000b74 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c22:	e03b      	b.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ff49 	bl	8004ac4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c32:	e033      	b.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b21      	cmp	r3, #33	@ 0x21
 8004c38:	d005      	beq.n	8004c46 <I2C_MasterTransmit_TXE+0xda>
 8004c3a:	7bbb      	ldrb	r3, [r7, #14]
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d12d      	bne.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b22      	cmp	r3, #34	@ 0x22
 8004c44:	d12a      	bne.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c5e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c60:	e01c      	b.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b40      	cmp	r3, #64	@ 0x40
 8004c6c:	d103      	bne.n	8004c76 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f88e 	bl	8004d90 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c74:	e012      	b.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c9a:	e7ff      	b.n	8004c9c <I2C_MasterTransmit_TXE+0x130>
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b21      	cmp	r3, #33	@ 0x21
 8004cbc:	d164      	bne.n	8004d88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d012      	beq.n	8004cee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004cec:	e04c      	b.n	8004d88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d01d      	beq.n	8004d30 <I2C_MasterTransmit_BTF+0x8c>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d01a      	beq.n	8004d30 <I2C_MasterTransmit_BTF+0x8c>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d00:	d016      	beq.n	8004d30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2211      	movs	r2, #17
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fecb 	bl	8004ac4 <HAL_I2C_MasterTxCpltCallback>
}
 8004d2e:	e02b      	b.n	8004d88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d107      	bne.n	8004d7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fb fefe 	bl	8000b74 <HAL_I2C_MemTxCpltCallback>
}
 8004d78:	e006      	b.n	8004d88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fe9e 	bl	8004ac4 <HAL_I2C_MasterTxCpltCallback>
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11d      	bne.n	8004de4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10b      	bne.n	8004dc8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004dc6:	e077      	b.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	121b      	asrs	r3, r3, #8
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004de2:	e069      	b.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d10b      	bne.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e02:	e059      	b.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d152      	bne.n	8004eb2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b22      	cmp	r3, #34	@ 0x22
 8004e10:	d10d      	bne.n	8004e2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e2c:	e044      	b.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d015      	beq.n	8004e64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b21      	cmp	r3, #33	@ 0x21
 8004e3c:	d112      	bne.n	8004e64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e62:	e029      	b.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d124      	bne.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b21      	cmp	r3, #33	@ 0x21
 8004e72:	d121      	bne.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fb fe62 	bl	8000b74 <HAL_I2C_MemTxCpltCallback>
}
 8004eb0:	e002      	b.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fe fcc0 	bl	8003838 <I2C_Flush_DR>
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b22      	cmp	r3, #34	@ 0x22
 8004ed2:	f040 80b9 	bne.w	8005048 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d921      	bls.n	8004f2e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	f040 8096 	bne.w	8005048 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f2a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f2c:	e08c      	b.n	8005048 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d07f      	beq.n	8005036 <I2C_MasterReceive_RXNE+0x176>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d002      	beq.n	8004f42 <I2C_MasterReceive_RXNE+0x82>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d179      	bne.n	8005036 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 fd02 	bl	800694c <I2C_WaitOnSTOPRequestThroughIT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d14c      	bne.n	8004fe8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f5c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d10a      	bne.n	8004fbe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fb fdea 	bl	8000b90 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fbc:	e044      	b.n	8005048 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d002      	beq.n	8004fd2 <I2C_MasterReceive_RXNE+0x112>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d103      	bne.n	8004fda <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fd8:	e002      	b.n	8004fe0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2212      	movs	r2, #18
 8004fde:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fd79 	bl	8004ad8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fe6:	e02f      	b.n	8005048 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ff6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fd88 	bl	8004b44 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005034:	e008      	b.n	8005048 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005044:	605a      	str	r2, [r3, #4]
}
 8005046:	e7ff      	b.n	8005048 <I2C_MasterReceive_RXNE+0x188>
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b04      	cmp	r3, #4
 8005066:	d11b      	bne.n	80050a0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005076:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800509e:	e0c4      	b.n	800522a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d129      	bne.n	80050fe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d00a      	beq.n	80050d6 <I2C_MasterReceive_BTF+0x86>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d007      	beq.n	80050d6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050fc:	e095      	b.n	800522a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d17d      	bne.n	8005204 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d002      	beq.n	8005114 <I2C_MasterReceive_BTF+0xc4>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b10      	cmp	r3, #16
 8005112:	d108      	bne.n	8005126 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e016      	b.n	8005154 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d002      	beq.n	8005132 <I2C_MasterReceive_BTF+0xe2>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d108      	bne.n	8005144 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e007      	b.n	8005154 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005152:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80051ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b40      	cmp	r3, #64	@ 0x40
 80051c2:	d10a      	bne.n	80051da <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb fcdc 	bl	8000b90 <HAL_I2C_MemRxCpltCallback>
}
 80051d8:	e027      	b.n	800522a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d002      	beq.n	80051ee <I2C_MasterReceive_BTF+0x19e>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d103      	bne.n	80051f6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051f4:	e002      	b.n	80051fc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2212      	movs	r2, #18
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fc6b 	bl	8004ad8 <HAL_I2C_MasterRxCpltCallback>
}
 8005202:	e012      	b.n	800522a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	d117      	bne.n	8005276 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800525e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005260:	e067      	b.n	8005332 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	611a      	str	r2, [r3, #16]
}
 8005274:	e05d      	b.n	8005332 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800527e:	d133      	bne.n	80052e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b21      	cmp	r3, #33	@ 0x21
 800528a:	d109      	bne.n	80052a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005290:	b2db      	uxtb	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800529c:	611a      	str	r2, [r3, #16]
 800529e:	e008      	b.n	80052b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <I2C_Master_SB+0x92>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d108      	bne.n	80052d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d032      	beq.n	8005332 <I2C_Master_SB+0x100>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02d      	beq.n	8005332 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052e4:	605a      	str	r2, [r3, #4]
}
 80052e6:	e024      	b.n	8005332 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10e      	bne.n	800530e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	11db      	asrs	r3, r3, #7
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0306 	and.w	r3, r3, #6
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f063 030f 	orn	r3, r3, #15
 8005304:	b2da      	uxtb	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	611a      	str	r2, [r3, #16]
}
 800530c:	e011      	b.n	8005332 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005312:	2b01      	cmp	r3, #1
 8005314:	d10d      	bne.n	8005332 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	b29b      	uxth	r3, r3
 800531c:	11db      	asrs	r3, r3, #7
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 0306 	and.w	r3, r3, #6
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f063 030e 	orn	r3, r3, #14
 800532a:	b2da      	uxtb	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	611a      	str	r2, [r3, #16]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	b2da      	uxtb	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005356:	2b00      	cmp	r3, #0
 8005358:	d004      	beq.n	8005364 <I2C_Master_ADD10+0x26>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d108      	bne.n	8005376 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00c      	beq.n	8005386 <I2C_Master_ADD10+0x48>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005384:	605a      	str	r2, [r3, #4]
  }
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005392:	b480      	push	{r7}
 8005394:	b091      	sub	sp, #68	@ 0x44
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b22      	cmp	r3, #34	@ 0x22
 80053ba:	f040 8169 	bne.w	8005690 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10f      	bne.n	80053e6 <I2C_Master_ADDR+0x54>
 80053c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80053ca:	2b40      	cmp	r3, #64	@ 0x40
 80053cc:	d10b      	bne.n	80053e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ce:	2300      	movs	r3, #0
 80053d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	e160      	b.n	80056a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d11d      	bne.n	800542a <I2C_Master_ADDR+0x98>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053f6:	d118      	bne.n	800542a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f8:	2300      	movs	r3, #0
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800541c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	651a      	str	r2, [r3, #80]	@ 0x50
 8005428:	e13e      	b.n	80056a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d113      	bne.n	800545c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005434:	2300      	movs	r3, #0
 8005436:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e115      	b.n	8005688 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	f040 808a 	bne.w	800557c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800546e:	d137      	bne.n	80054e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800548e:	d113      	bne.n	80054b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	e0e7      	b.n	8005688 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	623b      	str	r3, [r7, #32]
 80054cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e0d3      	b.n	8005688 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d02e      	beq.n	8005544 <I2C_Master_ADDR+0x1b2>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d02b      	beq.n	8005544 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ee:	2b12      	cmp	r3, #18
 80054f0:	d102      	bne.n	80054f8 <I2C_Master_ADDR+0x166>
 80054f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d125      	bne.n	8005544 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d00e      	beq.n	800551c <I2C_Master_ADDR+0x18a>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005500:	2b02      	cmp	r3, #2
 8005502:	d00b      	beq.n	800551c <I2C_Master_ADDR+0x18a>
 8005504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005506:	2b10      	cmp	r3, #16
 8005508:	d008      	beq.n	800551c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e007      	b.n	800552c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800552a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552c:	2300      	movs	r3, #0
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	e0a1      	b.n	8005688 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005552:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005554:	2300      	movs	r3, #0
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e085      	b.n	8005688 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d14d      	bne.n	8005622 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	2b04      	cmp	r3, #4
 800558a:	d016      	beq.n	80055ba <I2C_Master_ADDR+0x228>
 800558c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558e:	2b02      	cmp	r3, #2
 8005590:	d013      	beq.n	80055ba <I2C_Master_ADDR+0x228>
 8005592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005594:	2b10      	cmp	r3, #16
 8005596:	d010      	beq.n	80055ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	e007      	b.n	80055ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d8:	d117      	bne.n	800560a <I2C_Master_ADDR+0x278>
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055e0:	d00b      	beq.n	80055fa <I2C_Master_ADDR+0x268>
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d008      	beq.n	80055fa <I2C_Master_ADDR+0x268>
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d005      	beq.n	80055fa <I2C_Master_ADDR+0x268>
 80055ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d002      	beq.n	80055fa <I2C_Master_ADDR+0x268>
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d107      	bne.n	800560a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005608:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	e032      	b.n	8005688 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005630:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005640:	d117      	bne.n	8005672 <I2C_Master_ADDR+0x2e0>
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005648:	d00b      	beq.n	8005662 <I2C_Master_ADDR+0x2d0>
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	2b01      	cmp	r3, #1
 800564e:	d008      	beq.n	8005662 <I2C_Master_ADDR+0x2d0>
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	2b08      	cmp	r3, #8
 8005654:	d005      	beq.n	8005662 <I2C_Master_ADDR+0x2d0>
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	2b10      	cmp	r3, #16
 800565a:	d002      	beq.n	8005662 <I2C_Master_ADDR+0x2d0>
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	2b20      	cmp	r3, #32
 8005660:	d107      	bne.n	8005672 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005670:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800568e:	e00b      	b.n	80056a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
}
 80056a6:	e7ff      	b.n	80056a8 <I2C_Master_ADDR+0x316>
 80056a8:	bf00      	nop
 80056aa:	3744      	adds	r7, #68	@ 0x44
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02b      	beq.n	8005726 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d114      	bne.n	8005726 <I2C_SlaveTransmit_TXE+0x72>
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b29      	cmp	r3, #41	@ 0x29
 8005700:	d111      	bne.n	8005726 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005710:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2221      	movs	r2, #33	@ 0x21
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2228      	movs	r2, #40	@ 0x28
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff f9e3 	bl	8004aec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d011      	beq.n	8005764 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800577e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d02c      	beq.n	80057e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d114      	bne.n	80057e4 <I2C_SlaveReceive_RXNE+0x74>
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80057be:	d111      	bne.n	80057e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2222      	movs	r2, #34	@ 0x22
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2228      	movs	r2, #40	@ 0x28
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff f98e 	bl	8004b00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d012      	beq.n	8005824 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800584a:	2b28      	cmp	r3, #40	@ 0x28
 800584c:	d127      	bne.n	800589e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800585c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800586a:	2301      	movs	r3, #1
 800586c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	09db      	lsrs	r3, r3, #7
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	81bb      	strh	r3, [r7, #12]
 8005880:	e002      	b.n	8005888 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005890:	89ba      	ldrh	r2, [r7, #12]
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff f93c 	bl	8004b14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800589c:	e00e      	b.n	80058bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058e4:	2300      	movs	r3, #0
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005910:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005920:	d172      	bne.n	8005a08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	2b22      	cmp	r3, #34	@ 0x22
 8005926:	d002      	beq.n	800592e <I2C_Slave_STOPF+0x6a>
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b2a      	cmp	r3, #42	@ 0x2a
 800592c:	d135      	bne.n	800599a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	f043 0204 	orr.w	r2, r3, #4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005960:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005966:	4618      	mov	r0, r3
 8005968:	f7fd fb70 	bl	800304c <HAL_DMA_GetState>
 800596c:	4603      	mov	r3, r0
 800596e:	2b01      	cmp	r3, #1
 8005970:	d049      	beq.n	8005a06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	4a69      	ldr	r2, [pc, #420]	@ (8005b1c <I2C_Slave_STOPF+0x258>)
 8005978:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd f9b8 	bl	8002cf4 <HAL_DMA_Abort_IT>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d03d      	beq.n	8005a06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005998:	e035      	b.n	8005a06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	f043 0204 	orr.w	r2, r3, #4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fd fb3a 	bl	800304c <HAL_DMA_GetState>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d014      	beq.n	8005a08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e2:	4a4e      	ldr	r2, [pc, #312]	@ (8005b1c <I2C_Slave_STOPF+0x258>)
 80059e4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fd f982 	bl	8002cf4 <HAL_DMA_Abort_IT>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
 8005a04:	e000      	b.n	8005a08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d03e      	beq.n	8005a90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d112      	bne.n	8005a46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a50:	2b40      	cmp	r3, #64	@ 0x40
 8005a52:	d112      	bne.n	8005a7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	f043 0204 	orr.w	r2, r3, #4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f8b7 	bl	8005c0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a9e:	e039      	b.n	8005b14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa4:	d109      	bne.n	8005aba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2228      	movs	r2, #40	@ 0x28
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff f823 	bl	8004b00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b28      	cmp	r3, #40	@ 0x28
 8005ac4:	d111      	bne.n	8005aea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	@ (8005b20 <I2C_Slave_STOPF+0x25c>)
 8005aca:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff f824 	bl	8004b30 <HAL_I2C_ListenCpltCallback>
}
 8005ae8:	e014      	b.n	8005b14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aee:	2b22      	cmp	r3, #34	@ 0x22
 8005af0:	d002      	beq.n	8005af8 <I2C_Slave_STOPF+0x234>
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b22      	cmp	r3, #34	@ 0x22
 8005af6:	d10d      	bne.n	8005b14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fe fff6 	bl	8004b00 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	080064a9 	.word	0x080064a9
 8005b20:	ffff0000 	.word	0xffff0000

08005b24 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b32:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d002      	beq.n	8005b46 <I2C_Slave_AF+0x22>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d129      	bne.n	8005b9a <I2C_Slave_AF+0x76>
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b28      	cmp	r3, #40	@ 0x28
 8005b4a:	d126      	bne.n	8005b9a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c08 <I2C_Slave_AF+0xe4>)
 8005b50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b60:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b6a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b7a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fe ffcc 	bl	8004b30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b98:	e031      	b.n	8005bfe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b21      	cmp	r3, #33	@ 0x21
 8005b9e:	d129      	bne.n	8005bf4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	@ (8005c08 <I2C_Slave_AF+0xe4>)
 8005ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2221      	movs	r2, #33	@ 0x21
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bd4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fd fe26 	bl	8003838 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fe ff7d 	bl	8004aec <HAL_I2C_SlaveTxCpltCallback>
}
 8005bf2:	e004      	b.n	8005bfe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bfc:	615a      	str	r2, [r3, #20]
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	ffff0000 	.word	0xffff0000

08005c0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	2b10      	cmp	r3, #16
 8005c28:	d002      	beq.n	8005c30 <I2C_ITError+0x24>
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	d10a      	bne.n	8005c46 <I2C_ITError+0x3a>
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b22      	cmp	r3, #34	@ 0x22
 8005c34:	d107      	bne.n	8005c46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c4c:	2b28      	cmp	r3, #40	@ 0x28
 8005c4e:	d107      	bne.n	8005c60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2228      	movs	r2, #40	@ 0x28
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005c5e:	e015      	b.n	8005c8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6e:	d00a      	beq.n	8005c86 <I2C_ITError+0x7a>
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	2b60      	cmp	r3, #96	@ 0x60
 8005c74:	d007      	beq.n	8005c86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c9a:	d162      	bne.n	8005d62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005caa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d020      	beq.n	8005cfc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cbe:	4a6a      	ldr	r2, [pc, #424]	@ (8005e68 <I2C_ITError+0x25c>)
 8005cc0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fd f814 	bl	8002cf4 <HAL_DMA_Abort_IT>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8089 	beq.w	8005de6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4798      	blx	r3
 8005cfa:	e074      	b.n	8005de6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	4a59      	ldr	r2, [pc, #356]	@ (8005e68 <I2C_ITError+0x25c>)
 8005d02:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fc fff3 	bl	8002cf4 <HAL_DMA_Abort_IT>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d068      	beq.n	8005de6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1e:	2b40      	cmp	r3, #64	@ 0x40
 8005d20:	d10b      	bne.n	8005d3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4798      	blx	r3
 8005d60:	e041      	b.n	8005de6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b60      	cmp	r3, #96	@ 0x60
 8005d6c:	d125      	bne.n	8005dba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	2b40      	cmp	r3, #64	@ 0x40
 8005d88:	d10b      	bne.n	8005da2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fe fed0 	bl	8004b58 <HAL_I2C_AbortCpltCallback>
 8005db8:	e015      	b.n	8005de6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	2b40      	cmp	r3, #64	@ 0x40
 8005dc6:	d10b      	bne.n	8005de0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fe feaf 	bl	8004b44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10e      	bne.n	8005e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d113      	bne.n	8005e60 <I2C_ITError+0x254>
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b28      	cmp	r3, #40	@ 0x28
 8005e3c:	d110      	bne.n	8005e60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a0a      	ldr	r2, [pc, #40]	@ (8005e6c <I2C_ITError+0x260>)
 8005e42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fe fe68 	bl	8004b30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	080064a9 	.word	0x080064a9
 8005e6c:	ffff0000 	.word	0xffff0000

08005e70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d006      	beq.n	8005e9a <I2C_MasterRequestWrite+0x2a>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d003      	beq.n	8005e9a <I2C_MasterRequestWrite+0x2a>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e98:	d108      	bne.n	8005eac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e00b      	b.n	8005ec4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb0:	2b12      	cmp	r3, #18
 8005eb2:	d107      	bne.n	8005ec4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ec2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 fb91 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eea:	d103      	bne.n	8005ef4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e035      	b.n	8005f64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f00:	d108      	bne.n	8005f14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f02:	897b      	ldrh	r3, [r7, #10]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f10:	611a      	str	r2, [r3, #16]
 8005f12:	e01b      	b.n	8005f4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f14:	897b      	ldrh	r3, [r7, #10]
 8005f16:	11db      	asrs	r3, r3, #7
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f003 0306 	and.w	r3, r3, #6
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f063 030f 	orn	r3, r3, #15
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	490e      	ldr	r1, [pc, #56]	@ (8005f6c <I2C_MasterRequestWrite+0xfc>)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 fbda 	bl	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e010      	b.n	8005f64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4907      	ldr	r1, [pc, #28]	@ (8005f70 <I2C_MasterRequestWrite+0x100>)
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fbca 	bl	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	00010008 	.word	0x00010008
 8005f70:	00010002 	.word	0x00010002

08005f74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	460b      	mov	r3, r1
 8005f88:	813b      	strh	r3, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fb24 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fc4:	d103      	bne.n	8005fce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e05f      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	492d      	ldr	r1, [pc, #180]	@ (800609c <I2C_RequestMemoryWrite+0x128>)
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fb7f 	bl	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e04c      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800600e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006010:	6a39      	ldr	r1, [r7, #32]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fc0a 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00d      	beq.n	800603a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	2b04      	cmp	r3, #4
 8006024:	d107      	bne.n	8006036 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e02b      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d105      	bne.n	800604c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006040:	893b      	ldrh	r3, [r7, #8]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	611a      	str	r2, [r3, #16]
 800604a:	e021      	b.n	8006090 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800604c:	893b      	ldrh	r3, [r7, #8]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	b29b      	uxth	r3, r3
 8006052:	b2da      	uxtb	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605c:	6a39      	ldr	r1, [r7, #32]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fbe4 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	2b04      	cmp	r3, #4
 8006070:	d107      	bne.n	8006082 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e005      	b.n	8006092 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006086:	893b      	ldrh	r3, [r7, #8]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	00010002 	.word	0x00010002

080060a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	4608      	mov	r0, r1
 80060aa:	4611      	mov	r1, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	817b      	strh	r3, [r7, #10]
 80060b2:	460b      	mov	r3, r1
 80060b4:	813b      	strh	r3, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fa86 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00d      	beq.n	800610e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006100:	d103      	bne.n	800610a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006108:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e0aa      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800610e:	897b      	ldrh	r3, [r7, #10]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800611c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	4952      	ldr	r1, [pc, #328]	@ (800626c <I2C_RequestMemoryRead+0x1cc>)
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fae1 	bl	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e097      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614c:	6a39      	ldr	r1, [r7, #32]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fb6c 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	2b04      	cmp	r3, #4
 8006160:	d107      	bne.n	8006172 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e076      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d105      	bne.n	8006188 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800617c:	893b      	ldrh	r3, [r7, #8]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	611a      	str	r2, [r3, #16]
 8006186:	e021      	b.n	80061cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006188:	893b      	ldrh	r3, [r7, #8]
 800618a:	0a1b      	lsrs	r3, r3, #8
 800618c:	b29b      	uxth	r3, r3
 800618e:	b2da      	uxtb	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006198:	6a39      	ldr	r1, [r7, #32]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fb46 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d107      	bne.n	80061be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e050      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061c2:	893b      	ldrh	r3, [r7, #8]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ce:	6a39      	ldr	r1, [r7, #32]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fb2b 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d107      	bne.n	80061f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e035      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006206:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	2200      	movs	r2, #0
 8006210:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f9ef 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800622e:	d103      	bne.n	8006238 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006236:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e013      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800623c:	897b      	ldrh	r3, [r7, #10]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	6a3a      	ldr	r2, [r7, #32]
 8006250:	4906      	ldr	r1, [pc, #24]	@ (800626c <I2C_RequestMemoryRead+0x1cc>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa4a 	bl	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	00010002 	.word	0x00010002

08006270 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006284:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800628c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006292:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80062a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b0:	2200      	movs	r2, #0
 80062b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c0:	2200      	movs	r2, #0
 80062c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80062c4:	7cfb      	ldrb	r3, [r7, #19]
 80062c6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80062ca:	2b21      	cmp	r3, #33	@ 0x21
 80062cc:	d007      	beq.n	80062de <I2C_DMAXferCplt+0x6e>
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80062d4:	2b22      	cmp	r3, #34	@ 0x22
 80062d6:	d131      	bne.n	800633c <I2C_DMAXferCplt+0xcc>
 80062d8:	7cbb      	ldrb	r3, [r7, #18]
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d12e      	bne.n	800633c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062f4:	7cfb      	ldrb	r3, [r7, #19]
 80062f6:	2b29      	cmp	r3, #41	@ 0x29
 80062f8:	d10a      	bne.n	8006310 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2221      	movs	r2, #33	@ 0x21
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2228      	movs	r2, #40	@ 0x28
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006308:	6978      	ldr	r0, [r7, #20]
 800630a:	f7fe fbef 	bl	8004aec <HAL_I2C_SlaveTxCpltCallback>
 800630e:	e00c      	b.n	800632a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	2b2a      	cmp	r3, #42	@ 0x2a
 8006314:	d109      	bne.n	800632a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2222      	movs	r2, #34	@ 0x22
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2228      	movs	r2, #40	@ 0x28
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006324:	6978      	ldr	r0, [r7, #20]
 8006326:	f7fe fbeb 	bl	8004b00 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006338:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800633a:	e074      	b.n	8006426 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d06e      	beq.n	8006426 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d107      	bne.n	8006362 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006360:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006370:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006378:	d009      	beq.n	800638e <I2C_DMAXferCplt+0x11e>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d006      	beq.n	800638e <I2C_DMAXferCplt+0x11e>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006386:	d002      	beq.n	800638e <I2C_DMAXferCplt+0x11e>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b20      	cmp	r3, #32
 800638c:	d107      	bne.n	800639e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800639c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063ac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063bc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2200      	movs	r2, #0
 80063c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80063cc:	6978      	ldr	r0, [r7, #20]
 80063ce:	f7fe fbb9 	bl	8004b44 <HAL_I2C_ErrorCallback>
}
 80063d2:	e028      	b.n	8006426 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d10a      	bne.n	80063fe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7fa fbca 	bl	8000b90 <HAL_I2C_MemRxCpltCallback>
}
 80063fc:	e013      	b.n	8006426 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d002      	beq.n	8006412 <I2C_DMAXferCplt+0x1a2>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b20      	cmp	r3, #32
 8006410:	d103      	bne.n	800641a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	@ 0x30
 8006418:	e002      	b.n	8006420 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2212      	movs	r2, #18
 800641e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006420:	6978      	ldr	r0, [r7, #20]
 8006422:	f7fe fb59 	bl	8004ad8 <HAL_I2C_MasterRxCpltCallback>
}
 8006426:	bf00      	nop
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006448:	2200      	movs	r2, #0
 800644a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	2200      	movs	r2, #0
 800645a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7fc fe03 	bl	8003068 <HAL_DMA_GetError>
 8006462:	4603      	mov	r3, r0
 8006464:	2b02      	cmp	r3, #2
 8006466:	d01b      	beq.n	80064a0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006476:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f043 0210 	orr.w	r2, r3, #16
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7fe fb52 	bl	8004b44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064c2:	4b4b      	ldr	r3, [pc, #300]	@ (80065f0 <I2C_DMAAbort+0x148>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	4a4a      	ldr	r2, [pc, #296]	@ (80065f4 <I2C_DMAAbort+0x14c>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	0a1a      	lsrs	r2, r3, #8
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	00da      	lsls	r2, r3, #3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80064ee:	e00a      	b.n	8006506 <I2C_DMAAbort+0x5e>
    }
    count--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006504:	d0ea      	beq.n	80064dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006512:	2200      	movs	r2, #0
 8006514:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	2200      	movs	r2, #0
 8006524:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006534:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2200      	movs	r2, #0
 800653a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006548:	2200      	movs	r2, #0
 800654a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	2200      	movs	r2, #0
 800655a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b60      	cmp	r3, #96	@ 0x60
 8006576:	d10e      	bne.n	8006596 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2200      	movs	r2, #0
 800658c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800658e:	6978      	ldr	r0, [r7, #20]
 8006590:	f7fe fae2 	bl	8004b58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006594:	e027      	b.n	80065e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006596:	7cfb      	ldrb	r3, [r7, #19]
 8006598:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800659c:	2b28      	cmp	r3, #40	@ 0x28
 800659e:	d117      	bne.n	80065d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2228      	movs	r2, #40	@ 0x28
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80065ce:	e007      	b.n	80065e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065e0:	6978      	ldr	r0, [r7, #20]
 80065e2:	f7fe faaf 	bl	8004b44 <HAL_I2C_ErrorCallback>
}
 80065e6:	bf00      	nop
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000004 	.word	0x20000004
 80065f4:	14f8b589 	.word	0x14f8b589

080065f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006608:	e048      	b.n	800669c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d044      	beq.n	800669c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fb fd87 	bl	8002124 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d139      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d10d      	bne.n	800664e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	43da      	mvns	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4013      	ands	r3, r2
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf0c      	ite	eq
 8006644:	2301      	moveq	r3, #1
 8006646:	2300      	movne	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	e00c      	b.n	8006668 <I2C_WaitOnFlagUntilTimeout+0x70>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	43da      	mvns	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4013      	ands	r3, r2
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf0c      	ite	eq
 8006660:	2301      	moveq	r3, #1
 8006662:	2300      	movne	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	429a      	cmp	r2, r3
 800666c:	d116      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e023      	b.n	80066e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d10d      	bne.n	80066c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	43da      	mvns	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	e00c      	b.n	80066dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	43da      	mvns	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d093      	beq.n	800660a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066fa:	e071      	b.n	80067e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670a:	d123      	bne.n	8006754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800671a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006724:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006740:	f043 0204 	orr.w	r2, r3, #4
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e067      	b.n	8006824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	d041      	beq.n	80067e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675c:	f7fb fce2 	bl	8002124 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d302      	bcc.n	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d136      	bne.n	80067e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	d10c      	bne.n	8006796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	43da      	mvns	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	e00b      	b.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	43da      	mvns	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4013      	ands	r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf14      	ite	ne
 80067a8:	2301      	movne	r3, #1
 80067aa:	2300      	moveq	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e021      	b.n	8006824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	0c1b      	lsrs	r3, r3, #16
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10c      	bne.n	8006804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	43da      	mvns	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e00b      	b.n	800681c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	43da      	mvns	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	f47f af6d 	bne.w	80066fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006838:	e034      	b.n	80068a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f915 	bl	8006a6a <I2C_IsAcknowledgeFailed>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e034      	b.n	80068b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d028      	beq.n	80068a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fb fc67 	bl	8002124 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11d      	bne.n	80068a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006872:	2b80      	cmp	r3, #128	@ 0x80
 8006874:	d016      	beq.n	80068a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006890:	f043 0220 	orr.w	r2, r3, #32
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e007      	b.n	80068b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ae:	2b80      	cmp	r3, #128	@ 0x80
 80068b0:	d1c3      	bne.n	800683a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c8:	e034      	b.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f8cd 	bl	8006a6a <I2C_IsAcknowledgeFailed>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e034      	b.n	8006944 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d028      	beq.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fb fc1f 	bl	8002124 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d11d      	bne.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b04      	cmp	r3, #4
 8006904:	d016      	beq.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006920:	f043 0220 	orr.w	r2, r3, #32
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e007      	b.n	8006944 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b04      	cmp	r3, #4
 8006940:	d1c3      	bne.n	80068ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006958:	4b13      	ldr	r3, [pc, #76]	@ (80069a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	4a13      	ldr	r2, [pc, #76]	@ (80069ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006960:	fba2 2303 	umull	r2, r3, r2, r3
 8006964:	0a1a      	lsrs	r2, r3, #8
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3b01      	subs	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d107      	bne.n	800698a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697e:	f043 0220 	orr.w	r2, r3, #32
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e008      	b.n	800699c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006998:	d0e9      	beq.n	800696e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	20000004 	.word	0x20000004
 80069ac:	14f8b589 	.word	0x14f8b589

080069b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069bc:	e049      	b.n	8006a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d119      	bne.n	8006a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0210 	mvn.w	r2, #16
 80069d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e030      	b.n	8006a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a00:	f7fb fb90 	bl	8002124 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d11d      	bne.n	8006a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b40      	cmp	r3, #64	@ 0x40
 8006a22:	d016      	beq.n	8006a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	f043 0220 	orr.w	r2, r3, #32
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e007      	b.n	8006a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	d1ae      	bne.n	80069be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a80:	d11b      	bne.n	8006aba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	f043 0204 	orr.w	r2, r3, #4
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006ad8:	d103      	bne.n	8006ae2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ae0:	e007      	b.n	8006af2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006aea:	d102      	bne.n	8006af2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2208      	movs	r2, #8
 8006af0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af02      	add	r7, sp, #8
 8006b04:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e101      	b.n	8006d14 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f006 fbe2 	bl	800d2f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2203      	movs	r2, #3
 8006b34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b3e:	d102      	bne.n	8006b46 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f002 ff37 	bl	80099be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7c1a      	ldrb	r2, [r3, #16]
 8006b58:	f88d 2000 	strb.w	r2, [sp]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b60:	f002 fe16 	bl	8009790 <USB_CoreInit>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e0ce      	b.n	8006d14 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f002 ff2f 	bl	80099e0 <USB_SetCurrentMode>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0bf      	b.n	8006d14 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e04a      	b.n	8006c30 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b9a:	7bfa      	ldrb	r2, [r7, #15]
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3315      	adds	r3, #21
 8006baa:	2201      	movs	r2, #1
 8006bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bae:	7bfa      	ldrb	r2, [r7, #15]
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	7bfa      	ldrb	r2, [r7, #15]
 8006bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006bc2:	7bfa      	ldrb	r2, [r7, #15]
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	b298      	uxth	r0, r3
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	332e      	adds	r3, #46	@ 0x2e
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006bda:	7bfa      	ldrb	r2, [r7, #15]
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	3318      	adds	r3, #24
 8006bea:	2200      	movs	r2, #0
 8006bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bee:	7bfa      	ldrb	r2, [r7, #15]
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	331c      	adds	r3, #28
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c02:	7bfa      	ldrb	r2, [r7, #15]
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	3320      	adds	r3, #32
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	3324      	adds	r3, #36	@ 0x24
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	791b      	ldrb	r3, [r3, #4]
 8006c34:	7bfa      	ldrb	r2, [r7, #15]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d3af      	bcc.n	8006b9a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
 8006c3e:	e044      	b.n	8006cca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c40:	7bfa      	ldrb	r2, [r7, #15]
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c56:	7bfa      	ldrb	r2, [r7, #15]
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006c68:	7bfa      	ldrb	r2, [r7, #15]
 8006c6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c6c:	7bfa      	ldrb	r2, [r7, #15]
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c7e:	2200      	movs	r2, #0
 8006c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c82:	7bfa      	ldrb	r2, [r7, #15]
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c98:	7bfa      	ldrb	r2, [r7, #15]
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	73fb      	strb	r3, [r7, #15]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	791b      	ldrb	r3, [r3, #4]
 8006cce:	7bfa      	ldrb	r2, [r7, #15]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d3b5      	bcc.n	8006c40 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7c1a      	ldrb	r2, [r3, #16]
 8006cdc:	f88d 2000 	strb.w	r2, [sp]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ce4:	f002 fec8 	bl	8009a78 <USB_DevInit>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e00c      	b.n	8006d14 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f003 ff12 	bl	800ab36 <USB_DevDisconnect>

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_PCD_Start+0x1c>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e022      	b.n	8006d7e <HAL_PCD_Start+0x62>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d105      	bne.n	8006d60 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f002 fe19 	bl	800999c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f003 fec0 	bl	800aaf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d86:	b590      	push	{r4, r7, lr}
 8006d88:	b08d      	sub	sp, #52	@ 0x34
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f003 ff7e 	bl	800ac9e <USB_GetMode>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f040 848c 	bne.w	80076c2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f003 fee2 	bl	800ab78 <USB_ReadInterrupts>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 8482 	beq.w	80076c0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	0a1b      	lsrs	r3, r3, #8
 8006dc6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f003 fecf 	bl	800ab78 <USB_ReadInterrupts>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d107      	bne.n	8006df4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695a      	ldr	r2, [r3, #20]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f002 0202 	and.w	r2, r2, #2
 8006df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f003 febd 	bl	800ab78 <USB_ReadInterrupts>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b10      	cmp	r3, #16
 8006e06:	d161      	bne.n	8006ecc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0210 	bic.w	r2, r2, #16
 8006e16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f003 020f 	and.w	r2, r3, #15
 8006e24:	4613      	mov	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	4413      	add	r3, r2
 8006e34:	3304      	adds	r3, #4
 8006e36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006e3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e42:	d124      	bne.n	8006e8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d035      	beq.n	8006ebc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6a38      	ldr	r0, [r7, #32]
 8006e64:	f003 fcf4 	bl	800a850 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e74:	441a      	add	r2, r3
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e86:	441a      	add	r2, r3
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	615a      	str	r2, [r3, #20]
 8006e8c:	e016      	b.n	8006ebc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006e94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e98:	d110      	bne.n	8006ebc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6a38      	ldr	r0, [r7, #32]
 8006ea6:	f003 fcd3 	bl	800a850 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eb6:	441a      	add	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0210 	orr.w	r2, r2, #16
 8006eca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f003 fe51 	bl	800ab78 <USB_ReadInterrupts>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006edc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ee0:	f040 80a7 	bne.w	8007032 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f003 fe56 	bl	800ab9e <USB_ReadDevAllOutEpInterrupt>
 8006ef2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006ef4:	e099      	b.n	800702a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 808e 	beq.w	800701e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f003 fe7a 	bl	800ac06 <USB_ReadDevOutEPInterrupt>
 8006f12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006f30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fea4 	bl	8007c80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2308      	movs	r3, #8
 8006f52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 ff7a 	bl	8007e50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f72:	461a      	mov	r2, r3
 8006f74:	2310      	movs	r3, #16
 8006f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d030      	beq.n	8006fe4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	d109      	bne.n	8006fa2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fa0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	78db      	ldrb	r3, [r3, #3]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d108      	bne.n	8006fd2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f006 fa8d 	bl	800d4ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fde:	461a      	mov	r2, r3
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d008      	beq.n	8007000 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007016:	461a      	mov	r2, r3
 8007018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800701c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	3301      	adds	r3, #1
 8007022:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702c:	2b00      	cmp	r3, #0
 800702e:	f47f af62 	bne.w	8006ef6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f003 fd9e 	bl	800ab78 <USB_ReadInterrupts>
 800703c:	4603      	mov	r3, r0
 800703e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007042:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007046:	f040 80db 	bne.w	8007200 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f003 fdbf 	bl	800abd2 <USB_ReadDevAllInEpInterrupt>
 8007054:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800705a:	e0cd      	b.n	80071f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80c2 	beq.w	80071ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	4611      	mov	r1, r2
 8007072:	4618      	mov	r0, r3
 8007074:	f003 fde5 	bl	800ac42 <USB_ReadDevInEPInterrupt>
 8007078:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d057      	beq.n	8007134 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	2201      	movs	r2, #1
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	43db      	mvns	r3, r3
 800709e:	69f9      	ldr	r1, [r7, #28]
 80070a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a4:	4013      	ands	r3, r2
 80070a6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b4:	461a      	mov	r2, r3
 80070b6:	2301      	movs	r3, #1
 80070b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	799b      	ldrb	r3, [r3, #6]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d132      	bne.n	8007128 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c6:	4613      	mov	r3, r2
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	3320      	adds	r3, #32
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4403      	add	r3, r0
 80070e2:	331c      	adds	r3, #28
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4419      	add	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ec:	4613      	mov	r3, r2
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4403      	add	r3, r0
 80070f6:	3320      	adds	r3, #32
 80070f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d113      	bne.n	8007128 <HAL_PCD_IRQHandler+0x3a2>
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3324      	adds	r3, #36	@ 0x24
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d108      	bne.n	8007128 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007120:	461a      	mov	r2, r3
 8007122:	2101      	movs	r1, #1
 8007124:	f003 fdec 	bl	800ad00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f006 f961 	bl	800d3f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800714a:	461a      	mov	r2, r3
 800714c:	2308      	movs	r3, #8
 800714e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	d008      	beq.n	800716c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007166:	461a      	mov	r2, r3
 8007168:	2310      	movs	r3, #16
 800716a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007182:	461a      	mov	r2, r3
 8007184:	2340      	movs	r3, #64	@ 0x40
 8007186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d023      	beq.n	80071da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007192:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007194:	6a38      	ldr	r0, [r7, #32]
 8007196:	f002 fdd3 	bl	8009d40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800719a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	3310      	adds	r3, #16
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	4413      	add	r3, r2
 80071aa:	3304      	adds	r3, #4
 80071ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	78db      	ldrb	r3, [r3, #3]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d108      	bne.n	80071c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2200      	movs	r2, #0
 80071ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f006 f9a4 	bl	800d510 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d4:	461a      	mov	r2, r3
 80071d6:	2302      	movs	r3, #2
 80071d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80071e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fcbd 	bl	8007b66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	3301      	adds	r3, #1
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f47f af2e 	bne.w	800705c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f003 fcb7 	bl	800ab78 <USB_ReadInterrupts>
 800720a:	4603      	mov	r3, r0
 800720c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007210:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007214:	d122      	bne.n	800725c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007230:	2b01      	cmp	r3, #1
 8007232:	d108      	bne.n	8007246 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fea4 	bl	8007f8c <HAL_PCDEx_LPM_Callback>
 8007244:	e002      	b.n	800724c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f006 f942 	bl	800d4d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800725a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f003 fc89 	bl	800ab78 <USB_ReadInterrupts>
 8007266:	4603      	mov	r3, r0
 8007268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800726c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007270:	d112      	bne.n	8007298 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b01      	cmp	r3, #1
 8007280:	d102      	bne.n	8007288 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f006 f8fe 	bl	800d484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695a      	ldr	r2, [r3, #20]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007296:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f003 fc6b 	bl	800ab78 <USB_ReadInterrupts>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ac:	f040 80b7 	bne.w	800741e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072be:	f023 0301 	bic.w	r3, r3, #1
 80072c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2110      	movs	r1, #16
 80072ca:	4618      	mov	r0, r3
 80072cc:	f002 fd38 	bl	8009d40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072d0:	2300      	movs	r3, #0
 80072d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072d4:	e046      	b.n	8007364 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e2:	461a      	mov	r2, r3
 80072e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007304:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800730a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800731c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800731e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007338:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800733c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800733e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800734e:	0151      	lsls	r1, r2, #5
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	440a      	add	r2, r1
 8007354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007358:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800735c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800735e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007360:	3301      	adds	r3, #1
 8007362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	791b      	ldrb	r3, [r3, #4]
 8007368:	461a      	mov	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	4293      	cmp	r3, r2
 800736e:	d3b2      	bcc.n	80072d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800737e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007382:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7bdb      	ldrb	r3, [r3, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d016      	beq.n	80073ba <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800739c:	f043 030b 	orr.w	r3, r3, #11
 80073a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073b2:	f043 030b 	orr.w	r3, r3, #11
 80073b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80073b8:	e015      	b.n	80073e6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80073cc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80073d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e0:	f043 030b 	orr.w	r3, r3, #11
 80073e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007408:	461a      	mov	r2, r3
 800740a:	f003 fc79 	bl	800ad00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695a      	ldr	r2, [r3, #20]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800741c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f003 fba8 	bl	800ab78 <USB_ReadInterrupts>
 8007428:	4603      	mov	r3, r0
 800742a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800742e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007432:	d123      	bne.n	800747c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f003 fc3e 	bl	800acba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f002 fcf5 	bl	8009e32 <USB_GetDevSpeed>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681c      	ldr	r4, [r3, #0]
 8007454:	f001 f9ca 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 8007458:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800745e:	461a      	mov	r2, r3
 8007460:	4620      	mov	r0, r4
 8007462:	f002 f9f9 	bl	8009858 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f005 ffed 	bl	800d446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695a      	ldr	r2, [r3, #20]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800747a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f003 fb79 	bl	800ab78 <USB_ReadInterrupts>
 8007486:	4603      	mov	r3, r0
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b08      	cmp	r3, #8
 800748e:	d10a      	bne.n	80074a6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f005 ffca 	bl	800d42a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695a      	ldr	r2, [r3, #20]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f002 0208 	and.w	r2, r2, #8
 80074a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f003 fb64 	bl	800ab78 <USB_ReadInterrupts>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b6:	2b80      	cmp	r3, #128	@ 0x80
 80074b8:	d123      	bne.n	8007502 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074c6:	2301      	movs	r3, #1
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ca:	e014      	b.n	80074f6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d0:	4613      	mov	r3, r2
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d105      	bne.n	80074f0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fb0a 	bl	8007b04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	3301      	adds	r3, #1
 80074f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	791b      	ldrb	r3, [r3, #4]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fe:	4293      	cmp	r3, r2
 8007500:	d3e4      	bcc.n	80074cc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f003 fb36 	bl	800ab78 <USB_ReadInterrupts>
 800750c:	4603      	mov	r3, r0
 800750e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007516:	d13c      	bne.n	8007592 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007518:	2301      	movs	r3, #1
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
 800751c:	e02b      	b.n	8007576 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007532:	4613      	mov	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	3318      	adds	r3, #24
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d115      	bne.n	8007570 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007544:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007546:	2b00      	cmp	r3, #0
 8007548:	da12      	bge.n	8007570 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	3317      	adds	r3, #23
 800755a:	2201      	movs	r2, #1
 800755c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007566:	b2db      	uxtb	r3, r3
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 faca 	bl	8007b04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	3301      	adds	r3, #1
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	461a      	mov	r2, r3
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	4293      	cmp	r3, r2
 8007580:	d3cd      	bcc.n	800751e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f003 faee 	bl	800ab78 <USB_ReadInterrupts>
 800759c:	4603      	mov	r3, r0
 800759e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075a6:	d156      	bne.n	8007656 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075a8:	2301      	movs	r3, #1
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ac:	e045      	b.n	800763a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c2:	4613      	mov	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d12e      	bne.n	8007634 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80075d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da2b      	bge.n	8007634 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	0c1a      	lsrs	r2, r3, #16
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80075e6:	4053      	eors	r3, r2
 80075e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d121      	bne.n	8007634 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007602:	2201      	movs	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10a      	bne.n	8007634 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800762c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007630:	6053      	str	r3, [r2, #4]
            break;
 8007632:	e008      	b.n	8007646 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	3301      	adds	r3, #1
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	791b      	ldrb	r3, [r3, #4]
 800763e:	461a      	mov	r2, r3
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	4293      	cmp	r3, r2
 8007644:	d3b3      	bcc.n	80075ae <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f003 fa8c 	bl	800ab78 <USB_ReadInterrupts>
 8007660:	4603      	mov	r3, r0
 8007662:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766a:	d10a      	bne.n	8007682 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f005 ff61 	bl	800d534 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f003 fa76 	bl	800ab78 <USB_ReadInterrupts>
 800768c:	4603      	mov	r3, r0
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b04      	cmp	r3, #4
 8007694:	d115      	bne.n	80076c2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f005 ff51 	bl	800d550 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6859      	ldr	r1, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
 80076be:	e000      	b.n	80076c2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80076c0:	bf00      	nop
    }
  }
}
 80076c2:	3734      	adds	r7, #52	@ 0x34
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd90      	pop	{r4, r7, pc}

080076c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_PCD_SetAddress+0x1a>
 80076de:	2302      	movs	r3, #2
 80076e0:	e012      	b.n	8007708 <HAL_PCD_SetAddress+0x40>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f003 f9d5 	bl	800aaa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	4608      	mov	r0, r1
 800771a:	4611      	mov	r1, r2
 800771c:	461a      	mov	r2, r3
 800771e:	4603      	mov	r3, r0
 8007720:	70fb      	strb	r3, [r7, #3]
 8007722:	460b      	mov	r3, r1
 8007724:	803b      	strh	r3, [r7, #0]
 8007726:	4613      	mov	r3, r2
 8007728:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800772e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007732:	2b00      	cmp	r3, #0
 8007734:	da0f      	bge.n	8007756 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	3310      	adds	r3, #16
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	3304      	adds	r3, #4
 800774c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	705a      	strb	r2, [r3, #1]
 8007754:	e00f      	b.n	8007776 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	f003 020f 	and.w	r2, r3, #15
 800775c:	4613      	mov	r3, r2
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	4413      	add	r3, r2
 800776c:	3304      	adds	r3, #4
 800776e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	b2da      	uxtb	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007782:	883b      	ldrh	r3, [r7, #0]
 8007784:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	78ba      	ldrb	r2, [r7, #2]
 8007790:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80077a4:	78bb      	ldrb	r3, [r7, #2]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d102      	bne.n	80077b0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_PCD_EP_Open+0xae>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e00e      	b.n	80077dc <HAL_PCD_EP_Open+0xcc>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f002 fb55 	bl	8009e7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80077da:	7afb      	ldrb	r3, [r7, #11]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da0f      	bge.n	8007818 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	f003 020f 	and.w	r2, r3, #15
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	3310      	adds	r3, #16
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4413      	add	r3, r2
 800780c:	3304      	adds	r3, #4
 800780e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	705a      	strb	r2, [r3, #1]
 8007816:	e00f      	b.n	8007838 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	f003 020f 	and.w	r2, r3, #15
 800781e:	4613      	mov	r3, r2
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	3304      	adds	r3, #4
 8007830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	b2da      	uxtb	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800784a:	2b01      	cmp	r3, #1
 800784c:	d101      	bne.n	8007852 <HAL_PCD_EP_Close+0x6e>
 800784e:	2302      	movs	r3, #2
 8007850:	e00e      	b.n	8007870 <HAL_PCD_EP_Close+0x8c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	4618      	mov	r0, r3
 8007862:	f002 fb93 	bl	8009f8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	607a      	str	r2, [r7, #4]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	460b      	mov	r3, r1
 8007886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	f003 020f 	and.w	r2, r3, #15
 800788e:	4613      	mov	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4413      	add	r3, r2
 800789e:	3304      	adds	r3, #4
 80078a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2200      	movs	r2, #0
 80078b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2200      	movs	r2, #0
 80078b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	f003 030f 	and.w	r3, r3, #15
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	799b      	ldrb	r3, [r3, #6]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d102      	bne.n	80078d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	799b      	ldrb	r3, [r3, #6]
 80078dc:	461a      	mov	r2, r3
 80078de:	6979      	ldr	r1, [r7, #20]
 80078e0:	f002 fc30 	bl	800a144 <USB_EPStartXfer>

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	f003 020f 	and.w	r2, r3, #15
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007910:	681b      	ldr	r3, [r3, #0]
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
 800792a:	460b      	mov	r3, r1
 800792c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	f003 020f 	and.w	r2, r3, #15
 8007934:	4613      	mov	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	3310      	adds	r3, #16
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	3304      	adds	r3, #4
 8007944:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2201      	movs	r2, #1
 800795c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	b2da      	uxtb	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	799b      	ldrb	r3, [r3, #6]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d102      	bne.n	8007978 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	799b      	ldrb	r3, [r3, #6]
 8007980:	461a      	mov	r2, r3
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	f002 fbde 	bl	800a144 <USB_EPStartXfer>

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	7912      	ldrb	r2, [r2, #4]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d901      	bls.n	80079b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e04f      	b.n	8007a50 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da0f      	bge.n	80079d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	f003 020f 	and.w	r2, r3, #15
 80079be:	4613      	mov	r3, r2
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	3310      	adds	r3, #16
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	3304      	adds	r3, #4
 80079ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	705a      	strb	r2, [r3, #1]
 80079d6:	e00d      	b.n	80079f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	3304      	adds	r3, #4
 80079ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_PCD_EP_SetStall+0x82>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e01d      	b.n	8007a50 <HAL_PCD_EP_SetStall+0xbe>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f002 ff6c 	bl	800a900 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7999      	ldrb	r1, [r3, #6]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a40:	461a      	mov	r2, r3
 8007a42:	f003 f95d 	bl	800ad00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	7912      	ldrb	r2, [r2, #4]
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d901      	bls.n	8007a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e042      	b.n	8007afc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da0f      	bge.n	8007a9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	4613      	mov	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	3310      	adds	r3, #16
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	3304      	adds	r3, #4
 8007a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	705a      	strb	r2, [r3, #1]
 8007a9c:	e00f      	b.n	8007abe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	f003 020f 	and.w	r2, r3, #15
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	f003 030f 	and.w	r3, r3, #15
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <HAL_PCD_EP_ClrStall+0x86>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e00e      	b.n	8007afc <HAL_PCD_EP_ClrStall+0xa4>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f002 ff75 	bl	800a9dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	da0c      	bge.n	8007b32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	4613      	mov	r3, r2
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	3310      	adds	r3, #16
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e00c      	b.n	8007b4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	3304      	adds	r3, #4
 8007b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68f9      	ldr	r1, [r7, #12]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 fd94 	bl	800a680 <USB_EPStopXfer>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b08a      	sub	sp, #40	@ 0x28
 8007b6a:	af02      	add	r7, sp, #8
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	3310      	adds	r3, #16
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	4413      	add	r3, r2
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	695a      	ldr	r2, [r3, #20]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d901      	bls.n	8007b9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e06b      	b.n	8007c76 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d902      	bls.n	8007bba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3303      	adds	r3, #3
 8007bbe:	089b      	lsrs	r3, r3, #2
 8007bc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bc2:	e02a      	b.n	8007c1a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d902      	bls.n	8007be0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	3303      	adds	r3, #3
 8007be4:	089b      	lsrs	r3, r3, #2
 8007be6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68d9      	ldr	r1, [r3, #12]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6978      	ldr	r0, [r7, #20]
 8007bfe:	f002 fde9 	bl	800a7d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	441a      	add	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	695a      	ldr	r2, [r3, #20]
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d809      	bhi.n	8007c44 <PCD_WriteEmptyTxFifo+0xde>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	695a      	ldr	r2, [r3, #20]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d203      	bcs.n	8007c44 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1bf      	bne.n	8007bc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d811      	bhi.n	8007c74 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	2201      	movs	r2, #1
 8007c58:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	6939      	ldr	r1, [r7, #16]
 8007c6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c70:	4013      	ands	r3, r2
 8007c72:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	333c      	adds	r3, #60	@ 0x3c
 8007c98:	3304      	adds	r3, #4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	799b      	ldrb	r3, [r3, #6]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d17b      	bne.n	8007dae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d015      	beq.n	8007cec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4a61      	ldr	r2, [pc, #388]	@ (8007e48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	f240 80b9 	bls.w	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80b3 	beq.w	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce8:	6093      	str	r3, [r2, #8]
 8007cea:	e0a7      	b.n	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d02:	461a      	mov	r2, r3
 8007d04:	2320      	movs	r3, #32
 8007d06:	6093      	str	r3, [r2, #8]
 8007d08:	e098      	b.n	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 8093 	bne.w	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	4a4b      	ldr	r2, [pc, #300]	@ (8007e48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d90f      	bls.n	8007d3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d34:	461a      	mov	r2, r3
 8007d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d3a:	6093      	str	r3, [r2, #8]
 8007d3c:	e07e      	b.n	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	4413      	add	r3, r2
 8007d50:	3304      	adds	r3, #4
 8007d52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a1a      	ldr	r2, [r3, #32]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	0159      	lsls	r1, r3, #5
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	440b      	add	r3, r1
 8007d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d6a:	1ad2      	subs	r2, r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d114      	bne.n	8007da0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	f002 ffb8 	bl	800ad00 <USB_EP0_OutStart>
 8007d90:	e006      	b.n	8007da0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	441a      	add	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f005 fb0a 	bl	800d3c0 <HAL_PCD_DataOutStageCallback>
 8007dac:	e046      	b.n	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	4a26      	ldr	r2, [pc, #152]	@ (8007e4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d124      	bne.n	8007e00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dd2:	6093      	str	r3, [r2, #8]
 8007dd4:	e032      	b.n	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d008      	beq.n	8007df2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dec:	461a      	mov	r2, r3
 8007dee:	2320      	movs	r3, #32
 8007df0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f005 fae1 	bl	800d3c0 <HAL_PCD_DataOutStageCallback>
 8007dfe:	e01d      	b.n	8007e3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d114      	bne.n	8007e30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d108      	bne.n	8007e30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e28:	461a      	mov	r2, r3
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	f002 ff68 	bl	800ad00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f005 fac2 	bl	800d3c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3720      	adds	r7, #32
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	4f54300a 	.word	0x4f54300a
 8007e4c:	4f54310a 	.word	0x4f54310a

08007e50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	333c      	adds	r3, #60	@ 0x3c
 8007e68:	3304      	adds	r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4a15      	ldr	r2, [pc, #84]	@ (8007ed8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d90e      	bls.n	8007ea4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ea2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f005 fa79 	bl	800d39c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d90c      	bls.n	8007ecc <PCD_EP_OutSetupPacket_int+0x7c>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	799b      	ldrb	r3, [r3, #6]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d108      	bne.n	8007ecc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	f002 ff1a 	bl	800ad00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	4f54300a 	.word	0x4f54300a

08007edc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007efa:	883b      	ldrh	r3, [r7, #0]
 8007efc:	0419      	lsls	r1, r3, #16
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f08:	e028      	b.n	8007f5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f10:	0c1b      	lsrs	r3, r3, #16
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
 8007f1c:	e00d      	b.n	8007f3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	3340      	adds	r3, #64	@ 0x40
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	4413      	add	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	3301      	adds	r3, #1
 8007f38:	73fb      	strb	r3, [r7, #15]
 8007f3a:	7bfa      	ldrb	r2, [r7, #15]
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d3ec      	bcc.n	8007f1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f44:	883b      	ldrh	r3, [r7, #0]
 8007f46:	0418      	lsls	r0, r3, #16
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6819      	ldr	r1, [r3, #0]
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	4302      	orrs	r2, r0
 8007f54:	3340      	adds	r3, #64	@ 0x40
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	887a      	ldrh	r2, [r7, #2]
 8007f7c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e267      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d075      	beq.n	80080ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007fc2:	4b88      	ldr	r3, [pc, #544]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d00c      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fce:	4b85      	ldr	r3, [pc, #532]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d112      	bne.n	8008000 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fda:	4b82      	ldr	r3, [pc, #520]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fe6:	d10b      	bne.n	8008000 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d05b      	beq.n	80080ac <HAL_RCC_OscConfig+0x108>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d157      	bne.n	80080ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e242      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008008:	d106      	bne.n	8008018 <HAL_RCC_OscConfig+0x74>
 800800a:	4b76      	ldr	r3, [pc, #472]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a75      	ldr	r2, [pc, #468]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e01d      	b.n	8008054 <HAL_RCC_OscConfig+0xb0>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008020:	d10c      	bne.n	800803c <HAL_RCC_OscConfig+0x98>
 8008022:	4b70      	ldr	r3, [pc, #448]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a6f      	ldr	r2, [pc, #444]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	4b6d      	ldr	r3, [pc, #436]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a6c      	ldr	r2, [pc, #432]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	e00b      	b.n	8008054 <HAL_RCC_OscConfig+0xb0>
 800803c:	4b69      	ldr	r3, [pc, #420]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a68      	ldr	r2, [pc, #416]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	4b66      	ldr	r3, [pc, #408]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a65      	ldr	r2, [pc, #404]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800804e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d013      	beq.n	8008084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800805c:	f7fa f862 	bl	8002124 <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008064:	f7fa f85e 	bl	8002124 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b64      	cmp	r3, #100	@ 0x64
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e207      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008076:	4b5b      	ldr	r3, [pc, #364]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0xc0>
 8008082:	e014      	b.n	80080ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008084:	f7fa f84e 	bl	8002124 <HAL_GetTick>
 8008088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800808a:	e008      	b.n	800809e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800808c:	f7fa f84a 	bl	8002124 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b64      	cmp	r3, #100	@ 0x64
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e1f3      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800809e:	4b51      	ldr	r3, [pc, #324]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f0      	bne.n	800808c <HAL_RCC_OscConfig+0xe8>
 80080aa:	e000      	b.n	80080ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d063      	beq.n	8008182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80080ba:	4b4a      	ldr	r3, [pc, #296]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080c6:	4b47      	ldr	r3, [pc, #284]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d11c      	bne.n	800810c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080d2:	4b44      	ldr	r3, [pc, #272]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d116      	bne.n	800810c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080de:	4b41      	ldr	r3, [pc, #260]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_RCC_OscConfig+0x152>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d001      	beq.n	80080f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e1c7      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f6:	4b3b      	ldr	r3, [pc, #236]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	4937      	ldr	r1, [pc, #220]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008106:	4313      	orrs	r3, r2
 8008108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800810a:	e03a      	b.n	8008182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d020      	beq.n	8008156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008114:	4b34      	ldr	r3, [pc, #208]	@ (80081e8 <HAL_RCC_OscConfig+0x244>)
 8008116:	2201      	movs	r2, #1
 8008118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811a:	f7fa f803 	bl	8002124 <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008120:	e008      	b.n	8008134 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008122:	f7f9 ffff 	bl	8002124 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e1a8      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008134:	4b2b      	ldr	r3, [pc, #172]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f0      	beq.n	8008122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008140:	4b28      	ldr	r3, [pc, #160]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	4925      	ldr	r1, [pc, #148]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008150:	4313      	orrs	r3, r2
 8008152:	600b      	str	r3, [r1, #0]
 8008154:	e015      	b.n	8008182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008156:	4b24      	ldr	r3, [pc, #144]	@ (80081e8 <HAL_RCC_OscConfig+0x244>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7f9 ffe2 	bl	8002124 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008164:	f7f9 ffde 	bl	8002124 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e187      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008176:	4b1b      	ldr	r3, [pc, #108]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d036      	beq.n	80081fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d016      	beq.n	80081c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008196:	4b15      	ldr	r3, [pc, #84]	@ (80081ec <HAL_RCC_OscConfig+0x248>)
 8008198:	2201      	movs	r2, #1
 800819a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800819c:	f7f9 ffc2 	bl	8002124 <HAL_GetTick>
 80081a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081a2:	e008      	b.n	80081b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081a4:	f7f9 ffbe 	bl	8002124 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e167      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081b6:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80081b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0f0      	beq.n	80081a4 <HAL_RCC_OscConfig+0x200>
 80081c2:	e01b      	b.n	80081fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c4:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <HAL_RCC_OscConfig+0x248>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ca:	f7f9 ffab 	bl	8002124 <HAL_GetTick>
 80081ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081d0:	e00e      	b.n	80081f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081d2:	f7f9 ffa7 	bl	8002124 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d907      	bls.n	80081f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e150      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
 80081e4:	40023800 	.word	0x40023800
 80081e8:	42470000 	.word	0x42470000
 80081ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081f0:	4b88      	ldr	r3, [pc, #544]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80081f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1ea      	bne.n	80081d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8097 	beq.w	8008338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800820a:	2300      	movs	r3, #0
 800820c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800820e:	4b81      	ldr	r3, [pc, #516]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10f      	bne.n	800823a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	4b7d      	ldr	r3, [pc, #500]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008222:	4a7c      	ldr	r2, [pc, #496]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008228:	6413      	str	r3, [r2, #64]	@ 0x40
 800822a:	4b7a      	ldr	r3, [pc, #488]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800822c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008232:	60bb      	str	r3, [r7, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008236:	2301      	movs	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823a:	4b77      	ldr	r3, [pc, #476]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d118      	bne.n	8008278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008246:	4b74      	ldr	r3, [pc, #464]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a73      	ldr	r2, [pc, #460]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 800824c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008252:	f7f9 ff67 	bl	8002124 <HAL_GetTick>
 8008256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008258:	e008      	b.n	800826c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825a:	f7f9 ff63 	bl	8002124 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e10c      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800826c:	4b6a      	ldr	r3, [pc, #424]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f0      	beq.n	800825a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d106      	bne.n	800828e <HAL_RCC_OscConfig+0x2ea>
 8008280:	4b64      	ldr	r3, [pc, #400]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008284:	4a63      	ldr	r2, [pc, #396]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	6713      	str	r3, [r2, #112]	@ 0x70
 800828c:	e01c      	b.n	80082c8 <HAL_RCC_OscConfig+0x324>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b05      	cmp	r3, #5
 8008294:	d10c      	bne.n	80082b0 <HAL_RCC_OscConfig+0x30c>
 8008296:	4b5f      	ldr	r3, [pc, #380]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	4a5e      	ldr	r2, [pc, #376]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800829c:	f043 0304 	orr.w	r3, r3, #4
 80082a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a6:	4a5b      	ldr	r2, [pc, #364]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082a8:	f043 0301 	orr.w	r3, r3, #1
 80082ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80082ae:	e00b      	b.n	80082c8 <HAL_RCC_OscConfig+0x324>
 80082b0:	4b58      	ldr	r3, [pc, #352]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b4:	4a57      	ldr	r2, [pc, #348]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80082bc:	4b55      	ldr	r3, [pc, #340]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c0:	4a54      	ldr	r2, [pc, #336]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082c2:	f023 0304 	bic.w	r3, r3, #4
 80082c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d015      	beq.n	80082fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d0:	f7f9 ff28 	bl	8002124 <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082d6:	e00a      	b.n	80082ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082d8:	f7f9 ff24 	bl	8002124 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e0cb      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ee:	4b49      	ldr	r3, [pc, #292]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0ee      	beq.n	80082d8 <HAL_RCC_OscConfig+0x334>
 80082fa:	e014      	b.n	8008326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082fc:	f7f9 ff12 	bl	8002124 <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008302:	e00a      	b.n	800831a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008304:	f7f9 ff0e 	bl	8002124 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e0b5      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800831a:	4b3e      	ldr	r3, [pc, #248]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1ee      	bne.n	8008304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d105      	bne.n	8008338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800832c:	4b39      	ldr	r3, [pc, #228]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800832e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008330:	4a38      	ldr	r2, [pc, #224]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008336:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80a1 	beq.w	8008484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008342:	4b34      	ldr	r3, [pc, #208]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 030c 	and.w	r3, r3, #12
 800834a:	2b08      	cmp	r3, #8
 800834c:	d05c      	beq.n	8008408 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d141      	bne.n	80083da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008356:	4b31      	ldr	r3, [pc, #196]	@ (800841c <HAL_RCC_OscConfig+0x478>)
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835c:	f7f9 fee2 	bl	8002124 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008364:	f7f9 fede 	bl	8002124 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e087      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008376:	4b27      	ldr	r3, [pc, #156]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f0      	bne.n	8008364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69da      	ldr	r2, [r3, #28]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008390:	019b      	lsls	r3, r3, #6
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	3b01      	subs	r3, #1
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	061b      	lsls	r3, r3, #24
 80083a6:	491b      	ldr	r1, [pc, #108]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083ac:	4b1b      	ldr	r3, [pc, #108]	@ (800841c <HAL_RCC_OscConfig+0x478>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b2:	f7f9 feb7 	bl	8002124 <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b8:	e008      	b.n	80083cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083ba:	f7f9 feb3 	bl	8002124 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e05c      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083cc:	4b11      	ldr	r3, [pc, #68]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <HAL_RCC_OscConfig+0x416>
 80083d8:	e054      	b.n	8008484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083da:	4b10      	ldr	r3, [pc, #64]	@ (800841c <HAL_RCC_OscConfig+0x478>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e0:	f7f9 fea0 	bl	8002124 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e8:	f7f9 fe9c 	bl	8002124 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e045      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083fa:	4b06      	ldr	r3, [pc, #24]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0x444>
 8008406:	e03d      	b.n	8008484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d107      	bne.n	8008420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e038      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
 8008414:	40023800 	.word	0x40023800
 8008418:	40007000 	.word	0x40007000
 800841c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008420:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <HAL_RCC_OscConfig+0x4ec>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d028      	beq.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008438:	429a      	cmp	r2, r3
 800843a:	d121      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d11a      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008450:	4013      	ands	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008458:	4293      	cmp	r3, r2
 800845a:	d111      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	3b01      	subs	r3, #1
 800846a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800846c:	429a      	cmp	r2, r3
 800846e:	d107      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800847c:	429a      	cmp	r2, r3
 800847e:	d001      	beq.n	8008484 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40023800 	.word	0x40023800

08008494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0cc      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084a8:	4b68      	ldr	r3, [pc, #416]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d90c      	bls.n	80084d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084b6:	4b65      	ldr	r3, [pc, #404]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084be:	4b63      	ldr	r3, [pc, #396]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d001      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0b8      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d020      	beq.n	800851e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084e8:	4b59      	ldr	r3, [pc, #356]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	4a58      	ldr	r2, [pc, #352]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80084ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80084f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008500:	4b53      	ldr	r3, [pc, #332]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	4a52      	ldr	r2, [pc, #328]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800850a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800850c:	4b50      	ldr	r3, [pc, #320]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	494d      	ldr	r1, [pc, #308]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 800851a:	4313      	orrs	r3, r2
 800851c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d044      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d107      	bne.n	8008542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008532:	4b47      	ldr	r3, [pc, #284]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d119      	bne.n	8008572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e07f      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d003      	beq.n	8008552 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800854e:	2b03      	cmp	r3, #3
 8008550:	d107      	bne.n	8008562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008552:	4b3f      	ldr	r3, [pc, #252]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e06f      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008562:	4b3b      	ldr	r3, [pc, #236]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e067      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008572:	4b37      	ldr	r3, [pc, #220]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f023 0203 	bic.w	r2, r3, #3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	4934      	ldr	r1, [pc, #208]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008580:	4313      	orrs	r3, r2
 8008582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008584:	f7f9 fdce 	bl	8002124 <HAL_GetTick>
 8008588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800858a:	e00a      	b.n	80085a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800858c:	f7f9 fdca 	bl	8002124 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859a:	4293      	cmp	r3, r2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e04f      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085a2:	4b2b      	ldr	r3, [pc, #172]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f003 020c 	and.w	r2, r3, #12
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d1eb      	bne.n	800858c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085b4:	4b25      	ldr	r3, [pc, #148]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d20c      	bcs.n	80085dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085c2:	4b22      	ldr	r3, [pc, #136]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ca:	4b20      	ldr	r3, [pc, #128]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d001      	beq.n	80085dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e032      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085e8:	4b19      	ldr	r3, [pc, #100]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	4916      	ldr	r1, [pc, #88]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0308 	and.w	r3, r3, #8
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008606:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	490e      	ldr	r1, [pc, #56]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	4313      	orrs	r3, r2
 8008618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800861a:	f000 f821 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 800861e:	4602      	mov	r2, r0
 8008620:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	091b      	lsrs	r3, r3, #4
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	490a      	ldr	r1, [pc, #40]	@ (8008654 <HAL_RCC_ClockConfig+0x1c0>)
 800862c:	5ccb      	ldrb	r3, [r1, r3]
 800862e:	fa22 f303 	lsr.w	r3, r2, r3
 8008632:	4a09      	ldr	r2, [pc, #36]	@ (8008658 <HAL_RCC_ClockConfig+0x1c4>)
 8008634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008636:	4b09      	ldr	r3, [pc, #36]	@ (800865c <HAL_RCC_ClockConfig+0x1c8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f7f9 fd2e 	bl	800209c <HAL_InitTick>

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40023c00 	.word	0x40023c00
 8008650:	40023800 	.word	0x40023800
 8008654:	0800e6c8 	.word	0x0800e6c8
 8008658:	20000004 	.word	0x20000004
 800865c:	20000008 	.word	0x20000008

08008660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008664:	b090      	sub	sp, #64	@ 0x40
 8008666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008678:	4b59      	ldr	r3, [pc, #356]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f003 030c 	and.w	r3, r3, #12
 8008680:	2b08      	cmp	r3, #8
 8008682:	d00d      	beq.n	80086a0 <HAL_RCC_GetSysClockFreq+0x40>
 8008684:	2b08      	cmp	r3, #8
 8008686:	f200 80a1 	bhi.w	80087cc <HAL_RCC_GetSysClockFreq+0x16c>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_RCC_GetSysClockFreq+0x34>
 800868e:	2b04      	cmp	r3, #4
 8008690:	d003      	beq.n	800869a <HAL_RCC_GetSysClockFreq+0x3a>
 8008692:	e09b      	b.n	80087cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008694:	4b53      	ldr	r3, [pc, #332]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008696:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008698:	e09b      	b.n	80087d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800869a:	4b53      	ldr	r3, [pc, #332]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800869c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800869e:	e098      	b.n	80087d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086a0:	4b4f      	ldr	r3, [pc, #316]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086aa:	4b4d      	ldr	r3, [pc, #308]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d028      	beq.n	8008708 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086b6:	4b4a      	ldr	r3, [pc, #296]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	099b      	lsrs	r3, r3, #6
 80086bc:	2200      	movs	r2, #0
 80086be:	623b      	str	r3, [r7, #32]
 80086c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80086c8:	2100      	movs	r1, #0
 80086ca:	4b47      	ldr	r3, [pc, #284]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80086cc:	fb03 f201 	mul.w	r2, r3, r1
 80086d0:	2300      	movs	r3, #0
 80086d2:	fb00 f303 	mul.w	r3, r0, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	4a43      	ldr	r2, [pc, #268]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80086da:	fba0 1202 	umull	r1, r2, r0, r2
 80086de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086e0:	460a      	mov	r2, r1
 80086e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80086e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086e6:	4413      	add	r3, r2
 80086e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ec:	2200      	movs	r2, #0
 80086ee:	61bb      	str	r3, [r7, #24]
 80086f0:	61fa      	str	r2, [r7, #28]
 80086f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80086fa:	f7f7 fdc1 	bl	8000280 <__aeabi_uldivmod>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4613      	mov	r3, r2
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008706:	e053      	b.n	80087b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008708:	4b35      	ldr	r3, [pc, #212]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	099b      	lsrs	r3, r3, #6
 800870e:	2200      	movs	r2, #0
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	617a      	str	r2, [r7, #20]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800871a:	f04f 0b00 	mov.w	fp, #0
 800871e:	4652      	mov	r2, sl
 8008720:	465b      	mov	r3, fp
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f04f 0100 	mov.w	r1, #0
 800872a:	0159      	lsls	r1, r3, #5
 800872c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008730:	0150      	lsls	r0, r2, #5
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	ebb2 080a 	subs.w	r8, r2, sl
 800873a:	eb63 090b 	sbc.w	r9, r3, fp
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800874a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800874e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008752:	ebb2 0408 	subs.w	r4, r2, r8
 8008756:	eb63 0509 	sbc.w	r5, r3, r9
 800875a:	f04f 0200 	mov.w	r2, #0
 800875e:	f04f 0300 	mov.w	r3, #0
 8008762:	00eb      	lsls	r3, r5, #3
 8008764:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008768:	00e2      	lsls	r2, r4, #3
 800876a:	4614      	mov	r4, r2
 800876c:	461d      	mov	r5, r3
 800876e:	eb14 030a 	adds.w	r3, r4, sl
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	eb45 030b 	adc.w	r3, r5, fp
 8008778:	607b      	str	r3, [r7, #4]
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008786:	4629      	mov	r1, r5
 8008788:	028b      	lsls	r3, r1, #10
 800878a:	4621      	mov	r1, r4
 800878c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008790:	4621      	mov	r1, r4
 8008792:	028a      	lsls	r2, r1, #10
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879a:	2200      	movs	r2, #0
 800879c:	60bb      	str	r3, [r7, #8]
 800879e:	60fa      	str	r2, [r7, #12]
 80087a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087a4:	f7f7 fd6c 	bl	8000280 <__aeabi_uldivmod>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4613      	mov	r3, r2
 80087ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80087b0:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	0c1b      	lsrs	r3, r3, #16
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	3301      	adds	r3, #1
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80087c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80087ca:	e002      	b.n	80087d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087cc:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80087ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80087d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3740      	adds	r7, #64	@ 0x40
 80087d8:	46bd      	mov	sp, r7
 80087da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087de:	bf00      	nop
 80087e0:	40023800 	.word	0x40023800
 80087e4:	00f42400 	.word	0x00f42400
 80087e8:	017d7840 	.word	0x017d7840

080087ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f0:	4b03      	ldr	r3, [pc, #12]	@ (8008800 <HAL_RCC_GetHCLKFreq+0x14>)
 80087f2:	681b      	ldr	r3, [r3, #0]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	20000004 	.word	0x20000004

08008804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008808:	f7ff fff0 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 800880c:	4602      	mov	r2, r0
 800880e:	4b05      	ldr	r3, [pc, #20]	@ (8008824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	0a9b      	lsrs	r3, r3, #10
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	4903      	ldr	r1, [pc, #12]	@ (8008828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800881a:	5ccb      	ldrb	r3, [r1, r3]
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008820:	4618      	mov	r0, r3
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40023800 	.word	0x40023800
 8008828:	0800e6d8 	.word	0x0800e6d8

0800882c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e041      	b.n	80088c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7f9 fa66 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f000 fc3c 	bl	80090e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d001      	beq.n	80088e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e044      	b.n	800896e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0201 	orr.w	r2, r2, #1
 80088fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1e      	ldr	r2, [pc, #120]	@ (800897c <HAL_TIM_Base_Start_IT+0xb0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d018      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x6c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800890e:	d013      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x6c>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1a      	ldr	r2, [pc, #104]	@ (8008980 <HAL_TIM_Base_Start_IT+0xb4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00e      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x6c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a19      	ldr	r2, [pc, #100]	@ (8008984 <HAL_TIM_Base_Start_IT+0xb8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d009      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x6c>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a17      	ldr	r2, [pc, #92]	@ (8008988 <HAL_TIM_Base_Start_IT+0xbc>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d004      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x6c>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a16      	ldr	r2, [pc, #88]	@ (800898c <HAL_TIM_Base_Start_IT+0xc0>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d111      	bne.n	800895c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b06      	cmp	r3, #6
 8008948:	d010      	beq.n	800896c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0201 	orr.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895a:	e007      	b.n	800896c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40010000 	.word	0x40010000
 8008980:	40000400 	.word	0x40000400
 8008984:	40000800 	.word	0x40000800
 8008988:	40000c00 	.word	0x40000c00
 800898c:	40014000 	.word	0x40014000

08008990 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e041      	b.n	8008a26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f839 	bl	8008a2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f000 fb8a 	bl	80090e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d109      	bne.n	8008a68 <HAL_TIM_PWM_Start+0x24>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	bf14      	ite	ne
 8008a60:	2301      	movne	r3, #1
 8008a62:	2300      	moveq	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	e022      	b.n	8008aae <HAL_TIM_PWM_Start+0x6a>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d109      	bne.n	8008a82 <HAL_TIM_PWM_Start+0x3e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	bf14      	ite	ne
 8008a7a:	2301      	movne	r3, #1
 8008a7c:	2300      	moveq	r3, #0
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	e015      	b.n	8008aae <HAL_TIM_PWM_Start+0x6a>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b08      	cmp	r3, #8
 8008a86:	d109      	bne.n	8008a9c <HAL_TIM_PWM_Start+0x58>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	bf14      	ite	ne
 8008a94:	2301      	movne	r3, #1
 8008a96:	2300      	moveq	r3, #0
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	e008      	b.n	8008aae <HAL_TIM_PWM_Start+0x6a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	bf14      	ite	ne
 8008aa8:	2301      	movne	r3, #1
 8008aaa:	2300      	moveq	r3, #0
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e068      	b.n	8008b88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d104      	bne.n	8008ac6 <HAL_TIM_PWM_Start+0x82>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ac4:	e013      	b.n	8008aee <HAL_TIM_PWM_Start+0xaa>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d104      	bne.n	8008ad6 <HAL_TIM_PWM_Start+0x92>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ad4:	e00b      	b.n	8008aee <HAL_TIM_PWM_Start+0xaa>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d104      	bne.n	8008ae6 <HAL_TIM_PWM_Start+0xa2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ae4:	e003      	b.n	8008aee <HAL_TIM_PWM_Start+0xaa>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2201      	movs	r2, #1
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fda2 	bl	8009640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a23      	ldr	r2, [pc, #140]	@ (8008b90 <HAL_TIM_PWM_Start+0x14c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d107      	bne.n	8008b16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008b90 <HAL_TIM_PWM_Start+0x14c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d018      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x10e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b28:	d013      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x10e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a19      	ldr	r2, [pc, #100]	@ (8008b94 <HAL_TIM_PWM_Start+0x150>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00e      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x10e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a17      	ldr	r2, [pc, #92]	@ (8008b98 <HAL_TIM_PWM_Start+0x154>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x10e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a16      	ldr	r2, [pc, #88]	@ (8008b9c <HAL_TIM_PWM_Start+0x158>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x10e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a14      	ldr	r2, [pc, #80]	@ (8008ba0 <HAL_TIM_PWM_Start+0x15c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d111      	bne.n	8008b76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b06      	cmp	r3, #6
 8008b62:	d010      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0201 	orr.w	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b74:	e007      	b.n	8008b86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0201 	orr.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	40010000 	.word	0x40010000
 8008b94:	40000400 	.word	0x40000400
 8008b98:	40000800 	.word	0x40000800
 8008b9c:	40000c00 	.word	0x40000c00
 8008ba0:	40014000 	.word	0x40014000

08008ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d020      	beq.n	8008c08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01b      	beq.n	8008c08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0202 	mvn.w	r2, #2
 8008bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fa5b 	bl	80090aa <HAL_TIM_IC_CaptureCallback>
 8008bf4:	e005      	b.n	8008c02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa4d 	bl	8009096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fa5e 	bl	80090be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d01b      	beq.n	8008c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f06f 0204 	mvn.w	r2, #4
 8008c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fa35 	bl	80090aa <HAL_TIM_IC_CaptureCallback>
 8008c40:	e005      	b.n	8008c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa27 	bl	8009096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fa38 	bl	80090be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d020      	beq.n	8008ca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01b      	beq.n	8008ca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f06f 0208 	mvn.w	r2, #8
 8008c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2204      	movs	r2, #4
 8008c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa0f 	bl	80090aa <HAL_TIM_IC_CaptureCallback>
 8008c8c:	e005      	b.n	8008c9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa01 	bl	8009096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa12 	bl	80090be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d020      	beq.n	8008cec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d01b      	beq.n	8008cec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0210 	mvn.w	r2, #16
 8008cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9e9 	bl	80090aa <HAL_TIM_IC_CaptureCallback>
 8008cd8:	e005      	b.n	8008ce6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9db 	bl	8009096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f9ec 	bl	80090be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f06f 0201 	mvn.w	r2, #1
 8008d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7f7 ff10 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00c      	beq.n	8008d34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d007      	beq.n	8008d34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fd24 	bl	800977c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d007      	beq.n	8008d58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f9bd 	bl	80090d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00c      	beq.n	8008d7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d007      	beq.n	8008d7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f06f 0220 	mvn.w	r2, #32
 8008d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fcf6 	bl	8009768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e0ae      	b.n	8008f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b0c      	cmp	r3, #12
 8008dae:	f200 809f 	bhi.w	8008ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008ded 	.word	0x08008ded
 8008dbc:	08008ef1 	.word	0x08008ef1
 8008dc0:	08008ef1 	.word	0x08008ef1
 8008dc4:	08008ef1 	.word	0x08008ef1
 8008dc8:	08008e2d 	.word	0x08008e2d
 8008dcc:	08008ef1 	.word	0x08008ef1
 8008dd0:	08008ef1 	.word	0x08008ef1
 8008dd4:	08008ef1 	.word	0x08008ef1
 8008dd8:	08008e6f 	.word	0x08008e6f
 8008ddc:	08008ef1 	.word	0x08008ef1
 8008de0:	08008ef1 	.word	0x08008ef1
 8008de4:	08008ef1 	.word	0x08008ef1
 8008de8:	08008eaf 	.word	0x08008eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f9fe 	bl	80091f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699a      	ldr	r2, [r3, #24]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0208 	orr.w	r2, r2, #8
 8008e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699a      	ldr	r2, [r3, #24]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0204 	bic.w	r2, r2, #4
 8008e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6999      	ldr	r1, [r3, #24]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	619a      	str	r2, [r3, #24]
      break;
 8008e2a:	e064      	b.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fa44 	bl	80092c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699a      	ldr	r2, [r3, #24]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6999      	ldr	r1, [r3, #24]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	021a      	lsls	r2, r3, #8
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	619a      	str	r2, [r3, #24]
      break;
 8008e6c:	e043      	b.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68b9      	ldr	r1, [r7, #8]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fa8f 	bl	8009398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69da      	ldr	r2, [r3, #28]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0208 	orr.w	r2, r2, #8
 8008e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0204 	bic.w	r2, r2, #4
 8008e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69d9      	ldr	r1, [r3, #28]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	61da      	str	r2, [r3, #28]
      break;
 8008eac:	e023      	b.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fad9 	bl	800946c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	69da      	ldr	r2, [r3, #28]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69d9      	ldr	r1, [r3, #28]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	021a      	lsls	r2, r3, #8
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	61da      	str	r2, [r3, #28]
      break;
 8008eee:	e002      	b.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d101      	bne.n	8008f24 <HAL_TIM_ConfigClockSource+0x1c>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e0b4      	b.n	800908e <HAL_TIM_ConfigClockSource+0x186>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f5c:	d03e      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0xd4>
 8008f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f62:	f200 8087 	bhi.w	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f6a:	f000 8086 	beq.w	800907a <HAL_TIM_ConfigClockSource+0x172>
 8008f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f72:	d87f      	bhi.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008f74:	2b70      	cmp	r3, #112	@ 0x70
 8008f76:	d01a      	beq.n	8008fae <HAL_TIM_ConfigClockSource+0xa6>
 8008f78:	2b70      	cmp	r3, #112	@ 0x70
 8008f7a:	d87b      	bhi.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008f7c:	2b60      	cmp	r3, #96	@ 0x60
 8008f7e:	d050      	beq.n	8009022 <HAL_TIM_ConfigClockSource+0x11a>
 8008f80:	2b60      	cmp	r3, #96	@ 0x60
 8008f82:	d877      	bhi.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008f84:	2b50      	cmp	r3, #80	@ 0x50
 8008f86:	d03c      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0xfa>
 8008f88:	2b50      	cmp	r3, #80	@ 0x50
 8008f8a:	d873      	bhi.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008f8c:	2b40      	cmp	r3, #64	@ 0x40
 8008f8e:	d058      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x13a>
 8008f90:	2b40      	cmp	r3, #64	@ 0x40
 8008f92:	d86f      	bhi.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008f94:	2b30      	cmp	r3, #48	@ 0x30
 8008f96:	d064      	beq.n	8009062 <HAL_TIM_ConfigClockSource+0x15a>
 8008f98:	2b30      	cmp	r3, #48	@ 0x30
 8008f9a:	d86b      	bhi.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d060      	beq.n	8009062 <HAL_TIM_ConfigClockSource+0x15a>
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d867      	bhi.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d05c      	beq.n	8009062 <HAL_TIM_ConfigClockSource+0x15a>
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	d05a      	beq.n	8009062 <HAL_TIM_ConfigClockSource+0x15a>
 8008fac:	e062      	b.n	8009074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fbe:	f000 fb1f 	bl	8009600 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	609a      	str	r2, [r3, #8]
      break;
 8008fda:	e04f      	b.n	800907c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fec:	f000 fb08 	bl	8009600 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689a      	ldr	r2, [r3, #8]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ffe:	609a      	str	r2, [r3, #8]
      break;
 8009000:	e03c      	b.n	800907c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800900e:	461a      	mov	r2, r3
 8009010:	f000 fa7c 	bl	800950c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2150      	movs	r1, #80	@ 0x50
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fad5 	bl	80095ca <TIM_ITRx_SetConfig>
      break;
 8009020:	e02c      	b.n	800907c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800902e:	461a      	mov	r2, r3
 8009030:	f000 fa9b 	bl	800956a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2160      	movs	r1, #96	@ 0x60
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fac5 	bl	80095ca <TIM_ITRx_SetConfig>
      break;
 8009040:	e01c      	b.n	800907c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800904e:	461a      	mov	r2, r3
 8009050:	f000 fa5c 	bl	800950c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2140      	movs	r1, #64	@ 0x40
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fab5 	bl	80095ca <TIM_ITRx_SetConfig>
      break;
 8009060:	e00c      	b.n	800907c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4619      	mov	r1, r3
 800906c:	4610      	mov	r0, r2
 800906e:	f000 faac 	bl	80095ca <TIM_ITRx_SetConfig>
      break;
 8009072:	e003      	b.n	800907c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	73fb      	strb	r3, [r7, #15]
      break;
 8009078:	e000      	b.n	800907c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800907a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090b2:	bf00      	nop
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a37      	ldr	r2, [pc, #220]	@ (80091d8 <TIM_Base_SetConfig+0xf0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d00f      	beq.n	8009120 <TIM_Base_SetConfig+0x38>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009106:	d00b      	beq.n	8009120 <TIM_Base_SetConfig+0x38>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a34      	ldr	r2, [pc, #208]	@ (80091dc <TIM_Base_SetConfig+0xf4>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <TIM_Base_SetConfig+0x38>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a33      	ldr	r2, [pc, #204]	@ (80091e0 <TIM_Base_SetConfig+0xf8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d003      	beq.n	8009120 <TIM_Base_SetConfig+0x38>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a32      	ldr	r2, [pc, #200]	@ (80091e4 <TIM_Base_SetConfig+0xfc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d108      	bne.n	8009132 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a28      	ldr	r2, [pc, #160]	@ (80091d8 <TIM_Base_SetConfig+0xf0>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d01b      	beq.n	8009172 <TIM_Base_SetConfig+0x8a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009140:	d017      	beq.n	8009172 <TIM_Base_SetConfig+0x8a>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a25      	ldr	r2, [pc, #148]	@ (80091dc <TIM_Base_SetConfig+0xf4>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <TIM_Base_SetConfig+0x8a>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a24      	ldr	r2, [pc, #144]	@ (80091e0 <TIM_Base_SetConfig+0xf8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00f      	beq.n	8009172 <TIM_Base_SetConfig+0x8a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a23      	ldr	r2, [pc, #140]	@ (80091e4 <TIM_Base_SetConfig+0xfc>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00b      	beq.n	8009172 <TIM_Base_SetConfig+0x8a>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a22      	ldr	r2, [pc, #136]	@ (80091e8 <TIM_Base_SetConfig+0x100>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d007      	beq.n	8009172 <TIM_Base_SetConfig+0x8a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a21      	ldr	r2, [pc, #132]	@ (80091ec <TIM_Base_SetConfig+0x104>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d003      	beq.n	8009172 <TIM_Base_SetConfig+0x8a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a20      	ldr	r2, [pc, #128]	@ (80091f0 <TIM_Base_SetConfig+0x108>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d108      	bne.n	8009184 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a0c      	ldr	r2, [pc, #48]	@ (80091d8 <TIM_Base_SetConfig+0xf0>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d103      	bne.n	80091b2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	691a      	ldr	r2, [r3, #16]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f043 0204 	orr.w	r2, r3, #4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]
}
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40014000 	.word	0x40014000
 80091ec:	40014400 	.word	0x40014400
 80091f0:	40014800 	.word	0x40014800

080091f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	f023 0201 	bic.w	r2, r3, #1
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f023 0302 	bic.w	r3, r3, #2
 800923c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a1c      	ldr	r2, [pc, #112]	@ (80092bc <TIM_OC1_SetConfig+0xc8>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d10c      	bne.n	800926a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f023 0308 	bic.w	r3, r3, #8
 8009256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f023 0304 	bic.w	r3, r3, #4
 8009268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a13      	ldr	r2, [pc, #76]	@ (80092bc <TIM_OC1_SetConfig+0xc8>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d111      	bne.n	8009296 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4313      	orrs	r3, r2
 800928a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	621a      	str	r2, [r3, #32]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	40010000 	.word	0x40010000

080092c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	f023 0210 	bic.w	r2, r3, #16
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f023 0320 	bic.w	r3, r3, #32
 800930a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a1e      	ldr	r2, [pc, #120]	@ (8009394 <TIM_OC2_SetConfig+0xd4>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d10d      	bne.n	800933c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	4313      	orrs	r3, r2
 8009332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800933a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a15      	ldr	r2, [pc, #84]	@ (8009394 <TIM_OC2_SetConfig+0xd4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d113      	bne.n	800936c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800934a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	4313      	orrs	r3, r2
 800936a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40010000 	.word	0x40010000

08009398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f023 0303 	bic.w	r3, r3, #3
 80093ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009468 <TIM_OC3_SetConfig+0xd0>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d10d      	bne.n	8009412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	021b      	lsls	r3, r3, #8
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	4313      	orrs	r3, r2
 8009408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a14      	ldr	r2, [pc, #80]	@ (8009468 <TIM_OC3_SetConfig+0xd0>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d113      	bne.n	8009442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	4313      	orrs	r3, r2
 8009434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	621a      	str	r2, [r3, #32]
}
 800945c:	bf00      	nop
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	40010000 	.word	0x40010000

0800946c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800949a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	021b      	lsls	r3, r3, #8
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	031b      	lsls	r3, r3, #12
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a10      	ldr	r2, [pc, #64]	@ (8009508 <TIM_OC4_SetConfig+0x9c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d109      	bne.n	80094e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	019b      	lsls	r3, r3, #6
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	4313      	orrs	r3, r2
 80094de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40010000 	.word	0x40010000

0800950c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	f023 0201 	bic.w	r2, r3, #1
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f023 030a 	bic.w	r3, r3, #10
 8009548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4313      	orrs	r3, r2
 8009550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	621a      	str	r2, [r3, #32]
}
 800955e:	bf00      	nop
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800956a:	b480      	push	{r7}
 800956c:	b087      	sub	sp, #28
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	f023 0210 	bic.w	r2, r3, #16
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	031b      	lsls	r3, r3, #12
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	4313      	orrs	r3, r2
 800959e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80095a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	621a      	str	r2, [r3, #32]
}
 80095be:	bf00      	nop
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	f043 0307 	orr.w	r3, r3, #7
 80095ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800961a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	021a      	lsls	r2, r3, #8
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	431a      	orrs	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4313      	orrs	r3, r2
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	609a      	str	r2, [r3, #8]
}
 8009634:	bf00      	nop
 8009636:	371c      	adds	r7, #28
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f003 031f 	and.w	r3, r3, #31
 8009652:	2201      	movs	r2, #1
 8009654:	fa02 f303 	lsl.w	r3, r2, r3
 8009658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1a      	ldr	r2, [r3, #32]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	43db      	mvns	r3, r3
 8009662:	401a      	ands	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a1a      	ldr	r2, [r3, #32]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	fa01 f303 	lsl.w	r3, r1, r3
 8009678:	431a      	orrs	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
	...

0800968c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800969c:	2b01      	cmp	r3, #1
 800969e:	d101      	bne.n	80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e050      	b.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d018      	beq.n	800971a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096f0:	d013      	beq.n	800971a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a18      	ldr	r2, [pc, #96]	@ (8009758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d00e      	beq.n	800971a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a16      	ldr	r2, [pc, #88]	@ (800975c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d009      	beq.n	800971a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a15      	ldr	r2, [pc, #84]	@ (8009760 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d004      	beq.n	800971a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a13      	ldr	r2, [pc, #76]	@ (8009764 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d10c      	bne.n	8009734 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	4313      	orrs	r3, r2
 800972a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	40010000 	.word	0x40010000
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00
 8009764:	40014000 	.word	0x40014000

08009768 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009790:	b084      	sub	sp, #16
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	f107 001c 	add.w	r0, r7, #28
 800979e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d123      	bne.n	80097f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80097be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d105      	bne.n	80097e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fae8 	bl	800adbc <USB_CoreReset>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
 80097f0:	e01b      	b.n	800982a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fadc 	bl	800adbc <USB_CoreReset>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009808:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009814:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	639a      	str	r2, [r3, #56]	@ 0x38
 800981c:	e005      	b.n	800982a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009822:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800982a:	7fbb      	ldrb	r3, [r7, #30]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d10b      	bne.n	8009848 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f043 0206 	orr.w	r2, r3, #6
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f043 0220 	orr.w	r2, r3, #32
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009854:	b004      	add	sp, #16
 8009856:	4770      	bx	lr

08009858 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d165      	bne.n	8009938 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	4a41      	ldr	r2, [pc, #260]	@ (8009974 <USB_SetTurnaroundTime+0x11c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d906      	bls.n	8009882 <USB_SetTurnaroundTime+0x2a>
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4a40      	ldr	r2, [pc, #256]	@ (8009978 <USB_SetTurnaroundTime+0x120>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d202      	bcs.n	8009882 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800987c:	230f      	movs	r3, #15
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	e062      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4a3c      	ldr	r2, [pc, #240]	@ (8009978 <USB_SetTurnaroundTime+0x120>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d306      	bcc.n	8009898 <USB_SetTurnaroundTime+0x40>
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4a3b      	ldr	r2, [pc, #236]	@ (800997c <USB_SetTurnaroundTime+0x124>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d202      	bcs.n	8009898 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009892:	230e      	movs	r3, #14
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	e057      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4a38      	ldr	r2, [pc, #224]	@ (800997c <USB_SetTurnaroundTime+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d306      	bcc.n	80098ae <USB_SetTurnaroundTime+0x56>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4a37      	ldr	r2, [pc, #220]	@ (8009980 <USB_SetTurnaroundTime+0x128>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d202      	bcs.n	80098ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80098a8:	230d      	movs	r3, #13
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	e04c      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	4a33      	ldr	r2, [pc, #204]	@ (8009980 <USB_SetTurnaroundTime+0x128>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d306      	bcc.n	80098c4 <USB_SetTurnaroundTime+0x6c>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4a32      	ldr	r2, [pc, #200]	@ (8009984 <USB_SetTurnaroundTime+0x12c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d802      	bhi.n	80098c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80098be:	230c      	movs	r3, #12
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	e041      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	4a2f      	ldr	r2, [pc, #188]	@ (8009984 <USB_SetTurnaroundTime+0x12c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d906      	bls.n	80098da <USB_SetTurnaroundTime+0x82>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	4a2e      	ldr	r2, [pc, #184]	@ (8009988 <USB_SetTurnaroundTime+0x130>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d802      	bhi.n	80098da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80098d4:	230b      	movs	r3, #11
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	e036      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009988 <USB_SetTurnaroundTime+0x130>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d906      	bls.n	80098f0 <USB_SetTurnaroundTime+0x98>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	4a29      	ldr	r2, [pc, #164]	@ (800998c <USB_SetTurnaroundTime+0x134>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d802      	bhi.n	80098f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80098ea:	230a      	movs	r3, #10
 80098ec:	617b      	str	r3, [r7, #20]
 80098ee:	e02b      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4a26      	ldr	r2, [pc, #152]	@ (800998c <USB_SetTurnaroundTime+0x134>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d906      	bls.n	8009906 <USB_SetTurnaroundTime+0xae>
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4a25      	ldr	r2, [pc, #148]	@ (8009990 <USB_SetTurnaroundTime+0x138>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d202      	bcs.n	8009906 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009900:	2309      	movs	r3, #9
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e020      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4a21      	ldr	r2, [pc, #132]	@ (8009990 <USB_SetTurnaroundTime+0x138>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d306      	bcc.n	800991c <USB_SetTurnaroundTime+0xc4>
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4a20      	ldr	r2, [pc, #128]	@ (8009994 <USB_SetTurnaroundTime+0x13c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d802      	bhi.n	800991c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009916:	2308      	movs	r3, #8
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	e015      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4a1d      	ldr	r2, [pc, #116]	@ (8009994 <USB_SetTurnaroundTime+0x13c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d906      	bls.n	8009932 <USB_SetTurnaroundTime+0xda>
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4a1c      	ldr	r2, [pc, #112]	@ (8009998 <USB_SetTurnaroundTime+0x140>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d202      	bcs.n	8009932 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800992c:	2307      	movs	r3, #7
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e00a      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009932:	2306      	movs	r3, #6
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	e007      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800993e:	2309      	movs	r3, #9
 8009940:	617b      	str	r3, [r7, #20]
 8009942:	e001      	b.n	8009948 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009944:	2309      	movs	r3, #9
 8009946:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	029b      	lsls	r3, r3, #10
 800995c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009960:	431a      	orrs	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	00d8acbf 	.word	0x00d8acbf
 8009978:	00e4e1c0 	.word	0x00e4e1c0
 800997c:	00f42400 	.word	0x00f42400
 8009980:	01067380 	.word	0x01067380
 8009984:	011a499f 	.word	0x011a499f
 8009988:	01312cff 	.word	0x01312cff
 800998c:	014ca43f 	.word	0x014ca43f
 8009990:	016e3600 	.word	0x016e3600
 8009994:	01a6ab1f 	.word	0x01a6ab1f
 8009998:	01e84800 	.word	0x01e84800

0800999c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f043 0201 	orr.w	r2, r3, #1
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f023 0201 	bic.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d115      	bne.n	8009a2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a0e:	200a      	movs	r0, #10
 8009a10:	f7f8 fb94 	bl	800213c <HAL_Delay>
      ms += 10U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	330a      	adds	r3, #10
 8009a18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 f93f 	bl	800ac9e <USB_GetMode>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d01e      	beq.n	8009a64 <USB_SetCurrentMode+0x84>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a2a:	d9f0      	bls.n	8009a0e <USB_SetCurrentMode+0x2e>
 8009a2c:	e01a      	b.n	8009a64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d115      	bne.n	8009a60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a40:	200a      	movs	r0, #10
 8009a42:	f7f8 fb7b 	bl	800213c <HAL_Delay>
      ms += 10U;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	330a      	adds	r3, #10
 8009a4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 f926 	bl	800ac9e <USB_GetMode>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <USB_SetCurrentMode+0x84>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a5c:	d9f0      	bls.n	8009a40 <USB_SetCurrentMode+0x60>
 8009a5e:	e001      	b.n	8009a64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e005      	b.n	8009a70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2bc8      	cmp	r3, #200	@ 0xc8
 8009a68:	d101      	bne.n	8009a6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a78:	b084      	sub	sp, #16
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b086      	sub	sp, #24
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a92:	2300      	movs	r3, #0
 8009a94:	613b      	str	r3, [r7, #16]
 8009a96:	e009      	b.n	8009aac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	3340      	adds	r3, #64	@ 0x40
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	2b0e      	cmp	r3, #14
 8009ab0:	d9f2      	bls.n	8009a98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ab2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d11c      	bne.n	8009af4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ac8:	f043 0302 	orr.w	r3, r3, #2
 8009acc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ade:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	639a      	str	r2, [r3, #56]	@ 0x38
 8009af2:	e00b      	b.n	8009b0c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b12:	461a      	mov	r2, r3
 8009b14:	2300      	movs	r3, #0
 8009b16:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10d      	bne.n	8009b3c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b28:	2100      	movs	r1, #0
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f968 	bl	8009e00 <USB_SetDevSpeed>
 8009b30:	e008      	b.n	8009b44 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b32:	2101      	movs	r1, #1
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f963 	bl	8009e00 <USB_SetDevSpeed>
 8009b3a:	e003      	b.n	8009b44 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b3c:	2103      	movs	r1, #3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f95e 	bl	8009e00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b44:	2110      	movs	r1, #16
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f8fa 	bl	8009d40 <USB_FlushTxFifo>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f924 	bl	8009da4 <USB_FlushRxFifo>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b78:	461a      	mov	r2, r3
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b84:	461a      	mov	r2, r3
 8009b86:	2300      	movs	r3, #0
 8009b88:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	e043      	b.n	8009c18 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ba6:	d118      	bne.n	8009bda <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	e013      	b.n	8009bec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	e008      	b.n	8009bec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009be6:	461a      	mov	r2, r3
 8009be8:	2300      	movs	r3, #0
 8009bea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	3301      	adds	r3, #1
 8009c16:	613b      	str	r3, [r7, #16]
 8009c18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d3b5      	bcc.n	8009b90 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c24:	2300      	movs	r3, #0
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	e043      	b.n	8009cb2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c40:	d118      	bne.n	8009c74 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10a      	bne.n	8009c5e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c54:	461a      	mov	r2, r3
 8009c56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	e013      	b.n	8009c86 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e008      	b.n	8009c86 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c80:	461a      	mov	r2, r3
 8009c82:	2300      	movs	r3, #0
 8009c84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c92:	461a      	mov	r2, r3
 8009c94:	2300      	movs	r3, #0
 8009c96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009caa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d3b5      	bcc.n	8009c2a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cd0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009cde:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d105      	bne.n	8009cf4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	f043 0210 	orr.w	r2, r3, #16
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	699a      	ldr	r2, [r3, #24]
 8009cf8:	4b10      	ldr	r3, [pc, #64]	@ (8009d3c <USB_DevInit+0x2c4>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	f043 0208 	orr.w	r2, r3, #8
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d107      	bne.n	8009d2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d24:	f043 0304 	orr.w	r3, r3, #4
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d38:	b004      	add	sp, #16
 8009d3a:	4770      	bx	lr
 8009d3c:	803c3800 	.word	0x803c3800

08009d40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d5a:	d901      	bls.n	8009d60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e01b      	b.n	8009d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	daf2      	bge.n	8009d4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	019b      	lsls	r3, r3, #6
 8009d70:	f043 0220 	orr.w	r2, r3, #32
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d84:	d901      	bls.n	8009d8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e006      	b.n	8009d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d0f0      	beq.n	8009d78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009dbc:	d901      	bls.n	8009dc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e018      	b.n	8009df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	daf2      	bge.n	8009db0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2210      	movs	r2, #16
 8009dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009de0:	d901      	bls.n	8009de6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e006      	b.n	8009df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	f003 0310 	and.w	r3, r3, #16
 8009dee:	2b10      	cmp	r3, #16
 8009df0:	d0f0      	beq.n	8009dd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	68f9      	ldr	r1, [r7, #12]
 8009e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e20:	4313      	orrs	r3, r2
 8009e22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b087      	sub	sp, #28
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f003 0306 	and.w	r3, r3, #6
 8009e4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75fb      	strb	r3, [r7, #23]
 8009e56:	e00a      	b.n	8009e6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d002      	beq.n	8009e64 <USB_GetDevSpeed+0x32>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b06      	cmp	r3, #6
 8009e62:	d102      	bne.n	8009e6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e64:	2302      	movs	r3, #2
 8009e66:	75fb      	strb	r3, [r7, #23]
 8009e68:	e001      	b.n	8009e6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e6a:	230f      	movs	r3, #15
 8009e6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	371c      	adds	r7, #28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d13a      	bne.n	8009f0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e9e:	69da      	ldr	r2, [r3, #28]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	f003 030f 	and.w	r3, r3, #15
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d155      	bne.n	8009f7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	791b      	ldrb	r3, [r3, #4]
 8009eea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009eec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	059b      	lsls	r3, r3, #22
 8009ef2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	0151      	lsls	r1, r2, #5
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	440a      	add	r2, r1
 8009efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	e036      	b.n	8009f7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f14:	69da      	ldr	r2, [r3, #28]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f003 030f 	and.w	r3, r3, #15
 8009f1e:	2101      	movs	r1, #1
 8009f20:	fa01 f303 	lsl.w	r3, r1, r3
 8009f24:	041b      	lsls	r3, r3, #16
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d11a      	bne.n	8009f7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	791b      	ldrb	r3, [r3, #4]
 8009f60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f62:	430b      	orrs	r3, r1
 8009f64:	4313      	orrs	r3, r2
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
	...

08009f8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	785b      	ldrb	r3, [r3, #1]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d161      	bne.n	800a06c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fbe:	d11f      	bne.n	800a000 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	0151      	lsls	r1, r2, #5
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	440a      	add	r2, r1
 8009fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	0151      	lsls	r1, r2, #5
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	440a      	add	r2, r1
 8009ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ffa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f003 030f 	and.w	r3, r3, #15
 800a010:	2101      	movs	r1, #1
 800a012:	fa01 f303 	lsl.w	r3, r1, r3
 800a016:	b29b      	uxth	r3, r3
 800a018:	43db      	mvns	r3, r3
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a020:	4013      	ands	r3, r2
 800a022:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a02a:	69da      	ldr	r2, [r3, #28]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	2101      	movs	r1, #1
 800a036:	fa01 f303 	lsl.w	r3, r1, r3
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	43db      	mvns	r3, r3
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a044:	4013      	ands	r3, r2
 800a046:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	0159      	lsls	r1, r3, #5
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	440b      	add	r3, r1
 800a05e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a062:	4619      	mov	r1, r3
 800a064:	4b35      	ldr	r3, [pc, #212]	@ (800a13c <USB_DeactivateEndpoint+0x1b0>)
 800a066:	4013      	ands	r3, r2
 800a068:	600b      	str	r3, [r1, #0]
 800a06a:	e060      	b.n	800a12e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a07e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a082:	d11f      	bne.n	800a0c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a09e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 030f 	and.w	r3, r3, #15
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0da:	041b      	lsls	r3, r3, #16
 800a0dc:	43db      	mvns	r3, r3
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ee:	69da      	ldr	r2, [r3, #28]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	43db      	mvns	r3, r3
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a108:	4013      	ands	r3, r2
 800a10a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	0159      	lsls	r1, r3, #5
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	440b      	add	r3, r1
 800a122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a126:	4619      	mov	r1, r3
 800a128:	4b05      	ldr	r3, [pc, #20]	@ (800a140 <USB_DeactivateEndpoint+0x1b4>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	ec337800 	.word	0xec337800
 800a140:	eff37800 	.word	0xeff37800

0800a144 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08a      	sub	sp, #40	@ 0x28
 800a148:	af02      	add	r7, sp, #8
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	785b      	ldrb	r3, [r3, #1]
 800a160:	2b01      	cmp	r3, #1
 800a162:	f040 817f 	bne.w	800a464 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d132      	bne.n	800a1d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a188:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a18c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	0151      	lsls	r1, r2, #5
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1cc:	0cdb      	lsrs	r3, r3, #19
 800a1ce:	04db      	lsls	r3, r3, #19
 800a1d0:	6113      	str	r3, [r2, #16]
 800a1d2:	e097      	b.n	800a304 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ee:	0cdb      	lsrs	r3, r3, #19
 800a1f0:	04db      	lsls	r3, r3, #19
 800a1f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a20e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a212:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a216:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d11a      	bne.n	800a254 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	429a      	cmp	r2, r3
 800a228:	d903      	bls.n	800a232 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	689a      	ldr	r2, [r3, #8]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	0151      	lsls	r1, r2, #5
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	440a      	add	r2, r1
 800a248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a24c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a250:	6113      	str	r3, [r2, #16]
 800a252:	e044      	b.n	800a2de <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	691a      	ldr	r2, [r3, #16]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	4413      	add	r3, r2
 800a25e:	1e5a      	subs	r2, r3, #1
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	fbb2 f3f3 	udiv	r3, r2, r3
 800a268:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a276:	691a      	ldr	r2, [r3, #16]
 800a278:	8afb      	ldrh	r3, [r7, #22]
 800a27a:	04d9      	lsls	r1, r3, #19
 800a27c:	4ba4      	ldr	r3, [pc, #656]	@ (800a510 <USB_EPStartXfer+0x3cc>)
 800a27e:	400b      	ands	r3, r1
 800a280:	69b9      	ldr	r1, [r7, #24]
 800a282:	0148      	lsls	r0, r1, #5
 800a284:	69f9      	ldr	r1, [r7, #28]
 800a286:	4401      	add	r1, r0
 800a288:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a28c:	4313      	orrs	r3, r2
 800a28e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	791b      	ldrb	r3, [r3, #4]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d122      	bne.n	800a2de <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	0151      	lsls	r1, r2, #5
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	440a      	add	r2, r1
 800a2ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2b2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a2b6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c4:	691a      	ldr	r2, [r3, #16]
 800a2c6:	8afb      	ldrh	r3, [r7, #22]
 800a2c8:	075b      	lsls	r3, r3, #29
 800a2ca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a2ce:	69b9      	ldr	r1, [r7, #24]
 800a2d0:	0148      	lsls	r0, r1, #5
 800a2d2:	69f9      	ldr	r1, [r7, #28]
 800a2d4:	4401      	add	r1, r0
 800a2d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2f4:	69b9      	ldr	r1, [r7, #24]
 800a2f6:	0148      	lsls	r0, r1, #5
 800a2f8:	69f9      	ldr	r1, [r7, #28]
 800a2fa:	4401      	add	r1, r0
 800a2fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a300:	4313      	orrs	r3, r2
 800a302:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d14b      	bne.n	800a3a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d009      	beq.n	800a326 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31e:	461a      	mov	r2, r3
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	791b      	ldrb	r3, [r3, #4]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d128      	bne.n	800a380 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d110      	bne.n	800a360 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	4413      	add	r3, r2
 800a346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	0151      	lsls	r1, r2, #5
 800a350:	69fa      	ldr	r2, [r7, #28]
 800a352:	440a      	add	r2, r1
 800a354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a358:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a35c:	6013      	str	r3, [r2, #0]
 800a35e:	e00f      	b.n	800a380 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	0151      	lsls	r1, r2, #5
 800a372:	69fa      	ldr	r2, [r7, #28]
 800a374:	440a      	add	r2, r1
 800a376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a37a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a37e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69ba      	ldr	r2, [r7, #24]
 800a390:	0151      	lsls	r1, r2, #5
 800a392:	69fa      	ldr	r2, [r7, #28]
 800a394:	440a      	add	r2, r1
 800a396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	e166      	b.n	800a670 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	0151      	lsls	r1, r2, #5
 800a3b4:	69fa      	ldr	r2, [r7, #28]
 800a3b6:	440a      	add	r2, r1
 800a3b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	791b      	ldrb	r3, [r3, #4]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d015      	beq.n	800a3f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 814e 	beq.w	800a670 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ea:	69f9      	ldr	r1, [r7, #28]
 800a3ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	634b      	str	r3, [r1, #52]	@ 0x34
 800a3f4:	e13c      	b.n	800a670 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a402:	2b00      	cmp	r3, #0
 800a404:	d110      	bne.n	800a428 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	69fa      	ldr	r2, [r7, #28]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a420:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	e00f      	b.n	800a448 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	0151      	lsls	r1, r2, #5
 800a43a:	69fa      	ldr	r2, [r7, #28]
 800a43c:	440a      	add	r2, r1
 800a43e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a446:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	68d9      	ldr	r1, [r3, #12]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	b298      	uxth	r0, r3
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4603      	mov	r3, r0
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f9b9 	bl	800a7d4 <USB_WritePacket>
 800a462:	e105      	b.n	800a670 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	0151      	lsls	r1, r2, #5
 800a476:	69fa      	ldr	r2, [r7, #28]
 800a478:	440a      	add	r2, r1
 800a47a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a47e:	0cdb      	lsrs	r3, r3, #19
 800a480:	04db      	lsls	r3, r3, #19
 800a482:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	0151      	lsls	r1, r2, #5
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	440a      	add	r2, r1
 800a49a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a49e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a4a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a4a6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d132      	bne.n	800a514 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d003      	beq.n	800a4be <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4dc:	69b9      	ldr	r1, [r7, #24]
 800a4de:	0148      	lsls	r0, r1, #5
 800a4e0:	69f9      	ldr	r1, [r7, #28]
 800a4e2:	4401      	add	r1, r0
 800a4e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	0151      	lsls	r1, r2, #5
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	440a      	add	r2, r1
 800a502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a506:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a50a:	6113      	str	r3, [r2, #16]
 800a50c:	e062      	b.n	800a5d4 <USB_EPStartXfer+0x490>
 800a50e:	bf00      	nop
 800a510:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d123      	bne.n	800a564 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a528:	691a      	ldr	r2, [r3, #16]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a532:	69b9      	ldr	r1, [r7, #24]
 800a534:	0148      	lsls	r0, r1, #5
 800a536:	69f9      	ldr	r1, [r7, #28]
 800a538:	4401      	add	r1, r0
 800a53a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a53e:	4313      	orrs	r3, r2
 800a540:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	0151      	lsls	r1, r2, #5
 800a554:	69fa      	ldr	r2, [r7, #28]
 800a556:	440a      	add	r2, r1
 800a558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a55c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a560:	6113      	str	r3, [r2, #16]
 800a562:	e037      	b.n	800a5d4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	691a      	ldr	r2, [r3, #16]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	4413      	add	r3, r2
 800a56e:	1e5a      	subs	r2, r3, #1
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	fbb2 f3f3 	udiv	r3, r2, r3
 800a578:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	8afa      	ldrh	r2, [r7, #22]
 800a580:	fb03 f202 	mul.w	r2, r3, r2
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	8afb      	ldrh	r3, [r7, #22]
 800a598:	04d9      	lsls	r1, r3, #19
 800a59a:	4b38      	ldr	r3, [pc, #224]	@ (800a67c <USB_EPStartXfer+0x538>)
 800a59c:	400b      	ands	r3, r1
 800a59e:	69b9      	ldr	r1, [r7, #24]
 800a5a0:	0148      	lsls	r0, r1, #5
 800a5a2:	69f9      	ldr	r1, [r7, #28]
 800a5a4:	4401      	add	r1, r0
 800a5a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5c4:	69b9      	ldr	r1, [r7, #24]
 800a5c6:	0148      	lsls	r0, r1, #5
 800a5c8:	69f9      	ldr	r1, [r7, #28]
 800a5ca:	4401      	add	r1, r0
 800a5cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d10d      	bne.n	800a5f6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d009      	beq.n	800a5f6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	68d9      	ldr	r1, [r3, #12]
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f2:	460a      	mov	r2, r1
 800a5f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	791b      	ldrb	r3, [r3, #4]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d128      	bne.n	800a650 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d110      	bne.n	800a630 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	0151      	lsls	r1, r2, #5
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	440a      	add	r2, r1
 800a624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a628:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	e00f      	b.n	800a650 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	0151      	lsls	r1, r2, #5
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	440a      	add	r2, r1
 800a646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a64a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a64e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	440a      	add	r2, r1
 800a666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a66e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3720      	adds	r7, #32
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	1ff80000 	.word	0x1ff80000

0800a680 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d14a      	bne.n	800a734 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6b6:	f040 8086 	bne.w	800a7c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	7812      	ldrb	r2, [r2, #0]
 800a6ce:	0151      	lsls	r1, r2, #5
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	7812      	ldrb	r2, [r2, #0]
 800a6f2:	0151      	lsls	r1, r2, #5
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	440a      	add	r2, r1
 800a6f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a700:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3301      	adds	r3, #1
 800a706:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a70e:	4293      	cmp	r3, r2
 800a710:	d902      	bls.n	800a718 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	75fb      	strb	r3, [r7, #23]
          break;
 800a716:	e056      	b.n	800a7c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a72c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a730:	d0e7      	beq.n	800a702 <USB_EPStopXfer+0x82>
 800a732:	e048      	b.n	800a7c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a74c:	d13b      	bne.n	800a7c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	7812      	ldrb	r2, [r2, #0]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a76c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a770:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	7812      	ldrb	r2, [r2, #0]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a794:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d902      	bls.n	800a7ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a7aa:	e00c      	b.n	800a7c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7c4:	d0e7      	beq.n	800a796 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b089      	sub	sp, #36	@ 0x24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	4611      	mov	r1, r2
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	71fb      	strb	r3, [r7, #7]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a7f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d123      	bne.n	800a842 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7fa:	88bb      	ldrh	r3, [r7, #4]
 800a7fc:	3303      	adds	r3, #3
 800a7fe:	089b      	lsrs	r3, r3, #2
 800a800:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a802:	2300      	movs	r3, #0
 800a804:	61bb      	str	r3, [r7, #24]
 800a806:	e018      	b.n	800a83a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	031a      	lsls	r2, r3, #12
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a814:	461a      	mov	r2, r3
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	3301      	adds	r3, #1
 800a820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	3301      	adds	r3, #1
 800a826:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	3301      	adds	r3, #1
 800a82c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	3301      	adds	r3, #1
 800a832:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	3301      	adds	r3, #1
 800a838:	61bb      	str	r3, [r7, #24]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d3e2      	bcc.n	800a808 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3724      	adds	r7, #36	@ 0x24
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a850:	b480      	push	{r7}
 800a852:	b08b      	sub	sp, #44	@ 0x2c
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	4613      	mov	r3, r2
 800a85c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	089b      	lsrs	r3, r3, #2
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a86e:	88fb      	ldrh	r3, [r7, #6]
 800a870:	f003 0303 	and.w	r3, r3, #3
 800a874:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a876:	2300      	movs	r3, #0
 800a878:	623b      	str	r3, [r7, #32]
 800a87a:	e014      	b.n	800a8a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a886:	601a      	str	r2, [r3, #0]
    pDest++;
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	3301      	adds	r3, #1
 800a88c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a890:	3301      	adds	r3, #1
 800a892:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	3301      	adds	r3, #1
 800a898:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89c:	3301      	adds	r3, #1
 800a89e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	623b      	str	r3, [r7, #32]
 800a8a6:	6a3a      	ldr	r2, [r7, #32]
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d3e6      	bcc.n	800a87c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8ae:	8bfb      	ldrh	r3, [r7, #30]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01e      	beq.n	800a8f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f107 0310 	add.w	r3, r7, #16
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	701a      	strb	r2, [r3, #0]
      i++;
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a8e6:	8bfb      	ldrh	r3, [r7, #30]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8ec:	8bfb      	ldrh	r3, [r7, #30]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1ea      	bne.n	800a8c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	372c      	adds	r7, #44	@ 0x2c
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	785b      	ldrb	r3, [r3, #1]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d12c      	bne.n	800a976 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	db12      	blt.n	800a954 <USB_EPSetStall+0x54>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00f      	beq.n	800a954 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	0151      	lsls	r1, r2, #5
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	440a      	add	r2, r1
 800a94a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a94e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a952:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	0151      	lsls	r1, r2, #5
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	440a      	add	r2, r1
 800a96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a96e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	e02b      	b.n	800a9ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	015a      	lsls	r2, r3, #5
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	db12      	blt.n	800a9ae <USB_EPSetStall+0xae>
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00f      	beq.n	800a9ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	0151      	lsls	r1, r2, #5
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	440a      	add	r2, r1
 800a9a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	0151      	lsls	r1, r2, #5
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	440a      	add	r2, r1
 800a9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d128      	bne.n	800aa4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	0151      	lsls	r1, r2, #5
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	440a      	add	r2, r1
 800aa0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	791b      	ldrb	r3, [r3, #4]
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d003      	beq.n	800aa28 <USB_EPClearStall+0x4c>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	791b      	ldrb	r3, [r3, #4]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d138      	bne.n	800aa9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	0151      	lsls	r1, r2, #5
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	440a      	add	r2, r1
 800aa3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	e027      	b.n	800aa9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	015a      	lsls	r2, r3, #5
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4413      	add	r3, r2
 800aa52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	0151      	lsls	r1, r2, #5
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	440a      	add	r2, r1
 800aa60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	791b      	ldrb	r3, [r3, #4]
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d003      	beq.n	800aa7a <USB_EPClearStall+0x9e>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	791b      	ldrb	r3, [r3, #4]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d10f      	bne.n	800aa9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	0151      	lsls	r1, r2, #5
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	440a      	add	r2, r1
 800aa90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aac6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aaca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	78fb      	ldrb	r3, [r7, #3]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aadc:	68f9      	ldr	r1, [r7, #12]
 800aade:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aae2:	4313      	orrs	r3, r2
 800aae4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab22:	f023 0302 	bic.w	r3, r3, #2
 800ab26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab50:	f023 0303 	bic.w	r3, r3, #3
 800ab54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab64:	f043 0302 	orr.w	r3, r3, #2
 800ab68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab90:	68fb      	ldr	r3, [r7, #12]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b085      	sub	sp, #20
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	4013      	ands	r3, r2
 800abc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	0c1b      	lsrs	r3, r3, #16
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b085      	sub	sp, #20
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	4013      	ands	r3, r2
 800abf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	b29b      	uxth	r3, r3
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b085      	sub	sp, #20
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4013      	ands	r3, r2
 800ac32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac34:	68bb      	ldr	r3, [r7, #8]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b087      	sub	sp, #28
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	f003 030f 	and.w	r3, r3, #15
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac72:	01db      	lsls	r3, r3, #7
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac90:	68bb      	ldr	r3, [r7, #8]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f003 0301 	and.w	r3, r3, #1
}
 800acae:	4618      	mov	r0, r3
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800acba:	b480      	push	{r7}
 800acbc:	b085      	sub	sp, #20
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acd4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800acd8:	f023 0307 	bic.w	r3, r3, #7
 800acdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	333c      	adds	r3, #60	@ 0x3c
 800ad16:	3304      	adds	r3, #4
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	4a26      	ldr	r2, [pc, #152]	@ (800adb8 <USB_EP0_OutStart+0xb8>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d90a      	bls.n	800ad3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad34:	d101      	bne.n	800ad3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	e037      	b.n	800adaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad40:	461a      	mov	r2, r3
 800ad42:	2300      	movs	r3, #0
 800ad44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad68:	f043 0318 	orr.w	r3, r3, #24
 800ad6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad7c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ad80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad82:	7afb      	ldrb	r3, [r7, #11]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d10f      	bne.n	800ada8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8e:	461a      	mov	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ada2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ada6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	4f54300a 	.word	0x4f54300a

0800adbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3301      	adds	r3, #1
 800adcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800add4:	d901      	bls.n	800adda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800add6:	2303      	movs	r3, #3
 800add8:	e022      	b.n	800ae20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	daf2      	bge.n	800adc8 <USB_CoreReset+0xc>

  count = 10U;
 800ade2:	230a      	movs	r3, #10
 800ade4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ade6:	e002      	b.n	800adee <USB_CoreReset+0x32>
  {
    count--;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3b01      	subs	r3, #1
 800adec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1f9      	bne.n	800ade8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	f043 0201 	orr.w	r2, r3, #1
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	3301      	adds	r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae0c:	d901      	bls.n	800ae12 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e006      	b.n	800ae20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d0f0      	beq.n	800ae00 <USB_CoreReset+0x44>

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ae3c:	f002 fd20 	bl	800d880 <USBD_static_malloc>
 800ae40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	32b0      	adds	r2, #176	@ 0xb0
 800ae52:	2100      	movs	r1, #0
 800ae54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae58:	2302      	movs	r3, #2
 800ae5a:	e0d4      	b.n	800b006 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ae60:	2100      	movs	r1, #0
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f002 fe28 	bl	800dab8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	32b0      	adds	r2, #176	@ 0xb0
 800ae72:	68f9      	ldr	r1, [r7, #12]
 800ae74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	32b0      	adds	r2, #176	@ 0xb0
 800ae82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	7c1b      	ldrb	r3, [r3, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d138      	bne.n	800af06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae94:	4b5e      	ldr	r3, [pc, #376]	@ (800b010 <USBD_CDC_Init+0x1e4>)
 800ae96:	7819      	ldrb	r1, [r3, #0]
 800ae98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f002 fbcb 	bl	800d63a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aea4:	4b5a      	ldr	r3, [pc, #360]	@ (800b010 <USBD_CDC_Init+0x1e4>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	f003 020f 	and.w	r2, r3, #15
 800aeac:	6879      	ldr	r1, [r7, #4]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	440b      	add	r3, r1
 800aeb8:	3323      	adds	r3, #35	@ 0x23
 800aeba:	2201      	movs	r2, #1
 800aebc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aebe:	4b55      	ldr	r3, [pc, #340]	@ (800b014 <USBD_CDC_Init+0x1e8>)
 800aec0:	7819      	ldrb	r1, [r3, #0]
 800aec2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aec6:	2202      	movs	r2, #2
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f002 fbb6 	bl	800d63a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aece:	4b51      	ldr	r3, [pc, #324]	@ (800b014 <USBD_CDC_Init+0x1e8>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	f003 020f 	and.w	r2, r3, #15
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	440b      	add	r3, r1
 800aee2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800aee6:	2201      	movs	r2, #1
 800aee8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aeea:	4b4b      	ldr	r3, [pc, #300]	@ (800b018 <USBD_CDC_Init+0x1ec>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f003 020f 	and.w	r2, r3, #15
 800aef2:	6879      	ldr	r1, [r7, #4]
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	440b      	add	r3, r1
 800aefe:	331c      	adds	r3, #28
 800af00:	2210      	movs	r2, #16
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	e035      	b.n	800af72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af06:	4b42      	ldr	r3, [pc, #264]	@ (800b010 <USBD_CDC_Init+0x1e4>)
 800af08:	7819      	ldrb	r1, [r3, #0]
 800af0a:	2340      	movs	r3, #64	@ 0x40
 800af0c:	2202      	movs	r2, #2
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f002 fb93 	bl	800d63a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af14:	4b3e      	ldr	r3, [pc, #248]	@ (800b010 <USBD_CDC_Init+0x1e4>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 020f 	and.w	r2, r3, #15
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	4613      	mov	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	440b      	add	r3, r1
 800af28:	3323      	adds	r3, #35	@ 0x23
 800af2a:	2201      	movs	r2, #1
 800af2c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af2e:	4b39      	ldr	r3, [pc, #228]	@ (800b014 <USBD_CDC_Init+0x1e8>)
 800af30:	7819      	ldrb	r1, [r3, #0]
 800af32:	2340      	movs	r3, #64	@ 0x40
 800af34:	2202      	movs	r2, #2
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f002 fb7f 	bl	800d63a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af3c:	4b35      	ldr	r3, [pc, #212]	@ (800b014 <USBD_CDC_Init+0x1e8>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 020f 	and.w	r2, r3, #15
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	440b      	add	r3, r1
 800af50:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800af54:	2201      	movs	r2, #1
 800af56:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af58:	4b2f      	ldr	r3, [pc, #188]	@ (800b018 <USBD_CDC_Init+0x1ec>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 020f 	and.w	r2, r3, #15
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	4613      	mov	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	440b      	add	r3, r1
 800af6c:	331c      	adds	r3, #28
 800af6e:	2210      	movs	r2, #16
 800af70:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af72:	4b29      	ldr	r3, [pc, #164]	@ (800b018 <USBD_CDC_Init+0x1ec>)
 800af74:	7819      	ldrb	r1, [r3, #0]
 800af76:	2308      	movs	r3, #8
 800af78:	2203      	movs	r2, #3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f002 fb5d 	bl	800d63a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af80:	4b25      	ldr	r3, [pc, #148]	@ (800b018 <USBD_CDC_Init+0x1ec>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 020f 	and.w	r2, r3, #15
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	3323      	adds	r3, #35	@ 0x23
 800af96:	2201      	movs	r2, #1
 800af98:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	33b0      	adds	r3, #176	@ 0xb0
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800afd0:	2302      	movs	r3, #2
 800afd2:	e018      	b.n	800b006 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7c1b      	ldrb	r3, [r3, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afdc:	4b0d      	ldr	r3, [pc, #52]	@ (800b014 <USBD_CDC_Init+0x1e8>)
 800afde:	7819      	ldrb	r1, [r3, #0]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f002 fc14 	bl	800d818 <USBD_LL_PrepareReceive>
 800aff0:	e008      	b.n	800b004 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aff2:	4b08      	ldr	r3, [pc, #32]	@ (800b014 <USBD_CDC_Init+0x1e8>)
 800aff4:	7819      	ldrb	r1, [r3, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800affc:	2340      	movs	r3, #64	@ 0x40
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f002 fc0a 	bl	800d818 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20000097 	.word	0x20000097
 800b014:	20000098 	.word	0x20000098
 800b018:	20000099 	.word	0x20000099

0800b01c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b028:	4b3a      	ldr	r3, [pc, #232]	@ (800b114 <USBD_CDC_DeInit+0xf8>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f002 fb29 	bl	800d686 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b034:	4b37      	ldr	r3, [pc, #220]	@ (800b114 <USBD_CDC_DeInit+0xf8>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	f003 020f 	and.w	r2, r3, #15
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	440b      	add	r3, r1
 800b048:	3323      	adds	r3, #35	@ 0x23
 800b04a:	2200      	movs	r2, #0
 800b04c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b04e:	4b32      	ldr	r3, [pc, #200]	@ (800b118 <USBD_CDC_DeInit+0xfc>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f002 fb16 	bl	800d686 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b05a:	4b2f      	ldr	r3, [pc, #188]	@ (800b118 <USBD_CDC_DeInit+0xfc>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	f003 020f 	and.w	r2, r3, #15
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b076:	4b29      	ldr	r3, [pc, #164]	@ (800b11c <USBD_CDC_DeInit+0x100>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f002 fb02 	bl	800d686 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b082:	4b26      	ldr	r3, [pc, #152]	@ (800b11c <USBD_CDC_DeInit+0x100>)
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	f003 020f 	and.w	r2, r3, #15
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	440b      	add	r3, r1
 800b096:	3323      	adds	r3, #35	@ 0x23
 800b098:	2200      	movs	r2, #0
 800b09a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b09c:	4b1f      	ldr	r3, [pc, #124]	@ (800b11c <USBD_CDC_DeInit+0x100>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	f003 020f 	and.w	r2, r3, #15
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	331c      	adds	r3, #28
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	32b0      	adds	r2, #176	@ 0xb0
 800b0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01f      	beq.n	800b108 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	33b0      	adds	r3, #176	@ 0xb0
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	32b0      	adds	r2, #176	@ 0xb0
 800b0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f002 fbd6 	bl	800d89c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	32b0      	adds	r2, #176	@ 0xb0
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	20000097 	.word	0x20000097
 800b118:	20000098 	.word	0x20000098
 800b11c:	20000099 	.word	0x20000099

0800b120 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	32b0      	adds	r2, #176	@ 0xb0
 800b134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b138:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b13e:	2300      	movs	r3, #0
 800b140:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e0bf      	b.n	800b2d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d050      	beq.n	800b1fe <USBD_CDC_Setup+0xde>
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	f040 80af 	bne.w	800b2c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	88db      	ldrh	r3, [r3, #6]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d03a      	beq.n	800b1e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	b25b      	sxtb	r3, r3
 800b170:	2b00      	cmp	r3, #0
 800b172:	da1b      	bge.n	800b1ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	33b0      	adds	r3, #176	@ 0xb0
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4413      	add	r3, r2
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b18a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	88d2      	ldrh	r2, [r2, #6]
 800b190:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	88db      	ldrh	r3, [r3, #6]
 800b196:	2b07      	cmp	r3, #7
 800b198:	bf28      	it	cs
 800b19a:	2307      	movcs	r3, #7
 800b19c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	89fa      	ldrh	r2, [r7, #14]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fda9 	bl	800ccfc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b1aa:	e090      	b.n	800b2ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	785a      	ldrb	r2, [r3, #1]
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	88db      	ldrh	r3, [r3, #6]
 800b1ba:	2b3f      	cmp	r3, #63	@ 0x3f
 800b1bc:	d803      	bhi.n	800b1c6 <USBD_CDC_Setup+0xa6>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	88db      	ldrh	r3, [r3, #6]
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	e000      	b.n	800b1c8 <USBD_CDC_Setup+0xa8>
 800b1c6:	2240      	movs	r2, #64	@ 0x40
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1ce:	6939      	ldr	r1, [r7, #16]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 fdbe 	bl	800cd5a <USBD_CtlPrepareRx>
      break;
 800b1de:	e076      	b.n	800b2ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	33b0      	adds	r3, #176	@ 0xb0
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	7850      	ldrb	r0, [r2, #1]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	4798      	blx	r3
      break;
 800b1fc:	e067      	b.n	800b2ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	785b      	ldrb	r3, [r3, #1]
 800b202:	2b0b      	cmp	r3, #11
 800b204:	d851      	bhi.n	800b2aa <USBD_CDC_Setup+0x18a>
 800b206:	a201      	add	r2, pc, #4	@ (adr r2, 800b20c <USBD_CDC_Setup+0xec>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b23d 	.word	0x0800b23d
 800b210:	0800b2b9 	.word	0x0800b2b9
 800b214:	0800b2ab 	.word	0x0800b2ab
 800b218:	0800b2ab 	.word	0x0800b2ab
 800b21c:	0800b2ab 	.word	0x0800b2ab
 800b220:	0800b2ab 	.word	0x0800b2ab
 800b224:	0800b2ab 	.word	0x0800b2ab
 800b228:	0800b2ab 	.word	0x0800b2ab
 800b22c:	0800b2ab 	.word	0x0800b2ab
 800b230:	0800b2ab 	.word	0x0800b2ab
 800b234:	0800b267 	.word	0x0800b267
 800b238:	0800b291 	.word	0x0800b291
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b03      	cmp	r3, #3
 800b246:	d107      	bne.n	800b258 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b248:	f107 030a 	add.w	r3, r7, #10
 800b24c:	2202      	movs	r2, #2
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 fd53 	bl	800ccfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b256:	e032      	b.n	800b2be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f001 fcd1 	bl	800cc02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b260:	2303      	movs	r3, #3
 800b262:	75fb      	strb	r3, [r7, #23]
          break;
 800b264:	e02b      	b.n	800b2be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d107      	bne.n	800b282 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b272:	f107 030d 	add.w	r3, r7, #13
 800b276:	2201      	movs	r2, #1
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 fd3e 	bl	800ccfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b280:	e01d      	b.n	800b2be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f001 fcbc 	bl	800cc02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b28a:	2303      	movs	r3, #3
 800b28c:	75fb      	strb	r3, [r7, #23]
          break;
 800b28e:	e016      	b.n	800b2be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d00f      	beq.n	800b2bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f001 fcaf 	bl	800cc02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b2a8:	e008      	b.n	800b2bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 fca8 	bl	800cc02 <USBD_CtlError>
          ret = USBD_FAIL;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2b6:	e002      	b.n	800b2be <USBD_CDC_Setup+0x19e>
          break;
 800b2b8:	bf00      	nop
 800b2ba:	e008      	b.n	800b2ce <USBD_CDC_Setup+0x1ae>
          break;
 800b2bc:	bf00      	nop
      }
      break;
 800b2be:	e006      	b.n	800b2ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 fc9d 	bl	800cc02 <USBD_CtlError>
      ret = USBD_FAIL;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b2cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	32b0      	adds	r2, #176	@ 0xb0
 800b2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e065      	b.n	800b3ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	32b0      	adds	r2, #176	@ 0xb0
 800b30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b310:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b312:	78fb      	ldrb	r3, [r7, #3]
 800b314:	f003 020f 	and.w	r2, r3, #15
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	3314      	adds	r3, #20
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d02f      	beq.n	800b38c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	f003 020f 	and.w	r2, r3, #15
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	4613      	mov	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	440b      	add	r3, r1
 800b33e:	3314      	adds	r3, #20
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	78fb      	ldrb	r3, [r7, #3]
 800b344:	f003 010f 	and.w	r1, r3, #15
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	460b      	mov	r3, r1
 800b34c:	00db      	lsls	r3, r3, #3
 800b34e:	440b      	add	r3, r1
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4403      	add	r3, r0
 800b354:	331c      	adds	r3, #28
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	fbb2 f1f3 	udiv	r1, r2, r3
 800b35c:	fb01 f303 	mul.w	r3, r1, r3
 800b360:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b362:	2b00      	cmp	r3, #0
 800b364:	d112      	bne.n	800b38c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b366:	78fb      	ldrb	r3, [r7, #3]
 800b368:	f003 020f 	and.w	r2, r3, #15
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4613      	mov	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	440b      	add	r3, r1
 800b378:	3314      	adds	r3, #20
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b37e:	78f9      	ldrb	r1, [r7, #3]
 800b380:	2300      	movs	r3, #0
 800b382:	2200      	movs	r2, #0
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f002 fa26 	bl	800d7d6 <USBD_LL_Transmit>
 800b38a:	e01f      	b.n	800b3cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2200      	movs	r2, #0
 800b390:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	33b0      	adds	r3, #176	@ 0xb0
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d010      	beq.n	800b3cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	33b0      	adds	r3, #176	@ 0xb0
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b3c8:	78fa      	ldrb	r2, [r7, #3]
 800b3ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	32b0      	adds	r2, #176	@ 0xb0
 800b3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	32b0      	adds	r2, #176	@ 0xb0
 800b3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b404:	2303      	movs	r3, #3
 800b406:	e01a      	b.n	800b43e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f002 fa24 	bl	800d85a <USBD_LL_GetRxDataSize>
 800b412:	4602      	mov	r2, r0
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	33b0      	adds	r3, #176	@ 0xb0
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b438:	4611      	mov	r1, r2
 800b43a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b084      	sub	sp, #16
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	32b0      	adds	r2, #176	@ 0xb0
 800b458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b45c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b464:	2303      	movs	r3, #3
 800b466:	e024      	b.n	800b4b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	33b0      	adds	r3, #176	@ 0xb0
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d019      	beq.n	800b4b0 <USBD_CDC_EP0_RxReady+0x6a>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b482:	2bff      	cmp	r3, #255	@ 0xff
 800b484:	d014      	beq.n	800b4b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	33b0      	adds	r3, #176	@ 0xb0
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b49e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	22ff      	movs	r2, #255	@ 0xff
 800b4ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4c4:	2182      	movs	r1, #130	@ 0x82
 800b4c6:	4818      	ldr	r0, [pc, #96]	@ (800b528 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4c8:	f000 fd62 	bl	800bf90 <USBD_GetEpDesc>
 800b4cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	4815      	ldr	r0, [pc, #84]	@ (800b528 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4d2:	f000 fd5d 	bl	800bf90 <USBD_GetEpDesc>
 800b4d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4d8:	2181      	movs	r1, #129	@ 0x81
 800b4da:	4813      	ldr	r0, [pc, #76]	@ (800b528 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4dc:	f000 fd58 	bl	800bf90 <USBD_GetEpDesc>
 800b4e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2210      	movs	r2, #16
 800b4ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d006      	beq.n	800b502 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4fc:	711a      	strb	r2, [r3, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d006      	beq.n	800b516 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b510:	711a      	strb	r2, [r3, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2243      	movs	r2, #67	@ 0x43
 800b51a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b51c:	4b02      	ldr	r3, [pc, #8]	@ (800b528 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	20000054 	.word	0x20000054

0800b52c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b534:	2182      	movs	r1, #130	@ 0x82
 800b536:	4818      	ldr	r0, [pc, #96]	@ (800b598 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b538:	f000 fd2a 	bl	800bf90 <USBD_GetEpDesc>
 800b53c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b53e:	2101      	movs	r1, #1
 800b540:	4815      	ldr	r0, [pc, #84]	@ (800b598 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b542:	f000 fd25 	bl	800bf90 <USBD_GetEpDesc>
 800b546:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b548:	2181      	movs	r1, #129	@ 0x81
 800b54a:	4813      	ldr	r0, [pc, #76]	@ (800b598 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b54c:	f000 fd20 	bl	800bf90 <USBD_GetEpDesc>
 800b550:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	2210      	movs	r2, #16
 800b55c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d006      	beq.n	800b572 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	2200      	movs	r2, #0
 800b568:	711a      	strb	r2, [r3, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f042 0202 	orr.w	r2, r2, #2
 800b570:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d006      	beq.n	800b586 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	711a      	strb	r2, [r3, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f042 0202 	orr.w	r2, r2, #2
 800b584:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2243      	movs	r2, #67	@ 0x43
 800b58a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b58c:	4b02      	ldr	r3, [pc, #8]	@ (800b598 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20000054 	.word	0x20000054

0800b59c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5a4:	2182      	movs	r1, #130	@ 0x82
 800b5a6:	4818      	ldr	r0, [pc, #96]	@ (800b608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5a8:	f000 fcf2 	bl	800bf90 <USBD_GetEpDesc>
 800b5ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	4815      	ldr	r0, [pc, #84]	@ (800b608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5b2:	f000 fced 	bl	800bf90 <USBD_GetEpDesc>
 800b5b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5b8:	2181      	movs	r1, #129	@ 0x81
 800b5ba:	4813      	ldr	r0, [pc, #76]	@ (800b608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5bc:	f000 fce8 	bl	800bf90 <USBD_GetEpDesc>
 800b5c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2210      	movs	r2, #16
 800b5cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d006      	beq.n	800b5e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5dc:	711a      	strb	r2, [r3, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d006      	beq.n	800b5f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5f0:	711a      	strb	r2, [r3, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2243      	movs	r2, #67	@ 0x43
 800b5fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5fc:	4b02      	ldr	r3, [pc, #8]	@ (800b608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20000054 	.word	0x20000054

0800b60c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	220a      	movs	r2, #10
 800b618:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b61a:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	20000010 	.word	0x20000010

0800b62c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e009      	b.n	800b654 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	33b0      	adds	r3, #176	@ 0xb0
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	32b0      	adds	r2, #176	@ 0xb0
 800b676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b682:	2303      	movs	r3, #3
 800b684:	e008      	b.n	800b698 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	371c      	adds	r7, #28
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	32b0      	adds	r2, #176	@ 0xb0
 800b6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e004      	b.n	800b6d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	32b0      	adds	r2, #176	@ 0xb0
 800b6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b702:	2303      	movs	r3, #3
 800b704:	e025      	b.n	800b752 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d11f      	bne.n	800b750 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2201      	movs	r2, #1
 800b714:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b718:	4b10      	ldr	r3, [pc, #64]	@ (800b75c <USBD_CDC_TransmitPacket+0x7c>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	f003 020f 	and.w	r2, r3, #15
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	4613      	mov	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4403      	add	r3, r0
 800b732:	3314      	adds	r3, #20
 800b734:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b736:	4b09      	ldr	r3, [pc, #36]	@ (800b75c <USBD_CDC_TransmitPacket+0x7c>)
 800b738:	7819      	ldrb	r1, [r3, #0]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f002 f845 	bl	800d7d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20000097 	.word	0x20000097

0800b760 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	32b0      	adds	r2, #176	@ 0xb0
 800b772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b776:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	32b0      	adds	r2, #176	@ 0xb0
 800b782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e018      	b.n	800b7c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	7c1b      	ldrb	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10a      	bne.n	800b7ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b796:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c8 <USBD_CDC_ReceivePacket+0x68>)
 800b798:	7819      	ldrb	r1, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f002 f837 	bl	800d818 <USBD_LL_PrepareReceive>
 800b7aa:	e008      	b.n	800b7be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7ac:	4b06      	ldr	r3, [pc, #24]	@ (800b7c8 <USBD_CDC_ReceivePacket+0x68>)
 800b7ae:	7819      	ldrb	r1, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7b6:	2340      	movs	r3, #64	@ 0x40
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f002 f82d 	bl	800d818 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	20000098 	.word	0x20000098

0800b7cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e01f      	b.n	800b824 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	79fa      	ldrb	r2, [r7, #7]
 800b816:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f001 fea7 	bl	800d56c <USBD_LL_Init>
 800b81e:	4603      	mov	r3, r0
 800b820:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b822:	7dfb      	ldrb	r3, [r7, #23]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d101      	bne.n	800b844 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b840:	2303      	movs	r3, #3
 800b842:	e025      	b.n	800b890 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32ae      	adds	r2, #174	@ 0xae
 800b856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00f      	beq.n	800b880 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	32ae      	adds	r2, #174	@ 0xae
 800b86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	f107 020e 	add.w	r2, r7, #14
 800b874:	4610      	mov	r0, r2
 800b876:	4798      	blx	r3
 800b878:	4602      	mov	r2, r0
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f001 feaf 	bl	800d604 <USBD_LL_Start>
 800b8a6:	4603      	mov	r3, r0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d009      	beq.n	800b8f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	78fa      	ldrb	r2, [r7, #3]
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	4798      	blx	r3
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	78fa      	ldrb	r2, [r7, #3]
 800b918:	4611      	mov	r1, r2
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	4798      	blx	r3
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b924:	2303      	movs	r3, #3
 800b926:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b928:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	4618      	mov	r0, r3
 800b946:	f001 f922 	bl	800cb8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b958:	461a      	mov	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b966:	f003 031f 	and.w	r3, r3, #31
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d01a      	beq.n	800b9a4 <USBD_LL_SetupStage+0x72>
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d822      	bhi.n	800b9b8 <USBD_LL_SetupStage+0x86>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <USBD_LL_SetupStage+0x4a>
 800b976:	2b01      	cmp	r3, #1
 800b978:	d00a      	beq.n	800b990 <USBD_LL_SetupStage+0x5e>
 800b97a:	e01d      	b.n	800b9b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fb77 	bl	800c078 <USBD_StdDevReq>
 800b98a:	4603      	mov	r3, r0
 800b98c:	73fb      	strb	r3, [r7, #15]
      break;
 800b98e:	e020      	b.n	800b9d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fbdf 	bl	800c15c <USBD_StdItfReq>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a2:	e016      	b.n	800b9d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fc41 	bl	800c234 <USBD_StdEPReq>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b6:	e00c      	b.n	800b9d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 fe7c 	bl	800d6c4 <USBD_LL_StallEP>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b9d0:	bf00      	nop
  }

  return ret;
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b9ee:	7afb      	ldrb	r3, [r7, #11]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d177      	bne.n	800bae4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b9fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	f040 80a1 	bne.w	800bb4a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	8992      	ldrh	r2, [r2, #12]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d91c      	bls.n	800ba4e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	8992      	ldrh	r2, [r2, #12]
 800ba1c:	1a9a      	subs	r2, r3, r2
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	8992      	ldrh	r2, [r2, #12]
 800ba2a:	441a      	add	r2, r3
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	6919      	ldr	r1, [r3, #16]
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	899b      	ldrh	r3, [r3, #12]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	bf38      	it	cc
 800ba42:	4613      	movcc	r3, r2
 800ba44:	461a      	mov	r2, r3
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f001 f9a8 	bl	800cd9c <USBD_CtlContinueRx>
 800ba4c:	e07d      	b.n	800bb4a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba54:	f003 031f 	and.w	r3, r3, #31
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d014      	beq.n	800ba86 <USBD_LL_DataOutStage+0xaa>
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d81d      	bhi.n	800ba9c <USBD_LL_DataOutStage+0xc0>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <USBD_LL_DataOutStage+0x8e>
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d003      	beq.n	800ba70 <USBD_LL_DataOutStage+0x94>
 800ba68:	e018      	b.n	800ba9c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	75bb      	strb	r3, [r7, #22]
            break;
 800ba6e:	e018      	b.n	800baa2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 fa6e 	bl	800bf5c <USBD_CoreFindIF>
 800ba80:	4603      	mov	r3, r0
 800ba82:	75bb      	strb	r3, [r7, #22]
            break;
 800ba84:	e00d      	b.n	800baa2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	4619      	mov	r1, r3
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fa70 	bl	800bf76 <USBD_CoreFindEP>
 800ba96:	4603      	mov	r3, r0
 800ba98:	75bb      	strb	r3, [r7, #22]
            break;
 800ba9a:	e002      	b.n	800baa2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	75bb      	strb	r3, [r7, #22]
            break;
 800baa0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800baa2:	7dbb      	ldrb	r3, [r7, #22]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d119      	bne.n	800badc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d113      	bne.n	800badc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bab4:	7dba      	ldrb	r2, [r7, #22]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	32ae      	adds	r2, #174	@ 0xae
 800baba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00b      	beq.n	800badc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bac4:	7dba      	ldrb	r2, [r7, #22]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bacc:	7dba      	ldrb	r2, [r7, #22]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	32ae      	adds	r2, #174	@ 0xae
 800bad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f001 f96e 	bl	800cdbe <USBD_CtlSendStatus>
 800bae2:	e032      	b.n	800bb4a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bae4:	7afb      	ldrb	r3, [r7, #11]
 800bae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baea:	b2db      	uxtb	r3, r3
 800baec:	4619      	mov	r1, r3
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 fa41 	bl	800bf76 <USBD_CoreFindEP>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baf8:	7dbb      	ldrb	r3, [r7, #22]
 800bafa:	2bff      	cmp	r3, #255	@ 0xff
 800bafc:	d025      	beq.n	800bb4a <USBD_LL_DataOutStage+0x16e>
 800bafe:	7dbb      	ldrb	r3, [r7, #22]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d122      	bne.n	800bb4a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d117      	bne.n	800bb40 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb10:	7dba      	ldrb	r2, [r7, #22]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	32ae      	adds	r2, #174	@ 0xae
 800bb16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00f      	beq.n	800bb40 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bb20:	7dba      	ldrb	r2, [r7, #22]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb28:	7dba      	ldrb	r2, [r7, #22]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	32ae      	adds	r2, #174	@ 0xae
 800bb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	7afa      	ldrb	r2, [r7, #11]
 800bb36:	4611      	mov	r1, r2
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	4798      	blx	r3
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
 800bb48:	e000      	b.n	800bb4c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d178      	bne.n	800bc5a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	3314      	adds	r3, #20
 800bb6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d163      	bne.n	800bc40 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	8992      	ldrh	r2, [r2, #12]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d91c      	bls.n	800bbbe <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	8992      	ldrh	r2, [r2, #12]
 800bb8c:	1a9a      	subs	r2, r3, r2
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	8992      	ldrh	r2, [r2, #12]
 800bb9a:	441a      	add	r2, r3
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6919      	ldr	r1, [r3, #16]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f001 f8c4 	bl	800cd38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f001 fe2e 	bl	800d818 <USBD_LL_PrepareReceive>
 800bbbc:	e040      	b.n	800bc40 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	899b      	ldrh	r3, [r3, #12]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d11c      	bne.n	800bc06 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d316      	bcc.n	800bc06 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d20f      	bcs.n	800bc06 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2100      	movs	r1, #0
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f001 f8a4 	bl	800cd38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f001 fe0a 	bl	800d818 <USBD_LL_PrepareReceive>
 800bc04:	e01c      	b.n	800bc40 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d10f      	bne.n	800bc32 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d009      	beq.n	800bc32 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc32:	2180      	movs	r1, #128	@ 0x80
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f001 fd45 	bl	800d6c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f001 f8d2 	bl	800cde4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d03a      	beq.n	800bcc0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f7ff fe30 	bl	800b8b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc58:	e032      	b.n	800bcc0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc5a:	7afb      	ldrb	r3, [r7, #11]
 800bc5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	4619      	mov	r1, r3
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 f986 	bl	800bf76 <USBD_CoreFindEP>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc6e:	7dfb      	ldrb	r3, [r7, #23]
 800bc70:	2bff      	cmp	r3, #255	@ 0xff
 800bc72:	d025      	beq.n	800bcc0 <USBD_LL_DataInStage+0x16c>
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d122      	bne.n	800bcc0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d11c      	bne.n	800bcc0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bc86:	7dfa      	ldrb	r2, [r7, #23]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	32ae      	adds	r2, #174	@ 0xae
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d014      	beq.n	800bcc0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800bc96:	7dfa      	ldrb	r2, [r7, #23]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc9e:	7dfa      	ldrb	r2, [r7, #23]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	32ae      	adds	r2, #174	@ 0xae
 800bca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	7afa      	ldrb	r2, [r7, #11]
 800bcac:	4611      	mov	r1, r2
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	4798      	blx	r3
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bcb6:	7dbb      	ldrb	r3, [r7, #22]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800bcbc:	7dbb      	ldrb	r3, [r7, #22]
 800bcbe:	e000      	b.n	800bcc2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d014      	beq.n	800bd30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00e      	beq.n	800bd30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	6852      	ldr	r2, [r2, #4]
 800bd1e:	b2d2      	uxtb	r2, r2
 800bd20:	4611      	mov	r1, r2
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4798      	blx	r3
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd30:	2340      	movs	r3, #64	@ 0x40
 800bd32:	2200      	movs	r2, #0
 800bd34:	2100      	movs	r1, #0
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f001 fc7f 	bl	800d63a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2240      	movs	r2, #64	@ 0x40
 800bd48:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd4c:	2340      	movs	r3, #64	@ 0x40
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2180      	movs	r1, #128	@ 0x80
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f001 fc71 	bl	800d63a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2240      	movs	r2, #64	@ 0x40
 800bd64:	841a      	strh	r2, [r3, #32]

  return ret;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	78fa      	ldrb	r2, [r7, #3]
 800bd80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	d006      	beq.n	800bdb2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2204      	movs	r2, #4
 800bdb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b04      	cmp	r3, #4
 800bdda:	d106      	bne.n	800bdea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d110      	bne.n	800be2e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00b      	beq.n	800be2e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	32ae      	adds	r2, #174	@ 0xae
 800be4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d101      	bne.n	800be5a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be56:	2303      	movs	r3, #3
 800be58:	e01c      	b.n	800be94 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b03      	cmp	r3, #3
 800be64:	d115      	bne.n	800be92 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	32ae      	adds	r2, #174	@ 0xae
 800be70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00b      	beq.n	800be92 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	32ae      	adds	r2, #174	@ 0xae
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	78fa      	ldrb	r2, [r7, #3]
 800be8c:	4611      	mov	r1, r2
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	32ae      	adds	r2, #174	@ 0xae
 800beb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800beba:	2303      	movs	r3, #3
 800bebc:	e01c      	b.n	800bef8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d115      	bne.n	800bef6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	32ae      	adds	r2, #174	@ 0xae
 800bed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00b      	beq.n	800bef6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	32ae      	adds	r2, #174	@ 0xae
 800bee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beee:	78fa      	ldrb	r2, [r7, #3]
 800bef0:	4611      	mov	r1, r2
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00e      	beq.n	800bf52 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	6852      	ldr	r2, [r2, #4]
 800bf40:	b2d2      	uxtb	r2, r2
 800bf42:	4611      	mov	r1, r2
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	4798      	blx	r3
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	885b      	ldrh	r3, [r3, #2]
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	7812      	ldrb	r2, [r2, #0]
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d91f      	bls.n	800bff6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bfbc:	e013      	b.n	800bfe6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bfbe:	f107 030a 	add.w	r3, r7, #10
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6978      	ldr	r0, [r7, #20]
 800bfc6:	f000 f81b 	bl	800c000 <USBD_GetNextDesc>
 800bfca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	785b      	ldrb	r3, [r3, #1]
 800bfd0:	2b05      	cmp	r3, #5
 800bfd2:	d108      	bne.n	800bfe6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	789b      	ldrb	r3, [r3, #2]
 800bfdc:	78fa      	ldrb	r2, [r7, #3]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d008      	beq.n	800bff4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	885b      	ldrh	r3, [r3, #2]
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	897b      	ldrh	r3, [r7, #10]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d8e5      	bhi.n	800bfbe <USBD_GetEpDesc+0x2e>
 800bff2:	e000      	b.n	800bff6 <USBD_GetEpDesc+0x66>
          break;
 800bff4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bff6:	693b      	ldr	r3, [r7, #16]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	7812      	ldrb	r2, [r2, #0]
 800c016:	4413      	add	r3, r2
 800c018:	b29a      	uxth	r2, r3
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4413      	add	r3, r2
 800c028:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c02a:	68fb      	ldr	r3, [r7, #12]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c038:	b480      	push	{r7}
 800c03a:	b087      	sub	sp, #28
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	3301      	adds	r3, #1
 800c04e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c056:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c05a:	021b      	lsls	r3, r3, #8
 800c05c:	b21a      	sxth	r2, r3
 800c05e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c062:	4313      	orrs	r3, r2
 800c064:	b21b      	sxth	r3, r3
 800c066:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c068:	89fb      	ldrh	r3, [r7, #14]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	371c      	adds	r7, #28
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
	...

0800c078 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c08e:	2b40      	cmp	r3, #64	@ 0x40
 800c090:	d005      	beq.n	800c09e <USBD_StdDevReq+0x26>
 800c092:	2b40      	cmp	r3, #64	@ 0x40
 800c094:	d857      	bhi.n	800c146 <USBD_StdDevReq+0xce>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00f      	beq.n	800c0ba <USBD_StdDevReq+0x42>
 800c09a:	2b20      	cmp	r3, #32
 800c09c:	d153      	bne.n	800c146 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	32ae      	adds	r2, #174	@ 0xae
 800c0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	4798      	blx	r3
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b8:	e04a      	b.n	800c150 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	785b      	ldrb	r3, [r3, #1]
 800c0be:	2b09      	cmp	r3, #9
 800c0c0:	d83b      	bhi.n	800c13a <USBD_StdDevReq+0xc2>
 800c0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c8 <USBD_StdDevReq+0x50>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c11d 	.word	0x0800c11d
 800c0cc:	0800c131 	.word	0x0800c131
 800c0d0:	0800c13b 	.word	0x0800c13b
 800c0d4:	0800c127 	.word	0x0800c127
 800c0d8:	0800c13b 	.word	0x0800c13b
 800c0dc:	0800c0fb 	.word	0x0800c0fb
 800c0e0:	0800c0f1 	.word	0x0800c0f1
 800c0e4:	0800c13b 	.word	0x0800c13b
 800c0e8:	0800c113 	.word	0x0800c113
 800c0ec:	0800c105 	.word	0x0800c105
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fa3e 	bl	800c574 <USBD_GetDescriptor>
          break;
 800c0f8:	e024      	b.n	800c144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fba3 	bl	800c848 <USBD_SetAddress>
          break;
 800c102:	e01f      	b.n	800c144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fbe2 	bl	800c8d0 <USBD_SetConfig>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73fb      	strb	r3, [r7, #15]
          break;
 800c110:	e018      	b.n	800c144 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fc85 	bl	800ca24 <USBD_GetConfig>
          break;
 800c11a:	e013      	b.n	800c144 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fcb6 	bl	800ca90 <USBD_GetStatus>
          break;
 800c124:	e00e      	b.n	800c144 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fce5 	bl	800caf8 <USBD_SetFeature>
          break;
 800c12e:	e009      	b.n	800c144 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fd09 	bl	800cb4a <USBD_ClrFeature>
          break;
 800c138:	e004      	b.n	800c144 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fd60 	bl	800cc02 <USBD_CtlError>
          break;
 800c142:	bf00      	nop
      }
      break;
 800c144:	e004      	b.n	800c150 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fd5a 	bl	800cc02 <USBD_CtlError>
      break;
 800c14e:	bf00      	nop
  }

  return ret;
 800c150:	7bfb      	ldrb	r3, [r7, #15]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop

0800c15c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c172:	2b40      	cmp	r3, #64	@ 0x40
 800c174:	d005      	beq.n	800c182 <USBD_StdItfReq+0x26>
 800c176:	2b40      	cmp	r3, #64	@ 0x40
 800c178:	d852      	bhi.n	800c220 <USBD_StdItfReq+0xc4>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <USBD_StdItfReq+0x26>
 800c17e:	2b20      	cmp	r3, #32
 800c180:	d14e      	bne.n	800c220 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	3b01      	subs	r3, #1
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d840      	bhi.n	800c212 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	889b      	ldrh	r3, [r3, #4]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b01      	cmp	r3, #1
 800c198:	d836      	bhi.n	800c208 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	889b      	ldrh	r3, [r3, #4]
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff feda 	bl	800bf5c <USBD_CoreFindIF>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	2bff      	cmp	r3, #255	@ 0xff
 800c1b0:	d01d      	beq.n	800c1ee <USBD_StdItfReq+0x92>
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d11a      	bne.n	800c1ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c1b8:	7bba      	ldrb	r2, [r7, #14]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	32ae      	adds	r2, #174	@ 0xae
 800c1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00f      	beq.n	800c1e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c1c8:	7bba      	ldrb	r2, [r7, #14]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1d0:	7bba      	ldrb	r2, [r7, #14]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	32ae      	adds	r2, #174	@ 0xae
 800c1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1e6:	e004      	b.n	800c1f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1ec:	e001      	b.n	800c1f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	88db      	ldrh	r3, [r3, #6]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d110      	bne.n	800c21c <USBD_StdItfReq+0xc0>
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10d      	bne.n	800c21c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fddc 	bl	800cdbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c206:	e009      	b.n	800c21c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fcf9 	bl	800cc02 <USBD_CtlError>
          break;
 800c210:	e004      	b.n	800c21c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fcf4 	bl	800cc02 <USBD_CtlError>
          break;
 800c21a:	e000      	b.n	800c21e <USBD_StdItfReq+0xc2>
          break;
 800c21c:	bf00      	nop
      }
      break;
 800c21e:	e004      	b.n	800c22a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fced 	bl	800cc02 <USBD_CtlError>
      break;
 800c228:	bf00      	nop
  }

  return ret;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	889b      	ldrh	r3, [r3, #4]
 800c246:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c250:	2b40      	cmp	r3, #64	@ 0x40
 800c252:	d007      	beq.n	800c264 <USBD_StdEPReq+0x30>
 800c254:	2b40      	cmp	r3, #64	@ 0x40
 800c256:	f200 8181 	bhi.w	800c55c <USBD_StdEPReq+0x328>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d02a      	beq.n	800c2b4 <USBD_StdEPReq+0x80>
 800c25e:	2b20      	cmp	r3, #32
 800c260:	f040 817c 	bne.w	800c55c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7ff fe84 	bl	800bf76 <USBD_CoreFindEP>
 800c26e:	4603      	mov	r3, r0
 800c270:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c272:	7b7b      	ldrb	r3, [r7, #13]
 800c274:	2bff      	cmp	r3, #255	@ 0xff
 800c276:	f000 8176 	beq.w	800c566 <USBD_StdEPReq+0x332>
 800c27a:	7b7b      	ldrb	r3, [r7, #13]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f040 8172 	bne.w	800c566 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c282:	7b7a      	ldrb	r2, [r7, #13]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c28a:	7b7a      	ldrb	r2, [r7, #13]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	32ae      	adds	r2, #174	@ 0xae
 800c290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 8165 	beq.w	800c566 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c29c:	7b7a      	ldrb	r2, [r7, #13]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	32ae      	adds	r2, #174	@ 0xae
 800c2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	4798      	blx	r3
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c2b2:	e158      	b.n	800c566 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	785b      	ldrb	r3, [r3, #1]
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d008      	beq.n	800c2ce <USBD_StdEPReq+0x9a>
 800c2bc:	2b03      	cmp	r3, #3
 800c2be:	f300 8147 	bgt.w	800c550 <USBD_StdEPReq+0x31c>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 809b 	beq.w	800c3fe <USBD_StdEPReq+0x1ca>
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d03c      	beq.n	800c346 <USBD_StdEPReq+0x112>
 800c2cc:	e140      	b.n	800c550 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d002      	beq.n	800c2e0 <USBD_StdEPReq+0xac>
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	d016      	beq.n	800c30c <USBD_StdEPReq+0xd8>
 800c2de:	e02c      	b.n	800c33a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00d      	beq.n	800c302 <USBD_StdEPReq+0xce>
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	2b80      	cmp	r3, #128	@ 0x80
 800c2ea:	d00a      	beq.n	800c302 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2ec:	7bbb      	ldrb	r3, [r7, #14]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 f9e7 	bl	800d6c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2f6:	2180      	movs	r1, #128	@ 0x80
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f001 f9e3 	bl	800d6c4 <USBD_LL_StallEP>
 800c2fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c300:	e020      	b.n	800c344 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fc7c 	bl	800cc02 <USBD_CtlError>
              break;
 800c30a:	e01b      	b.n	800c344 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	885b      	ldrh	r3, [r3, #2]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10e      	bne.n	800c332 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00b      	beq.n	800c332 <USBD_StdEPReq+0xfe>
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
 800c31c:	2b80      	cmp	r3, #128	@ 0x80
 800c31e:	d008      	beq.n	800c332 <USBD_StdEPReq+0xfe>
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	88db      	ldrh	r3, [r3, #6]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d104      	bne.n	800c332 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c328:	7bbb      	ldrb	r3, [r7, #14]
 800c32a:	4619      	mov	r1, r3
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f001 f9c9 	bl	800d6c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fd43 	bl	800cdbe <USBD_CtlSendStatus>

              break;
 800c338:	e004      	b.n	800c344 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fc60 	bl	800cc02 <USBD_CtlError>
              break;
 800c342:	bf00      	nop
          }
          break;
 800c344:	e109      	b.n	800c55a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d002      	beq.n	800c358 <USBD_StdEPReq+0x124>
 800c352:	2b03      	cmp	r3, #3
 800c354:	d016      	beq.n	800c384 <USBD_StdEPReq+0x150>
 800c356:	e04b      	b.n	800c3f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00d      	beq.n	800c37a <USBD_StdEPReq+0x146>
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b80      	cmp	r3, #128	@ 0x80
 800c362:	d00a      	beq.n	800c37a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f001 f9ab 	bl	800d6c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c36e:	2180      	movs	r1, #128	@ 0x80
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f001 f9a7 	bl	800d6c4 <USBD_LL_StallEP>
 800c376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c378:	e040      	b.n	800c3fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 fc40 	bl	800cc02 <USBD_CtlError>
              break;
 800c382:	e03b      	b.n	800c3fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	885b      	ldrh	r3, [r3, #2]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d136      	bne.n	800c3fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c396:	7bbb      	ldrb	r3, [r7, #14]
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f001 f9b1 	bl	800d702 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fd0c 	bl	800cdbe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3a6:	7bbb      	ldrb	r3, [r7, #14]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff fde3 	bl	800bf76 <USBD_CoreFindEP>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3b4:	7b7b      	ldrb	r3, [r7, #13]
 800c3b6:	2bff      	cmp	r3, #255	@ 0xff
 800c3b8:	d01f      	beq.n	800c3fa <USBD_StdEPReq+0x1c6>
 800c3ba:	7b7b      	ldrb	r3, [r7, #13]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d11c      	bne.n	800c3fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c3c0:	7b7a      	ldrb	r2, [r7, #13]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c3c8:	7b7a      	ldrb	r2, [r7, #13]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	32ae      	adds	r2, #174	@ 0xae
 800c3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d010      	beq.n	800c3fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3d8:	7b7a      	ldrb	r2, [r7, #13]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	32ae      	adds	r2, #174	@ 0xae
 800c3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	4798      	blx	r3
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c3ee:	e004      	b.n	800c3fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fc05 	bl	800cc02 <USBD_CtlError>
              break;
 800c3f8:	e000      	b.n	800c3fc <USBD_StdEPReq+0x1c8>
              break;
 800c3fa:	bf00      	nop
          }
          break;
 800c3fc:	e0ad      	b.n	800c55a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b02      	cmp	r3, #2
 800c408:	d002      	beq.n	800c410 <USBD_StdEPReq+0x1dc>
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d033      	beq.n	800c476 <USBD_StdEPReq+0x242>
 800c40e:	e099      	b.n	800c544 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d007      	beq.n	800c426 <USBD_StdEPReq+0x1f2>
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	2b80      	cmp	r3, #128	@ 0x80
 800c41a:	d004      	beq.n	800c426 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fbef 	bl	800cc02 <USBD_CtlError>
                break;
 800c424:	e093      	b.n	800c54e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	da0b      	bge.n	800c446 <USBD_StdEPReq+0x212>
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
 800c430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c434:	4613      	mov	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4413      	add	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	3310      	adds	r3, #16
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	4413      	add	r3, r2
 800c442:	3304      	adds	r3, #4
 800c444:	e00b      	b.n	800c45e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c446:	7bbb      	ldrb	r3, [r7, #14]
 800c448:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c44c:	4613      	mov	r3, r2
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	4413      	add	r3, r2
 800c45c:	3304      	adds	r3, #4
 800c45e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2200      	movs	r2, #0
 800c464:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	330e      	adds	r3, #14
 800c46a:	2202      	movs	r2, #2
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fc44 	bl	800ccfc <USBD_CtlSendData>
              break;
 800c474:	e06b      	b.n	800c54e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	da11      	bge.n	800c4a2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	f003 020f 	and.w	r2, r3, #15
 800c484:	6879      	ldr	r1, [r7, #4]
 800c486:	4613      	mov	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	440b      	add	r3, r1
 800c490:	3323      	adds	r3, #35	@ 0x23
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d117      	bne.n	800c4c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fbb1 	bl	800cc02 <USBD_CtlError>
                  break;
 800c4a0:	e055      	b.n	800c54e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	f003 020f 	and.w	r2, r3, #15
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	440b      	add	r3, r1
 800c4b4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d104      	bne.n	800c4c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fb9e 	bl	800cc02 <USBD_CtlError>
                  break;
 800c4c6:	e042      	b.n	800c54e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	da0b      	bge.n	800c4e8 <USBD_StdEPReq+0x2b4>
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
 800c4d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	4413      	add	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	3310      	adds	r3, #16
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	e00b      	b.n	800c500 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	3304      	adds	r3, #4
 800c500:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c502:	7bbb      	ldrb	r3, [r7, #14]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <USBD_StdEPReq+0x2da>
 800c508:	7bbb      	ldrb	r3, [r7, #14]
 800c50a:	2b80      	cmp	r3, #128	@ 0x80
 800c50c:	d103      	bne.n	800c516 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2200      	movs	r2, #0
 800c512:	739a      	strb	r2, [r3, #14]
 800c514:	e00e      	b.n	800c534 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f001 f910 	bl	800d740 <USBD_LL_IsStallEP>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2201      	movs	r2, #1
 800c52a:	739a      	strb	r2, [r3, #14]
 800c52c:	e002      	b.n	800c534 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2200      	movs	r2, #0
 800c532:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	330e      	adds	r3, #14
 800c538:	2202      	movs	r2, #2
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fbdd 	bl	800ccfc <USBD_CtlSendData>
              break;
 800c542:	e004      	b.n	800c54e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fb5b 	bl	800cc02 <USBD_CtlError>
              break;
 800c54c:	bf00      	nop
          }
          break;
 800c54e:	e004      	b.n	800c55a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fb55 	bl	800cc02 <USBD_CtlError>
          break;
 800c558:	bf00      	nop
      }
      break;
 800c55a:	e005      	b.n	800c568 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 fb4f 	bl	800cc02 <USBD_CtlError>
      break;
 800c564:	e000      	b.n	800c568 <USBD_StdEPReq+0x334>
      break;
 800c566:	bf00      	nop
  }

  return ret;
 800c568:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c57e:	2300      	movs	r3, #0
 800c580:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c582:	2300      	movs	r3, #0
 800c584:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c586:	2300      	movs	r3, #0
 800c588:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	885b      	ldrh	r3, [r3, #2]
 800c58e:	0a1b      	lsrs	r3, r3, #8
 800c590:	b29b      	uxth	r3, r3
 800c592:	3b01      	subs	r3, #1
 800c594:	2b06      	cmp	r3, #6
 800c596:	f200 8128 	bhi.w	800c7ea <USBD_GetDescriptor+0x276>
 800c59a:	a201      	add	r2, pc, #4	@ (adr r2, 800c5a0 <USBD_GetDescriptor+0x2c>)
 800c59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a0:	0800c5bd 	.word	0x0800c5bd
 800c5a4:	0800c5d5 	.word	0x0800c5d5
 800c5a8:	0800c615 	.word	0x0800c615
 800c5ac:	0800c7eb 	.word	0x0800c7eb
 800c5b0:	0800c7eb 	.word	0x0800c7eb
 800c5b4:	0800c78b 	.word	0x0800c78b
 800c5b8:	0800c7b7 	.word	0x0800c7b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	7c12      	ldrb	r2, [r2, #16]
 800c5c8:	f107 0108 	add.w	r1, r7, #8
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	4798      	blx	r3
 800c5d0:	60f8      	str	r0, [r7, #12]
      break;
 800c5d2:	e112      	b.n	800c7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7c1b      	ldrb	r3, [r3, #16]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10d      	bne.n	800c5f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e4:	f107 0208 	add.w	r2, r7, #8
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	4798      	blx	r3
 800c5ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c5f6:	e100      	b.n	800c7fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c600:	f107 0208 	add.w	r2, r7, #8
 800c604:	4610      	mov	r0, r2
 800c606:	4798      	blx	r3
 800c608:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3301      	adds	r3, #1
 800c60e:	2202      	movs	r2, #2
 800c610:	701a      	strb	r2, [r3, #0]
      break;
 800c612:	e0f2      	b.n	800c7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	885b      	ldrh	r3, [r3, #2]
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b05      	cmp	r3, #5
 800c61c:	f200 80ac 	bhi.w	800c778 <USBD_GetDescriptor+0x204>
 800c620:	a201      	add	r2, pc, #4	@ (adr r2, 800c628 <USBD_GetDescriptor+0xb4>)
 800c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c626:	bf00      	nop
 800c628:	0800c641 	.word	0x0800c641
 800c62c:	0800c675 	.word	0x0800c675
 800c630:	0800c6a9 	.word	0x0800c6a9
 800c634:	0800c6dd 	.word	0x0800c6dd
 800c638:	0800c711 	.word	0x0800c711
 800c63c:	0800c745 	.word	0x0800c745
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	7c12      	ldrb	r2, [r2, #16]
 800c658:	f107 0108 	add.w	r1, r7, #8
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
 800c660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c662:	e091      	b.n	800c788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 facb 	bl	800cc02 <USBD_CtlError>
            err++;
 800c66c:	7afb      	ldrb	r3, [r7, #11]
 800c66e:	3301      	adds	r3, #1
 800c670:	72fb      	strb	r3, [r7, #11]
          break;
 800c672:	e089      	b.n	800c788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	7c12      	ldrb	r2, [r2, #16]
 800c68c:	f107 0108 	add.w	r1, r7, #8
 800c690:	4610      	mov	r0, r2
 800c692:	4798      	blx	r3
 800c694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c696:	e077      	b.n	800c788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fab1 	bl	800cc02 <USBD_CtlError>
            err++;
 800c6a0:	7afb      	ldrb	r3, [r7, #11]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6a6:	e06f      	b.n	800c788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00b      	beq.n	800c6cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	7c12      	ldrb	r2, [r2, #16]
 800c6c0:	f107 0108 	add.w	r1, r7, #8
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4798      	blx	r3
 800c6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ca:	e05d      	b.n	800c788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fa97 	bl	800cc02 <USBD_CtlError>
            err++;
 800c6d4:	7afb      	ldrb	r3, [r7, #11]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6da:	e055      	b.n	800c788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00b      	beq.n	800c700 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	7c12      	ldrb	r2, [r2, #16]
 800c6f4:	f107 0108 	add.w	r1, r7, #8
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	4798      	blx	r3
 800c6fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6fe:	e043      	b.n	800c788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fa7d 	bl	800cc02 <USBD_CtlError>
            err++;
 800c708:	7afb      	ldrb	r3, [r7, #11]
 800c70a:	3301      	adds	r3, #1
 800c70c:	72fb      	strb	r3, [r7, #11]
          break;
 800c70e:	e03b      	b.n	800c788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00b      	beq.n	800c734 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	7c12      	ldrb	r2, [r2, #16]
 800c728:	f107 0108 	add.w	r1, r7, #8
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c732:	e029      	b.n	800c788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fa63 	bl	800cc02 <USBD_CtlError>
            err++;
 800c73c:	7afb      	ldrb	r3, [r7, #11]
 800c73e:	3301      	adds	r3, #1
 800c740:	72fb      	strb	r3, [r7, #11]
          break;
 800c742:	e021      	b.n	800c788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00b      	beq.n	800c768 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	7c12      	ldrb	r2, [r2, #16]
 800c75c:	f107 0108 	add.w	r1, r7, #8
 800c760:	4610      	mov	r0, r2
 800c762:	4798      	blx	r3
 800c764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c766:	e00f      	b.n	800c788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fa49 	bl	800cc02 <USBD_CtlError>
            err++;
 800c770:	7afb      	ldrb	r3, [r7, #11]
 800c772:	3301      	adds	r3, #1
 800c774:	72fb      	strb	r3, [r7, #11]
          break;
 800c776:	e007      	b.n	800c788 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fa41 	bl	800cc02 <USBD_CtlError>
          err++;
 800c780:	7afb      	ldrb	r3, [r7, #11]
 800c782:	3301      	adds	r3, #1
 800c784:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c786:	bf00      	nop
      }
      break;
 800c788:	e037      	b.n	800c7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	7c1b      	ldrb	r3, [r3, #16]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d109      	bne.n	800c7a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c79a:	f107 0208 	add.w	r2, r7, #8
 800c79e:	4610      	mov	r0, r2
 800c7a0:	4798      	blx	r3
 800c7a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7a4:	e029      	b.n	800c7fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fa2a 	bl	800cc02 <USBD_CtlError>
        err++;
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c7b4:	e021      	b.n	800c7fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	7c1b      	ldrb	r3, [r3, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10d      	bne.n	800c7da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c6:	f107 0208 	add.w	r2, r7, #8
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	4798      	blx	r3
 800c7ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	2207      	movs	r2, #7
 800c7d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7d8:	e00f      	b.n	800c7fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fa10 	bl	800cc02 <USBD_CtlError>
        err++;
 800c7e2:	7afb      	ldrb	r3, [r7, #11]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7e8:	e007      	b.n	800c7fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 fa08 	bl	800cc02 <USBD_CtlError>
      err++;
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7f8:	bf00      	nop
  }

  if (err != 0U)
 800c7fa:	7afb      	ldrb	r3, [r7, #11]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d11e      	bne.n	800c83e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	88db      	ldrh	r3, [r3, #6]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d016      	beq.n	800c836 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c808:	893b      	ldrh	r3, [r7, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00e      	beq.n	800c82c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	88da      	ldrh	r2, [r3, #6]
 800c812:	893b      	ldrh	r3, [r7, #8]
 800c814:	4293      	cmp	r3, r2
 800c816:	bf28      	it	cs
 800c818:	4613      	movcs	r3, r2
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c81e:	893b      	ldrh	r3, [r7, #8]
 800c820:	461a      	mov	r2, r3
 800c822:	68f9      	ldr	r1, [r7, #12]
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fa69 	bl	800ccfc <USBD_CtlSendData>
 800c82a:	e009      	b.n	800c840 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f9e7 	bl	800cc02 <USBD_CtlError>
 800c834:	e004      	b.n	800c840 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fac1 	bl	800cdbe <USBD_CtlSendStatus>
 800c83c:	e000      	b.n	800c840 <USBD_GetDescriptor+0x2cc>
    return;
 800c83e:	bf00      	nop
  }
}
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop

0800c848 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	889b      	ldrh	r3, [r3, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d131      	bne.n	800c8be <USBD_SetAddress+0x76>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	88db      	ldrh	r3, [r3, #6]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d12d      	bne.n	800c8be <USBD_SetAddress+0x76>
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	885b      	ldrh	r3, [r3, #2]
 800c866:	2b7f      	cmp	r3, #127	@ 0x7f
 800c868:	d829      	bhi.n	800c8be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	885b      	ldrh	r3, [r3, #2]
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c874:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d104      	bne.n	800c88c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f9bc 	bl	800cc02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c88a:	e01d      	b.n	800c8c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	7bfa      	ldrb	r2, [r7, #15]
 800c890:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	4619      	mov	r1, r3
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 ff7d 	bl	800d798 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fa8d 	bl	800cdbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d004      	beq.n	800c8b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b2:	e009      	b.n	800c8c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8bc:	e004      	b.n	800c8c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8be:	6839      	ldr	r1, [r7, #0]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f99e 	bl	800cc02 <USBD_CtlError>
  }
}
 800c8c6:	bf00      	nop
 800c8c8:	bf00      	nop
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	885b      	ldrh	r3, [r3, #2]
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	4b4e      	ldr	r3, [pc, #312]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c8e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8e8:	4b4d      	ldr	r3, [pc, #308]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d905      	bls.n	800c8fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c8f0:	6839      	ldr	r1, [r7, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f985 	bl	800cc02 <USBD_CtlError>
    return USBD_FAIL;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e08c      	b.n	800ca16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b02      	cmp	r3, #2
 800c906:	d002      	beq.n	800c90e <USBD_SetConfig+0x3e>
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d029      	beq.n	800c960 <USBD_SetConfig+0x90>
 800c90c:	e075      	b.n	800c9fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c90e:	4b44      	ldr	r3, [pc, #272]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d020      	beq.n	800c958 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c916:	4b42      	ldr	r3, [pc, #264]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c920:	4b3f      	ldr	r3, [pc, #252]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7fe ffcd 	bl	800b8c6 <USBD_SetClassConfig>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c930:	7bfb      	ldrb	r3, [r7, #15]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d008      	beq.n	800c948 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f962 	bl	800cc02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2202      	movs	r2, #2
 800c942:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c946:	e065      	b.n	800ca14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fa38 	bl	800cdbe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2203      	movs	r2, #3
 800c952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c956:	e05d      	b.n	800ca14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fa30 	bl	800cdbe <USBD_CtlSendStatus>
      break;
 800c95e:	e059      	b.n	800ca14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c960:	4b2f      	ldr	r3, [pc, #188]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d112      	bne.n	800c98e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2202      	movs	r2, #2
 800c96c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c970:	4b2b      	ldr	r3, [pc, #172]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	461a      	mov	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c97a:	4b29      	ldr	r3, [pc, #164]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7fe ffbc 	bl	800b8fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fa19 	bl	800cdbe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c98c:	e042      	b.n	800ca14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c98e:	4b24      	ldr	r3, [pc, #144]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d02a      	beq.n	800c9f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7fe ffaa 	bl	800b8fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9aa:	4b1d      	ldr	r3, [pc, #116]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ca20 <USBD_SetConfig+0x150>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7fe ff83 	bl	800b8c6 <USBD_SetClassConfig>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00f      	beq.n	800c9ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f918 	bl	800cc02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	4619      	mov	r1, r3
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f7fe ff8f 	bl	800b8fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2202      	movs	r2, #2
 800c9e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c9e8:	e014      	b.n	800ca14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f9e7 	bl	800cdbe <USBD_CtlSendStatus>
      break;
 800c9f0:	e010      	b.n	800ca14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f9e3 	bl	800cdbe <USBD_CtlSendStatus>
      break;
 800c9f8:	e00c      	b.n	800ca14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f900 	bl	800cc02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca02:	4b07      	ldr	r3, [pc, #28]	@ (800ca20 <USBD_SetConfig+0x150>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7fe ff78 	bl	800b8fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	73fb      	strb	r3, [r7, #15]
      break;
 800ca12:	bf00      	nop
  }

  return ret;
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000844 	.word	0x20000844

0800ca24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	88db      	ldrh	r3, [r3, #6]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d004      	beq.n	800ca40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f8e2 	bl	800cc02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca3e:	e023      	b.n	800ca88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	dc02      	bgt.n	800ca52 <USBD_GetConfig+0x2e>
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	dc03      	bgt.n	800ca58 <USBD_GetConfig+0x34>
 800ca50:	e015      	b.n	800ca7e <USBD_GetConfig+0x5a>
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d00b      	beq.n	800ca6e <USBD_GetConfig+0x4a>
 800ca56:	e012      	b.n	800ca7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3308      	adds	r3, #8
 800ca62:	2201      	movs	r2, #1
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f948 	bl	800ccfc <USBD_CtlSendData>
        break;
 800ca6c:	e00c      	b.n	800ca88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3304      	adds	r3, #4
 800ca72:	2201      	movs	r2, #1
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f940 	bl	800ccfc <USBD_CtlSendData>
        break;
 800ca7c:	e004      	b.n	800ca88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ca7e:	6839      	ldr	r1, [r7, #0]
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f8be 	bl	800cc02 <USBD_CtlError>
        break;
 800ca86:	bf00      	nop
}
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	3b01      	subs	r3, #1
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d81e      	bhi.n	800cae6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	88db      	ldrh	r3, [r3, #6]
 800caac:	2b02      	cmp	r3, #2
 800caae:	d004      	beq.n	800caba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f8a5 	bl	800cc02 <USBD_CtlError>
        break;
 800cab8:	e01a      	b.n	800caf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d005      	beq.n	800cad6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	f043 0202 	orr.w	r2, r3, #2
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	330c      	adds	r3, #12
 800cada:	2202      	movs	r2, #2
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 f90c 	bl	800ccfc <USBD_CtlSendData>
      break;
 800cae4:	e004      	b.n	800caf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f88a 	bl	800cc02 <USBD_CtlError>
      break;
 800caee:	bf00      	nop
  }
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	885b      	ldrh	r3, [r3, #2]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d107      	bne.n	800cb1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f953 	bl	800cdbe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb18:	e013      	b.n	800cb42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	885b      	ldrh	r3, [r3, #2]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d10b      	bne.n	800cb3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	889b      	ldrh	r3, [r3, #4]
 800cb26:	0a1b      	lsrs	r3, r3, #8
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f943 	bl	800cdbe <USBD_CtlSendStatus>
}
 800cb38:	e003      	b.n	800cb42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f860 	bl	800cc02 <USBD_CtlError>
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d80b      	bhi.n	800cb7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	885b      	ldrh	r3, [r3, #2]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d10c      	bne.n	800cb84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 f923 	bl	800cdbe <USBD_CtlSendStatus>
      }
      break;
 800cb78:	e004      	b.n	800cb84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f840 	bl	800cc02 <USBD_CtlError>
      break;
 800cb82:	e000      	b.n	800cb86 <USBD_ClrFeature+0x3c>
      break;
 800cb84:	bf00      	nop
  }
}
 800cb86:	bf00      	nop
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b084      	sub	sp, #16
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
 800cb96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	781a      	ldrb	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	3301      	adds	r3, #1
 800cba8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	781a      	ldrb	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f7ff fa3d 	bl	800c038 <SWAPBYTE>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7ff fa30 	bl	800c038 <SWAPBYTE>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	461a      	mov	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f7ff fa23 	bl	800c038 <SWAPBYTE>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	80da      	strh	r2, [r3, #6]
}
 800cbfa:	bf00      	nop
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b082      	sub	sp, #8
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc0c:	2180      	movs	r1, #128	@ 0x80
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fd58 	bl	800d6c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc14:	2100      	movs	r1, #0
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fd54 	bl	800d6c4 <USBD_LL_StallEP>
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d042      	beq.n	800ccc0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cc3e:	6938      	ldr	r0, [r7, #16]
 800cc40:	f000 f842 	bl	800ccc8 <USBD_GetLen>
 800cc44:	4603      	mov	r3, r0
 800cc46:	3301      	adds	r3, #1
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc4e:	d808      	bhi.n	800cc62 <USBD_GetString+0x3e>
 800cc50:	6938      	ldr	r0, [r7, #16]
 800cc52:	f000 f839 	bl	800ccc8 <USBD_GetLen>
 800cc56:	4603      	mov	r3, r0
 800cc58:	3301      	adds	r3, #1
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	e001      	b.n	800cc66 <USBD_GetString+0x42>
 800cc62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	4413      	add	r3, r2
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	7812      	ldrb	r2, [r2, #0]
 800cc74:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	4413      	add	r3, r2
 800cc82:	2203      	movs	r2, #3
 800cc84:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc8c:	e013      	b.n	800ccb6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	4413      	add	r3, r2
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	7812      	ldrb	r2, [r2, #0]
 800cc98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	613b      	str	r3, [r7, #16]
    idx++;
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	3301      	adds	r3, #1
 800cca4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	4413      	add	r3, r2
 800ccac:	2200      	movs	r2, #0
 800ccae:	701a      	strb	r2, [r3, #0]
    idx++;
 800ccb0:	7dfb      	ldrb	r3, [r7, #23]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1e7      	bne.n	800cc8e <USBD_GetString+0x6a>
 800ccbe:	e000      	b.n	800ccc2 <USBD_GetString+0x9e>
    return;
 800ccc0:	bf00      	nop
  }
}
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ccd8:	e005      	b.n	800cce6 <USBD_GetLen+0x1e>
  {
    len++;
 800ccda:	7bfb      	ldrb	r3, [r7, #15]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	3301      	adds	r3, #1
 800cce4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1f5      	bne.n	800ccda <USBD_GetLen+0x12>
  }

  return len;
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2202      	movs	r2, #2
 800cd0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	2100      	movs	r1, #0
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f000 fd54 	bl	800d7d6 <USBD_LL_Transmit>

  return USBD_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	2100      	movs	r1, #0
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f000 fd43 	bl	800d7d6 <USBD_LL_Transmit>

  return USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2203      	movs	r2, #3
 800cd6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f000 fd43 	bl	800d818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	2100      	movs	r1, #0
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 fd32 	bl	800d818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2204      	movs	r2, #4
 800cdca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdce:	2300      	movs	r3, #0
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fcfe 	bl	800d7d6 <USBD_LL_Transmit>

  return USBD_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2205      	movs	r2, #5
 800cdf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fd0c 	bl	800d818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce10:	2200      	movs	r2, #0
 800ce12:	4912      	ldr	r1, [pc, #72]	@ (800ce5c <MX_USB_DEVICE_Init+0x50>)
 800ce14:	4812      	ldr	r0, [pc, #72]	@ (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce16:	f7fe fcd9 	bl	800b7cc <USBD_Init>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce20:	f7f4 fae2 	bl	80013e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce24:	490f      	ldr	r1, [pc, #60]	@ (800ce64 <MX_USB_DEVICE_Init+0x58>)
 800ce26:	480e      	ldr	r0, [pc, #56]	@ (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce28:	f7fe fd00 	bl	800b82c <USBD_RegisterClass>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce32:	f7f4 fad9 	bl	80013e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce36:	490c      	ldr	r1, [pc, #48]	@ (800ce68 <MX_USB_DEVICE_Init+0x5c>)
 800ce38:	4809      	ldr	r0, [pc, #36]	@ (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce3a:	f7fe fbf7 	bl	800b62c <USBD_CDC_RegisterInterface>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce44:	f7f4 fad0 	bl	80013e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce48:	4805      	ldr	r0, [pc, #20]	@ (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce4a:	f7fe fd25 	bl	800b898 <USBD_Start>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce54:	f7f4 fac8 	bl	80013e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce58:	bf00      	nop
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	200000b8 	.word	0x200000b8
 800ce60:	20000848 	.word	0x20000848
 800ce64:	2000001c 	.word	0x2000001c
 800ce68:	200000a4 	.word	0x200000a4

0800ce6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce70:	2200      	movs	r2, #0
 800ce72:	4905      	ldr	r1, [pc, #20]	@ (800ce88 <CDC_Init_FS+0x1c>)
 800ce74:	4805      	ldr	r0, [pc, #20]	@ (800ce8c <CDC_Init_FS+0x20>)
 800ce76:	f7fe fbf3 	bl	800b660 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce7a:	4905      	ldr	r1, [pc, #20]	@ (800ce90 <CDC_Init_FS+0x24>)
 800ce7c:	4803      	ldr	r0, [pc, #12]	@ (800ce8c <CDC_Init_FS+0x20>)
 800ce7e:	f7fe fc11 	bl	800b6a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20000d24 	.word	0x20000d24
 800ce8c:	20000848 	.word	0x20000848
 800ce90:	20000b24 	.word	0x20000b24

0800ce94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce94:	b480      	push	{r7}
 800ce96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b23      	cmp	r3, #35	@ 0x23
 800ceb8:	f200 8098 	bhi.w	800cfec <CDC_Control_FS+0x148>
 800cebc:	a201      	add	r2, pc, #4	@ (adr r2, 800cec4 <CDC_Control_FS+0x20>)
 800cebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec2:	bf00      	nop
 800cec4:	0800cfed 	.word	0x0800cfed
 800cec8:	0800cfed 	.word	0x0800cfed
 800cecc:	0800cfed 	.word	0x0800cfed
 800ced0:	0800cfed 	.word	0x0800cfed
 800ced4:	0800cfed 	.word	0x0800cfed
 800ced8:	0800cfed 	.word	0x0800cfed
 800cedc:	0800cfed 	.word	0x0800cfed
 800cee0:	0800cfed 	.word	0x0800cfed
 800cee4:	0800cfed 	.word	0x0800cfed
 800cee8:	0800cfed 	.word	0x0800cfed
 800ceec:	0800cfed 	.word	0x0800cfed
 800cef0:	0800cfed 	.word	0x0800cfed
 800cef4:	0800cfed 	.word	0x0800cfed
 800cef8:	0800cfed 	.word	0x0800cfed
 800cefc:	0800cfed 	.word	0x0800cfed
 800cf00:	0800cfed 	.word	0x0800cfed
 800cf04:	0800cfed 	.word	0x0800cfed
 800cf08:	0800cfed 	.word	0x0800cfed
 800cf0c:	0800cfed 	.word	0x0800cfed
 800cf10:	0800cfed 	.word	0x0800cfed
 800cf14:	0800cfed 	.word	0x0800cfed
 800cf18:	0800cfed 	.word	0x0800cfed
 800cf1c:	0800cfed 	.word	0x0800cfed
 800cf20:	0800cfed 	.word	0x0800cfed
 800cf24:	0800cfed 	.word	0x0800cfed
 800cf28:	0800cfed 	.word	0x0800cfed
 800cf2c:	0800cfed 	.word	0x0800cfed
 800cf30:	0800cfed 	.word	0x0800cfed
 800cf34:	0800cfed 	.word	0x0800cfed
 800cf38:	0800cfed 	.word	0x0800cfed
 800cf3c:	0800cfed 	.word	0x0800cfed
 800cf40:	0800cfed 	.word	0x0800cfed
 800cf44:	0800cf55 	.word	0x0800cf55
 800cf48:	0800cf99 	.word	0x0800cf99
 800cf4c:	0800cfed 	.word	0x0800cfed
 800cf50:	0800cfed 	.word	0x0800cfed
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	461a      	mov	r2, r3
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	021b      	lsls	r3, r3, #8
 800cf62:	431a      	orrs	r2, r3
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	3302      	adds	r3, #2
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	041b      	lsls	r3, r3, #16
 800cf6c:	431a      	orrs	r2, r3
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	3303      	adds	r3, #3
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	061b      	lsls	r3, r3, #24
 800cf76:	4313      	orrs	r3, r2
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4b20      	ldr	r3, [pc, #128]	@ (800cffc <CDC_Control_FS+0x158>)
 800cf7c:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	791a      	ldrb	r2, [r3, #4]
 800cf82:	4b1e      	ldr	r3, [pc, #120]	@ (800cffc <CDC_Control_FS+0x158>)
 800cf84:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	795a      	ldrb	r2, [r3, #5]
 800cf8a:	4b1c      	ldr	r3, [pc, #112]	@ (800cffc <CDC_Control_FS+0x158>)
 800cf8c:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	799a      	ldrb	r2, [r3, #6]
 800cf92:	4b1a      	ldr	r3, [pc, #104]	@ (800cffc <CDC_Control_FS+0x158>)
 800cf94:	719a      	strb	r2, [r3, #6]
     break;
 800cf96:	e02a      	b.n	800cfee <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800cf98:	4b18      	ldr	r3, [pc, #96]	@ (800cffc <CDC_Control_FS+0x158>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800cfa2:	4b16      	ldr	r3, [pc, #88]	@ (800cffc <CDC_Control_FS+0x158>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	0a1a      	lsrs	r2, r3, #8
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	b2d2      	uxtb	r2, r2
 800cfae:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800cfb0:	4b12      	ldr	r3, [pc, #72]	@ (800cffc <CDC_Control_FS+0x158>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	0c1a      	lsrs	r2, r3, #16
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	3302      	adds	r3, #2
 800cfba:	b2d2      	uxtb	r2, r2
 800cfbc:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800cfbe:	4b0f      	ldr	r3, [pc, #60]	@ (800cffc <CDC_Control_FS+0x158>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	0e1a      	lsrs	r2, r3, #24
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	3303      	adds	r3, #3
 800cfc8:	b2d2      	uxtb	r2, r2
 800cfca:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4a0a      	ldr	r2, [pc, #40]	@ (800cffc <CDC_Control_FS+0x158>)
 800cfd2:	7912      	ldrb	r2, [r2, #4]
 800cfd4:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	3305      	adds	r3, #5
 800cfda:	4a08      	ldr	r2, [pc, #32]	@ (800cffc <CDC_Control_FS+0x158>)
 800cfdc:	7952      	ldrb	r2, [r2, #5]
 800cfde:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	3306      	adds	r3, #6
 800cfe4:	4a05      	ldr	r2, [pc, #20]	@ (800cffc <CDC_Control_FS+0x158>)
 800cfe6:	7992      	ldrb	r2, [r2, #6]
 800cfe8:	701a      	strb	r2, [r3, #0]
     break;
 800cfea:	e000      	b.n	800cfee <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cfec:	bf00      	nop
  }

  return (USBD_OK);
 800cfee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	2000009c 	.word	0x2000009c

0800d000 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800d00a:	4b0c      	ldr	r3, [pc, #48]	@ (800d03c <CDC_Receive_FS+0x3c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 800d012:	4b0a      	ldr	r3, [pc, #40]	@ (800d03c <CDC_Receive_FS+0x3c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	6812      	ldr	r2, [r2, #0]
 800d01a:	b292      	uxth	r2, r2
 800d01c:	4611      	mov	r1, r2
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	4806      	ldr	r0, [pc, #24]	@ (800d040 <CDC_Receive_FS+0x40>)
 800d026:	f7fe fb3d 	bl	800b6a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d02a:	4805      	ldr	r0, [pc, #20]	@ (800d040 <CDC_Receive_FS+0x40>)
 800d02c:	f7fe fb98 	bl	800b760 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d030:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	20000f24 	.word	0x20000f24
 800d040:	20000848 	.word	0x20000848

0800d044 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d054:	4b0d      	ldr	r3, [pc, #52]	@ (800d08c <CDC_Transmit_FS+0x48>)
 800d056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d05a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d066:	2301      	movs	r3, #1
 800d068:	e00b      	b.n	800d082 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d06a:	887b      	ldrh	r3, [r7, #2]
 800d06c:	461a      	mov	r2, r3
 800d06e:	6879      	ldr	r1, [r7, #4]
 800d070:	4806      	ldr	r0, [pc, #24]	@ (800d08c <CDC_Transmit_FS+0x48>)
 800d072:	f7fe faf5 	bl	800b660 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d076:	4805      	ldr	r0, [pc, #20]	@ (800d08c <CDC_Transmit_FS+0x48>)
 800d078:	f7fe fb32 	bl	800b6e0 <USBD_CDC_TransmitPacket>
 800d07c:	4603      	mov	r3, r0
 800d07e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d080:	7bfb      	ldrb	r3, [r7, #15]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20000848 	.word	0x20000848

0800d090 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d090:	b480      	push	{r7}
 800d092:	b087      	sub	sp, #28
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	4613      	mov	r3, r2
 800d09c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d0a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	371c      	adds	r7, #28
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
	...

0800d0b4 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800d0bc:	4a04      	ldr	r2, [pc, #16]	@ (800d0d0 <CDC_AttachRxData+0x1c>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6013      	str	r3, [r2, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	20000f24 	.word	0x20000f24

0800d0d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	6039      	str	r1, [r7, #0]
 800d0de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2212      	movs	r2, #18
 800d0e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d0e6:	4b03      	ldr	r3, [pc, #12]	@ (800d0f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	200000d4 	.word	0x200000d4

0800d0f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	6039      	str	r1, [r7, #0]
 800d102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	2204      	movs	r2, #4
 800d108:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d10a:	4b03      	ldr	r3, [pc, #12]	@ (800d118 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	200000e8 	.word	0x200000e8

0800d11c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	4603      	mov	r3, r0
 800d124:	6039      	str	r1, [r7, #0]
 800d126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d128:	79fb      	ldrb	r3, [r7, #7]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d105      	bne.n	800d13a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	4907      	ldr	r1, [pc, #28]	@ (800d150 <USBD_FS_ProductStrDescriptor+0x34>)
 800d132:	4808      	ldr	r0, [pc, #32]	@ (800d154 <USBD_FS_ProductStrDescriptor+0x38>)
 800d134:	f7ff fd76 	bl	800cc24 <USBD_GetString>
 800d138:	e004      	b.n	800d144 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d13a:	683a      	ldr	r2, [r7, #0]
 800d13c:	4904      	ldr	r1, [pc, #16]	@ (800d150 <USBD_FS_ProductStrDescriptor+0x34>)
 800d13e:	4805      	ldr	r0, [pc, #20]	@ (800d154 <USBD_FS_ProductStrDescriptor+0x38>)
 800d140:	f7ff fd70 	bl	800cc24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d144:	4b02      	ldr	r3, [pc, #8]	@ (800d150 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	20000f28 	.word	0x20000f28
 800d154:	0800e280 	.word	0x0800e280

0800d158 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	6039      	str	r1, [r7, #0]
 800d162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	4904      	ldr	r1, [pc, #16]	@ (800d178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d168:	4804      	ldr	r0, [pc, #16]	@ (800d17c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d16a:	f7ff fd5b 	bl	800cc24 <USBD_GetString>
  return USBD_StrDesc;
 800d16e:	4b02      	ldr	r3, [pc, #8]	@ (800d178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	20000f28 	.word	0x20000f28
 800d17c:	0800e298 	.word	0x0800e298

0800d180 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	4603      	mov	r3, r0
 800d188:	6039      	str	r1, [r7, #0]
 800d18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	221a      	movs	r2, #26
 800d190:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d192:	f000 f843 	bl	800d21c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d196:	4b02      	ldr	r3, [pc, #8]	@ (800d1a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	200000ec 	.word	0x200000ec

0800d1a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d105      	bne.n	800d1c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	4907      	ldr	r1, [pc, #28]	@ (800d1d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1ba:	4808      	ldr	r0, [pc, #32]	@ (800d1dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1bc:	f7ff fd32 	bl	800cc24 <USBD_GetString>
 800d1c0:	e004      	b.n	800d1cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	4904      	ldr	r1, [pc, #16]	@ (800d1d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1c6:	4805      	ldr	r0, [pc, #20]	@ (800d1dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1c8:	f7ff fd2c 	bl	800cc24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1cc:	4b02      	ldr	r3, [pc, #8]	@ (800d1d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20000f28 	.word	0x20000f28
 800d1dc:	0800e2ac 	.word	0x0800e2ac

0800d1e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	6039      	str	r1, [r7, #0]
 800d1ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d105      	bne.n	800d1fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	4907      	ldr	r1, [pc, #28]	@ (800d214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1f6:	4808      	ldr	r0, [pc, #32]	@ (800d218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1f8:	f7ff fd14 	bl	800cc24 <USBD_GetString>
 800d1fc:	e004      	b.n	800d208 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	4904      	ldr	r1, [pc, #16]	@ (800d214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d202:	4805      	ldr	r0, [pc, #20]	@ (800d218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d204:	f7ff fd0e 	bl	800cc24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d208:	4b02      	ldr	r3, [pc, #8]	@ (800d214 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20000f28 	.word	0x20000f28
 800d218:	0800e2b8 	.word	0x0800e2b8

0800d21c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d222:	4b0f      	ldr	r3, [pc, #60]	@ (800d260 <Get_SerialNum+0x44>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d228:	4b0e      	ldr	r3, [pc, #56]	@ (800d264 <Get_SerialNum+0x48>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d22e:	4b0e      	ldr	r3, [pc, #56]	@ (800d268 <Get_SerialNum+0x4c>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4413      	add	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d009      	beq.n	800d256 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d242:	2208      	movs	r2, #8
 800d244:	4909      	ldr	r1, [pc, #36]	@ (800d26c <Get_SerialNum+0x50>)
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f000 f814 	bl	800d274 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d24c:	2204      	movs	r2, #4
 800d24e:	4908      	ldr	r1, [pc, #32]	@ (800d270 <Get_SerialNum+0x54>)
 800d250:	68b8      	ldr	r0, [r7, #8]
 800d252:	f000 f80f 	bl	800d274 <IntToUnicode>
  }
}
 800d256:	bf00      	nop
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	1fff7a10 	.word	0x1fff7a10
 800d264:	1fff7a14 	.word	0x1fff7a14
 800d268:	1fff7a18 	.word	0x1fff7a18
 800d26c:	200000ee 	.word	0x200000ee
 800d270:	200000fe 	.word	0x200000fe

0800d274 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d274:	b480      	push	{r7}
 800d276:	b087      	sub	sp, #28
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	4613      	mov	r3, r2
 800d280:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d286:	2300      	movs	r3, #0
 800d288:	75fb      	strb	r3, [r7, #23]
 800d28a:	e027      	b.n	800d2dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	0f1b      	lsrs	r3, r3, #28
 800d290:	2b09      	cmp	r3, #9
 800d292:	d80b      	bhi.n	800d2ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	0f1b      	lsrs	r3, r3, #28
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	4619      	mov	r1, r3
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	440b      	add	r3, r1
 800d2a4:	3230      	adds	r2, #48	@ 0x30
 800d2a6:	b2d2      	uxtb	r2, r2
 800d2a8:	701a      	strb	r2, [r3, #0]
 800d2aa:	e00a      	b.n	800d2c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	0f1b      	lsrs	r3, r3, #28
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	7dfb      	ldrb	r3, [r7, #23]
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	440b      	add	r3, r1
 800d2bc:	3237      	adds	r2, #55	@ 0x37
 800d2be:	b2d2      	uxtb	r2, r2
 800d2c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2c8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	75fb      	strb	r3, [r7, #23]
 800d2dc:	7dfa      	ldrb	r2, [r7, #23]
 800d2de:	79fb      	ldrb	r3, [r7, #7]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d3d3      	bcc.n	800d28c <IntToUnicode+0x18>
  }
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	371c      	adds	r7, #28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08a      	sub	sp, #40	@ 0x28
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2fc:	f107 0314 	add.w	r3, r7, #20
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	605a      	str	r2, [r3, #4]
 800d306:	609a      	str	r2, [r3, #8]
 800d308:	60da      	str	r2, [r3, #12]
 800d30a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d314:	d13a      	bne.n	800d38c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d316:	2300      	movs	r3, #0
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	4b1e      	ldr	r3, [pc, #120]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d31e:	4a1d      	ldr	r2, [pc, #116]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d320:	f043 0301 	orr.w	r3, r3, #1
 800d324:	6313      	str	r3, [r2, #48]	@ 0x30
 800d326:	4b1b      	ldr	r3, [pc, #108]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	613b      	str	r3, [r7, #16]
 800d330:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d332:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d338:	2302      	movs	r3, #2
 800d33a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d33c:	2300      	movs	r3, #0
 800d33e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d340:	2303      	movs	r3, #3
 800d342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d344:	230a      	movs	r3, #10
 800d346:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d348:	f107 0314 	add.w	r3, r7, #20
 800d34c:	4619      	mov	r1, r3
 800d34e:	4812      	ldr	r0, [pc, #72]	@ (800d398 <HAL_PCD_MspInit+0xa4>)
 800d350:	f7f5 ff76 	bl	8003240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d354:	4b0f      	ldr	r3, [pc, #60]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d358:	4a0e      	ldr	r2, [pc, #56]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d35a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d35e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d360:	2300      	movs	r3, #0
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	4b0b      	ldr	r3, [pc, #44]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d368:	4a0a      	ldr	r2, [pc, #40]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d36a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d36e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d370:	4b08      	ldr	r3, [pc, #32]	@ (800d394 <HAL_PCD_MspInit+0xa0>)
 800d372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d378:	60fb      	str	r3, [r7, #12]
 800d37a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d37c:	2200      	movs	r2, #0
 800d37e:	2100      	movs	r1, #0
 800d380:	2043      	movs	r0, #67	@ 0x43
 800d382:	f7f5 fb7a 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d386:	2043      	movs	r0, #67	@ 0x43
 800d388:	f7f5 fb93 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d38c:	bf00      	nop
 800d38e:	3728      	adds	r7, #40	@ 0x28
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	40023800 	.word	0x40023800
 800d398:	40020000 	.word	0x40020000

0800d39c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	f7fe fabd 	bl	800b932 <USBD_LL_SetupStage>
}
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d3d2:	78fa      	ldrb	r2, [r7, #3]
 800d3d4:	6879      	ldr	r1, [r7, #4]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	4413      	add	r3, r2
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	440b      	add	r3, r1
 800d3e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	78fb      	ldrb	r3, [r7, #3]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f7fe faf7 	bl	800b9dc <USBD_LL_DataOutStage>
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d408:	78fa      	ldrb	r2, [r7, #3]
 800d40a:	6879      	ldr	r1, [r7, #4]
 800d40c:	4613      	mov	r3, r2
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	4413      	add	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	440b      	add	r3, r1
 800d416:	3320      	adds	r3, #32
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	4619      	mov	r1, r3
 800d41e:	f7fe fb99 	bl	800bb54 <USBD_LL_DataInStage>
}
 800d422:	bf00      	nop
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b082      	sub	sp, #8
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fe fcdd 	bl	800bdf8 <USBD_LL_SOF>
}
 800d43e:	bf00      	nop
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b084      	sub	sp, #16
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d44e:	2301      	movs	r3, #1
 800d450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	79db      	ldrb	r3, [r3, #7]
 800d456:	2b02      	cmp	r3, #2
 800d458:	d001      	beq.n	800d45e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d45a:	f7f3 ffc5 	bl	80013e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d464:	7bfa      	ldrb	r2, [r7, #15]
 800d466:	4611      	mov	r1, r2
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fe fc81 	bl	800bd70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d474:	4618      	mov	r0, r3
 800d476:	f7fe fc28 	bl	800bcca <USBD_LL_Reset>
}
 800d47a:	bf00      	nop
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
	...

0800d484 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe fc7c 	bl	800bd90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	6812      	ldr	r2, [r2, #0]
 800d4a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d4aa:	f043 0301 	orr.w	r3, r3, #1
 800d4ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	7adb      	ldrb	r3, [r3, #11]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d005      	beq.n	800d4c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4b8:	4b04      	ldr	r3, [pc, #16]	@ (800d4cc <HAL_PCD_SuspendCallback+0x48>)
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	4a03      	ldr	r2, [pc, #12]	@ (800d4cc <HAL_PCD_SuspendCallback+0x48>)
 800d4be:	f043 0306 	orr.w	r3, r3, #6
 800d4c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d4c4:	bf00      	nop
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	e000ed00 	.word	0xe000ed00

0800d4d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe fc72 	bl	800bdc8 <USBD_LL_Resume>
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4fe:	78fa      	ldrb	r2, [r7, #3]
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f7fe fcca 	bl	800be9c <USBD_LL_IsoOUTIncomplete>
}
 800d508:	bf00      	nop
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d522:	78fa      	ldrb	r2, [r7, #3]
 800d524:	4611      	mov	r1, r2
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe fc86 	bl	800be38 <USBD_LL_IsoINIncomplete>
}
 800d52c:	bf00      	nop
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe fcdc 	bl	800bf00 <USBD_LL_DevConnected>
}
 800d548:	bf00      	nop
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe fcd9 	bl	800bf16 <USBD_LL_DevDisconnected>
}
 800d564:	bf00      	nop
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d13c      	bne.n	800d5f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d57c:	4a20      	ldr	r2, [pc, #128]	@ (800d600 <USBD_LL_Init+0x94>)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a1e      	ldr	r2, [pc, #120]	@ (800d600 <USBD_LL_Init+0x94>)
 800d588:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d58c:	4b1c      	ldr	r3, [pc, #112]	@ (800d600 <USBD_LL_Init+0x94>)
 800d58e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d592:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d594:	4b1a      	ldr	r3, [pc, #104]	@ (800d600 <USBD_LL_Init+0x94>)
 800d596:	2204      	movs	r2, #4
 800d598:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d59a:	4b19      	ldr	r3, [pc, #100]	@ (800d600 <USBD_LL_Init+0x94>)
 800d59c:	2202      	movs	r2, #2
 800d59e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d5a0:	4b17      	ldr	r3, [pc, #92]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d5a6:	4b16      	ldr	r3, [pc, #88]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d5ac:	4b14      	ldr	r3, [pc, #80]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d5b2:	4b13      	ldr	r3, [pc, #76]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d5b8:	4b11      	ldr	r3, [pc, #68]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d5be:	4b10      	ldr	r3, [pc, #64]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d5c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d5ca:	480d      	ldr	r0, [pc, #52]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5cc:	f7f9 fa97 	bl	8006afe <HAL_PCD_Init>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d5d6:	f7f3 ff07 	bl	80013e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d5da:	2180      	movs	r1, #128	@ 0x80
 800d5dc:	4808      	ldr	r0, [pc, #32]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5de:	f7fa fcc4 	bl	8007f6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d5e2:	2240      	movs	r2, #64	@ 0x40
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	4806      	ldr	r0, [pc, #24]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5e8:	f7fa fc78 	bl	8007edc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d5ec:	2280      	movs	r2, #128	@ 0x80
 800d5ee:	2101      	movs	r1, #1
 800d5f0:	4803      	ldr	r0, [pc, #12]	@ (800d600 <USBD_LL_Init+0x94>)
 800d5f2:	f7fa fc73 	bl	8007edc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	20001128 	.word	0x20001128

0800d604 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f9 fb7e 	bl	8006d1c <HAL_PCD_Start>
 800d620:	4603      	mov	r3, r0
 800d622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d624:	7bfb      	ldrb	r3, [r7, #15]
 800d626:	4618      	mov	r0, r3
 800d628:	f000 f942 	bl	800d8b0 <USBD_Get_USB_Status>
 800d62c:	4603      	mov	r3, r0
 800d62e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d630:	7bbb      	ldrb	r3, [r7, #14]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	4608      	mov	r0, r1
 800d644:	4611      	mov	r1, r2
 800d646:	461a      	mov	r2, r3
 800d648:	4603      	mov	r3, r0
 800d64a:	70fb      	strb	r3, [r7, #3]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70bb      	strb	r3, [r7, #2]
 800d650:	4613      	mov	r3, r2
 800d652:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d662:	78bb      	ldrb	r3, [r7, #2]
 800d664:	883a      	ldrh	r2, [r7, #0]
 800d666:	78f9      	ldrb	r1, [r7, #3]
 800d668:	f7fa f852 	bl	8007710 <HAL_PCD_EP_Open>
 800d66c:	4603      	mov	r3, r0
 800d66e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	4618      	mov	r0, r3
 800d674:	f000 f91c 	bl	800d8b0 <USBD_Get_USB_Status>
 800d678:	4603      	mov	r3, r0
 800d67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	460b      	mov	r3, r1
 800d690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d696:	2300      	movs	r3, #0
 800d698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6a0:	78fa      	ldrb	r2, [r7, #3]
 800d6a2:	4611      	mov	r1, r2
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fa f89d 	bl	80077e4 <HAL_PCD_EP_Close>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 f8fd 	bl	800d8b0 <USBD_Get_USB_Status>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6de:	78fa      	ldrb	r2, [r7, #3]
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fa f955 	bl	8007992 <HAL_PCD_EP_SetStall>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 f8de 	bl	800d8b0 <USBD_Get_USB_Status>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b084      	sub	sp, #16
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	460b      	mov	r3, r1
 800d70c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d712:	2300      	movs	r3, #0
 800d714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d71c:	78fa      	ldrb	r2, [r7, #3]
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f7fa f999 	bl	8007a58 <HAL_PCD_EP_ClrStall>
 800d726:	4603      	mov	r3, r0
 800d728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 f8bf 	bl	800d8b0 <USBD_Get_USB_Status>
 800d732:	4603      	mov	r3, r0
 800d734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d736:	7bbb      	ldrb	r3, [r7, #14]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	460b      	mov	r3, r1
 800d74a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d752:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	da0b      	bge.n	800d774 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d75c:	78fb      	ldrb	r3, [r7, #3]
 800d75e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d762:	68f9      	ldr	r1, [r7, #12]
 800d764:	4613      	mov	r3, r2
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	4413      	add	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	440b      	add	r3, r1
 800d76e:	3316      	adds	r3, #22
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	e00b      	b.n	800d78c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d77a:	68f9      	ldr	r1, [r7, #12]
 800d77c:	4613      	mov	r3, r2
 800d77e:	00db      	lsls	r3, r3, #3
 800d780:	4413      	add	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	440b      	add	r3, r1
 800d786:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d78a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3714      	adds	r7, #20
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7b2:	78fa      	ldrb	r2, [r7, #3]
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7f9 ff86 	bl	80076c8 <HAL_PCD_SetAddress>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 f874 	bl	800d8b0 <USBD_Get_USB_Status>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b086      	sub	sp, #24
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	603b      	str	r3, [r7, #0]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7f4:	7af9      	ldrb	r1, [r7, #11]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	f7fa f890 	bl	800791e <HAL_PCD_EP_Transmit>
 800d7fe:	4603      	mov	r3, r0
 800d800:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d802:	7dfb      	ldrb	r3, [r7, #23]
 800d804:	4618      	mov	r0, r3
 800d806:	f000 f853 	bl	800d8b0 <USBD_Get_USB_Status>
 800d80a:	4603      	mov	r3, r0
 800d80c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d80e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	607a      	str	r2, [r7, #4]
 800d822:	603b      	str	r3, [r7, #0]
 800d824:	460b      	mov	r3, r1
 800d826:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d82c:	2300      	movs	r3, #0
 800d82e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d836:	7af9      	ldrb	r1, [r7, #11]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	f7fa f81c 	bl	8007878 <HAL_PCD_EP_Receive>
 800d840:	4603      	mov	r3, r0
 800d842:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d844:	7dfb      	ldrb	r3, [r7, #23]
 800d846:	4618      	mov	r0, r3
 800d848:	f000 f832 	bl	800d8b0 <USBD_Get_USB_Status>
 800d84c:	4603      	mov	r3, r0
 800d84e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d850:	7dbb      	ldrb	r3, [r7, #22]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3718      	adds	r7, #24
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	460b      	mov	r3, r1
 800d864:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d86c:	78fa      	ldrb	r2, [r7, #3]
 800d86e:	4611      	mov	r1, r2
 800d870:	4618      	mov	r0, r3
 800d872:	f7fa f83c 	bl	80078ee <HAL_PCD_EP_GetRxCount>
 800d876:	4603      	mov	r3, r0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d888:	4b03      	ldr	r3, [pc, #12]	@ (800d898 <USBD_static_malloc+0x18>)
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	2000160c 	.word	0x2000160c

0800d89c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]

}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8be:	79fb      	ldrb	r3, [r7, #7]
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d817      	bhi.n	800d8f4 <USBD_Get_USB_Status+0x44>
 800d8c4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8cc <USBD_Get_USB_Status+0x1c>)
 800d8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ca:	bf00      	nop
 800d8cc:	0800d8dd 	.word	0x0800d8dd
 800d8d0:	0800d8e3 	.word	0x0800d8e3
 800d8d4:	0800d8e9 	.word	0x0800d8e9
 800d8d8:	0800d8ef 	.word	0x0800d8ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	73fb      	strb	r3, [r7, #15]
    break;
 800d8e0:	e00b      	b.n	800d8fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d8e6:	e008      	b.n	800d8fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ec:	e005      	b.n	800d8fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8ee:	2303      	movs	r3, #3
 800d8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d8f2:	e002      	b.n	800d8fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8f8:	bf00      	nop
  }
  return usb_status;
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <malloc>:
 800d908:	4b02      	ldr	r3, [pc, #8]	@ (800d914 <malloc+0xc>)
 800d90a:	4601      	mov	r1, r0
 800d90c:	6818      	ldr	r0, [r3, #0]
 800d90e:	f000 b825 	b.w	800d95c <_malloc_r>
 800d912:	bf00      	nop
 800d914:	20000108 	.word	0x20000108

0800d918 <sbrk_aligned>:
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	4e0f      	ldr	r6, [pc, #60]	@ (800d958 <sbrk_aligned+0x40>)
 800d91c:	460c      	mov	r4, r1
 800d91e:	6831      	ldr	r1, [r6, #0]
 800d920:	4605      	mov	r5, r0
 800d922:	b911      	cbnz	r1, 800d92a <sbrk_aligned+0x12>
 800d924:	f000 f8d0 	bl	800dac8 <_sbrk_r>
 800d928:	6030      	str	r0, [r6, #0]
 800d92a:	4621      	mov	r1, r4
 800d92c:	4628      	mov	r0, r5
 800d92e:	f000 f8cb 	bl	800dac8 <_sbrk_r>
 800d932:	1c43      	adds	r3, r0, #1
 800d934:	d103      	bne.n	800d93e <sbrk_aligned+0x26>
 800d936:	f04f 34ff 	mov.w	r4, #4294967295
 800d93a:	4620      	mov	r0, r4
 800d93c:	bd70      	pop	{r4, r5, r6, pc}
 800d93e:	1cc4      	adds	r4, r0, #3
 800d940:	f024 0403 	bic.w	r4, r4, #3
 800d944:	42a0      	cmp	r0, r4
 800d946:	d0f8      	beq.n	800d93a <sbrk_aligned+0x22>
 800d948:	1a21      	subs	r1, r4, r0
 800d94a:	4628      	mov	r0, r5
 800d94c:	f000 f8bc 	bl	800dac8 <_sbrk_r>
 800d950:	3001      	adds	r0, #1
 800d952:	d1f2      	bne.n	800d93a <sbrk_aligned+0x22>
 800d954:	e7ef      	b.n	800d936 <sbrk_aligned+0x1e>
 800d956:	bf00      	nop
 800d958:	2000182c 	.word	0x2000182c

0800d95c <_malloc_r>:
 800d95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d960:	1ccd      	adds	r5, r1, #3
 800d962:	f025 0503 	bic.w	r5, r5, #3
 800d966:	3508      	adds	r5, #8
 800d968:	2d0c      	cmp	r5, #12
 800d96a:	bf38      	it	cc
 800d96c:	250c      	movcc	r5, #12
 800d96e:	2d00      	cmp	r5, #0
 800d970:	4606      	mov	r6, r0
 800d972:	db01      	blt.n	800d978 <_malloc_r+0x1c>
 800d974:	42a9      	cmp	r1, r5
 800d976:	d904      	bls.n	800d982 <_malloc_r+0x26>
 800d978:	230c      	movs	r3, #12
 800d97a:	6033      	str	r3, [r6, #0]
 800d97c:	2000      	movs	r0, #0
 800d97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da58 <_malloc_r+0xfc>
 800d986:	f000 f869 	bl	800da5c <__malloc_lock>
 800d98a:	f8d8 3000 	ldr.w	r3, [r8]
 800d98e:	461c      	mov	r4, r3
 800d990:	bb44      	cbnz	r4, 800d9e4 <_malloc_r+0x88>
 800d992:	4629      	mov	r1, r5
 800d994:	4630      	mov	r0, r6
 800d996:	f7ff ffbf 	bl	800d918 <sbrk_aligned>
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	4604      	mov	r4, r0
 800d99e:	d158      	bne.n	800da52 <_malloc_r+0xf6>
 800d9a0:	f8d8 4000 	ldr.w	r4, [r8]
 800d9a4:	4627      	mov	r7, r4
 800d9a6:	2f00      	cmp	r7, #0
 800d9a8:	d143      	bne.n	800da32 <_malloc_r+0xd6>
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	d04b      	beq.n	800da46 <_malloc_r+0xea>
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	4639      	mov	r1, r7
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	eb04 0903 	add.w	r9, r4, r3
 800d9b8:	f000 f886 	bl	800dac8 <_sbrk_r>
 800d9bc:	4581      	cmp	r9, r0
 800d9be:	d142      	bne.n	800da46 <_malloc_r+0xea>
 800d9c0:	6821      	ldr	r1, [r4, #0]
 800d9c2:	1a6d      	subs	r5, r5, r1
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f7ff ffa6 	bl	800d918 <sbrk_aligned>
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	d03a      	beq.n	800da46 <_malloc_r+0xea>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	442b      	add	r3, r5
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	bb62      	cbnz	r2, 800da38 <_malloc_r+0xdc>
 800d9de:	f8c8 7000 	str.w	r7, [r8]
 800d9e2:	e00f      	b.n	800da04 <_malloc_r+0xa8>
 800d9e4:	6822      	ldr	r2, [r4, #0]
 800d9e6:	1b52      	subs	r2, r2, r5
 800d9e8:	d420      	bmi.n	800da2c <_malloc_r+0xd0>
 800d9ea:	2a0b      	cmp	r2, #11
 800d9ec:	d917      	bls.n	800da1e <_malloc_r+0xc2>
 800d9ee:	1961      	adds	r1, r4, r5
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	6025      	str	r5, [r4, #0]
 800d9f4:	bf18      	it	ne
 800d9f6:	6059      	strne	r1, [r3, #4]
 800d9f8:	6863      	ldr	r3, [r4, #4]
 800d9fa:	bf08      	it	eq
 800d9fc:	f8c8 1000 	streq.w	r1, [r8]
 800da00:	5162      	str	r2, [r4, r5]
 800da02:	604b      	str	r3, [r1, #4]
 800da04:	4630      	mov	r0, r6
 800da06:	f000 f82f 	bl	800da68 <__malloc_unlock>
 800da0a:	f104 000b 	add.w	r0, r4, #11
 800da0e:	1d23      	adds	r3, r4, #4
 800da10:	f020 0007 	bic.w	r0, r0, #7
 800da14:	1ac2      	subs	r2, r0, r3
 800da16:	bf1c      	itt	ne
 800da18:	1a1b      	subne	r3, r3, r0
 800da1a:	50a3      	strne	r3, [r4, r2]
 800da1c:	e7af      	b.n	800d97e <_malloc_r+0x22>
 800da1e:	6862      	ldr	r2, [r4, #4]
 800da20:	42a3      	cmp	r3, r4
 800da22:	bf0c      	ite	eq
 800da24:	f8c8 2000 	streq.w	r2, [r8]
 800da28:	605a      	strne	r2, [r3, #4]
 800da2a:	e7eb      	b.n	800da04 <_malloc_r+0xa8>
 800da2c:	4623      	mov	r3, r4
 800da2e:	6864      	ldr	r4, [r4, #4]
 800da30:	e7ae      	b.n	800d990 <_malloc_r+0x34>
 800da32:	463c      	mov	r4, r7
 800da34:	687f      	ldr	r7, [r7, #4]
 800da36:	e7b6      	b.n	800d9a6 <_malloc_r+0x4a>
 800da38:	461a      	mov	r2, r3
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	42a3      	cmp	r3, r4
 800da3e:	d1fb      	bne.n	800da38 <_malloc_r+0xdc>
 800da40:	2300      	movs	r3, #0
 800da42:	6053      	str	r3, [r2, #4]
 800da44:	e7de      	b.n	800da04 <_malloc_r+0xa8>
 800da46:	230c      	movs	r3, #12
 800da48:	6033      	str	r3, [r6, #0]
 800da4a:	4630      	mov	r0, r6
 800da4c:	f000 f80c 	bl	800da68 <__malloc_unlock>
 800da50:	e794      	b.n	800d97c <_malloc_r+0x20>
 800da52:	6005      	str	r5, [r0, #0]
 800da54:	e7d6      	b.n	800da04 <_malloc_r+0xa8>
 800da56:	bf00      	nop
 800da58:	20001830 	.word	0x20001830

0800da5c <__malloc_lock>:
 800da5c:	4801      	ldr	r0, [pc, #4]	@ (800da64 <__malloc_lock+0x8>)
 800da5e:	f000 b86d 	b.w	800db3c <__retarget_lock_acquire_recursive>
 800da62:	bf00      	nop
 800da64:	20001970 	.word	0x20001970

0800da68 <__malloc_unlock>:
 800da68:	4801      	ldr	r0, [pc, #4]	@ (800da70 <__malloc_unlock+0x8>)
 800da6a:	f000 b868 	b.w	800db3e <__retarget_lock_release_recursive>
 800da6e:	bf00      	nop
 800da70:	20001970 	.word	0x20001970

0800da74 <siprintf>:
 800da74:	b40e      	push	{r1, r2, r3}
 800da76:	b510      	push	{r4, lr}
 800da78:	b09d      	sub	sp, #116	@ 0x74
 800da7a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800da7c:	9002      	str	r0, [sp, #8]
 800da7e:	9006      	str	r0, [sp, #24]
 800da80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800da84:	480a      	ldr	r0, [pc, #40]	@ (800dab0 <siprintf+0x3c>)
 800da86:	9107      	str	r1, [sp, #28]
 800da88:	9104      	str	r1, [sp, #16]
 800da8a:	490a      	ldr	r1, [pc, #40]	@ (800dab4 <siprintf+0x40>)
 800da8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da90:	9105      	str	r1, [sp, #20]
 800da92:	2400      	movs	r4, #0
 800da94:	a902      	add	r1, sp, #8
 800da96:	6800      	ldr	r0, [r0, #0]
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800da9c:	f000 f8f6 	bl	800dc8c <_svfiprintf_r>
 800daa0:	9b02      	ldr	r3, [sp, #8]
 800daa2:	701c      	strb	r4, [r3, #0]
 800daa4:	b01d      	add	sp, #116	@ 0x74
 800daa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daaa:	b003      	add	sp, #12
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	20000108 	.word	0x20000108
 800dab4:	ffff0208 	.word	0xffff0208

0800dab8 <memset>:
 800dab8:	4402      	add	r2, r0
 800daba:	4603      	mov	r3, r0
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d100      	bne.n	800dac2 <memset+0xa>
 800dac0:	4770      	bx	lr
 800dac2:	f803 1b01 	strb.w	r1, [r3], #1
 800dac6:	e7f9      	b.n	800dabc <memset+0x4>

0800dac8 <_sbrk_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d06      	ldr	r5, [pc, #24]	@ (800dae4 <_sbrk_r+0x1c>)
 800dacc:	2300      	movs	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	602b      	str	r3, [r5, #0]
 800dad4:	f7f4 fa4e 	bl	8001f74 <_sbrk>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d102      	bne.n	800dae2 <_sbrk_r+0x1a>
 800dadc:	682b      	ldr	r3, [r5, #0]
 800dade:	b103      	cbz	r3, 800dae2 <_sbrk_r+0x1a>
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	2000196c 	.word	0x2000196c

0800dae8 <__errno>:
 800dae8:	4b01      	ldr	r3, [pc, #4]	@ (800daf0 <__errno+0x8>)
 800daea:	6818      	ldr	r0, [r3, #0]
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	20000108 	.word	0x20000108

0800daf4 <__libc_init_array>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	4d0d      	ldr	r5, [pc, #52]	@ (800db2c <__libc_init_array+0x38>)
 800daf8:	4c0d      	ldr	r4, [pc, #52]	@ (800db30 <__libc_init_array+0x3c>)
 800dafa:	1b64      	subs	r4, r4, r5
 800dafc:	10a4      	asrs	r4, r4, #2
 800dafe:	2600      	movs	r6, #0
 800db00:	42a6      	cmp	r6, r4
 800db02:	d109      	bne.n	800db18 <__libc_init_array+0x24>
 800db04:	4d0b      	ldr	r5, [pc, #44]	@ (800db34 <__libc_init_array+0x40>)
 800db06:	4c0c      	ldr	r4, [pc, #48]	@ (800db38 <__libc_init_array+0x44>)
 800db08:	f000 fba6 	bl	800e258 <_init>
 800db0c:	1b64      	subs	r4, r4, r5
 800db0e:	10a4      	asrs	r4, r4, #2
 800db10:	2600      	movs	r6, #0
 800db12:	42a6      	cmp	r6, r4
 800db14:	d105      	bne.n	800db22 <__libc_init_array+0x2e>
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	f855 3b04 	ldr.w	r3, [r5], #4
 800db1c:	4798      	blx	r3
 800db1e:	3601      	adds	r6, #1
 800db20:	e7ee      	b.n	800db00 <__libc_init_array+0xc>
 800db22:	f855 3b04 	ldr.w	r3, [r5], #4
 800db26:	4798      	blx	r3
 800db28:	3601      	adds	r6, #1
 800db2a:	e7f2      	b.n	800db12 <__libc_init_array+0x1e>
 800db2c:	0800e724 	.word	0x0800e724
 800db30:	0800e724 	.word	0x0800e724
 800db34:	0800e724 	.word	0x0800e724
 800db38:	0800e728 	.word	0x0800e728

0800db3c <__retarget_lock_acquire_recursive>:
 800db3c:	4770      	bx	lr

0800db3e <__retarget_lock_release_recursive>:
 800db3e:	4770      	bx	lr

0800db40 <_free_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4605      	mov	r5, r0
 800db44:	2900      	cmp	r1, #0
 800db46:	d041      	beq.n	800dbcc <_free_r+0x8c>
 800db48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db4c:	1f0c      	subs	r4, r1, #4
 800db4e:	2b00      	cmp	r3, #0
 800db50:	bfb8      	it	lt
 800db52:	18e4      	addlt	r4, r4, r3
 800db54:	f7ff ff82 	bl	800da5c <__malloc_lock>
 800db58:	4a1d      	ldr	r2, [pc, #116]	@ (800dbd0 <_free_r+0x90>)
 800db5a:	6813      	ldr	r3, [r2, #0]
 800db5c:	b933      	cbnz	r3, 800db6c <_free_r+0x2c>
 800db5e:	6063      	str	r3, [r4, #4]
 800db60:	6014      	str	r4, [r2, #0]
 800db62:	4628      	mov	r0, r5
 800db64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db68:	f7ff bf7e 	b.w	800da68 <__malloc_unlock>
 800db6c:	42a3      	cmp	r3, r4
 800db6e:	d908      	bls.n	800db82 <_free_r+0x42>
 800db70:	6820      	ldr	r0, [r4, #0]
 800db72:	1821      	adds	r1, r4, r0
 800db74:	428b      	cmp	r3, r1
 800db76:	bf01      	itttt	eq
 800db78:	6819      	ldreq	r1, [r3, #0]
 800db7a:	685b      	ldreq	r3, [r3, #4]
 800db7c:	1809      	addeq	r1, r1, r0
 800db7e:	6021      	streq	r1, [r4, #0]
 800db80:	e7ed      	b.n	800db5e <_free_r+0x1e>
 800db82:	461a      	mov	r2, r3
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	b10b      	cbz	r3, 800db8c <_free_r+0x4c>
 800db88:	42a3      	cmp	r3, r4
 800db8a:	d9fa      	bls.n	800db82 <_free_r+0x42>
 800db8c:	6811      	ldr	r1, [r2, #0]
 800db8e:	1850      	adds	r0, r2, r1
 800db90:	42a0      	cmp	r0, r4
 800db92:	d10b      	bne.n	800dbac <_free_r+0x6c>
 800db94:	6820      	ldr	r0, [r4, #0]
 800db96:	4401      	add	r1, r0
 800db98:	1850      	adds	r0, r2, r1
 800db9a:	4283      	cmp	r3, r0
 800db9c:	6011      	str	r1, [r2, #0]
 800db9e:	d1e0      	bne.n	800db62 <_free_r+0x22>
 800dba0:	6818      	ldr	r0, [r3, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	6053      	str	r3, [r2, #4]
 800dba6:	4408      	add	r0, r1
 800dba8:	6010      	str	r0, [r2, #0]
 800dbaa:	e7da      	b.n	800db62 <_free_r+0x22>
 800dbac:	d902      	bls.n	800dbb4 <_free_r+0x74>
 800dbae:	230c      	movs	r3, #12
 800dbb0:	602b      	str	r3, [r5, #0]
 800dbb2:	e7d6      	b.n	800db62 <_free_r+0x22>
 800dbb4:	6820      	ldr	r0, [r4, #0]
 800dbb6:	1821      	adds	r1, r4, r0
 800dbb8:	428b      	cmp	r3, r1
 800dbba:	bf04      	itt	eq
 800dbbc:	6819      	ldreq	r1, [r3, #0]
 800dbbe:	685b      	ldreq	r3, [r3, #4]
 800dbc0:	6063      	str	r3, [r4, #4]
 800dbc2:	bf04      	itt	eq
 800dbc4:	1809      	addeq	r1, r1, r0
 800dbc6:	6021      	streq	r1, [r4, #0]
 800dbc8:	6054      	str	r4, [r2, #4]
 800dbca:	e7ca      	b.n	800db62 <_free_r+0x22>
 800dbcc:	bd38      	pop	{r3, r4, r5, pc}
 800dbce:	bf00      	nop
 800dbd0:	20001830 	.word	0x20001830

0800dbd4 <__ssputs_r>:
 800dbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd8:	688e      	ldr	r6, [r1, #8]
 800dbda:	461f      	mov	r7, r3
 800dbdc:	42be      	cmp	r6, r7
 800dbde:	680b      	ldr	r3, [r1, #0]
 800dbe0:	4682      	mov	sl, r0
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	4690      	mov	r8, r2
 800dbe6:	d82d      	bhi.n	800dc44 <__ssputs_r+0x70>
 800dbe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dbf0:	d026      	beq.n	800dc40 <__ssputs_r+0x6c>
 800dbf2:	6965      	ldr	r5, [r4, #20]
 800dbf4:	6909      	ldr	r1, [r1, #16]
 800dbf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbfa:	eba3 0901 	sub.w	r9, r3, r1
 800dbfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc02:	1c7b      	adds	r3, r7, #1
 800dc04:	444b      	add	r3, r9
 800dc06:	106d      	asrs	r5, r5, #1
 800dc08:	429d      	cmp	r5, r3
 800dc0a:	bf38      	it	cc
 800dc0c:	461d      	movcc	r5, r3
 800dc0e:	0553      	lsls	r3, r2, #21
 800dc10:	d527      	bpl.n	800dc62 <__ssputs_r+0x8e>
 800dc12:	4629      	mov	r1, r5
 800dc14:	f7ff fea2 	bl	800d95c <_malloc_r>
 800dc18:	4606      	mov	r6, r0
 800dc1a:	b360      	cbz	r0, 800dc76 <__ssputs_r+0xa2>
 800dc1c:	6921      	ldr	r1, [r4, #16]
 800dc1e:	464a      	mov	r2, r9
 800dc20:	f000 fad6 	bl	800e1d0 <memcpy>
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc2e:	81a3      	strh	r3, [r4, #12]
 800dc30:	6126      	str	r6, [r4, #16]
 800dc32:	6165      	str	r5, [r4, #20]
 800dc34:	444e      	add	r6, r9
 800dc36:	eba5 0509 	sub.w	r5, r5, r9
 800dc3a:	6026      	str	r6, [r4, #0]
 800dc3c:	60a5      	str	r5, [r4, #8]
 800dc3e:	463e      	mov	r6, r7
 800dc40:	42be      	cmp	r6, r7
 800dc42:	d900      	bls.n	800dc46 <__ssputs_r+0x72>
 800dc44:	463e      	mov	r6, r7
 800dc46:	6820      	ldr	r0, [r4, #0]
 800dc48:	4632      	mov	r2, r6
 800dc4a:	4641      	mov	r1, r8
 800dc4c:	f000 faa6 	bl	800e19c <memmove>
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	1b9b      	subs	r3, r3, r6
 800dc54:	60a3      	str	r3, [r4, #8]
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	4433      	add	r3, r6
 800dc5a:	6023      	str	r3, [r4, #0]
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc62:	462a      	mov	r2, r5
 800dc64:	f000 fac2 	bl	800e1ec <_realloc_r>
 800dc68:	4606      	mov	r6, r0
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d1e0      	bne.n	800dc30 <__ssputs_r+0x5c>
 800dc6e:	6921      	ldr	r1, [r4, #16]
 800dc70:	4650      	mov	r0, sl
 800dc72:	f7ff ff65 	bl	800db40 <_free_r>
 800dc76:	230c      	movs	r3, #12
 800dc78:	f8ca 3000 	str.w	r3, [sl]
 800dc7c:	89a3      	ldrh	r3, [r4, #12]
 800dc7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc82:	81a3      	strh	r3, [r4, #12]
 800dc84:	f04f 30ff 	mov.w	r0, #4294967295
 800dc88:	e7e9      	b.n	800dc5e <__ssputs_r+0x8a>
	...

0800dc8c <_svfiprintf_r>:
 800dc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc90:	4698      	mov	r8, r3
 800dc92:	898b      	ldrh	r3, [r1, #12]
 800dc94:	061b      	lsls	r3, r3, #24
 800dc96:	b09d      	sub	sp, #116	@ 0x74
 800dc98:	4607      	mov	r7, r0
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	d510      	bpl.n	800dcc2 <_svfiprintf_r+0x36>
 800dca0:	690b      	ldr	r3, [r1, #16]
 800dca2:	b973      	cbnz	r3, 800dcc2 <_svfiprintf_r+0x36>
 800dca4:	2140      	movs	r1, #64	@ 0x40
 800dca6:	f7ff fe59 	bl	800d95c <_malloc_r>
 800dcaa:	6028      	str	r0, [r5, #0]
 800dcac:	6128      	str	r0, [r5, #16]
 800dcae:	b930      	cbnz	r0, 800dcbe <_svfiprintf_r+0x32>
 800dcb0:	230c      	movs	r3, #12
 800dcb2:	603b      	str	r3, [r7, #0]
 800dcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb8:	b01d      	add	sp, #116	@ 0x74
 800dcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbe:	2340      	movs	r3, #64	@ 0x40
 800dcc0:	616b      	str	r3, [r5, #20]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcc6:	2320      	movs	r3, #32
 800dcc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dccc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcd0:	2330      	movs	r3, #48	@ 0x30
 800dcd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800de70 <_svfiprintf_r+0x1e4>
 800dcd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcda:	f04f 0901 	mov.w	r9, #1
 800dcde:	4623      	mov	r3, r4
 800dce0:	469a      	mov	sl, r3
 800dce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dce6:	b10a      	cbz	r2, 800dcec <_svfiprintf_r+0x60>
 800dce8:	2a25      	cmp	r2, #37	@ 0x25
 800dcea:	d1f9      	bne.n	800dce0 <_svfiprintf_r+0x54>
 800dcec:	ebba 0b04 	subs.w	fp, sl, r4
 800dcf0:	d00b      	beq.n	800dd0a <_svfiprintf_r+0x7e>
 800dcf2:	465b      	mov	r3, fp
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	4638      	mov	r0, r7
 800dcfa:	f7ff ff6b 	bl	800dbd4 <__ssputs_r>
 800dcfe:	3001      	adds	r0, #1
 800dd00:	f000 80a7 	beq.w	800de52 <_svfiprintf_r+0x1c6>
 800dd04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd06:	445a      	add	r2, fp
 800dd08:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd0a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f000 809f 	beq.w	800de52 <_svfiprintf_r+0x1c6>
 800dd14:	2300      	movs	r3, #0
 800dd16:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd1e:	f10a 0a01 	add.w	sl, sl, #1
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	9307      	str	r3, [sp, #28]
 800dd26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd2c:	4654      	mov	r4, sl
 800dd2e:	2205      	movs	r2, #5
 800dd30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd34:	484e      	ldr	r0, [pc, #312]	@ (800de70 <_svfiprintf_r+0x1e4>)
 800dd36:	f7f2 fa53 	bl	80001e0 <memchr>
 800dd3a:	9a04      	ldr	r2, [sp, #16]
 800dd3c:	b9d8      	cbnz	r0, 800dd76 <_svfiprintf_r+0xea>
 800dd3e:	06d0      	lsls	r0, r2, #27
 800dd40:	bf44      	itt	mi
 800dd42:	2320      	movmi	r3, #32
 800dd44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd48:	0711      	lsls	r1, r2, #28
 800dd4a:	bf44      	itt	mi
 800dd4c:	232b      	movmi	r3, #43	@ 0x2b
 800dd4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd52:	f89a 3000 	ldrb.w	r3, [sl]
 800dd56:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd58:	d015      	beq.n	800dd86 <_svfiprintf_r+0xfa>
 800dd5a:	9a07      	ldr	r2, [sp, #28]
 800dd5c:	4654      	mov	r4, sl
 800dd5e:	2000      	movs	r0, #0
 800dd60:	f04f 0c0a 	mov.w	ip, #10
 800dd64:	4621      	mov	r1, r4
 800dd66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd6a:	3b30      	subs	r3, #48	@ 0x30
 800dd6c:	2b09      	cmp	r3, #9
 800dd6e:	d94b      	bls.n	800de08 <_svfiprintf_r+0x17c>
 800dd70:	b1b0      	cbz	r0, 800dda0 <_svfiprintf_r+0x114>
 800dd72:	9207      	str	r2, [sp, #28]
 800dd74:	e014      	b.n	800dda0 <_svfiprintf_r+0x114>
 800dd76:	eba0 0308 	sub.w	r3, r0, r8
 800dd7a:	fa09 f303 	lsl.w	r3, r9, r3
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	9304      	str	r3, [sp, #16]
 800dd82:	46a2      	mov	sl, r4
 800dd84:	e7d2      	b.n	800dd2c <_svfiprintf_r+0xa0>
 800dd86:	9b03      	ldr	r3, [sp, #12]
 800dd88:	1d19      	adds	r1, r3, #4
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	9103      	str	r1, [sp, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	bfbb      	ittet	lt
 800dd92:	425b      	neglt	r3, r3
 800dd94:	f042 0202 	orrlt.w	r2, r2, #2
 800dd98:	9307      	strge	r3, [sp, #28]
 800dd9a:	9307      	strlt	r3, [sp, #28]
 800dd9c:	bfb8      	it	lt
 800dd9e:	9204      	strlt	r2, [sp, #16]
 800dda0:	7823      	ldrb	r3, [r4, #0]
 800dda2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dda4:	d10a      	bne.n	800ddbc <_svfiprintf_r+0x130>
 800dda6:	7863      	ldrb	r3, [r4, #1]
 800dda8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddaa:	d132      	bne.n	800de12 <_svfiprintf_r+0x186>
 800ddac:	9b03      	ldr	r3, [sp, #12]
 800ddae:	1d1a      	adds	r2, r3, #4
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	9203      	str	r2, [sp, #12]
 800ddb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddb8:	3402      	adds	r4, #2
 800ddba:	9305      	str	r3, [sp, #20]
 800ddbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800de80 <_svfiprintf_r+0x1f4>
 800ddc0:	7821      	ldrb	r1, [r4, #0]
 800ddc2:	2203      	movs	r2, #3
 800ddc4:	4650      	mov	r0, sl
 800ddc6:	f7f2 fa0b 	bl	80001e0 <memchr>
 800ddca:	b138      	cbz	r0, 800dddc <_svfiprintf_r+0x150>
 800ddcc:	9b04      	ldr	r3, [sp, #16]
 800ddce:	eba0 000a 	sub.w	r0, r0, sl
 800ddd2:	2240      	movs	r2, #64	@ 0x40
 800ddd4:	4082      	lsls	r2, r0
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	3401      	adds	r4, #1
 800ddda:	9304      	str	r3, [sp, #16]
 800dddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dde0:	4824      	ldr	r0, [pc, #144]	@ (800de74 <_svfiprintf_r+0x1e8>)
 800dde2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dde6:	2206      	movs	r2, #6
 800dde8:	f7f2 f9fa 	bl	80001e0 <memchr>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d036      	beq.n	800de5e <_svfiprintf_r+0x1d2>
 800ddf0:	4b21      	ldr	r3, [pc, #132]	@ (800de78 <_svfiprintf_r+0x1ec>)
 800ddf2:	bb1b      	cbnz	r3, 800de3c <_svfiprintf_r+0x1b0>
 800ddf4:	9b03      	ldr	r3, [sp, #12]
 800ddf6:	3307      	adds	r3, #7
 800ddf8:	f023 0307 	bic.w	r3, r3, #7
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	9303      	str	r3, [sp, #12]
 800de00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de02:	4433      	add	r3, r6
 800de04:	9309      	str	r3, [sp, #36]	@ 0x24
 800de06:	e76a      	b.n	800dcde <_svfiprintf_r+0x52>
 800de08:	fb0c 3202 	mla	r2, ip, r2, r3
 800de0c:	460c      	mov	r4, r1
 800de0e:	2001      	movs	r0, #1
 800de10:	e7a8      	b.n	800dd64 <_svfiprintf_r+0xd8>
 800de12:	2300      	movs	r3, #0
 800de14:	3401      	adds	r4, #1
 800de16:	9305      	str	r3, [sp, #20]
 800de18:	4619      	mov	r1, r3
 800de1a:	f04f 0c0a 	mov.w	ip, #10
 800de1e:	4620      	mov	r0, r4
 800de20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de24:	3a30      	subs	r2, #48	@ 0x30
 800de26:	2a09      	cmp	r2, #9
 800de28:	d903      	bls.n	800de32 <_svfiprintf_r+0x1a6>
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d0c6      	beq.n	800ddbc <_svfiprintf_r+0x130>
 800de2e:	9105      	str	r1, [sp, #20]
 800de30:	e7c4      	b.n	800ddbc <_svfiprintf_r+0x130>
 800de32:	fb0c 2101 	mla	r1, ip, r1, r2
 800de36:	4604      	mov	r4, r0
 800de38:	2301      	movs	r3, #1
 800de3a:	e7f0      	b.n	800de1e <_svfiprintf_r+0x192>
 800de3c:	ab03      	add	r3, sp, #12
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	462a      	mov	r2, r5
 800de42:	4b0e      	ldr	r3, [pc, #56]	@ (800de7c <_svfiprintf_r+0x1f0>)
 800de44:	a904      	add	r1, sp, #16
 800de46:	4638      	mov	r0, r7
 800de48:	f3af 8000 	nop.w
 800de4c:	1c42      	adds	r2, r0, #1
 800de4e:	4606      	mov	r6, r0
 800de50:	d1d6      	bne.n	800de00 <_svfiprintf_r+0x174>
 800de52:	89ab      	ldrh	r3, [r5, #12]
 800de54:	065b      	lsls	r3, r3, #25
 800de56:	f53f af2d 	bmi.w	800dcb4 <_svfiprintf_r+0x28>
 800de5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de5c:	e72c      	b.n	800dcb8 <_svfiprintf_r+0x2c>
 800de5e:	ab03      	add	r3, sp, #12
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	462a      	mov	r2, r5
 800de64:	4b05      	ldr	r3, [pc, #20]	@ (800de7c <_svfiprintf_r+0x1f0>)
 800de66:	a904      	add	r1, sp, #16
 800de68:	4638      	mov	r0, r7
 800de6a:	f000 f879 	bl	800df60 <_printf_i>
 800de6e:	e7ed      	b.n	800de4c <_svfiprintf_r+0x1c0>
 800de70:	0800e6e8 	.word	0x0800e6e8
 800de74:	0800e6f2 	.word	0x0800e6f2
 800de78:	00000000 	.word	0x00000000
 800de7c:	0800dbd5 	.word	0x0800dbd5
 800de80:	0800e6ee 	.word	0x0800e6ee

0800de84 <_printf_common>:
 800de84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de88:	4616      	mov	r6, r2
 800de8a:	4698      	mov	r8, r3
 800de8c:	688a      	ldr	r2, [r1, #8]
 800de8e:	690b      	ldr	r3, [r1, #16]
 800de90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de94:	4293      	cmp	r3, r2
 800de96:	bfb8      	it	lt
 800de98:	4613      	movlt	r3, r2
 800de9a:	6033      	str	r3, [r6, #0]
 800de9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dea0:	4607      	mov	r7, r0
 800dea2:	460c      	mov	r4, r1
 800dea4:	b10a      	cbz	r2, 800deaa <_printf_common+0x26>
 800dea6:	3301      	adds	r3, #1
 800dea8:	6033      	str	r3, [r6, #0]
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	0699      	lsls	r1, r3, #26
 800deae:	bf42      	ittt	mi
 800deb0:	6833      	ldrmi	r3, [r6, #0]
 800deb2:	3302      	addmi	r3, #2
 800deb4:	6033      	strmi	r3, [r6, #0]
 800deb6:	6825      	ldr	r5, [r4, #0]
 800deb8:	f015 0506 	ands.w	r5, r5, #6
 800debc:	d106      	bne.n	800decc <_printf_common+0x48>
 800debe:	f104 0a19 	add.w	sl, r4, #25
 800dec2:	68e3      	ldr	r3, [r4, #12]
 800dec4:	6832      	ldr	r2, [r6, #0]
 800dec6:	1a9b      	subs	r3, r3, r2
 800dec8:	42ab      	cmp	r3, r5
 800deca:	dc26      	bgt.n	800df1a <_printf_common+0x96>
 800decc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ded0:	6822      	ldr	r2, [r4, #0]
 800ded2:	3b00      	subs	r3, #0
 800ded4:	bf18      	it	ne
 800ded6:	2301      	movne	r3, #1
 800ded8:	0692      	lsls	r2, r2, #26
 800deda:	d42b      	bmi.n	800df34 <_printf_common+0xb0>
 800dedc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dee0:	4641      	mov	r1, r8
 800dee2:	4638      	mov	r0, r7
 800dee4:	47c8      	blx	r9
 800dee6:	3001      	adds	r0, #1
 800dee8:	d01e      	beq.n	800df28 <_printf_common+0xa4>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	6922      	ldr	r2, [r4, #16]
 800deee:	f003 0306 	and.w	r3, r3, #6
 800def2:	2b04      	cmp	r3, #4
 800def4:	bf02      	ittt	eq
 800def6:	68e5      	ldreq	r5, [r4, #12]
 800def8:	6833      	ldreq	r3, [r6, #0]
 800defa:	1aed      	subeq	r5, r5, r3
 800defc:	68a3      	ldr	r3, [r4, #8]
 800defe:	bf0c      	ite	eq
 800df00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df04:	2500      	movne	r5, #0
 800df06:	4293      	cmp	r3, r2
 800df08:	bfc4      	itt	gt
 800df0a:	1a9b      	subgt	r3, r3, r2
 800df0c:	18ed      	addgt	r5, r5, r3
 800df0e:	2600      	movs	r6, #0
 800df10:	341a      	adds	r4, #26
 800df12:	42b5      	cmp	r5, r6
 800df14:	d11a      	bne.n	800df4c <_printf_common+0xc8>
 800df16:	2000      	movs	r0, #0
 800df18:	e008      	b.n	800df2c <_printf_common+0xa8>
 800df1a:	2301      	movs	r3, #1
 800df1c:	4652      	mov	r2, sl
 800df1e:	4641      	mov	r1, r8
 800df20:	4638      	mov	r0, r7
 800df22:	47c8      	blx	r9
 800df24:	3001      	adds	r0, #1
 800df26:	d103      	bne.n	800df30 <_printf_common+0xac>
 800df28:	f04f 30ff 	mov.w	r0, #4294967295
 800df2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df30:	3501      	adds	r5, #1
 800df32:	e7c6      	b.n	800dec2 <_printf_common+0x3e>
 800df34:	18e1      	adds	r1, r4, r3
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	2030      	movs	r0, #48	@ 0x30
 800df3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df3e:	4422      	add	r2, r4
 800df40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df48:	3302      	adds	r3, #2
 800df4a:	e7c7      	b.n	800dedc <_printf_common+0x58>
 800df4c:	2301      	movs	r3, #1
 800df4e:	4622      	mov	r2, r4
 800df50:	4641      	mov	r1, r8
 800df52:	4638      	mov	r0, r7
 800df54:	47c8      	blx	r9
 800df56:	3001      	adds	r0, #1
 800df58:	d0e6      	beq.n	800df28 <_printf_common+0xa4>
 800df5a:	3601      	adds	r6, #1
 800df5c:	e7d9      	b.n	800df12 <_printf_common+0x8e>
	...

0800df60 <_printf_i>:
 800df60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df64:	7e0f      	ldrb	r7, [r1, #24]
 800df66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df68:	2f78      	cmp	r7, #120	@ 0x78
 800df6a:	4691      	mov	r9, r2
 800df6c:	4680      	mov	r8, r0
 800df6e:	460c      	mov	r4, r1
 800df70:	469a      	mov	sl, r3
 800df72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df76:	d807      	bhi.n	800df88 <_printf_i+0x28>
 800df78:	2f62      	cmp	r7, #98	@ 0x62
 800df7a:	d80a      	bhi.n	800df92 <_printf_i+0x32>
 800df7c:	2f00      	cmp	r7, #0
 800df7e:	f000 80d1 	beq.w	800e124 <_printf_i+0x1c4>
 800df82:	2f58      	cmp	r7, #88	@ 0x58
 800df84:	f000 80b8 	beq.w	800e0f8 <_printf_i+0x198>
 800df88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df90:	e03a      	b.n	800e008 <_printf_i+0xa8>
 800df92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df96:	2b15      	cmp	r3, #21
 800df98:	d8f6      	bhi.n	800df88 <_printf_i+0x28>
 800df9a:	a101      	add	r1, pc, #4	@ (adr r1, 800dfa0 <_printf_i+0x40>)
 800df9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfa0:	0800dff9 	.word	0x0800dff9
 800dfa4:	0800e00d 	.word	0x0800e00d
 800dfa8:	0800df89 	.word	0x0800df89
 800dfac:	0800df89 	.word	0x0800df89
 800dfb0:	0800df89 	.word	0x0800df89
 800dfb4:	0800df89 	.word	0x0800df89
 800dfb8:	0800e00d 	.word	0x0800e00d
 800dfbc:	0800df89 	.word	0x0800df89
 800dfc0:	0800df89 	.word	0x0800df89
 800dfc4:	0800df89 	.word	0x0800df89
 800dfc8:	0800df89 	.word	0x0800df89
 800dfcc:	0800e10b 	.word	0x0800e10b
 800dfd0:	0800e037 	.word	0x0800e037
 800dfd4:	0800e0c5 	.word	0x0800e0c5
 800dfd8:	0800df89 	.word	0x0800df89
 800dfdc:	0800df89 	.word	0x0800df89
 800dfe0:	0800e12d 	.word	0x0800e12d
 800dfe4:	0800df89 	.word	0x0800df89
 800dfe8:	0800e037 	.word	0x0800e037
 800dfec:	0800df89 	.word	0x0800df89
 800dff0:	0800df89 	.word	0x0800df89
 800dff4:	0800e0cd 	.word	0x0800e0cd
 800dff8:	6833      	ldr	r3, [r6, #0]
 800dffa:	1d1a      	adds	r2, r3, #4
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	6032      	str	r2, [r6, #0]
 800e000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e008:	2301      	movs	r3, #1
 800e00a:	e09c      	b.n	800e146 <_printf_i+0x1e6>
 800e00c:	6833      	ldr	r3, [r6, #0]
 800e00e:	6820      	ldr	r0, [r4, #0]
 800e010:	1d19      	adds	r1, r3, #4
 800e012:	6031      	str	r1, [r6, #0]
 800e014:	0606      	lsls	r6, r0, #24
 800e016:	d501      	bpl.n	800e01c <_printf_i+0xbc>
 800e018:	681d      	ldr	r5, [r3, #0]
 800e01a:	e003      	b.n	800e024 <_printf_i+0xc4>
 800e01c:	0645      	lsls	r5, r0, #25
 800e01e:	d5fb      	bpl.n	800e018 <_printf_i+0xb8>
 800e020:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e024:	2d00      	cmp	r5, #0
 800e026:	da03      	bge.n	800e030 <_printf_i+0xd0>
 800e028:	232d      	movs	r3, #45	@ 0x2d
 800e02a:	426d      	negs	r5, r5
 800e02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e030:	4858      	ldr	r0, [pc, #352]	@ (800e194 <_printf_i+0x234>)
 800e032:	230a      	movs	r3, #10
 800e034:	e011      	b.n	800e05a <_printf_i+0xfa>
 800e036:	6821      	ldr	r1, [r4, #0]
 800e038:	6833      	ldr	r3, [r6, #0]
 800e03a:	0608      	lsls	r0, r1, #24
 800e03c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e040:	d402      	bmi.n	800e048 <_printf_i+0xe8>
 800e042:	0649      	lsls	r1, r1, #25
 800e044:	bf48      	it	mi
 800e046:	b2ad      	uxthmi	r5, r5
 800e048:	2f6f      	cmp	r7, #111	@ 0x6f
 800e04a:	4852      	ldr	r0, [pc, #328]	@ (800e194 <_printf_i+0x234>)
 800e04c:	6033      	str	r3, [r6, #0]
 800e04e:	bf14      	ite	ne
 800e050:	230a      	movne	r3, #10
 800e052:	2308      	moveq	r3, #8
 800e054:	2100      	movs	r1, #0
 800e056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e05a:	6866      	ldr	r6, [r4, #4]
 800e05c:	60a6      	str	r6, [r4, #8]
 800e05e:	2e00      	cmp	r6, #0
 800e060:	db05      	blt.n	800e06e <_printf_i+0x10e>
 800e062:	6821      	ldr	r1, [r4, #0]
 800e064:	432e      	orrs	r6, r5
 800e066:	f021 0104 	bic.w	r1, r1, #4
 800e06a:	6021      	str	r1, [r4, #0]
 800e06c:	d04b      	beq.n	800e106 <_printf_i+0x1a6>
 800e06e:	4616      	mov	r6, r2
 800e070:	fbb5 f1f3 	udiv	r1, r5, r3
 800e074:	fb03 5711 	mls	r7, r3, r1, r5
 800e078:	5dc7      	ldrb	r7, [r0, r7]
 800e07a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e07e:	462f      	mov	r7, r5
 800e080:	42bb      	cmp	r3, r7
 800e082:	460d      	mov	r5, r1
 800e084:	d9f4      	bls.n	800e070 <_printf_i+0x110>
 800e086:	2b08      	cmp	r3, #8
 800e088:	d10b      	bne.n	800e0a2 <_printf_i+0x142>
 800e08a:	6823      	ldr	r3, [r4, #0]
 800e08c:	07df      	lsls	r7, r3, #31
 800e08e:	d508      	bpl.n	800e0a2 <_printf_i+0x142>
 800e090:	6923      	ldr	r3, [r4, #16]
 800e092:	6861      	ldr	r1, [r4, #4]
 800e094:	4299      	cmp	r1, r3
 800e096:	bfde      	ittt	le
 800e098:	2330      	movle	r3, #48	@ 0x30
 800e09a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e09e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0a2:	1b92      	subs	r2, r2, r6
 800e0a4:	6122      	str	r2, [r4, #16]
 800e0a6:	f8cd a000 	str.w	sl, [sp]
 800e0aa:	464b      	mov	r3, r9
 800e0ac:	aa03      	add	r2, sp, #12
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4640      	mov	r0, r8
 800e0b2:	f7ff fee7 	bl	800de84 <_printf_common>
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	d14a      	bne.n	800e150 <_printf_i+0x1f0>
 800e0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e0be:	b004      	add	sp, #16
 800e0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c4:	6823      	ldr	r3, [r4, #0]
 800e0c6:	f043 0320 	orr.w	r3, r3, #32
 800e0ca:	6023      	str	r3, [r4, #0]
 800e0cc:	4832      	ldr	r0, [pc, #200]	@ (800e198 <_printf_i+0x238>)
 800e0ce:	2778      	movs	r7, #120	@ 0x78
 800e0d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0d4:	6823      	ldr	r3, [r4, #0]
 800e0d6:	6831      	ldr	r1, [r6, #0]
 800e0d8:	061f      	lsls	r7, r3, #24
 800e0da:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0de:	d402      	bmi.n	800e0e6 <_printf_i+0x186>
 800e0e0:	065f      	lsls	r7, r3, #25
 800e0e2:	bf48      	it	mi
 800e0e4:	b2ad      	uxthmi	r5, r5
 800e0e6:	6031      	str	r1, [r6, #0]
 800e0e8:	07d9      	lsls	r1, r3, #31
 800e0ea:	bf44      	itt	mi
 800e0ec:	f043 0320 	orrmi.w	r3, r3, #32
 800e0f0:	6023      	strmi	r3, [r4, #0]
 800e0f2:	b11d      	cbz	r5, 800e0fc <_printf_i+0x19c>
 800e0f4:	2310      	movs	r3, #16
 800e0f6:	e7ad      	b.n	800e054 <_printf_i+0xf4>
 800e0f8:	4826      	ldr	r0, [pc, #152]	@ (800e194 <_printf_i+0x234>)
 800e0fa:	e7e9      	b.n	800e0d0 <_printf_i+0x170>
 800e0fc:	6823      	ldr	r3, [r4, #0]
 800e0fe:	f023 0320 	bic.w	r3, r3, #32
 800e102:	6023      	str	r3, [r4, #0]
 800e104:	e7f6      	b.n	800e0f4 <_printf_i+0x194>
 800e106:	4616      	mov	r6, r2
 800e108:	e7bd      	b.n	800e086 <_printf_i+0x126>
 800e10a:	6833      	ldr	r3, [r6, #0]
 800e10c:	6825      	ldr	r5, [r4, #0]
 800e10e:	6961      	ldr	r1, [r4, #20]
 800e110:	1d18      	adds	r0, r3, #4
 800e112:	6030      	str	r0, [r6, #0]
 800e114:	062e      	lsls	r6, r5, #24
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	d501      	bpl.n	800e11e <_printf_i+0x1be>
 800e11a:	6019      	str	r1, [r3, #0]
 800e11c:	e002      	b.n	800e124 <_printf_i+0x1c4>
 800e11e:	0668      	lsls	r0, r5, #25
 800e120:	d5fb      	bpl.n	800e11a <_printf_i+0x1ba>
 800e122:	8019      	strh	r1, [r3, #0]
 800e124:	2300      	movs	r3, #0
 800e126:	6123      	str	r3, [r4, #16]
 800e128:	4616      	mov	r6, r2
 800e12a:	e7bc      	b.n	800e0a6 <_printf_i+0x146>
 800e12c:	6833      	ldr	r3, [r6, #0]
 800e12e:	1d1a      	adds	r2, r3, #4
 800e130:	6032      	str	r2, [r6, #0]
 800e132:	681e      	ldr	r6, [r3, #0]
 800e134:	6862      	ldr	r2, [r4, #4]
 800e136:	2100      	movs	r1, #0
 800e138:	4630      	mov	r0, r6
 800e13a:	f7f2 f851 	bl	80001e0 <memchr>
 800e13e:	b108      	cbz	r0, 800e144 <_printf_i+0x1e4>
 800e140:	1b80      	subs	r0, r0, r6
 800e142:	6060      	str	r0, [r4, #4]
 800e144:	6863      	ldr	r3, [r4, #4]
 800e146:	6123      	str	r3, [r4, #16]
 800e148:	2300      	movs	r3, #0
 800e14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e14e:	e7aa      	b.n	800e0a6 <_printf_i+0x146>
 800e150:	6923      	ldr	r3, [r4, #16]
 800e152:	4632      	mov	r2, r6
 800e154:	4649      	mov	r1, r9
 800e156:	4640      	mov	r0, r8
 800e158:	47d0      	blx	sl
 800e15a:	3001      	adds	r0, #1
 800e15c:	d0ad      	beq.n	800e0ba <_printf_i+0x15a>
 800e15e:	6823      	ldr	r3, [r4, #0]
 800e160:	079b      	lsls	r3, r3, #30
 800e162:	d413      	bmi.n	800e18c <_printf_i+0x22c>
 800e164:	68e0      	ldr	r0, [r4, #12]
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	4298      	cmp	r0, r3
 800e16a:	bfb8      	it	lt
 800e16c:	4618      	movlt	r0, r3
 800e16e:	e7a6      	b.n	800e0be <_printf_i+0x15e>
 800e170:	2301      	movs	r3, #1
 800e172:	4632      	mov	r2, r6
 800e174:	4649      	mov	r1, r9
 800e176:	4640      	mov	r0, r8
 800e178:	47d0      	blx	sl
 800e17a:	3001      	adds	r0, #1
 800e17c:	d09d      	beq.n	800e0ba <_printf_i+0x15a>
 800e17e:	3501      	adds	r5, #1
 800e180:	68e3      	ldr	r3, [r4, #12]
 800e182:	9903      	ldr	r1, [sp, #12]
 800e184:	1a5b      	subs	r3, r3, r1
 800e186:	42ab      	cmp	r3, r5
 800e188:	dcf2      	bgt.n	800e170 <_printf_i+0x210>
 800e18a:	e7eb      	b.n	800e164 <_printf_i+0x204>
 800e18c:	2500      	movs	r5, #0
 800e18e:	f104 0619 	add.w	r6, r4, #25
 800e192:	e7f5      	b.n	800e180 <_printf_i+0x220>
 800e194:	0800e6f9 	.word	0x0800e6f9
 800e198:	0800e70a 	.word	0x0800e70a

0800e19c <memmove>:
 800e19c:	4288      	cmp	r0, r1
 800e19e:	b510      	push	{r4, lr}
 800e1a0:	eb01 0402 	add.w	r4, r1, r2
 800e1a4:	d902      	bls.n	800e1ac <memmove+0x10>
 800e1a6:	4284      	cmp	r4, r0
 800e1a8:	4623      	mov	r3, r4
 800e1aa:	d807      	bhi.n	800e1bc <memmove+0x20>
 800e1ac:	1e43      	subs	r3, r0, #1
 800e1ae:	42a1      	cmp	r1, r4
 800e1b0:	d008      	beq.n	800e1c4 <memmove+0x28>
 800e1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1ba:	e7f8      	b.n	800e1ae <memmove+0x12>
 800e1bc:	4402      	add	r2, r0
 800e1be:	4601      	mov	r1, r0
 800e1c0:	428a      	cmp	r2, r1
 800e1c2:	d100      	bne.n	800e1c6 <memmove+0x2a>
 800e1c4:	bd10      	pop	{r4, pc}
 800e1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1ce:	e7f7      	b.n	800e1c0 <memmove+0x24>

0800e1d0 <memcpy>:
 800e1d0:	440a      	add	r2, r1
 800e1d2:	4291      	cmp	r1, r2
 800e1d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1d8:	d100      	bne.n	800e1dc <memcpy+0xc>
 800e1da:	4770      	bx	lr
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1e6:	4291      	cmp	r1, r2
 800e1e8:	d1f9      	bne.n	800e1de <memcpy+0xe>
 800e1ea:	bd10      	pop	{r4, pc}

0800e1ec <_realloc_r>:
 800e1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	4614      	mov	r4, r2
 800e1f4:	460d      	mov	r5, r1
 800e1f6:	b921      	cbnz	r1, 800e202 <_realloc_r+0x16>
 800e1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	f7ff bbad 	b.w	800d95c <_malloc_r>
 800e202:	b92a      	cbnz	r2, 800e210 <_realloc_r+0x24>
 800e204:	f7ff fc9c 	bl	800db40 <_free_r>
 800e208:	4625      	mov	r5, r4
 800e20a:	4628      	mov	r0, r5
 800e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e210:	f000 f81a 	bl	800e248 <_malloc_usable_size_r>
 800e214:	4284      	cmp	r4, r0
 800e216:	4606      	mov	r6, r0
 800e218:	d802      	bhi.n	800e220 <_realloc_r+0x34>
 800e21a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e21e:	d8f4      	bhi.n	800e20a <_realloc_r+0x1e>
 800e220:	4621      	mov	r1, r4
 800e222:	4638      	mov	r0, r7
 800e224:	f7ff fb9a 	bl	800d95c <_malloc_r>
 800e228:	4680      	mov	r8, r0
 800e22a:	b908      	cbnz	r0, 800e230 <_realloc_r+0x44>
 800e22c:	4645      	mov	r5, r8
 800e22e:	e7ec      	b.n	800e20a <_realloc_r+0x1e>
 800e230:	42b4      	cmp	r4, r6
 800e232:	4622      	mov	r2, r4
 800e234:	4629      	mov	r1, r5
 800e236:	bf28      	it	cs
 800e238:	4632      	movcs	r2, r6
 800e23a:	f7ff ffc9 	bl	800e1d0 <memcpy>
 800e23e:	4629      	mov	r1, r5
 800e240:	4638      	mov	r0, r7
 800e242:	f7ff fc7d 	bl	800db40 <_free_r>
 800e246:	e7f1      	b.n	800e22c <_realloc_r+0x40>

0800e248 <_malloc_usable_size_r>:
 800e248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e24c:	1f18      	subs	r0, r3, #4
 800e24e:	2b00      	cmp	r3, #0
 800e250:	bfbc      	itt	lt
 800e252:	580b      	ldrlt	r3, [r1, r0]
 800e254:	18c0      	addlt	r0, r0, r3
 800e256:	4770      	bx	lr

0800e258 <_init>:
 800e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25a:	bf00      	nop
 800e25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e25e:	bc08      	pop	{r3}
 800e260:	469e      	mov	lr, r3
 800e262:	4770      	bx	lr

0800e264 <_fini>:
 800e264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e266:	bf00      	nop
 800e268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e26a:	bc08      	pop	{r3}
 800e26c:	469e      	mov	lr, r3
 800e26e:	4770      	bx	lr
