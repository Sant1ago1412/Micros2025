
BlackEngines.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a064  0800a064  0000c158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a064  0800a064  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a06c  0800a06c  0000c158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a06c  0800a06c  0000b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a070  0800a070  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800a074  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  20000158  0800a1cc  0000c158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013cc  0800a1cc  0000c3cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016126  00000000  00000000  0000c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b36  00000000  00000000  000222ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00025de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef8  00000000  00000000  00027190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acac  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194fe  00000000  00000000  00042d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c6c9  00000000  00000000  0005c232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f88fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  000f8940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fdfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fb0 	.word	0x08009fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	08009fb0 	.word	0x08009fb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UP_initprotocol>:

int16_t value=9999;
_eProtocolo estadoProtocolo;
_sDato *datosComLib;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

		datosCom->bufferRx = malloc(ringbuff);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f009 f850 	bl	8009660 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
	    datosCom->bufferTx = malloc(ringbuff);
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f009 f848 	bl	8009660 <malloc>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
	    datosComLib=datosCom;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <UP_initprotocol+0x3c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000017c 	.word	0x2000017c

080005ec <UP_sendInfo>:

void UP_sendInfo(uint8_t bufferAux[],uint8_t bytes){
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000604:	2300      	movs	r3, #0
 8000606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800060a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000614:	3330      	adds	r3, #48	@ 0x30
 8000616:	443b      	add	r3, r7
 8000618:	2255      	movs	r2, #85	@ 0x55
 800061a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000628:	3330      	adds	r3, #48	@ 0x30
 800062a:	443b      	add	r3, r7
 800062c:	224e      	movs	r2, #78	@ 0x4e
 800062e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800063c:	3330      	adds	r3, #48	@ 0x30
 800063e:	443b      	add	r3, r7
 8000640:	2245      	movs	r2, #69	@ 0x45
 8000642:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000650:	3330      	adds	r3, #48	@ 0x30
 8000652:	443b      	add	r3, r7
 8000654:	2252      	movs	r2, #82	@ 0x52
 8000656:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 800065a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000664:	3330      	adds	r3, #48	@ 0x30
 8000666:	443b      	add	r3, r7
 8000668:	78fa      	ldrb	r2, [r7, #3]
 800066a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800066e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000678:	3330      	adds	r3, #48	@ 0x30
 800067a:	443b      	add	r3, r7
 800067c:	223a      	movs	r2, #58	@ 0x3a
 800067e:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000688:	e012      	b.n	80006b0 <UP_sendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 800068a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	441a      	add	r2, r3
 8000692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000696:	1c59      	adds	r1, r3, #1
 8000698:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	3330      	adds	r3, #48	@ 0x30
 80006a0:	443b      	add	r3, r7
 80006a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 80006a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006aa:	3301      	adds	r3, #1
 80006ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006b0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbe6      	blt.n	800068a <UP_sendInfo+0x9e>

    cks=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80006c8:	e022      	b.n	8000710 <UP_sendInfo+0x124>
        cks^= bufAux[i];
 80006ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006ce:	3330      	adds	r3, #48	@ 0x30
 80006d0:	443b      	add	r3, r7
 80006d2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80006d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006da:	4053      	eors	r3, r2
 80006dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComLib->bufferTx[datosComLib->indexWriteTx++]=bufAux[i];
 80006e0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <UP_sendInfo+0x160>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68d8      	ldr	r0, [r3, #12]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <UP_sendInfo+0x160>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	795a      	ldrb	r2, [r3, #5]
 80006f0:	1c54      	adds	r4, r2, #1
 80006f2:	b2e4      	uxtb	r4, r4
 80006f4:	715c      	strb	r4, [r3, #5]
 80006f6:	4613      	mov	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80006fe:	443a      	add	r2, r7
 8000700:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000704:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000706:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800070a:	3301      	adds	r3, #1
 800070c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000710:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d6      	bcc.n	80006ca <UP_sendInfo+0xde>
    }
     datosComLib->bufferTx[datosComLib->indexWriteTx++]=cks;
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <UP_sendInfo+0x160>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <UP_sendInfo+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	795a      	ldrb	r2, [r3, #5]
 8000728:	1c50      	adds	r0, r2, #1
 800072a:	b2c0      	uxtb	r0, r0
 800072c:	7158      	strb	r0, [r3, #5]
 800072e:	4613      	mov	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000736:	701a      	strb	r2, [r3, #0]

     datosComLib->bytesTosend=indiceAux;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <UP_sendInfo+0x160>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000740:	741a      	strb	r2, [r3, #16]

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	@ 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	2000017c 	.word	0x2000017c

08000750 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosComLib){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosComLib->indexWriteRx;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 800075e:	e0e2      	b.n	8000926 <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000760:	4b76      	ldr	r3, [pc, #472]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b06      	cmp	r3, #6
 8000766:	f200 80d7 	bhi.w	8000918 <UP_decodeHeader+0x1c8>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <UP_decodeHeader+0x20>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007b5 	.word	0x080007b5
 8000778:	080007e9 	.word	0x080007e9
 800077c:	0800081d 	.word	0x0800081d
 8000780:	08000851 	.word	0x08000851
 8000784:	08000879 	.word	0x08000879
 8000788:	080008bb 	.word	0x080008bb
            case START:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='U'){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	b2c8      	uxtb	r0, r1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	7108      	strb	r0, [r1, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b55      	cmp	r3, #85	@ 0x55
 80007a2:	f040 80bd 	bne.w	8000920 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80007a6:	4b65      	ldr	r3, [pc, #404]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80007b2:	e0b5      	b.n	8000920 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='N')
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	b2c8      	uxtb	r0, r1
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	7108      	strb	r0, [r1, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80007ca:	d103      	bne.n	80007d4 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80007d2:	e0a8      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80007e0:	4b56      	ldr	r3, [pc, #344]	@ (800093c <UP_decodeHeader+0x1ec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
                break;
 80007e6:	e09e      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='E')
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	7108      	strb	r0, [r1, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b45      	cmp	r3, #69	@ 0x45
 80007fe:	d103      	bne.n	8000808 <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
                else{
                    datosComLib->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000806:	e08e      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	3b01      	subs	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
                break;
 800081a:	e084      	b.n	8000926 <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosComLib->bufferRx[datosComLib->indexReadRx++]=='R')
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	b2c8      	uxtb	r0, r1
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	7108      	strb	r0, [r1, #4]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b52      	cmp	r3, #82	@ 0x52
 8000832:	d103      	bne.n	800083c <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
				else{
					datosComLib->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 800083a:	e074      	b.n	8000926 <UP_decodeHeader+0x1d6>
					datosComLib->indexReadRx--;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <UP_decodeHeader+0x1ec>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
            break;
 800084e:	e06a      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosComLib->indexStart=datosComLib->indexReadRx;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->bufferRx[datosComLib->indexReadRx++];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	b2c8      	uxtb	r0, r1
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	7108      	strb	r0, [r1, #4]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <UP_decodeHeader+0x1f0>)
 800086e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
                break;
 8000876:	e056      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosComLib->bufferRx[datosComLib->indexReadRx++]==':'){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	7108      	strb	r0, [r1, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b3a      	cmp	r3, #58	@ 0x3a
 800088e:	d10a      	bne.n	80008a6 <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <UP_decodeHeader+0x1ec>)
 8000892:	2206      	movs	r2, #6
 8000894:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <UP_decodeHeader+0x1f0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosComLib->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80008a4:	e03f      	b.n	8000926 <UP_decodeHeader+0x1d6>
                    datosComLib->indexReadRx--;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
                break;
 80008b8:	e035      	b.n	8000926 <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d90f      	bls.n	80008e2 <UP_decodeHeader+0x192>
                    datosComLib->cheksumRx ^= datosComLib->bufferRx[datosComLib->indexReadRx++];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b2c8      	uxtb	r0, r1
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	7108      	strb	r0, [r1, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	4053      	eors	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008ec:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <UP_decodeHeader+0x1f0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d116      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <UP_decodeHeader+0x1ec>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->bufferRx[datosComLib->indexReadRx]){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	789a      	ldrb	r2, [r3, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	7909      	ldrb	r1, [r1, #4]
 8000908:	440b      	add	r3, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d109      	bne.n	8000924 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosComLib);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f817 	bl	8000944 <UP_decodeData>
                    }
                }

                break;
 8000916:	e005      	b.n	8000924 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <UP_decodeHeader+0x1ec>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
                break;
 800091e:	e002      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000920:	bf00      	nop
 8000922:	e000      	b.n	8000926 <UP_decodeHeader+0x1d6>
                break;
 8000924:	bf00      	nop
    while (datosComLib->indexReadRx!=indexWriteRxCopy)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	429a      	cmp	r2, r3
 800092e:	f47f af17 	bne.w	8000760 <UP_decodeHeader+0x10>
        }
    }
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000178 	.word	0x20000178
 8000940:	20000180 	.word	0x20000180

08000944 <UP_decodeData>:

void UP_decodeData(_sDato *datosComLib){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 800094c:	2300      	movs	r3, #0
 800094e:	77bb      	strb	r3, [r7, #30]
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->bufferRx[datosComLib->indexStart+2])//CMD EN LA POSICION 2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	3302      	adds	r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2bf2      	cmp	r3, #242	@ 0xf2
 8000964:	d01f      	beq.n	80009a6 <UP_decodeData+0x62>
 8000966:	2bf2      	cmp	r3, #242	@ 0xf2
 8000968:	dc46      	bgt.n	80009f8 <UP_decodeData+0xb4>
 800096a:	2bf1      	cmp	r3, #241	@ 0xf1
 800096c:	d010      	beq.n	8000990 <UP_decodeData+0x4c>
 800096e:	2bf1      	cmp	r3, #241	@ 0xf1
 8000970:	dc42      	bgt.n	80009f8 <UP_decodeData+0xb4>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d020      	beq.n	80009b8 <UP_decodeData+0x74>
 8000976:	2bf0      	cmp	r3, #240	@ 0xf0
 8000978:	d13e      	bne.n	80009f8 <UP_decodeData+0xb4>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	77ba      	strb	r2, [r7, #30]
 8000980:	3320      	adds	r3, #32
 8000982:	443b      	add	r3, r7
 8000984:	22f0      	movs	r2, #240	@ 0xf0
 8000986:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 800098a:	2302      	movs	r3, #2
 800098c:	77fb      	strb	r3, [r7, #31]

    break;
 800098e:	e03e      	b.n	8000a0e <UP_decodeData+0xca>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8000990:	7fbb      	ldrb	r3, [r7, #30]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	77ba      	strb	r2, [r7, #30]
 8000996:	3320      	adds	r3, #32
 8000998:	443b      	add	r3, r7
 800099a:	22f1      	movs	r2, #241	@ 0xf1
 800099c:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80009a0:	2302      	movs	r3, #2
 80009a2:	77fb      	strb	r3, [r7, #31]

    break;
 80009a4:	e033      	b.n	8000a0e <UP_decodeData+0xca>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	77ba      	strb	r2, [r7, #30]
 80009ac:	3320      	adds	r3, #32
 80009ae:	443b      	add	r3, r7
 80009b0:	22f2      	movs	r2, #242	@ 0xf2
 80009b2:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80009b6:	e02a      	b.n	8000a0e <UP_decodeData+0xca>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 80009b8:	7fbb      	ldrb	r3, [r7, #30]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	77ba      	strb	r2, [r7, #30]
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosComLib->bufferRx[datosComLib->indexStart+3];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	3303      	adds	r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <UP_decodeData+0xe0>)
 80009d8:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosComLib->bufferRx[datosComLib->indexStart+4];
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	3304      	adds	r3, #4
 80009e4:	4413      	add	r3, r2
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ea:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 80009ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <UP_decodeData+0xe0>)
 80009ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <UP_decodeData+0xe4>)
 80009f4:	801a      	strh	r2, [r3, #0]

    break;
 80009f6:	e00a      	b.n	8000a0e <UP_decodeData+0xca>
    default:

        bufAux[indiceAux++]=0xFF;
 80009f8:	7fbb      	ldrb	r3, [r7, #30]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	77ba      	strb	r2, [r7, #30]
 80009fe:	3320      	adds	r3, #32
 8000a00:	443b      	add	r3, r7
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	77fb      	strb	r3, [r7, #31]

    break;
 8000a0c:	bf00      	nop
    }

    UP_sendInfo(bufAux,bytes);
 8000a0e:	7ffa      	ldrb	r2, [r7, #31]
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fde8 	bl	80005ec <UP_sendInfo>
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000174 	.word	0x20000174
 8000a28:	20000000 	.word	0x20000000

08000a2c <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81fb      	strh	r3, [r7, #14]
 8000a3c:	e016      	b.n	8000a6c <UP_datafromUSB+0x40>
	datosComLib->bufferRx[datosComLib->indexWriteRx] = buf[i];
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	441a      	add	r2, r3
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a4c:	6809      	ldr	r1, [r1, #0]
 8000a4e:	78c9      	ldrb	r1, [r1, #3]
 8000a50:	b2c9      	uxtb	r1, r1
 8000a52:	440b      	add	r3, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
	datosComLib->indexWriteRx++;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <UP_datafromUSB+0x58>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78da      	ldrb	r2, [r3, #3]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	3201      	adds	r2, #1
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e4      	bcc.n	8000a3e <UP_datafromUSB+0x12>
  }

}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000017c 	.word	0x2000017c

08000a88 <en_InitENG>:
 *      Author: Baccon
 */
#include "engines.h"
#include "stdlib.h"

void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	809a      	strh	r2, [r3, #4]

}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <en_HandlerENG>:

void en_HandlerENG(_sEng *engines,int32_t newspeed,uint8_t freno){
 8000ab2:	b480      	push	{r7}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71fb      	strb	r3, [r7, #7]

	if(newspeed==engines->speed)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d033      	beq.n	8000b34 <en_HandlerENG+0x82>
		return;
	if(freno==1){
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d103      	bne.n	8000ada <en_HandlerENG+0x28>
		engines->estado=BRAKE;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	709a      	strb	r2, [r3, #2]
		return;
 8000ad8:	e02d      	b.n	8000b36 <en_HandlerENG+0x84>
	}
	if(newspeed>engines->maxSpeed)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	889b      	ldrh	r3, [r3, #4]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	dd02      	ble.n	8000aec <en_HandlerENG+0x3a>
		newspeed=engines->maxSpeed;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	60bb      	str	r3, [r7, #8]
	//agregar el caso anterior para negativo
	if(newspeed<0){
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da09      	bge.n	8000b06 <en_HandlerENG+0x54>
		engines->estado=BACK;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2201      	movs	r2, #1
 8000af6:	709a      	strb	r2, [r3, #2]
		engines->speed=-newspeed;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	425b      	negs	r3, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	801a      	strh	r2, [r3, #0]
 8000b04:	e017      	b.n	8000b36 <en_HandlerENG+0x84>
	}else if(newspeed>0){
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	dd09      	ble.n	8000b20 <en_HandlerENG+0x6e>
		engines->estado=FRONT;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	709a      	strb	r2, [r3, #2]
		engines->speed=-newspeed;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	425b      	negs	r3, r3
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	801a      	strh	r2, [r3, #0]
 8000b1e:	e00a      	b.n	8000b36 <en_HandlerENG+0x84>
	}else if(newspeed==0){
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d107      	bne.n	8000b36 <en_HandlerENG+0x84>
		engines->estado=FREE;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2202      	movs	r2, #2
 8000b2a:	709a      	strb	r2, [r3, #2]
		engines->speed=0;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
 8000b32:	e000      	b.n	8000b36 <en_HandlerENG+0x84>
		return;
 8000b34:	bf00      	nop
	}

}
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_ADC_ConvCpltCallback>:
void Engines_task();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	77fb      	strb	r3, [r7, #31]
 8000b50:	e00c      	b.n	8000b6c <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000b52:	7ffa      	ldrb	r2, [r7, #31]
 8000b54:	7ffb      	ldrb	r3, [r7, #31]
 8000b56:	490b      	ldr	r1, [pc, #44]	@ (8000b84 <HAL_ADC_ConvCpltCallback+0x44>)
 8000b58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b5c:	f107 000c 	add.w	r0, r7, #12
 8000b60:	4909      	ldr	r1, [pc, #36]	@ (8000b88 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b62:	f008 fe33 	bl	80097cc <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000b66:	7ffb      	ldrb	r3, [r7, #31]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	77fb      	strb	r3, [r7, #31]
 8000b6c:	7ffb      	ldrb	r3, [r7, #31]
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d9ef      	bls.n	8000b52 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b78:	f001 fe67 	bl	800284a <HAL_GPIO_TogglePin>
}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000270 	.word	0x20000270
 8000b88:	08009fc8 	.word	0x08009fc8
 8000b8c:	40020800 	.word	0x40020800

08000b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d104      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000ba2:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ba4:	7813      	ldrb	r3, [r2, #0]
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000baa:	7013      	strb	r3, [r2, #0]
	}
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40014800 	.word	0x40014800
 8000bbc:	20000280 	.word	0x20000280

08000bc0 <task10ms>:

void task10ms(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

	static uint8_t counter=0;
	static uint8_t DMAcounter=0;

	if(IS10MS){
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <task10ms+0x80>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d034      	beq.n	8000c3c <task10ms+0x7c>
		if(counter>10){
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <task10ms+0x84>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b0a      	cmp	r3, #10
 8000bd8:	d904      	bls.n	8000be4 <task10ms+0x24>
			Engines_task();
 8000bda:	f000 f83d 	bl	8000c58 <Engines_task>
			counter=0;
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <task10ms+0x84>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
		}
		if(DMAcounter>100){
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <task10ms+0x88>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b64      	cmp	r3, #100	@ 0x64
 8000bea:	d90c      	bls.n	8000c06 <task10ms+0x46>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 8000bec:	2208      	movs	r2, #8
 8000bee:	4917      	ldr	r1, [pc, #92]	@ (8000c4c <task10ms+0x8c>)
 8000bf0:	4817      	ldr	r0, [pc, #92]	@ (8000c50 <task10ms+0x90>)
 8000bf2:	f000 ff29 	bl	8001a48 <HAL_ADC_Start_DMA>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000bf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfa:	4816      	ldr	r0, [pc, #88]	@ (8000c54 <task10ms+0x94>)
 8000bfc:	f001 fe25 	bl	800284a <HAL_GPIO_TogglePin>

			DMAcounter=0;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <task10ms+0x88>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		}
		IS10MS=!IS10MS;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <task10ms+0x80>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf0c      	ite	eq
 8000c14:	2301      	moveq	r3, #1
 8000c16:	2300      	movne	r3, #0
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	4a09      	ldr	r2, [pc, #36]	@ (8000c40 <task10ms+0x80>)
 8000c1c:	7813      	ldrb	r3, [r2, #0]
 8000c1e:	f361 1386 	bfi	r3, r1, #6, #1
 8000c22:	7013      	strb	r3, [r2, #0]
		counter++;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <task10ms+0x84>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <task10ms+0x84>)
 8000c2e:	701a      	strb	r2, [r3, #0]
		DMAcounter++;
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <task10ms+0x88>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <task10ms+0x88>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000280 	.word	0x20000280
 8000c44:	20000292 	.word	0x20000292
 8000c48:	20000293 	.word	0x20000293
 8000c4c:	20000270 	.word	0x20000270
 8000c50:	20000184 	.word	0x20000184
 8000c54:	40020800 	.word	0x40020800

08000c58 <Engines_task>:

void Engines_task(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

	en_HandlerENG(&motorR, 50000, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <Engines_task+0x13c>)
 8000c64:	f7ff ff25 	bl	8000ab2 <en_HandlerENG>
	en_HandlerENG(&motorL, -50000, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	494b      	ldr	r1, [pc, #300]	@ (8000d98 <Engines_task+0x140>)
 8000c6c:	484b      	ldr	r0, [pc, #300]	@ (8000d9c <Engines_task+0x144>)
 8000c6e:	f7ff ff20 	bl	8000ab2 <en_HandlerENG>

	switch(motorL.estado){
 8000c72:	4b4a      	ldr	r3, [pc, #296]	@ (8000d9c <Engines_task+0x144>)
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d83a      	bhi.n	8000cf0 <Engines_task+0x98>
 8000c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <Engines_task+0x28>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000cc1 	.word	0x08000cc1
 8000c88:	08000cd9 	.word	0x08000cd9
 8000c8c:	08000c91 	.word	0x08000c91
		case BRAKE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2108      	movs	r1, #8
 8000c94:	4842      	ldr	r0, [pc, #264]	@ (8000da0 <Engines_task+0x148>)
 8000c96:	f001 fdbf 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ca0:	4840      	ldr	r0, [pc, #256]	@ (8000da4 <Engines_task+0x14c>)
 8000ca2:	f001 fdb9 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000ca6:	e024      	b.n	8000cf2 <Engines_task+0x9a>

		case FRONT:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2108      	movs	r1, #8
 8000cac:	483c      	ldr	r0, [pc, #240]	@ (8000da0 <Engines_task+0x148>)
 8000cae:	f001 fdb3 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cb8:	483a      	ldr	r0, [pc, #232]	@ (8000da4 <Engines_task+0x14c>)
 8000cba:	f001 fdad 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000cbe:	e018      	b.n	8000cf2 <Engines_task+0x9a>

		case BACK:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4836      	ldr	r0, [pc, #216]	@ (8000da0 <Engines_task+0x148>)
 8000cc6:	f001 fda7 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd0:	4834      	ldr	r0, [pc, #208]	@ (8000da4 <Engines_task+0x14c>)
 8000cd2:	f001 fda1 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000cd6:	e00c      	b.n	8000cf2 <Engines_task+0x9a>

		case FREE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2108      	movs	r1, #8
 8000cdc:	4830      	ldr	r0, [pc, #192]	@ (8000da0 <Engines_task+0x148>)
 8000cde:	f001 fd9b 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce8:	482e      	ldr	r0, [pc, #184]	@ (8000da4 <Engines_task+0x14c>)
 8000cea:	f001 fd95 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000cee:	e000      	b.n	8000cf2 <Engines_task+0x9a>
		default:
			break;
 8000cf0:	bf00      	nop
	}
	switch(motorR.estado){
 8000cf2:	4b28      	ldr	r3, [pc, #160]	@ (8000d94 <Engines_task+0x13c>)
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d83e      	bhi.n	8000d78 <Engines_task+0x120>
 8000cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <Engines_task+0xa8>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d2b 	.word	0x08000d2b
 8000d04:	08000d45 	.word	0x08000d45
 8000d08:	08000d5f 	.word	0x08000d5f
 8000d0c:	08000d11 	.word	0x08000d11
		case BRAKE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d16:	4823      	ldr	r0, [pc, #140]	@ (8000da4 <Engines_task+0x14c>)
 8000d18:	f001 fd7e 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d22:	4820      	ldr	r0, [pc, #128]	@ (8000da4 <Engines_task+0x14c>)
 8000d24:	f001 fd78 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000d28:	e027      	b.n	8000d7a <Engines_task+0x122>

		case FRONT:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d30:	481c      	ldr	r0, [pc, #112]	@ (8000da4 <Engines_task+0x14c>)
 8000d32:	f001 fd71 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d3c:	4819      	ldr	r0, [pc, #100]	@ (8000da4 <Engines_task+0x14c>)
 8000d3e:	f001 fd6b 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000d42:	e01a      	b.n	8000d7a <Engines_task+0x122>

		case BACK:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4816      	ldr	r0, [pc, #88]	@ (8000da4 <Engines_task+0x14c>)
 8000d4c:	f001 fd64 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4813      	ldr	r0, [pc, #76]	@ (8000da4 <Engines_task+0x14c>)
 8000d58:	f001 fd5e 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000d5c:	e00d      	b.n	8000d7a <Engines_task+0x122>

		case FREE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d64:	480f      	ldr	r0, [pc, #60]	@ (8000da4 <Engines_task+0x14c>)
 8000d66:	f001 fd57 	bl	8002818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <Engines_task+0x14c>)
 8000d72:	f001 fd51 	bl	8002818 <HAL_GPIO_WritePin>
			break;
 8000d76:	e000      	b.n	8000d7a <Engines_task+0x122>
		default:
			break;
 8000d78:	bf00      	nop
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motorL.speed);
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <Engines_task+0x144>)
 8000d7c:	881a      	ldrh	r2, [r3, #0]
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <Engines_task+0x150>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motorR.speed);
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <Engines_task+0x13c>)
 8000d86:	881a      	ldrh	r2, [r3, #0]
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <Engines_task+0x150>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000028c 	.word	0x2000028c
 8000d98:	ffff3cb0 	.word	0xffff3cb0
 8000d9c:	20000284 	.word	0x20000284
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020000 	.word	0x40020000
 8000da8:	200001cc 	.word	0x200001cc

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db0:	f000 fc60 	bl	8001674 <HAL_Init>

  /* USER CODE BEGIN Init */
   CDC_AttachRxData(&UP_datafromUSB);
 8000db4:	481d      	ldr	r0, [pc, #116]	@ (8000e2c <main+0x80>)
 8000db6:	f008 f829 	bl	8008e0c <CDC_AttachRxData>
   myFlags.allFlags=0;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <main+0x84>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
   UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	481c      	ldr	r0, [pc, #112]	@ (8000e34 <main+0x88>)
 8000dc4:	f7ff fbf2 	bl	80005ac <UP_initprotocol>
   en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <main+0x8c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481a      	ldr	r0, [pc, #104]	@ (8000e3c <main+0x90>)
 8000dd4:	f7ff fe58 	bl	8000a88 <en_InitENG>
   en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <main+0x8c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	4817      	ldr	r0, [pc, #92]	@ (8000e40 <main+0x94>)
 8000de4:	f7ff fe50 	bl	8000a88 <en_InitENG>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f82e 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f000 f98c 	bl	8001108 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000df0:	f007 feb8 	bl	8008b64 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000df4:	f000 f8e2 	bl	8000fbc <MX_TIM3_Init>
  MX_TIM11_Init();
 8000df8:	f000 f962 	bl	80010c0 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000dfc:	f000 f88c 	bl	8000f18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000e00:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <main+0x8c>)
 8000e02:	f003 fc0f 	bl	8004624 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000e06:	480f      	ldr	r0, [pc, #60]	@ (8000e44 <main+0x98>)
 8000e08:	f003 fc0c 	bl	8004624 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	480a      	ldr	r0, [pc, #40]	@ (8000e38 <main+0x8c>)
 8000e10:	f003 fcc4 	bl	800479c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4808      	ldr	r0, [pc, #32]	@ (8000e38 <main+0x8c>)
 8000e18:	f003 fcc0 	bl	800479c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UP_comunicationsTask(&datosComSerie);
 8000e1c:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <main+0x88>)
 8000e1e:	f000 f9ff 	bl	8001220 <UP_comunicationsTask>
	task10ms();
 8000e22:	f7ff fecd 	bl	8000bc0 <task10ms>
	UP_comunicationsTask(&datosComSerie);
 8000e26:	bf00      	nop
 8000e28:	e7f8      	b.n	8000e1c <main+0x70>
 8000e2a:	bf00      	nop
 8000e2c:	08000a2d 	.word	0x08000a2d
 8000e30:	20000280 	.word	0x20000280
 8000e34:	2000025c 	.word	0x2000025c
 8000e38:	200001cc 	.word	0x200001cc
 8000e3c:	20000284 	.word	0x20000284
 8000e40:	2000028c 	.word	0x2000028c
 8000e44:	20000214 	.word	0x20000214

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	@ 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	@ 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 fcda 	bl	8009810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <SystemClock_Config+0xc8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	4a26      	ldr	r2, [pc, #152]	@ (8000f10 <SystemClock_Config+0xc8>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <SystemClock_Config+0xc8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <SystemClock_Config+0xcc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a20      	ldr	r2, [pc, #128]	@ (8000f14 <SystemClock_Config+0xcc>)
 8000e92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <SystemClock_Config+0xcc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000eb8:	2319      	movs	r3, #25
 8000eba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ebc:	23c0      	movs	r3, #192	@ 0xc0
 8000ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 ff29 	bl	8003d24 <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed8:	f000 f9eb 	bl	80012b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 f98b 	bl	8004214 <HAL_RCC_ClockConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f04:	f000 f9d5 	bl	80012b2 <Error_Handler>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3750      	adds	r7, #80	@ 0x50
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f2c:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <MX_ADC1_Init+0x9c>)
 8000f2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	@ (8000fb8 <MX_ADC1_Init+0xa0>)
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f7a:	f000 fc11 	bl	80017a0 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f84:	f000 f995 	bl	80012b2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f9a:	f000 fe67 	bl	8001c6c <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fa4:	f000 f985 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000184 	.word	0x20000184
 8000fb4:	40012000 	.word	0x40012000
 8000fb8:	0f000001 	.word	0x0f000001

08000fbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	@ 0x38
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fec:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8000fee:	4a33      	ldr	r2, [pc, #204]	@ (80010bc <MX_TIM3_Init+0x100>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000ff2:	4b31      	ldr	r3, [pc, #196]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8001000:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001004:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001012:	4829      	ldr	r0, [pc, #164]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8001014:	f003 fab6 	bl	8004584 <HAL_TIM_Base_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800101e:	f000 f948 	bl	80012b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001028:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102c:	4619      	mov	r1, r3
 800102e:	4822      	ldr	r0, [pc, #136]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8001030:	f003 fe16 	bl	8004c60 <HAL_TIM_ConfigClockSource>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800103a:	f000 f93a 	bl	80012b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800103e:	481e      	ldr	r0, [pc, #120]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8001040:	f003 fb52 	bl	80046e8 <HAL_TIM_PWM_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800104a:	f000 f932 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	4619      	mov	r1, r3
 800105c:	4816      	ldr	r0, [pc, #88]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 800105e:	f004 f9c1 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001068:	f000 f923 	bl	80012b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106c:	2360      	movs	r3, #96	@ 0x60
 800106e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 8001084:	f003 fd2a 	bl	8004adc <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800108e:	f000 f910 	bl	80012b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2204      	movs	r2, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4807      	ldr	r0, [pc, #28]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 800109a:	f003 fd1f 	bl	8004adc <HAL_TIM_PWM_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010a4:	f000 f905 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <MX_TIM3_Init+0xfc>)
 80010aa:	f000 f9df 	bl	800146c <HAL_TIM_MspPostInit>

}
 80010ae:	bf00      	nop
 80010b0:	3738      	adds	r7, #56	@ 0x38
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001cc 	.word	0x200001cc
 80010bc:	40000400 	.word	0x40000400

080010c0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_TIM11_Init+0x40>)
 80010c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <MX_TIM11_Init+0x44>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <MX_TIM11_Init+0x40>)
 80010cc:	225f      	movs	r2, #95	@ 0x5f
 80010ce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <MX_TIM11_Init+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <MX_TIM11_Init+0x40>)
 80010d8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010dc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <MX_TIM11_Init+0x40>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_TIM11_Init+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_TIM11_Init+0x40>)
 80010ec:	f003 fa4a 	bl	8004584 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80010f6:	f000 f8dc 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000214 	.word	0x20000214
 8001104:	40014800 	.word	0x40014800

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b3b      	ldr	r3, [pc, #236]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a3a      	ldr	r2, [pc, #232]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b38      	ldr	r3, [pc, #224]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b34      	ldr	r3, [pc, #208]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a33      	ldr	r2, [pc, #204]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <MX_GPIO_Init+0x108>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <MX_GPIO_Init+0x108>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a2c      	ldr	r2, [pc, #176]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a25      	ldr	r2, [pc, #148]	@ (8001210 <MX_GPIO_Init+0x108>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <MX_GPIO_Init+0x108>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001194:	481f      	ldr	r0, [pc, #124]	@ (8001214 <MX_GPIO_Init+0x10c>)
 8001196:	f001 fb3f 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80011a0:	481d      	ldr	r0, [pc, #116]	@ (8001218 <MX_GPIO_Init+0x110>)
 80011a2:	f001 fb39 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2108      	movs	r1, #8
 80011aa:	481c      	ldr	r0, [pc, #112]	@ (800121c <MX_GPIO_Init+0x114>)
 80011ac:	f001 fb34 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4812      	ldr	r0, [pc, #72]	@ (8001214 <MX_GPIO_Init+0x10c>)
 80011ca:	f001 f9a1 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
 80011ce:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <MX_GPIO_Init+0x110>)
 80011e8:	f001 f992 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : Out1_1_Pin */
  GPIO_InitStruct.Pin = Out1_1_Pin;
 80011ec:	2308      	movs	r3, #8
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Out1_1_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <MX_GPIO_Init+0x114>)
 8001204:	f001 f984 	bl	8002510 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	@ 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400

08001220 <UP_comunicationsTask>:

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	791a      	ldrb	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	429a      	cmp	r2, r3
 8001234:	d007      	beq.n	8001246 <UP_comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fa8a 	bl	8000750 <UP_decodeHeader>
		datosCom->indexReadRx=datosCom->indexWriteRx;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	799a      	ldrb	r2, [r3, #6]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	795b      	ldrb	r3, [r3, #5]
 800124e:	429a      	cmp	r2, r3
 8001250:	d02b      	beq.n	80012aa <UP_comunicationsTask+0x8a>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	795a      	ldrb	r2, [r3, #5]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	799b      	ldrb	r3, [r3, #6]
 800125a:	429a      	cmp	r2, r3
 800125c:	d908      	bls.n	8001270 <UP_comunicationsTask+0x50>
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	795a      	ldrb	r2, [r3, #5]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	799b      	ldrb	r3, [r3, #6]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b2da      	uxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	741a      	strb	r2, [r3, #16]
 800126e:	e006      	b.n	800127e <UP_comunicationsTask+0x5e>
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	799b      	ldrb	r3, [r3, #6]
 8001274:	f1c3 0304 	rsb	r3, r3, #4
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	7992      	ldrb	r2, [r2, #6]
 8001286:	441a      	add	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7c1b      	ldrb	r3, [r3, #16]
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f007 fd84 	bl	8008d9c <CDC_Transmit_FS>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d107      	bne.n	80012aa <UP_comunicationsTask+0x8a>
		    	datosCom->indexReadTx += datosCom->bytesTosend;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	799a      	ldrb	r2, [r3, #6]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7c1b      	ldrb	r3, [r3, #16]
 80012a2:	4413      	add	r3, r2
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b6:	b672      	cpsid	i
}
 80012b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ba:	bf00      	nop
 80012bc:	e7fd      	b.n	80012ba <Error_Handler+0x8>
	...

080012c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a0f      	ldr	r2, [pc, #60]	@ (800130c <HAL_MspInit+0x4c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <HAL_ADC_MspInit+0xc0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d149      	bne.n	80013c6 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	4a26      	ldr	r2, [pc, #152]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001340:	6453      	str	r3, [r2, #68]	@ 0x44
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a1f      	ldr	r2, [pc, #124]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a18      	ldr	r2, [pc, #96]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_ADC_MspInit+0xc4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001386:	23fe      	movs	r3, #254	@ 0xfe
 8001388:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138a:	2303      	movs	r3, #3
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480f      	ldr	r0, [pc, #60]	@ (80013d8 <HAL_ADC_MspInit+0xc8>)
 800139a:	f001 f8b9 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800139e:	2301      	movs	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	480a      	ldr	r0, [pc, #40]	@ (80013dc <HAL_ADC_MspInit+0xcc>)
 80013b2:	f001 f8ad 	bl	8002510 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2012      	movs	r0, #18
 80013bc:	f000 ffeb 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f001 f804 	bl	80023ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	@ 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40012000 	.word	0x40012000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <HAL_TIM_Base_MspInit+0x80>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d116      	bne.n	8001420 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_TIM_Base_MspInit+0x84>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001464 <HAL_TIM_Base_MspInit+0x84>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <HAL_TIM_Base_MspInit+0x84>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	201d      	movs	r0, #29
 8001414:	f000 ffbf 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001418:	201d      	movs	r0, #29
 800141a:	f000 ffd8 	bl	80023ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800141e:	e01a      	b.n	8001456 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_TIM_Base_MspInit+0x88>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d115      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <HAL_TIM_Base_MspInit+0x84>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a0c      	ldr	r2, [pc, #48]	@ (8001464 <HAL_TIM_Base_MspInit+0x84>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <HAL_TIM_Base_MspInit+0x84>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	201a      	movs	r0, #26
 800144c:	f000 ffa3 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001450:	201a      	movs	r0, #26
 8001452:	f000 ffbc 	bl	80023ce <HAL_NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40000400 	.word	0x40000400
 8001464:	40023800 	.word	0x40023800
 8001468:	40014800 	.word	0x40014800

0800146c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <HAL_TIM_MspPostInit+0x68>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d11d      	bne.n	80014ca <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_TIM_MspPostInit+0x6c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_TIM_MspPostInit+0x6c>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_TIM_MspPostInit+0x6c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Eng2PWM_Pin|Eng1PWM_Pin;
 80014aa:	2330      	movs	r3, #48	@ 0x30
 80014ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <HAL_TIM_MspPostInit+0x70>)
 80014c6:	f001 f823 	bl	8002510 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40000400 	.word	0x40000400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <NMI_Handler+0x4>

080014e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <MemManage_Handler+0x4>

080014f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <UsageFault_Handler+0x4>

08001508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001536:	f000 f8ef 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <ADC_IRQHandler+0x10>)
 8001546:	f000 f96e 	bl	8001826 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000184 	.word	0x20000184

08001554 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800155a:	f003 f9cf 	bl	80048fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000214 	.word	0x20000214

08001568 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <TIM3_IRQHandler+0x10>)
 800156e:	f003 f9c5 	bl	80048fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001cc 	.word	0x200001cc

0800157c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <OTG_FS_IRQHandler+0x10>)
 8001582:	f001 fac0 	bl	8002b06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000b80 	.word	0x20000b80

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f008 f93e 	bl	8009840 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20020000 	.word	0x20020000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	20000294 	.word	0x20000294
 80015f8:	200013d0 	.word	0x200013d0

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001624:	f7ff ffea 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f008 f8fd 	bl	800984c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff fbab 	bl	8000dac <main>
  bx  lr    
 8001656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001664:	0800a074 	.word	0x0800a074
  ldr r2, =_sbss
 8001668:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800166c:	200013cc 	.word	0x200013cc

08001670 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <DMA1_Stream0_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 fe6f 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fe0a 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fe87 	bl	80023ea <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 fe4f 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000004 	.word	0x20000004
 8001710:	2000000c 	.word	0x2000000c
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000000c 	.word	0x2000000c
 800173c:	20000298 	.word	0x20000298

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000298 	.word	0x20000298

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c

080017a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e033      	b.n	800181e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fda6 	bl	8001310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017e6:	f023 0302 	bic.w	r3, r3, #2
 80017ea:	f043 0202 	orr.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fb6c 	bl	8001ed0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	@ 0x40
 800180e:	e001      	b.n	8001814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d049      	beq.n	80018f0 <HAL_ADC_IRQHandler+0xca>
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d046      	beq.n	80018f0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d12b      	bne.n	80018e0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800188c:	2b00      	cmp	r3, #0
 800188e:	d127      	bne.n	80018e0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d119      	bne.n	80018e0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0220 	bic.w	r2, r2, #32
 80018ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff f92d 	bl	8000b40 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f06f 0212 	mvn.w	r2, #18
 80018ee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d057      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x190>
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d054      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d139      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001938:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800194a:	2b00      	cmp	r3, #0
 800194c:	d12b      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	d124      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11d      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800196e:	2b00      	cmp	r3, #0
 8001970:	d119      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001980:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fc10 	bl	80021cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 020c 	mvn.w	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d017      	beq.n	80019fc <HAL_ADC_IRQHandler+0x1d6>
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d014      	beq.n	80019fc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10d      	bne.n	80019fc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f929 	bl	8001c44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0201 	mvn.w	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a0a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d015      	beq.n	8001a3e <HAL_ADC_IRQHandler+0x218>
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1c:	f043 0202 	orr.w	r2, r3, #2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0220 	mvn.w	r2, #32
 8001a2c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f912 	bl	8001c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0220 	mvn.w	r2, #32
 8001a3c:	601a      	str	r2, [r3, #0]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Start_DMA+0x22>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e0d0      	b.n	8001c0c <HAL_ADC_Start_DMA+0x1c4>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d018      	beq.n	8001ab2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a90:	4b60      	ldr	r3, [pc, #384]	@ (8001c14 <HAL_ADC_Start_DMA+0x1cc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a60      	ldr	r2, [pc, #384]	@ (8001c18 <HAL_ADC_Start_DMA+0x1d0>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9a      	lsrs	r2, r3, #18
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ac0:	d107      	bne.n	8001ad2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ad0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f040 8088 	bne.w	8001bf2 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b20:	d106      	bne.n	8001b30 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f023 0206 	bic.w	r2, r3, #6
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b2e:	e002      	b.n	8001b36 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_ADC_Start_DMA+0x1d4>)
 8001b40:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b46:	4a36      	ldr	r2, [pc, #216]	@ (8001c20 <HAL_ADC_Start_DMA+0x1d8>)
 8001b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4e:	4a35      	ldr	r2, [pc, #212]	@ (8001c24 <HAL_ADC_Start_DMA+0x1dc>)
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b56:	4a34      	ldr	r2, [pc, #208]	@ (8001c28 <HAL_ADC_Start_DMA+0x1e0>)
 8001b58:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b72:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b82:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	334c      	adds	r3, #76	@ 0x4c
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f000 fc35 	bl	8002402 <HAL_DMA_Start_IT>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d129      	bne.n	8001c0a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	e020      	b.n	8001c0a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	@ (8001c2c <HAL_ADC_Start_DMA+0x1e4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11b      	bne.n	8001c0a <HAL_ADC_Start_DMA+0x1c2>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d114      	bne.n	8001c0a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	e00b      	b.n	8001c0a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000004 	.word	0x20000004
 8001c18:	431bde83 	.word	0x431bde83
 8001c1c:	40012300 	.word	0x40012300
 8001c20:	080020c9 	.word	0x080020c9
 8001c24:	08002183 	.word	0x08002183
 8001c28:	0800219f 	.word	0x0800219f
 8001c2c:	40012000 	.word	0x40012000

08001c30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1c>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e113      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x244>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d925      	bls.n	8001ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	3b1e      	subs	r3, #30
 8001cae:	2207      	movs	r2, #7
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	400a      	ands	r2, r1
 8001cbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4403      	add	r3, r0
 8001cd6:	3b1e      	subs	r3, #30
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	e022      	b.n	8001d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4403      	add	r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d824      	bhi.n	8001d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b05      	subs	r3, #5
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b05      	subs	r3, #5
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d7a:	e04c      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d824      	bhi.n	8001dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b23      	subs	r3, #35	@ 0x23
 8001d96:	221f      	movs	r2, #31
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b23      	subs	r3, #35	@ 0x23
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dcc:	e023      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b41      	subs	r3, #65	@ 0x41
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b41      	subs	r3, #65	@ 0x41
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e16:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <HAL_ADC_ConfigChannel+0x250>)
 8001e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a28      	ldr	r2, [pc, #160]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x254>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d10f      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1d8>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b12      	cmp	r3, #18
 8001e2a:	d10b      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x254>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d12b      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x23a>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x258>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x1f4>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b11      	cmp	r3, #17
 8001e5e:	d122      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x258>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d111      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <HAL_ADC_ConfigChannel+0x260>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9a      	lsrs	r2, r3, #18
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e98:	e002      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f9      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40012300 	.word	0x40012300
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	10000012 	.word	0x10000012
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed8:	4b79      	ldr	r3, [pc, #484]	@ (80020c0 <ADC_Init+0x1f0>)
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	021a      	lsls	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	4a58      	ldr	r2, [pc, #352]	@ (80020c4 <ADC_Init+0x1f4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6899      	ldr	r1, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	e00f      	b.n	8001fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0202 	bic.w	r2, r2, #2
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
 8001fe8:	005a      	lsls	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800200a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800201a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	3b01      	subs	r3, #1
 8002028:	035a      	lsls	r2, r3, #13
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e007      	b.n	8002044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002042:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	3b01      	subs	r3, #1
 8002060:	051a      	lsls	r2, r3, #20
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6899      	ldr	r1, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002086:	025a      	lsls	r2, r3, #9
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800209e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	029a      	lsls	r2, r3, #10
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40012300 	.word	0x40012300
 80020c4:	0f000001 	.word	0x0f000001

080020c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d13c      	bne.n	800215c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12b      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002100:	2b00      	cmp	r3, #0
 8002102:	d127      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800211c:	2b00      	cmp	r3, #0
 800211e:	d119      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0220 	bic.w	r2, r2, #32
 800212e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7fe fcf3 	bl	8000b40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800215a:	e00e      	b.n	800217a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff fd75 	bl	8001c58 <HAL_ADC_ErrorCallback>
}
 800216e:	e004      	b.n	800217a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff fd4d 	bl	8001c30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f043 0204 	orr.w	r2, r3, #4
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff fd4a 	bl	8001c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	@ (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	@ (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	@ (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff3e 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff8e 	bl	80022d4 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5d 	bl	8002280 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff31 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002418:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_DMA_Start_IT+0x26>
 8002424:	2302      	movs	r3, #2
 8002426:	e040      	b.n	80024aa <HAL_DMA_Start_IT+0xa8>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d12f      	bne.n	800249c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f82e 	bl	80024b2 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245a:	223f      	movs	r2, #63	@ 0x3f
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0216 	orr.w	r2, r2, #22
 8002470:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0208 	orr.w	r2, r2, #8
 8002488:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e005      	b.n	80024a8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
 80024a6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024ce:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b40      	cmp	r3, #64	@ 0x40
 80024de:	d108      	bne.n	80024f2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024f0:	e007      	b.n	8002502 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	60da      	str	r2, [r3, #12]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e159      	b.n	80027e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8148 	bne.w	80027da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a2 	beq.w	80027da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b57      	ldr	r3, [pc, #348]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b54      	ldr	r3, [pc, #336]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_GPIO_Init+0x2ec>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a49      	ldr	r2, [pc, #292]	@ (8002800 <HAL_GPIO_Init+0x2f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x202>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_GPIO_Init+0x2f4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1fe>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a47      	ldr	r2, [pc, #284]	@ (8002808 <HAL_GPIO_Init+0x2f8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1fa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a46      	ldr	r2, [pc, #280]	@ (800280c <HAL_GPIO_Init+0x2fc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1f6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a45      	ldr	r2, [pc, #276]	@ (8002810 <HAL_GPIO_Init+0x300>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1f2>
 80026fe:	2304      	movs	r3, #4
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002702:	2307      	movs	r3, #7
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	@ (80027fc <HAL_GPIO_Init+0x2ec>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_GPIO_Init+0x304>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f aea2 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800285c:	887a      	ldrh	r2, [r7, #2]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	041a      	lsls	r2, r3, #16
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43d9      	mvns	r1, r3
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	400b      	ands	r3, r1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af02      	add	r7, sp, #8
 8002884:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e101      	b.n	8002a94 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f006 fbce 	bl	800904c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028be:	d102      	bne.n	80028c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 ff23 	bl	8005716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7c1a      	ldrb	r2, [r3, #16]
 80028d8:	f88d 2000 	strb.w	r2, [sp]
 80028dc:	3304      	adds	r3, #4
 80028de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e0:	f002 fe02 	bl	80054e8 <USB_CoreInit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0ce      	b.n	8002a94 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 ff1b 	bl	8005738 <USB_SetCurrentMode>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0bf      	b.n	8002a94 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e04a      	b.n	80029b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3315      	adds	r3, #21
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3314      	adds	r3, #20
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	b298      	uxth	r0, r3
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	332e      	adds	r3, #46	@ 0x2e
 8002956:	4602      	mov	r2, r0
 8002958:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3318      	adds	r3, #24
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	331c      	adds	r3, #28
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3320      	adds	r3, #32
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3324      	adds	r3, #36	@ 0x24
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	3301      	adds	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	791b      	ldrb	r3, [r3, #4]
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d3af      	bcc.n	800291a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e044      	b.n	8002a4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	3301      	adds	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	791b      	ldrb	r3, [r3, #4]
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d3b5      	bcc.n	80029c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7c1a      	ldrb	r2, [r3, #16]
 8002a5c:	f88d 2000 	strb.w	r2, [sp]
 8002a60:	3304      	adds	r3, #4
 8002a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a64:	f002 feb4 	bl	80057d0 <USB_DevInit>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00c      	b.n	8002a94 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fefe 	bl	800688e <USB_DevDisconnect>

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_Start+0x1c>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e022      	b.n	8002afe <HAL_PCD_Start+0x62>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fe05 	bl	80056f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 feac 	bl	800684c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b06:	b590      	push	{r4, r7, lr}
 8002b08:	b08d      	sub	sp, #52	@ 0x34
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 ff6a 	bl	80069f6 <USB_GetMode>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f040 848c 	bne.w	8003442 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 fece 	bl	80068d0 <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8482 	beq.w	8003440 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 febb 	bl	80068d0 <USB_ReadInterrupts>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d107      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f002 0202 	and.w	r2, r2, #2
 8002b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fea9 	bl	80068d0 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d161      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0210 	bic.w	r2, r2, #16
 8002b96:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002bbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bc2:	d124      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d035      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	6a38      	ldr	r0, [r7, #32]
 8002be4:	f003 fce0 	bl	80065a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf4:	441a      	add	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c06:	441a      	add	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	e016      	b.n	8002c3c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002c14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c18:	d110      	bne.n	8002c3c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c20:	2208      	movs	r2, #8
 8002c22:	4619      	mov	r1, r3
 8002c24:	6a38      	ldr	r0, [r7, #32]
 8002c26:	f003 fcbf 	bl	80065a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c36:	441a      	add	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0210 	orr.w	r2, r2, #16
 8002c4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fe3d 	bl	80068d0 <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c60:	f040 80a7 	bne.w	8002db2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 fe42 	bl	80068f6 <USB_ReadDevAllOutEpInterrupt>
 8002c72:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c74:	e099      	b.n	8002daa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 808e 	beq.w	8002d9e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 fe66 	bl	800695e <USB_ReadDevOutEPInterrupt>
 8002c92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002caa:	461a      	mov	r2, r3
 8002cac:	2301      	movs	r3, #1
 8002cae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fea4 	bl	8003a00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 ff7a 	bl	8003bd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d030      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b80      	cmp	r3, #128	@ 0x80
 8002d0c:	d109      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d20:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d108      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2200      	movs	r2, #0
 8002d44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f006 fa79 	bl	8009244 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2302      	movs	r3, #2
 8002d62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d96:	461a      	mov	r2, r3
 8002d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	3301      	adds	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f af62 	bne.w	8002c76 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fd8a 	bl	80068d0 <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dc6:	f040 80db 	bne.w	8002f80 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fdab 	bl	800692a <USB_ReadDevAllInEpInterrupt>
 8002dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002dda:	e0cd      	b.n	8002f78 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80c2 	beq.w	8002f6c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fdd1 	bl	800699a <USB_ReadDevInEPInterrupt>
 8002df8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d057      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69f9      	ldr	r1, [r7, #28]
 8002e20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e24:	4013      	ands	r3, r2
 8002e26:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e34:	461a      	mov	r2, r3
 8002e36:	2301      	movs	r3, #1
 8002e38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	799b      	ldrb	r3, [r3, #6]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d132      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3320      	adds	r3, #32
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4403      	add	r3, r0
 8002e62:	331c      	adds	r3, #28
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4419      	add	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4403      	add	r3, r0
 8002e76:	3320      	adds	r3, #32
 8002e78:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d113      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x3a2>
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3324      	adds	r3, #36	@ 0x24
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	f003 fdd8 	bl	8006a58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f006 f94d 	bl	800914e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2308      	movs	r3, #8
 8002ece:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2310      	movs	r3, #16
 8002eea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f02:	461a      	mov	r2, r3
 8002f04:	2340      	movs	r3, #64	@ 0x40
 8002f06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d023      	beq.n	8002f5a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f14:	6a38      	ldr	r0, [r7, #32]
 8002f16:	f002 fdbf 	bl	8005a98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3310      	adds	r3, #16
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	78db      	ldrb	r3, [r3, #3]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d108      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4619      	mov	r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f006 f990 	bl	8009268 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f54:	461a      	mov	r2, r3
 8002f56:	2302      	movs	r3, #2
 8002f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fcbd 	bl	80038e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	3301      	adds	r3, #1
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f47f af2e 	bne.w	8002ddc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fca3 	bl	80068d0 <USB_ReadInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f94:	d122      	bne.n	8002fdc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d108      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fea4 	bl	8003d0c <HAL_PCDEx_LPM_Callback>
 8002fc4:	e002      	b.n	8002fcc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f006 f92e 	bl	8009228 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 fc75 	bl	80068d0 <USB_ReadInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff0:	d112      	bne.n	8003018 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d102      	bne.n	8003008 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f006 f8ea 	bl	80091dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003016:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fc57 	bl	80068d0 <USB_ReadInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302c:	f040 80b7 	bne.w	800319e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2110      	movs	r1, #16
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fd24 	bl	8005a98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003054:	e046      	b.n	80030e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003062:	461a      	mov	r2, r3
 8003064:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003068:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800306a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800307a:	0151      	lsls	r1, r2, #5
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	440a      	add	r2, r1
 8003080:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003084:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003088:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003096:	461a      	mov	r2, r3
 8003098:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800309c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ae:	0151      	lsls	r1, r2, #5
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	440a      	add	r2, r1
 80030b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80030b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ce:	0151      	lsls	r1, r2, #5
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	440a      	add	r2, r1
 80030d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80030d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e0:	3301      	adds	r3, #1
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	791b      	ldrb	r3, [r3, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d3b2      	bcc.n	8003056 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003102:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7bdb      	ldrb	r3, [r3, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d016      	beq.n	800313a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800311c:	f043 030b 	orr.w	r3, r3, #11
 8003120:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003132:	f043 030b 	orr.w	r3, r3, #11
 8003136:	6453      	str	r3, [r2, #68]	@ 0x44
 8003138:	e015      	b.n	8003166 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003148:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800314c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003150:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003160:	f043 030b 	orr.w	r3, r3, #11
 8003164:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003174:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003178:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003188:	461a      	mov	r2, r3
 800318a:	f003 fc65 	bl	8006a58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800319c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fb94 	bl	80068d0 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b2:	d123      	bne.n	80031fc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fc2a 	bl	8006a12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f002 fce1 	bl	8005b8a <USB_GetDevSpeed>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681c      	ldr	r4, [r3, #0]
 80031d4:	f001 f9ca 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80031d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031de:	461a      	mov	r2, r3
 80031e0:	4620      	mov	r0, r4
 80031e2:	f002 f9e5 	bl	80055b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f005 ffd9 	bl	800919e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80031fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fb65 	bl	80068d0 <USB_ReadInterrupts>
 8003206:	4603      	mov	r3, r0
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d10a      	bne.n	8003226 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f005 ffb6 	bl	8009182 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f002 0208 	and.w	r2, r2, #8
 8003224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fb50 	bl	80068d0 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b80      	cmp	r3, #128	@ 0x80
 8003238:	d123      	bne.n	8003282 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003246:	2301      	movs	r3, #1
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
 800324a:	e014      	b.n	8003276 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fb0a 	bl	8003884 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	3301      	adds	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	4293      	cmp	r3, r2
 8003280:	d3e4      	bcc.n	800324c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 fb22 	bl	80068d0 <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003296:	d13c      	bne.n	8003312 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003298:	2301      	movs	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
 800329c:	e02b      	b.n	80032f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3318      	adds	r3, #24
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d115      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da12      	bge.n	80032f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3317      	adds	r3, #23
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	4619      	mov	r1, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 faca 	bl	8003884 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	3301      	adds	r3, #1
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	791b      	ldrb	r3, [r3, #4]
 80032fa:	461a      	mov	r2, r3
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	4293      	cmp	r3, r2
 8003300:	d3cd      	bcc.n	800329e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fada 	bl	80068d0 <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003322:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003326:	d156      	bne.n	80033d6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003328:	2301      	movs	r3, #1
 800332a:	627b      	str	r3, [r7, #36]	@ 0x24
 800332c:	e045      	b.n	80033ba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d12e      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003356:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	da2b      	bge.n	80033b4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	0c1a      	lsrs	r2, r3, #16
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003366:	4053      	eors	r3, r2
 8003368:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800336c:	2b00      	cmp	r3, #0
 800336e:	d121      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033b0:	6053      	str	r3, [r2, #4]
            break;
 80033b2:	e008      	b.n	80033c6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	3301      	adds	r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	791b      	ldrb	r3, [r3, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d3b3      	bcc.n	800332e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80033d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 fa78 	bl	80068d0 <USB_ReadInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ea:	d10a      	bne.n	8003402 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f005 ff4d 	bl	800928c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fa62 	bl	80068d0 <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d115      	bne.n	8003442 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f005 ff3d 	bl	80092a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	e000      	b.n	8003442 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003440:	bf00      	nop
    }
  }
}
 8003442:	3734      	adds	r7, #52	@ 0x34
 8003444:	46bd      	mov	sp, r7
 8003446:	bd90      	pop	{r4, r7, pc}

08003448 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_PCD_SetAddress+0x1a>
 800345e:	2302      	movs	r3, #2
 8003460:	e012      	b.n	8003488 <HAL_PCD_SetAddress+0x40>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f003 f9c1 	bl	8006800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	70fb      	strb	r3, [r7, #3]
 80034a2:	460b      	mov	r3, r1
 80034a4:	803b      	strh	r3, [r7, #0]
 80034a6:	4613      	mov	r3, r2
 80034a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da0f      	bge.n	80034d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	3310      	adds	r3, #16
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	705a      	strb	r2, [r3, #1]
 80034d4:	e00f      	b.n	80034f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	3304      	adds	r3, #4
 80034ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003502:	883b      	ldrh	r3, [r7, #0]
 8003504:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	78ba      	ldrb	r2, [r7, #2]
 8003510:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003524:	78bb      	ldrb	r3, [r7, #2]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d102      	bne.n	8003530 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_PCD_EP_Open+0xae>
 800353a:	2302      	movs	r3, #2
 800353c:	e00e      	b.n	800355c <HAL_PCD_EP_Open+0xcc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f002 fb41 	bl	8005bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800355a:	7afb      	ldrb	r3, [r7, #11]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da0f      	bge.n	8003598 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 020f 	and.w	r2, r3, #15
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	3310      	adds	r3, #16
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	705a      	strb	r2, [r3, #1]
 8003596:	e00f      	b.n	80035b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	f003 020f 	and.w	r2, r3, #15
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	3304      	adds	r3, #4
 80035b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_PCD_EP_Close+0x6e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e00e      	b.n	80035f0 <HAL_PCD_EP_Close+0x8c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fb7f 	bl	8005ce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	460b      	mov	r3, r1
 8003606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	799b      	ldrb	r3, [r3, #6]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	799b      	ldrb	r3, [r3, #6]
 800365c:	461a      	mov	r2, r3
 800365e:	6979      	ldr	r1, [r7, #20]
 8003660:	f002 fc1c 	bl	8005e9c <USB_EPStartXfer>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003690:	681b      	ldr	r3, [r3, #0]
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	460b      	mov	r3, r1
 80036ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	f003 020f 	and.w	r2, r3, #15
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	3310      	adds	r3, #16
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2201      	movs	r2, #1
 80036dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036de:	7afb      	ldrb	r3, [r7, #11]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	799b      	ldrb	r3, [r3, #6]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	799b      	ldrb	r3, [r3, #6]
 8003700:	461a      	mov	r2, r3
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	f002 fbca 	bl	8005e9c <USB_EPStartXfer>

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	7912      	ldrb	r2, [r2, #4]
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e04f      	b.n	80037d0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003734:	2b00      	cmp	r3, #0
 8003736:	da0f      	bge.n	8003758 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 020f 	and.w	r2, r3, #15
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	3310      	adds	r3, #16
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	705a      	strb	r2, [r3, #1]
 8003756:	e00d      	b.n	8003774 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_PCD_EP_SetStall+0x82>
 8003790:	2302      	movs	r3, #2
 8003792:	e01d      	b.n	80037d0 <HAL_PCD_EP_SetStall+0xbe>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68f9      	ldr	r1, [r7, #12]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 ff58 	bl	8006658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7999      	ldrb	r1, [r3, #6]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037c0:	461a      	mov	r2, r3
 80037c2:	f003 f949 	bl	8006a58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	7912      	ldrb	r2, [r2, #4]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e042      	b.n	800387c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da0f      	bge.n	800381e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3310      	adds	r3, #16
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	705a      	strb	r2, [r3, #1]
 800381c:	e00f      	b.n	800383e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_PCD_EP_ClrStall+0x86>
 800385a:	2302      	movs	r3, #2
 800385c:	e00e      	b.n	800387c <HAL_PCD_EP_ClrStall+0xa4>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	f002 ff61 	bl	8006734 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da0c      	bge.n	80038b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 020f 	and.w	r2, r3, #15
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	3310      	adds	r3, #16
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e00c      	b.n	80038cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 020f 	and.w	r2, r3, #15
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 fd80 	bl	80063d8 <USB_EPStopXfer>
 80038d8:	4603      	mov	r3, r0
 80038da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038dc:	7afb      	ldrb	r3, [r7, #11]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b08a      	sub	sp, #40	@ 0x28
 80038ea:	af02      	add	r7, sp, #8
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	3310      	adds	r3, #16
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	3304      	adds	r3, #4
 800390c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	429a      	cmp	r2, r3
 8003918:	d901      	bls.n	800391e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e06b      	b.n	80039f6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	429a      	cmp	r2, r3
 8003932:	d902      	bls.n	800393a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3303      	adds	r3, #3
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003942:	e02a      	b.n	800399a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	429a      	cmp	r2, r3
 8003958:	d902      	bls.n	8003960 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3303      	adds	r3, #3
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4603      	mov	r3, r0
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f002 fdd5 	bl	800652c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	441a      	add	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d809      	bhi.n	80039c4 <PCD_WriteEmptyTxFifo+0xde>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d203      	bcs.n	80039c4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1bf      	bne.n	8003944 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d811      	bhi.n	80039f4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	2201      	movs	r2, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	6939      	ldr	r1, [r7, #16]
 80039ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039f0:	4013      	ands	r3, r2
 80039f2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	333c      	adds	r3, #60	@ 0x3c
 8003a18:	3304      	adds	r3, #4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	799b      	ldrb	r3, [r3, #6]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d17b      	bne.n	8003b2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4a61      	ldr	r2, [pc, #388]	@ (8003bc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	f240 80b9 	bls.w	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80b3 	beq.w	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a62:	461a      	mov	r2, r3
 8003a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	e0a7      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a82:	461a      	mov	r2, r3
 8003a84:	2320      	movs	r3, #32
 8003a86:	6093      	str	r3, [r2, #8]
 8003a88:	e098      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 8093 	bne.w	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d90f      	bls.n	8003abe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aba:	6093      	str	r3, [r2, #8]
 8003abc:	e07e      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1a      	ldr	r2, [r3, #32]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	440b      	add	r3, r1
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d114      	bne.n	8003b20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	f002 ffa4 	bl	8006a58 <USB_EP0_OutStart>
 8003b10:	e006      	b.n	8003b20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	441a      	add	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f005 faf6 	bl	8009118 <HAL_PCD_DataOutStageCallback>
 8003b2c:	e046      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4a26      	ldr	r2, [pc, #152]	@ (8003bcc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d124      	bne.n	8003b80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b52:	6093      	str	r3, [r2, #8]
 8003b54:	e032      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2320      	movs	r3, #32
 8003b70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f005 facd 	bl	8009118 <HAL_PCD_DataOutStageCallback>
 8003b7e:	e01d      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d114      	bne.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2100      	movs	r1, #0
 8003bac:	f002 ff54 	bl	8006a58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f005 faae 	bl	8009118 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	4f54300a 	.word	0x4f54300a
 8003bcc:	4f54310a 	.word	0x4f54310a

08003bd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	333c      	adds	r3, #60	@ 0x3c
 8003be8:	3304      	adds	r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d90e      	bls.n	8003c24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f005 fa65 	bl	80090f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d90c      	bls.n	8003c4c <PCD_EP_OutSetupPacket_int+0x7c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	799b      	ldrb	r3, [r3, #6]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d108      	bne.n	8003c4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c44:	461a      	mov	r2, r3
 8003c46:	2101      	movs	r1, #1
 8003c48:	f002 ff06 	bl	8006a58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	4f54300a 	.word	0x4f54300a

08003c5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d107      	bne.n	8003c8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c7a:	883b      	ldrh	r3, [r7, #0]
 8003c7c:	0419      	lsls	r1, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c88:	e028      	b.n	8003cdc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	e00d      	b.n	8003cba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	3340      	adds	r3, #64	@ 0x40
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d3ec      	bcc.n	8003c9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cc4:	883b      	ldrh	r3, [r7, #0]
 8003cc6:	0418      	lsls	r0, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6819      	ldr	r1, [r3, #0]
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	4302      	orrs	r2, r0
 8003cd4:	3340      	adds	r3, #64	@ 0x40
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e267      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d075      	beq.n	8003e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d42:	4b88      	ldr	r3, [pc, #544]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b85      	ldr	r3, [pc, #532]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b82      	ldr	r3, [pc, #520]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b7e      	ldr	r3, [pc, #504]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e242      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x74>
 8003d8a:	4b76      	ldr	r3, [pc, #472]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a75      	ldr	r2, [pc, #468]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x98>
 8003da2:	4b70      	ldr	r3, [pc, #448]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6f      	ldr	r2, [pc, #444]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b6d      	ldr	r3, [pc, #436]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6c      	ldr	r2, [pc, #432]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	4b69      	ldr	r3, [pc, #420]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a68      	ldr	r2, [pc, #416]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b66      	ldr	r3, [pc, #408]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a65      	ldr	r2, [pc, #404]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fcb0 	bl	8001740 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fcac 	bl	8001740 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e207      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xc0>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd fc9c 	bl	8001740 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fc98 	bl	8001740 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1f3      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b51      	ldr	r3, [pc, #324]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0xe8>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d063      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b47      	ldr	r3, [pc, #284]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d11c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e52:	4b44      	ldr	r3, [pc, #272]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d116      	bne.n	8003e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5e:	4b41      	ldr	r3, [pc, #260]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_RCC_OscConfig+0x152>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e1c7      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e76:	4b3b      	ldr	r3, [pc, #236]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4937      	ldr	r1, [pc, #220]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	e03a      	b.n	8003f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e94:	4b34      	ldr	r3, [pc, #208]	@ (8003f68 <HAL_RCC_OscConfig+0x244>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fc51 	bl	8001740 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fd fc4d 	bl	8001740 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1a8      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec0:	4b28      	ldr	r3, [pc, #160]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4925      	ldr	r1, [pc, #148]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed6:	4b24      	ldr	r3, [pc, #144]	@ (8003f68 <HAL_RCC_OscConfig+0x244>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fc30 	bl	8001740 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7fd fc2c 	bl	8001740 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e187      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d036      	beq.n	8003f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f16:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <HAL_RCC_OscConfig+0x248>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fd fc10 	bl	8001740 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fd fc0c 	bl	8001740 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e167      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x200>
 8003f42:	e01b      	b.n	8003f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f44:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_OscConfig+0x248>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fbf9 	bl	8001740 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	e00e      	b.n	8003f70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fd fbf5 	bl	8001740 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d907      	bls.n	8003f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e150      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
 8003f64:	40023800 	.word	0x40023800
 8003f68:	42470000 	.word	0x42470000
 8003f6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	4b88      	ldr	r3, [pc, #544]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ea      	bne.n	8003f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8097 	beq.w	80040b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8e:	4b81      	ldr	r3, [pc, #516]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10f      	bne.n	8003fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003faa:	4b7a      	ldr	r3, [pc, #488]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fba:	4b77      	ldr	r3, [pc, #476]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d118      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc6:	4b74      	ldr	r3, [pc, #464]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a73      	ldr	r2, [pc, #460]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd2:	f7fd fbb5 	bl	8001740 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fda:	f7fd fbb1 	bl	8001740 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e10c      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	4b6a      	ldr	r3, [pc, #424]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x2ea>
 8004000:	4b64      	ldr	r3, [pc, #400]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a63      	ldr	r2, [pc, #396]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
 800400c:	e01c      	b.n	8004048 <HAL_RCC_OscConfig+0x324>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b05      	cmp	r3, #5
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x30c>
 8004016:	4b5f      	ldr	r3, [pc, #380]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a5e      	ldr	r2, [pc, #376]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
 8004022:	4b5c      	ldr	r3, [pc, #368]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004026:	4a5b      	ldr	r2, [pc, #364]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6713      	str	r3, [r2, #112]	@ 0x70
 800402e:	e00b      	b.n	8004048 <HAL_RCC_OscConfig+0x324>
 8004030:	4b58      	ldr	r3, [pc, #352]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	4a57      	ldr	r2, [pc, #348]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	@ 0x70
 800403c:	4b55      	ldr	r3, [pc, #340]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	4a54      	ldr	r2, [pc, #336]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004042:	f023 0304 	bic.w	r3, r3, #4
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d015      	beq.n	800407c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fd fb76 	bl	8001740 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	e00a      	b.n	800406e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fd fb72 	bl	8001740 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e0cb      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	4b49      	ldr	r3, [pc, #292]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ee      	beq.n	8004058 <HAL_RCC_OscConfig+0x334>
 800407a:	e014      	b.n	80040a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7fd fb60 	bl	8001740 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fd fb5c 	bl	8001740 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0b5      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	4b3e      	ldr	r3, [pc, #248]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1ee      	bne.n	8004084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d105      	bne.n	80040b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ac:	4b39      	ldr	r3, [pc, #228]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	4a38      	ldr	r2, [pc, #224]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a1 	beq.w	8004204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c2:	4b34      	ldr	r3, [pc, #208]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d05c      	beq.n	8004188 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d141      	bne.n	800415a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	4b31      	ldr	r3, [pc, #196]	@ (800419c <HAL_RCC_OscConfig+0x478>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fd fb30 	bl	8001740 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fd fb2c 	bl	8001740 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e087      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	4b27      	ldr	r3, [pc, #156]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	019b      	lsls	r3, r3, #6
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	3b01      	subs	r3, #1
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	491b      	ldr	r1, [pc, #108]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b1b      	ldr	r3, [pc, #108]	@ (800419c <HAL_RCC_OscConfig+0x478>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fd fb05 	bl	8001740 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fd fb01 	bl	8001740 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e05c      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414c:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x416>
 8004158:	e054      	b.n	8004204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415a:	4b10      	ldr	r3, [pc, #64]	@ (800419c <HAL_RCC_OscConfig+0x478>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fd faee 	bl	8001740 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004168:	f7fd faea 	bl	8001740 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e045      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x444>
 8004186:	e03d      	b.n	8004204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e038      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
 8004194:	40023800 	.word	0x40023800
 8004198:	40007000 	.word	0x40007000
 800419c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x4ec>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d028      	beq.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d121      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d11a      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d8:	4293      	cmp	r3, r2
 80041da:	d111      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	3b01      	subs	r3, #1
 80041ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800

08004214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0cc      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004228:	4b68      	ldr	r3, [pc, #416]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d90c      	bls.n	8004250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b65      	ldr	r3, [pc, #404]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b63      	ldr	r3, [pc, #396]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b8      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b59      	ldr	r3, [pc, #356]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a58      	ldr	r2, [pc, #352]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004280:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a52      	ldr	r2, [pc, #328]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800428a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b50      	ldr	r3, [pc, #320]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	494d      	ldr	r1, [pc, #308]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d044      	beq.n	8004334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d119      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	4b3f      	ldr	r3, [pc, #252]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e2:	4b3b      	ldr	r3, [pc, #236]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e067      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f2:	4b37      	ldr	r3, [pc, #220]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4934      	ldr	r1, [pc, #208]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004304:	f7fd fa1c 	bl	8001740 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fd fa18 	bl	8001740 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e04f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	4b2b      	ldr	r3, [pc, #172]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 020c 	and.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	429a      	cmp	r2, r3
 8004332:	d1eb      	bne.n	800430c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d20c      	bcs.n	800435c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e032      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b19      	ldr	r3, [pc, #100]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4916      	ldr	r1, [pc, #88]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004386:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	490e      	ldr	r1, [pc, #56]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439a:	f000 f821 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	490a      	ldr	r1, [pc, #40]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a09      	ldr	r2, [pc, #36]	@ (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd f97c 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800a020 	.word	0x0800a020
 80043d8:	20000004 	.word	0x20000004
 80043dc:	20000008 	.word	0x20000008

080043e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e4:	b090      	sub	sp, #64	@ 0x40
 80043e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f8:	4b59      	ldr	r3, [pc, #356]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b08      	cmp	r3, #8
 8004402:	d00d      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x40>
 8004404:	2b08      	cmp	r3, #8
 8004406:	f200 80a1 	bhi.w	800454c <HAL_RCC_GetSysClockFreq+0x16c>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x34>
 800440e:	2b04      	cmp	r3, #4
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x3a>
 8004412:	e09b      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b53      	ldr	r3, [pc, #332]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x184>)
 8004416:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004418:	e09b      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441a:	4b53      	ldr	r3, [pc, #332]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x188>)
 800441c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800441e:	e098      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004420:	4b4f      	ldr	r3, [pc, #316]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800442a:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d028      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	2200      	movs	r2, #0
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	627a      	str	r2, [r7, #36]	@ 0x24
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004448:	2100      	movs	r1, #0
 800444a:	4b47      	ldr	r3, [pc, #284]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x188>)
 800444c:	fb03 f201 	mul.w	r2, r3, r1
 8004450:	2300      	movs	r3, #0
 8004452:	fb00 f303 	mul.w	r3, r0, r3
 8004456:	4413      	add	r3, r2
 8004458:	4a43      	ldr	r2, [pc, #268]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x188>)
 800445a:	fba0 1202 	umull	r1, r2, r0, r2
 800445e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004460:	460a      	mov	r2, r1
 8004462:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004466:	4413      	add	r3, r2
 8004468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	2200      	movs	r2, #0
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	61fa      	str	r2, [r7, #28]
 8004472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004476:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800447a:	f7fb ff01 	bl	8000280 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4613      	mov	r3, r2
 8004484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004486:	e053      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004488:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	2200      	movs	r2, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	617a      	str	r2, [r7, #20]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800449a:	f04f 0b00 	mov.w	fp, #0
 800449e:	4652      	mov	r2, sl
 80044a0:	465b      	mov	r3, fp
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	0159      	lsls	r1, r3, #5
 80044ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b0:	0150      	lsls	r0, r2, #5
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	ebb2 080a 	subs.w	r8, r2, sl
 80044ba:	eb63 090b 	sbc.w	r9, r3, fp
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044d2:	ebb2 0408 	subs.w	r4, r2, r8
 80044d6:	eb63 0509 	sbc.w	r5, r3, r9
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	00eb      	lsls	r3, r5, #3
 80044e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e8:	00e2      	lsls	r2, r4, #3
 80044ea:	4614      	mov	r4, r2
 80044ec:	461d      	mov	r5, r3
 80044ee:	eb14 030a 	adds.w	r3, r4, sl
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	eb45 030b 	adc.w	r3, r5, fp
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004506:	4629      	mov	r1, r5
 8004508:	028b      	lsls	r3, r1, #10
 800450a:	4621      	mov	r1, r4
 800450c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004510:	4621      	mov	r1, r4
 8004512:	028a      	lsls	r2, r1, #10
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451a:	2200      	movs	r2, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	60fa      	str	r2, [r7, #12]
 8004520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004524:	f7fb feac 	bl	8000280 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004530:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x184>)
 800454e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004554:	4618      	mov	r0, r3
 8004556:	3740      	adds	r7, #64	@ 0x40
 8004558:	46bd      	mov	sp, r7
 800455a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	00f42400 	.word	0x00f42400
 8004568:	017d7840 	.word	0x017d7840

0800456c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004570:	4b03      	ldr	r3, [pc, #12]	@ (8004580 <HAL_RCC_GetHCLKFreq+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000004 	.word	0x20000004

08004584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e041      	b.n	800461a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc ff18 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f000 fc3c 	bl	8004e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d001      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e044      	b.n	80046c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1e      	ldr	r2, [pc, #120]	@ (80046d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x6c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004666:	d013      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x6c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1a      	ldr	r2, [pc, #104]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x6c>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <HAL_TIM_Base_Start_IT+0xb8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x6c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a17      	ldr	r2, [pc, #92]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x6c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a16      	ldr	r2, [pc, #88]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d010      	beq.n	80046c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	e007      	b.n	80046c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40000c00 	.word	0x40000c00
 80046e4:	40014000 	.word	0x40014000

080046e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e041      	b.n	800477e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f839 	bl	8004786 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 fb8a 	bl	8004e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x24>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e022      	b.n	8004806 <HAL_TIM_PWM_Start+0x6a>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d109      	bne.n	80047da <HAL_TIM_PWM_Start+0x3e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	e015      	b.n	8004806 <HAL_TIM_PWM_Start+0x6a>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d109      	bne.n	80047f4 <HAL_TIM_PWM_Start+0x58>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e008      	b.n	8004806 <HAL_TIM_PWM_Start+0x6a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e068      	b.n	80048e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0x82>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481c:	e013      	b.n	8004846 <HAL_TIM_PWM_Start+0xaa>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0x92>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482c:	e00b      	b.n	8004846 <HAL_TIM_PWM_Start+0xaa>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483c:	e003      	b.n	8004846 <HAL_TIM_PWM_Start+0xaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2202      	movs	r2, #2
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2201      	movs	r2, #1
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fda2 	bl	8005398 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a23      	ldr	r2, [pc, #140]	@ (80048e8 <HAL_TIM_PWM_Start+0x14c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d107      	bne.n	800486e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800486c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <HAL_TIM_PWM_Start+0x14c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_TIM_PWM_Start+0x10e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004880:	d013      	beq.n	80048aa <HAL_TIM_PWM_Start+0x10e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <HAL_TIM_PWM_Start+0x150>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_TIM_PWM_Start+0x10e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_TIM_PWM_Start+0x154>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIM_PWM_Start+0x10e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a16      	ldr	r2, [pc, #88]	@ (80048f4 <HAL_TIM_PWM_Start+0x158>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIM_PWM_Start+0x10e>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <HAL_TIM_PWM_Start+0x15c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d111      	bne.n	80048ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d010      	beq.n	80048de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	e007      	b.n	80048de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40014000 	.word	0x40014000

080048fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d020      	beq.n	8004960 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0202 	mvn.w	r2, #2
 8004930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fa5b 	bl	8004e02 <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa4d 	bl	8004dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fa5e 	bl	8004e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d020      	beq.n	80049ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01b      	beq.n	80049ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0204 	mvn.w	r2, #4
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa35 	bl	8004e02 <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa27 	bl	8004dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fa38 	bl	8004e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d020      	beq.n	80049f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01b      	beq.n	80049f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0208 	mvn.w	r2, #8
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2204      	movs	r2, #4
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fa0f 	bl	8004e02 <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa01 	bl	8004dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fa12 	bl	8004e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d020      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01b      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0210 	mvn.w	r2, #16
 8004a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9e9 	bl	8004e02 <HAL_TIM_IC_CaptureCallback>
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9db 	bl	8004dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f9ec 	bl	8004e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0201 	mvn.w	r2, #1
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc f894 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fd24 	bl	80054d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9bd 	bl	8004e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0220 	mvn.w	r2, #32
 8004acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fcf6 	bl	80054c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e0ae      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	f200 809f 	bhi.w	8004c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004c49 	.word	0x08004c49
 8004b18:	08004c49 	.word	0x08004c49
 8004b1c:	08004c49 	.word	0x08004c49
 8004b20:	08004b85 	.word	0x08004b85
 8004b24:	08004c49 	.word	0x08004c49
 8004b28:	08004c49 	.word	0x08004c49
 8004b2c:	08004c49 	.word	0x08004c49
 8004b30:	08004bc7 	.word	0x08004bc7
 8004b34:	08004c49 	.word	0x08004c49
 8004b38:	08004c49 	.word	0x08004c49
 8004b3c:	08004c49 	.word	0x08004c49
 8004b40:	08004c07 	.word	0x08004c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f9fe 	bl	8004f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0208 	orr.w	r2, r2, #8
 8004b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0204 	bic.w	r2, r2, #4
 8004b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6999      	ldr	r1, [r3, #24]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	619a      	str	r2, [r3, #24]
      break;
 8004b82:	e064      	b.n	8004c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fa44 	bl	8005018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6999      	ldr	r1, [r3, #24]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	021a      	lsls	r2, r3, #8
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	619a      	str	r2, [r3, #24]
      break;
 8004bc4:	e043      	b.n	8004c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fa8f 	bl	80050f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0208 	orr.w	r2, r2, #8
 8004be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0204 	bic.w	r2, r2, #4
 8004bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69d9      	ldr	r1, [r3, #28]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	61da      	str	r2, [r3, #28]
      break;
 8004c04:	e023      	b.n	8004c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fad9 	bl	80051c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69d9      	ldr	r1, [r3, #28]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	021a      	lsls	r2, r3, #8
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	61da      	str	r2, [r3, #28]
      break;
 8004c46:	e002      	b.n	8004c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_TIM_ConfigClockSource+0x1c>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e0b4      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x186>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cb4:	d03e      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0xd4>
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cba:	f200 8087 	bhi.w	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc2:	f000 8086 	beq.w	8004dd2 <HAL_TIM_ConfigClockSource+0x172>
 8004cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cca:	d87f      	bhi.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b70      	cmp	r3, #112	@ 0x70
 8004cce:	d01a      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0xa6>
 8004cd0:	2b70      	cmp	r3, #112	@ 0x70
 8004cd2:	d87b      	bhi.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b60      	cmp	r3, #96	@ 0x60
 8004cd6:	d050      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x11a>
 8004cd8:	2b60      	cmp	r3, #96	@ 0x60
 8004cda:	d877      	bhi.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b50      	cmp	r3, #80	@ 0x50
 8004cde:	d03c      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0xfa>
 8004ce0:	2b50      	cmp	r3, #80	@ 0x50
 8004ce2:	d873      	bhi.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b40      	cmp	r3, #64	@ 0x40
 8004ce6:	d058      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x13a>
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	d86f      	bhi.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b30      	cmp	r3, #48	@ 0x30
 8004cee:	d064      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x15a>
 8004cf0:	2b30      	cmp	r3, #48	@ 0x30
 8004cf2:	d86b      	bhi.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d060      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d867      	bhi.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d05c      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x15a>
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d05a      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x15a>
 8004d04:	e062      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d16:	f000 fb1f 	bl	8005358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	609a      	str	r2, [r3, #8]
      break;
 8004d32:	e04f      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d44:	f000 fb08 	bl	8005358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d56:	609a      	str	r2, [r3, #8]
      break;
 8004d58:	e03c      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	461a      	mov	r2, r3
 8004d68:	f000 fa7c 	bl	8005264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2150      	movs	r1, #80	@ 0x50
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fad5 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004d78:	e02c      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d86:	461a      	mov	r2, r3
 8004d88:	f000 fa9b 	bl	80052c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2160      	movs	r1, #96	@ 0x60
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fac5 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004d98:	e01c      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da6:	461a      	mov	r2, r3
 8004da8:	f000 fa5c 	bl	8005264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2140      	movs	r1, #64	@ 0x40
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fab5 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004db8:	e00c      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f000 faac 	bl	8005322 <TIM_ITRx_SetConfig>
      break;
 8004dca:	e003      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd0:	e000      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a37      	ldr	r2, [pc, #220]	@ (8004f30 <TIM_Base_SetConfig+0xf0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00f      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5e:	d00b      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a34      	ldr	r2, [pc, #208]	@ (8004f34 <TIM_Base_SetConfig+0xf4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a33      	ldr	r2, [pc, #204]	@ (8004f38 <TIM_Base_SetConfig+0xf8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a32      	ldr	r2, [pc, #200]	@ (8004f3c <TIM_Base_SetConfig+0xfc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d108      	bne.n	8004e8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a28      	ldr	r2, [pc, #160]	@ (8004f30 <TIM_Base_SetConfig+0xf0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	@ (8004f34 <TIM_Base_SetConfig+0xf4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a24      	ldr	r2, [pc, #144]	@ (8004f38 <TIM_Base_SetConfig+0xf8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a23      	ldr	r2, [pc, #140]	@ (8004f3c <TIM_Base_SetConfig+0xfc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a22      	ldr	r2, [pc, #136]	@ (8004f40 <TIM_Base_SetConfig+0x100>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	@ (8004f44 <TIM_Base_SetConfig+0x104>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	@ (8004f48 <TIM_Base_SetConfig+0x108>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a0c      	ldr	r2, [pc, #48]	@ (8004f30 <TIM_Base_SetConfig+0xf0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d103      	bne.n	8004f0a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f043 0204 	orr.w	r2, r3, #4
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800

08004f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f023 0201 	bic.w	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0302 	bic.w	r3, r3, #2
 8004f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <TIM_OC1_SetConfig+0xc8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10c      	bne.n	8004fc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0308 	bic.w	r3, r3, #8
 8004fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 0304 	bic.w	r3, r3, #4
 8004fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a13      	ldr	r2, [pc, #76]	@ (8005014 <TIM_OC1_SetConfig+0xc8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40010000 	.word	0x40010000

08005018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 0210 	bic.w	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0320 	bic.w	r3, r3, #32
 8005062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a1e      	ldr	r2, [pc, #120]	@ (80050ec <TIM_OC2_SetConfig+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d10d      	bne.n	8005094 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a15      	ldr	r2, [pc, #84]	@ (80050ec <TIM_OC2_SetConfig+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d113      	bne.n	80050c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000

080050f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1d      	ldr	r2, [pc, #116]	@ (80051c0 <TIM_OC3_SetConfig+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10d      	bne.n	800516a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a14      	ldr	r2, [pc, #80]	@ (80051c0 <TIM_OC3_SetConfig+0xd0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40010000 	.word	0x40010000

080051c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800520e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a10      	ldr	r2, [pc, #64]	@ (8005260 <TIM_OC4_SetConfig+0x9c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d109      	bne.n	8005238 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800522a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000

08005264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0201 	bic.w	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800528e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 030a 	bic.w	r3, r3, #10
 80052a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b087      	sub	sp, #28
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	f023 0210 	bic.w	r2, r3, #16
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	031b      	lsls	r3, r3, #12
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	621a      	str	r2, [r3, #32]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	f043 0307 	orr.w	r3, r3, #7
 8005344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	021a      	lsls	r2, r3, #8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	431a      	orrs	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4313      	orrs	r3, r2
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	609a      	str	r2, [r3, #8]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	2201      	movs	r2, #1
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a1a      	ldr	r2, [r3, #32]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	401a      	ands	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a1a      	ldr	r2, [r3, #32]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e050      	b.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1c      	ldr	r2, [pc, #112]	@ (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005448:	d013      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a16      	ldr	r2, [pc, #88]	@ (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a15      	ldr	r2, [pc, #84]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a13      	ldr	r2, [pc, #76]	@ (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10c      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40014000 	.word	0x40014000

080054c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054e8:	b084      	sub	sp, #16
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	f107 001c 	add.w	r0, r7, #28
 80054f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d123      	bne.n	800554a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800552a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800552e:	2b01      	cmp	r3, #1
 8005530:	d105      	bne.n	800553e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 fae8 	bl	8006b14 <USB_CoreReset>
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e01b      	b.n	8005582 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fadc 	bl	8006b14 <USB_CoreReset>
 800555c:	4603      	mov	r3, r0
 800555e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005560:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	@ 0x38
 8005574:	e005      	b.n	8005582 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005582:	7fbb      	ldrb	r3, [r7, #30]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d10b      	bne.n	80055a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f043 0206 	orr.w	r2, r3, #6
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f043 0220 	orr.w	r2, r3, #32
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ac:	b004      	add	sp, #16
 80055ae:	4770      	bx	lr

080055b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d165      	bne.n	8005690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a41      	ldr	r2, [pc, #260]	@ (80056cc <USB_SetTurnaroundTime+0x11c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d906      	bls.n	80055da <USB_SetTurnaroundTime+0x2a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a40      	ldr	r2, [pc, #256]	@ (80056d0 <USB_SetTurnaroundTime+0x120>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d202      	bcs.n	80055da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055d4:	230f      	movs	r3, #15
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e062      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a3c      	ldr	r2, [pc, #240]	@ (80056d0 <USB_SetTurnaroundTime+0x120>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d306      	bcc.n	80055f0 <USB_SetTurnaroundTime+0x40>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a3b      	ldr	r2, [pc, #236]	@ (80056d4 <USB_SetTurnaroundTime+0x124>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d202      	bcs.n	80055f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055ea:	230e      	movs	r3, #14
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	e057      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a38      	ldr	r2, [pc, #224]	@ (80056d4 <USB_SetTurnaroundTime+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d306      	bcc.n	8005606 <USB_SetTurnaroundTime+0x56>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a37      	ldr	r2, [pc, #220]	@ (80056d8 <USB_SetTurnaroundTime+0x128>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d202      	bcs.n	8005606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005600:	230d      	movs	r3, #13
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e04c      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4a33      	ldr	r2, [pc, #204]	@ (80056d8 <USB_SetTurnaroundTime+0x128>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d306      	bcc.n	800561c <USB_SetTurnaroundTime+0x6c>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a32      	ldr	r2, [pc, #200]	@ (80056dc <USB_SetTurnaroundTime+0x12c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d802      	bhi.n	800561c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005616:	230c      	movs	r3, #12
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e041      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a2f      	ldr	r2, [pc, #188]	@ (80056dc <USB_SetTurnaroundTime+0x12c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d906      	bls.n	8005632 <USB_SetTurnaroundTime+0x82>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a2e      	ldr	r2, [pc, #184]	@ (80056e0 <USB_SetTurnaroundTime+0x130>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d802      	bhi.n	8005632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800562c:	230b      	movs	r3, #11
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e036      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4a2a      	ldr	r2, [pc, #168]	@ (80056e0 <USB_SetTurnaroundTime+0x130>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d906      	bls.n	8005648 <USB_SetTurnaroundTime+0x98>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4a29      	ldr	r2, [pc, #164]	@ (80056e4 <USB_SetTurnaroundTime+0x134>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d802      	bhi.n	8005648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005642:	230a      	movs	r3, #10
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e02b      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <USB_SetTurnaroundTime+0x134>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d906      	bls.n	800565e <USB_SetTurnaroundTime+0xae>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a25      	ldr	r2, [pc, #148]	@ (80056e8 <USB_SetTurnaroundTime+0x138>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d202      	bcs.n	800565e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005658:	2309      	movs	r3, #9
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e020      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4a21      	ldr	r2, [pc, #132]	@ (80056e8 <USB_SetTurnaroundTime+0x138>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d306      	bcc.n	8005674 <USB_SetTurnaroundTime+0xc4>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4a20      	ldr	r2, [pc, #128]	@ (80056ec <USB_SetTurnaroundTime+0x13c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d802      	bhi.n	8005674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800566e:	2308      	movs	r3, #8
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e015      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4a1d      	ldr	r2, [pc, #116]	@ (80056ec <USB_SetTurnaroundTime+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d906      	bls.n	800568a <USB_SetTurnaroundTime+0xda>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a1c      	ldr	r2, [pc, #112]	@ (80056f0 <USB_SetTurnaroundTime+0x140>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d202      	bcs.n	800568a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005684:	2307      	movs	r3, #7
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e00a      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800568a:	2306      	movs	r3, #6
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e007      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005696:	2309      	movs	r3, #9
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e001      	b.n	80056a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800569c:	2309      	movs	r3, #9
 800569e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	00d8acbf 	.word	0x00d8acbf
 80056d0:	00e4e1c0 	.word	0x00e4e1c0
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	01067380 	.word	0x01067380
 80056dc:	011a499f 	.word	0x011a499f
 80056e0:	01312cff 	.word	0x01312cff
 80056e4:	014ca43f 	.word	0x014ca43f
 80056e8:	016e3600 	.word	0x016e3600
 80056ec:	01a6ab1f 	.word	0x01a6ab1f
 80056f0:	01e84800 	.word	0x01e84800

080056f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f043 0201 	orr.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d115      	bne.n	8005786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005766:	200a      	movs	r0, #10
 8005768:	f7fb fff6 	bl	8001758 <HAL_Delay>
      ms += 10U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	330a      	adds	r3, #10
 8005770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 f93f 	bl	80069f6 <USB_GetMode>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d01e      	beq.n	80057bc <USB_SetCurrentMode+0x84>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2bc7      	cmp	r3, #199	@ 0xc7
 8005782:	d9f0      	bls.n	8005766 <USB_SetCurrentMode+0x2e>
 8005784:	e01a      	b.n	80057bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d115      	bne.n	80057b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005798:	200a      	movs	r0, #10
 800579a:	f7fb ffdd 	bl	8001758 <HAL_Delay>
      ms += 10U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	330a      	adds	r3, #10
 80057a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 f926 	bl	80069f6 <USB_GetMode>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <USB_SetCurrentMode+0x84>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80057b4:	d9f0      	bls.n	8005798 <USB_SetCurrentMode+0x60>
 80057b6:	e001      	b.n	80057bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e005      	b.n	80057c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2bc8      	cmp	r3, #200	@ 0xc8
 80057c0:	d101      	bne.n	80057c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057d0:	b084      	sub	sp, #16
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	e009      	b.n	8005804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3340      	adds	r3, #64	@ 0x40
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	2200      	movs	r2, #0
 80057fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b0e      	cmp	r3, #14
 8005808:	d9f2      	bls.n	80057f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800580a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11c      	bne.n	800584c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38
 800584a:	e00b      	b.n	8005864 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800586a:	461a      	mov	r2, r3
 800586c:	2300      	movs	r3, #0
 800586e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005870:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10d      	bne.n	8005894 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005880:	2100      	movs	r1, #0
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f968 	bl	8005b58 <USB_SetDevSpeed>
 8005888:	e008      	b.n	800589c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800588a:	2101      	movs	r1, #1
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f963 	bl	8005b58 <USB_SetDevSpeed>
 8005892:	e003      	b.n	800589c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005894:	2103      	movs	r1, #3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f95e 	bl	8005b58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800589c:	2110      	movs	r1, #16
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8fa 	bl	8005a98 <USB_FlushTxFifo>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f924 	bl	8005afc <USB_FlushRxFifo>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c4:	461a      	mov	r2, r3
 80058c6:	2300      	movs	r3, #0
 80058c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	e043      	b.n	8005970 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058fe:	d118      	bne.n	8005932 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	461a      	mov	r2, r3
 8005914:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e013      	b.n	8005944 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005928:	461a      	mov	r2, r3
 800592a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e008      	b.n	8005944 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593e:	461a      	mov	r2, r3
 8005940:	2300      	movs	r3, #0
 8005942:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005962:	461a      	mov	r2, r3
 8005964:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005974:	461a      	mov	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4293      	cmp	r3, r2
 800597a:	d3b5      	bcc.n	80058e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	e043      	b.n	8005a0a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005998:	d118      	bne.n	80059cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ac:	461a      	mov	r2, r3
 80059ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	e013      	b.n	80059de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	461a      	mov	r2, r3
 80059c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e008      	b.n	80059de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d8:	461a      	mov	r2, r3
 80059da:	2300      	movs	r3, #0
 80059dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	2300      	movs	r3, #0
 80059ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fc:	461a      	mov	r2, r3
 80059fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	3301      	adds	r3, #1
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a0e:	461a      	mov	r2, r3
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d3b5      	bcc.n	8005982 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f043 0210 	orr.w	r2, r3, #16
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <USB_DevInit+0x2c4>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f043 0208 	orr.w	r2, r3, #8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a7c:	f043 0304 	orr.w	r3, r3, #4
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a90:	b004      	add	sp, #16
 8005a92:	4770      	bx	lr
 8005a94:	803c3800 	.word	0x803c3800

08005a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ab2:	d901      	bls.n	8005ab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e01b      	b.n	8005af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	daf2      	bge.n	8005aa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	019b      	lsls	r3, r3, #6
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005adc:	d901      	bls.n	8005ae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e006      	b.n	8005af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d0f0      	beq.n	8005ad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b14:	d901      	bls.n	8005b1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e018      	b.n	8005b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	daf2      	bge.n	8005b08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2210      	movs	r2, #16
 8005b2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b38:	d901      	bls.n	8005b3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e006      	b.n	8005b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d0f0      	beq.n	8005b2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b087      	sub	sp, #28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0306 	and.w	r3, r3, #6
 8005ba2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]
 8005bae:	e00a      	b.n	8005bc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d002      	beq.n	8005bbc <USB_GetDevSpeed+0x32>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d102      	bne.n	8005bc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	75fb      	strb	r3, [r7, #23]
 8005bc0:	e001      	b.n	8005bc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bc2:	230f      	movs	r3, #15
 8005bc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d13a      	bne.n	8005c66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f303 	lsl.w	r3, r1, r3
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	68f9      	ldr	r1, [r7, #12]
 8005c0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d155      	bne.n	8005cd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	791b      	ldrb	r3, [r3, #4]
 8005c42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	059b      	lsls	r3, r3, #22
 8005c4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e036      	b.n	8005cd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6c:	69da      	ldr	r2, [r3, #28]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	2101      	movs	r1, #1
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d11a      	bne.n	8005cd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	791b      	ldrb	r3, [r3, #4]
 8005cb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d161      	bne.n	8005dc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d16:	d11f      	bne.n	8005d58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2101      	movs	r1, #1
 8005d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d78:	4013      	ands	r3, r2
 8005d7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	0159      	lsls	r1, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	440b      	add	r3, r1
 8005db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4b35      	ldr	r3, [pc, #212]	@ (8005e94 <USB_DeactivateEndpoint+0x1b0>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]
 8005dc2:	e060      	b.n	8005e86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dda:	d11f      	bne.n	8005e1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	43db      	mvns	r3, r3
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e60:	4013      	ands	r3, r2
 8005e62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	0159      	lsls	r1, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	440b      	add	r3, r1
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <USB_DeactivateEndpoint+0x1b4>)
 8005e82:	4013      	ands	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	ec337800 	.word	0xec337800
 8005e98:	eff37800 	.word	0xeff37800

08005e9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	@ 0x28
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	f040 817f 	bne.w	80061bc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d132      	bne.n	8005f2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ee0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ee4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f24:	0cdb      	lsrs	r3, r3, #19
 8005f26:	04db      	lsls	r3, r3, #19
 8005f28:	6113      	str	r3, [r2, #16]
 8005f2a:	e097      	b.n	800605c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f46:	0cdb      	lsrs	r3, r3, #19
 8005f48:	04db      	lsls	r3, r3, #19
 8005f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f6e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11a      	bne.n	8005fac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d903      	bls.n	8005f8a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fa8:	6113      	str	r3, [r2, #16]
 8005faa:	e044      	b.n	8006036 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	1e5a      	subs	r2, r3, #1
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	8afb      	ldrh	r3, [r7, #22]
 8005fd2:	04d9      	lsls	r1, r3, #19
 8005fd4:	4ba4      	ldr	r3, [pc, #656]	@ (8006268 <USB_EPStartXfer+0x3cc>)
 8005fd6:	400b      	ands	r3, r1
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	0148      	lsls	r0, r1, #5
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	4401      	add	r1, r0
 8005fe0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	791b      	ldrb	r3, [r3, #4]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d122      	bne.n	8006036 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800600a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800600e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	8afb      	ldrh	r3, [r7, #22]
 8006020:	075b      	lsls	r3, r3, #29
 8006022:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	0148      	lsls	r0, r1, #5
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	4401      	add	r1, r0
 800602e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	0148      	lsls	r0, r1, #5
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	4401      	add	r1, r0
 8006054:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006058:	4313      	orrs	r3, r2
 800605a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d14b      	bne.n	80060fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006076:	461a      	mov	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	791b      	ldrb	r3, [r3, #4]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d128      	bne.n	80060d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d110      	bne.n	80060b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	e00f      	b.n	80060d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e166      	b.n	80063c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006114:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006118:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d015      	beq.n	800614e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 814e 	beq.w	80063c8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	2101      	movs	r1, #1
 800613e:	fa01 f303 	lsl.w	r3, r1, r3
 8006142:	69f9      	ldr	r1, [r7, #28]
 8006144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006148:	4313      	orrs	r3, r2
 800614a:	634b      	str	r3, [r1, #52]	@ 0x34
 800614c:	e13c      	b.n	80063c8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d110      	bne.n	8006180 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006178:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	e00f      	b.n	80061a0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800619a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800619e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	68d9      	ldr	r1, [r3, #12]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	b298      	uxth	r0, r3
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	4603      	mov	r3, r0
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f9b9 	bl	800652c <USB_WritePacket>
 80061ba:	e105      	b.n	80063c8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061d6:	0cdb      	lsrs	r3, r3, #19
 80061d8:	04db      	lsls	r3, r3, #19
 80061da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061fe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d132      	bne.n	800626c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006234:	69b9      	ldr	r1, [r7, #24]
 8006236:	0148      	lsls	r0, r1, #5
 8006238:	69f9      	ldr	r1, [r7, #28]
 800623a:	4401      	add	r1, r0
 800623c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006240:	4313      	orrs	r3, r2
 8006242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	440a      	add	r2, r1
 800625a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800625e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006262:	6113      	str	r3, [r2, #16]
 8006264:	e062      	b.n	800632c <USB_EPStartXfer+0x490>
 8006266:	bf00      	nop
 8006268:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d123      	bne.n	80062bc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628a:	69b9      	ldr	r1, [r7, #24]
 800628c:	0148      	lsls	r0, r1, #5
 800628e:	69f9      	ldr	r1, [r7, #28]
 8006290:	4401      	add	r1, r0
 8006292:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	e037      	b.n	800632c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4413      	add	r3, r2
 80062c6:	1e5a      	subs	r2, r3, #1
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	8afa      	ldrh	r2, [r7, #22]
 80062d8:	fb03 f202 	mul.w	r2, r3, r2
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	8afb      	ldrh	r3, [r7, #22]
 80062f0:	04d9      	lsls	r1, r3, #19
 80062f2:	4b38      	ldr	r3, [pc, #224]	@ (80063d4 <USB_EPStartXfer+0x538>)
 80062f4:	400b      	ands	r3, r1
 80062f6:	69b9      	ldr	r1, [r7, #24]
 80062f8:	0148      	lsls	r0, r1, #5
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	4401      	add	r1, r0
 80062fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006302:	4313      	orrs	r3, r2
 8006304:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	0148      	lsls	r0, r1, #5
 8006320:	69f9      	ldr	r1, [r7, #28]
 8006322:	4401      	add	r1, r0
 8006324:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006328:	4313      	orrs	r3, r2
 800632a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d10d      	bne.n	800634e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68d9      	ldr	r1, [r3, #12]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634a:	460a      	mov	r2, r1
 800634c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	791b      	ldrb	r3, [r3, #4]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d128      	bne.n	80063a8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d110      	bne.n	8006388 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006380:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e00f      	b.n	80063a8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	1ff80000 	.word	0x1ff80000

080063d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d14a      	bne.n	800648c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800640a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800640e:	f040 8086 	bne.w	800651e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	7812      	ldrb	r2, [r2, #0]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006430:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006434:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006466:	4293      	cmp	r3, r2
 8006468:	d902      	bls.n	8006470 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
          break;
 800646e:	e056      	b.n	800651e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006488:	d0e7      	beq.n	800645a <USB_EPStopXfer+0x82>
 800648a:	e048      	b.n	800651e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a4:	d13b      	bne.n	800651e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d902      	bls.n	8006504 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
          break;
 8006502:	e00c      	b.n	800651e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800651c:	d0e7      	beq.n	80064ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800652c:	b480      	push	{r7}
 800652e:	b089      	sub	sp, #36	@ 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4611      	mov	r1, r2
 8006538:	461a      	mov	r2, r3
 800653a:	460b      	mov	r3, r1
 800653c:	71fb      	strb	r3, [r7, #7]
 800653e:	4613      	mov	r3, r2
 8006540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800654a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d123      	bne.n	800659a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006552:	88bb      	ldrh	r3, [r7, #4]
 8006554:	3303      	adds	r3, #3
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800655a:	2300      	movs	r3, #0
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	e018      	b.n	8006592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	031a      	lsls	r2, r3, #12
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656c:	461a      	mov	r2, r3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	3301      	adds	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	3301      	adds	r3, #1
 800657e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	3301      	adds	r3, #1
 8006584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3301      	adds	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	3301      	adds	r3, #1
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	429a      	cmp	r2, r3
 8006598:	d3e2      	bcc.n	8006560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3724      	adds	r7, #36	@ 0x24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b08b      	sub	sp, #44	@ 0x2c
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	089b      	lsrs	r3, r3, #2
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	e014      	b.n	80065fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	601a      	str	r2, [r3, #0]
    pDest++;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	3301      	adds	r3, #1
 80065e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	3301      	adds	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	3301      	adds	r3, #1
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	3301      	adds	r3, #1
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	3301      	adds	r3, #1
 80065fc:	623b      	str	r3, [r7, #32]
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	429a      	cmp	r2, r3
 8006604:	d3e6      	bcc.n	80065d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006606:	8bfb      	ldrh	r3, [r7, #30]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01e      	beq.n	800664a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006616:	461a      	mov	r2, r3
 8006618:	f107 0310 	add.w	r3, r7, #16
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	b2da      	uxtb	r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	701a      	strb	r2, [r3, #0]
      i++;
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	3301      	adds	r3, #1
 8006636:	623b      	str	r3, [r7, #32]
      pDest++;
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	3301      	adds	r3, #1
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800663e:	8bfb      	ldrh	r3, [r7, #30]
 8006640:	3b01      	subs	r3, #1
 8006642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006644:	8bfb      	ldrh	r3, [r7, #30]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ea      	bne.n	8006620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800664c:	4618      	mov	r0, r3
 800664e:	372c      	adds	r7, #44	@ 0x2c
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d12c      	bne.n	80066ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	db12      	blt.n	80066ac <USB_EPSetStall+0x54>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00f      	beq.n	80066ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	e02b      	b.n	8006726 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db12      	blt.n	8006706 <USB_EPSetStall+0xae>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00f      	beq.n	8006706 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006700:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006704:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006724:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d128      	bne.n	80067a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800676a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800676e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d003      	beq.n	8006780 <USB_EPClearStall+0x4c>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	791b      	ldrb	r3, [r3, #4]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d138      	bne.n	80067f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e027      	b.n	80067f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	791b      	ldrb	r3, [r3, #4]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d003      	beq.n	80067d2 <USB_EPClearStall+0x9e>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	791b      	ldrb	r3, [r3, #4]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d10f      	bne.n	80067f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800681e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006822:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006834:	68f9      	ldr	r1, [r7, #12]
 8006836:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800683a:	4313      	orrs	r3, r2
 800683c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800687a:	f023 0302 	bic.w	r3, r3, #2
 800687e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4013      	ands	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	4013      	ands	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	0c1b      	lsrs	r3, r3, #16
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	4013      	ands	r3, r2
 800694c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	b29b      	uxth	r3, r3
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4013      	ands	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800698c:	68bb      	ldr	r3, [r7, #8]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800699a:	b480      	push	{r7}
 800699c:	b087      	sub	sp, #28
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	01db      	lsls	r3, r3, #7
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4013      	ands	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069e8:	68bb      	ldr	r3, [r7, #8]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f003 0301 	and.w	r3, r3, #1
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a30:	f023 0307 	bic.w	r3, r3, #7
 8006a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	460b      	mov	r3, r1
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	333c      	adds	r3, #60	@ 0x3c
 8006a6e:	3304      	adds	r3, #4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4a26      	ldr	r2, [pc, #152]	@ (8006b10 <USB_EP0_OutStart+0xb8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d90a      	bls.n	8006a92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a8c:	d101      	bne.n	8006a92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e037      	b.n	8006b02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac0:	f043 0318 	orr.w	r3, r3, #24
 8006ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ad4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ad8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d10f      	bne.n	8006b00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006afa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006afe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	4f54300a 	.word	0x4f54300a

08006b14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b2c:	d901      	bls.n	8006b32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e022      	b.n	8006b78 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	daf2      	bge.n	8006b20 <USB_CoreReset+0xc>

  count = 10U;
 8006b3a:	230a      	movs	r3, #10
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006b3e:	e002      	b.n	8006b46 <USB_CoreReset+0x32>
  {
    count--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f9      	bne.n	8006b40 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f043 0201 	orr.w	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b64:	d901      	bls.n	8006b6a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e006      	b.n	8006b78 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d0f0      	beq.n	8006b58 <USB_CoreReset+0x44>

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006b94:	f002 fd20 	bl	80095d8 <USBD_static_malloc>
 8006b98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	32b0      	adds	r2, #176	@ 0xb0
 8006baa:	2100      	movs	r1, #0
 8006bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e0d4      	b.n	8006d5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006bb4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006bb8:	2100      	movs	r1, #0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f002 fe28 	bl	8009810 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32b0      	adds	r2, #176	@ 0xb0
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32b0      	adds	r2, #176	@ 0xb0
 8006bda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c1b      	ldrb	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d138      	bne.n	8006c5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bec:	4b5e      	ldr	r3, [pc, #376]	@ (8006d68 <USBD_CDC_Init+0x1e4>)
 8006bee:	7819      	ldrb	r1, [r3, #0]
 8006bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f002 fbcb 	bl	8009392 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8006d68 <USBD_CDC_Init+0x1e4>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f003 020f 	and.w	r2, r3, #15
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	3323      	adds	r3, #35	@ 0x23
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c16:	4b55      	ldr	r3, [pc, #340]	@ (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c18:	7819      	ldrb	r1, [r3, #0]
 8006c1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c1e:	2202      	movs	r2, #2
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f002 fbb6 	bl	8009392 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c26:	4b51      	ldr	r3, [pc, #324]	@ (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 020f 	and.w	r2, r3, #15
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006c3e:	2201      	movs	r2, #1
 8006c40:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c42:	4b4b      	ldr	r3, [pc, #300]	@ (8006d70 <USBD_CDC_Init+0x1ec>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f003 020f 	and.w	r2, r3, #15
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	331c      	adds	r3, #28
 8006c58:	2210      	movs	r2, #16
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	e035      	b.n	8006cca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c5e:	4b42      	ldr	r3, [pc, #264]	@ (8006d68 <USBD_CDC_Init+0x1e4>)
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	2340      	movs	r3, #64	@ 0x40
 8006c64:	2202      	movs	r2, #2
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f002 fb93 	bl	8009392 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d68 <USBD_CDC_Init+0x1e4>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	3323      	adds	r3, #35	@ 0x23
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c86:	4b39      	ldr	r3, [pc, #228]	@ (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c88:	7819      	ldrb	r1, [r3, #0]
 8006c8a:	2340      	movs	r3, #64	@ 0x40
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f002 fb7f 	bl	8009392 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c94:	4b35      	ldr	r3, [pc, #212]	@ (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006cac:	2201      	movs	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8006d70 <USBD_CDC_Init+0x1ec>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	331c      	adds	r3, #28
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cca:	4b29      	ldr	r3, [pc, #164]	@ (8006d70 <USBD_CDC_Init+0x1ec>)
 8006ccc:	7819      	ldrb	r1, [r3, #0]
 8006cce:	2308      	movs	r3, #8
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f002 fb5d 	bl	8009392 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006cd8:	4b25      	ldr	r3, [pc, #148]	@ (8006d70 <USBD_CDC_Init+0x1ec>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 020f 	and.w	r2, r3, #15
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	3323      	adds	r3, #35	@ 0x23
 8006cee:	2201      	movs	r2, #1
 8006cf0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	33b0      	adds	r3, #176	@ 0xb0
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e018      	b.n	8006d5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7c1b      	ldrb	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d34:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <USBD_CDC_Init+0x1e8>)
 8006d36:	7819      	ldrb	r1, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f002 fc14 	bl	8009570 <USBD_LL_PrepareReceive>
 8006d48:	e008      	b.n	8006d5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d4a:	4b08      	ldr	r3, [pc, #32]	@ (8006d6c <USBD_CDC_Init+0x1e8>)
 8006d4c:	7819      	ldrb	r1, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d54:	2340      	movs	r3, #64	@ 0x40
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 fc0a 	bl	8009570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000097 	.word	0x20000097
 8006d6c:	20000098 	.word	0x20000098
 8006d70:	20000099 	.word	0x20000099

08006d74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d80:	4b3a      	ldr	r3, [pc, #232]	@ (8006e6c <USBD_CDC_DeInit+0xf8>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f002 fb29 	bl	80093de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d8c:	4b37      	ldr	r3, [pc, #220]	@ (8006e6c <USBD_CDC_DeInit+0xf8>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3323      	adds	r3, #35	@ 0x23
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006da6:	4b32      	ldr	r3, [pc, #200]	@ (8006e70 <USBD_CDC_DeInit+0xfc>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f002 fb16 	bl	80093de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006db2:	4b2f      	ldr	r3, [pc, #188]	@ (8006e70 <USBD_CDC_DeInit+0xfc>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f003 020f 	and.w	r2, r3, #15
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006dce:	4b29      	ldr	r3, [pc, #164]	@ (8006e74 <USBD_CDC_DeInit+0x100>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f002 fb02 	bl	80093de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006dda:	4b26      	ldr	r3, [pc, #152]	@ (8006e74 <USBD_CDC_DeInit+0x100>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 020f 	and.w	r2, r3, #15
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	3323      	adds	r3, #35	@ 0x23
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006df4:	4b1f      	ldr	r3, [pc, #124]	@ (8006e74 <USBD_CDC_DeInit+0x100>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	331c      	adds	r3, #28
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	32b0      	adds	r2, #176	@ 0xb0
 8006e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01f      	beq.n	8006e60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	33b0      	adds	r3, #176	@ 0xb0
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32b0      	adds	r2, #176	@ 0xb0
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f002 fbd6 	bl	80095f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32b0      	adds	r2, #176	@ 0xb0
 8006e52:	2100      	movs	r1, #0
 8006e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000097 	.word	0x20000097
 8006e70:	20000098 	.word	0x20000098
 8006e74:	20000099 	.word	0x20000099

08006e78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	32b0      	adds	r2, #176	@ 0xb0
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e0bf      	b.n	8007028 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d050      	beq.n	8006f56 <USBD_CDC_Setup+0xde>
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	f040 80af 	bne.w	8007018 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88db      	ldrh	r3, [r3, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d03a      	beq.n	8006f38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	b25b      	sxtb	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	da1b      	bge.n	8006f04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	33b0      	adds	r3, #176	@ 0xb0
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006ee2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	88d2      	ldrh	r2, [r2, #6]
 8006ee8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	2b07      	cmp	r3, #7
 8006ef0:	bf28      	it	cs
 8006ef2:	2307      	movcs	r3, #7
 8006ef4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	89fa      	ldrh	r2, [r7, #14]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fda9 	bl	8008a54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f02:	e090      	b.n	8007026 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	785a      	ldrb	r2, [r3, #1]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	88db      	ldrh	r3, [r3, #6]
 8006f12:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f14:	d803      	bhi.n	8006f1e <USBD_CDC_Setup+0xa6>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	88db      	ldrh	r3, [r3, #6]
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	e000      	b.n	8006f20 <USBD_CDC_Setup+0xa8>
 8006f1e:	2240      	movs	r2, #64	@ 0x40
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f26:	6939      	ldr	r1, [r7, #16]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fdbe 	bl	8008ab2 <USBD_CtlPrepareRx>
      break;
 8006f36:	e076      	b.n	8007026 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	33b0      	adds	r3, #176	@ 0xb0
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	7850      	ldrb	r0, [r2, #1]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4798      	blx	r3
      break;
 8006f54:	e067      	b.n	8007026 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b0b      	cmp	r3, #11
 8006f5c:	d851      	bhi.n	8007002 <USBD_CDC_Setup+0x18a>
 8006f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <USBD_CDC_Setup+0xec>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f95 	.word	0x08006f95
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08007003 	.word	0x08007003
 8006f70:	08007003 	.word	0x08007003
 8006f74:	08007003 	.word	0x08007003
 8006f78:	08007003 	.word	0x08007003
 8006f7c:	08007003 	.word	0x08007003
 8006f80:	08007003 	.word	0x08007003
 8006f84:	08007003 	.word	0x08007003
 8006f88:	08007003 	.word	0x08007003
 8006f8c:	08006fbf 	.word	0x08006fbf
 8006f90:	08006fe9 	.word	0x08006fe9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d107      	bne.n	8006fb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fa0:	f107 030a 	add.w	r3, r7, #10
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fd53 	bl	8008a54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fae:	e032      	b.n	8007016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fcd1 	bl	800895a <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	75fb      	strb	r3, [r7, #23]
          break;
 8006fbc:	e02b      	b.n	8007016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d107      	bne.n	8006fda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fca:	f107 030d 	add.w	r3, r7, #13
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fd3e 	bl	8008a54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd8:	e01d      	b.n	8007016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fcbc 	bl	800895a <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe6:	e016      	b.n	8007016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d00f      	beq.n	8007014 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fcaf 	bl	800895a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007000:	e008      	b.n	8007014 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fca8 	bl	800895a <USBD_CtlError>
          ret = USBD_FAIL;
 800700a:	2303      	movs	r3, #3
 800700c:	75fb      	strb	r3, [r7, #23]
          break;
 800700e:	e002      	b.n	8007016 <USBD_CDC_Setup+0x19e>
          break;
 8007010:	bf00      	nop
 8007012:	e008      	b.n	8007026 <USBD_CDC_Setup+0x1ae>
          break;
 8007014:	bf00      	nop
      }
      break;
 8007016:	e006      	b.n	8007026 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fc9d 	bl	800895a <USBD_CtlError>
      ret = USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	75fb      	strb	r3, [r7, #23]
      break;
 8007024:	bf00      	nop
  }

  return (uint8_t)ret;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	32b0      	adds	r2, #176	@ 0xb0
 800704e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007056:	2303      	movs	r3, #3
 8007058:	e065      	b.n	8007126 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	32b0      	adds	r2, #176	@ 0xb0
 8007064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007068:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	f003 020f 	and.w	r2, r3, #15
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3314      	adds	r3, #20
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d02f      	beq.n	80070e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	3314      	adds	r3, #20
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	f003 010f 	and.w	r1, r3, #15
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	460b      	mov	r3, r1
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	440b      	add	r3, r1
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4403      	add	r3, r0
 80070ac:	331c      	adds	r3, #28
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80070b4:	fb01 f303 	mul.w	r3, r1, r3
 80070b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d112      	bne.n	80070e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	3314      	adds	r3, #20
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070d6:	78f9      	ldrb	r1, [r7, #3]
 80070d8:	2300      	movs	r3, #0
 80070da:	2200      	movs	r2, #0
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f002 fa26 	bl	800952e <USBD_LL_Transmit>
 80070e2:	e01f      	b.n	8007124 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	33b0      	adds	r3, #176	@ 0xb0
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d010      	beq.n	8007124 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	33b0      	adds	r3, #176	@ 0xb0
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007120:	78fa      	ldrb	r2, [r7, #3]
 8007122:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	32b0      	adds	r2, #176	@ 0xb0
 8007144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007148:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	32b0      	adds	r2, #176	@ 0xb0
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e01a      	b.n	8007196 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f002 fa24 	bl	80095b2 <USBD_LL_GetRxDataSize>
 800716a:	4602      	mov	r2, r0
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	33b0      	adds	r3, #176	@ 0xb0
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007190:	4611      	mov	r1, r2
 8007192:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	32b0      	adds	r2, #176	@ 0xb0
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e024      	b.n	800720a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	33b0      	adds	r3, #176	@ 0xb0
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d019      	beq.n	8007208 <USBD_CDC_EP0_RxReady+0x6a>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80071da:	2bff      	cmp	r3, #255	@ 0xff
 80071dc:	d014      	beq.n	8007208 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	33b0      	adds	r3, #176	@ 0xb0
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80071f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	22ff      	movs	r2, #255	@ 0xff
 8007204:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800721c:	2182      	movs	r1, #130	@ 0x82
 800721e:	4818      	ldr	r0, [pc, #96]	@ (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007220:	f000 fd62 	bl	8007ce8 <USBD_GetEpDesc>
 8007224:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007226:	2101      	movs	r1, #1
 8007228:	4815      	ldr	r0, [pc, #84]	@ (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800722a:	f000 fd5d 	bl	8007ce8 <USBD_GetEpDesc>
 800722e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007230:	2181      	movs	r1, #129	@ 0x81
 8007232:	4813      	ldr	r0, [pc, #76]	@ (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007234:	f000 fd58 	bl	8007ce8 <USBD_GetEpDesc>
 8007238:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2210      	movs	r2, #16
 8007244:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2200      	movs	r2, #0
 8007250:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007254:	711a      	strb	r2, [r3, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d006      	beq.n	800726e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007268:	711a      	strb	r2, [r3, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2243      	movs	r2, #67	@ 0x43
 8007272:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007274:	4b02      	ldr	r3, [pc, #8]	@ (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000054 	.word	0x20000054

08007284 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800728c:	2182      	movs	r1, #130	@ 0x82
 800728e:	4818      	ldr	r0, [pc, #96]	@ (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007290:	f000 fd2a 	bl	8007ce8 <USBD_GetEpDesc>
 8007294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007296:	2101      	movs	r1, #1
 8007298:	4815      	ldr	r0, [pc, #84]	@ (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800729a:	f000 fd25 	bl	8007ce8 <USBD_GetEpDesc>
 800729e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072a0:	2181      	movs	r1, #129	@ 0x81
 80072a2:	4813      	ldr	r0, [pc, #76]	@ (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072a4:	f000 fd20 	bl	8007ce8 <USBD_GetEpDesc>
 80072a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2210      	movs	r2, #16
 80072b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2200      	movs	r2, #0
 80072c0:	711a      	strb	r2, [r3, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f042 0202 	orr.w	r2, r2, #2
 80072c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d006      	beq.n	80072de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	711a      	strb	r2, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f042 0202 	orr.w	r2, r2, #2
 80072dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2243      	movs	r2, #67	@ 0x43
 80072e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072e4:	4b02      	ldr	r3, [pc, #8]	@ (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000054 	.word	0x20000054

080072f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072fc:	2182      	movs	r1, #130	@ 0x82
 80072fe:	4818      	ldr	r0, [pc, #96]	@ (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007300:	f000 fcf2 	bl	8007ce8 <USBD_GetEpDesc>
 8007304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007306:	2101      	movs	r1, #1
 8007308:	4815      	ldr	r0, [pc, #84]	@ (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800730a:	f000 fced 	bl	8007ce8 <USBD_GetEpDesc>
 800730e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007310:	2181      	movs	r1, #129	@ 0x81
 8007312:	4813      	ldr	r0, [pc, #76]	@ (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007314:	f000 fce8 	bl	8007ce8 <USBD_GetEpDesc>
 8007318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2210      	movs	r2, #16
 8007324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2200      	movs	r2, #0
 8007330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007334:	711a      	strb	r2, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007348:	711a      	strb	r2, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2243      	movs	r2, #67	@ 0x43
 8007352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007354:	4b02      	ldr	r3, [pc, #8]	@ (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000054 	.word	0x20000054

08007364 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	220a      	movs	r2, #10
 8007370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007372:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20000010 	.word	0x20000010

08007384 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007394:	2303      	movs	r3, #3
 8007396:	e009      	b.n	80073ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	33b0      	adds	r3, #176	@ 0xb0
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	32b0      	adds	r2, #176	@ 0xb0
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	e008      	b.n	80073f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	32b0      	adds	r2, #176	@ 0xb0
 8007410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007414:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	e004      	b.n	800742a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32b0      	adds	r2, #176	@ 0xb0
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	e025      	b.n	80074aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11f      	bne.n	80074a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2201      	movs	r2, #1
 800746c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007470:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <USBD_CDC_TransmitPacket+0x7c>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4403      	add	r3, r0
 800748a:	3314      	adds	r3, #20
 800748c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800748e:	4b09      	ldr	r3, [pc, #36]	@ (80074b4 <USBD_CDC_TransmitPacket+0x7c>)
 8007490:	7819      	ldrb	r1, [r3, #0]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f002 f845 	bl	800952e <USBD_LL_Transmit>

    ret = USBD_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000097 	.word	0x20000097

080074b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32b0      	adds	r2, #176	@ 0xb0
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32b0      	adds	r2, #176	@ 0xb0
 80074da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e018      	b.n	8007518 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	7c1b      	ldrb	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007520 <USBD_CDC_ReceivePacket+0x68>)
 80074f0:	7819      	ldrb	r1, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f002 f837 	bl	8009570 <USBD_LL_PrepareReceive>
 8007502:	e008      	b.n	8007516 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <USBD_CDC_ReceivePacket+0x68>)
 8007506:	7819      	ldrb	r1, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800750e:	2340      	movs	r3, #64	@ 0x40
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f002 f82d 	bl	8009570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000098 	.word	0x20000098

08007524 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e01f      	b.n	800757c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	79fa      	ldrb	r2, [r7, #7]
 800756e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f001 fea7 	bl	80092c4 <USBD_LL_Init>
 8007576:	4603      	mov	r3, r0
 8007578:	75fb      	strb	r3, [r7, #23]

  return ret;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007598:	2303      	movs	r3, #3
 800759a:	e025      	b.n	80075e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	32ae      	adds	r2, #174	@ 0xae
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00f      	beq.n	80075d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	32ae      	adds	r2, #174	@ 0xae
 80075c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	f107 020e 	add.w	r2, r7, #14
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	4602      	mov	r2, r0
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 feaf 	bl	800935c <USBD_LL_Start>
 80075fe:	4603      	mov	r3, r0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d009      	beq.n	800764c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	4611      	mov	r1, r2
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	78fa      	ldrb	r2, [r7, #3]
 8007670:	4611      	mov	r1, r2
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800767c:	2303      	movs	r3, #3
 800767e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f001 f922 	bl	80088e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80076b0:	461a      	mov	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d01a      	beq.n	80076fc <USBD_LL_SetupStage+0x72>
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d822      	bhi.n	8007710 <USBD_LL_SetupStage+0x86>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <USBD_LL_SetupStage+0x4a>
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d00a      	beq.n	80076e8 <USBD_LL_SetupStage+0x5e>
 80076d2:	e01d      	b.n	8007710 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fb77 	bl	8007dd0 <USBD_StdDevReq>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]
      break;
 80076e6:	e020      	b.n	800772a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fbdf 	bl	8007eb4 <USBD_StdItfReq>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
      break;
 80076fa:	e016      	b.n	800772a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fc41 	bl	8007f8c <USBD_StdEPReq>
 800770a:	4603      	mov	r3, r0
 800770c:	73fb      	strb	r3, [r7, #15]
      break;
 800770e:	e00c      	b.n	800772a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007716:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800771a:	b2db      	uxtb	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fe7c 	bl	800941c <USBD_LL_StallEP>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
      break;
 8007728:	bf00      	nop
  }

  return ret;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	460b      	mov	r3, r1
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d177      	bne.n	800783c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007752:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800775a:	2b03      	cmp	r3, #3
 800775c:	f040 80a1 	bne.w	80078a2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	8992      	ldrh	r2, [r2, #12]
 8007768:	4293      	cmp	r3, r2
 800776a:	d91c      	bls.n	80077a6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	8992      	ldrh	r2, [r2, #12]
 8007774:	1a9a      	subs	r2, r3, r2
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	8992      	ldrh	r2, [r2, #12]
 8007782:	441a      	add	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	6919      	ldr	r1, [r3, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	899b      	ldrh	r3, [r3, #12]
 8007790:	461a      	mov	r2, r3
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	4293      	cmp	r3, r2
 8007798:	bf38      	it	cc
 800779a:	4613      	movcc	r3, r2
 800779c:	461a      	mov	r2, r3
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f001 f9a8 	bl	8008af4 <USBD_CtlContinueRx>
 80077a4:	e07d      	b.n	80078a2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d014      	beq.n	80077de <USBD_LL_DataOutStage+0xaa>
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d81d      	bhi.n	80077f4 <USBD_LL_DataOutStage+0xc0>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <USBD_LL_DataOutStage+0x8e>
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d003      	beq.n	80077c8 <USBD_LL_DataOutStage+0x94>
 80077c0:	e018      	b.n	80077f4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75bb      	strb	r3, [r7, #22]
            break;
 80077c6:	e018      	b.n	80077fa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	4619      	mov	r1, r3
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fa6e 	bl	8007cb4 <USBD_CoreFindIF>
 80077d8:	4603      	mov	r3, r0
 80077da:	75bb      	strb	r3, [r7, #22]
            break;
 80077dc:	e00d      	b.n	80077fa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fa70 	bl	8007cce <USBD_CoreFindEP>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75bb      	strb	r3, [r7, #22]
            break;
 80077f2:	e002      	b.n	80077fa <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	75bb      	strb	r3, [r7, #22]
            break;
 80077f8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d119      	bne.n	8007834 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b03      	cmp	r3, #3
 800780a:	d113      	bne.n	8007834 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800780c:	7dba      	ldrb	r2, [r7, #22]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	32ae      	adds	r2, #174	@ 0xae
 8007812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800781c:	7dba      	ldrb	r2, [r7, #22]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007824:	7dba      	ldrb	r2, [r7, #22]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	32ae      	adds	r2, #174	@ 0xae
 800782a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f001 f96e 	bl	8008b16 <USBD_CtlSendStatus>
 800783a:	e032      	b.n	80078a2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007842:	b2db      	uxtb	r3, r3
 8007844:	4619      	mov	r1, r3
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fa41 	bl	8007cce <USBD_CoreFindEP>
 800784c:	4603      	mov	r3, r0
 800784e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007850:	7dbb      	ldrb	r3, [r7, #22]
 8007852:	2bff      	cmp	r3, #255	@ 0xff
 8007854:	d025      	beq.n	80078a2 <USBD_LL_DataOutStage+0x16e>
 8007856:	7dbb      	ldrb	r3, [r7, #22]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d122      	bne.n	80078a2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b03      	cmp	r3, #3
 8007866:	d117      	bne.n	8007898 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007868:	7dba      	ldrb	r2, [r7, #22]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	32ae      	adds	r2, #174	@ 0xae
 800786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00f      	beq.n	8007898 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007878:	7dba      	ldrb	r2, [r7, #22]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007880:	7dba      	ldrb	r2, [r7, #22]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	32ae      	adds	r2, #174	@ 0xae
 8007886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	7afa      	ldrb	r2, [r7, #11]
 800788e:	4611      	mov	r1, r2
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	4798      	blx	r3
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	e000      	b.n	80078a4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	460b      	mov	r3, r1
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d178      	bne.n	80079b2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3314      	adds	r3, #20
 80078c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d163      	bne.n	8007998 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	8992      	ldrh	r2, [r2, #12]
 80078d8:	4293      	cmp	r3, r2
 80078da:	d91c      	bls.n	8007916 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	8992      	ldrh	r2, [r2, #12]
 80078e4:	1a9a      	subs	r2, r3, r2
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	8992      	ldrh	r2, [r2, #12]
 80078f2:	441a      	add	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	6919      	ldr	r1, [r3, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	461a      	mov	r2, r3
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f001 f8c4 	bl	8008a90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007908:	2300      	movs	r3, #0
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f001 fe2e 	bl	8009570 <USBD_LL_PrepareReceive>
 8007914:	e040      	b.n	8007998 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	899b      	ldrh	r3, [r3, #12]
 800791a:	461a      	mov	r2, r3
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d11c      	bne.n	800795e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800792c:	4293      	cmp	r3, r2
 800792e:	d316      	bcc.n	800795e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800793a:	429a      	cmp	r2, r3
 800793c:	d20f      	bcs.n	800795e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800793e:	2200      	movs	r2, #0
 8007940:	2100      	movs	r1, #0
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f001 f8a4 	bl	8008a90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007950:	2300      	movs	r3, #0
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f001 fe0a 	bl	8009570 <USBD_LL_PrepareReceive>
 800795c:	e01c      	b.n	8007998 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b03      	cmp	r3, #3
 8007968:	d10f      	bne.n	800798a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800798a:	2180      	movs	r1, #128	@ 0x80
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f001 fd45 	bl	800941c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f001 f8d2 	bl	8008b3c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d03a      	beq.n	8007a18 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff fe30 	bl	8007608 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80079b0:	e032      	b.n	8007a18 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	4619      	mov	r1, r3
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f986 	bl	8007cce <USBD_CoreFindEP>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2bff      	cmp	r3, #255	@ 0xff
 80079ca:	d025      	beq.n	8007a18 <USBD_LL_DataInStage+0x16c>
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d122      	bne.n	8007a18 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d11c      	bne.n	8007a18 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079de:	7dfa      	ldrb	r2, [r7, #23]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	32ae      	adds	r2, #174	@ 0xae
 80079e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d014      	beq.n	8007a18 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80079ee:	7dfa      	ldrb	r2, [r7, #23]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80079f6:	7dfa      	ldrb	r2, [r7, #23]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	32ae      	adds	r2, #174	@ 0xae
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	7afa      	ldrb	r2, [r7, #11]
 8007a04:	4611      	mov	r1, r2
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	4798      	blx	r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a0e:	7dbb      	ldrb	r3, [r7, #22]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007a14:	7dbb      	ldrb	r3, [r7, #22]
 8007a16:	e000      	b.n	8007a1a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d014      	beq.n	8007a88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6852      	ldr	r2, [r2, #4]
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	4611      	mov	r1, r2
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a88:	2340      	movs	r3, #64	@ 0x40
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fc7f 	bl	8009392 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2240      	movs	r2, #64	@ 0x40
 8007aa0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa4:	2340      	movs	r3, #64	@ 0x40
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2180      	movs	r1, #128	@ 0x80
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 fc71 	bl	8009392 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2240      	movs	r2, #64	@ 0x40
 8007abc:	841a      	strh	r2, [r3, #32]

  return ret;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d006      	beq.n	8007b0a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d106      	bne.n	8007b42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d110      	bne.n	8007b86 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	32ae      	adds	r2, #174	@ 0xae
 8007ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e01c      	b.n	8007bec <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d115      	bne.n	8007bea <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	32ae      	adds	r2, #174	@ 0xae
 8007bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32ae      	adds	r2, #174	@ 0xae
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	4611      	mov	r1, r2
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	32ae      	adds	r2, #174	@ 0xae
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e01c      	b.n	8007c50 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d115      	bne.n	8007c4e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	32ae      	adds	r2, #174	@ 0xae
 8007c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00b      	beq.n	8007c4e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	32ae      	adds	r2, #174	@ 0xae
 8007c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00e      	beq.n	8007caa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6852      	ldr	r2, [r2, #4]
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	885b      	ldrh	r3, [r3, #2]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	7812      	ldrb	r2, [r2, #0]
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d91f      	bls.n	8007d4e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d14:	e013      	b.n	8007d3e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d16:	f107 030a 	add.w	r3, r7, #10
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6978      	ldr	r0, [r7, #20]
 8007d1e:	f000 f81b 	bl	8007d58 <USBD_GetNextDesc>
 8007d22:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b05      	cmp	r3, #5
 8007d2a:	d108      	bne.n	8007d3e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	789b      	ldrb	r3, [r3, #2]
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d008      	beq.n	8007d4c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	897b      	ldrh	r3, [r7, #10]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d8e5      	bhi.n	8007d16 <USBD_GetEpDesc+0x2e>
 8007d4a:	e000      	b.n	8007d4e <USBD_GetEpDesc+0x66>
          break;
 8007d4c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d4e:	693b      	ldr	r3, [r7, #16]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	7812      	ldrb	r2, [r2, #0]
 8007d6e:	4413      	add	r3, r2
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	3301      	adds	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	b21a      	sxth	r2, r3
 8007db6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	b21b      	sxth	r3, r3
 8007dbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dc0:	89fb      	ldrh	r3, [r7, #14]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d005      	beq.n	8007df6 <USBD_StdDevReq+0x26>
 8007dea:	2b40      	cmp	r3, #64	@ 0x40
 8007dec:	d857      	bhi.n	8007e9e <USBD_StdDevReq+0xce>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00f      	beq.n	8007e12 <USBD_StdDevReq+0x42>
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d153      	bne.n	8007e9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	32ae      	adds	r2, #174	@ 0xae
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e10:	e04a      	b.n	8007ea8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	2b09      	cmp	r3, #9
 8007e18:	d83b      	bhi.n	8007e92 <USBD_StdDevReq+0xc2>
 8007e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <USBD_StdDevReq+0x50>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e75 	.word	0x08007e75
 8007e24:	08007e89 	.word	0x08007e89
 8007e28:	08007e93 	.word	0x08007e93
 8007e2c:	08007e7f 	.word	0x08007e7f
 8007e30:	08007e93 	.word	0x08007e93
 8007e34:	08007e53 	.word	0x08007e53
 8007e38:	08007e49 	.word	0x08007e49
 8007e3c:	08007e93 	.word	0x08007e93
 8007e40:	08007e6b 	.word	0x08007e6b
 8007e44:	08007e5d 	.word	0x08007e5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa3e 	bl	80082cc <USBD_GetDescriptor>
          break;
 8007e50:	e024      	b.n	8007e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fba3 	bl	80085a0 <USBD_SetAddress>
          break;
 8007e5a:	e01f      	b.n	8007e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fbe2 	bl	8008628 <USBD_SetConfig>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
          break;
 8007e68:	e018      	b.n	8007e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc85 	bl	800877c <USBD_GetConfig>
          break;
 8007e72:	e013      	b.n	8007e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fcb6 	bl	80087e8 <USBD_GetStatus>
          break;
 8007e7c:	e00e      	b.n	8007e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fce5 	bl	8008850 <USBD_SetFeature>
          break;
 8007e86:	e009      	b.n	8007e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fd09 	bl	80088a2 <USBD_ClrFeature>
          break;
 8007e90:	e004      	b.n	8007e9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fd60 	bl	800895a <USBD_CtlError>
          break;
 8007e9a:	bf00      	nop
      }
      break;
 8007e9c:	e004      	b.n	8007ea8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fd5a 	bl	800895a <USBD_CtlError>
      break;
 8007ea6:	bf00      	nop
  }

  return ret;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop

08007eb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007eca:	2b40      	cmp	r3, #64	@ 0x40
 8007ecc:	d005      	beq.n	8007eda <USBD_StdItfReq+0x26>
 8007ece:	2b40      	cmp	r3, #64	@ 0x40
 8007ed0:	d852      	bhi.n	8007f78 <USBD_StdItfReq+0xc4>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <USBD_StdItfReq+0x26>
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d14e      	bne.n	8007f78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d840      	bhi.n	8007f6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	889b      	ldrh	r3, [r3, #4]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d836      	bhi.n	8007f60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	889b      	ldrh	r3, [r3, #4]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff feda 	bl	8007cb4 <USBD_CoreFindIF>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2bff      	cmp	r3, #255	@ 0xff
 8007f08:	d01d      	beq.n	8007f46 <USBD_StdItfReq+0x92>
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d11a      	bne.n	8007f46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f10:	7bba      	ldrb	r2, [r7, #14]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	32ae      	adds	r2, #174	@ 0xae
 8007f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00f      	beq.n	8007f40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f20:	7bba      	ldrb	r2, [r7, #14]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f28:	7bba      	ldrb	r2, [r7, #14]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	32ae      	adds	r2, #174	@ 0xae
 8007f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f3e:	e004      	b.n	8007f4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f44:	e001      	b.n	8007f4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88db      	ldrh	r3, [r3, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d110      	bne.n	8007f74 <USBD_StdItfReq+0xc0>
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10d      	bne.n	8007f74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fddc 	bl	8008b16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f5e:	e009      	b.n	8007f74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fcf9 	bl	800895a <USBD_CtlError>
          break;
 8007f68:	e004      	b.n	8007f74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fcf4 	bl	800895a <USBD_CtlError>
          break;
 8007f72:	e000      	b.n	8007f76 <USBD_StdItfReq+0xc2>
          break;
 8007f74:	bf00      	nop
      }
      break;
 8007f76:	e004      	b.n	8007f82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fced 	bl	800895a <USBD_CtlError>
      break;
 8007f80:	bf00      	nop
  }

  return ret;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	889b      	ldrh	r3, [r3, #4]
 8007f9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fa8:	2b40      	cmp	r3, #64	@ 0x40
 8007faa:	d007      	beq.n	8007fbc <USBD_StdEPReq+0x30>
 8007fac:	2b40      	cmp	r3, #64	@ 0x40
 8007fae:	f200 8181 	bhi.w	80082b4 <USBD_StdEPReq+0x328>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d02a      	beq.n	800800c <USBD_StdEPReq+0x80>
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	f040 817c 	bne.w	80082b4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fe84 	bl	8007cce <USBD_CoreFindEP>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fca:	7b7b      	ldrb	r3, [r7, #13]
 8007fcc:	2bff      	cmp	r3, #255	@ 0xff
 8007fce:	f000 8176 	beq.w	80082be <USBD_StdEPReq+0x332>
 8007fd2:	7b7b      	ldrb	r3, [r7, #13]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 8172 	bne.w	80082be <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007fda:	7b7a      	ldrb	r2, [r7, #13]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007fe2:	7b7a      	ldrb	r2, [r7, #13]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	32ae      	adds	r2, #174	@ 0xae
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8165 	beq.w	80082be <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ff4:	7b7a      	ldrb	r2, [r7, #13]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32ae      	adds	r2, #174	@ 0xae
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800800a:	e158      	b.n	80082be <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	785b      	ldrb	r3, [r3, #1]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d008      	beq.n	8008026 <USBD_StdEPReq+0x9a>
 8008014:	2b03      	cmp	r3, #3
 8008016:	f300 8147 	bgt.w	80082a8 <USBD_StdEPReq+0x31c>
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 809b 	beq.w	8008156 <USBD_StdEPReq+0x1ca>
 8008020:	2b01      	cmp	r3, #1
 8008022:	d03c      	beq.n	800809e <USBD_StdEPReq+0x112>
 8008024:	e140      	b.n	80082a8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d002      	beq.n	8008038 <USBD_StdEPReq+0xac>
 8008032:	2b03      	cmp	r3, #3
 8008034:	d016      	beq.n	8008064 <USBD_StdEPReq+0xd8>
 8008036:	e02c      	b.n	8008092 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00d      	beq.n	800805a <USBD_StdEPReq+0xce>
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b80      	cmp	r3, #128	@ 0x80
 8008042:	d00a      	beq.n	800805a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 f9e7 	bl	800941c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800804e:	2180      	movs	r1, #128	@ 0x80
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 f9e3 	bl	800941c <USBD_LL_StallEP>
 8008056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008058:	e020      	b.n	800809c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc7c 	bl	800895a <USBD_CtlError>
              break;
 8008062:	e01b      	b.n	800809c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	885b      	ldrh	r3, [r3, #2]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10e      	bne.n	800808a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <USBD_StdEPReq+0xfe>
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b80      	cmp	r3, #128	@ 0x80
 8008076:	d008      	beq.n	800808a <USBD_StdEPReq+0xfe>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	88db      	ldrh	r3, [r3, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f9c9 	bl	800941c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fd43 	bl	8008b16 <USBD_CtlSendStatus>

              break;
 8008090:	e004      	b.n	800809c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fc60 	bl	800895a <USBD_CtlError>
              break;
 800809a:	bf00      	nop
          }
          break;
 800809c:	e109      	b.n	80082b2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d002      	beq.n	80080b0 <USBD_StdEPReq+0x124>
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d016      	beq.n	80080dc <USBD_StdEPReq+0x150>
 80080ae:	e04b      	b.n	8008148 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <USBD_StdEPReq+0x146>
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b80      	cmp	r3, #128	@ 0x80
 80080ba:	d00a      	beq.n	80080d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f9ab 	bl	800941c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080c6:	2180      	movs	r1, #128	@ 0x80
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 f9a7 	bl	800941c <USBD_LL_StallEP>
 80080ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080d0:	e040      	b.n	8008154 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc40 	bl	800895a <USBD_CtlError>
              break;
 80080da:	e03b      	b.n	8008154 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d136      	bne.n	8008152 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 f9b1 	bl	800945a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fd0c 	bl	8008b16 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff fde3 	bl	8007cce <USBD_CoreFindEP>
 8008108:	4603      	mov	r3, r0
 800810a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800810c:	7b7b      	ldrb	r3, [r7, #13]
 800810e:	2bff      	cmp	r3, #255	@ 0xff
 8008110:	d01f      	beq.n	8008152 <USBD_StdEPReq+0x1c6>
 8008112:	7b7b      	ldrb	r3, [r7, #13]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d11c      	bne.n	8008152 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008118:	7b7a      	ldrb	r2, [r7, #13]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008120:	7b7a      	ldrb	r2, [r7, #13]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	32ae      	adds	r2, #174	@ 0xae
 8008126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d010      	beq.n	8008152 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008130:	7b7a      	ldrb	r2, [r7, #13]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	@ 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008146:	e004      	b.n	8008152 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fc05 	bl	800895a <USBD_CtlError>
              break;
 8008150:	e000      	b.n	8008154 <USBD_StdEPReq+0x1c8>
              break;
 8008152:	bf00      	nop
          }
          break;
 8008154:	e0ad      	b.n	80082b2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d002      	beq.n	8008168 <USBD_StdEPReq+0x1dc>
 8008162:	2b03      	cmp	r3, #3
 8008164:	d033      	beq.n	80081ce <USBD_StdEPReq+0x242>
 8008166:	e099      	b.n	800829c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <USBD_StdEPReq+0x1f2>
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b80      	cmp	r3, #128	@ 0x80
 8008172:	d004      	beq.n	800817e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fbef 	bl	800895a <USBD_CtlError>
                break;
 800817c:	e093      	b.n	80082a6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800817e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da0b      	bge.n	800819e <USBD_StdEPReq+0x212>
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	3310      	adds	r3, #16
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	4413      	add	r3, r2
 800819a:	3304      	adds	r3, #4
 800819c:	e00b      	b.n	80081b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	4413      	add	r3, r2
 80081b4:	3304      	adds	r3, #4
 80081b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2200      	movs	r2, #0
 80081bc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	330e      	adds	r3, #14
 80081c2:	2202      	movs	r2, #2
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fc44 	bl	8008a54 <USBD_CtlSendData>
              break;
 80081cc:	e06b      	b.n	80082a6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da11      	bge.n	80081fa <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	f003 020f 	and.w	r2, r3, #15
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3323      	adds	r3, #35	@ 0x23
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d117      	bne.n	8008220 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fbb1 	bl	800895a <USBD_CtlError>
                  break;
 80081f8:	e055      	b.n	80082a6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	f003 020f 	and.w	r2, r3, #15
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d104      	bne.n	8008220 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb9e 	bl	800895a <USBD_CtlError>
                  break;
 800821e:	e042      	b.n	80082a6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	da0b      	bge.n	8008240 <USBD_StdEPReq+0x2b4>
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	3310      	adds	r3, #16
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	4413      	add	r3, r2
 800823c:	3304      	adds	r3, #4
 800823e:	e00b      	b.n	8008258 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4413      	add	r3, r2
 8008256:	3304      	adds	r3, #4
 8008258:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <USBD_StdEPReq+0x2da>
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b80      	cmp	r3, #128	@ 0x80
 8008264:	d103      	bne.n	800826e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2200      	movs	r2, #0
 800826a:	739a      	strb	r2, [r3, #14]
 800826c:	e00e      	b.n	800828c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 f910 	bl	8009498 <USBD_LL_IsStallEP>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2201      	movs	r2, #1
 8008282:	739a      	strb	r2, [r3, #14]
 8008284:	e002      	b.n	800828c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	330e      	adds	r3, #14
 8008290:	2202      	movs	r2, #2
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fbdd 	bl	8008a54 <USBD_CtlSendData>
              break;
 800829a:	e004      	b.n	80082a6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fb5b 	bl	800895a <USBD_CtlError>
              break;
 80082a4:	bf00      	nop
          }
          break;
 80082a6:	e004      	b.n	80082b2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fb55 	bl	800895a <USBD_CtlError>
          break;
 80082b0:	bf00      	nop
      }
      break;
 80082b2:	e005      	b.n	80082c0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fb4f 	bl	800895a <USBD_CtlError>
      break;
 80082bc:	e000      	b.n	80082c0 <USBD_StdEPReq+0x334>
      break;
 80082be:	bf00      	nop
  }

  return ret;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	885b      	ldrh	r3, [r3, #2]
 80082e6:	0a1b      	lsrs	r3, r3, #8
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	3b01      	subs	r3, #1
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	f200 8128 	bhi.w	8008542 <USBD_GetDescriptor+0x276>
 80082f2:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <USBD_GetDescriptor+0x2c>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008315 	.word	0x08008315
 80082fc:	0800832d 	.word	0x0800832d
 8008300:	0800836d 	.word	0x0800836d
 8008304:	08008543 	.word	0x08008543
 8008308:	08008543 	.word	0x08008543
 800830c:	080084e3 	.word	0x080084e3
 8008310:	0800850f 	.word	0x0800850f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7c12      	ldrb	r2, [r2, #16]
 8008320:	f107 0108 	add.w	r1, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
      break;
 800832a:	e112      	b.n	8008552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7c1b      	ldrb	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10d      	bne.n	8008350 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800833a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833c:	f107 0208 	add.w	r2, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	2202      	movs	r2, #2
 800834c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800834e:	e100      	b.n	8008552 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008358:	f107 0208 	add.w	r2, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	2202      	movs	r2, #2
 8008368:	701a      	strb	r2, [r3, #0]
      break;
 800836a:	e0f2      	b.n	8008552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	885b      	ldrh	r3, [r3, #2]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b05      	cmp	r3, #5
 8008374:	f200 80ac 	bhi.w	80084d0 <USBD_GetDescriptor+0x204>
 8008378:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <USBD_GetDescriptor+0xb4>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	08008399 	.word	0x08008399
 8008384:	080083cd 	.word	0x080083cd
 8008388:	08008401 	.word	0x08008401
 800838c:	08008435 	.word	0x08008435
 8008390:	08008469 	.word	0x08008469
 8008394:	0800849d 	.word	0x0800849d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	7c12      	ldrb	r2, [r2, #16]
 80083b0:	f107 0108 	add.w	r1, r7, #8
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ba:	e091      	b.n	80084e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 facb 	bl	800895a <USBD_CtlError>
            err++;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	3301      	adds	r3, #1
 80083c8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ca:	e089      	b.n	80084e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ee:	e077      	b.n	80084e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fab1 	bl	800895a <USBD_CtlError>
            err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
          break;
 80083fe:	e06f      	b.n	80084e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008422:	e05d      	b.n	80084e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa97 	bl	800895a <USBD_CtlError>
            err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
          break;
 8008432:	e055      	b.n	80084e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008456:	e043      	b.n	80084e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa7d 	bl	800895a <USBD_CtlError>
            err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
          break;
 8008466:	e03b      	b.n	80084e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7c12      	ldrb	r2, [r2, #16]
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848a:	e029      	b.n	80084e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa63 	bl	800895a <USBD_CtlError>
            err++;
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	3301      	adds	r3, #1
 8008498:	72fb      	strb	r3, [r7, #11]
          break;
 800849a:	e021      	b.n	80084e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	7c12      	ldrb	r2, [r2, #16]
 80084b4:	f107 0108 	add.w	r1, r7, #8
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084be:	e00f      	b.n	80084e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa49 	bl	800895a <USBD_CtlError>
            err++;
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	3301      	adds	r3, #1
 80084cc:	72fb      	strb	r3, [r7, #11]
          break;
 80084ce:	e007      	b.n	80084e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa41 	bl	800895a <USBD_CtlError>
          err++;
 80084d8:	7afb      	ldrb	r3, [r7, #11]
 80084da:	3301      	adds	r3, #1
 80084dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80084de:	bf00      	nop
      }
      break;
 80084e0:	e037      	b.n	8008552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7c1b      	ldrb	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f2:	f107 0208 	add.w	r2, r7, #8
 80084f6:	4610      	mov	r0, r2
 80084f8:	4798      	blx	r3
 80084fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084fc:	e029      	b.n	8008552 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fa2a 	bl	800895a <USBD_CtlError>
        err++;
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	3301      	adds	r3, #1
 800850a:	72fb      	strb	r3, [r7, #11]
      break;
 800850c:	e021      	b.n	8008552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7c1b      	ldrb	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800851c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851e:	f107 0208 	add.w	r2, r7, #8
 8008522:	4610      	mov	r0, r2
 8008524:	4798      	blx	r3
 8008526:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	2207      	movs	r2, #7
 800852e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008530:	e00f      	b.n	8008552 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa10 	bl	800895a <USBD_CtlError>
        err++;
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	3301      	adds	r3, #1
 800853e:	72fb      	strb	r3, [r7, #11]
      break;
 8008540:	e007      	b.n	8008552 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fa08 	bl	800895a <USBD_CtlError>
      err++;
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	3301      	adds	r3, #1
 800854e:	72fb      	strb	r3, [r7, #11]
      break;
 8008550:	bf00      	nop
  }

  if (err != 0U)
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11e      	bne.n	8008596 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	88db      	ldrh	r3, [r3, #6]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d016      	beq.n	800858e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008560:	893b      	ldrh	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00e      	beq.n	8008584 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	88da      	ldrh	r2, [r3, #6]
 800856a:	893b      	ldrh	r3, [r7, #8]
 800856c:	4293      	cmp	r3, r2
 800856e:	bf28      	it	cs
 8008570:	4613      	movcs	r3, r2
 8008572:	b29b      	uxth	r3, r3
 8008574:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008576:	893b      	ldrh	r3, [r7, #8]
 8008578:	461a      	mov	r2, r3
 800857a:	68f9      	ldr	r1, [r7, #12]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fa69 	bl	8008a54 <USBD_CtlSendData>
 8008582:	e009      	b.n	8008598 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f9e7 	bl	800895a <USBD_CtlError>
 800858c:	e004      	b.n	8008598 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fac1 	bl	8008b16 <USBD_CtlSendStatus>
 8008594:	e000      	b.n	8008598 <USBD_GetDescriptor+0x2cc>
    return;
 8008596:	bf00      	nop
  }
}
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop

080085a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	889b      	ldrh	r3, [r3, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d131      	bne.n	8008616 <USBD_SetAddress+0x76>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	88db      	ldrh	r3, [r3, #6]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d12d      	bne.n	8008616 <USBD_SetAddress+0x76>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	885b      	ldrh	r3, [r3, #2]
 80085be:	2b7f      	cmp	r3, #127	@ 0x7f
 80085c0:	d829      	bhi.n	8008616 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	885b      	ldrh	r3, [r3, #2]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d104      	bne.n	80085e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f9bc 	bl	800895a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e2:	e01d      	b.n	8008620 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7bfa      	ldrb	r2, [r7, #15]
 80085e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 ff7d 	bl	80094f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa8d 	bl	8008b16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2202      	movs	r2, #2
 8008606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800860a:	e009      	b.n	8008620 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008614:	e004      	b.n	8008620 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f99e 	bl	800895a <USBD_CtlError>
  }
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	885b      	ldrh	r3, [r3, #2]
 800863a:	b2da      	uxtb	r2, r3
 800863c:	4b4e      	ldr	r3, [pc, #312]	@ (8008778 <USBD_SetConfig+0x150>)
 800863e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008640:	4b4d      	ldr	r3, [pc, #308]	@ (8008778 <USBD_SetConfig+0x150>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d905      	bls.n	8008654 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f985 	bl	800895a <USBD_CtlError>
    return USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	e08c      	b.n	800876e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b02      	cmp	r3, #2
 800865e:	d002      	beq.n	8008666 <USBD_SetConfig+0x3e>
 8008660:	2b03      	cmp	r3, #3
 8008662:	d029      	beq.n	80086b8 <USBD_SetConfig+0x90>
 8008664:	e075      	b.n	8008752 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008666:	4b44      	ldr	r3, [pc, #272]	@ (8008778 <USBD_SetConfig+0x150>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d020      	beq.n	80086b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800866e:	4b42      	ldr	r3, [pc, #264]	@ (8008778 <USBD_SetConfig+0x150>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008678:	4b3f      	ldr	r3, [pc, #252]	@ (8008778 <USBD_SetConfig+0x150>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fe ffcd 	bl	800761e <USBD_SetClassConfig>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f962 	bl	800895a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800869e:	e065      	b.n	800876c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fa38 	bl	8008b16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2203      	movs	r2, #3
 80086aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80086ae:	e05d      	b.n	800876c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fa30 	bl	8008b16 <USBD_CtlSendStatus>
      break;
 80086b6:	e059      	b.n	800876c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008778 <USBD_SetConfig+0x150>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d112      	bne.n	80086e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80086c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008778 <USBD_SetConfig+0x150>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086d2:	4b29      	ldr	r3, [pc, #164]	@ (8008778 <USBD_SetConfig+0x150>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7fe ffbc 	bl	8007656 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa19 	bl	8008b16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086e4:	e042      	b.n	800876c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80086e6:	4b24      	ldr	r3, [pc, #144]	@ (8008778 <USBD_SetConfig+0x150>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d02a      	beq.n	800874a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7fe ffaa 	bl	8007656 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008702:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <USBD_SetConfig+0x150>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800870c:	4b1a      	ldr	r3, [pc, #104]	@ (8008778 <USBD_SetConfig+0x150>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fe ff83 	bl	800761e <USBD_SetClassConfig>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f918 	bl	800895a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7fe ff8f 	bl	8007656 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008740:	e014      	b.n	800876c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f9e7 	bl	8008b16 <USBD_CtlSendStatus>
      break;
 8008748:	e010      	b.n	800876c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9e3 	bl	8008b16 <USBD_CtlSendStatus>
      break;
 8008750:	e00c      	b.n	800876c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f900 	bl	800895a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800875a:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <USBD_SetConfig+0x150>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fe ff78 	bl	8007656 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008766:	2303      	movs	r3, #3
 8008768:	73fb      	strb	r3, [r7, #15]
      break;
 800876a:	bf00      	nop
  }

  return ret;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	2000029c 	.word	0x2000029c

0800877c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88db      	ldrh	r3, [r3, #6]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d004      	beq.n	8008798 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f8e2 	bl	800895a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008796:	e023      	b.n	80087e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	dc02      	bgt.n	80087aa <USBD_GetConfig+0x2e>
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dc03      	bgt.n	80087b0 <USBD_GetConfig+0x34>
 80087a8:	e015      	b.n	80087d6 <USBD_GetConfig+0x5a>
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d00b      	beq.n	80087c6 <USBD_GetConfig+0x4a>
 80087ae:	e012      	b.n	80087d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3308      	adds	r3, #8
 80087ba:	2201      	movs	r2, #1
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f948 	bl	8008a54 <USBD_CtlSendData>
        break;
 80087c4:	e00c      	b.n	80087e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3304      	adds	r3, #4
 80087ca:	2201      	movs	r2, #1
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f940 	bl	8008a54 <USBD_CtlSendData>
        break;
 80087d4:	e004      	b.n	80087e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8be 	bl	800895a <USBD_CtlError>
        break;
 80087de:	bf00      	nop
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d81e      	bhi.n	800883e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	88db      	ldrh	r3, [r3, #6]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d004      	beq.n	8008812 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8a5 	bl	800895a <USBD_CtlError>
        break;
 8008810:	e01a      	b.n	8008848 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f043 0202 	orr.w	r2, r3, #2
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	330c      	adds	r3, #12
 8008832:	2202      	movs	r2, #2
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f90c 	bl	8008a54 <USBD_CtlSendData>
      break;
 800883c:	e004      	b.n	8008848 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f88a 	bl	800895a <USBD_CtlError>
      break;
 8008846:	bf00      	nop
  }
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	885b      	ldrh	r3, [r3, #2]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d107      	bne.n	8008872 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f953 	bl	8008b16 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008870:	e013      	b.n	800889a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d10b      	bne.n	8008892 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	889b      	ldrh	r3, [r3, #4]
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	b29b      	uxth	r3, r3
 8008882:	b2da      	uxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f943 	bl	8008b16 <USBD_CtlSendStatus>
}
 8008890:	e003      	b.n	800889a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f860 	bl	800895a <USBD_CtlError>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d80b      	bhi.n	80088d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	885b      	ldrh	r3, [r3, #2]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d10c      	bne.n	80088dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f923 	bl	8008b16 <USBD_CtlSendStatus>
      }
      break;
 80088d0:	e004      	b.n	80088dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f840 	bl	800895a <USBD_CtlError>
      break;
 80088da:	e000      	b.n	80088de <USBD_ClrFeature+0x3c>
      break;
 80088dc:	bf00      	nop
  }
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3301      	adds	r3, #1
 800890e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff fa3d 	bl	8007d90 <SWAPBYTE>
 8008916:	4603      	mov	r3, r0
 8008918:	461a      	mov	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3301      	adds	r3, #1
 8008928:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fa30 	bl	8007d90 <SWAPBYTE>
 8008930:	4603      	mov	r3, r0
 8008932:	461a      	mov	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f7ff fa23 	bl	8007d90 <SWAPBYTE>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	80da      	strh	r2, [r3, #6]
}
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008964:	2180      	movs	r1, #128	@ 0x80
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fd58 	bl	800941c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800896c:	2100      	movs	r1, #0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fd54 	bl	800941c <USBD_LL_StallEP>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d042      	beq.n	8008a18 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008996:	6938      	ldr	r0, [r7, #16]
 8008998:	f000 f842 	bl	8008a20 <USBD_GetLen>
 800899c:	4603      	mov	r3, r0
 800899e:	3301      	adds	r3, #1
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a6:	d808      	bhi.n	80089ba <USBD_GetString+0x3e>
 80089a8:	6938      	ldr	r0, [r7, #16]
 80089aa:	f000 f839 	bl	8008a20 <USBD_GetLen>
 80089ae:	4603      	mov	r3, r0
 80089b0:	3301      	adds	r3, #1
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	e001      	b.n	80089be <USBD_GetString+0x42>
 80089ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	4413      	add	r3, r2
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7812      	ldrb	r2, [r2, #0]
 80089cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	3301      	adds	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	4413      	add	r3, r2
 80089da:	2203      	movs	r2, #3
 80089dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	3301      	adds	r3, #1
 80089e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089e4:	e013      	b.n	8008a0e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	4413      	add	r3, r2
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	7812      	ldrb	r2, [r2, #0]
 80089f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3301      	adds	r3, #1
 80089f6:	613b      	str	r3, [r7, #16]
    idx++;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	3301      	adds	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	4413      	add	r3, r2
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e7      	bne.n	80089e6 <USBD_GetString+0x6a>
 8008a16:	e000      	b.n	8008a1a <USBD_GetString+0x9e>
    return;
 8008a18:	bf00      	nop
  }
}
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a30:	e005      	b.n	8008a3e <USBD_GetLen+0x1e>
  {
    len++;
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	3301      	adds	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f5      	bne.n	8008a32 <USBD_GetLen+0x12>
  }

  return len;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	2100      	movs	r1, #0
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fd54 	bl	800952e <USBD_LL_Transmit>

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fd43 	bl	800952e <USBD_LL_Transmit>

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2203      	movs	r2, #3
 8008ac2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fd43 	bl	8009570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	2100      	movs	r1, #0
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fd32 	bl	8009570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2204      	movs	r2, #4
 8008b22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b26:	2300      	movs	r3, #0
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fcfe 	bl	800952e <USBD_LL_Transmit>

  return USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2205      	movs	r2, #5
 8008b48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2100      	movs	r1, #0
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fd0c 	bl	8009570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	4912      	ldr	r1, [pc, #72]	@ (8008bb4 <MX_USB_DEVICE_Init+0x50>)
 8008b6c:	4812      	ldr	r0, [pc, #72]	@ (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008b6e:	f7fe fcd9 	bl	8007524 <USBD_Init>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b78:	f7f8 fb9b 	bl	80012b2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b7c:	490f      	ldr	r1, [pc, #60]	@ (8008bbc <MX_USB_DEVICE_Init+0x58>)
 8008b7e:	480e      	ldr	r0, [pc, #56]	@ (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008b80:	f7fe fd00 	bl	8007584 <USBD_RegisterClass>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b8a:	f7f8 fb92 	bl	80012b2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b8e:	490c      	ldr	r1, [pc, #48]	@ (8008bc0 <MX_USB_DEVICE_Init+0x5c>)
 8008b90:	4809      	ldr	r0, [pc, #36]	@ (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008b92:	f7fe fbf7 	bl	8007384 <USBD_CDC_RegisterInterface>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b9c:	f7f8 fb89 	bl	80012b2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ba0:	4805      	ldr	r0, [pc, #20]	@ (8008bb8 <MX_USB_DEVICE_Init+0x54>)
 8008ba2:	f7fe fd25 	bl	80075f0 <USBD_Start>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008bac:	f7f8 fb81 	bl	80012b2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bb0:	bf00      	nop
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200000b8 	.word	0x200000b8
 8008bb8:	200002a0 	.word	0x200002a0
 8008bbc:	2000001c 	.word	0x2000001c
 8008bc0:	200000a4 	.word	0x200000a4

08008bc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4905      	ldr	r1, [pc, #20]	@ (8008be0 <CDC_Init_FS+0x1c>)
 8008bcc:	4805      	ldr	r0, [pc, #20]	@ (8008be4 <CDC_Init_FS+0x20>)
 8008bce:	f7fe fbf3 	bl	80073b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bd2:	4905      	ldr	r1, [pc, #20]	@ (8008be8 <CDC_Init_FS+0x24>)
 8008bd4:	4803      	ldr	r0, [pc, #12]	@ (8008be4 <CDC_Init_FS+0x20>)
 8008bd6:	f7fe fc11 	bl	80073fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008bda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	2000077c 	.word	0x2000077c
 8008be4:	200002a0 	.word	0x200002a0
 8008be8:	2000057c 	.word	0x2000057c

08008bec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008bf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	2b23      	cmp	r3, #35	@ 0x23
 8008c10:	f200 8098 	bhi.w	8008d44 <CDC_Control_FS+0x148>
 8008c14:	a201      	add	r2, pc, #4	@ (adr r2, 8008c1c <CDC_Control_FS+0x20>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008d45 	.word	0x08008d45
 8008c20:	08008d45 	.word	0x08008d45
 8008c24:	08008d45 	.word	0x08008d45
 8008c28:	08008d45 	.word	0x08008d45
 8008c2c:	08008d45 	.word	0x08008d45
 8008c30:	08008d45 	.word	0x08008d45
 8008c34:	08008d45 	.word	0x08008d45
 8008c38:	08008d45 	.word	0x08008d45
 8008c3c:	08008d45 	.word	0x08008d45
 8008c40:	08008d45 	.word	0x08008d45
 8008c44:	08008d45 	.word	0x08008d45
 8008c48:	08008d45 	.word	0x08008d45
 8008c4c:	08008d45 	.word	0x08008d45
 8008c50:	08008d45 	.word	0x08008d45
 8008c54:	08008d45 	.word	0x08008d45
 8008c58:	08008d45 	.word	0x08008d45
 8008c5c:	08008d45 	.word	0x08008d45
 8008c60:	08008d45 	.word	0x08008d45
 8008c64:	08008d45 	.word	0x08008d45
 8008c68:	08008d45 	.word	0x08008d45
 8008c6c:	08008d45 	.word	0x08008d45
 8008c70:	08008d45 	.word	0x08008d45
 8008c74:	08008d45 	.word	0x08008d45
 8008c78:	08008d45 	.word	0x08008d45
 8008c7c:	08008d45 	.word	0x08008d45
 8008c80:	08008d45 	.word	0x08008d45
 8008c84:	08008d45 	.word	0x08008d45
 8008c88:	08008d45 	.word	0x08008d45
 8008c8c:	08008d45 	.word	0x08008d45
 8008c90:	08008d45 	.word	0x08008d45
 8008c94:	08008d45 	.word	0x08008d45
 8008c98:	08008d45 	.word	0x08008d45
 8008c9c:	08008cad 	.word	0x08008cad
 8008ca0:	08008cf1 	.word	0x08008cf1
 8008ca4:	08008d45 	.word	0x08008d45
 8008ca8:	08008d45 	.word	0x08008d45
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	041b      	lsls	r3, r3, #16
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	3303      	adds	r3, #3
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	061b      	lsls	r3, r3, #24
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	4b20      	ldr	r3, [pc, #128]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008cd4:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	791a      	ldrb	r2, [r3, #4]
 8008cda:	4b1e      	ldr	r3, [pc, #120]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008cdc:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	795a      	ldrb	r2, [r3, #5]
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008ce4:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	799a      	ldrb	r2, [r3, #6]
 8008cea:	4b1a      	ldr	r3, [pc, #104]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008cec:	719a      	strb	r2, [r3, #6]
     break;
 8008cee:	e02a      	b.n	8008d46 <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008cf0:	4b18      	ldr	r3, [pc, #96]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008cfa:	4b16      	ldr	r3, [pc, #88]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	0a1a      	lsrs	r2, r3, #8
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	b2d2      	uxtb	r2, r2
 8008d06:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008d08:	4b12      	ldr	r3, [pc, #72]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	0c1a      	lsrs	r2, r3, #16
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	3302      	adds	r3, #2
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008d16:	4b0f      	ldr	r3, [pc, #60]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	0e1a      	lsrs	r2, r3, #24
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	3303      	adds	r3, #3
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4a0a      	ldr	r2, [pc, #40]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008d2a:	7912      	ldrb	r2, [r2, #4]
 8008d2c:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	3305      	adds	r3, #5
 8008d32:	4a08      	ldr	r2, [pc, #32]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008d34:	7952      	ldrb	r2, [r2, #5]
 8008d36:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	3306      	adds	r3, #6
 8008d3c:	4a05      	ldr	r2, [pc, #20]	@ (8008d54 <CDC_Control_FS+0x158>)
 8008d3e:	7992      	ldrb	r2, [r2, #6]
 8008d40:	701a      	strb	r2, [r3, #0]
     break;
 8008d42:	e000      	b.n	8008d46 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d44:	bf00      	nop
  }

  return (USBD_OK);
 8008d46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	2000009c 	.word	0x2000009c

08008d58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 8008d62:	4b0c      	ldr	r3, [pc, #48]	@ (8008d94 <CDC_Receive_FS+0x3c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d007      	beq.n	8008d7a <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d94 <CDC_Receive_FS+0x3c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	6812      	ldr	r2, [r2, #0]
 8008d72:	b292      	uxth	r2, r2
 8008d74:	4611      	mov	r1, r2
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	4806      	ldr	r0, [pc, #24]	@ (8008d98 <CDC_Receive_FS+0x40>)
 8008d7e:	f7fe fb3d 	bl	80073fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d82:	4805      	ldr	r0, [pc, #20]	@ (8008d98 <CDC_Receive_FS+0x40>)
 8008d84:	f7fe fb98 	bl	80074b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	2000097c 	.word	0x2000097c
 8008d98:	200002a0 	.word	0x200002a0

08008d9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008dac:	4b0d      	ldr	r3, [pc, #52]	@ (8008de4 <CDC_Transmit_FS+0x48>)
 8008dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008db2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e00b      	b.n	8008dda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dc2:	887b      	ldrh	r3, [r7, #2]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4806      	ldr	r0, [pc, #24]	@ (8008de4 <CDC_Transmit_FS+0x48>)
 8008dca:	f7fe faf5 	bl	80073b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008dce:	4805      	ldr	r0, [pc, #20]	@ (8008de4 <CDC_Transmit_FS+0x48>)
 8008dd0:	f7fe fb32 	bl	8007438 <USBD_CDC_TransmitPacket>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	200002a0 	.word	0x200002a0

08008de8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
	...

08008e0c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8008e14:	4a04      	ldr	r2, [pc, #16]	@ (8008e28 <CDC_AttachRxData+0x1c>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6013      	str	r3, [r2, #0]
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	2000097c 	.word	0x2000097c

08008e2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2212      	movs	r2, #18
 8008e3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e3e:	4b03      	ldr	r3, [pc, #12]	@ (8008e4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	200000d4 	.word	0x200000d4

08008e50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e62:	4b03      	ldr	r3, [pc, #12]	@ (8008e70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	200000e8 	.word	0x200000e8

08008e74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d105      	bne.n	8008e92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4907      	ldr	r1, [pc, #28]	@ (8008ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e8a:	4808      	ldr	r0, [pc, #32]	@ (8008eac <USBD_FS_ProductStrDescriptor+0x38>)
 8008e8c:	f7ff fd76 	bl	800897c <USBD_GetString>
 8008e90:	e004      	b.n	8008e9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	4904      	ldr	r1, [pc, #16]	@ (8008ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e96:	4805      	ldr	r0, [pc, #20]	@ (8008eac <USBD_FS_ProductStrDescriptor+0x38>)
 8008e98:	f7ff fd70 	bl	800897c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ea8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000980 	.word	0x20000980
 8008eac:	08009fd8 	.word	0x08009fd8

08008eb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	4904      	ldr	r1, [pc, #16]	@ (8008ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ec0:	4804      	ldr	r0, [pc, #16]	@ (8008ed4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ec2:	f7ff fd5b 	bl	800897c <USBD_GetString>
  return USBD_StrDesc;
 8008ec6:	4b02      	ldr	r3, [pc, #8]	@ (8008ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000980 	.word	0x20000980
 8008ed4:	08009ff0 	.word	0x08009ff0

08008ed8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	221a      	movs	r2, #26
 8008ee8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eea:	f000 f843 	bl	8008f74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008eee:	4b02      	ldr	r3, [pc, #8]	@ (8008ef8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	200000ec 	.word	0x200000ec

08008efc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	4907      	ldr	r1, [pc, #28]	@ (8008f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f12:	4808      	ldr	r0, [pc, #32]	@ (8008f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f14:	f7ff fd32 	bl	800897c <USBD_GetString>
 8008f18:	e004      	b.n	8008f24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	4904      	ldr	r1, [pc, #16]	@ (8008f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f1e:	4805      	ldr	r0, [pc, #20]	@ (8008f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f20:	f7ff fd2c 	bl	800897c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f24:	4b02      	ldr	r3, [pc, #8]	@ (8008f30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000980 	.word	0x20000980
 8008f34:	0800a004 	.word	0x0800a004

08008f38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d105      	bne.n	8008f56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	4907      	ldr	r1, [pc, #28]	@ (8008f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f4e:	4808      	ldr	r0, [pc, #32]	@ (8008f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f50:	f7ff fd14 	bl	800897c <USBD_GetString>
 8008f54:	e004      	b.n	8008f60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4904      	ldr	r1, [pc, #16]	@ (8008f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f5a:	4805      	ldr	r0, [pc, #20]	@ (8008f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f5c:	f7ff fd0e 	bl	800897c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f60:	4b02      	ldr	r3, [pc, #8]	@ (8008f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000980 	.word	0x20000980
 8008f70:	0800a010 	.word	0x0800a010

08008f74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fb8 <Get_SerialNum+0x44>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f80:	4b0e      	ldr	r3, [pc, #56]	@ (8008fbc <Get_SerialNum+0x48>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f86:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc0 <Get_SerialNum+0x4c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	4909      	ldr	r1, [pc, #36]	@ (8008fc4 <Get_SerialNum+0x50>)
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f814 	bl	8008fcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	4908      	ldr	r1, [pc, #32]	@ (8008fc8 <Get_SerialNum+0x54>)
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f000 f80f 	bl	8008fcc <IntToUnicode>
  }
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	1fff7a10 	.word	0x1fff7a10
 8008fbc:	1fff7a14 	.word	0x1fff7a14
 8008fc0:	1fff7a18 	.word	0x1fff7a18
 8008fc4:	200000ee 	.word	0x200000ee
 8008fc8:	200000fe 	.word	0x200000fe

08008fcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
 8008fe2:	e027      	b.n	8009034 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	0f1b      	lsrs	r3, r3, #28
 8008fe8:	2b09      	cmp	r3, #9
 8008fea:	d80b      	bhi.n	8009004 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	0f1b      	lsrs	r3, r3, #28
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	440b      	add	r3, r1
 8008ffc:	3230      	adds	r2, #48	@ 0x30
 8008ffe:	b2d2      	uxtb	r2, r2
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	e00a      	b.n	800901a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	0f1b      	lsrs	r3, r3, #28
 8009008:	b2da      	uxtb	r2, r3
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	4619      	mov	r1, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	440b      	add	r3, r1
 8009014:	3237      	adds	r2, #55	@ 0x37
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	3301      	adds	r3, #1
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	4413      	add	r3, r2
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	3301      	adds	r3, #1
 8009032:	75fb      	strb	r3, [r7, #23]
 8009034:	7dfa      	ldrb	r2, [r7, #23]
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	429a      	cmp	r2, r3
 800903a:	d3d3      	bcc.n	8008fe4 <IntToUnicode+0x18>
  }
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	@ 0x28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009054:	f107 0314 	add.w	r3, r7, #20
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	60da      	str	r2, [r3, #12]
 8009062:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800906c:	d13a      	bne.n	80090e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906e:	2300      	movs	r3, #0
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	4b1e      	ldr	r3, [pc, #120]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009076:	4a1d      	ldr	r2, [pc, #116]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 8009078:	f043 0301 	orr.w	r3, r3, #1
 800907c:	6313      	str	r3, [r2, #48]	@ 0x30
 800907e:	4b1b      	ldr	r3, [pc, #108]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800908a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800908e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009090:	2302      	movs	r3, #2
 8009092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009094:	2300      	movs	r3, #0
 8009096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009098:	2303      	movs	r3, #3
 800909a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800909c:	230a      	movs	r3, #10
 800909e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	4619      	mov	r1, r3
 80090a6:	4812      	ldr	r0, [pc, #72]	@ (80090f0 <HAL_PCD_MspInit+0xa4>)
 80090a8:	f7f9 fa32 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090ac:	4b0f      	ldr	r3, [pc, #60]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 80090ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b0:	4a0e      	ldr	r2, [pc, #56]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 80090b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	4b0b      	ldr	r3, [pc, #44]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 80090be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090c0:	4a0a      	ldr	r2, [pc, #40]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 80090c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80090c8:	4b08      	ldr	r3, [pc, #32]	@ (80090ec <HAL_PCD_MspInit+0xa0>)
 80090ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	2043      	movs	r0, #67	@ 0x43
 80090da:	f7f9 f95c 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090de:	2043      	movs	r0, #67	@ 0x43
 80090e0:	f7f9 f975 	bl	80023ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090e4:	bf00      	nop
 80090e6:	3728      	adds	r7, #40	@ 0x28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	40023800 	.word	0x40023800
 80090f0:	40020000 	.word	0x40020000

080090f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7fe fabd 	bl	800768a <USBD_LL_SetupStage>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	4619      	mov	r1, r3
 8009142:	f7fe faf7 	bl	8007734 <USBD_LL_DataOutStage>
}
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	3320      	adds	r3, #32
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	4619      	mov	r1, r3
 8009176:	f7fe fb99 	bl	80078ac <USBD_LL_DataInStage>
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fcdd 	bl	8007b50 <USBD_LL_SOF>
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	79db      	ldrb	r3, [r3, #7]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d001      	beq.n	80091b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091b2:	f7f8 f87e 	bl	80012b2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091bc:	7bfa      	ldrb	r2, [r7, #15]
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe fc81 	bl	8007ac8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe fc28 	bl	8007a22 <USBD_LL_Reset>
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fc7c 	bl	8007ae8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6812      	ldr	r2, [r2, #0]
 80091fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7adb      	ldrb	r3, [r3, #11]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009210:	4b04      	ldr	r3, [pc, #16]	@ (8009224 <HAL_PCD_SuspendCallback+0x48>)
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	4a03      	ldr	r2, [pc, #12]	@ (8009224 <HAL_PCD_SuspendCallback+0x48>)
 8009216:	f043 0306 	orr.w	r3, r3, #6
 800921a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	e000ed00 	.word	0xe000ed00

08009228 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fc72 	bl	8007b20 <USBD_LL_Resume>
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fcca 	bl	8007bf4 <USBD_LL_IsoOUTIncomplete>
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fc86 	bl	8007b90 <USBD_LL_IsoINIncomplete>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fcdc 	bl	8007c58 <USBD_LL_DevConnected>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fcd9 	bl	8007c6e <USBD_LL_DevDisconnected>
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d13c      	bne.n	800934e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092d4:	4a20      	ldr	r2, [pc, #128]	@ (8009358 <USBD_LL_Init+0x94>)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a1e      	ldr	r2, [pc, #120]	@ (8009358 <USBD_LL_Init+0x94>)
 80092e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009358 <USBD_LL_Init+0x94>)
 80092e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80092ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009358 <USBD_LL_Init+0x94>)
 80092ee:	2204      	movs	r2, #4
 80092f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092f2:	4b19      	ldr	r3, [pc, #100]	@ (8009358 <USBD_LL_Init+0x94>)
 80092f4:	2202      	movs	r2, #2
 80092f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092f8:	4b17      	ldr	r3, [pc, #92]	@ (8009358 <USBD_LL_Init+0x94>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092fe:	4b16      	ldr	r3, [pc, #88]	@ (8009358 <USBD_LL_Init+0x94>)
 8009300:	2202      	movs	r2, #2
 8009302:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009304:	4b14      	ldr	r3, [pc, #80]	@ (8009358 <USBD_LL_Init+0x94>)
 8009306:	2200      	movs	r2, #0
 8009308:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800930a:	4b13      	ldr	r3, [pc, #76]	@ (8009358 <USBD_LL_Init+0x94>)
 800930c:	2200      	movs	r2, #0
 800930e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009310:	4b11      	ldr	r3, [pc, #68]	@ (8009358 <USBD_LL_Init+0x94>)
 8009312:	2200      	movs	r2, #0
 8009314:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009316:	4b10      	ldr	r3, [pc, #64]	@ (8009358 <USBD_LL_Init+0x94>)
 8009318:	2200      	movs	r2, #0
 800931a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800931c:	4b0e      	ldr	r3, [pc, #56]	@ (8009358 <USBD_LL_Init+0x94>)
 800931e:	2200      	movs	r2, #0
 8009320:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009322:	480d      	ldr	r0, [pc, #52]	@ (8009358 <USBD_LL_Init+0x94>)
 8009324:	f7f9 faab 	bl	800287e <HAL_PCD_Init>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800932e:	f7f7 ffc0 	bl	80012b2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009332:	2180      	movs	r1, #128	@ 0x80
 8009334:	4808      	ldr	r0, [pc, #32]	@ (8009358 <USBD_LL_Init+0x94>)
 8009336:	f7fa fcd8 	bl	8003cea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800933a:	2240      	movs	r2, #64	@ 0x40
 800933c:	2100      	movs	r1, #0
 800933e:	4806      	ldr	r0, [pc, #24]	@ (8009358 <USBD_LL_Init+0x94>)
 8009340:	f7fa fc8c 	bl	8003c5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009344:	2280      	movs	r2, #128	@ 0x80
 8009346:	2101      	movs	r1, #1
 8009348:	4803      	ldr	r0, [pc, #12]	@ (8009358 <USBD_LL_Init+0x94>)
 800934a:	f7fa fc87 	bl	8003c5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20000b80 	.word	0x20000b80

0800935c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009372:	4618      	mov	r0, r3
 8009374:	f7f9 fb92 	bl	8002a9c <HAL_PCD_Start>
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f942 	bl	8009608 <USBD_Get_USB_Status>
 8009384:	4603      	mov	r3, r0
 8009386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009388:	7bbb      	ldrb	r3, [r7, #14]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b084      	sub	sp, #16
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	4608      	mov	r0, r1
 800939c:	4611      	mov	r1, r2
 800939e:	461a      	mov	r2, r3
 80093a0:	4603      	mov	r3, r0
 80093a2:	70fb      	strb	r3, [r7, #3]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70bb      	strb	r3, [r7, #2]
 80093a8:	4613      	mov	r3, r2
 80093aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093ba:	78bb      	ldrb	r3, [r7, #2]
 80093bc:	883a      	ldrh	r2, [r7, #0]
 80093be:	78f9      	ldrb	r1, [r7, #3]
 80093c0:	f7fa f866 	bl	8003490 <HAL_PCD_EP_Open>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f91c 	bl	8009608 <USBD_Get_USB_Status>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fa f8b1 	bl	8003564 <HAL_PCD_EP_Close>
 8009402:	4603      	mov	r3, r0
 8009404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 f8fd 	bl	8009608 <USBD_Get_USB_Status>
 800940e:	4603      	mov	r3, r0
 8009410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009412:	7bbb      	ldrb	r3, [r7, #14]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	4611      	mov	r1, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f7fa f969 	bl	8003712 <HAL_PCD_EP_SetStall>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f8de 	bl	8009608 <USBD_Get_USB_Status>
 800944c:	4603      	mov	r3, r0
 800944e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009450:	7bbb      	ldrb	r3, [r7, #14]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	460b      	mov	r3, r1
 8009464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946a:	2300      	movs	r3, #0
 800946c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009474:	78fa      	ldrb	r2, [r7, #3]
 8009476:	4611      	mov	r1, r2
 8009478:	4618      	mov	r0, r3
 800947a:	f7fa f9ad 	bl	80037d8 <HAL_PCD_EP_ClrStall>
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 f8bf 	bl	8009608 <USBD_Get_USB_Status>
 800948a:	4603      	mov	r3, r0
 800948c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	da0b      	bge.n	80094cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094ba:	68f9      	ldr	r1, [r7, #12]
 80094bc:	4613      	mov	r3, r2
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	4413      	add	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	3316      	adds	r3, #22
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	e00b      	b.n	80094e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	4613      	mov	r3, r2
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80094e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f7f9 ff9a 	bl	8003448 <HAL_PCD_SetAddress>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 f874 	bl	8009608 <USBD_Get_USB_Status>
 8009520:	4603      	mov	r3, r0
 8009522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009524:	7bbb      	ldrb	r3, [r7, #14]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b086      	sub	sp, #24
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	460b      	mov	r3, r1
 800953c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800954c:	7af9      	ldrb	r1, [r7, #11]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	f7fa f8a4 	bl	800369e <HAL_PCD_EP_Transmit>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 f853 	bl	8009608 <USBD_Get_USB_Status>
 8009562:	4603      	mov	r3, r0
 8009564:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009566:	7dbb      	ldrb	r3, [r7, #22]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	607a      	str	r2, [r7, #4]
 800957a:	603b      	str	r3, [r7, #0]
 800957c:	460b      	mov	r3, r1
 800957e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800958e:	7af9      	ldrb	r1, [r7, #11]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	f7fa f830 	bl	80035f8 <HAL_PCD_EP_Receive>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f832 	bl	8009608 <USBD_Get_USB_Status>
 80095a4:	4603      	mov	r3, r0
 80095a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095c4:	78fa      	ldrb	r2, [r7, #3]
 80095c6:	4611      	mov	r1, r2
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fa f850 	bl	800366e <HAL_PCD_EP_GetRxCount>
 80095ce:	4603      	mov	r3, r0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095e0:	4b03      	ldr	r3, [pc, #12]	@ (80095f0 <USBD_static_malloc+0x18>)
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20001064 	.word	0x20001064

080095f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]

}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	2b03      	cmp	r3, #3
 800961a:	d817      	bhi.n	800964c <USBD_Get_USB_Status+0x44>
 800961c:	a201      	add	r2, pc, #4	@ (adr r2, 8009624 <USBD_Get_USB_Status+0x1c>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	08009635 	.word	0x08009635
 8009628:	0800963b 	.word	0x0800963b
 800962c:	08009641 	.word	0x08009641
 8009630:	08009647 	.word	0x08009647
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
    break;
 8009638:	e00b      	b.n	8009652 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800963a:	2303      	movs	r3, #3
 800963c:	73fb      	strb	r3, [r7, #15]
    break;
 800963e:	e008      	b.n	8009652 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009640:	2301      	movs	r3, #1
 8009642:	73fb      	strb	r3, [r7, #15]
    break;
 8009644:	e005      	b.n	8009652 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009646:	2303      	movs	r3, #3
 8009648:	73fb      	strb	r3, [r7, #15]
    break;
 800964a:	e002      	b.n	8009652 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800964c:	2303      	movs	r3, #3
 800964e:	73fb      	strb	r3, [r7, #15]
    break;
 8009650:	bf00      	nop
  }
  return usb_status;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <malloc>:
 8009660:	4b02      	ldr	r3, [pc, #8]	@ (800966c <malloc+0xc>)
 8009662:	4601      	mov	r1, r0
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	f000 b825 	b.w	80096b4 <_malloc_r>
 800966a:	bf00      	nop
 800966c:	20000108 	.word	0x20000108

08009670 <sbrk_aligned>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	4e0f      	ldr	r6, [pc, #60]	@ (80096b0 <sbrk_aligned+0x40>)
 8009674:	460c      	mov	r4, r1
 8009676:	6831      	ldr	r1, [r6, #0]
 8009678:	4605      	mov	r5, r0
 800967a:	b911      	cbnz	r1, 8009682 <sbrk_aligned+0x12>
 800967c:	f000 f8d0 	bl	8009820 <_sbrk_r>
 8009680:	6030      	str	r0, [r6, #0]
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	f000 f8cb 	bl	8009820 <_sbrk_r>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	d103      	bne.n	8009696 <sbrk_aligned+0x26>
 800968e:	f04f 34ff 	mov.w	r4, #4294967295
 8009692:	4620      	mov	r0, r4
 8009694:	bd70      	pop	{r4, r5, r6, pc}
 8009696:	1cc4      	adds	r4, r0, #3
 8009698:	f024 0403 	bic.w	r4, r4, #3
 800969c:	42a0      	cmp	r0, r4
 800969e:	d0f8      	beq.n	8009692 <sbrk_aligned+0x22>
 80096a0:	1a21      	subs	r1, r4, r0
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f8bc 	bl	8009820 <_sbrk_r>
 80096a8:	3001      	adds	r0, #1
 80096aa:	d1f2      	bne.n	8009692 <sbrk_aligned+0x22>
 80096ac:	e7ef      	b.n	800968e <sbrk_aligned+0x1e>
 80096ae:	bf00      	nop
 80096b0:	20001284 	.word	0x20001284

080096b4 <_malloc_r>:
 80096b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b8:	1ccd      	adds	r5, r1, #3
 80096ba:	f025 0503 	bic.w	r5, r5, #3
 80096be:	3508      	adds	r5, #8
 80096c0:	2d0c      	cmp	r5, #12
 80096c2:	bf38      	it	cc
 80096c4:	250c      	movcc	r5, #12
 80096c6:	2d00      	cmp	r5, #0
 80096c8:	4606      	mov	r6, r0
 80096ca:	db01      	blt.n	80096d0 <_malloc_r+0x1c>
 80096cc:	42a9      	cmp	r1, r5
 80096ce:	d904      	bls.n	80096da <_malloc_r+0x26>
 80096d0:	230c      	movs	r3, #12
 80096d2:	6033      	str	r3, [r6, #0]
 80096d4:	2000      	movs	r0, #0
 80096d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097b0 <_malloc_r+0xfc>
 80096de:	f000 f869 	bl	80097b4 <__malloc_lock>
 80096e2:	f8d8 3000 	ldr.w	r3, [r8]
 80096e6:	461c      	mov	r4, r3
 80096e8:	bb44      	cbnz	r4, 800973c <_malloc_r+0x88>
 80096ea:	4629      	mov	r1, r5
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7ff ffbf 	bl	8009670 <sbrk_aligned>
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	4604      	mov	r4, r0
 80096f6:	d158      	bne.n	80097aa <_malloc_r+0xf6>
 80096f8:	f8d8 4000 	ldr.w	r4, [r8]
 80096fc:	4627      	mov	r7, r4
 80096fe:	2f00      	cmp	r7, #0
 8009700:	d143      	bne.n	800978a <_malloc_r+0xd6>
 8009702:	2c00      	cmp	r4, #0
 8009704:	d04b      	beq.n	800979e <_malloc_r+0xea>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	4639      	mov	r1, r7
 800970a:	4630      	mov	r0, r6
 800970c:	eb04 0903 	add.w	r9, r4, r3
 8009710:	f000 f886 	bl	8009820 <_sbrk_r>
 8009714:	4581      	cmp	r9, r0
 8009716:	d142      	bne.n	800979e <_malloc_r+0xea>
 8009718:	6821      	ldr	r1, [r4, #0]
 800971a:	1a6d      	subs	r5, r5, r1
 800971c:	4629      	mov	r1, r5
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff ffa6 	bl	8009670 <sbrk_aligned>
 8009724:	3001      	adds	r0, #1
 8009726:	d03a      	beq.n	800979e <_malloc_r+0xea>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	442b      	add	r3, r5
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	f8d8 3000 	ldr.w	r3, [r8]
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	bb62      	cbnz	r2, 8009790 <_malloc_r+0xdc>
 8009736:	f8c8 7000 	str.w	r7, [r8]
 800973a:	e00f      	b.n	800975c <_malloc_r+0xa8>
 800973c:	6822      	ldr	r2, [r4, #0]
 800973e:	1b52      	subs	r2, r2, r5
 8009740:	d420      	bmi.n	8009784 <_malloc_r+0xd0>
 8009742:	2a0b      	cmp	r2, #11
 8009744:	d917      	bls.n	8009776 <_malloc_r+0xc2>
 8009746:	1961      	adds	r1, r4, r5
 8009748:	42a3      	cmp	r3, r4
 800974a:	6025      	str	r5, [r4, #0]
 800974c:	bf18      	it	ne
 800974e:	6059      	strne	r1, [r3, #4]
 8009750:	6863      	ldr	r3, [r4, #4]
 8009752:	bf08      	it	eq
 8009754:	f8c8 1000 	streq.w	r1, [r8]
 8009758:	5162      	str	r2, [r4, r5]
 800975a:	604b      	str	r3, [r1, #4]
 800975c:	4630      	mov	r0, r6
 800975e:	f000 f82f 	bl	80097c0 <__malloc_unlock>
 8009762:	f104 000b 	add.w	r0, r4, #11
 8009766:	1d23      	adds	r3, r4, #4
 8009768:	f020 0007 	bic.w	r0, r0, #7
 800976c:	1ac2      	subs	r2, r0, r3
 800976e:	bf1c      	itt	ne
 8009770:	1a1b      	subne	r3, r3, r0
 8009772:	50a3      	strne	r3, [r4, r2]
 8009774:	e7af      	b.n	80096d6 <_malloc_r+0x22>
 8009776:	6862      	ldr	r2, [r4, #4]
 8009778:	42a3      	cmp	r3, r4
 800977a:	bf0c      	ite	eq
 800977c:	f8c8 2000 	streq.w	r2, [r8]
 8009780:	605a      	strne	r2, [r3, #4]
 8009782:	e7eb      	b.n	800975c <_malloc_r+0xa8>
 8009784:	4623      	mov	r3, r4
 8009786:	6864      	ldr	r4, [r4, #4]
 8009788:	e7ae      	b.n	80096e8 <_malloc_r+0x34>
 800978a:	463c      	mov	r4, r7
 800978c:	687f      	ldr	r7, [r7, #4]
 800978e:	e7b6      	b.n	80096fe <_malloc_r+0x4a>
 8009790:	461a      	mov	r2, r3
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	42a3      	cmp	r3, r4
 8009796:	d1fb      	bne.n	8009790 <_malloc_r+0xdc>
 8009798:	2300      	movs	r3, #0
 800979a:	6053      	str	r3, [r2, #4]
 800979c:	e7de      	b.n	800975c <_malloc_r+0xa8>
 800979e:	230c      	movs	r3, #12
 80097a0:	6033      	str	r3, [r6, #0]
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 f80c 	bl	80097c0 <__malloc_unlock>
 80097a8:	e794      	b.n	80096d4 <_malloc_r+0x20>
 80097aa:	6005      	str	r5, [r0, #0]
 80097ac:	e7d6      	b.n	800975c <_malloc_r+0xa8>
 80097ae:	bf00      	nop
 80097b0:	20001288 	.word	0x20001288

080097b4 <__malloc_lock>:
 80097b4:	4801      	ldr	r0, [pc, #4]	@ (80097bc <__malloc_lock+0x8>)
 80097b6:	f000 b86d 	b.w	8009894 <__retarget_lock_acquire_recursive>
 80097ba:	bf00      	nop
 80097bc:	200013c8 	.word	0x200013c8

080097c0 <__malloc_unlock>:
 80097c0:	4801      	ldr	r0, [pc, #4]	@ (80097c8 <__malloc_unlock+0x8>)
 80097c2:	f000 b868 	b.w	8009896 <__retarget_lock_release_recursive>
 80097c6:	bf00      	nop
 80097c8:	200013c8 	.word	0x200013c8

080097cc <siprintf>:
 80097cc:	b40e      	push	{r1, r2, r3}
 80097ce:	b510      	push	{r4, lr}
 80097d0:	b09d      	sub	sp, #116	@ 0x74
 80097d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80097d4:	9002      	str	r0, [sp, #8]
 80097d6:	9006      	str	r0, [sp, #24]
 80097d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097dc:	480a      	ldr	r0, [pc, #40]	@ (8009808 <siprintf+0x3c>)
 80097de:	9107      	str	r1, [sp, #28]
 80097e0:	9104      	str	r1, [sp, #16]
 80097e2:	490a      	ldr	r1, [pc, #40]	@ (800980c <siprintf+0x40>)
 80097e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e8:	9105      	str	r1, [sp, #20]
 80097ea:	2400      	movs	r4, #0
 80097ec:	a902      	add	r1, sp, #8
 80097ee:	6800      	ldr	r0, [r0, #0]
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80097f4:	f000 f8f6 	bl	80099e4 <_svfiprintf_r>
 80097f8:	9b02      	ldr	r3, [sp, #8]
 80097fa:	701c      	strb	r4, [r3, #0]
 80097fc:	b01d      	add	sp, #116	@ 0x74
 80097fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009802:	b003      	add	sp, #12
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000108 	.word	0x20000108
 800980c:	ffff0208 	.word	0xffff0208

08009810 <memset>:
 8009810:	4402      	add	r2, r0
 8009812:	4603      	mov	r3, r0
 8009814:	4293      	cmp	r3, r2
 8009816:	d100      	bne.n	800981a <memset+0xa>
 8009818:	4770      	bx	lr
 800981a:	f803 1b01 	strb.w	r1, [r3], #1
 800981e:	e7f9      	b.n	8009814 <memset+0x4>

08009820 <_sbrk_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d06      	ldr	r5, [pc, #24]	@ (800983c <_sbrk_r+0x1c>)
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	602b      	str	r3, [r5, #0]
 800982c:	f7f7 feb0 	bl	8001590 <_sbrk>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_sbrk_r+0x1a>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_sbrk_r+0x1a>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	200013c4 	.word	0x200013c4

08009840 <__errno>:
 8009840:	4b01      	ldr	r3, [pc, #4]	@ (8009848 <__errno+0x8>)
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000108 	.word	0x20000108

0800984c <__libc_init_array>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	4d0d      	ldr	r5, [pc, #52]	@ (8009884 <__libc_init_array+0x38>)
 8009850:	4c0d      	ldr	r4, [pc, #52]	@ (8009888 <__libc_init_array+0x3c>)
 8009852:	1b64      	subs	r4, r4, r5
 8009854:	10a4      	asrs	r4, r4, #2
 8009856:	2600      	movs	r6, #0
 8009858:	42a6      	cmp	r6, r4
 800985a:	d109      	bne.n	8009870 <__libc_init_array+0x24>
 800985c:	4d0b      	ldr	r5, [pc, #44]	@ (800988c <__libc_init_array+0x40>)
 800985e:	4c0c      	ldr	r4, [pc, #48]	@ (8009890 <__libc_init_array+0x44>)
 8009860:	f000 fba6 	bl	8009fb0 <_init>
 8009864:	1b64      	subs	r4, r4, r5
 8009866:	10a4      	asrs	r4, r4, #2
 8009868:	2600      	movs	r6, #0
 800986a:	42a6      	cmp	r6, r4
 800986c:	d105      	bne.n	800987a <__libc_init_array+0x2e>
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	f855 3b04 	ldr.w	r3, [r5], #4
 8009874:	4798      	blx	r3
 8009876:	3601      	adds	r6, #1
 8009878:	e7ee      	b.n	8009858 <__libc_init_array+0xc>
 800987a:	f855 3b04 	ldr.w	r3, [r5], #4
 800987e:	4798      	blx	r3
 8009880:	3601      	adds	r6, #1
 8009882:	e7f2      	b.n	800986a <__libc_init_array+0x1e>
 8009884:	0800a06c 	.word	0x0800a06c
 8009888:	0800a06c 	.word	0x0800a06c
 800988c:	0800a06c 	.word	0x0800a06c
 8009890:	0800a070 	.word	0x0800a070

08009894 <__retarget_lock_acquire_recursive>:
 8009894:	4770      	bx	lr

08009896 <__retarget_lock_release_recursive>:
 8009896:	4770      	bx	lr

08009898 <_free_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4605      	mov	r5, r0
 800989c:	2900      	cmp	r1, #0
 800989e:	d041      	beq.n	8009924 <_free_r+0x8c>
 80098a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a4:	1f0c      	subs	r4, r1, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfb8      	it	lt
 80098aa:	18e4      	addlt	r4, r4, r3
 80098ac:	f7ff ff82 	bl	80097b4 <__malloc_lock>
 80098b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009928 <_free_r+0x90>)
 80098b2:	6813      	ldr	r3, [r2, #0]
 80098b4:	b933      	cbnz	r3, 80098c4 <_free_r+0x2c>
 80098b6:	6063      	str	r3, [r4, #4]
 80098b8:	6014      	str	r4, [r2, #0]
 80098ba:	4628      	mov	r0, r5
 80098bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c0:	f7ff bf7e 	b.w	80097c0 <__malloc_unlock>
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d908      	bls.n	80098da <_free_r+0x42>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	1821      	adds	r1, r4, r0
 80098cc:	428b      	cmp	r3, r1
 80098ce:	bf01      	itttt	eq
 80098d0:	6819      	ldreq	r1, [r3, #0]
 80098d2:	685b      	ldreq	r3, [r3, #4]
 80098d4:	1809      	addeq	r1, r1, r0
 80098d6:	6021      	streq	r1, [r4, #0]
 80098d8:	e7ed      	b.n	80098b6 <_free_r+0x1e>
 80098da:	461a      	mov	r2, r3
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	b10b      	cbz	r3, 80098e4 <_free_r+0x4c>
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d9fa      	bls.n	80098da <_free_r+0x42>
 80098e4:	6811      	ldr	r1, [r2, #0]
 80098e6:	1850      	adds	r0, r2, r1
 80098e8:	42a0      	cmp	r0, r4
 80098ea:	d10b      	bne.n	8009904 <_free_r+0x6c>
 80098ec:	6820      	ldr	r0, [r4, #0]
 80098ee:	4401      	add	r1, r0
 80098f0:	1850      	adds	r0, r2, r1
 80098f2:	4283      	cmp	r3, r0
 80098f4:	6011      	str	r1, [r2, #0]
 80098f6:	d1e0      	bne.n	80098ba <_free_r+0x22>
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	6053      	str	r3, [r2, #4]
 80098fe:	4408      	add	r0, r1
 8009900:	6010      	str	r0, [r2, #0]
 8009902:	e7da      	b.n	80098ba <_free_r+0x22>
 8009904:	d902      	bls.n	800990c <_free_r+0x74>
 8009906:	230c      	movs	r3, #12
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	e7d6      	b.n	80098ba <_free_r+0x22>
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	1821      	adds	r1, r4, r0
 8009910:	428b      	cmp	r3, r1
 8009912:	bf04      	itt	eq
 8009914:	6819      	ldreq	r1, [r3, #0]
 8009916:	685b      	ldreq	r3, [r3, #4]
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	bf04      	itt	eq
 800991c:	1809      	addeq	r1, r1, r0
 800991e:	6021      	streq	r1, [r4, #0]
 8009920:	6054      	str	r4, [r2, #4]
 8009922:	e7ca      	b.n	80098ba <_free_r+0x22>
 8009924:	bd38      	pop	{r3, r4, r5, pc}
 8009926:	bf00      	nop
 8009928:	20001288 	.word	0x20001288

0800992c <__ssputs_r>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	688e      	ldr	r6, [r1, #8]
 8009932:	461f      	mov	r7, r3
 8009934:	42be      	cmp	r6, r7
 8009936:	680b      	ldr	r3, [r1, #0]
 8009938:	4682      	mov	sl, r0
 800993a:	460c      	mov	r4, r1
 800993c:	4690      	mov	r8, r2
 800993e:	d82d      	bhi.n	800999c <__ssputs_r+0x70>
 8009940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009948:	d026      	beq.n	8009998 <__ssputs_r+0x6c>
 800994a:	6965      	ldr	r5, [r4, #20]
 800994c:	6909      	ldr	r1, [r1, #16]
 800994e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009952:	eba3 0901 	sub.w	r9, r3, r1
 8009956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800995a:	1c7b      	adds	r3, r7, #1
 800995c:	444b      	add	r3, r9
 800995e:	106d      	asrs	r5, r5, #1
 8009960:	429d      	cmp	r5, r3
 8009962:	bf38      	it	cc
 8009964:	461d      	movcc	r5, r3
 8009966:	0553      	lsls	r3, r2, #21
 8009968:	d527      	bpl.n	80099ba <__ssputs_r+0x8e>
 800996a:	4629      	mov	r1, r5
 800996c:	f7ff fea2 	bl	80096b4 <_malloc_r>
 8009970:	4606      	mov	r6, r0
 8009972:	b360      	cbz	r0, 80099ce <__ssputs_r+0xa2>
 8009974:	6921      	ldr	r1, [r4, #16]
 8009976:	464a      	mov	r2, r9
 8009978:	f000 fad6 	bl	8009f28 <memcpy>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	6126      	str	r6, [r4, #16]
 800998a:	6165      	str	r5, [r4, #20]
 800998c:	444e      	add	r6, r9
 800998e:	eba5 0509 	sub.w	r5, r5, r9
 8009992:	6026      	str	r6, [r4, #0]
 8009994:	60a5      	str	r5, [r4, #8]
 8009996:	463e      	mov	r6, r7
 8009998:	42be      	cmp	r6, r7
 800999a:	d900      	bls.n	800999e <__ssputs_r+0x72>
 800999c:	463e      	mov	r6, r7
 800999e:	6820      	ldr	r0, [r4, #0]
 80099a0:	4632      	mov	r2, r6
 80099a2:	4641      	mov	r1, r8
 80099a4:	f000 faa6 	bl	8009ef4 <memmove>
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	1b9b      	subs	r3, r3, r6
 80099ac:	60a3      	str	r3, [r4, #8]
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	4433      	add	r3, r6
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	2000      	movs	r0, #0
 80099b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ba:	462a      	mov	r2, r5
 80099bc:	f000 fac2 	bl	8009f44 <_realloc_r>
 80099c0:	4606      	mov	r6, r0
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d1e0      	bne.n	8009988 <__ssputs_r+0x5c>
 80099c6:	6921      	ldr	r1, [r4, #16]
 80099c8:	4650      	mov	r0, sl
 80099ca:	f7ff ff65 	bl	8009898 <_free_r>
 80099ce:	230c      	movs	r3, #12
 80099d0:	f8ca 3000 	str.w	r3, [sl]
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	f04f 30ff 	mov.w	r0, #4294967295
 80099e0:	e7e9      	b.n	80099b6 <__ssputs_r+0x8a>
	...

080099e4 <_svfiprintf_r>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4698      	mov	r8, r3
 80099ea:	898b      	ldrh	r3, [r1, #12]
 80099ec:	061b      	lsls	r3, r3, #24
 80099ee:	b09d      	sub	sp, #116	@ 0x74
 80099f0:	4607      	mov	r7, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	4614      	mov	r4, r2
 80099f6:	d510      	bpl.n	8009a1a <_svfiprintf_r+0x36>
 80099f8:	690b      	ldr	r3, [r1, #16]
 80099fa:	b973      	cbnz	r3, 8009a1a <_svfiprintf_r+0x36>
 80099fc:	2140      	movs	r1, #64	@ 0x40
 80099fe:	f7ff fe59 	bl	80096b4 <_malloc_r>
 8009a02:	6028      	str	r0, [r5, #0]
 8009a04:	6128      	str	r0, [r5, #16]
 8009a06:	b930      	cbnz	r0, 8009a16 <_svfiprintf_r+0x32>
 8009a08:	230c      	movs	r3, #12
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	b01d      	add	sp, #116	@ 0x74
 8009a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a16:	2340      	movs	r3, #64	@ 0x40
 8009a18:	616b      	str	r3, [r5, #20]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a1e:	2320      	movs	r3, #32
 8009a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a28:	2330      	movs	r3, #48	@ 0x30
 8009a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009bc8 <_svfiprintf_r+0x1e4>
 8009a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a32:	f04f 0901 	mov.w	r9, #1
 8009a36:	4623      	mov	r3, r4
 8009a38:	469a      	mov	sl, r3
 8009a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a3e:	b10a      	cbz	r2, 8009a44 <_svfiprintf_r+0x60>
 8009a40:	2a25      	cmp	r2, #37	@ 0x25
 8009a42:	d1f9      	bne.n	8009a38 <_svfiprintf_r+0x54>
 8009a44:	ebba 0b04 	subs.w	fp, sl, r4
 8009a48:	d00b      	beq.n	8009a62 <_svfiprintf_r+0x7e>
 8009a4a:	465b      	mov	r3, fp
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ff6b 	bl	800992c <__ssputs_r>
 8009a56:	3001      	adds	r0, #1
 8009a58:	f000 80a7 	beq.w	8009baa <_svfiprintf_r+0x1c6>
 8009a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a5e:	445a      	add	r2, fp
 8009a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a62:	f89a 3000 	ldrb.w	r3, [sl]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 809f 	beq.w	8009baa <_svfiprintf_r+0x1c6>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a76:	f10a 0a01 	add.w	sl, sl, #1
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	9307      	str	r3, [sp, #28]
 8009a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a84:	4654      	mov	r4, sl
 8009a86:	2205      	movs	r2, #5
 8009a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8c:	484e      	ldr	r0, [pc, #312]	@ (8009bc8 <_svfiprintf_r+0x1e4>)
 8009a8e:	f7f6 fba7 	bl	80001e0 <memchr>
 8009a92:	9a04      	ldr	r2, [sp, #16]
 8009a94:	b9d8      	cbnz	r0, 8009ace <_svfiprintf_r+0xea>
 8009a96:	06d0      	lsls	r0, r2, #27
 8009a98:	bf44      	itt	mi
 8009a9a:	2320      	movmi	r3, #32
 8009a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aa0:	0711      	lsls	r1, r2, #28
 8009aa2:	bf44      	itt	mi
 8009aa4:	232b      	movmi	r3, #43	@ 0x2b
 8009aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8009aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ab0:	d015      	beq.n	8009ade <_svfiprintf_r+0xfa>
 8009ab2:	9a07      	ldr	r2, [sp, #28]
 8009ab4:	4654      	mov	r4, sl
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f04f 0c0a 	mov.w	ip, #10
 8009abc:	4621      	mov	r1, r4
 8009abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ac2:	3b30      	subs	r3, #48	@ 0x30
 8009ac4:	2b09      	cmp	r3, #9
 8009ac6:	d94b      	bls.n	8009b60 <_svfiprintf_r+0x17c>
 8009ac8:	b1b0      	cbz	r0, 8009af8 <_svfiprintf_r+0x114>
 8009aca:	9207      	str	r2, [sp, #28]
 8009acc:	e014      	b.n	8009af8 <_svfiprintf_r+0x114>
 8009ace:	eba0 0308 	sub.w	r3, r0, r8
 8009ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	46a2      	mov	sl, r4
 8009adc:	e7d2      	b.n	8009a84 <_svfiprintf_r+0xa0>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	1d19      	adds	r1, r3, #4
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	9103      	str	r1, [sp, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	bfbb      	ittet	lt
 8009aea:	425b      	neglt	r3, r3
 8009aec:	f042 0202 	orrlt.w	r2, r2, #2
 8009af0:	9307      	strge	r3, [sp, #28]
 8009af2:	9307      	strlt	r3, [sp, #28]
 8009af4:	bfb8      	it	lt
 8009af6:	9204      	strlt	r2, [sp, #16]
 8009af8:	7823      	ldrb	r3, [r4, #0]
 8009afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8009afc:	d10a      	bne.n	8009b14 <_svfiprintf_r+0x130>
 8009afe:	7863      	ldrb	r3, [r4, #1]
 8009b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b02:	d132      	bne.n	8009b6a <_svfiprintf_r+0x186>
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	1d1a      	adds	r2, r3, #4
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	9203      	str	r2, [sp, #12]
 8009b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b10:	3402      	adds	r4, #2
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009bd8 <_svfiprintf_r+0x1f4>
 8009b18:	7821      	ldrb	r1, [r4, #0]
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	f7f6 fb5f 	bl	80001e0 <memchr>
 8009b22:	b138      	cbz	r0, 8009b34 <_svfiprintf_r+0x150>
 8009b24:	9b04      	ldr	r3, [sp, #16]
 8009b26:	eba0 000a 	sub.w	r0, r0, sl
 8009b2a:	2240      	movs	r2, #64	@ 0x40
 8009b2c:	4082      	lsls	r2, r0
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	3401      	adds	r4, #1
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b38:	4824      	ldr	r0, [pc, #144]	@ (8009bcc <_svfiprintf_r+0x1e8>)
 8009b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b3e:	2206      	movs	r2, #6
 8009b40:	f7f6 fb4e 	bl	80001e0 <memchr>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d036      	beq.n	8009bb6 <_svfiprintf_r+0x1d2>
 8009b48:	4b21      	ldr	r3, [pc, #132]	@ (8009bd0 <_svfiprintf_r+0x1ec>)
 8009b4a:	bb1b      	cbnz	r3, 8009b94 <_svfiprintf_r+0x1b0>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	3307      	adds	r3, #7
 8009b50:	f023 0307 	bic.w	r3, r3, #7
 8009b54:	3308      	adds	r3, #8
 8009b56:	9303      	str	r3, [sp, #12]
 8009b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5a:	4433      	add	r3, r6
 8009b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b5e:	e76a      	b.n	8009a36 <_svfiprintf_r+0x52>
 8009b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b64:	460c      	mov	r4, r1
 8009b66:	2001      	movs	r0, #1
 8009b68:	e7a8      	b.n	8009abc <_svfiprintf_r+0xd8>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	3401      	adds	r4, #1
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	4619      	mov	r1, r3
 8009b72:	f04f 0c0a 	mov.w	ip, #10
 8009b76:	4620      	mov	r0, r4
 8009b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7c:	3a30      	subs	r2, #48	@ 0x30
 8009b7e:	2a09      	cmp	r2, #9
 8009b80:	d903      	bls.n	8009b8a <_svfiprintf_r+0x1a6>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0c6      	beq.n	8009b14 <_svfiprintf_r+0x130>
 8009b86:	9105      	str	r1, [sp, #20]
 8009b88:	e7c4      	b.n	8009b14 <_svfiprintf_r+0x130>
 8009b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8e:	4604      	mov	r4, r0
 8009b90:	2301      	movs	r3, #1
 8009b92:	e7f0      	b.n	8009b76 <_svfiprintf_r+0x192>
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd4 <_svfiprintf_r+0x1f0>)
 8009b9c:	a904      	add	r1, sp, #16
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f3af 8000 	nop.w
 8009ba4:	1c42      	adds	r2, r0, #1
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	d1d6      	bne.n	8009b58 <_svfiprintf_r+0x174>
 8009baa:	89ab      	ldrh	r3, [r5, #12]
 8009bac:	065b      	lsls	r3, r3, #25
 8009bae:	f53f af2d 	bmi.w	8009a0c <_svfiprintf_r+0x28>
 8009bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb4:	e72c      	b.n	8009a10 <_svfiprintf_r+0x2c>
 8009bb6:	ab03      	add	r3, sp, #12
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	462a      	mov	r2, r5
 8009bbc:	4b05      	ldr	r3, [pc, #20]	@ (8009bd4 <_svfiprintf_r+0x1f0>)
 8009bbe:	a904      	add	r1, sp, #16
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f000 f879 	bl	8009cb8 <_printf_i>
 8009bc6:	e7ed      	b.n	8009ba4 <_svfiprintf_r+0x1c0>
 8009bc8:	0800a030 	.word	0x0800a030
 8009bcc:	0800a03a 	.word	0x0800a03a
 8009bd0:	00000000 	.word	0x00000000
 8009bd4:	0800992d 	.word	0x0800992d
 8009bd8:	0800a036 	.word	0x0800a036

08009bdc <_printf_common>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	4616      	mov	r6, r2
 8009be2:	4698      	mov	r8, r3
 8009be4:	688a      	ldr	r2, [r1, #8]
 8009be6:	690b      	ldr	r3, [r1, #16]
 8009be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bec:	4293      	cmp	r3, r2
 8009bee:	bfb8      	it	lt
 8009bf0:	4613      	movlt	r3, r2
 8009bf2:	6033      	str	r3, [r6, #0]
 8009bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	b10a      	cbz	r2, 8009c02 <_printf_common+0x26>
 8009bfe:	3301      	adds	r3, #1
 8009c00:	6033      	str	r3, [r6, #0]
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	0699      	lsls	r1, r3, #26
 8009c06:	bf42      	ittt	mi
 8009c08:	6833      	ldrmi	r3, [r6, #0]
 8009c0a:	3302      	addmi	r3, #2
 8009c0c:	6033      	strmi	r3, [r6, #0]
 8009c0e:	6825      	ldr	r5, [r4, #0]
 8009c10:	f015 0506 	ands.w	r5, r5, #6
 8009c14:	d106      	bne.n	8009c24 <_printf_common+0x48>
 8009c16:	f104 0a19 	add.w	sl, r4, #25
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	6832      	ldr	r2, [r6, #0]
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	42ab      	cmp	r3, r5
 8009c22:	dc26      	bgt.n	8009c72 <_printf_common+0x96>
 8009c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	3b00      	subs	r3, #0
 8009c2c:	bf18      	it	ne
 8009c2e:	2301      	movne	r3, #1
 8009c30:	0692      	lsls	r2, r2, #26
 8009c32:	d42b      	bmi.n	8009c8c <_printf_common+0xb0>
 8009c34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c38:	4641      	mov	r1, r8
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	47c8      	blx	r9
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d01e      	beq.n	8009c80 <_printf_common+0xa4>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	6922      	ldr	r2, [r4, #16]
 8009c46:	f003 0306 	and.w	r3, r3, #6
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	bf02      	ittt	eq
 8009c4e:	68e5      	ldreq	r5, [r4, #12]
 8009c50:	6833      	ldreq	r3, [r6, #0]
 8009c52:	1aed      	subeq	r5, r5, r3
 8009c54:	68a3      	ldr	r3, [r4, #8]
 8009c56:	bf0c      	ite	eq
 8009c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c5c:	2500      	movne	r5, #0
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	bfc4      	itt	gt
 8009c62:	1a9b      	subgt	r3, r3, r2
 8009c64:	18ed      	addgt	r5, r5, r3
 8009c66:	2600      	movs	r6, #0
 8009c68:	341a      	adds	r4, #26
 8009c6a:	42b5      	cmp	r5, r6
 8009c6c:	d11a      	bne.n	8009ca4 <_printf_common+0xc8>
 8009c6e:	2000      	movs	r0, #0
 8009c70:	e008      	b.n	8009c84 <_printf_common+0xa8>
 8009c72:	2301      	movs	r3, #1
 8009c74:	4652      	mov	r2, sl
 8009c76:	4641      	mov	r1, r8
 8009c78:	4638      	mov	r0, r7
 8009c7a:	47c8      	blx	r9
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d103      	bne.n	8009c88 <_printf_common+0xac>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	3501      	adds	r5, #1
 8009c8a:	e7c6      	b.n	8009c1a <_printf_common+0x3e>
 8009c8c:	18e1      	adds	r1, r4, r3
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	2030      	movs	r0, #48	@ 0x30
 8009c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c96:	4422      	add	r2, r4
 8009c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ca0:	3302      	adds	r3, #2
 8009ca2:	e7c7      	b.n	8009c34 <_printf_common+0x58>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	4641      	mov	r1, r8
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c8      	blx	r9
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d0e6      	beq.n	8009c80 <_printf_common+0xa4>
 8009cb2:	3601      	adds	r6, #1
 8009cb4:	e7d9      	b.n	8009c6a <_printf_common+0x8e>
	...

08009cb8 <_printf_i>:
 8009cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	7e0f      	ldrb	r7, [r1, #24]
 8009cbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cc0:	2f78      	cmp	r7, #120	@ 0x78
 8009cc2:	4691      	mov	r9, r2
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	469a      	mov	sl, r3
 8009cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cce:	d807      	bhi.n	8009ce0 <_printf_i+0x28>
 8009cd0:	2f62      	cmp	r7, #98	@ 0x62
 8009cd2:	d80a      	bhi.n	8009cea <_printf_i+0x32>
 8009cd4:	2f00      	cmp	r7, #0
 8009cd6:	f000 80d1 	beq.w	8009e7c <_printf_i+0x1c4>
 8009cda:	2f58      	cmp	r7, #88	@ 0x58
 8009cdc:	f000 80b8 	beq.w	8009e50 <_printf_i+0x198>
 8009ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ce8:	e03a      	b.n	8009d60 <_printf_i+0xa8>
 8009cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cee:	2b15      	cmp	r3, #21
 8009cf0:	d8f6      	bhi.n	8009ce0 <_printf_i+0x28>
 8009cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8009cf8 <_printf_i+0x40>)
 8009cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cf8:	08009d51 	.word	0x08009d51
 8009cfc:	08009d65 	.word	0x08009d65
 8009d00:	08009ce1 	.word	0x08009ce1
 8009d04:	08009ce1 	.word	0x08009ce1
 8009d08:	08009ce1 	.word	0x08009ce1
 8009d0c:	08009ce1 	.word	0x08009ce1
 8009d10:	08009d65 	.word	0x08009d65
 8009d14:	08009ce1 	.word	0x08009ce1
 8009d18:	08009ce1 	.word	0x08009ce1
 8009d1c:	08009ce1 	.word	0x08009ce1
 8009d20:	08009ce1 	.word	0x08009ce1
 8009d24:	08009e63 	.word	0x08009e63
 8009d28:	08009d8f 	.word	0x08009d8f
 8009d2c:	08009e1d 	.word	0x08009e1d
 8009d30:	08009ce1 	.word	0x08009ce1
 8009d34:	08009ce1 	.word	0x08009ce1
 8009d38:	08009e85 	.word	0x08009e85
 8009d3c:	08009ce1 	.word	0x08009ce1
 8009d40:	08009d8f 	.word	0x08009d8f
 8009d44:	08009ce1 	.word	0x08009ce1
 8009d48:	08009ce1 	.word	0x08009ce1
 8009d4c:	08009e25 	.word	0x08009e25
 8009d50:	6833      	ldr	r3, [r6, #0]
 8009d52:	1d1a      	adds	r2, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6032      	str	r2, [r6, #0]
 8009d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d60:	2301      	movs	r3, #1
 8009d62:	e09c      	b.n	8009e9e <_printf_i+0x1e6>
 8009d64:	6833      	ldr	r3, [r6, #0]
 8009d66:	6820      	ldr	r0, [r4, #0]
 8009d68:	1d19      	adds	r1, r3, #4
 8009d6a:	6031      	str	r1, [r6, #0]
 8009d6c:	0606      	lsls	r6, r0, #24
 8009d6e:	d501      	bpl.n	8009d74 <_printf_i+0xbc>
 8009d70:	681d      	ldr	r5, [r3, #0]
 8009d72:	e003      	b.n	8009d7c <_printf_i+0xc4>
 8009d74:	0645      	lsls	r5, r0, #25
 8009d76:	d5fb      	bpl.n	8009d70 <_printf_i+0xb8>
 8009d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	da03      	bge.n	8009d88 <_printf_i+0xd0>
 8009d80:	232d      	movs	r3, #45	@ 0x2d
 8009d82:	426d      	negs	r5, r5
 8009d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d88:	4858      	ldr	r0, [pc, #352]	@ (8009eec <_printf_i+0x234>)
 8009d8a:	230a      	movs	r3, #10
 8009d8c:	e011      	b.n	8009db2 <_printf_i+0xfa>
 8009d8e:	6821      	ldr	r1, [r4, #0]
 8009d90:	6833      	ldr	r3, [r6, #0]
 8009d92:	0608      	lsls	r0, r1, #24
 8009d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d98:	d402      	bmi.n	8009da0 <_printf_i+0xe8>
 8009d9a:	0649      	lsls	r1, r1, #25
 8009d9c:	bf48      	it	mi
 8009d9e:	b2ad      	uxthmi	r5, r5
 8009da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009da2:	4852      	ldr	r0, [pc, #328]	@ (8009eec <_printf_i+0x234>)
 8009da4:	6033      	str	r3, [r6, #0]
 8009da6:	bf14      	ite	ne
 8009da8:	230a      	movne	r3, #10
 8009daa:	2308      	moveq	r3, #8
 8009dac:	2100      	movs	r1, #0
 8009dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009db2:	6866      	ldr	r6, [r4, #4]
 8009db4:	60a6      	str	r6, [r4, #8]
 8009db6:	2e00      	cmp	r6, #0
 8009db8:	db05      	blt.n	8009dc6 <_printf_i+0x10e>
 8009dba:	6821      	ldr	r1, [r4, #0]
 8009dbc:	432e      	orrs	r6, r5
 8009dbe:	f021 0104 	bic.w	r1, r1, #4
 8009dc2:	6021      	str	r1, [r4, #0]
 8009dc4:	d04b      	beq.n	8009e5e <_printf_i+0x1a6>
 8009dc6:	4616      	mov	r6, r2
 8009dc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dcc:	fb03 5711 	mls	r7, r3, r1, r5
 8009dd0:	5dc7      	ldrb	r7, [r0, r7]
 8009dd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dd6:	462f      	mov	r7, r5
 8009dd8:	42bb      	cmp	r3, r7
 8009dda:	460d      	mov	r5, r1
 8009ddc:	d9f4      	bls.n	8009dc8 <_printf_i+0x110>
 8009dde:	2b08      	cmp	r3, #8
 8009de0:	d10b      	bne.n	8009dfa <_printf_i+0x142>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	07df      	lsls	r7, r3, #31
 8009de6:	d508      	bpl.n	8009dfa <_printf_i+0x142>
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	6861      	ldr	r1, [r4, #4]
 8009dec:	4299      	cmp	r1, r3
 8009dee:	bfde      	ittt	le
 8009df0:	2330      	movle	r3, #48	@ 0x30
 8009df2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009df6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dfa:	1b92      	subs	r2, r2, r6
 8009dfc:	6122      	str	r2, [r4, #16]
 8009dfe:	f8cd a000 	str.w	sl, [sp]
 8009e02:	464b      	mov	r3, r9
 8009e04:	aa03      	add	r2, sp, #12
 8009e06:	4621      	mov	r1, r4
 8009e08:	4640      	mov	r0, r8
 8009e0a:	f7ff fee7 	bl	8009bdc <_printf_common>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	d14a      	bne.n	8009ea8 <_printf_i+0x1f0>
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295
 8009e16:	b004      	add	sp, #16
 8009e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	f043 0320 	orr.w	r3, r3, #32
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	4832      	ldr	r0, [pc, #200]	@ (8009ef0 <_printf_i+0x238>)
 8009e26:	2778      	movs	r7, #120	@ 0x78
 8009e28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	6831      	ldr	r1, [r6, #0]
 8009e30:	061f      	lsls	r7, r3, #24
 8009e32:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e36:	d402      	bmi.n	8009e3e <_printf_i+0x186>
 8009e38:	065f      	lsls	r7, r3, #25
 8009e3a:	bf48      	it	mi
 8009e3c:	b2ad      	uxthmi	r5, r5
 8009e3e:	6031      	str	r1, [r6, #0]
 8009e40:	07d9      	lsls	r1, r3, #31
 8009e42:	bf44      	itt	mi
 8009e44:	f043 0320 	orrmi.w	r3, r3, #32
 8009e48:	6023      	strmi	r3, [r4, #0]
 8009e4a:	b11d      	cbz	r5, 8009e54 <_printf_i+0x19c>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	e7ad      	b.n	8009dac <_printf_i+0xf4>
 8009e50:	4826      	ldr	r0, [pc, #152]	@ (8009eec <_printf_i+0x234>)
 8009e52:	e7e9      	b.n	8009e28 <_printf_i+0x170>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	f023 0320 	bic.w	r3, r3, #32
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	e7f6      	b.n	8009e4c <_printf_i+0x194>
 8009e5e:	4616      	mov	r6, r2
 8009e60:	e7bd      	b.n	8009dde <_printf_i+0x126>
 8009e62:	6833      	ldr	r3, [r6, #0]
 8009e64:	6825      	ldr	r5, [r4, #0]
 8009e66:	6961      	ldr	r1, [r4, #20]
 8009e68:	1d18      	adds	r0, r3, #4
 8009e6a:	6030      	str	r0, [r6, #0]
 8009e6c:	062e      	lsls	r6, r5, #24
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	d501      	bpl.n	8009e76 <_printf_i+0x1be>
 8009e72:	6019      	str	r1, [r3, #0]
 8009e74:	e002      	b.n	8009e7c <_printf_i+0x1c4>
 8009e76:	0668      	lsls	r0, r5, #25
 8009e78:	d5fb      	bpl.n	8009e72 <_printf_i+0x1ba>
 8009e7a:	8019      	strh	r1, [r3, #0]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	4616      	mov	r6, r2
 8009e82:	e7bc      	b.n	8009dfe <_printf_i+0x146>
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	1d1a      	adds	r2, r3, #4
 8009e88:	6032      	str	r2, [r6, #0]
 8009e8a:	681e      	ldr	r6, [r3, #0]
 8009e8c:	6862      	ldr	r2, [r4, #4]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7f6 f9a5 	bl	80001e0 <memchr>
 8009e96:	b108      	cbz	r0, 8009e9c <_printf_i+0x1e4>
 8009e98:	1b80      	subs	r0, r0, r6
 8009e9a:	6060      	str	r0, [r4, #4]
 8009e9c:	6863      	ldr	r3, [r4, #4]
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ea6:	e7aa      	b.n	8009dfe <_printf_i+0x146>
 8009ea8:	6923      	ldr	r3, [r4, #16]
 8009eaa:	4632      	mov	r2, r6
 8009eac:	4649      	mov	r1, r9
 8009eae:	4640      	mov	r0, r8
 8009eb0:	47d0      	blx	sl
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d0ad      	beq.n	8009e12 <_printf_i+0x15a>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	079b      	lsls	r3, r3, #30
 8009eba:	d413      	bmi.n	8009ee4 <_printf_i+0x22c>
 8009ebc:	68e0      	ldr	r0, [r4, #12]
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	4298      	cmp	r0, r3
 8009ec2:	bfb8      	it	lt
 8009ec4:	4618      	movlt	r0, r3
 8009ec6:	e7a6      	b.n	8009e16 <_printf_i+0x15e>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4632      	mov	r2, r6
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4640      	mov	r0, r8
 8009ed0:	47d0      	blx	sl
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d09d      	beq.n	8009e12 <_printf_i+0x15a>
 8009ed6:	3501      	adds	r5, #1
 8009ed8:	68e3      	ldr	r3, [r4, #12]
 8009eda:	9903      	ldr	r1, [sp, #12]
 8009edc:	1a5b      	subs	r3, r3, r1
 8009ede:	42ab      	cmp	r3, r5
 8009ee0:	dcf2      	bgt.n	8009ec8 <_printf_i+0x210>
 8009ee2:	e7eb      	b.n	8009ebc <_printf_i+0x204>
 8009ee4:	2500      	movs	r5, #0
 8009ee6:	f104 0619 	add.w	r6, r4, #25
 8009eea:	e7f5      	b.n	8009ed8 <_printf_i+0x220>
 8009eec:	0800a041 	.word	0x0800a041
 8009ef0:	0800a052 	.word	0x0800a052

08009ef4 <memmove>:
 8009ef4:	4288      	cmp	r0, r1
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	eb01 0402 	add.w	r4, r1, r2
 8009efc:	d902      	bls.n	8009f04 <memmove+0x10>
 8009efe:	4284      	cmp	r4, r0
 8009f00:	4623      	mov	r3, r4
 8009f02:	d807      	bhi.n	8009f14 <memmove+0x20>
 8009f04:	1e43      	subs	r3, r0, #1
 8009f06:	42a1      	cmp	r1, r4
 8009f08:	d008      	beq.n	8009f1c <memmove+0x28>
 8009f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f12:	e7f8      	b.n	8009f06 <memmove+0x12>
 8009f14:	4402      	add	r2, r0
 8009f16:	4601      	mov	r1, r0
 8009f18:	428a      	cmp	r2, r1
 8009f1a:	d100      	bne.n	8009f1e <memmove+0x2a>
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f26:	e7f7      	b.n	8009f18 <memmove+0x24>

08009f28 <memcpy>:
 8009f28:	440a      	add	r2, r1
 8009f2a:	4291      	cmp	r1, r2
 8009f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f30:	d100      	bne.n	8009f34 <memcpy+0xc>
 8009f32:	4770      	bx	lr
 8009f34:	b510      	push	{r4, lr}
 8009f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3e:	4291      	cmp	r1, r2
 8009f40:	d1f9      	bne.n	8009f36 <memcpy+0xe>
 8009f42:	bd10      	pop	{r4, pc}

08009f44 <_realloc_r>:
 8009f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f48:	4607      	mov	r7, r0
 8009f4a:	4614      	mov	r4, r2
 8009f4c:	460d      	mov	r5, r1
 8009f4e:	b921      	cbnz	r1, 8009f5a <_realloc_r+0x16>
 8009f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f54:	4611      	mov	r1, r2
 8009f56:	f7ff bbad 	b.w	80096b4 <_malloc_r>
 8009f5a:	b92a      	cbnz	r2, 8009f68 <_realloc_r+0x24>
 8009f5c:	f7ff fc9c 	bl	8009898 <_free_r>
 8009f60:	4625      	mov	r5, r4
 8009f62:	4628      	mov	r0, r5
 8009f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f68:	f000 f81a 	bl	8009fa0 <_malloc_usable_size_r>
 8009f6c:	4284      	cmp	r4, r0
 8009f6e:	4606      	mov	r6, r0
 8009f70:	d802      	bhi.n	8009f78 <_realloc_r+0x34>
 8009f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f76:	d8f4      	bhi.n	8009f62 <_realloc_r+0x1e>
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f7ff fb9a 	bl	80096b4 <_malloc_r>
 8009f80:	4680      	mov	r8, r0
 8009f82:	b908      	cbnz	r0, 8009f88 <_realloc_r+0x44>
 8009f84:	4645      	mov	r5, r8
 8009f86:	e7ec      	b.n	8009f62 <_realloc_r+0x1e>
 8009f88:	42b4      	cmp	r4, r6
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	bf28      	it	cs
 8009f90:	4632      	movcs	r2, r6
 8009f92:	f7ff ffc9 	bl	8009f28 <memcpy>
 8009f96:	4629      	mov	r1, r5
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff fc7d 	bl	8009898 <_free_r>
 8009f9e:	e7f1      	b.n	8009f84 <_realloc_r+0x40>

08009fa0 <_malloc_usable_size_r>:
 8009fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa4:	1f18      	subs	r0, r3, #4
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	bfbc      	itt	lt
 8009faa:	580b      	ldrlt	r3, [r1, r0]
 8009fac:	18c0      	addlt	r0, r0, r3
 8009fae:	4770      	bx	lr

08009fb0 <_init>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	bf00      	nop
 8009fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb6:	bc08      	pop	{r3}
 8009fb8:	469e      	mov	lr, r3
 8009fba:	4770      	bx	lr

08009fbc <_fini>:
 8009fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fbe:	bf00      	nop
 8009fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fc2:	bc08      	pop	{r3}
 8009fc4:	469e      	mov	lr, r3
 8009fc6:	4770      	bx	lr
