
BlockedScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cac  080057a4  080057a4  000067a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008450  08008450  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008450  08008450  00009450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008458  08008458  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008458  08008458  00009458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800845c  0800845c  0000945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008460  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000074  080084d4  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  080084d4  0000a650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cf7  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab1  00000000  00000000  00012d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00014850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000698  00000000  00000000  000150f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f85  00000000  00000000  00015788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb93  00000000  00000000  0002b70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008669a  00000000  00000000  000372a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd93a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027bc  00000000  00000000  000bd980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800578c 	.word	0x0800578c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800578c 	.word	0x0800578c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f001 f9b9 	bl	8001928 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8cd 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f961 	bl	8000880 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005be:	f000 f931 	bl	8000824 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80005c2:	f000 faa1 	bl	8000b08 <SSD1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_GotoXY(10,20);
 80005c6:	2114      	movs	r1, #20
 80005c8:	200a      	movs	r0, #10
 80005ca:	f000 fc07 	bl	8000ddc <SSD1306_GotoXY>
	  		SSD1306_Puts("OLED I2C SSD1306", &Font_7x10, WHITE);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4954      	ldr	r1, [pc, #336]	@ (8000724 <main+0x178>)
 80005d2:	4855      	ldr	r0, [pc, #340]	@ (8000728 <main+0x17c>)
 80005d4:	f000 fc96 	bl	8000f04 <SSD1306_Puts>
	  		SSD1306_GotoXY(15,40);
 80005d8:	2128      	movs	r1, #40	@ 0x28
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 fbfe 	bl	8000ddc <SSD1306_GotoXY>
	  		SSD1306_Puts("STM32F103C8T6", &Font_7x10, WHITE);
 80005e0:	2201      	movs	r2, #1
 80005e2:	4950      	ldr	r1, [pc, #320]	@ (8000724 <main+0x178>)
 80005e4:	4851      	ldr	r0, [pc, #324]	@ (800072c <main+0x180>)
 80005e6:	f000 fc8d 	bl	8000f04 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 80005ea:	f000 fb51 	bl	8000c90 <SSD1306_UpdateScreen>
	  		HAL_Delay(2000);
 80005ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005f2:	f001 fa0b 	bl	8001a0c <HAL_Delay>

	  		SSD1306_Clear();
 80005f6:	f000 ffbe 	bl	8001576 <SSD1306_Clear>
	  		SSD1306_GotoXY(10,1);
 80005fa:	2101      	movs	r1, #1
 80005fc:	200a      	movs	r0, #10
 80005fe:	f000 fbed 	bl	8000ddc <SSD1306_GotoXY>
	  		SSD1306_Puts("Font 1", &Font_7x10, WHITE);
 8000602:	2201      	movs	r2, #1
 8000604:	4947      	ldr	r1, [pc, #284]	@ (8000724 <main+0x178>)
 8000606:	484a      	ldr	r0, [pc, #296]	@ (8000730 <main+0x184>)
 8000608:	f000 fc7c 	bl	8000f04 <SSD1306_Puts>
	  		SSD1306_GotoXY(10,15);
 800060c:	210f      	movs	r1, #15
 800060e:	200a      	movs	r0, #10
 8000610:	f000 fbe4 	bl	8000ddc <SSD1306_GotoXY>
	  		SSD1306_Puts("Font 2", &Font_11x18, WHITE);
 8000614:	2201      	movs	r2, #1
 8000616:	4947      	ldr	r1, [pc, #284]	@ (8000734 <main+0x188>)
 8000618:	4847      	ldr	r0, [pc, #284]	@ (8000738 <main+0x18c>)
 800061a:	f000 fc73 	bl	8000f04 <SSD1306_Puts>
	  		SSD1306_GotoXY(10,35);
 800061e:	2123      	movs	r1, #35	@ 0x23
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fbdb 	bl	8000ddc <SSD1306_GotoXY>
	  		SSD1306_Puts("Font 3", &Font_16x26, WHITE);
 8000626:	2201      	movs	r2, #1
 8000628:	4944      	ldr	r1, [pc, #272]	@ (800073c <main+0x190>)
 800062a:	4845      	ldr	r0, [pc, #276]	@ (8000740 <main+0x194>)
 800062c:	f000 fc6a 	bl	8000f04 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 8000630:	f000 fb2e 	bl	8000c90 <SSD1306_UpdateScreen>
	  		HAL_Delay(2000);
 8000634:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000638:	f001 f9e8 	bl	8001a0c <HAL_Delay>

	  		SSD1306_Clear();
 800063c:	f000 ff9b 	bl	8001576 <SSD1306_Clear>
	  		SSD1306_DrawRectangle(2, 2, 123, 60, WHITE);
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	233c      	movs	r3, #60	@ 0x3c
 8000646:	227b      	movs	r2, #123	@ 0x7b
 8000648:	2102      	movs	r1, #2
 800064a:	2002      	movs	r0, #2
 800064c:	f000 fd7a 	bl	8001144 <SSD1306_DrawRectangle>
	  		SSD1306_GotoXY(10,10);
 8000650:	210a      	movs	r1, #10
 8000652:	200a      	movs	r0, #10
 8000654:	f000 fbc2 	bl	8000ddc <SSD1306_GotoXY>
	  		SSD1306_Puts("CONTADOR", &Font_7x10, WHITE);
 8000658:	2201      	movs	r2, #1
 800065a:	4932      	ldr	r1, [pc, #200]	@ (8000724 <main+0x178>)
 800065c:	4839      	ldr	r0, [pc, #228]	@ (8000744 <main+0x198>)
 800065e:	f000 fc51 	bl	8000f04 <SSD1306_Puts>
	  		SSD1306_DrawCircle(95, 35, 16, WHITE);
 8000662:	2301      	movs	r3, #1
 8000664:	2210      	movs	r2, #16
 8000666:	2123      	movs	r1, #35	@ 0x23
 8000668:	205f      	movs	r0, #95	@ 0x5f
 800066a:	f000 fdd5 	bl	8001218 <SSD1306_DrawCircle>
	  		SSD1306_UpdateScreen();
 800066e:	f000 fb0f 	bl	8000c90 <SSD1306_UpdateScreen>

	  		uint8_t contador = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]
	  		while(contador <= 10)
 8000676:	e017      	b.n	80006a8 <main+0xfc>
	  		{
	  			SSD1306_GotoXY(30,30);
 8000678:	211e      	movs	r1, #30
 800067a:	201e      	movs	r0, #30
 800067c:	f000 fbae 	bl	8000ddc <SSD1306_GotoXY>
	  			sprintf(buf_oled, "%u ", contador);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	461a      	mov	r2, r3
 8000684:	4930      	ldr	r1, [pc, #192]	@ (8000748 <main+0x19c>)
 8000686:	4831      	ldr	r0, [pc, #196]	@ (800074c <main+0x1a0>)
 8000688:	f004 fbe0 	bl	8004e4c <siprintf>
	  			SSD1306_Puts(buf_oled, &Font_11x18, WHITE);
 800068c:	2201      	movs	r2, #1
 800068e:	4929      	ldr	r1, [pc, #164]	@ (8000734 <main+0x188>)
 8000690:	482e      	ldr	r0, [pc, #184]	@ (800074c <main+0x1a0>)
 8000692:	f000 fc37 	bl	8000f04 <SSD1306_Puts>
	  			SSD1306_UpdateScreen();
 8000696:	f000 fafb 	bl	8000c90 <SSD1306_UpdateScreen>
	  			contador++;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	3301      	adds	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
	  			HAL_Delay(400);
 80006a0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80006a4:	f001 f9b2 	bl	8001a0c <HAL_Delay>
	  		while(contador <= 10)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d9e4      	bls.n	8000678 <main+0xcc>
	  		}
	  		SSD1306_DrawFilledCircle(95, 35, 16, WHITE);
 80006ae:	2301      	movs	r3, #1
 80006b0:	2210      	movs	r2, #16
 80006b2:	2123      	movs	r1, #35	@ 0x23
 80006b4:	205f      	movs	r0, #95	@ 0x5f
 80006b6:	f000 fe83 	bl	80013c0 <SSD1306_DrawFilledCircle>
	  		SSD1306_UpdateScreen();
 80006ba:	f000 fae9 	bl	8000c90 <SSD1306_UpdateScreen>
	  		HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c2:	f001 f9a3 	bl	8001a0c <HAL_Delay>

	  		SSD1306_Clear();
 80006c6:	f000 ff56 	bl	8001576 <SSD1306_Clear>
	  		SSD1306_DrawBitmap(0, 0, imagen, 128, 64, WHITE);
 80006ca:	2301      	movs	r3, #1
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2340      	movs	r3, #64	@ 0x40
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2380      	movs	r3, #128	@ 0x80
 80006d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <main+0x1a4>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f9ac 	bl	8000a36 <SSD1306_DrawBitmap>
	  		SSD1306_UpdateScreen();
 80006de:	f000 fad7 	bl	8000c90 <SSD1306_UpdateScreen>
	  		HAL_Delay(2000);
 80006e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006e6:	f001 f991 	bl	8001a0c <HAL_Delay>

	  		SSD1306_ScrollRight(0, 0x0F);
 80006ea:	210f      	movs	r1, #15
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f92d 	bl	800094c <SSD1306_ScrollRight>
	  		HAL_Delay(4000);
 80006f2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80006f6:	f001 f989 	bl	8001a0c <HAL_Delay>
	  		SSD1306_ScrollLeft(0, 0x0F);
 80006fa:	210f      	movs	r1, #15
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 f95b 	bl	80009b8 <SSD1306_ScrollLeft>
	  		HAL_Delay(4000);
 8000702:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000706:	f001 f981 	bl	8001a0c <HAL_Delay>
	  		SSD1306_Stopscroll();
 800070a:	f000 f98b 	bl	8000a24 <SSD1306_Stopscroll>
	  		HAL_Delay(1000);
 800070e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000712:	f001 f97b 	bl	8001a0c <HAL_Delay>

	  		SSD1306_Clear();
 8000716:	f000 ff2e 	bl	8001576 <SSD1306_Clear>
	  		HAL_Delay(500);
 800071a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071e:	f001 f975 	bl	8001a0c <HAL_Delay>
  {
 8000722:	e750      	b.n	80005c6 <main+0x1a>
 8000724:	20000000 	.word	0x20000000
 8000728:	080057a4 	.word	0x080057a4
 800072c:	080057b8 	.word	0x080057b8
 8000730:	080057c8 	.word	0x080057c8
 8000734:	20000008 	.word	0x20000008
 8000738:	080057d0 	.word	0x080057d0
 800073c:	20000010 	.word	0x20000010
 8000740:	080057d8 	.word	0x080057d8
 8000744:	080057e0 	.word	0x080057e0
 8000748:	080057ec 	.word	0x080057ec
 800074c:	200000e4 	.word	0x200000e4
 8000750:	08008004 	.word	0x08008004

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	@ 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fb94 	bl	8004e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <SystemClock_Config+0xc8>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	4a26      	ldr	r2, [pc, #152]	@ (800081c <SystemClock_Config+0xc8>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	@ 0x40
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <SystemClock_Config+0xc8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <SystemClock_Config+0xcc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a20      	ldr	r2, [pc, #128]	@ (8000820 <SystemClock_Config+0xcc>)
 800079e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c4:	2308      	movs	r3, #8
 80007c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 fef3 	bl	80045c4 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e4:	f000 f8ac 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2103      	movs	r1, #3
 8000804:	4618      	mov	r0, r3
 8000806:	f004 f955 	bl	8004ab4 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000810:	f000 f896 	bl	8000940 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	@ 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2C1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <MX_I2C1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_I2C1_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000862:	f001 fbd7 	bl	8002014 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f868 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000090 	.word	0x20000090
 8000878:	40005400 	.word	0x40005400
 800087c:	00061a80 	.word	0x00061a80

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <MX_GPIO_Init+0xb8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a26      	ldr	r2, [pc, #152]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a18      	ldr	r2, [pc, #96]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a11      	ldr	r2, [pc, #68]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_GPIO_Init+0xb8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800090c:	480b      	ldr	r0, [pc, #44]	@ (800093c <MX_GPIO_Init+0xbc>)
 800090e:	f001 fb67 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_GPIO_Init+0xbc>)
 800092c:	f001 f9d4 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40020800 	.word	0x40020800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <SSD1306_ScrollRight>:
} SSD1306_t;

static SSD1306_t SSD1306;

void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	71bb      	strb	r3, [r7, #6]
	SSD1306_WRITECOMMAND(SSD1306_RIGHT_HORIZONTAL_SCROLL);
 800095c:	2226      	movs	r2, #38	@ 0x26
 800095e:	2100      	movs	r1, #0
 8000960:	2078      	movs	r0, #120	@ 0x78
 8000962:	f000 fe8d 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2078      	movs	r0, #120	@ 0x78
 800096c:	f000 fe88 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(start_row);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	461a      	mov	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	@ 0x78
 8000978:	f000 fe82 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	@ 0x78
 8000982:	f000 fe7d 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(end_row);
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	461a      	mov	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	2078      	movs	r0, #120	@ 0x78
 800098e:	f000 fe77 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2078      	movs	r0, #120	@ 0x78
 8000998:	f000 fe72 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800099c:	22ff      	movs	r2, #255	@ 0xff
 800099e:	2100      	movs	r1, #0
 80009a0:	2078      	movs	r0, #120	@ 0x78
 80009a2:	f000 fe6d 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_ACTIVATE_SCROLL);
 80009a6:	222f      	movs	r2, #47	@ 0x2f
 80009a8:	2100      	movs	r1, #0
 80009aa:	2078      	movs	r0, #120	@ 0x78
 80009ac:	f000 fe68 	bl	8001680 <SSD1306_I2C_Write>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SSD1306_ScrollLeft>:

void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	4613      	mov	r3, r2
 80009c6:	71bb      	strb	r3, [r7, #6]
	SSD1306_WRITECOMMAND(SSD1306_LEFT_HORIZONTAL_SCROLL);
 80009c8:	2227      	movs	r2, #39	@ 0x27
 80009ca:	2100      	movs	r1, #0
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f000 fe57 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	@ 0x78
 80009d8:	f000 fe52 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(start_row);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	461a      	mov	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	2078      	movs	r0, #120	@ 0x78
 80009e4:	f000 fe4c 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2078      	movs	r0, #120	@ 0x78
 80009ee:	f000 fe47 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(end_row);
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	461a      	mov	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	2078      	movs	r0, #120	@ 0x78
 80009fa:	f000 fe41 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	@ 0x78
 8000a04:	f000 fe3c 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a08:	22ff      	movs	r2, #255	@ 0xff
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	@ 0x78
 8000a0e:	f000 fe37 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_ACTIVATE_SCROLL);
 8000a12:	222f      	movs	r2, #47	@ 0x2f
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	@ 0x78
 8000a18:	f000 fe32 	bl	8001680 <SSD1306_I2C_Write>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SSD1306_Stopscroll>:
	SSD1306_WRITECOMMAND(0x01);
	SSD1306_WRITECOMMAND(SSD1306_ACTIVATE_SCROLL);
}

void SSD1306_Stopscroll(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a28:	222e      	movs	r2, #46	@ 0x2e
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2078      	movs	r0, #120	@ 0x78
 8000a2e:	f000 fe27 	bl	8001680 <SSD1306_I2C_Write>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <SSD1306_DrawBitmap>:
	if(i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
	else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4603      	mov	r3, r0
 8000a42:	81fb      	strh	r3, [r7, #14]
 8000a44:	460b      	mov	r3, r1
 8000a46:	81bb      	strh	r3, [r7, #12]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8;
 8000a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a50:	3307      	adds	r3, #7
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	da00      	bge.n	8000a58 <SSD1306_DrawBitmap+0x22>
 8000a56:	3307      	adds	r3, #7
 8000a58:	10db      	asrs	r3, r3, #3
 8000a5a:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75fb      	strb	r3, [r7, #23]
    for(int16_t j=0; j<h; j++, y++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	82bb      	strh	r3, [r7, #20]
 8000a64:	e044      	b.n	8000af0 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	827b      	strh	r3, [r7, #18]
 8000a6a:	e02f      	b.n	8000acc <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000a6c:	8a7b      	ldrh	r3, [r7, #18]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	75fb      	strb	r3, [r7, #23]
 8000a7c:	e012      	b.n	8000aa4 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000a7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a82:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a86:	fb03 f202 	mul.w	r2, r3, r2
 8000a8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	da00      	bge.n	8000a94 <SSD1306_DrawBitmap+0x5e>
 8000a92:	3307      	adds	r3, #7
 8000a94:	10db      	asrs	r3, r3, #3
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da09      	bge.n	8000ac0 <SSD1306_DrawBitmap+0x8a>
 8000aac:	89fa      	ldrh	r2, [r7, #14]
 8000aae:	8a7b      	ldrh	r3, [r7, #18]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	89b9      	ldrh	r1, [r7, #12]
 8000ab6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f92e 	bl	8000d1c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	827b      	strh	r3, [r7, #18]
 8000acc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbc9      	blt.n	8000a6c <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000ad8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	82bb      	strh	r3, [r7, #20]
 8000ae4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	3301      	adds	r3, #1
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	81bb      	strh	r3, [r7, #12]
 8000af0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000af4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbb4      	blt.n	8000a66 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <SSD1306_Init>:

uint8_t SSD1306_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 8000b0e:	f000 fd3b 	bl	8001588 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 8000b12:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000b16:	2201      	movs	r2, #1
 8000b18:	2178      	movs	r1, #120	@ 0x78
 8000b1a:	485b      	ldr	r0, [pc, #364]	@ (8000c88 <SSD1306_Init+0x180>)
 8000b1c:	f001 fcd2 	bl	80024c4 <HAL_I2C_IsDeviceReady>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SSD1306_Init+0x22>
		return 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e0a9      	b.n	8000c7e <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8000b2a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000b2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b30:	e002      	b.n	8000b38 <SSD1306_Init+0x30>
		p--;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f9      	bne.n	8000b32 <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 8000b3e:	22ae      	movs	r2, #174	@ 0xae
 8000b40:	2100      	movs	r1, #0
 8000b42:	2078      	movs	r0, #120	@ 0x78
 8000b44:	f000 fd9c 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8000b48:	2220      	movs	r2, #32
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2078      	movs	r0, #120	@ 0x78
 8000b4e:	f000 fd97 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8000b52:	2210      	movs	r2, #16
 8000b54:	2100      	movs	r1, #0
 8000b56:	2078      	movs	r0, #120	@ 0x78
 8000b58:	f000 fd92 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8000b5c:	22b0      	movs	r2, #176	@ 0xb0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2078      	movs	r0, #120	@ 0x78
 8000b62:	f000 fd8d 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8000b66:	22c8      	movs	r2, #200	@ 0xc8
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2078      	movs	r0, #120	@ 0x78
 8000b6c:	f000 fd88 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2078      	movs	r0, #120	@ 0x78
 8000b76:	f000 fd83 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	@ 0x78
 8000b80:	f000 fd7e 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8000b84:	2240      	movs	r2, #64	@ 0x40
 8000b86:	2100      	movs	r1, #0
 8000b88:	2078      	movs	r0, #120	@ 0x78
 8000b8a:	f000 fd79 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8000b8e:	2281      	movs	r2, #129	@ 0x81
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	@ 0x78
 8000b94:	f000 fd74 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000b98:	22ff      	movs	r2, #255	@ 0xff
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2078      	movs	r0, #120	@ 0x78
 8000b9e:	f000 fd6f 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8000ba2:	22a1      	movs	r2, #161	@ 0xa1
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2078      	movs	r0, #120	@ 0x78
 8000ba8:	f000 fd6a 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8000bac:	22a6      	movs	r2, #166	@ 0xa6
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	@ 0x78
 8000bb2:	f000 fd65 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8000bb6:	22a8      	movs	r2, #168	@ 0xa8
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2078      	movs	r0, #120	@ 0x78
 8000bbc:	f000 fd60 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8000bc0:	223f      	movs	r2, #63	@ 0x3f
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2078      	movs	r0, #120	@ 0x78
 8000bc6:	f000 fd5b 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8000bca:	22a4      	movs	r2, #164	@ 0xa4
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	@ 0x78
 8000bd0:	f000 fd56 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8000bd4:	22d3      	movs	r2, #211	@ 0xd3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	@ 0x78
 8000bda:	f000 fd51 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	@ 0x78
 8000be4:	f000 fd4c 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8000be8:	22d5      	movs	r2, #213	@ 0xd5
 8000bea:	2100      	movs	r1, #0
 8000bec:	2078      	movs	r0, #120	@ 0x78
 8000bee:	f000 fd47 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8000bf2:	22f0      	movs	r2, #240	@ 0xf0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2078      	movs	r0, #120	@ 0x78
 8000bf8:	f000 fd42 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8000bfc:	22d9      	movs	r2, #217	@ 0xd9
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2078      	movs	r0, #120	@ 0x78
 8000c02:	f000 fd3d 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8000c06:	2222      	movs	r2, #34	@ 0x22
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2078      	movs	r0, #120	@ 0x78
 8000c0c:	f000 fd38 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8000c10:	22da      	movs	r2, #218	@ 0xda
 8000c12:	2100      	movs	r1, #0
 8000c14:	2078      	movs	r0, #120	@ 0x78
 8000c16:	f000 fd33 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c1a:	2212      	movs	r2, #18
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2078      	movs	r0, #120	@ 0x78
 8000c20:	f000 fd2e 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8000c24:	22db      	movs	r2, #219	@ 0xdb
 8000c26:	2100      	movs	r1, #0
 8000c28:	2078      	movs	r0, #120	@ 0x78
 8000c2a:	f000 fd29 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8000c2e:	2220      	movs	r2, #32
 8000c30:	2100      	movs	r1, #0
 8000c32:	2078      	movs	r0, #120	@ 0x78
 8000c34:	f000 fd24 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8000c38:	228d      	movs	r2, #141	@ 0x8d
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2078      	movs	r0, #120	@ 0x78
 8000c3e:	f000 fd1f 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8000c42:	2214      	movs	r2, #20
 8000c44:	2100      	movs	r1, #0
 8000c46:	2078      	movs	r0, #120	@ 0x78
 8000c48:	f000 fd1a 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8000c4c:	22af      	movs	r2, #175	@ 0xaf
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2078      	movs	r0, #120	@ 0x78
 8000c52:	f000 fd15 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c56:	222e      	movs	r2, #46	@ 0x2e
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2078      	movs	r0, #120	@ 0x78
 8000c5c:	f000 fd10 	bl	8001680 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f843 	bl	8000cec <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8000c66:	f000 f813 	bl	8000c90 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <SSD1306_Init+0x184>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <SSD1306_Init+0x184>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <SSD1306_Init+0x184>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	715a      	strb	r2, [r3, #5]
	return 1;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000090 	.word	0x20000090
 8000c8c:	200004f8 	.word	0x200004f8

08000c90 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	e01d      	b.n	8000cd8 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	3b50      	subs	r3, #80	@ 0x50
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2078      	movs	r0, #120	@ 0x78
 8000ca8:	f000 fcea 	bl	8001680 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2078      	movs	r0, #120	@ 0x78
 8000cb2:	f000 fce5 	bl	8001680 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2078      	movs	r0, #120	@ 0x78
 8000cbc:	f000 fce0 	bl	8001680 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	01db      	lsls	r3, r3, #7
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <SSD1306_UpdateScreen+0x58>)
 8000cc6:	441a      	add	r2, r3
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	2140      	movs	r1, #64	@ 0x40
 8000ccc:	2078      	movs	r0, #120	@ 0x78
 8000cce:	f000 fc71 	bl	80015b4 <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d9de      	bls.n	8000c9c <SSD1306_UpdateScreen+0xc>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000f8 	.word	0x200000f8

08000cec <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <SSD1306_Fill+0x14>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e000      	b.n	8000d02 <SSD1306_Fill+0x16>
 8000d00:	23ff      	movs	r3, #255	@ 0xff
 8000d02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d06:	4619      	mov	r1, r3
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <SSD1306_Fill+0x2c>)
 8000d0a:	f004 f8c1 	bl	8004e90 <memset>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000f8 	.word	0x200000f8

08000d1c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	460b      	mov	r3, r1
 8000d28:	80bb      	strh	r3, [r7, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d32:	d848      	bhi.n	8000dc6 <SSD1306_DrawPixel+0xaa>
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d38:	d845      	bhi.n	8000dc6 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <SSD1306_DrawPixel+0xb8>)
 8000d3c:	791b      	ldrb	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf0c      	ite	eq
 8000d48:	2301      	moveq	r3, #1
 8000d4a:	2300      	movne	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d11a      	bne.n	8000d8c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d56:	88fa      	ldrh	r2, [r7, #6]
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	01db      	lsls	r3, r3, #7
 8000d62:	4413      	add	r3, r2
 8000d64:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b259      	sxtb	r1, r3
 8000d7c:	88fa      	ldrh	r2, [r7, #6]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	01db      	lsls	r3, r3, #7
 8000d82:	4413      	add	r3, r2
 8000d84:	b2c9      	uxtb	r1, r1
 8000d86:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000d88:	54d1      	strb	r1, [r2, r3]
 8000d8a:	e01d      	b.n	8000dc8 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	b298      	uxth	r0, r3
 8000d94:	4603      	mov	r3, r0
 8000d96:	01db      	lsls	r3, r3, #7
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	2101      	movs	r1, #1
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	4013      	ands	r3, r2
 8000db4:	b259      	sxtb	r1, r3
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	4603      	mov	r3, r0
 8000dba:	01db      	lsls	r3, r3, #7
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b2c9      	uxtb	r1, r1
 8000dc0:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000dc2:	54d1      	strb	r1, [r2, r3]
 8000dc4:	e000      	b.n	8000dc8 <SSD1306_DrawPixel+0xac>
		return;
 8000dc6:	bf00      	nop
	}
}
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200004f8 	.word	0x200004f8
 8000dd8:	200000f8 	.word	0x200000f8

08000ddc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	80fb      	strh	r3, [r7, #6]
 8000de8:	4613      	mov	r3, r2
 8000dea:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8000dec:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SSD1306_GotoXY+0x28>)
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000df2:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <SSD1306_GotoXY+0x28>)
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	8053      	strh	r3, [r2, #2]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200004f8 	.word	0x200004f8

08000e08 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8000e18:	4b39      	ldr	r3, [pc, #228]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e26:	dc07      	bgt.n	8000e38 <SSD1306_Putc+0x30>
 8000e28:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000e2a:	885b      	ldrh	r3, [r3, #2]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	4413      	add	r3, r2
 8000e34:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e36:	dd01      	ble.n	8000e3c <SSD1306_Putc+0x34>
		return 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e05d      	b.n	8000ef8 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e04b      	b.n	8000eda <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	3b20      	subs	r3, #32
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	7849      	ldrb	r1, [r1, #1]
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	440b      	add	r3, r1
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	e030      	b.n	8000ec8 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d010      	beq.n	8000e98 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b298      	uxth	r0, r3
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000e84:	885a      	ldrh	r2, [r3, #2]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	79ba      	ldrb	r2, [r7, #6]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff ff43 	bl	8000d1c <SSD1306_DrawPixel>
 8000e96:	e014      	b.n	8000ec2 <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e98:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000e9a:	881a      	ldrh	r2, [r3, #0]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b298      	uxth	r0, r3
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000ea6:	885a      	ldrh	r2, [r3, #2]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b299      	uxth	r1, r3
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	2300      	movne	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f7ff ff2d 	bl	8000d1c <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d3c8      	bcc.n	8000e66 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ad      	bcc.n	8000e42 <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <SSD1306_Putc+0xf8>)
 8000ef4:	801a      	strh	r2, [r3, #0]
	return ch;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200004f8 	.word	0x200004f8

08000f04 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8000f12:	e012      	b.n	8000f3a <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	79fa      	ldrb	r2, [r7, #7]
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff73 	bl	8000e08 <SSD1306_Putc>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d002      	beq.n	8000f34 <SSD1306_Puts+0x30>
			return *str;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	e008      	b.n	8000f46 <SSD1306_Puts+0x42>
		}
		str++;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
	while(*str)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1e8      	bne.n	8000f14 <SSD1306_Puts+0x10>
	}
	return *str;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	781b      	ldrb	r3, [r3, #0]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c)
{
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4604      	mov	r4, r0
 8000f56:	4608      	mov	r0, r1
 8000f58:	4611      	mov	r1, r2
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4623      	mov	r3, r4
 8000f5e:	80fb      	strh	r3, [r7, #6]
 8000f60:	4603      	mov	r3, r0
 8000f62:	80bb      	strh	r3, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	if(x0 >= SSD1306_WIDTH){
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f70:	d901      	bls.n	8000f76 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000f72:	237f      	movs	r3, #127	@ 0x7f
 8000f74:	80fb      	strh	r3, [r7, #6]
	}
	if(x1 >= SSD1306_WIDTH){
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f7a:	d901      	bls.n	8000f80 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000f7c:	237f      	movs	r3, #127	@ 0x7f
 8000f7e:	807b      	strh	r3, [r7, #2]
	}
	if(y0 >= SSD1306_HEIGHT){
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f84:	d901      	bls.n	8000f8a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000f86:	233f      	movs	r3, #63	@ 0x3f
 8000f88:	80bb      	strh	r3, [r7, #4]
	}
	if(y1 >= SSD1306_HEIGHT){
 8000f8a:	883b      	ldrh	r3, [r7, #0]
 8000f8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f8e:	d901      	bls.n	8000f94 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000f90:	233f      	movs	r3, #63	@ 0x3f
 8000f92:	803b      	strh	r3, [r7, #0]
	}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d205      	bcs.n	8000fa8 <SSD1306_DrawLine+0x5a>
 8000f9c:	887a      	ldrh	r2, [r7, #2]
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	e004      	b.n	8000fb2 <SSD1306_DrawLine+0x64>
 8000fa8:	88fa      	ldrh	r2, [r7, #6]
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000fb4:	88ba      	ldrh	r2, [r7, #4]
 8000fb6:	883b      	ldrh	r3, [r7, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d205      	bcs.n	8000fc8 <SSD1306_DrawLine+0x7a>
 8000fbc:	883a      	ldrh	r2, [r7, #0]
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	e004      	b.n	8000fd2 <SSD1306_DrawLine+0x84>
 8000fc8:	88ba      	ldrh	r2, [r7, #4]
 8000fca:	883b      	ldrh	r3, [r7, #0]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000fd4:	88fa      	ldrh	r2, [r7, #6]
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d201      	bcs.n	8000fe0 <SSD1306_DrawLine+0x92>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e001      	b.n	8000fe4 <SSD1306_DrawLine+0x96>
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000fe6:	88ba      	ldrh	r2, [r7, #4]
 8000fe8:	883b      	ldrh	r3, [r7, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d201      	bcs.n	8000ff2 <SSD1306_DrawLine+0xa4>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e001      	b.n	8000ff6 <SSD1306_DrawLine+0xa8>
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000ff8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ffc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	dd06      	ble.n	8001012 <SSD1306_DrawLine+0xc4>
 8001004:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001008:	0fda      	lsrs	r2, r3, #31
 800100a:	4413      	add	r3, r2
 800100c:	105b      	asrs	r3, r3, #1
 800100e:	b21b      	sxth	r3, r3
 8001010:	e006      	b.n	8001020 <SSD1306_DrawLine+0xd2>
 8001012:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001016:	0fda      	lsrs	r2, r3, #31
 8001018:	4413      	add	r3, r2
 800101a:	105b      	asrs	r3, r3, #1
 800101c:	425b      	negs	r3, r3
 800101e:	b21b      	sxth	r3, r3
 8001020:	82fb      	strh	r3, [r7, #22]

	if(dx == 0){
 8001022:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d129      	bne.n	800107e <SSD1306_DrawLine+0x130>
		if(y1 < y0){
 800102a:	883a      	ldrh	r2, [r7, #0]
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	429a      	cmp	r2, r3
 8001030:	d205      	bcs.n	800103e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800103a:	893b      	ldrh	r3, [r7, #8]
 800103c:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	429a      	cmp	r2, r3
 8001044:	d205      	bcs.n	8001052 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800104e:	893b      	ldrh	r3, [r7, #8]
 8001050:	80fb      	strh	r3, [r7, #6]
		}
		for(i=y0; i<=y1; i++){
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	82bb      	strh	r3, [r7, #20]
 8001056:	e00c      	b.n	8001072 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001058:	8ab9      	ldrh	r1, [r7, #20]
 800105a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe5b 	bl	8000d1c <SSD1306_DrawPixel>
		for(i=y0; i<=y1; i++){
 8001066:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800106a:	b29b      	uxth	r3, r3
 800106c:	3301      	adds	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	82bb      	strh	r3, [r7, #20]
 8001072:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001076:	883b      	ldrh	r3, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	dded      	ble.n	8001058 <SSD1306_DrawLine+0x10a>
		}
		return;
 800107c:	e05f      	b.n	800113e <SSD1306_DrawLine+0x1f0>
	}

	if(dy == 0){
 800107e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d129      	bne.n	80010da <SSD1306_DrawLine+0x18c>
		if(y1 < y0){
 8001086:	883a      	ldrh	r2, [r7, #0]
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d205      	bcs.n	800109a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800108e:	883b      	ldrh	r3, [r7, #0]
 8001090:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001096:	893b      	ldrh	r3, [r7, #8]
 8001098:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d205      	bcs.n	80010ae <SSD1306_DrawLine+0x160>
			tmp = x1;
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80010aa:	893b      	ldrh	r3, [r7, #8]
 80010ac:	80fb      	strh	r3, [r7, #6]
		}
		for(i = x0; i <= x1; i++){
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	82bb      	strh	r3, [r7, #20]
 80010b2:	e00c      	b.n	80010ce <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80010b4:	8abb      	ldrh	r3, [r7, #20]
 80010b6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80010ba:	88b9      	ldrh	r1, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe2d 	bl	8000d1c <SSD1306_DrawPixel>
		for(i = x0; i <= x1; i++){
 80010c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3301      	adds	r3, #1
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	82bb      	strh	r3, [r7, #20]
 80010ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dded      	ble.n	80010b4 <SSD1306_DrawLine+0x166>
		}
		return;
 80010d8:	e031      	b.n	800113e <SSD1306_DrawLine+0x1f0>
	}

	while(1)
	{
		SSD1306_DrawPixel(x0, y0, c);
 80010da:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80010de:	88b9      	ldrh	r1, [r7, #4]
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe1a 	bl	8000d1c <SSD1306_DrawPixel>
		if(x0 == x1 && y0 == y1){
 80010e8:	88fa      	ldrh	r2, [r7, #6]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d103      	bne.n	80010f8 <SSD1306_DrawLine+0x1aa>
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	883b      	ldrh	r3, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d021      	beq.n	800113c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 80010f8:	8afb      	ldrh	r3, [r7, #22]
 80010fa:	817b      	strh	r3, [r7, #10]
		if(e2 > -dx){
 80010fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001100:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001104:	425b      	negs	r3, r3
 8001106:	429a      	cmp	r2, r3
 8001108:	dd08      	ble.n	800111c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800110a:	8afa      	ldrh	r2, [r7, #22]
 800110c:	8a3b      	ldrh	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001114:	89fa      	ldrh	r2, [r7, #14]
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	4413      	add	r3, r2
 800111a:	80fb      	strh	r3, [r7, #6]
		}
		if(e2 < dy){
 800111c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001120:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	dad8      	bge.n	80010da <SSD1306_DrawLine+0x18c>
			err += dx;
 8001128:	8afa      	ldrh	r2, [r7, #22]
 800112a:	8a7b      	ldrh	r3, [r7, #18]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001132:	89ba      	ldrh	r2, [r7, #12]
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800113a:	e7ce      	b.n	80010da <SSD1306_DrawLine+0x18c>
			break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}

08001144 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af02      	add	r7, sp, #8
 800114a:	4604      	mov	r4, r0
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4623      	mov	r3, r4
 8001154:	80fb      	strh	r3, [r7, #6]
 8001156:	4603      	mov	r3, r0
 8001158:	80bb      	strh	r3, [r7, #4]
 800115a:	460b      	mov	r3, r1
 800115c:	807b      	strh	r3, [r7, #2]
 800115e:	4613      	mov	r3, r2
 8001160:	803b      	strh	r3, [r7, #0]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	2b7f      	cmp	r3, #127	@ 0x7f
 8001166:	d853      	bhi.n	8001210 <SSD1306_DrawRectangle+0xcc>
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	2b3f      	cmp	r3, #63	@ 0x3f
 800116c:	d850      	bhi.n	8001210 <SSD1306_DrawRectangle+0xcc>
		return;
	}
	if((x + w) >= SSD1306_WIDTH){
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	4413      	add	r3, r2
 8001174:	2b7f      	cmp	r3, #127	@ 0x7f
 8001176:	dd03      	ble.n	8001180 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800117e:	807b      	strh	r3, [r7, #2]
	}
	if((y + h) >= SSD1306_HEIGHT){
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	883b      	ldrh	r3, [r7, #0]
 8001184:	4413      	add	r3, r2
 8001186:	2b3f      	cmp	r3, #63	@ 0x3f
 8001188:	dd03      	ble.n	8001192 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001190:	803b      	strh	r3, [r7, #0]
	}
	SSD1306_DrawLine(x, y, x + w, y, c);
 8001192:	88fa      	ldrh	r2, [r7, #6]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4413      	add	r3, r2
 8001198:	b29a      	uxth	r2, r3
 800119a:	88bc      	ldrh	r4, [r7, #4]
 800119c:	88b9      	ldrh	r1, [r7, #4]
 800119e:	88f8      	ldrh	r0, [r7, #6]
 80011a0:	7e3b      	ldrb	r3, [r7, #24]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	4623      	mov	r3, r4
 80011a6:	f7ff fed2 	bl	8000f4e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c);
 80011aa:	88ba      	ldrh	r2, [r7, #4]
 80011ac:	883b      	ldrh	r3, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	b299      	uxth	r1, r3
 80011b2:	88fa      	ldrh	r2, [r7, #6]
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	4413      	add	r3, r2
 80011b8:	b29c      	uxth	r4, r3
 80011ba:	88ba      	ldrh	r2, [r7, #4]
 80011bc:	883b      	ldrh	r3, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	88f8      	ldrh	r0, [r7, #6]
 80011c4:	7e3b      	ldrb	r3, [r7, #24]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	4622      	mov	r2, r4
 80011cc:	f7ff febf 	bl	8000f4e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);
 80011d0:	88ba      	ldrh	r2, [r7, #4]
 80011d2:	883b      	ldrh	r3, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	b29c      	uxth	r4, r3
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	88b9      	ldrh	r1, [r7, #4]
 80011dc:	88f8      	ldrh	r0, [r7, #6]
 80011de:	7e3b      	ldrb	r3, [r7, #24]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4623      	mov	r3, r4
 80011e4:	f7ff feb3 	bl	8000f4e <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c);
 80011e8:	88fa      	ldrh	r2, [r7, #6]
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	4413      	add	r3, r2
 80011ee:	b298      	uxth	r0, r3
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	4413      	add	r3, r2
 80011f6:	b29c      	uxth	r4, r3
 80011f8:	88ba      	ldrh	r2, [r7, #4]
 80011fa:	883b      	ldrh	r3, [r7, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	b29a      	uxth	r2, r3
 8001200:	88b9      	ldrh	r1, [r7, #4]
 8001202:	7e3b      	ldrb	r3, [r7, #24]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	4613      	mov	r3, r2
 8001208:	4622      	mov	r2, r4
 800120a:	f7ff fea0 	bl	8000f4e <SSD1306_DrawLine>
 800120e:	e000      	b.n	8001212 <SSD1306_DrawRectangle+0xce>
		return;
 8001210:	bf00      	nop
}
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}

08001218 <SSD1306_DrawCircle>:
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4603      	mov	r3, r0
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	4613      	mov	r3, r2
 8001234:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	f1c3 0301 	rsb	r3, r3, #1
 800123c:	b29b      	uxth	r3, r3
 800123e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	461a      	mov	r2, r3
 8001248:	03d2      	lsls	r2, r2, #15
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 800125a:	88f8      	ldrh	r0, [r7, #6]
 800125c:	88ba      	ldrh	r2, [r7, #4]
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	4413      	add	r3, r2
 8001262:	b29b      	uxth	r3, r3
 8001264:	787a      	ldrb	r2, [r7, #1]
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fd58 	bl	8000d1c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 800126c:	88f8      	ldrh	r0, [r7, #6]
 800126e:	88ba      	ldrh	r2, [r7, #4]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b29b      	uxth	r3, r3
 8001276:	787a      	ldrb	r2, [r7, #1]
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fd4f 	bl	8000d1c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	4413      	add	r3, r2
 8001284:	b29b      	uxth	r3, r3
 8001286:	88b9      	ldrh	r1, [r7, #4]
 8001288:	787a      	ldrb	r2, [r7, #1]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fd46 	bl	8000d1c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	88b9      	ldrh	r1, [r7, #4]
 800129a:	787a      	ldrb	r2, [r7, #1]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fd3d 	bl	8000d1c <SSD1306_DrawPixel>

    while(x < y){
 80012a2:	e081      	b.n	80013a8 <SSD1306_DrawCircle+0x190>
        if(f >= 0){
 80012a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0e      	blt.n	80012ca <SSD1306_DrawCircle+0xb2>
            y--;
 80012ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80012b8:	8a7b      	ldrh	r3, [r7, #18]
 80012ba:	3302      	adds	r3, #2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80012c0:	8afa      	ldrh	r2, [r7, #22]
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	4413      	add	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80012ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80012d6:	8abb      	ldrh	r3, [r7, #20]
 80012d8:	3302      	adds	r3, #2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80012de:	8afa      	ldrh	r2, [r7, #22]
 80012e0:	8abb      	ldrh	r3, [r7, #20]
 80012e2:	4413      	add	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	8a3b      	ldrh	r3, [r7, #16]
 80012ec:	4413      	add	r3, r2
 80012ee:	b298      	uxth	r0, r3
 80012f0:	88ba      	ldrh	r2, [r7, #4]
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	787a      	ldrb	r2, [r7, #1]
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fd0e 	bl	8000d1c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001300:	88fa      	ldrh	r2, [r7, #6]
 8001302:	8a3b      	ldrh	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b298      	uxth	r0, r3
 8001308:	88ba      	ldrh	r2, [r7, #4]
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4413      	add	r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	787a      	ldrb	r2, [r7, #1]
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fd02 	bl	8000d1c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	8a3b      	ldrh	r3, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	b298      	uxth	r0, r3
 8001320:	88ba      	ldrh	r2, [r7, #4]
 8001322:	89fb      	ldrh	r3, [r7, #14]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	787a      	ldrb	r2, [r7, #1]
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fcf6 	bl	8000d1c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	8a3b      	ldrh	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b298      	uxth	r0, r3
 8001338:	88ba      	ldrh	r2, [r7, #4]
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	787a      	ldrb	r2, [r7, #1]
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fcea 	bl	8000d1c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001348:	88fa      	ldrh	r2, [r7, #6]
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	4413      	add	r3, r2
 800134e:	b298      	uxth	r0, r3
 8001350:	88ba      	ldrh	r2, [r7, #4]
 8001352:	8a3b      	ldrh	r3, [r7, #16]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	787a      	ldrb	r2, [r7, #1]
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fcde 	bl	8000d1c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b298      	uxth	r0, r3
 8001368:	88ba      	ldrh	r2, [r7, #4]
 800136a:	8a3b      	ldrh	r3, [r7, #16]
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	787a      	ldrb	r2, [r7, #1]
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fcd2 	bl	8000d1c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	4413      	add	r3, r2
 800137e:	b298      	uxth	r0, r3
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	8a3b      	ldrh	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	787a      	ldrb	r2, [r7, #1]
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fcc6 	bl	8000d1c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b298      	uxth	r0, r3
 8001398:	88ba      	ldrh	r2, [r7, #4]
 800139a:	8a3b      	ldrh	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	787a      	ldrb	r2, [r7, #1]
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fcba 	bl	8000d1c <SSD1306_DrawPixel>
    while(x < y){
 80013a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80013ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f6ff af77 	blt.w	80012a4 <SSD1306_DrawCircle+0x8c>
    }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	4604      	mov	r4, r0
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	80fb      	strh	r3, [r7, #6]
 80013d2:	4603      	mov	r3, r0
 80013d4:	80bb      	strh	r3, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]
 80013da:	4613      	mov	r3, r2
 80013dc:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	f1c3 0301 	rsb	r3, r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	461a      	mov	r2, r3
 80013f0:	03d2      	lsls	r2, r2, #15
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001402:	88f8      	ldrh	r0, [r7, #6]
 8001404:	88ba      	ldrh	r2, [r7, #4]
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	787a      	ldrb	r2, [r7, #1]
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fc84 	bl	8000d1c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001414:	88f8      	ldrh	r0, [r7, #6]
 8001416:	88ba      	ldrh	r2, [r7, #4]
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	787a      	ldrb	r2, [r7, #1]
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fc7b 	bl	8000d1c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	88b9      	ldrh	r1, [r7, #4]
 8001430:	787a      	ldrb	r2, [r7, #1]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fc72 	bl	8000d1c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001438:	88fa      	ldrh	r2, [r7, #6]
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	b29b      	uxth	r3, r3
 8001440:	88b9      	ldrh	r1, [r7, #4]
 8001442:	787a      	ldrb	r2, [r7, #1]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc69 	bl	8000d1c <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	b298      	uxth	r0, r3
 8001452:	88b9      	ldrh	r1, [r7, #4]
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	4413      	add	r3, r2
 800145a:	b29a      	uxth	r2, r3
 800145c:	88bc      	ldrh	r4, [r7, #4]
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4623      	mov	r3, r4
 8001464:	f7ff fd73 	bl	8000f4e <SSD1306_DrawLine>

    while(x < y){
 8001468:	e079      	b.n	800155e <SSD1306_DrawFilledCircle+0x19e>
        if(f >= 0){
 800146a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0e      	blt.n	8001490 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	3302      	adds	r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001486:	8afa      	ldrh	r2, [r7, #22]
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001490:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	3302      	adds	r3, #2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80014a4:	8afa      	ldrh	r2, [r7, #22]
 80014a6:	8abb      	ldrh	r3, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	8a3b      	ldrh	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b298      	uxth	r0, r3
 80014b6:	88ba      	ldrh	r2, [r7, #4]
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	4413      	add	r3, r2
 80014bc:	b299      	uxth	r1, r3
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	8a3b      	ldrh	r3, [r7, #16]
 80014c2:	4413      	add	r3, r2
 80014c4:	b29c      	uxth	r4, r3
 80014c6:	88ba      	ldrh	r2, [r7, #4]
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	4413      	add	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	787b      	ldrb	r3, [r7, #1]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	4622      	mov	r2, r4
 80014d6:	f7ff fd3a 	bl	8000f4e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	8a3b      	ldrh	r3, [r7, #16]
 80014de:	4413      	add	r3, r2
 80014e0:	b298      	uxth	r0, r3
 80014e2:	88ba      	ldrh	r2, [r7, #4]
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b299      	uxth	r1, r3
 80014ea:	88fa      	ldrh	r2, [r7, #6]
 80014ec:	8a3b      	ldrh	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	b29c      	uxth	r4, r3
 80014f2:	88ba      	ldrh	r2, [r7, #4]
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	787b      	ldrb	r3, [r7, #1]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4613      	mov	r3, r2
 8001500:	4622      	mov	r2, r4
 8001502:	f7ff fd24 	bl	8000f4e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001506:	88fa      	ldrh	r2, [r7, #6]
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	4413      	add	r3, r2
 800150c:	b298      	uxth	r0, r3
 800150e:	88ba      	ldrh	r2, [r7, #4]
 8001510:	8a3b      	ldrh	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	b299      	uxth	r1, r3
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b29c      	uxth	r4, r3
 800151e:	88ba      	ldrh	r2, [r7, #4]
 8001520:	8a3b      	ldrh	r3, [r7, #16]
 8001522:	4413      	add	r3, r2
 8001524:	b29a      	uxth	r2, r3
 8001526:	787b      	ldrb	r3, [r7, #1]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	4622      	mov	r2, r4
 800152e:	f7ff fd0e 	bl	8000f4e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001532:	88fa      	ldrh	r2, [r7, #6]
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	4413      	add	r3, r2
 8001538:	b298      	uxth	r0, r3
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	8a3b      	ldrh	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	b299      	uxth	r1, r3
 8001542:	88fa      	ldrh	r2, [r7, #6]
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b29c      	uxth	r4, r3
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	8a3b      	ldrh	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29a      	uxth	r2, r3
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	4622      	mov	r2, r4
 800155a:	f7ff fcf8 	bl	8000f4e <SSD1306_DrawLine>
    while(x < y){
 800155e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001566:	429a      	cmp	r2, r3
 8001568:	f6ff af7f 	blt.w	800146a <SSD1306_DrawFilledCircle+0xaa>
    }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}

08001576 <SSD1306_Clear>:

void SSD1306_Clear(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fbb6 	bl	8000cec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001580:	f7ff fb86 	bl	8000c90 <SSD1306_UpdateScreen>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <SSD1306_I2C_Init+0x28>)
 8001590:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001592:	e002      	b.n	800159a <SSD1306_I2C_Init+0x12>
		p--;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	607b      	str	r3, [r7, #4]
	while(p>0)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f9      	bne.n	8001594 <SSD1306_I2C_Init+0xc>
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	0003d090 	.word	0x0003d090

080015b4 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b0c7      	sub	sp, #284	@ 0x11c
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	4604      	mov	r4, r0
 80015bc:	4608      	mov	r0, r1
 80015be:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80015c2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80015c6:	600a      	str	r2, [r1, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015d2:	4622      	mov	r2, r4
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80015de:	4602      	mov	r2, r0
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015ea:	460a      	mov	r2, r1
 80015ec:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80015ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015fa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001608:	e015      	b.n	8001636 <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800160a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800160e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001612:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	441a      	add	r2, r3
 800161a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800161e:	3301      	adds	r3, #1
 8001620:	7811      	ldrb	r1, [r2, #0]
 8001622:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001626:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800162a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 800162c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001630:	3301      	adds	r3, #1
 8001632:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001636:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800163a:	b29b      	uxth	r3, r3
 800163c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001640:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001644:	8812      	ldrh	r2, [r2, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d8df      	bhi.n	800160a <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800164a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b299      	uxth	r1, r3
 8001656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	f107 020c 	add.w	r2, r7, #12
 8001668:	200a      	movs	r0, #10
 800166a:	9000      	str	r0, [sp, #0]
 800166c:	4803      	ldr	r0, [pc, #12]	@ (800167c <SSD1306_I2C_WriteMulti+0xc8>)
 800166e:	f000 fe2b 	bl	80022c8 <HAL_I2C_Master_Transmit>
}
 8001672:	bf00      	nop
 8001674:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	20000090 	.word	0x20000090

08001680 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af02      	add	r7, sp, #8
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	460b      	mov	r3, r1
 800168c:	71bb      	strb	r3, [r7, #6]
 800168e:	4613      	mov	r3, r2
 8001690:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	b299      	uxth	r1, r3
 800169e:	f107 020c 	add.w	r2, r7, #12
 80016a2:	230a      	movs	r3, #10
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2302      	movs	r3, #2
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <SSD1306_I2C_Write+0x38>)
 80016aa:	f000 fe0d 	bl	80022c8 <HAL_I2C_Master_Transmit>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000090 	.word	0x20000090

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <HAL_MspInit+0x4c>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001708 <HAL_MspInit+0x4c>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_MspInit+0x4c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_MspInit+0x4c>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <HAL_I2C_MspInit+0xa4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d13c      	bne.n	80017a8 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_I2C_MspInit+0xa8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a1f      	ldr	r2, [pc, #124]	@ (80017b4 <HAL_I2C_MspInit+0xa8>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <HAL_I2C_MspInit+0xa8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800174a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001750:	2312      	movs	r3, #18
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800175c:	2304      	movs	r3, #4
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <HAL_I2C_MspInit+0xac>)
 8001768:	f000 fab6 	bl	8001cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_I2C_MspInit+0xa8>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	4a0f      	ldr	r2, [pc, #60]	@ (80017b4 <HAL_I2C_MspInit+0xa8>)
 8001776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800177a:	6413      	str	r3, [r2, #64]	@ 0x40
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_I2C_MspInit+0xa8>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	201f      	movs	r0, #31
 800178e:	f000 fa3c 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001792:	201f      	movs	r0, #31
 8001794:	f000 fa55 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2020      	movs	r0, #32
 800179e:	f000 fa34 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017a2:	2020      	movs	r0, #32
 80017a4:	f000 fa4d 	bl	8001c42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	@ 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020400 	.word	0x40020400

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <NMI_Handler+0x4>

080017c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <MemManage_Handler+0x4>

080017d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f000 f8db 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <I2C1_EV_IRQHandler+0x10>)
 8001822:	f000 ff7d 	bl	8002720 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000090 	.word	0x20000090

08001830 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <I2C1_ER_IRQHandler+0x10>)
 8001836:	f001 f8e4 	bl	8002a02 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000090 	.word	0x20000090

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f003 fb14 	bl	8004ea0 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20020000 	.word	0x20020000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000500 	.word	0x20000500
 80018ac:	20000650 	.word	0x20000650

080018b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800190c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d8:	f7ff ffea 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	@ (8001914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f003 fad3 	bl	8004eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001906:	f7fe fe51 	bl	80005ac <main>
  bx  lr    
 800190a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800190c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001918:	08008460 	.word	0x08008460
  ldr r2, =_sbss
 800191c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001920:	20000650 	.word	0x20000650

08001924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <HAL_Init+0x40>)
 8001932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <HAL_Init+0x40>)
 800193e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_Init+0x40>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 f94f 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f808 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff feae 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f967 	bl	8001c5e <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f000 f92f 	bl	8001c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	@ (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000018 	.word	0x20000018
 80019c4:	20000020 	.word	0x20000020
 80019c8:	2000001c 	.word	0x2000001c

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000020 	.word	0x20000020
 80019f0:	20000504 	.word	0x20000504

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000504 	.word	0x20000504

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000020 	.word	0x20000020

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	@ (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	@ (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	@ 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7ff ff8e 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff29 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff3e 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff8e 	bl	8001b48 <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff31 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa2 	bl	8001bb0 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d004      	beq.n	8001c94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2280      	movs	r2, #128	@ 0x80
 8001c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e00c      	b.n	8001cae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2205      	movs	r2, #5
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc8:	b2db      	uxtb	r3, r3
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e159      	b.n	8001fa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8148 	bne.w	8001fa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a2 	beq.w	8001fa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b57      	ldr	r3, [pc, #348]	@ (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	4a56      	ldr	r2, [pc, #344]	@ (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6e:	4b54      	ldr	r3, [pc, #336]	@ (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a52      	ldr	r2, [pc, #328]	@ (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a49      	ldr	r2, [pc, #292]	@ (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x202>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a48      	ldr	r2, [pc, #288]	@ (8001fcc <HAL_GPIO_Init+0x2f4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x1fe>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a47      	ldr	r2, [pc, #284]	@ (8001fd0 <HAL_GPIO_Init+0x2f8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a46      	ldr	r2, [pc, #280]	@ (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x1f6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a45      	ldr	r2, [pc, #276]	@ (8001fd8 <HAL_GPIO_Init+0x300>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x1f2>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eda:	2300      	movs	r3, #0
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4935      	ldr	r1, [pc, #212]	@ (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f48:	4a24      	ldr	r2, [pc, #144]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f72:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	f67f aea2 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e12b      	b.n	800227e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fb66 	bl	800170c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	@ 0x24
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002078:	f002 fed4 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 800207c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a81      	ldr	r2, [pc, #516]	@ (8002288 <HAL_I2C_Init+0x274>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d807      	bhi.n	8002098 <HAL_I2C_Init+0x84>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a80      	ldr	r2, [pc, #512]	@ (800228c <HAL_I2C_Init+0x278>)
 800208c:	4293      	cmp	r3, r2
 800208e:	bf94      	ite	ls
 8002090:	2301      	movls	r3, #1
 8002092:	2300      	movhi	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e006      	b.n	80020a6 <HAL_I2C_Init+0x92>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a7d      	ldr	r2, [pc, #500]	@ (8002290 <HAL_I2C_Init+0x27c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	bf94      	ite	ls
 80020a0:	2301      	movls	r3, #1
 80020a2:	2300      	movhi	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0e7      	b.n	800227e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a78      	ldr	r2, [pc, #480]	@ (8002294 <HAL_I2C_Init+0x280>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002288 <HAL_I2C_Init+0x274>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d802      	bhi.n	80020e8 <HAL_I2C_Init+0xd4>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	e009      	b.n	80020fc <HAL_I2C_Init+0xe8>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	4a69      	ldr	r2, [pc, #420]	@ (8002298 <HAL_I2C_Init+0x284>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	3301      	adds	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800210e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	495c      	ldr	r1, [pc, #368]	@ (8002288 <HAL_I2C_Init+0x274>)
 8002118:	428b      	cmp	r3, r1
 800211a:	d819      	bhi.n	8002150 <HAL_I2C_Init+0x13c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e59      	subs	r1, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fbb1 f3f3 	udiv	r3, r1, r3
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002130:	400b      	ands	r3, r1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_I2C_Init+0x138>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e59      	subs	r1, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fbb1 f3f3 	udiv	r3, r1, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214a:	e051      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 800214c:	2304      	movs	r3, #4
 800214e:	e04f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <HAL_I2C_Init+0x168>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e012      	b.n	80021a2 <HAL_I2C_Init+0x18e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	0099      	lsls	r1, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Init+0x196>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e022      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10e      	bne.n	80021d0 <HAL_I2C_Init+0x1bc>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e58      	subs	r0, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	440b      	add	r3, r1
 80021c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ce:	e00f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	6809      	ldr	r1, [r1, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800221e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6911      	ldr	r1, [r2, #16]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	000186a0 	.word	0x000186a0
 800228c:	001e847f 	.word	0x001e847f
 8002290:	003d08ff 	.word	0x003d08ff
 8002294:	431bde83 	.word	0x431bde83
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ae:	2b80      	cmp	r3, #128	@ 0x80
 80022b0:	d103      	bne.n	80022ba <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
 80022d8:	4613      	mov	r3, r2
 80022da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff fb8a 	bl	80019f4 <HAL_GetTick>
 80022e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	f040 80e0 	bne.w	80024b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2319      	movs	r3, #25
 80022f6:	2201      	movs	r2, #1
 80022f8:	4970      	ldr	r1, [pc, #448]	@ (80024bc <HAL_I2C_Master_Transmit+0x1f4>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f001 ff3c 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	e0d3      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2C_Master_Transmit+0x50>
 8002314:	2302      	movs	r3, #2
 8002316:	e0cc      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d007      	beq.n	800233e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0201 	orr.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800234c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2221      	movs	r2, #33	@ 0x21
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2210      	movs	r2, #16
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	893a      	ldrh	r2, [r7, #8]
 800236e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a50      	ldr	r2, [pc, #320]	@ (80024c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800237e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f001 fdcc 	bl	8003f24 <I2C_MasterRequestWrite>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e08d      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023ac:	e066      	b.n	800247c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f001 fffa 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d107      	bne.n	80023d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d11b      	bne.n	8002450 <HAL_I2C_Master_Transmit+0x188>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d017      	beq.n	8002450 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	6a39      	ldr	r1, [r7, #32]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f001 fff1 	bl	800443c <I2C_WaitOnBTFFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	2b04      	cmp	r3, #4
 8002466:	d107      	bne.n	8002478 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002476:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e01a      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d194      	bne.n	80023ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	00100002 	.word	0x00100002
 80024c0:	ffff0000 	.word	0xffff0000

080024c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	460b      	mov	r3, r1
 80024d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff fa8e 	bl	80019f4 <HAL_GetTick>
 80024d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	f040 8111 	bne.w	800270e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2319      	movs	r3, #25
 80024f2:	2201      	movs	r2, #1
 80024f4:	4988      	ldr	r1, [pc, #544]	@ (8002718 <HAL_I2C_IsDeviceReady+0x254>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f001 fe3e 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	e104      	b.n	8002710 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_I2C_IsDeviceReady+0x50>
 8002510:	2302      	movs	r3, #2
 8002512:	e0fd      	b.n	8002710 <HAL_I2C_IsDeviceReady+0x24c>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d007      	beq.n	800253a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2224      	movs	r2, #36	@ 0x24
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a70      	ldr	r2, [pc, #448]	@ (800271c <HAL_I2C_IsDeviceReady+0x258>)
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800256c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f001 fdfc 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002594:	d103      	bne.n	800259e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800259c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0b6      	b.n	8002710 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025a2:	897b      	ldrh	r3, [r7, #10]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fa1f 	bl	80019f4 <HAL_GetTick>
 80025b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	bf0c      	ite	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	2300      	movne	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025e6:	e025      	b.n	8002634 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	f7ff fa04 	bl	80019f4 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d302      	bcc.n	80025fe <HAL_I2C_IsDeviceReady+0x13a>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	22a0      	movs	r2, #160	@ 0xa0
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2ba0      	cmp	r3, #160	@ 0xa0
 800263e:	d005      	beq.n	800264c <HAL_I2C_IsDeviceReady+0x188>
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_I2C_IsDeviceReady+0x188>
 8002646:	7dbb      	ldrb	r3, [r7, #22]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0cd      	beq.n	80025e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d129      	bne.n	80026b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002670:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2319      	movs	r3, #25
 800268e:	2201      	movs	r2, #1
 8002690:	4921      	ldr	r1, [pc, #132]	@ (8002718 <HAL_I2C_IsDeviceReady+0x254>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f001 fd70 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e036      	b.n	8002710 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e02c      	b.n	8002710 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2319      	movs	r3, #25
 80026d6:	2201      	movs	r2, #1
 80026d8:	490f      	ldr	r1, [pc, #60]	@ (8002718 <HAL_I2C_IsDeviceReady+0x254>)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 fd4c 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e012      	b.n	8002710 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f4ff af32 	bcc.w	800255e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	00100002 	.word	0x00100002
 800271c:	ffff0000 	.word	0xffff0000

08002720 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002740:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002748:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b10      	cmp	r3, #16
 800274e:	d003      	beq.n	8002758 <HAL_I2C_EV_IRQHandler+0x38>
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b40      	cmp	r3, #64	@ 0x40
 8002754:	f040 80c1 	bne.w	80028da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_I2C_EV_IRQHandler+0x6e>
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002778:	d003      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x62>
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002780:	d101      	bne.n	8002786 <HAL_I2C_EV_IRQHandler+0x66>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_I2C_EV_IRQHandler+0x68>
 8002786:	2300      	movs	r3, #0
 8002788:	2b01      	cmp	r3, #1
 800278a:	f000 8132 	beq.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_I2C_EV_IRQHandler+0x92>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	0a5b      	lsrs	r3, r3, #9
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f001 fef2 	bl	800458e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fd9b 	bl	80032e6 <I2C_Master_SB>
 80027b0:	e092      	b.n	80028d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	0a5b      	lsrs	r3, r3, #9
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fe11 	bl	80033f2 <I2C_Master_ADD10>
 80027d0:	e082      	b.n	80028d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	0a5b      	lsrs	r3, r3, #9
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fe2b 	bl	8003446 <I2C_Master_ADDR>
 80027f0:	e072      	b.n	80028d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d03b      	beq.n	8002876 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800280c:	f000 80f3 	beq.w	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	09db      	lsrs	r3, r3, #7
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00f      	beq.n	800283c <HAL_I2C_EV_IRQHandler+0x11c>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	0a9b      	lsrs	r3, r3, #10
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_I2C_EV_IRQHandler+0x11c>
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f9f3 	bl	8002c20 <I2C_MasterTransmit_TXE>
 800283a:	e04d      	b.n	80028d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80d6 	beq.w	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	0a5b      	lsrs	r3, r3, #9
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80cf 	beq.w	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	2b21      	cmp	r3, #33	@ 0x21
 800285c:	d103      	bne.n	8002866 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa7a 	bl	8002d58 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002864:	e0c7      	b.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	f040 80c4 	bne.w	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fae8 	bl	8002e44 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002874:	e0bf      	b.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002884:	f000 80b7 	beq.w	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00f      	beq.n	80028b4 <HAL_I2C_EV_IRQHandler+0x194>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_I2C_EV_IRQHandler+0x194>
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fb61 	bl	8002f74 <I2C_MasterReceive_RXNE>
 80028b2:	e011      	b.n	80028d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 809a 	beq.w	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	0a5b      	lsrs	r3, r3, #9
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8093 	beq.w	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fc17 	bl	8003104 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028d6:	e08e      	b.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80028d8:	e08d      	b.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e007      	b.n	80028fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d012      	beq.n	800292e <HAL_I2C_EV_IRQHandler+0x20e>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002924:	69b9      	ldr	r1, [r7, #24]
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 ffdc 	bl	80038e4 <I2C_Slave_ADDR>
 800292c:	e066      	b.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_I2C_EV_IRQHandler+0x22e>
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	0a5b      	lsrs	r3, r3, #9
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f001 f816 	bl	8003978 <I2C_Slave_STOPF>
 800294c:	e056      	b.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800294e:	7bbb      	ldrb	r3, [r7, #14]
 8002950:	2b21      	cmp	r3, #33	@ 0x21
 8002952:	d002      	beq.n	800295a <HAL_I2C_EV_IRQHandler+0x23a>
 8002954:	7bbb      	ldrb	r3, [r7, #14]
 8002956:	2b29      	cmp	r3, #41	@ 0x29
 8002958:	d125      	bne.n	80029a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	09db      	lsrs	r3, r3, #7
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00f      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0x266>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	0a9b      	lsrs	r3, r3, #10
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0x266>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fef2 	bl	8003768 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002984:	e039      	b.n	80029fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d033      	beq.n	80029fa <HAL_I2C_EV_IRQHandler+0x2da>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	0a5b      	lsrs	r3, r3, #9
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d02d      	beq.n	80029fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 ff1f 	bl	80037e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a4:	e029      	b.n	80029fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00f      	beq.n	80029d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	0a9b      	lsrs	r3, r3, #10
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 ff2a 	bl	8003824 <I2C_SlaveReceive_RXNE>
 80029d0:	e014      	b.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	0a5b      	lsrs	r3, r3, #9
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 ff58 	bl	80038a0 <I2C_SlaveReceive_BTF>
 80029f0:	e004      	b.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b08a      	sub	sp, #40	@ 0x28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a24:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00e      	beq.n	8002a50 <HAL_I2C_ER_IRQHandler+0x4e>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	0a5b      	lsrs	r3, r3, #9
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <HAL_I2C_ER_IRQHandler+0x78>
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002a78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	0a9b      	lsrs	r3, r3, #10
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03f      	beq.n	8002b06 <HAL_I2C_ER_IRQHandler+0x104>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d039      	beq.n	8002b06 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002a92:	7efb      	ldrb	r3, [r7, #27]
 8002a94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002aac:	7ebb      	ldrb	r3, [r7, #26]
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d112      	bne.n	8002ad8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b21      	cmp	r3, #33	@ 0x21
 8002abc:	d008      	beq.n	8002ad0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b29      	cmp	r3, #41	@ 0x29
 8002ac2:	d005      	beq.n	8002ad0 <HAL_I2C_ER_IRQHandler+0xce>
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b28      	cmp	r3, #40	@ 0x28
 8002ac8:	d106      	bne.n	8002ad8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b21      	cmp	r3, #33	@ 0x21
 8002ace:	d103      	bne.n	8002ad8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f001 f881 	bl	8003bd8 <I2C_Slave_AF>
 8002ad6:	e016      	b.n	8002b06 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ae0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002aea:	7efb      	ldrb	r3, [r7, #27]
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d002      	beq.n	8002af6 <HAL_I2C_ER_IRQHandler+0xf4>
 8002af0:	7efb      	ldrb	r3, [r7, #27]
 8002af2:	2b40      	cmp	r3, #64	@ 0x40
 8002af4:	d107      	bne.n	8002b06 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b04:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	0adb      	lsrs	r3, r3, #11
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00e      	beq.n	8002b30 <HAL_I2C_ER_IRQHandler+0x12e>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	f043 0308 	orr.w	r3, r3, #8
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002b2e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f001 f8bc 	bl	8003cc0 <I2C_ITError>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3728      	adds	r7, #40	@ 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
 8002bac:	4613      	mov	r3, r2
 8002bae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d150      	bne.n	8002ce8 <I2C_MasterTransmit_TXE+0xc8>
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b21      	cmp	r3, #33	@ 0x21
 8002c4a:	d14d      	bne.n	8002ce8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d01d      	beq.n	8002c8e <I2C_MasterTransmit_TXE+0x6e>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d01a      	beq.n	8002c8e <I2C_MasterTransmit_TXE+0x6e>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c5e:	d016      	beq.n	8002c8e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c6e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2211      	movs	r2, #17
 8002c74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff62 	bl	8002b50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c8c:	e060      	b.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c9c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b40      	cmp	r3, #64	@ 0x40
 8002cc6:	d107      	bne.n	8002cd8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff7d 	bl	8002bd0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cd6:	e03b      	b.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff35 	bl	8002b50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ce6:	e033      	b.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b21      	cmp	r3, #33	@ 0x21
 8002cec:	d005      	beq.n	8002cfa <I2C_MasterTransmit_TXE+0xda>
 8002cee:	7bbb      	ldrb	r3, [r7, #14]
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	d12d      	bne.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b22      	cmp	r3, #34	@ 0x22
 8002cf8:	d12a      	bne.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d108      	bne.n	8002d16 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d12:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d14:	e01c      	b.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b40      	cmp	r3, #64	@ 0x40
 8002d20:	d103      	bne.n	8002d2a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f88e 	bl	8002e44 <I2C_MemoryTransmit_TXE_BTF>
}
 8002d28:	e012      	b.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d4e:	e7ff      	b.n	8002d50 <I2C_MasterTransmit_TXE+0x130>
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b21      	cmp	r3, #33	@ 0x21
 8002d70:	d164      	bne.n	8002e3c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d012      	beq.n	8002da2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002da0:	e04c      	b.n	8002e3c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d01d      	beq.n	8002de4 <I2C_MasterTransmit_BTF+0x8c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d01a      	beq.n	8002de4 <I2C_MasterTransmit_BTF+0x8c>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002db4:	d016      	beq.n	8002de4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dc4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2211      	movs	r2, #17
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff feb7 	bl	8002b50 <HAL_I2C_MasterTxCpltCallback>
}
 8002de2:	e02b      	b.n	8002e3c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002df2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b40      	cmp	r3, #64	@ 0x40
 8002e1c:	d107      	bne.n	8002e2e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fed2 	bl	8002bd0 <HAL_I2C_MemTxCpltCallback>
}
 8002e2c:	e006      	b.n	8002e3c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fe8a 	bl	8002b50 <HAL_I2C_MasterTxCpltCallback>
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11d      	bne.n	8002e98 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10b      	bne.n	8002e7c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e74:	1c9a      	adds	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002e7a:	e077      	b.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	121b      	asrs	r3, r3, #8
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e96:	e069      	b.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d10b      	bne.n	8002eb8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002eb6:	e059      	b.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d152      	bne.n	8002f66 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b22      	cmp	r3, #34	@ 0x22
 8002ec4:	d10d      	bne.n	8002ee2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ee0:	e044      	b.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b21      	cmp	r3, #33	@ 0x21
 8002ef0:	d112      	bne.n	8002f18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f16:	e029      	b.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d124      	bne.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b21      	cmp	r3, #33	@ 0x21
 8002f26:	d121      	bne.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f36:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fe36 	bl	8002bd0 <HAL_I2C_MemTxCpltCallback>
}
 8002f64:	e002      	b.n	8002f6c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff f998 	bl	800229c <I2C_Flush_DR>
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b22      	cmp	r3, #34	@ 0x22
 8002f86:	f040 80b9 	bne.w	80030fc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d921      	bls.n	8002fe2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	f040 8096 	bne.w	80030fc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fde:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002fe0:	e08c      	b.n	80030fc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d07f      	beq.n	80030ea <I2C_MasterReceive_RXNE+0x176>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d002      	beq.n	8002ff6 <I2C_MasterReceive_RXNE+0x82>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d179      	bne.n	80030ea <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f001 fa68 	bl	80044cc <I2C_WaitOnSTOPRequestThroughIT>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d14c      	bne.n	800309c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003010:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003020:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d10a      	bne.n	8003072 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fdba 	bl	8002be4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003070:	e044      	b.n	80030fc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d002      	beq.n	8003086 <I2C_MasterReceive_RXNE+0x112>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b20      	cmp	r3, #32
 8003084:	d103      	bne.n	800308e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
 800308c:	e002      	b.n	8003094 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2212      	movs	r2, #18
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fd65 	bl	8002b64 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800309a:	e02f      	b.n	80030fc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fd88 	bl	8002bf8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030e8:	e008      	b.n	80030fc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f8:	605a      	str	r2, [r3, #4]
}
 80030fa:	e7ff      	b.n	80030fc <I2C_MasterReceive_RXNE+0x188>
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b04      	cmp	r3, #4
 800311a:	d11b      	bne.n	8003154 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003152:	e0c4      	b.n	80032de <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b03      	cmp	r3, #3
 800315c:	d129      	bne.n	80031b2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800316c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d00a      	beq.n	800318a <I2C_MasterReceive_BTF+0x86>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d007      	beq.n	800318a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003188:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80031b0:	e095      	b.n	80032de <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d17d      	bne.n	80032b8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <I2C_MasterReceive_BTF+0xc4>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d108      	bne.n	80031da <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e016      	b.n	8003208 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d002      	beq.n	80031e6 <I2C_MasterReceive_BTF+0xe2>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d108      	bne.n	80031f8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e007      	b.n	8003208 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003206:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003262:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d10a      	bne.n	800328e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fcac 	bl	8002be4 <HAL_I2C_MemRxCpltCallback>
}
 800328c:	e027      	b.n	80032de <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d002      	beq.n	80032a2 <I2C_MasterReceive_BTF+0x19e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d103      	bne.n	80032aa <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a8:	e002      	b.n	80032b0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2212      	movs	r2, #18
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fc57 	bl	8002b64 <HAL_I2C_MasterRxCpltCallback>
}
 80032b6:	e012      	b.n	80032de <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d117      	bne.n	800332a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003312:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003314:	e067      	b.n	80033e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]
}
 8003328:	e05d      	b.n	80033e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003332:	d133      	bne.n	800339c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b21      	cmp	r3, #33	@ 0x21
 800333e:	d109      	bne.n	8003354 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	e008      	b.n	8003366 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	b2da      	uxtb	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <I2C_Master_SB+0x92>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d032      	beq.n	80033e6 <I2C_Master_SB+0x100>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02d      	beq.n	80033e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003398:	605a      	str	r2, [r3, #4]
}
 800339a:	e024      	b.n	80033e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10e      	bne.n	80033c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	11db      	asrs	r3, r3, #7
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 0306 	and.w	r3, r3, #6
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f063 030f 	orn	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]
}
 80033c0:	e011      	b.n	80033e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10d      	bne.n	80033e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	11db      	asrs	r3, r3, #7
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 0306 	and.w	r3, r3, #6
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f063 030e 	orn	r3, r3, #14
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	611a      	str	r2, [r3, #16]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <I2C_Master_ADD10+0x26>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <I2C_Master_ADD10+0x48>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003438:	605a      	str	r2, [r3, #4]
  }
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b091      	sub	sp, #68	@ 0x44
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003454:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b22      	cmp	r3, #34	@ 0x22
 800346e:	f040 8169 	bne.w	8003744 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <I2C_Master_ADDR+0x54>
 800347a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800347e:	2b40      	cmp	r3, #64	@ 0x40
 8003480:	d10b      	bne.n	800349a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	633b      	str	r3, [r7, #48]	@ 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	e160      	b.n	800375c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11d      	bne.n	80034de <I2C_Master_ADDR+0x98>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80034aa:	d118      	bne.n	80034de <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	651a      	str	r2, [r3, #80]	@ 0x50
 80034dc:	e13e      	b.n	800375c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d113      	bne.n	8003510 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	2300      	movs	r3, #0
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e115      	b.n	800373c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	f040 808a 	bne.w	8003630 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003522:	d137      	bne.n	8003594 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003532:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800353e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003542:	d113      	bne.n	800356c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003552:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	e0e7      	b.n	800373c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e0d3      	b.n	800373c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003596:	2b08      	cmp	r3, #8
 8003598:	d02e      	beq.n	80035f8 <I2C_Master_ADDR+0x1b2>
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	2b20      	cmp	r3, #32
 800359e:	d02b      	beq.n	80035f8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	2b12      	cmp	r3, #18
 80035a4:	d102      	bne.n	80035ac <I2C_Master_ADDR+0x166>
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d125      	bne.n	80035f8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d00e      	beq.n	80035d0 <I2C_Master_ADDR+0x18a>
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d00b      	beq.n	80035d0 <I2C_Master_ADDR+0x18a>
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d008      	beq.n	80035d0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e007      	b.n	80035e0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035de:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	e0a1      	b.n	800373c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003606:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e085      	b.n	800373c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d14d      	bne.n	80036d6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800363a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363c:	2b04      	cmp	r3, #4
 800363e:	d016      	beq.n	800366e <I2C_Master_ADDR+0x228>
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	2b02      	cmp	r3, #2
 8003644:	d013      	beq.n	800366e <I2C_Master_ADDR+0x228>
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	2b10      	cmp	r3, #16
 800364a:	d010      	beq.n	800366e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800365a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e007      	b.n	800367e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800367c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368c:	d117      	bne.n	80036be <I2C_Master_ADDR+0x278>
 800368e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003690:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003694:	d00b      	beq.n	80036ae <I2C_Master_ADDR+0x268>
 8003696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003698:	2b01      	cmp	r3, #1
 800369a:	d008      	beq.n	80036ae <I2C_Master_ADDR+0x268>
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d005      	beq.n	80036ae <I2C_Master_ADDR+0x268>
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d002      	beq.n	80036ae <I2C_Master_ADDR+0x268>
 80036a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d107      	bne.n	80036be <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	e032      	b.n	800373c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036e4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f4:	d117      	bne.n	8003726 <I2C_Master_ADDR+0x2e0>
 80036f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036fc:	d00b      	beq.n	8003716 <I2C_Master_ADDR+0x2d0>
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	2b01      	cmp	r3, #1
 8003702:	d008      	beq.n	8003716 <I2C_Master_ADDR+0x2d0>
 8003704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003706:	2b08      	cmp	r3, #8
 8003708:	d005      	beq.n	8003716 <I2C_Master_ADDR+0x2d0>
 800370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370c:	2b10      	cmp	r3, #16
 800370e:	d002      	beq.n	8003716 <I2C_Master_ADDR+0x2d0>
 8003710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003712:	2b20      	cmp	r3, #32
 8003714:	d107      	bne.n	8003726 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003724:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003742:	e00b      	b.n	800375c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
}
 800375a:	e7ff      	b.n	800375c <I2C_Master_ADDR+0x316>
 800375c:	bf00      	nop
 800375e:	3744      	adds	r7, #68	@ 0x44
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d02b      	beq.n	80037da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d114      	bne.n	80037da <I2C_SlaveTransmit_TXE+0x72>
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b29      	cmp	r3, #41	@ 0x29
 80037b4:	d111      	bne.n	80037da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2221      	movs	r2, #33	@ 0x21
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2228      	movs	r2, #40	@ 0x28
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff f9cf 	bl	8002b78 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d011      	beq.n	8003818 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003832:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02c      	beq.n	8003898 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d114      	bne.n	8003898 <I2C_SlaveReceive_RXNE+0x74>
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b2a      	cmp	r3, #42	@ 0x2a
 8003872:	d111      	bne.n	8003898 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003882:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2222      	movs	r2, #34	@ 0x22
 8003888:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2228      	movs	r2, #40	@ 0x28
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff f97a 	bl	8002b8c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d012      	beq.n	80038d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038fe:	2b28      	cmp	r3, #40	@ 0x28
 8003900:	d127      	bne.n	8003952 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003910:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	09db      	lsrs	r3, r3, #7
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	81bb      	strh	r3, [r7, #12]
 8003934:	e002      	b.n	800393c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003944:	89ba      	ldrh	r2, [r7, #12]
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	4619      	mov	r1, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff f928 	bl	8002ba0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003950:	e00e      	b.n	8003970 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003986:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003996:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d4:	d172      	bne.n	8003abc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b22      	cmp	r3, #34	@ 0x22
 80039da:	d002      	beq.n	80039e2 <I2C_Slave_STOPF+0x6a>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b2a      	cmp	r3, #42	@ 0x2a
 80039e0:	d135      	bne.n	8003a4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	f043 0204 	orr.w	r2, r3, #4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f94d 	bl	8001cba <HAL_DMA_GetState>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d049      	beq.n	8003aba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	4a69      	ldr	r2, [pc, #420]	@ (8003bd0 <I2C_Slave_STOPF+0x258>)
 8003a2c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe f91f 	bl	8001c76 <HAL_DMA_Abort_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03d      	beq.n	8003aba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a4c:	e035      	b.n	8003aba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe f917 	bl	8001cba <HAL_DMA_GetState>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d014      	beq.n	8003abc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	4a4e      	ldr	r2, [pc, #312]	@ (8003bd0 <I2C_Slave_STOPF+0x258>)
 8003a98:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe f8e9 	bl	8001c76 <HAL_DMA_Abort_IT>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4798      	blx	r3
 8003ab8:	e000      	b.n	8003abc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003aba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d03e      	beq.n	8003b44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d112      	bne.n	8003afa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b04:	2b40      	cmp	r3, #64	@ 0x40
 8003b06:	d112      	bne.n	8003b2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8b7 	bl	8003cc0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b52:	e039      	b.n	8003bc8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b58:	d109      	bne.n	8003b6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2228      	movs	r2, #40	@ 0x28
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff f80f 	bl	8002b8c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b28      	cmp	r3, #40	@ 0x28
 8003b78:	d111      	bne.n	8003b9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	@ (8003bd4 <I2C_Slave_STOPF+0x25c>)
 8003b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff f810 	bl	8002bbc <HAL_I2C_ListenCpltCallback>
}
 8003b9c:	e014      	b.n	8003bc8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	2b22      	cmp	r3, #34	@ 0x22
 8003ba4:	d002      	beq.n	8003bac <I2C_Slave_STOPF+0x234>
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b22      	cmp	r3, #34	@ 0x22
 8003baa:	d10d      	bne.n	8003bc8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe ffe2 	bl	8002b8c <HAL_I2C_SlaveRxCpltCallback>
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08004029 	.word	0x08004029
 8003bd4:	ffff0000 	.word	0xffff0000

08003bd8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d002      	beq.n	8003bfa <I2C_Slave_AF+0x22>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d129      	bne.n	8003c4e <I2C_Slave_AF+0x76>
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b28      	cmp	r3, #40	@ 0x28
 8003bfe:	d126      	bne.n	8003c4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a2e      	ldr	r2, [pc, #184]	@ (8003cbc <I2C_Slave_AF+0xe4>)
 8003c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe ffb8 	bl	8002bbc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003c4c:	e031      	b.n	8003cb2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b21      	cmp	r3, #33	@ 0x21
 8003c52:	d129      	bne.n	8003ca8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a19      	ldr	r2, [pc, #100]	@ (8003cbc <I2C_Slave_AF+0xe4>)
 8003c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c98:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fe fafe 	bl	800229c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7fe ff69 	bl	8002b78 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ca6:	e004      	b.n	8003cb2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cb0:	615a      	str	r2, [r3, #20]
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	ffff0000 	.word	0xffff0000

08003cc0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cd8:	7bbb      	ldrb	r3, [r7, #14]
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d002      	beq.n	8003ce4 <I2C_ITError+0x24>
 8003cde:	7bbb      	ldrb	r3, [r7, #14]
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d10a      	bne.n	8003cfa <I2C_ITError+0x3a>
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b22      	cmp	r3, #34	@ 0x22
 8003ce8:	d107      	bne.n	8003cfa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d00:	2b28      	cmp	r3, #40	@ 0x28
 8003d02:	d107      	bne.n	8003d14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2228      	movs	r2, #40	@ 0x28
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d12:	e015      	b.n	8003d40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d22:	d00a      	beq.n	8003d3a <I2C_ITError+0x7a>
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b60      	cmp	r3, #96	@ 0x60
 8003d28:	d007      	beq.n	8003d3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d4e:	d162      	bne.n	8003e16 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d020      	beq.n	8003db0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	4a6a      	ldr	r2, [pc, #424]	@ (8003f1c <I2C_ITError+0x25c>)
 8003d74:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd ff7b 	bl	8001c76 <HAL_DMA_Abort_IT>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8089 	beq.w	8003e9a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003daa:	4610      	mov	r0, r2
 8003dac:	4798      	blx	r3
 8003dae:	e074      	b.n	8003e9a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	4a59      	ldr	r2, [pc, #356]	@ (8003f1c <I2C_ITError+0x25c>)
 8003db6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fd ff5a 	bl	8001c76 <HAL_DMA_Abort_IT>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d068      	beq.n	8003e9a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd2:	2b40      	cmp	r3, #64	@ 0x40
 8003dd4:	d10b      	bne.n	8003dee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e10:	4610      	mov	r0, r2
 8003e12:	4798      	blx	r3
 8003e14:	e041      	b.n	8003e9a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b60      	cmp	r3, #96	@ 0x60
 8003e20:	d125      	bne.n	8003e6e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	d10b      	bne.n	8003e56 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fe fed0 	bl	8002c0c <HAL_I2C_AbortCpltCallback>
 8003e6c:	e015      	b.n	8003e9a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b40      	cmp	r3, #64	@ 0x40
 8003e7a:	d10b      	bne.n	8003e94 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fe feaf 	bl	8002bf8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10e      	bne.n	8003ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ede:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d113      	bne.n	8003f14 <I2C_ITError+0x254>
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b28      	cmp	r3, #40	@ 0x28
 8003ef0:	d110      	bne.n	8003f14 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f20 <I2C_ITError+0x260>)
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe fe54 	bl	8002bbc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	08004029 	.word	0x08004029
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d006      	beq.n	8003f4e <I2C_MasterRequestWrite+0x2a>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d003      	beq.n	8003f4e <I2C_MasterRequestWrite+0x2a>
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f4c:	d108      	bne.n	8003f60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e00b      	b.n	8003f78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	2b12      	cmp	r3, #18
 8003f66:	d107      	bne.n	8003f78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f8f7 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9e:	d103      	bne.n	8003fa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fa6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e035      	b.n	8004018 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb4:	d108      	bne.n	8003fc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fc4:	611a      	str	r2, [r3, #16]
 8003fc6:	e01b      	b.n	8004000 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fc8:	897b      	ldrh	r3, [r7, #10]
 8003fca:	11db      	asrs	r3, r3, #7
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 0306 	and.w	r3, r3, #6
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f063 030f 	orn	r3, r3, #15
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	490e      	ldr	r1, [pc, #56]	@ (8004020 <I2C_MasterRequestWrite+0xfc>)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f940 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e010      	b.n	8004018 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ff6:	897b      	ldrh	r3, [r7, #10]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4907      	ldr	r1, [pc, #28]	@ (8004024 <I2C_MasterRequestWrite+0x100>)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f930 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	00010008 	.word	0x00010008
 8004024:	00010002 	.word	0x00010002

08004028 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004040:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004042:	4b4b      	ldr	r3, [pc, #300]	@ (8004170 <I2C_DMAAbort+0x148>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	08db      	lsrs	r3, r3, #3
 8004048:	4a4a      	ldr	r2, [pc, #296]	@ (8004174 <I2C_DMAAbort+0x14c>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a1a      	lsrs	r2, r3, #8
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00da      	lsls	r2, r3, #3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800406e:	e00a      	b.n	8004086 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3b01      	subs	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004084:	d0ea      	beq.n	800405c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004092:	2200      	movs	r2, #0
 8004094:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a2:	2200      	movs	r2, #0
 80040a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c8:	2200      	movs	r2, #0
 80040ca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	2200      	movs	r2, #0
 80040da:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b60      	cmp	r3, #96	@ 0x60
 80040f6:	d10e      	bne.n	8004116 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2200      	movs	r2, #0
 800410c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7fe fd7c 	bl	8002c0c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004114:	e027      	b.n	8004166 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800411c:	2b28      	cmp	r3, #40	@ 0x28
 800411e:	d117      	bne.n	8004150 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800413e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2228      	movs	r2, #40	@ 0x28
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800414e:	e007      	b.n	8004160 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f7fe fd49 	bl	8002bf8 <HAL_I2C_ErrorCallback>
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000018 	.word	0x20000018
 8004174:	14f8b589 	.word	0x14f8b589

08004178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004188:	e048      	b.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d044      	beq.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fd fc2f 	bl	80019f4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d139      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10d      	bne.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	e00c      	b.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	43da      	mvns	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4013      	ands	r3, r2
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d116      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e023      	b.n	8004264 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d10d      	bne.n	8004242 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	43da      	mvns	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	e00c      	b.n	800425c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	43da      	mvns	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	429a      	cmp	r2, r3
 8004260:	d093      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800427a:	e071      	b.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d123      	bne.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e067      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d041      	beq.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fd fb8a 	bl	80019f4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d136      	bne.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10c      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e00b      	b.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e021      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10c      	bne.n	8004384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	43da      	mvns	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e00b      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	f47f af6d 	bne.w	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b8:	e034      	b.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8b8 	bl	8004530 <I2C_IsAcknowledgeFailed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e034      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d028      	beq.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fd fb0f 	bl	80019f4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11d      	bne.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	2b80      	cmp	r3, #128	@ 0x80
 80043f4:	d016      	beq.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442e:	2b80      	cmp	r3, #128	@ 0x80
 8004430:	d1c3      	bne.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004448:	e034      	b.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f870 	bl	8004530 <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e034      	b.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d028      	beq.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fd fac7 	bl	80019f4 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11d      	bne.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d016      	beq.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d1c3      	bne.n	800444a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	4a13      	ldr	r2, [pc, #76]	@ (800452c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0a1a      	lsrs	r2, r3, #8
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e008      	b.n	800451c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004518:	d0e9      	beq.n	80044ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20000018 	.word	0x20000018
 800452c:	14f8b589 	.word	0x14f8b589

08004530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004546:	d11b      	bne.n	8004580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800459e:	d103      	bne.n	80045a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80045a6:	e007      	b.n	80045b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80045b0:	d102      	bne.n	80045b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2208      	movs	r2, #8
 80045b6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e267      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d075      	beq.n	80046ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045e2:	4b88      	ldr	r3, [pc, #544]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d00c      	beq.n	8004608 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ee:	4b85      	ldr	r3, [pc, #532]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d112      	bne.n	8004620 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fa:	4b82      	ldr	r3, [pc, #520]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004606:	d10b      	bne.n	8004620 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	4b7e      	ldr	r3, [pc, #504]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05b      	beq.n	80046cc <HAL_RCC_OscConfig+0x108>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d157      	bne.n	80046cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e242      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x74>
 800462a:	4b76      	ldr	r3, [pc, #472]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a75      	ldr	r2, [pc, #468]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e01d      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x98>
 8004642:	4b70      	ldr	r3, [pc, #448]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6f      	ldr	r2, [pc, #444]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b6d      	ldr	r3, [pc, #436]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6c      	ldr	r2, [pc, #432]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 800465c:	4b69      	ldr	r3, [pc, #420]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a68      	ldr	r2, [pc, #416]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b66      	ldr	r3, [pc, #408]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a65      	ldr	r2, [pc, #404]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fd f9ba 	bl	80019f4 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004684:	f7fd f9b6 	bl	80019f4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	@ 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e207      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4b5b      	ldr	r3, [pc, #364]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0xc0>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fd f9a6 	bl	80019f4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd f9a2 	bl	80019f4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	@ 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1f3      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046be:	4b51      	ldr	r3, [pc, #324]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0xe8>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d063      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046da:	4b4a      	ldr	r3, [pc, #296]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e6:	4b47      	ldr	r3, [pc, #284]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d11c      	bne.n	800472c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	4b44      	ldr	r3, [pc, #272]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d116      	bne.n	800472c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	4b41      	ldr	r3, [pc, #260]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_RCC_OscConfig+0x152>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e1c7      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004716:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4937      	ldr	r1, [pc, #220]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	e03a      	b.n	80047a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004734:	4b34      	ldr	r3, [pc, #208]	@ (8004808 <HAL_RCC_OscConfig+0x244>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd f95b 	bl	80019f4 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004742:	f7fd f957 	bl	80019f4 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1a8      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004754:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004760:	4b28      	ldr	r3, [pc, #160]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4925      	ldr	r1, [pc, #148]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004770:	4313      	orrs	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
 8004774:	e015      	b.n	80047a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004776:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <HAL_RCC_OscConfig+0x244>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fd f93a 	bl	80019f4 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004784:	f7fd f936 	bl	80019f4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e187      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d036      	beq.n	800481c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b6:	4b15      	ldr	r3, [pc, #84]	@ (800480c <HAL_RCC_OscConfig+0x248>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd f91a 	bl	80019f4 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c4:	f7fd f916 	bl	80019f4 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e167      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80047d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x200>
 80047e2:	e01b      	b.n	800481c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e4:	4b09      	ldr	r3, [pc, #36]	@ (800480c <HAL_RCC_OscConfig+0x248>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fd f903 	bl	80019f4 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f0:	e00e      	b.n	8004810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f2:	f7fd f8ff 	bl	80019f4 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d907      	bls.n	8004810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e150      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
 8004804:	40023800 	.word	0x40023800
 8004808:	42470000 	.word	0x42470000
 800480c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	4b88      	ldr	r3, [pc, #544]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1ea      	bne.n	80047f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8097 	beq.w	8004958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482e:	4b81      	ldr	r3, [pc, #516]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	4a7c      	ldr	r2, [pc, #496]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004848:	6413      	str	r3, [r2, #64]	@ 0x40
 800484a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004856:	2301      	movs	r3, #1
 8004858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485a:	4b77      	ldr	r3, [pc, #476]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d118      	bne.n	8004898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004866:	4b74      	ldr	r3, [pc, #464]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a73      	ldr	r2, [pc, #460]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004872:	f7fd f8bf 	bl	80019f4 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487a:	f7fd f8bb 	bl	80019f4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e10c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x2ea>
 80048a0:	4b64      	ldr	r3, [pc, #400]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	4a63      	ldr	r2, [pc, #396]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ac:	e01c      	b.n	80048e8 <HAL_RCC_OscConfig+0x324>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x30c>
 80048b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048bc:	f043 0304 	orr.w	r3, r3, #4
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0x324>
 80048d0:	4b58      	ldr	r3, [pc, #352]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d4:	4a57      	ldr	r2, [pc, #348]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	6713      	str	r3, [r2, #112]	@ 0x70
 80048dc:	4b55      	ldr	r3, [pc, #340]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e0:	4a54      	ldr	r2, [pc, #336]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 0304 	bic.w	r3, r3, #4
 80048e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d015      	beq.n	800491c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd f880 	bl	80019f4 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fd f87c 	bl	80019f4 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0cb      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490e:	4b49      	ldr	r3, [pc, #292]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0ee      	beq.n	80048f8 <HAL_RCC_OscConfig+0x334>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491c:	f7fd f86a 	bl	80019f4 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004922:	e00a      	b.n	800493a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fd f866 	bl	80019f4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0b5      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ee      	bne.n	8004924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d105      	bne.n	8004958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494c:	4b39      	ldr	r3, [pc, #228]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	4a38      	ldr	r2, [pc, #224]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004956:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a1 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004962:	4b34      	ldr	r3, [pc, #208]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b08      	cmp	r3, #8
 800496c:	d05c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d141      	bne.n	80049fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004976:	4b31      	ldr	r3, [pc, #196]	@ (8004a3c <HAL_RCC_OscConfig+0x478>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fd f83a 	bl	80019f4 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fd f836 	bl	80019f4 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e087      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	4b27      	ldr	r3, [pc, #156]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	3b01      	subs	r3, #1
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	491b      	ldr	r1, [pc, #108]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <HAL_RCC_OscConfig+0x478>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d2:	f7fd f80f 	bl	80019f4 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049da:	f7fd f80b 	bl	80019f4 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e05c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x416>
 80049f8:	e054      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4b10      	ldr	r3, [pc, #64]	@ (8004a3c <HAL_RCC_OscConfig+0x478>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7fc fff8 	bl	80019f4 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fc fff4 	bl	80019f4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e045      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x444>
 8004a26:	e03d      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e038      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40007000 	.word	0x40007000
 8004a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <HAL_RCC_OscConfig+0x4ec>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d028      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d121      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d11a      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a70:	4013      	ands	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d111      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0cc      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b68      	ldr	r3, [pc, #416]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d90c      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b65      	ldr	r3, [pc, #404]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b63      	ldr	r3, [pc, #396]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0b8      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b08:	4b59      	ldr	r3, [pc, #356]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a58      	ldr	r2, [pc, #352]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b20:	4b53      	ldr	r3, [pc, #332]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a52      	ldr	r2, [pc, #328]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b50      	ldr	r3, [pc, #320]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	494d      	ldr	r1, [pc, #308]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d044      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d119      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b72:	4b3f      	ldr	r3, [pc, #252]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e06f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b82:	4b3b      	ldr	r3, [pc, #236]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e067      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	4b37      	ldr	r3, [pc, #220]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 0203 	bic.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4934      	ldr	r1, [pc, #208]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba4:	f7fc ff26 	bl	80019f4 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bac:	f7fc ff22 	bl	80019f4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e04f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 020c 	and.w	r2, r3, #12
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1eb      	bne.n	8004bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b25      	ldr	r3, [pc, #148]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d20c      	bcs.n	8004bfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e032      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c08:	4b19      	ldr	r3, [pc, #100]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4916      	ldr	r1, [pc, #88]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c26:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	490e      	ldr	r1, [pc, #56]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c3a:	f000 f821 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	490a      	ldr	r1, [pc, #40]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	5ccb      	ldrb	r3, [r1, r3]
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	4a09      	ldr	r2, [pc, #36]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c56:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fc fe86 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023c00 	.word	0x40023c00
 8004c70:	40023800 	.word	0x40023800
 8004c74:	08008404 	.word	0x08008404
 8004c78:	20000018 	.word	0x20000018
 8004c7c:	2000001c 	.word	0x2000001c

08004c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b090      	sub	sp, #64	@ 0x40
 8004c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c98:	4b59      	ldr	r3, [pc, #356]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	f200 80a1 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x16c>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d003      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x3a>
 8004cb2:	e09b      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b53      	ldr	r3, [pc, #332]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cb8:	e09b      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cba:	4b53      	ldr	r3, [pc, #332]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cbe:	e098      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cca:	4b4d      	ldr	r3, [pc, #308]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d028      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	2200      	movs	r2, #0
 8004cde:	623b      	str	r3, [r7, #32]
 8004ce0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4b47      	ldr	r3, [pc, #284]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cec:	fb03 f201 	mul.w	r2, r3, r1
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	fb00 f303 	mul.w	r3, r0, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	4a43      	ldr	r2, [pc, #268]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cfa:	fba0 1202 	umull	r1, r2, r0, r2
 8004cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d00:	460a      	mov	r2, r1
 8004d02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d06:	4413      	add	r3, r2
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	61fa      	str	r2, [r7, #28]
 8004d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d1a:	f7fb fab1 	bl	8000280 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4613      	mov	r3, r2
 8004d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d26:	e053      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d28:	4b35      	ldr	r3, [pc, #212]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	099b      	lsrs	r3, r3, #6
 8004d2e:	2200      	movs	r2, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	617a      	str	r2, [r7, #20]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d3a:	f04f 0b00 	mov.w	fp, #0
 8004d3e:	4652      	mov	r2, sl
 8004d40:	465b      	mov	r3, fp
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d50:	0150      	lsls	r0, r2, #5
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	ebb2 080a 	subs.w	r8, r2, sl
 8004d5a:	eb63 090b 	sbc.w	r9, r3, fp
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d72:	ebb2 0408 	subs.w	r4, r2, r8
 8004d76:	eb63 0509 	sbc.w	r5, r3, r9
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	00eb      	lsls	r3, r5, #3
 8004d84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d88:	00e2      	lsls	r2, r4, #3
 8004d8a:	4614      	mov	r4, r2
 8004d8c:	461d      	mov	r5, r3
 8004d8e:	eb14 030a 	adds.w	r3, r4, sl
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	eb45 030b 	adc.w	r3, r5, fp
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004da6:	4629      	mov	r1, r5
 8004da8:	028b      	lsls	r3, r1, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db0:	4621      	mov	r1, r4
 8004db2:	028a      	lsls	r2, r1, #10
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dba:	2200      	movs	r2, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	60fa      	str	r2, [r7, #12]
 8004dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc4:	f7fb fa5c 	bl	8000280 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3740      	adds	r7, #64	@ 0x40
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	017d7840 	.word	0x017d7840

08004e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e10:	4b03      	ldr	r3, [pc, #12]	@ (8004e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000018 	.word	0x20000018

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e28:	f7ff fff0 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0a9b      	lsrs	r3, r3, #10
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	@ (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	08008414 	.word	0x08008414

08004e4c <siprintf>:
 8004e4c:	b40e      	push	{r1, r2, r3}
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	b09d      	sub	sp, #116	@ 0x74
 8004e52:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004e54:	9002      	str	r0, [sp, #8]
 8004e56:	9006      	str	r0, [sp, #24]
 8004e58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e5c:	480a      	ldr	r0, [pc, #40]	@ (8004e88 <siprintf+0x3c>)
 8004e5e:	9107      	str	r1, [sp, #28]
 8004e60:	9104      	str	r1, [sp, #16]
 8004e62:	490a      	ldr	r1, [pc, #40]	@ (8004e8c <siprintf+0x40>)
 8004e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e68:	9105      	str	r1, [sp, #20]
 8004e6a:	2400      	movs	r4, #0
 8004e6c:	a902      	add	r1, sp, #8
 8004e6e:	6800      	ldr	r0, [r0, #0]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e74:	f000 f994 	bl	80051a0 <_svfiprintf_r>
 8004e78:	9b02      	ldr	r3, [sp, #8]
 8004e7a:	701c      	strb	r4, [r3, #0]
 8004e7c:	b01d      	add	sp, #116	@ 0x74
 8004e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e82:	b003      	add	sp, #12
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000024 	.word	0x20000024
 8004e8c:	ffff0208 	.word	0xffff0208

08004e90 <memset>:
 8004e90:	4402      	add	r2, r0
 8004e92:	4603      	mov	r3, r0
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d100      	bne.n	8004e9a <memset+0xa>
 8004e98:	4770      	bx	lr
 8004e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9e:	e7f9      	b.n	8004e94 <memset+0x4>

08004ea0 <__errno>:
 8004ea0:	4b01      	ldr	r3, [pc, #4]	@ (8004ea8 <__errno+0x8>)
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000024 	.word	0x20000024

08004eac <__libc_init_array>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4d0d      	ldr	r5, [pc, #52]	@ (8004ee4 <__libc_init_array+0x38>)
 8004eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ee8 <__libc_init_array+0x3c>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	42a6      	cmp	r6, r4
 8004eba:	d109      	bne.n	8004ed0 <__libc_init_array+0x24>
 8004ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8004eec <__libc_init_array+0x40>)
 8004ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8004ef0 <__libc_init_array+0x44>)
 8004ec0:	f000 fc64 	bl	800578c <_init>
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	2600      	movs	r6, #0
 8004eca:	42a6      	cmp	r6, r4
 8004ecc:	d105      	bne.n	8004eda <__libc_init_array+0x2e>
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed4:	4798      	blx	r3
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7ee      	b.n	8004eb8 <__libc_init_array+0xc>
 8004eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ede:	4798      	blx	r3
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7f2      	b.n	8004eca <__libc_init_array+0x1e>
 8004ee4:	08008458 	.word	0x08008458
 8004ee8:	08008458 	.word	0x08008458
 8004eec:	08008458 	.word	0x08008458
 8004ef0:	0800845c 	.word	0x0800845c

08004ef4 <__retarget_lock_acquire_recursive>:
 8004ef4:	4770      	bx	lr

08004ef6 <__retarget_lock_release_recursive>:
 8004ef6:	4770      	bx	lr

08004ef8 <_free_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4605      	mov	r5, r0
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d041      	beq.n	8004f84 <_free_r+0x8c>
 8004f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f04:	1f0c      	subs	r4, r1, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfb8      	it	lt
 8004f0a:	18e4      	addlt	r4, r4, r3
 8004f0c:	f000 f8e0 	bl	80050d0 <__malloc_lock>
 8004f10:	4a1d      	ldr	r2, [pc, #116]	@ (8004f88 <_free_r+0x90>)
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	b933      	cbnz	r3, 8004f24 <_free_r+0x2c>
 8004f16:	6063      	str	r3, [r4, #4]
 8004f18:	6014      	str	r4, [r2, #0]
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f20:	f000 b8dc 	b.w	80050dc <__malloc_unlock>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d908      	bls.n	8004f3a <_free_r+0x42>
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	1821      	adds	r1, r4, r0
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	bf01      	itttt	eq
 8004f30:	6819      	ldreq	r1, [r3, #0]
 8004f32:	685b      	ldreq	r3, [r3, #4]
 8004f34:	1809      	addeq	r1, r1, r0
 8004f36:	6021      	streq	r1, [r4, #0]
 8004f38:	e7ed      	b.n	8004f16 <_free_r+0x1e>
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	b10b      	cbz	r3, 8004f44 <_free_r+0x4c>
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d9fa      	bls.n	8004f3a <_free_r+0x42>
 8004f44:	6811      	ldr	r1, [r2, #0]
 8004f46:	1850      	adds	r0, r2, r1
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d10b      	bne.n	8004f64 <_free_r+0x6c>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	4401      	add	r1, r0
 8004f50:	1850      	adds	r0, r2, r1
 8004f52:	4283      	cmp	r3, r0
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	d1e0      	bne.n	8004f1a <_free_r+0x22>
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	6053      	str	r3, [r2, #4]
 8004f5e:	4408      	add	r0, r1
 8004f60:	6010      	str	r0, [r2, #0]
 8004f62:	e7da      	b.n	8004f1a <_free_r+0x22>
 8004f64:	d902      	bls.n	8004f6c <_free_r+0x74>
 8004f66:	230c      	movs	r3, #12
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	e7d6      	b.n	8004f1a <_free_r+0x22>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	1821      	adds	r1, r4, r0
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf04      	itt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	6063      	str	r3, [r4, #4]
 8004f7a:	bf04      	itt	eq
 8004f7c:	1809      	addeq	r1, r1, r0
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	6054      	str	r4, [r2, #4]
 8004f82:	e7ca      	b.n	8004f1a <_free_r+0x22>
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
 8004f86:	bf00      	nop
 8004f88:	2000064c 	.word	0x2000064c

08004f8c <sbrk_aligned>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8004fcc <sbrk_aligned+0x40>)
 8004f90:	460c      	mov	r4, r1
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	4605      	mov	r5, r0
 8004f96:	b911      	cbnz	r1, 8004f9e <sbrk_aligned+0x12>
 8004f98:	f000 fba4 	bl	80056e4 <_sbrk_r>
 8004f9c:	6030      	str	r0, [r6, #0]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fb9f 	bl	80056e4 <_sbrk_r>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	d103      	bne.n	8004fb2 <sbrk_aligned+0x26>
 8004faa:	f04f 34ff 	mov.w	r4, #4294967295
 8004fae:	4620      	mov	r0, r4
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	1cc4      	adds	r4, r0, #3
 8004fb4:	f024 0403 	bic.w	r4, r4, #3
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d0f8      	beq.n	8004fae <sbrk_aligned+0x22>
 8004fbc:	1a21      	subs	r1, r4, r0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fb90 	bl	80056e4 <_sbrk_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d1f2      	bne.n	8004fae <sbrk_aligned+0x22>
 8004fc8:	e7ef      	b.n	8004faa <sbrk_aligned+0x1e>
 8004fca:	bf00      	nop
 8004fcc:	20000648 	.word	0x20000648

08004fd0 <_malloc_r>:
 8004fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	1ccd      	adds	r5, r1, #3
 8004fd6:	f025 0503 	bic.w	r5, r5, #3
 8004fda:	3508      	adds	r5, #8
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	bf38      	it	cc
 8004fe0:	250c      	movcc	r5, #12
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	db01      	blt.n	8004fec <_malloc_r+0x1c>
 8004fe8:	42a9      	cmp	r1, r5
 8004fea:	d904      	bls.n	8004ff6 <_malloc_r+0x26>
 8004fec:	230c      	movs	r3, #12
 8004fee:	6033      	str	r3, [r6, #0]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050cc <_malloc_r+0xfc>
 8004ffa:	f000 f869 	bl	80050d0 <__malloc_lock>
 8004ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8005002:	461c      	mov	r4, r3
 8005004:	bb44      	cbnz	r4, 8005058 <_malloc_r+0x88>
 8005006:	4629      	mov	r1, r5
 8005008:	4630      	mov	r0, r6
 800500a:	f7ff ffbf 	bl	8004f8c <sbrk_aligned>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	4604      	mov	r4, r0
 8005012:	d158      	bne.n	80050c6 <_malloc_r+0xf6>
 8005014:	f8d8 4000 	ldr.w	r4, [r8]
 8005018:	4627      	mov	r7, r4
 800501a:	2f00      	cmp	r7, #0
 800501c:	d143      	bne.n	80050a6 <_malloc_r+0xd6>
 800501e:	2c00      	cmp	r4, #0
 8005020:	d04b      	beq.n	80050ba <_malloc_r+0xea>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	4639      	mov	r1, r7
 8005026:	4630      	mov	r0, r6
 8005028:	eb04 0903 	add.w	r9, r4, r3
 800502c:	f000 fb5a 	bl	80056e4 <_sbrk_r>
 8005030:	4581      	cmp	r9, r0
 8005032:	d142      	bne.n	80050ba <_malloc_r+0xea>
 8005034:	6821      	ldr	r1, [r4, #0]
 8005036:	1a6d      	subs	r5, r5, r1
 8005038:	4629      	mov	r1, r5
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff ffa6 	bl	8004f8c <sbrk_aligned>
 8005040:	3001      	adds	r0, #1
 8005042:	d03a      	beq.n	80050ba <_malloc_r+0xea>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	442b      	add	r3, r5
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	f8d8 3000 	ldr.w	r3, [r8]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	bb62      	cbnz	r2, 80050ac <_malloc_r+0xdc>
 8005052:	f8c8 7000 	str.w	r7, [r8]
 8005056:	e00f      	b.n	8005078 <_malloc_r+0xa8>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	1b52      	subs	r2, r2, r5
 800505c:	d420      	bmi.n	80050a0 <_malloc_r+0xd0>
 800505e:	2a0b      	cmp	r2, #11
 8005060:	d917      	bls.n	8005092 <_malloc_r+0xc2>
 8005062:	1961      	adds	r1, r4, r5
 8005064:	42a3      	cmp	r3, r4
 8005066:	6025      	str	r5, [r4, #0]
 8005068:	bf18      	it	ne
 800506a:	6059      	strne	r1, [r3, #4]
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	bf08      	it	eq
 8005070:	f8c8 1000 	streq.w	r1, [r8]
 8005074:	5162      	str	r2, [r4, r5]
 8005076:	604b      	str	r3, [r1, #4]
 8005078:	4630      	mov	r0, r6
 800507a:	f000 f82f 	bl	80050dc <__malloc_unlock>
 800507e:	f104 000b 	add.w	r0, r4, #11
 8005082:	1d23      	adds	r3, r4, #4
 8005084:	f020 0007 	bic.w	r0, r0, #7
 8005088:	1ac2      	subs	r2, r0, r3
 800508a:	bf1c      	itt	ne
 800508c:	1a1b      	subne	r3, r3, r0
 800508e:	50a3      	strne	r3, [r4, r2]
 8005090:	e7af      	b.n	8004ff2 <_malloc_r+0x22>
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	42a3      	cmp	r3, r4
 8005096:	bf0c      	ite	eq
 8005098:	f8c8 2000 	streq.w	r2, [r8]
 800509c:	605a      	strne	r2, [r3, #4]
 800509e:	e7eb      	b.n	8005078 <_malloc_r+0xa8>
 80050a0:	4623      	mov	r3, r4
 80050a2:	6864      	ldr	r4, [r4, #4]
 80050a4:	e7ae      	b.n	8005004 <_malloc_r+0x34>
 80050a6:	463c      	mov	r4, r7
 80050a8:	687f      	ldr	r7, [r7, #4]
 80050aa:	e7b6      	b.n	800501a <_malloc_r+0x4a>
 80050ac:	461a      	mov	r2, r3
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d1fb      	bne.n	80050ac <_malloc_r+0xdc>
 80050b4:	2300      	movs	r3, #0
 80050b6:	6053      	str	r3, [r2, #4]
 80050b8:	e7de      	b.n	8005078 <_malloc_r+0xa8>
 80050ba:	230c      	movs	r3, #12
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 f80c 	bl	80050dc <__malloc_unlock>
 80050c4:	e794      	b.n	8004ff0 <_malloc_r+0x20>
 80050c6:	6005      	str	r5, [r0, #0]
 80050c8:	e7d6      	b.n	8005078 <_malloc_r+0xa8>
 80050ca:	bf00      	nop
 80050cc:	2000064c 	.word	0x2000064c

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	@ (80050d8 <__malloc_lock+0x8>)
 80050d2:	f7ff bf0f 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000644 	.word	0x20000644

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	@ (80050e4 <__malloc_unlock+0x8>)
 80050de:	f7ff bf0a 	b.w	8004ef6 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000644 	.word	0x20000644

080050e8 <__ssputs_r>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	688e      	ldr	r6, [r1, #8]
 80050ee:	461f      	mov	r7, r3
 80050f0:	42be      	cmp	r6, r7
 80050f2:	680b      	ldr	r3, [r1, #0]
 80050f4:	4682      	mov	sl, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	4690      	mov	r8, r2
 80050fa:	d82d      	bhi.n	8005158 <__ssputs_r+0x70>
 80050fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005104:	d026      	beq.n	8005154 <__ssputs_r+0x6c>
 8005106:	6965      	ldr	r5, [r4, #20]
 8005108:	6909      	ldr	r1, [r1, #16]
 800510a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800510e:	eba3 0901 	sub.w	r9, r3, r1
 8005112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005116:	1c7b      	adds	r3, r7, #1
 8005118:	444b      	add	r3, r9
 800511a:	106d      	asrs	r5, r5, #1
 800511c:	429d      	cmp	r5, r3
 800511e:	bf38      	it	cc
 8005120:	461d      	movcc	r5, r3
 8005122:	0553      	lsls	r3, r2, #21
 8005124:	d527      	bpl.n	8005176 <__ssputs_r+0x8e>
 8005126:	4629      	mov	r1, r5
 8005128:	f7ff ff52 	bl	8004fd0 <_malloc_r>
 800512c:	4606      	mov	r6, r0
 800512e:	b360      	cbz	r0, 800518a <__ssputs_r+0xa2>
 8005130:	6921      	ldr	r1, [r4, #16]
 8005132:	464a      	mov	r2, r9
 8005134:	f000 fae6 	bl	8005704 <memcpy>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800513e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	6126      	str	r6, [r4, #16]
 8005146:	6165      	str	r5, [r4, #20]
 8005148:	444e      	add	r6, r9
 800514a:	eba5 0509 	sub.w	r5, r5, r9
 800514e:	6026      	str	r6, [r4, #0]
 8005150:	60a5      	str	r5, [r4, #8]
 8005152:	463e      	mov	r6, r7
 8005154:	42be      	cmp	r6, r7
 8005156:	d900      	bls.n	800515a <__ssputs_r+0x72>
 8005158:	463e      	mov	r6, r7
 800515a:	6820      	ldr	r0, [r4, #0]
 800515c:	4632      	mov	r2, r6
 800515e:	4641      	mov	r1, r8
 8005160:	f000 faa6 	bl	80056b0 <memmove>
 8005164:	68a3      	ldr	r3, [r4, #8]
 8005166:	1b9b      	subs	r3, r3, r6
 8005168:	60a3      	str	r3, [r4, #8]
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	4433      	add	r3, r6
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	2000      	movs	r0, #0
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005176:	462a      	mov	r2, r5
 8005178:	f000 fad2 	bl	8005720 <_realloc_r>
 800517c:	4606      	mov	r6, r0
 800517e:	2800      	cmp	r0, #0
 8005180:	d1e0      	bne.n	8005144 <__ssputs_r+0x5c>
 8005182:	6921      	ldr	r1, [r4, #16]
 8005184:	4650      	mov	r0, sl
 8005186:	f7ff feb7 	bl	8004ef8 <_free_r>
 800518a:	230c      	movs	r3, #12
 800518c:	f8ca 3000 	str.w	r3, [sl]
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	e7e9      	b.n	8005172 <__ssputs_r+0x8a>
	...

080051a0 <_svfiprintf_r>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	4698      	mov	r8, r3
 80051a6:	898b      	ldrh	r3, [r1, #12]
 80051a8:	061b      	lsls	r3, r3, #24
 80051aa:	b09d      	sub	sp, #116	@ 0x74
 80051ac:	4607      	mov	r7, r0
 80051ae:	460d      	mov	r5, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	d510      	bpl.n	80051d6 <_svfiprintf_r+0x36>
 80051b4:	690b      	ldr	r3, [r1, #16]
 80051b6:	b973      	cbnz	r3, 80051d6 <_svfiprintf_r+0x36>
 80051b8:	2140      	movs	r1, #64	@ 0x40
 80051ba:	f7ff ff09 	bl	8004fd0 <_malloc_r>
 80051be:	6028      	str	r0, [r5, #0]
 80051c0:	6128      	str	r0, [r5, #16]
 80051c2:	b930      	cbnz	r0, 80051d2 <_svfiprintf_r+0x32>
 80051c4:	230c      	movs	r3, #12
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	b01d      	add	sp, #116	@ 0x74
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	2340      	movs	r3, #64	@ 0x40
 80051d4:	616b      	str	r3, [r5, #20]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051da:	2320      	movs	r3, #32
 80051dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e4:	2330      	movs	r3, #48	@ 0x30
 80051e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005384 <_svfiprintf_r+0x1e4>
 80051ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051ee:	f04f 0901 	mov.w	r9, #1
 80051f2:	4623      	mov	r3, r4
 80051f4:	469a      	mov	sl, r3
 80051f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051fa:	b10a      	cbz	r2, 8005200 <_svfiprintf_r+0x60>
 80051fc:	2a25      	cmp	r2, #37	@ 0x25
 80051fe:	d1f9      	bne.n	80051f4 <_svfiprintf_r+0x54>
 8005200:	ebba 0b04 	subs.w	fp, sl, r4
 8005204:	d00b      	beq.n	800521e <_svfiprintf_r+0x7e>
 8005206:	465b      	mov	r3, fp
 8005208:	4622      	mov	r2, r4
 800520a:	4629      	mov	r1, r5
 800520c:	4638      	mov	r0, r7
 800520e:	f7ff ff6b 	bl	80050e8 <__ssputs_r>
 8005212:	3001      	adds	r0, #1
 8005214:	f000 80a7 	beq.w	8005366 <_svfiprintf_r+0x1c6>
 8005218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800521a:	445a      	add	r2, fp
 800521c:	9209      	str	r2, [sp, #36]	@ 0x24
 800521e:	f89a 3000 	ldrb.w	r3, [sl]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 809f 	beq.w	8005366 <_svfiprintf_r+0x1c6>
 8005228:	2300      	movs	r3, #0
 800522a:	f04f 32ff 	mov.w	r2, #4294967295
 800522e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005232:	f10a 0a01 	add.w	sl, sl, #1
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	9307      	str	r3, [sp, #28]
 800523a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800523e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005240:	4654      	mov	r4, sl
 8005242:	2205      	movs	r2, #5
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	484e      	ldr	r0, [pc, #312]	@ (8005384 <_svfiprintf_r+0x1e4>)
 800524a:	f7fa ffc9 	bl	80001e0 <memchr>
 800524e:	9a04      	ldr	r2, [sp, #16]
 8005250:	b9d8      	cbnz	r0, 800528a <_svfiprintf_r+0xea>
 8005252:	06d0      	lsls	r0, r2, #27
 8005254:	bf44      	itt	mi
 8005256:	2320      	movmi	r3, #32
 8005258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800525c:	0711      	lsls	r1, r2, #28
 800525e:	bf44      	itt	mi
 8005260:	232b      	movmi	r3, #43	@ 0x2b
 8005262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005266:	f89a 3000 	ldrb.w	r3, [sl]
 800526a:	2b2a      	cmp	r3, #42	@ 0x2a
 800526c:	d015      	beq.n	800529a <_svfiprintf_r+0xfa>
 800526e:	9a07      	ldr	r2, [sp, #28]
 8005270:	4654      	mov	r4, sl
 8005272:	2000      	movs	r0, #0
 8005274:	f04f 0c0a 	mov.w	ip, #10
 8005278:	4621      	mov	r1, r4
 800527a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800527e:	3b30      	subs	r3, #48	@ 0x30
 8005280:	2b09      	cmp	r3, #9
 8005282:	d94b      	bls.n	800531c <_svfiprintf_r+0x17c>
 8005284:	b1b0      	cbz	r0, 80052b4 <_svfiprintf_r+0x114>
 8005286:	9207      	str	r2, [sp, #28]
 8005288:	e014      	b.n	80052b4 <_svfiprintf_r+0x114>
 800528a:	eba0 0308 	sub.w	r3, r0, r8
 800528e:	fa09 f303 	lsl.w	r3, r9, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	9304      	str	r3, [sp, #16]
 8005296:	46a2      	mov	sl, r4
 8005298:	e7d2      	b.n	8005240 <_svfiprintf_r+0xa0>
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	1d19      	adds	r1, r3, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	9103      	str	r1, [sp, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bfbb      	ittet	lt
 80052a6:	425b      	neglt	r3, r3
 80052a8:	f042 0202 	orrlt.w	r2, r2, #2
 80052ac:	9307      	strge	r3, [sp, #28]
 80052ae:	9307      	strlt	r3, [sp, #28]
 80052b0:	bfb8      	it	lt
 80052b2:	9204      	strlt	r2, [sp, #16]
 80052b4:	7823      	ldrb	r3, [r4, #0]
 80052b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80052b8:	d10a      	bne.n	80052d0 <_svfiprintf_r+0x130>
 80052ba:	7863      	ldrb	r3, [r4, #1]
 80052bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052be:	d132      	bne.n	8005326 <_svfiprintf_r+0x186>
 80052c0:	9b03      	ldr	r3, [sp, #12]
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	9203      	str	r2, [sp, #12]
 80052c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052cc:	3402      	adds	r4, #2
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005394 <_svfiprintf_r+0x1f4>
 80052d4:	7821      	ldrb	r1, [r4, #0]
 80052d6:	2203      	movs	r2, #3
 80052d8:	4650      	mov	r0, sl
 80052da:	f7fa ff81 	bl	80001e0 <memchr>
 80052de:	b138      	cbz	r0, 80052f0 <_svfiprintf_r+0x150>
 80052e0:	9b04      	ldr	r3, [sp, #16]
 80052e2:	eba0 000a 	sub.w	r0, r0, sl
 80052e6:	2240      	movs	r2, #64	@ 0x40
 80052e8:	4082      	lsls	r2, r0
 80052ea:	4313      	orrs	r3, r2
 80052ec:	3401      	adds	r4, #1
 80052ee:	9304      	str	r3, [sp, #16]
 80052f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f4:	4824      	ldr	r0, [pc, #144]	@ (8005388 <_svfiprintf_r+0x1e8>)
 80052f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052fa:	2206      	movs	r2, #6
 80052fc:	f7fa ff70 	bl	80001e0 <memchr>
 8005300:	2800      	cmp	r0, #0
 8005302:	d036      	beq.n	8005372 <_svfiprintf_r+0x1d2>
 8005304:	4b21      	ldr	r3, [pc, #132]	@ (800538c <_svfiprintf_r+0x1ec>)
 8005306:	bb1b      	cbnz	r3, 8005350 <_svfiprintf_r+0x1b0>
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	3307      	adds	r3, #7
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	3308      	adds	r3, #8
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005316:	4433      	add	r3, r6
 8005318:	9309      	str	r3, [sp, #36]	@ 0x24
 800531a:	e76a      	b.n	80051f2 <_svfiprintf_r+0x52>
 800531c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005320:	460c      	mov	r4, r1
 8005322:	2001      	movs	r0, #1
 8005324:	e7a8      	b.n	8005278 <_svfiprintf_r+0xd8>
 8005326:	2300      	movs	r3, #0
 8005328:	3401      	adds	r4, #1
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	4619      	mov	r1, r3
 800532e:	f04f 0c0a 	mov.w	ip, #10
 8005332:	4620      	mov	r0, r4
 8005334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005338:	3a30      	subs	r2, #48	@ 0x30
 800533a:	2a09      	cmp	r2, #9
 800533c:	d903      	bls.n	8005346 <_svfiprintf_r+0x1a6>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0c6      	beq.n	80052d0 <_svfiprintf_r+0x130>
 8005342:	9105      	str	r1, [sp, #20]
 8005344:	e7c4      	b.n	80052d0 <_svfiprintf_r+0x130>
 8005346:	fb0c 2101 	mla	r1, ip, r1, r2
 800534a:	4604      	mov	r4, r0
 800534c:	2301      	movs	r3, #1
 800534e:	e7f0      	b.n	8005332 <_svfiprintf_r+0x192>
 8005350:	ab03      	add	r3, sp, #12
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	462a      	mov	r2, r5
 8005356:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <_svfiprintf_r+0x1f0>)
 8005358:	a904      	add	r1, sp, #16
 800535a:	4638      	mov	r0, r7
 800535c:	f3af 8000 	nop.w
 8005360:	1c42      	adds	r2, r0, #1
 8005362:	4606      	mov	r6, r0
 8005364:	d1d6      	bne.n	8005314 <_svfiprintf_r+0x174>
 8005366:	89ab      	ldrh	r3, [r5, #12]
 8005368:	065b      	lsls	r3, r3, #25
 800536a:	f53f af2d 	bmi.w	80051c8 <_svfiprintf_r+0x28>
 800536e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005370:	e72c      	b.n	80051cc <_svfiprintf_r+0x2c>
 8005372:	ab03      	add	r3, sp, #12
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462a      	mov	r2, r5
 8005378:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <_svfiprintf_r+0x1f0>)
 800537a:	a904      	add	r1, sp, #16
 800537c:	4638      	mov	r0, r7
 800537e:	f000 f879 	bl	8005474 <_printf_i>
 8005382:	e7ed      	b.n	8005360 <_svfiprintf_r+0x1c0>
 8005384:	0800841c 	.word	0x0800841c
 8005388:	08008426 	.word	0x08008426
 800538c:	00000000 	.word	0x00000000
 8005390:	080050e9 	.word	0x080050e9
 8005394:	08008422 	.word	0x08008422

08005398 <_printf_common>:
 8005398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	4616      	mov	r6, r2
 800539e:	4698      	mov	r8, r3
 80053a0:	688a      	ldr	r2, [r1, #8]
 80053a2:	690b      	ldr	r3, [r1, #16]
 80053a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	bfb8      	it	lt
 80053ac:	4613      	movlt	r3, r2
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053b4:	4607      	mov	r7, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	b10a      	cbz	r2, 80053be <_printf_common+0x26>
 80053ba:	3301      	adds	r3, #1
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	0699      	lsls	r1, r3, #26
 80053c2:	bf42      	ittt	mi
 80053c4:	6833      	ldrmi	r3, [r6, #0]
 80053c6:	3302      	addmi	r3, #2
 80053c8:	6033      	strmi	r3, [r6, #0]
 80053ca:	6825      	ldr	r5, [r4, #0]
 80053cc:	f015 0506 	ands.w	r5, r5, #6
 80053d0:	d106      	bne.n	80053e0 <_printf_common+0x48>
 80053d2:	f104 0a19 	add.w	sl, r4, #25
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	6832      	ldr	r2, [r6, #0]
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	42ab      	cmp	r3, r5
 80053de:	dc26      	bgt.n	800542e <_printf_common+0x96>
 80053e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053e4:	6822      	ldr	r2, [r4, #0]
 80053e6:	3b00      	subs	r3, #0
 80053e8:	bf18      	it	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	0692      	lsls	r2, r2, #26
 80053ee:	d42b      	bmi.n	8005448 <_printf_common+0xb0>
 80053f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053f4:	4641      	mov	r1, r8
 80053f6:	4638      	mov	r0, r7
 80053f8:	47c8      	blx	r9
 80053fa:	3001      	adds	r0, #1
 80053fc:	d01e      	beq.n	800543c <_printf_common+0xa4>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	f003 0306 	and.w	r3, r3, #6
 8005406:	2b04      	cmp	r3, #4
 8005408:	bf02      	ittt	eq
 800540a:	68e5      	ldreq	r5, [r4, #12]
 800540c:	6833      	ldreq	r3, [r6, #0]
 800540e:	1aed      	subeq	r5, r5, r3
 8005410:	68a3      	ldr	r3, [r4, #8]
 8005412:	bf0c      	ite	eq
 8005414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005418:	2500      	movne	r5, #0
 800541a:	4293      	cmp	r3, r2
 800541c:	bfc4      	itt	gt
 800541e:	1a9b      	subgt	r3, r3, r2
 8005420:	18ed      	addgt	r5, r5, r3
 8005422:	2600      	movs	r6, #0
 8005424:	341a      	adds	r4, #26
 8005426:	42b5      	cmp	r5, r6
 8005428:	d11a      	bne.n	8005460 <_printf_common+0xc8>
 800542a:	2000      	movs	r0, #0
 800542c:	e008      	b.n	8005440 <_printf_common+0xa8>
 800542e:	2301      	movs	r3, #1
 8005430:	4652      	mov	r2, sl
 8005432:	4641      	mov	r1, r8
 8005434:	4638      	mov	r0, r7
 8005436:	47c8      	blx	r9
 8005438:	3001      	adds	r0, #1
 800543a:	d103      	bne.n	8005444 <_printf_common+0xac>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005444:	3501      	adds	r5, #1
 8005446:	e7c6      	b.n	80053d6 <_printf_common+0x3e>
 8005448:	18e1      	adds	r1, r4, r3
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	2030      	movs	r0, #48	@ 0x30
 800544e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005452:	4422      	add	r2, r4
 8005454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800545c:	3302      	adds	r3, #2
 800545e:	e7c7      	b.n	80053f0 <_printf_common+0x58>
 8005460:	2301      	movs	r3, #1
 8005462:	4622      	mov	r2, r4
 8005464:	4641      	mov	r1, r8
 8005466:	4638      	mov	r0, r7
 8005468:	47c8      	blx	r9
 800546a:	3001      	adds	r0, #1
 800546c:	d0e6      	beq.n	800543c <_printf_common+0xa4>
 800546e:	3601      	adds	r6, #1
 8005470:	e7d9      	b.n	8005426 <_printf_common+0x8e>
	...

08005474 <_printf_i>:
 8005474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	7e0f      	ldrb	r7, [r1, #24]
 800547a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800547c:	2f78      	cmp	r7, #120	@ 0x78
 800547e:	4691      	mov	r9, r2
 8005480:	4680      	mov	r8, r0
 8005482:	460c      	mov	r4, r1
 8005484:	469a      	mov	sl, r3
 8005486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800548a:	d807      	bhi.n	800549c <_printf_i+0x28>
 800548c:	2f62      	cmp	r7, #98	@ 0x62
 800548e:	d80a      	bhi.n	80054a6 <_printf_i+0x32>
 8005490:	2f00      	cmp	r7, #0
 8005492:	f000 80d1 	beq.w	8005638 <_printf_i+0x1c4>
 8005496:	2f58      	cmp	r7, #88	@ 0x58
 8005498:	f000 80b8 	beq.w	800560c <_printf_i+0x198>
 800549c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054a4:	e03a      	b.n	800551c <_printf_i+0xa8>
 80054a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054aa:	2b15      	cmp	r3, #21
 80054ac:	d8f6      	bhi.n	800549c <_printf_i+0x28>
 80054ae:	a101      	add	r1, pc, #4	@ (adr r1, 80054b4 <_printf_i+0x40>)
 80054b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b4:	0800550d 	.word	0x0800550d
 80054b8:	08005521 	.word	0x08005521
 80054bc:	0800549d 	.word	0x0800549d
 80054c0:	0800549d 	.word	0x0800549d
 80054c4:	0800549d 	.word	0x0800549d
 80054c8:	0800549d 	.word	0x0800549d
 80054cc:	08005521 	.word	0x08005521
 80054d0:	0800549d 	.word	0x0800549d
 80054d4:	0800549d 	.word	0x0800549d
 80054d8:	0800549d 	.word	0x0800549d
 80054dc:	0800549d 	.word	0x0800549d
 80054e0:	0800561f 	.word	0x0800561f
 80054e4:	0800554b 	.word	0x0800554b
 80054e8:	080055d9 	.word	0x080055d9
 80054ec:	0800549d 	.word	0x0800549d
 80054f0:	0800549d 	.word	0x0800549d
 80054f4:	08005641 	.word	0x08005641
 80054f8:	0800549d 	.word	0x0800549d
 80054fc:	0800554b 	.word	0x0800554b
 8005500:	0800549d 	.word	0x0800549d
 8005504:	0800549d 	.word	0x0800549d
 8005508:	080055e1 	.word	0x080055e1
 800550c:	6833      	ldr	r3, [r6, #0]
 800550e:	1d1a      	adds	r2, r3, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6032      	str	r2, [r6, #0]
 8005514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800551c:	2301      	movs	r3, #1
 800551e:	e09c      	b.n	800565a <_printf_i+0x1e6>
 8005520:	6833      	ldr	r3, [r6, #0]
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	1d19      	adds	r1, r3, #4
 8005526:	6031      	str	r1, [r6, #0]
 8005528:	0606      	lsls	r6, r0, #24
 800552a:	d501      	bpl.n	8005530 <_printf_i+0xbc>
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	e003      	b.n	8005538 <_printf_i+0xc4>
 8005530:	0645      	lsls	r5, r0, #25
 8005532:	d5fb      	bpl.n	800552c <_printf_i+0xb8>
 8005534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005538:	2d00      	cmp	r5, #0
 800553a:	da03      	bge.n	8005544 <_printf_i+0xd0>
 800553c:	232d      	movs	r3, #45	@ 0x2d
 800553e:	426d      	negs	r5, r5
 8005540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005544:	4858      	ldr	r0, [pc, #352]	@ (80056a8 <_printf_i+0x234>)
 8005546:	230a      	movs	r3, #10
 8005548:	e011      	b.n	800556e <_printf_i+0xfa>
 800554a:	6821      	ldr	r1, [r4, #0]
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	0608      	lsls	r0, r1, #24
 8005550:	f853 5b04 	ldr.w	r5, [r3], #4
 8005554:	d402      	bmi.n	800555c <_printf_i+0xe8>
 8005556:	0649      	lsls	r1, r1, #25
 8005558:	bf48      	it	mi
 800555a:	b2ad      	uxthmi	r5, r5
 800555c:	2f6f      	cmp	r7, #111	@ 0x6f
 800555e:	4852      	ldr	r0, [pc, #328]	@ (80056a8 <_printf_i+0x234>)
 8005560:	6033      	str	r3, [r6, #0]
 8005562:	bf14      	ite	ne
 8005564:	230a      	movne	r3, #10
 8005566:	2308      	moveq	r3, #8
 8005568:	2100      	movs	r1, #0
 800556a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800556e:	6866      	ldr	r6, [r4, #4]
 8005570:	60a6      	str	r6, [r4, #8]
 8005572:	2e00      	cmp	r6, #0
 8005574:	db05      	blt.n	8005582 <_printf_i+0x10e>
 8005576:	6821      	ldr	r1, [r4, #0]
 8005578:	432e      	orrs	r6, r5
 800557a:	f021 0104 	bic.w	r1, r1, #4
 800557e:	6021      	str	r1, [r4, #0]
 8005580:	d04b      	beq.n	800561a <_printf_i+0x1a6>
 8005582:	4616      	mov	r6, r2
 8005584:	fbb5 f1f3 	udiv	r1, r5, r3
 8005588:	fb03 5711 	mls	r7, r3, r1, r5
 800558c:	5dc7      	ldrb	r7, [r0, r7]
 800558e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005592:	462f      	mov	r7, r5
 8005594:	42bb      	cmp	r3, r7
 8005596:	460d      	mov	r5, r1
 8005598:	d9f4      	bls.n	8005584 <_printf_i+0x110>
 800559a:	2b08      	cmp	r3, #8
 800559c:	d10b      	bne.n	80055b6 <_printf_i+0x142>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	07df      	lsls	r7, r3, #31
 80055a2:	d508      	bpl.n	80055b6 <_printf_i+0x142>
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	6861      	ldr	r1, [r4, #4]
 80055a8:	4299      	cmp	r1, r3
 80055aa:	bfde      	ittt	le
 80055ac:	2330      	movle	r3, #48	@ 0x30
 80055ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055b6:	1b92      	subs	r2, r2, r6
 80055b8:	6122      	str	r2, [r4, #16]
 80055ba:	f8cd a000 	str.w	sl, [sp]
 80055be:	464b      	mov	r3, r9
 80055c0:	aa03      	add	r2, sp, #12
 80055c2:	4621      	mov	r1, r4
 80055c4:	4640      	mov	r0, r8
 80055c6:	f7ff fee7 	bl	8005398 <_printf_common>
 80055ca:	3001      	adds	r0, #1
 80055cc:	d14a      	bne.n	8005664 <_printf_i+0x1f0>
 80055ce:	f04f 30ff 	mov.w	r0, #4294967295
 80055d2:	b004      	add	sp, #16
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	f043 0320 	orr.w	r3, r3, #32
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	4832      	ldr	r0, [pc, #200]	@ (80056ac <_printf_i+0x238>)
 80055e2:	2778      	movs	r7, #120	@ 0x78
 80055e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	6831      	ldr	r1, [r6, #0]
 80055ec:	061f      	lsls	r7, r3, #24
 80055ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80055f2:	d402      	bmi.n	80055fa <_printf_i+0x186>
 80055f4:	065f      	lsls	r7, r3, #25
 80055f6:	bf48      	it	mi
 80055f8:	b2ad      	uxthmi	r5, r5
 80055fa:	6031      	str	r1, [r6, #0]
 80055fc:	07d9      	lsls	r1, r3, #31
 80055fe:	bf44      	itt	mi
 8005600:	f043 0320 	orrmi.w	r3, r3, #32
 8005604:	6023      	strmi	r3, [r4, #0]
 8005606:	b11d      	cbz	r5, 8005610 <_printf_i+0x19c>
 8005608:	2310      	movs	r3, #16
 800560a:	e7ad      	b.n	8005568 <_printf_i+0xf4>
 800560c:	4826      	ldr	r0, [pc, #152]	@ (80056a8 <_printf_i+0x234>)
 800560e:	e7e9      	b.n	80055e4 <_printf_i+0x170>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	f023 0320 	bic.w	r3, r3, #32
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	e7f6      	b.n	8005608 <_printf_i+0x194>
 800561a:	4616      	mov	r6, r2
 800561c:	e7bd      	b.n	800559a <_printf_i+0x126>
 800561e:	6833      	ldr	r3, [r6, #0]
 8005620:	6825      	ldr	r5, [r4, #0]
 8005622:	6961      	ldr	r1, [r4, #20]
 8005624:	1d18      	adds	r0, r3, #4
 8005626:	6030      	str	r0, [r6, #0]
 8005628:	062e      	lsls	r6, r5, #24
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	d501      	bpl.n	8005632 <_printf_i+0x1be>
 800562e:	6019      	str	r1, [r3, #0]
 8005630:	e002      	b.n	8005638 <_printf_i+0x1c4>
 8005632:	0668      	lsls	r0, r5, #25
 8005634:	d5fb      	bpl.n	800562e <_printf_i+0x1ba>
 8005636:	8019      	strh	r1, [r3, #0]
 8005638:	2300      	movs	r3, #0
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	4616      	mov	r6, r2
 800563e:	e7bc      	b.n	80055ba <_printf_i+0x146>
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	6032      	str	r2, [r6, #0]
 8005646:	681e      	ldr	r6, [r3, #0]
 8005648:	6862      	ldr	r2, [r4, #4]
 800564a:	2100      	movs	r1, #0
 800564c:	4630      	mov	r0, r6
 800564e:	f7fa fdc7 	bl	80001e0 <memchr>
 8005652:	b108      	cbz	r0, 8005658 <_printf_i+0x1e4>
 8005654:	1b80      	subs	r0, r0, r6
 8005656:	6060      	str	r0, [r4, #4]
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2300      	movs	r3, #0
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005662:	e7aa      	b.n	80055ba <_printf_i+0x146>
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	4632      	mov	r2, r6
 8005668:	4649      	mov	r1, r9
 800566a:	4640      	mov	r0, r8
 800566c:	47d0      	blx	sl
 800566e:	3001      	adds	r0, #1
 8005670:	d0ad      	beq.n	80055ce <_printf_i+0x15a>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	079b      	lsls	r3, r3, #30
 8005676:	d413      	bmi.n	80056a0 <_printf_i+0x22c>
 8005678:	68e0      	ldr	r0, [r4, #12]
 800567a:	9b03      	ldr	r3, [sp, #12]
 800567c:	4298      	cmp	r0, r3
 800567e:	bfb8      	it	lt
 8005680:	4618      	movlt	r0, r3
 8005682:	e7a6      	b.n	80055d2 <_printf_i+0x15e>
 8005684:	2301      	movs	r3, #1
 8005686:	4632      	mov	r2, r6
 8005688:	4649      	mov	r1, r9
 800568a:	4640      	mov	r0, r8
 800568c:	47d0      	blx	sl
 800568e:	3001      	adds	r0, #1
 8005690:	d09d      	beq.n	80055ce <_printf_i+0x15a>
 8005692:	3501      	adds	r5, #1
 8005694:	68e3      	ldr	r3, [r4, #12]
 8005696:	9903      	ldr	r1, [sp, #12]
 8005698:	1a5b      	subs	r3, r3, r1
 800569a:	42ab      	cmp	r3, r5
 800569c:	dcf2      	bgt.n	8005684 <_printf_i+0x210>
 800569e:	e7eb      	b.n	8005678 <_printf_i+0x204>
 80056a0:	2500      	movs	r5, #0
 80056a2:	f104 0619 	add.w	r6, r4, #25
 80056a6:	e7f5      	b.n	8005694 <_printf_i+0x220>
 80056a8:	0800842d 	.word	0x0800842d
 80056ac:	0800843e 	.word	0x0800843e

080056b0 <memmove>:
 80056b0:	4288      	cmp	r0, r1
 80056b2:	b510      	push	{r4, lr}
 80056b4:	eb01 0402 	add.w	r4, r1, r2
 80056b8:	d902      	bls.n	80056c0 <memmove+0x10>
 80056ba:	4284      	cmp	r4, r0
 80056bc:	4623      	mov	r3, r4
 80056be:	d807      	bhi.n	80056d0 <memmove+0x20>
 80056c0:	1e43      	subs	r3, r0, #1
 80056c2:	42a1      	cmp	r1, r4
 80056c4:	d008      	beq.n	80056d8 <memmove+0x28>
 80056c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ce:	e7f8      	b.n	80056c2 <memmove+0x12>
 80056d0:	4402      	add	r2, r0
 80056d2:	4601      	mov	r1, r0
 80056d4:	428a      	cmp	r2, r1
 80056d6:	d100      	bne.n	80056da <memmove+0x2a>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056e2:	e7f7      	b.n	80056d4 <memmove+0x24>

080056e4 <_sbrk_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d06      	ldr	r5, [pc, #24]	@ (8005700 <_sbrk_r+0x1c>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fc f8a8 	bl	8001844 <_sbrk>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_sbrk_r+0x1a>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_sbrk_r+0x1a>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000640 	.word	0x20000640

08005704 <memcpy>:
 8005704:	440a      	add	r2, r1
 8005706:	4291      	cmp	r1, r2
 8005708:	f100 33ff 	add.w	r3, r0, #4294967295
 800570c:	d100      	bne.n	8005710 <memcpy+0xc>
 800570e:	4770      	bx	lr
 8005710:	b510      	push	{r4, lr}
 8005712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800571a:	4291      	cmp	r1, r2
 800571c:	d1f9      	bne.n	8005712 <memcpy+0xe>
 800571e:	bd10      	pop	{r4, pc}

08005720 <_realloc_r>:
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	4607      	mov	r7, r0
 8005726:	4614      	mov	r4, r2
 8005728:	460d      	mov	r5, r1
 800572a:	b921      	cbnz	r1, 8005736 <_realloc_r+0x16>
 800572c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	4611      	mov	r1, r2
 8005732:	f7ff bc4d 	b.w	8004fd0 <_malloc_r>
 8005736:	b92a      	cbnz	r2, 8005744 <_realloc_r+0x24>
 8005738:	f7ff fbde 	bl	8004ef8 <_free_r>
 800573c:	4625      	mov	r5, r4
 800573e:	4628      	mov	r0, r5
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	f000 f81a 	bl	800577c <_malloc_usable_size_r>
 8005748:	4284      	cmp	r4, r0
 800574a:	4606      	mov	r6, r0
 800574c:	d802      	bhi.n	8005754 <_realloc_r+0x34>
 800574e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005752:	d8f4      	bhi.n	800573e <_realloc_r+0x1e>
 8005754:	4621      	mov	r1, r4
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff fc3a 	bl	8004fd0 <_malloc_r>
 800575c:	4680      	mov	r8, r0
 800575e:	b908      	cbnz	r0, 8005764 <_realloc_r+0x44>
 8005760:	4645      	mov	r5, r8
 8005762:	e7ec      	b.n	800573e <_realloc_r+0x1e>
 8005764:	42b4      	cmp	r4, r6
 8005766:	4622      	mov	r2, r4
 8005768:	4629      	mov	r1, r5
 800576a:	bf28      	it	cs
 800576c:	4632      	movcs	r2, r6
 800576e:	f7ff ffc9 	bl	8005704 <memcpy>
 8005772:	4629      	mov	r1, r5
 8005774:	4638      	mov	r0, r7
 8005776:	f7ff fbbf 	bl	8004ef8 <_free_r>
 800577a:	e7f1      	b.n	8005760 <_realloc_r+0x40>

0800577c <_malloc_usable_size_r>:
 800577c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005780:	1f18      	subs	r0, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	bfbc      	itt	lt
 8005786:	580b      	ldrlt	r3, [r1, r0]
 8005788:	18c0      	addlt	r0, r0, r3
 800578a:	4770      	bx	lr

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
