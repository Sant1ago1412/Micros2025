
ComUSBlack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c74  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007e0c  08007e0c  00008e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e64  08007e64  00009104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e64  08007e64  00008e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e6c  08007e6c  00009104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e6c  08007e6c  00008e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e70  08007e70  00008e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08007e74  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000104  08007f78  00009104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013f4  08007f78  000093f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f83  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b9  00000000  00000000  0001d0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00020470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  00021658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a042  00000000  00000000  000223ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164ad  00000000  00000000  0003c441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b97e  00000000  00000000  000528ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee26c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004acc  00000000  00000000  000ee2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f2d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007df4 	.word	0x08007df4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08007df4 	.word	0x08007df4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_TIM_PeriodElapsedCallback>:
void datafromUSB(uint8_t *buf, uint16_t length);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	is10ms=1;
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200001f8 	.word	0x200001f8

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fd29 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f833 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f995 	bl	8000860 <MX_GPIO_Init>
  MX_TIM11_Init();
 8000536:	f000 f96f 	bl	8000818 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 800053a:	f006 fed7 	bl	80072ec <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800053e:	f000 f893 	bl	8000668 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000542:	f000 f945 	bl	80007d0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000546:	480f      	ldr	r0, [pc, #60]	@ (8000584 <main+0x60>)
 8000548:	f003 f9be 	bl	80038c8 <HAL_TIM_Base_Start_IT>
  uint8_t counter;
  CDC_AttachRxData(&datafromUSB);
 800054c:	480e      	ldr	r0, [pc, #56]	@ (8000588 <main+0x64>)
 800054e:	f006 fffb 	bl	8007548 <CDC_AttachRxData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 8000552:	480e      	ldr	r0, [pc, #56]	@ (800058c <main+0x68>)
 8000554:	f000 fb89 	bl	8000c6a <comunicationsTask>
	  if(is10ms){
 8000558:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <main+0x6c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f8      	beq.n	8000552 <main+0x2e>
		  is10ms=0;
 8000560:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <main+0x6c>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
		  counter++;
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	3301      	adds	r3, #1
 800056a:	71fb      	strb	r3, [r7, #7]
		  if(counter>10){
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b0a      	cmp	r3, #10
 8000570:	d9ef      	bls.n	8000552 <main+0x2e>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000576:	4807      	ldr	r0, [pc, #28]	@ (8000594 <main+0x70>)
 8000578:	f001 fab9 	bl	8001aee <HAL_GPIO_TogglePin>
			  counter=0;
 800057c:	2300      	movs	r3, #0
 800057e:	71fb      	strb	r3, [r7, #7]
	  comunicationsTask(&datosComSerie);
 8000580:	e7e7      	b.n	8000552 <main+0x2e>
 8000582:	bf00      	nop
 8000584:	200001b0 	.word	0x200001b0
 8000588:	08000c8d 	.word	0x08000c8d
 800058c:	200001fc 	.word	0x200001fc
 8000590:	200001f8 	.word	0x200001f8
 8000594:	40020800 	.word	0x40020800

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 fbf8 	bl	8007d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xcc>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000608:	2319      	movs	r3, #25
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800060c:	23c0      	movs	r3, #192	@ 0xc0
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fcd3 	bl	8002fc8 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 fb5e 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2103      	movs	r1, #3
 8000648:	4618      	mov	r0, r3
 800064a:	f002 ff35 	bl	80034b8 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000654:	f000 fb48 	bl	8000ce8 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067a:	4b52      	ldr	r3, [pc, #328]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 800067c:	4a52      	ldr	r2, [pc, #328]	@ (80007c8 <MX_ADC1_Init+0x160>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000680:	4b50      	ldr	r3, [pc, #320]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 8000682:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	4b4e      	ldr	r3, [pc, #312]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800068e:	4b4d      	ldr	r3, [pc, #308]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 8000690:	2201      	movs	r2, #1
 8000692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000694:	4b4b      	ldr	r3, [pc, #300]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b4a      	ldr	r3, [pc, #296]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b48      	ldr	r3, [pc, #288]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b46      	ldr	r3, [pc, #280]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006aa:	4a48      	ldr	r2, [pc, #288]	@ (80007cc <MX_ADC1_Init+0x164>)
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006b6:	2208      	movs	r2, #8
 80006b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b42      	ldr	r3, [pc, #264]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b40      	ldr	r3, [pc, #256]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c8:	483e      	ldr	r0, [pc, #248]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006ca:	f000 fcef 	bl	80010ac <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d4:	f000 fb08 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d8:	2301      	movs	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006e0:	2307      	movs	r3, #7
 80006e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4836      	ldr	r0, [pc, #216]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80006ea:	f000 fd23 	bl	8001134 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 faf8 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	482f      	ldr	r0, [pc, #188]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 8000706:	f000 fd15 	bl	8001134 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000710:	f000 faea 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000714:	2303      	movs	r3, #3
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000718:	2303      	movs	r3, #3
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4828      	ldr	r0, [pc, #160]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 8000722:	f000 fd07 	bl	8001134 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800072c:	f000 fadc 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000730:	2304      	movs	r3, #4
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4821      	ldr	r0, [pc, #132]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 800073e:	f000 fcf9 	bl	8001134 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000748:	f000 face 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800074c:	2305      	movs	r3, #5
 800074e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000750:	2305      	movs	r3, #5
 8000752:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	481a      	ldr	r0, [pc, #104]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 800075a:	f000 fceb 	bl	8001134 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000764:	f000 fac0 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000768:	2306      	movs	r3, #6
 800076a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800076c:	2306      	movs	r3, #6
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 8000776:	f000 fcdd 	bl	8001134 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000780:	f000 fab2 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000784:	2307      	movs	r3, #7
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000788:	2307      	movs	r3, #7
 800078a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 8000792:	f000 fccf 	bl	8001134 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800079c:	f000 faa4 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_ADC1_Init+0x15c>)
 80007ae:	f000 fcc1 	bl	8001134 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80007b8:	f000 fa96 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000120 	.word	0x20000120
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001

080007d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_TIM10_Init+0x40>)
 80007d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_TIM10_Init+0x44>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <MX_TIM10_Init+0x40>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_TIM10_Init+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 23999;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_TIM10_Init+0x40>)
 80007e8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80007ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_TIM10_Init+0x40>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_TIM10_Init+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_TIM10_Init+0x40>)
 80007fc:	f003 f814 	bl	8003828 <HAL_TIM_Base_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000806:	f000 fa6f 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000168 	.word	0x20000168
 8000814:	40014400 	.word	0x40014400

08000818 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_TIM11_Init+0x40>)
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <MX_TIM11_Init+0x44>)
 8000820:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_TIM11_Init+0x40>)
 8000824:	2210      	movs	r2, #16
 8000826:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_TIM11_Init+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 60000;
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_TIM11_Init+0x40>)
 8000830:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000834:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_TIM11_Init+0x40>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_TIM11_Init+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_TIM11_Init+0x40>)
 8000844:	f002 fff0 	bl	8003828 <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800084e:	f000 fa4b 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001b0 	.word	0x200001b0
 800085c:	40014800 	.word	0x40014800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <MX_GPIO_Init+0xb8>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <MX_GPIO_Init+0xb8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <MX_GPIO_Init+0xb8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <MX_GPIO_Init+0xb8>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_GPIO_Init+0xb8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <MX_GPIO_Init+0xb8>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_GPIO_Init+0xb8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <MX_GPIO_Init+0xb8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_GPIO_Init+0xb8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <MX_GPIO_Init+0xbc>)
 80008ee:	f001 f8e5 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_GPIO_Init+0xbc>)
 800090c:	f000 ff52 	bl	80017b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020800 	.word	0x40020800

08000920 <DecodeHeader>:

/* USER CODE BEGIN 4 */
void DecodeHeader(_sDato *datosCom){
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800092e:	e0e2      	b.n	8000af6 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000930:	4b76      	ldr	r3, [pc, #472]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b06      	cmp	r3, #6
 8000936:	f200 80d7 	bhi.w	8000ae8 <DecodeHeader+0x1c8>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <DecodeHeader+0x20>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	0800095d 	.word	0x0800095d
 8000944:	08000985 	.word	0x08000985
 8000948:	080009b9 	.word	0x080009b9
 800094c:	080009ed 	.word	0x080009ed
 8000950:	08000a21 	.word	0x08000a21
 8000954:	08000a49 	.word	0x08000a49
 8000958:	08000a8b 	.word	0x08000a8b
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	b2d1      	uxtb	r1, r2
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7111      	strb	r1, [r2, #4]
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	79db      	ldrb	r3, [r3, #7]
 8000970:	2b55      	cmp	r3, #85	@ 0x55
 8000972:	f040 80bd 	bne.w	8000af0 <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000976:	4b65      	ldr	r3, [pc, #404]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	709a      	strb	r2, [r3, #2]
                }
                break;
 8000982:	e0b5      	b.n	8000af0 <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	b2d1      	uxtb	r1, r2
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	7111      	strb	r1, [r2, #4]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	79db      	ldrb	r3, [r3, #7]
 8000998:	2b4e      	cmp	r3, #78	@ 0x4e
 800099a:	d103      	bne.n	80009a4 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 800099c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b0c <DecodeHeader+0x1ec>)
 800099e:	2202      	movs	r2, #2
 80009a0:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 80009a2:	e0a8      	b.n	8000af6 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80009b0:	4b56      	ldr	r3, [pc, #344]	@ (8000b0c <DecodeHeader+0x1ec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
                break;
 80009b6:	e09e      	b.n	8000af6 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	b2d1      	uxtb	r1, r2
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	7111      	strb	r1, [r2, #4]
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	79db      	ldrb	r3, [r3, #7]
 80009cc:	2b45      	cmp	r3, #69	@ 0x45
 80009ce:	d103      	bne.n	80009d8 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 80009d0:	4b4e      	ldr	r3, [pc, #312]	@ (8000b0c <DecodeHeader+0x1ec>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 80009d6:	e08e      	b.n	8000af6 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	3b01      	subs	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80009e4:	4b49      	ldr	r3, [pc, #292]	@ (8000b0c <DecodeHeader+0x1ec>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
                break;
 80009ea:	e084      	b.n	8000af6 <DecodeHeader+0x1d6>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	b2d1      	uxtb	r1, r2
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	7111      	strb	r1, [r2, #4]
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	79db      	ldrb	r3, [r3, #7]
 8000a00:	2b52      	cmp	r3, #82	@ 0x52
 8000a02:	d103      	bne.n	8000a0c <DecodeHeader+0xec>
                estadoProtocolo=NBYTES;
 8000a04:	4b41      	ldr	r3, [pc, #260]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	701a      	strb	r2, [r3, #0]
            else{
                datosCom->indexReadRx--;
               estadoProtocolo=START;
            }
            break;
 8000a0a:	e074      	b.n	8000af6 <DecodeHeader+0x1d6>
                datosCom->indexReadRx--;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	711a      	strb	r2, [r3, #4]
               estadoProtocolo=START;
 8000a18:	4b3c      	ldr	r3, [pc, #240]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
            break;
 8000a1e:	e06a      	b.n	8000af6 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	791a      	ldrb	r2, [r3, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	b2d1      	uxtb	r1, r2
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	7111      	strb	r1, [r2, #4]
 8000a34:	461a      	mov	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	79da      	ldrb	r2, [r3, #7]
 8000a3c:	4b34      	ldr	r3, [pc, #208]	@ (8000b10 <DecodeHeader+0x1f0>)
 8000a3e:	701a      	strb	r2, [r3, #0]
               estadoProtocolo=TOKEN;
 8000a40:	4b32      	ldr	r3, [pc, #200]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000a42:	2205      	movs	r2, #5
 8000a44:	701a      	strb	r2, [r3, #0]
                break;
 8000a46:	e056      	b.n	8000af6 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	b2d1      	uxtb	r1, r2
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	7111      	strb	r1, [r2, #4]
 8000a54:	461a      	mov	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	79db      	ldrb	r3, [r3, #7]
 8000a5c:	2b3a      	cmp	r3, #58	@ 0x3a
 8000a5e:	d10a      	bne.n	8000a76 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000a62:	2206      	movs	r2, #6
 8000a64:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000a66:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <DecodeHeader+0x1f0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000a74:	e03f      	b.n	8000af6 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	791b      	ldrb	r3, [r3, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000a82:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
                break;
 8000a88:	e035      	b.n	8000af6 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <DecodeHeader+0x1f0>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d90f      	bls.n	8000ab2 <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	b2d1      	uxtb	r1, r2
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	7111      	strb	r1, [r2, #4]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	79da      	ldrb	r2, [r3, #7]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	4053      	eors	r3, r2
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <DecodeHeader+0x1f0>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <DecodeHeader+0x1f0>)
 8000abc:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <DecodeHeader+0x1f0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d116      	bne.n	8000af4 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	789a      	ldrb	r2, [r3, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	440b      	add	r3, r1
 8000ada:	79db      	ldrb	r3, [r3, #7]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d109      	bne.n	8000af4 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f817 	bl	8000b14 <decodeData>
                    }
                }

                break;
 8000ae6:	e005      	b.n	8000af4 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <DecodeHeader+0x1ec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
                break;
 8000aee:	e002      	b.n	8000af6 <DecodeHeader+0x1d6>
                break;
 8000af0:	bf00      	nop
 8000af2:	e000      	b.n	8000af6 <DecodeHeader+0x1d6>
                break;
 8000af4:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	f47f af17 	bne.w	8000930 <DecodeHeader+0x10>
        }
    }
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000403 	.word	0x20000403
 8000b10:	20000404 	.word	0x20000404

08000b14 <decodeData>:
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;

     CDC_Transmit_FS((uint8_t*)datosComSerie.bufferTx, sizeof(bufAux));
}

void decodeData(_sDato *datosCom){
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,cks=0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	77fb      	strb	r3, [r7, #31]
 8000b20:	2300      	movs	r3, #0
 8000b22:	77bb      	strb	r3, [r7, #30]

    bufAux[indiceAux++]='U';
 8000b24:	7ffb      	ldrb	r3, [r7, #31]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	77fa      	strb	r2, [r7, #31]
 8000b2a:	3320      	adds	r3, #32
 8000b2c:	443b      	add	r3, r7
 8000b2e:	2255      	movs	r2, #85	@ 0x55
 8000b30:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000b34:	7ffb      	ldrb	r3, [r7, #31]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	77fa      	strb	r2, [r7, #31]
 8000b3a:	3320      	adds	r3, #32
 8000b3c:	443b      	add	r3, r7
 8000b3e:	224e      	movs	r2, #78	@ 0x4e
 8000b40:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000b44:	7ffb      	ldrb	r3, [r7, #31]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	77fa      	strb	r2, [r7, #31]
 8000b4a:	3320      	adds	r3, #32
 8000b4c:	443b      	add	r3, r7
 8000b4e:	2245      	movs	r2, #69	@ 0x45
 8000b50:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000b54:	7ffb      	ldrb	r3, [r7, #31]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	77fa      	strb	r2, [r7, #31]
 8000b5a:	3320      	adds	r3, #32
 8000b5c:	443b      	add	r3, r7
 8000b5e:	2252      	movs	r2, #82	@ 0x52
 8000b60:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 8000b64:	7ffb      	ldrb	r3, [r7, #31]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	77fa      	strb	r2, [r7, #31]
 8000b6a:	3320      	adds	r3, #32
 8000b6c:	443b      	add	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	77fa      	strb	r2, [r7, #31]
 8000b7a:	3320      	adds	r3, #32
 8000b7c:	443b      	add	r3, r7
 8000b7e:	223a      	movs	r2, #58	@ 0x3a
 8000b80:	f803 2c18 	strb.w	r2, [r3, #-24]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//ID EN LA POSICION 2
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	785b      	ldrb	r3, [r3, #1]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	79db      	ldrb	r3, [r3, #7]
 8000b90:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b92:	d002      	beq.n	8000b9a <decodeData+0x86>
 8000b94:	2bf1      	cmp	r3, #241	@ 0xf1
 8000b96:	d013      	beq.n	8000bc0 <decodeData+0xac>
 8000b98:	e025      	b.n	8000be6 <decodeData+0xd2>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8000b9a:	7ffb      	ldrb	r3, [r7, #31]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	77fa      	strb	r2, [r7, #31]
 8000ba0:	3320      	adds	r3, #32
 8000ba2:	443b      	add	r3, r7
 8000ba4:	22f0      	movs	r2, #240	@ 0xf0
 8000ba6:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0x0D;
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	77fa      	strb	r2, [r7, #31]
 8000bb0:	3320      	adds	r3, #32
 8000bb2:	443b      	add	r3, r7
 8000bb4:	220d      	movs	r2, #13
 8000bb6:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	733b      	strb	r3, [r7, #12]

    break;
 8000bbe:	e01d      	b.n	8000bfc <decodeData+0xe8>
    case FIRMWARE:

        bufAux[indiceAux++]=FIRMWARE;
 8000bc0:	7ffb      	ldrb	r3, [r7, #31]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	77fa      	strb	r2, [r7, #31]
 8000bc6:	3320      	adds	r3, #32
 8000bc8:	443b      	add	r3, r7
 8000bca:	22f1      	movs	r2, #241	@ 0xf1
 8000bcc:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0xF1;
 8000bd0:	7ffb      	ldrb	r3, [r7, #31]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	77fa      	strb	r2, [r7, #31]
 8000bd6:	3320      	adds	r3, #32
 8000bd8:	443b      	add	r3, r7
 8000bda:	22f1      	movs	r2, #241	@ 0xf1
 8000bdc:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000be0:	2303      	movs	r3, #3
 8000be2:	733b      	strb	r3, [r7, #12]

    break;
 8000be4:	e00a      	b.n	8000bfc <decodeData+0xe8>

    default:

        bufAux[indiceAux++]=0xFF;
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	77fa      	strb	r2, [r7, #31]
 8000bec:	3320      	adds	r3, #32
 8000bee:	443b      	add	r3, r7
 8000bf0:	22ff      	movs	r2, #255	@ 0xff
 8000bf2:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x02;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	733b      	strb	r3, [r7, #12]

        break;
 8000bfa:	bf00      	nop
    }
    cks=0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000c00:	2300      	movs	r3, #0
 8000c02:	777b      	strb	r3, [r7, #29]
 8000c04:	e01b      	b.n	8000c3e <decodeData+0x12a>

        cks^= bufAux[i];
 8000c06:	7f7b      	ldrb	r3, [r7, #29]
 8000c08:	3320      	adds	r3, #32
 8000c0a:	443b      	add	r3, r7
 8000c0c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000c10:	7fbb      	ldrb	r3, [r7, #30]
 8000c12:	4053      	eors	r3, r2
 8000c14:	77bb      	strb	r3, [r7, #30]
        datosCom->bufferTx[datosCom->indexWriteTx++]=bufAux[i];
 8000c16:	7f7a      	ldrb	r2, [r7, #29]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	795b      	ldrb	r3, [r3, #5]
 8000c1c:	1c59      	adds	r1, r3, #1
 8000c1e:	b2c8      	uxtb	r0, r1
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	7148      	strb	r0, [r1, #5]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f102 0320 	add.w	r3, r2, #32
 8000c2a:	443b      	add	r3, r7
 8000c2c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000c38:	7f7b      	ldrb	r3, [r7, #29]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	777b      	strb	r3, [r7, #29]
 8000c3e:	7f7a      	ldrb	r2, [r7, #29]
 8000c40:	7ffb      	ldrb	r3, [r7, #31]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3df      	bcc.n	8000c06 <decodeData+0xf2>

    }

     datosCom->bufferTx[datosCom->indexWriteTx++]=cks;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	795b      	ldrb	r3, [r3, #5]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	b2d1      	uxtb	r1, r2
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	7151      	strb	r1, [r2, #5]
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	7fba      	ldrb	r2, [r7, #30]
 8000c5a:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
}
 8000c5e:	bf00      	nop
 8000c60:	3724      	adds	r7, #36	@ 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	791a      	ldrb	r2, [r3, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	78db      	ldrb	r3, [r3, #3]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d002      	beq.n	8000c84 <comunicationsTask+0x1a>
		DecodeHeader(datosCom);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fe4e 	bl	8000920 <DecodeHeader>
	}
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000c98:	2300      	movs	r3, #0
 8000c9a:	81fb      	strh	r3, [r7, #14]
 8000c9c:	e012      	b.n	8000cc4 <datafromUSB+0x38>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <datafromUSB+0x54>)
 8000ca6:	78d2      	ldrb	r2, [r2, #3]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <datafromUSB+0x54>)
 8000cae:	440b      	add	r3, r1
 8000cb0:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <datafromUSB+0x54>)
 8000cb4:	78db      	ldrb	r3, [r3, #3]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <datafromUSB+0x54>)
 8000cbc:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	81fb      	strh	r3, [r7, #14]
 8000cc4:	89fa      	ldrh	r2, [r7, #14]
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3e8      	bcc.n	8000c9e <datafromUSB+0x12>
  }

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <datafromUSB+0x58>)
 8000cd2:	f000 ff0c 	bl	8001aee <HAL_GPIO_TogglePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200001fc 	.word	0x200001fc
 8000ce4:	40020800 	.word	0x40020800

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <Error_Handler+0x8>

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <HAL_ADC_MspInit+0xb0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d141      	bne.n	8000dea <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d76:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_ADC_MspInit+0xb4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000dba:	23fe      	movs	r3, #254	@ 0xfe
 8000dbc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480b      	ldr	r0, [pc, #44]	@ (8000dfc <HAL_ADC_MspInit+0xb8>)
 8000dce:	f000 fcf1 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <HAL_ADC_MspInit+0xbc>)
 8000de6:	f000 fce5 	bl	80017b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40012000 	.word	0x40012000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_TIM_Base_MspInit+0x70>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10e      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <HAL_TIM_Base_MspInit+0x74>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <HAL_TIM_Base_MspInit+0x74>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <HAL_TIM_Base_MspInit+0x74>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000e32:	e01a      	b.n	8000e6a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a10      	ldr	r2, [pc, #64]	@ (8000e7c <HAL_TIM_Base_MspInit+0x78>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d115      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_TIM_Base_MspInit+0x74>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <HAL_TIM_Base_MspInit+0x74>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_TIM_Base_MspInit+0x74>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201a      	movs	r0, #26
 8000e60:	f000 fc71 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e64:	201a      	movs	r0, #26
 8000e66:	f000 fc8a 	bl	800177e <HAL_NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40014400 	.word	0x40014400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40014800 	.word	0x40014800

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f8a5 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ee6:	f002 fd51 	bl	800398c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001b0 	.word	0x200001b0

08000ef4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <OTG_FS_IRQHandler+0x10>)
 8000efa:	f000 ff56 	bl	8001daa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000cf0 	.word	0x20000cf0

08000f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f30:	f7ff ffea 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f34:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f36:	490d      	ldr	r1, [pc, #52]	@ (8000f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f006 ff27 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fae1 	bl	8000524 <main>
  bx  lr    
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000f70:	08007e74 	.word	0x08007e74
  ldr r2, =_sbss
 8000f74:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000f78:	200013f4 	.word	0x200013f4

08000f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fbc1 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fe9e 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fbd9 	bl	800179a <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fba1 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	@ (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	20000408 	.word	0x20000408

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000408 	.word	0x20000408

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008

080010ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e033      	b.n	800112a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fe3a 	bl	8000d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d118      	bne.n	800111c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010f2:	f023 0302 	bic.w	r3, r3, #2
 80010f6:	f043 0202 	orr.w	r2, r3, #2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f94a 	bl	8001398 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
 800111a:	e001      	b.n	8001120 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x1c>
 800114c:	2302      	movs	r3, #2
 800114e:	e113      	b.n	8001378 <HAL_ADC_ConfigChannel+0x244>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d925      	bls.n	80011ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68d9      	ldr	r1, [r3, #12]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	3b1e      	subs	r3, #30
 8001176:	2207      	movs	r2, #7
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43da      	mvns	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	400a      	ands	r2, r1
 8001184:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68d9      	ldr	r1, [r3, #12]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	4603      	mov	r3, r0
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4403      	add	r3, r0
 800119e:	3b1e      	subs	r3, #30
 80011a0:	409a      	lsls	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	e022      	b.n	80011f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6919      	ldr	r1, [r3, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	2207      	movs	r2, #7
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	400a      	ands	r2, r1
 80011ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6919      	ldr	r1, [r3, #16]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	409a      	lsls	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d824      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b05      	subs	r3, #5
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b05      	subs	r3, #5
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	635a      	str	r2, [r3, #52]	@ 0x34
 8001242:	e04c      	b.n	80012de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b0c      	cmp	r3, #12
 800124a:	d824      	bhi.n	8001296 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b23      	subs	r3, #35	@ 0x23
 800125e:	221f      	movs	r2, #31
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43da      	mvns	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	400a      	ands	r2, r1
 800126c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	3b23      	subs	r3, #35	@ 0x23
 8001288:	fa00 f203 	lsl.w	r2, r0, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	631a      	str	r2, [r3, #48]	@ 0x30
 8001294:	e023      	b.n	80012de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b41      	subs	r3, #65	@ 0x41
 80012a8:	221f      	movs	r2, #31
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	400a      	ands	r2, r1
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b41      	subs	r3, #65	@ 0x41
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012de:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <HAL_ADC_ConfigChannel+0x250>)
 80012e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <HAL_ADC_ConfigChannel+0x254>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d10f      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1d8>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d10b      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_ADC_ConfigChannel+0x254>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_ADC_ConfigChannel+0x23a>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <HAL_ADC_ConfigChannel+0x258>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x1f4>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b11      	cmp	r3, #17
 8001326:	d122      	bne.n	800136e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a11      	ldr	r2, [pc, #68]	@ (800138c <HAL_ADC_ConfigChannel+0x258>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d111      	bne.n	800136e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_ADC_ConfigChannel+0x25c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <HAL_ADC_ConfigChannel+0x260>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9a      	lsrs	r2, r3, #18
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001360:	e002      	b.n	8001368 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3b01      	subs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40012300 	.word	0x40012300
 8001388:	40012000 	.word	0x40012000
 800138c:	10000012 	.word	0x10000012
 8001390:	20000000 	.word	0x20000000
 8001394:	431bde83 	.word	0x431bde83

08001398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a0:	4b79      	ldr	r3, [pc, #484]	@ (8001588 <ADC_Init+0x1f0>)
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	021a      	lsls	r2, r3, #8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	4a58      	ldr	r2, [pc, #352]	@ (800158c <ADC_Init+0x1f4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d022      	beq.n	8001476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800143e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6899      	ldr	r1, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6899      	ldr	r1, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e00f      	b.n	8001496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001494:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0202 	bic.w	r2, r2, #2
 80014a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
 80014b0:	005a      	lsls	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01b      	beq.n	80014fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ee:	3b01      	subs	r3, #1
 80014f0:	035a      	lsls	r2, r3, #13
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	e007      	b.n	800150c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800150a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800151a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	3b01      	subs	r3, #1
 8001528:	051a      	lsls	r2, r3, #20
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800154e:	025a      	lsls	r2, r3, #9
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	029a      	lsls	r2, r3, #10
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40012300 	.word	0x40012300
 800158c:	0f000001 	.word	0x0f000001

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	@ (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	@ (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	@ 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff3e 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e159      	b.n	8001a84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8148 	bne.w	8001a7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	2b02      	cmp	r3, #2
 8001804:	d130      	bne.n	8001868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d017      	beq.n	80018a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a2 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <HAL_GPIO_Init+0x2e8>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a56      	ldr	r2, [pc, #344]	@ (8001a9c <HAL_GPIO_Init+0x2e8>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b54      	ldr	r3, [pc, #336]	@ (8001a9c <HAL_GPIO_Init+0x2e8>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a52      	ldr	r2, [pc, #328]	@ (8001aa0 <HAL_GPIO_Init+0x2ec>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a49      	ldr	r2, [pc, #292]	@ (8001aa4 <HAL_GPIO_Init+0x2f0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0x202>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a48      	ldr	r2, [pc, #288]	@ (8001aa8 <HAL_GPIO_Init+0x2f4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0x1fe>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a47      	ldr	r2, [pc, #284]	@ (8001aac <HAL_GPIO_Init+0x2f8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00d      	beq.n	80019ae <HAL_GPIO_Init+0x1fa>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a46      	ldr	r2, [pc, #280]	@ (8001ab0 <HAL_GPIO_Init+0x2fc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d007      	beq.n	80019aa <HAL_GPIO_Init+0x1f6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a45      	ldr	r2, [pc, #276]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_GPIO_Init+0x1f2>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019a6:	2307      	movs	r3, #7
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019b6:	2300      	movs	r3, #0
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c8:	4935      	ldr	r1, [pc, #212]	@ (8001aa0 <HAL_GPIO_Init+0x2ec>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fa:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a24:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a78:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	f67f aea2 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40013c00 	.word	0x40013c00

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af02      	add	r7, sp, #8
 8001b28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e101      	b.n	8001d38 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f005 fe1a 	bl	8007788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b62:	d102      	bne.n	8001b6a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 f9d5 	bl	8003f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7c1a      	ldrb	r2, [r3, #16]
 8001b7c:	f88d 2000 	strb.w	r2, [sp]
 8001b80:	3304      	adds	r3, #4
 8001b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b84:	f002 f8b4 	bl	8003cf0 <USB_CoreInit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0ce      	b.n	8001d38 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 f9cd 	bl	8003f40 <USB_SetCurrentMode>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0bf      	b.n	8001d38 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e04a      	b.n	8001c54 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3315      	adds	r3, #21
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3314      	adds	r3, #20
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b298      	uxth	r0, r3
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	332e      	adds	r3, #46	@ 0x2e
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	331c      	adds	r3, #28
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3320      	adds	r3, #32
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	3324      	adds	r3, #36	@ 0x24
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	791b      	ldrb	r3, [r3, #4]
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3af      	bcc.n	8001bbe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e044      	b.n	8001cee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	791b      	ldrb	r3, [r3, #4]
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3b5      	bcc.n	8001c64 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7c1a      	ldrb	r2, [r3, #16]
 8001d00:	f88d 2000 	strb.w	r2, [sp]
 8001d04:	3304      	adds	r3, #4
 8001d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d08:	f002 f966 	bl	8003fd8 <USB_DevInit>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00c      	b.n	8001d38 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f9b0 	bl	8005096 <USB_DevDisconnect>

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_PCD_Start+0x1c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e022      	b.n	8001da2 <HAL_PCD_Start+0x62>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 f8b7 	bl	8003efc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 f95e 	bl	8005054 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001daa:	b590      	push	{r4, r7, lr}
 8001dac:	b08d      	sub	sp, #52	@ 0x34
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fa1c 	bl	80051fe <USB_GetMode>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 848c 	bne.w	80026e6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 f980 	bl	80050d8 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8482 	beq.w	80026e4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 f96d 	bl	80050d8 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d107      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f002 0202 	and.w	r2, r2, #2
 8001e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 f95b 	bl	80050d8 <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d161      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0210 	bic.w	r2, r2, #16
 8001e3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001e62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e66:	d124      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d035      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a38      	ldr	r0, [r7, #32]
 8001e88:	f002 ff92 	bl	8004db0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e98:	441a      	add	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eaa:	441a      	add	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	615a      	str	r2, [r3, #20]
 8001eb0:	e016      	b.n	8001ee0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001eb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001ebc:	d110      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6a38      	ldr	r0, [r7, #32]
 8001eca:	f002 ff71 	bl	8004db0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eda:	441a      	add	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0210 	orr.w	r2, r2, #16
 8001eee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 f8ef 	bl	80050d8 <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f04:	f040 80a7 	bne.w	8002056 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 f8f4 	bl	80050fe <USB_ReadDevAllOutEpInterrupt>
 8001f16:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001f18:	e099      	b.n	800204e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 808e 	beq.w	8002042 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f918 	bl	8005166 <USB_ReadDevOutEPInterrupt>
 8001f36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2301      	movs	r3, #1
 8001f52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fea4 	bl	8002ca4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f72:	461a      	mov	r2, r3
 8001f74:	2308      	movs	r3, #8
 8001f76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 ff7a 	bl	8002e74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f96:	461a      	mov	r2, r3
 8001f98:	2310      	movs	r3, #16
 8001f9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d030      	beq.n	8002008 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	2b80      	cmp	r3, #128	@ 0x80
 8001fb0:	d109      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	78db      	ldrb	r3, [r3, #3]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d108      	bne.n	8001ff6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f005 fcc5 	bl	8007980 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002002:	461a      	mov	r2, r3
 8002004:	2302      	movs	r3, #2
 8002006:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800201e:	461a      	mov	r2, r3
 8002020:	2320      	movs	r3, #32
 8002022:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002040:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	f47f af62 	bne.w	8001f1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 f83c 	bl	80050d8 <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002066:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800206a:	f040 80db 	bne.w	8002224 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f003 f85d 	bl	8005132 <USB_ReadDevAllInEpInterrupt>
 8002078:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800207e:	e0cd      	b.n	800221c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80c2 	beq.w	8002210 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f003 f883 	bl	80051a2 <USB_ReadDevInEPInterrupt>
 800209c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d057      	beq.n	8002158 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	2201      	movs	r2, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020c8:	4013      	ands	r3, r2
 80020ca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020d8:	461a      	mov	r2, r3
 80020da:	2301      	movs	r3, #1
 80020dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	799b      	ldrb	r3, [r3, #6]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d132      	bne.n	800214c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3320      	adds	r3, #32
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4403      	add	r3, r0
 8002106:	331c      	adds	r3, #28
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4419      	add	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4403      	add	r3, r0
 800211a:	3320      	adds	r3, #32
 800211c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d113      	bne.n	800214c <HAL_PCD_IRQHandler+0x3a2>
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3324      	adds	r3, #36	@ 0x24
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d108      	bne.n	800214c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002144:	461a      	mov	r2, r3
 8002146:	2101      	movs	r1, #1
 8002148:	f003 f88a 	bl	8005260 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f005 fb99 	bl	800788a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800216e:	461a      	mov	r2, r3
 8002170:	2308      	movs	r3, #8
 8002172:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800218a:	461a      	mov	r2, r3
 800218c:	2310      	movs	r3, #16
 800218e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021a6:	461a      	mov	r2, r3
 80021a8:	2340      	movs	r3, #64	@ 0x40
 80021aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d023      	beq.n	80021fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021b8:	6a38      	ldr	r0, [r7, #32]
 80021ba:	f002 f871 	bl	80042a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	3310      	adds	r3, #16
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	78db      	ldrb	r3, [r3, #3]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f005 fbdc 	bl	80079a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021f8:	461a      	mov	r2, r3
 80021fa:	2302      	movs	r3, #2
 80021fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fcbd 	bl	8002b8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	3301      	adds	r3, #1
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800221c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f af2e 	bne.w	8002080 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f002 ff55 	bl	80050d8 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002238:	d122      	bne.n	8002280 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002254:	2b01      	cmp	r3, #1
 8002256:	d108      	bne.n	800226a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002260:	2100      	movs	r1, #0
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fea4 	bl	8002fb0 <HAL_PCDEx_LPM_Callback>
 8002268:	e002      	b.n	8002270 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f005 fb7a 	bl	8007964 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800227e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f002 ff27 	bl	80050d8 <USB_ReadInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002294:	d112      	bne.n	80022bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f005 fb36 	bl	8007918 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80022ba:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 ff09 	bl	80050d8 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022d0:	f040 80b7 	bne.w	8002442 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2110      	movs	r1, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 ffd6 	bl	80042a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f8:	e046      	b.n	8002388 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002306:	461a      	mov	r2, r3
 8002308:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800230c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800230e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800231e:	0151      	lsls	r1, r2, #5
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	440a      	add	r2, r1
 8002324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002328:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800232c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233a:	461a      	mov	r2, r3
 800233c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002340:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002352:	0151      	lsls	r1, r2, #5
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	440a      	add	r2, r1
 8002358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800235c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002360:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	440a      	add	r2, r1
 8002378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800237c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002380:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	3301      	adds	r3, #1
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	461a      	mov	r2, r3
 800238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002390:	4293      	cmp	r3, r2
 8002392:	d3b2      	bcc.n	80022fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023a2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80023a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7bdb      	ldrb	r3, [r3, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023c0:	f043 030b 	orr.w	r3, r3, #11
 80023c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023d6:	f043 030b 	orr.w	r3, r3, #11
 80023da:	6453      	str	r3, [r2, #68]	@ 0x44
 80023dc:	e015      	b.n	800240a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023f0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80023f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002404:	f043 030b 	orr.w	r3, r3, #11
 8002408:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002418:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800241c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800242c:	461a      	mov	r2, r3
 800242e:	f002 ff17 	bl	8005260 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 fe46 	bl	80050d8 <USB_ReadInterrupts>
 800244c:	4603      	mov	r3, r0
 800244e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002456:	d123      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f002 fedc 	bl	800521a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f001 ff93 	bl	8004392 <USB_GetDevSpeed>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681c      	ldr	r4, [r3, #0]
 8002478:	f001 f9ca 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002482:	461a      	mov	r2, r3
 8002484:	4620      	mov	r0, r4
 8002486:	f001 fc97 	bl	8003db8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f005 fa25 	bl	80078da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800249e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fe17 	bl	80050d8 <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d10a      	bne.n	80024ca <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f005 fa02 	bl	80078be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f002 0208 	and.w	r2, r2, #8
 80024c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fe02 	bl	80050d8 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024da:	2b80      	cmp	r3, #128	@ 0x80
 80024dc:	d123      	bne.n	8002526 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ee:	e014      	b.n	800251a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fb0a 	bl	8002b28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	3301      	adds	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	4293      	cmp	r3, r2
 8002524:	d3e4      	bcc.n	80024f0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fdd4 	bl	80050d8 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800253a:	d13c      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800253c:	2301      	movs	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002540:	e02b      	b.n	800259a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3318      	adds	r3, #24
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d115      	bne.n	8002594 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002568:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	da12      	bge.n	8002594 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3317      	adds	r3, #23
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 faca 	bl	8002b28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	3301      	adds	r3, #1
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	791b      	ldrb	r3, [r3, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d3cd      	bcc.n	8002542 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fd8c 	bl	80050d8 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025ca:	d156      	bne.n	800267a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d0:	e045      	b.n	800265e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d12e      	bne.n	8002658 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da2b      	bge.n	8002658 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	0c1a      	lsrs	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800260a:	4053      	eors	r3, r2
 800260c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002610:	2b00      	cmp	r3, #0
 8002612:	d121      	bne.n	8002658 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002650:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002654:	6053      	str	r3, [r2, #4]
            break;
 8002656:	e008      	b.n	800266a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	3301      	adds	r3, #1
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	791b      	ldrb	r3, [r3, #4]
 8002662:	461a      	mov	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	4293      	cmp	r3, r2
 8002668:	d3b3      	bcc.n	80025d2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fd2a 	bl	80050d8 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268e:	d10a      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f005 f999 	bl	80079c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80026a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fd14 	bl	80050d8 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d115      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f005 f989 	bl	80079e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e000      	b.n	80026e6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80026e4:	bf00      	nop
    }
  }
}
 80026e6:	3734      	adds	r7, #52	@ 0x34
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}

080026ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_PCD_SetAddress+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e012      	b.n	800272c <HAL_PCD_SetAddress+0x40>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fc73 	bl	8005008 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	70fb      	strb	r3, [r7, #3]
 8002746:	460b      	mov	r3, r1
 8002748:	803b      	strh	r3, [r7, #0]
 800274a:	4613      	mov	r3, r2
 800274c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002756:	2b00      	cmp	r3, #0
 8002758:	da0f      	bge.n	800277a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	f003 020f 	and.w	r2, r3, #15
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	3310      	adds	r3, #16
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	705a      	strb	r2, [r3, #1]
 8002778:	e00f      	b.n	800279a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	f003 020f 	and.w	r2, r3, #15
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80027a6:	883b      	ldrh	r3, [r7, #0]
 80027a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	78ba      	ldrb	r2, [r7, #2]
 80027b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027c8:	78bb      	ldrb	r3, [r7, #2]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d102      	bne.n	80027d4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_PCD_EP_Open+0xae>
 80027de:	2302      	movs	r3, #2
 80027e0:	e00e      	b.n	8002800 <HAL_PCD_EP_Open+0xcc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 fdf3 	bl	80043dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80027fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002818:	2b00      	cmp	r3, #0
 800281a:	da0f      	bge.n	800283c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	3310      	adds	r3, #16
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	705a      	strb	r2, [r3, #1]
 800283a:	e00f      	b.n	800285c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_PCD_EP_Close+0x6e>
 8002872:	2302      	movs	r3, #2
 8002874:	e00e      	b.n	8002894 <HAL_PCD_EP_Close+0x8c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	4618      	mov	r0, r3
 8002886:	f001 fe31 	bl	80044ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	460b      	mov	r3, r1
 80028aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4413      	add	r3, r2
 80028c2:	3304      	adds	r3, #4
 80028c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2200      	movs	r2, #0
 80028dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	799b      	ldrb	r3, [r3, #6]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	799b      	ldrb	r3, [r3, #6]
 8002900:	461a      	mov	r2, r3
 8002902:	6979      	ldr	r1, [r7, #20]
 8002904:	f001 fece 	bl	80046a4 <USB_EPStartXfer>

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002934:	681b      	ldr	r3, [r3, #0]
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	460b      	mov	r3, r1
 8002950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	3310      	adds	r3, #16
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	3304      	adds	r3, #4
 8002968:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2201      	movs	r2, #1
 8002980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	b2da      	uxtb	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	799b      	ldrb	r3, [r3, #6]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d102      	bne.n	800299c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	799b      	ldrb	r3, [r3, #6]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	f001 fe7c 	bl	80046a4 <USB_EPStartXfer>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	7912      	ldrb	r2, [r2, #4]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e04f      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da0f      	bge.n	80029fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	3310      	adds	r3, #16
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	3304      	adds	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	705a      	strb	r2, [r3, #1]
 80029fa:	e00d      	b.n	8002a18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3304      	adds	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_PCD_EP_SetStall+0x82>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e01d      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xbe>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68f9      	ldr	r1, [r7, #12]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fa0a 	bl	8004e60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7999      	ldrb	r1, [r3, #6]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a64:	461a      	mov	r2, r3
 8002a66:	f002 fbfb 	bl	8005260 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	7912      	ldrb	r2, [r2, #4]
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e042      	b.n	8002b20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da0f      	bge.n	8002ac2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3310      	adds	r3, #16
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	705a      	strb	r2, [r3, #1]
 8002ac0:	e00f      	b.n	8002ae2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_EP_ClrStall+0x86>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e00e      	b.n	8002b20 <HAL_PCD_EP_ClrStall+0xa4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fa13 	bl	8004f3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0c      	bge.n	8002b56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e00c      	b.n	8002b70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 f832 	bl	8004be0 <USB_EPStopXfer>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b80:	7afb      	ldrb	r3, [r7, #11]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b08a      	sub	sp, #40	@ 0x28
 8002b8e:	af02      	add	r7, sp, #8
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	3310      	adds	r3, #16
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d901      	bls.n	8002bc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d902      	bls.n	8002bde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3303      	adds	r3, #3
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be6:	e02a      	b.n	8002c3e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d902      	bls.n	8002c04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	3303      	adds	r3, #3
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68d9      	ldr	r1, [r3, #12]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6978      	ldr	r0, [r7, #20]
 8002c22:	f002 f887 	bl	8004d34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	441a      	add	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	441a      	add	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d809      	bhi.n	8002c68 <PCD_WriteEmptyTxFifo+0xde>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d203      	bcs.n	8002c68 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1bf      	bne.n	8002be8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d811      	bhi.n	8002c98 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c94:	4013      	ands	r3, r2
 8002c96:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	333c      	adds	r3, #60	@ 0x3c
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	799b      	ldrb	r3, [r3, #6]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d17b      	bne.n	8002dd2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4a61      	ldr	r2, [pc, #388]	@ (8002e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	f240 80b9 	bls.w	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80b3 	beq.w	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d06:	461a      	mov	r2, r3
 8002d08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d0c:	6093      	str	r3, [r2, #8]
 8002d0e:	e0a7      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d26:	461a      	mov	r2, r3
 8002d28:	2320      	movs	r3, #32
 8002d2a:	6093      	str	r3, [r2, #8]
 8002d2c:	e098      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f040 8093 	bne.w	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d90f      	bls.n	8002d62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d5e:	6093      	str	r3, [r2, #8]
 8002d60:	e07e      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	0159      	lsls	r1, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d114      	bne.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dac:	461a      	mov	r2, r3
 8002dae:	2101      	movs	r1, #1
 8002db0:	f002 fa56 	bl	8005260 <USB_EP0_OutStart>
 8002db4:	e006      	b.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f004 fd42 	bl	8007854 <HAL_PCD_DataOutStageCallback>
 8002dd0:	e046      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	@ (8002e70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d124      	bne.n	8002e24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df0:	461a      	mov	r2, r3
 8002df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002df6:	6093      	str	r3, [r2, #8]
 8002df8:	e032      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e10:	461a      	mov	r2, r3
 8002e12:	2320      	movs	r3, #32
 8002e14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f004 fd19 	bl	8007854 <HAL_PCD_DataOutStageCallback>
 8002e22:	e01d      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d114      	bne.n	8002e54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f002 fa06 	bl	8005260 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f004 fcfa 	bl	8007854 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	4f54300a 	.word	0x4f54300a
 8002e70:	4f54310a 	.word	0x4f54310a

08002e74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	333c      	adds	r3, #60	@ 0x3c
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a15      	ldr	r2, [pc, #84]	@ (8002efc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d90e      	bls.n	8002ec8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ec6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f004 fcb1 	bl	8007830 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d90c      	bls.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	799b      	ldrb	r3, [r3, #6]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2101      	movs	r1, #1
 8002eec:	f002 f9b8 	bl	8005260 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	4f54300a 	.word	0x4f54300a

08002f00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f1e:	883b      	ldrh	r3, [r7, #0]
 8002f20:	0419      	lsls	r1, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f2c:	e028      	b.n	8002f80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	4413      	add	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e00d      	b.n	8002f5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3340      	adds	r3, #64	@ 0x40
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4413      	add	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d3ec      	bcc.n	8002f42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f68:	883b      	ldrh	r3, [r7, #0]
 8002f6a:	0418      	lsls	r0, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	4302      	orrs	r2, r0
 8002f78:	3340      	adds	r3, #64	@ 0x40
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e267      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d075      	beq.n	80030d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fe6:	4b88      	ldr	r3, [pc, #544]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00c      	beq.n	800300c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b85      	ldr	r3, [pc, #532]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d112      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b82      	ldr	r3, [pc, #520]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800300a:	d10b      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	4b7e      	ldr	r3, [pc, #504]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x108>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d157      	bne.n	80030d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e242      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800302c:	d106      	bne.n	800303c <HAL_RCC_OscConfig+0x74>
 800302e:	4b76      	ldr	r3, [pc, #472]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01d      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x98>
 8003046:	4b70      	ldr	r3, [pc, #448]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6f      	ldr	r2, [pc, #444]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b6d      	ldr	r3, [pc, #436]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6c      	ldr	r2, [pc, #432]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 8003060:	4b69      	ldr	r3, [pc, #420]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a68      	ldr	r2, [pc, #416]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b66      	ldr	r3, [pc, #408]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a65      	ldr	r2, [pc, #404]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fd ffe4 	bl	800104c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003088:	f7fd ffe0 	bl	800104c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	@ 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e207      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b5b      	ldr	r3, [pc, #364]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0xc0>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd ffd0 	bl	800104c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd ffcc 	bl	800104c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	@ 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1f3      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	4b51      	ldr	r3, [pc, #324]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0xe8>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030de:	4b4a      	ldr	r3, [pc, #296]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b47      	ldr	r3, [pc, #284]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b44      	ldr	r3, [pc, #272]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1c7      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b3b      	ldr	r3, [pc, #236]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4937      	ldr	r1, [pc, #220]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e03a      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x244>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fd ff85 	bl	800104c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7fd ff81 	bl	800104c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1a8      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b28      	ldr	r3, [pc, #160]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4925      	ldr	r1, [pc, #148]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b24      	ldr	r3, [pc, #144]	@ (800320c <HAL_RCC_OscConfig+0x244>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd ff64 	bl	800104c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003188:	f7fd ff60 	bl	800104c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e187      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d036      	beq.n	8003220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_RCC_OscConfig+0x248>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fd ff44 	bl	800104c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fd ff40 	bl	800104c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e167      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <HAL_RCC_OscConfig+0x240>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x200>
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_OscConfig+0x248>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fd ff2d 	bl	800104c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e00e      	b.n	8003214 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fd ff29 	bl	800104c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d907      	bls.n	8003214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e150      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003208:	40023800 	.word	0x40023800
 800320c:	42470000 	.word	0x42470000
 8003210:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b88      	ldr	r3, [pc, #544]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ea      	bne.n	80031f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8097 	beq.w	800335c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b81      	ldr	r3, [pc, #516]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b7d      	ldr	r3, [pc, #500]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	4a7c      	ldr	r2, [pc, #496]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	@ 0x40
 800324e:	4b7a      	ldr	r3, [pc, #488]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b77      	ldr	r3, [pc, #476]	@ (800343c <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b74      	ldr	r3, [pc, #464]	@ (800343c <HAL_RCC_OscConfig+0x474>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a73      	ldr	r2, [pc, #460]	@ (800343c <HAL_RCC_OscConfig+0x474>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fd fee9 	bl	800104c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fd fee5 	bl	800104c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e10c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b6a      	ldr	r3, [pc, #424]	@ (800343c <HAL_RCC_OscConfig+0x474>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2ea>
 80032a4:	4b64      	ldr	r3, [pc, #400]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a8:	4a63      	ldr	r2, [pc, #396]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x30c>
 80032ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	4a5e      	ldr	r2, [pc, #376]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032d4:	4b58      	ldr	r3, [pc, #352]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d8:	4a57      	ldr	r2, [pc, #348]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e0:	4b55      	ldr	r3, [pc, #340]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a54      	ldr	r2, [pc, #336]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd feaa 	bl	800104c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fd fea6 	bl	800104c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0cb      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ee      	beq.n	80032fc <HAL_RCC_OscConfig+0x334>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fd fe94 	bl	800104c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fd fe90 	bl	800104c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0b5      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	4b3e      	ldr	r3, [pc, #248]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	4a38      	ldr	r2, [pc, #224]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a1 	beq.w	80034a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003366:	4b34      	ldr	r3, [pc, #208]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d05c      	beq.n	800342c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d141      	bne.n	80033fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd fe64 	bl	800104c <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd fe60 	bl	800104c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e087      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	491b      	ldr	r1, [pc, #108]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCC_OscConfig+0x478>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fd fe39 	bl	800104c <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033de:	f7fd fe35 	bl	800104c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e05c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x416>
 80033fc:	e054      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <HAL_RCC_OscConfig+0x478>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fe22 	bl	800104c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd fe1e 	bl	800104c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e045      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCC_OscConfig+0x470>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x444>
 800342a:	e03d      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e038      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003444:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <HAL_RCC_OscConfig+0x4ec>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d028      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800347a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0cc      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b68      	ldr	r3, [pc, #416]	@ (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d90c      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b65      	ldr	r3, [pc, #404]	@ (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	@ (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a58      	ldr	r2, [pc, #352]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003516:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a52      	ldr	r2, [pc, #328]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d044      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d119      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d003      	beq.n	8003576 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	2b03      	cmp	r3, #3
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e067      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003596:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4934      	ldr	r1, [pc, #208]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a8:	f7fd fd50 	bl	800104c <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7fd fd4c 	bl	800104c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e04f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 020c 	and.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1eb      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b25      	ldr	r3, [pc, #148]	@ (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d20c      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b22      	ldr	r3, [pc, #136]	@ (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	@ (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	@ (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fcb0 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00
 8003674:	40023800 	.word	0x40023800
 8003678:	08007e54 	.word	0x08007e54
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b090      	sub	sp, #64	@ 0x40
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369c:	4b59      	ldr	r3, [pc, #356]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	f200 80a1 	bhi.w	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036b6:	e09b      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036bc:	e09b      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b53      	ldr	r3, [pc, #332]	@ (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036c2:	e098      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d028      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b4a      	ldr	r3, [pc, #296]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036ec:	2100      	movs	r1, #0
 80036ee:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036f0:	fb03 f201 	mul.w	r2, r3, r1
 80036f4:	2300      	movs	r3, #0
 80036f6:	fb00 f303 	mul.w	r3, r0, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	4a43      	ldr	r2, [pc, #268]	@ (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036fe:	fba0 1202 	umull	r1, r2, r0, r2
 8003702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003704:	460a      	mov	r2, r1
 8003706:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800370a:	4413      	add	r3, r2
 800370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800370e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003710:	2200      	movs	r2, #0
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	61fa      	str	r2, [r7, #28]
 8003716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800371e:	f7fc fd5b 	bl	80001d8 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4613      	mov	r3, r2
 8003728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800372a:	e053      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372c:	4b35      	ldr	r3, [pc, #212]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	2200      	movs	r2, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	617a      	str	r2, [r7, #20]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	4652      	mov	r2, sl
 8003744:	465b      	mov	r3, fp
 8003746:	f04f 0000 	mov.w	r0, #0
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	0159      	lsls	r1, r3, #5
 8003750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003754:	0150      	lsls	r0, r2, #5
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ebb2 080a 	subs.w	r8, r2, sl
 800375e:	eb63 090b 	sbc.w	r9, r3, fp
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800376e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003772:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003776:	ebb2 0408 	subs.w	r4, r2, r8
 800377a:	eb63 0509 	sbc.w	r5, r3, r9
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	00eb      	lsls	r3, r5, #3
 8003788:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378c:	00e2      	lsls	r2, r4, #3
 800378e:	4614      	mov	r4, r2
 8003790:	461d      	mov	r5, r3
 8003792:	eb14 030a 	adds.w	r3, r4, sl
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	eb45 030b 	adc.w	r3, r5, fp
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037aa:	4629      	mov	r1, r5
 80037ac:	028b      	lsls	r3, r1, #10
 80037ae:	4621      	mov	r1, r4
 80037b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b4:	4621      	mov	r1, r4
 80037b6:	028a      	lsls	r2, r1, #10
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037be:	2200      	movs	r2, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	60fa      	str	r2, [r7, #12]
 80037c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c8:	f7fc fd06 	bl	80001d8 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	3301      	adds	r3, #1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80037e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80037f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3740      	adds	r7, #64	@ 0x40
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	017d7840 	.word	0x017d7840

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000

08003828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e041      	b.n	80038be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fad8 	bl	8000e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f000 f9a8 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d001      	beq.n	80038e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e044      	b.n	800396a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <HAL_TIM_Base_Start_IT+0xb0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x6c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390a:	d013      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x6c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1a      	ldr	r2, [pc, #104]	@ (800397c <HAL_TIM_Base_Start_IT+0xb4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x6c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a19      	ldr	r2, [pc, #100]	@ (8003980 <HAL_TIM_Base_Start_IT+0xb8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x6c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <HAL_TIM_Base_Start_IT+0xbc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x6c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a16      	ldr	r2, [pc, #88]	@ (8003988 <HAL_TIM_Base_Start_IT+0xc0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d111      	bne.n	8003958 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d010      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	e007      	b.n	8003968 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40014000 	.word	0x40014000

0800398c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d020      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01b      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0202 	mvn.w	r2, #2
 80039c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8d2 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8c4 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8d5 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d020      	beq.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01b      	beq.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0204 	mvn.w	r2, #4
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8ac 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f89e 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8af 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d020      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0208 	mvn.w	r2, #8
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f886 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f878 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f889 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0210 	mvn.w	r2, #16
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f860 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f852 	bl	8003b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f863 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0201 	mvn.w	r2, #1
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fc fd06 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8e0 	bl	8003cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f834 	bl	8003ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0220 	mvn.w	r2, #32
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8b2 	bl	8003cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <TIM_Base_SetConfig+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00f      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bda:	d00b      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a34      	ldr	r2, [pc, #208]	@ (8003cb0 <TIM_Base_SetConfig+0xf4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a33      	ldr	r2, [pc, #204]	@ (8003cb4 <TIM_Base_SetConfig+0xf8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x38>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a32      	ldr	r2, [pc, #200]	@ (8003cb8 <TIM_Base_SetConfig+0xfc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a28      	ldr	r2, [pc, #160]	@ (8003cac <TIM_Base_SetConfig+0xf0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01b      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c14:	d017      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a25      	ldr	r2, [pc, #148]	@ (8003cb0 <TIM_Base_SetConfig+0xf4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a24      	ldr	r2, [pc, #144]	@ (8003cb4 <TIM_Base_SetConfig+0xf8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a23      	ldr	r2, [pc, #140]	@ (8003cb8 <TIM_Base_SetConfig+0xfc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <TIM_Base_SetConfig+0x100>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <TIM_Base_SetConfig+0x104>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a20      	ldr	r2, [pc, #128]	@ (8003cc4 <TIM_Base_SetConfig+0x108>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0c      	ldr	r2, [pc, #48]	@ (8003cac <TIM_Base_SetConfig+0xf0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d103      	bne.n	8003c86 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800

08003cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	f107 001c 	add.w	r0, r7, #28
 8003cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d123      	bne.n	8003d52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d105      	bne.n	8003d46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f001 fae8 	bl	800531c <USB_CoreReset>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e01b      	b.n	8003d8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f001 fadc 	bl	800531c <USB_CoreReset>
 8003d64:	4603      	mov	r3, r0
 8003d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d7c:	e005      	b.n	8003d8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d8a:	7fbb      	ldrb	r3, [r7, #30]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10b      	bne.n	8003da8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f043 0206 	orr.w	r2, r3, #6
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003db4:	b004      	add	sp, #16
 8003db6:	4770      	bx	lr

08003db8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d165      	bne.n	8003e98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a41      	ldr	r2, [pc, #260]	@ (8003ed4 <USB_SetTurnaroundTime+0x11c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d906      	bls.n	8003de2 <USB_SetTurnaroundTime+0x2a>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a40      	ldr	r2, [pc, #256]	@ (8003ed8 <USB_SetTurnaroundTime+0x120>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d202      	bcs.n	8003de2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ddc:	230f      	movs	r3, #15
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e062      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed8 <USB_SetTurnaroundTime+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d306      	bcc.n	8003df8 <USB_SetTurnaroundTime+0x40>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a3b      	ldr	r2, [pc, #236]	@ (8003edc <USB_SetTurnaroundTime+0x124>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d202      	bcs.n	8003df8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003df2:	230e      	movs	r3, #14
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e057      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a38      	ldr	r2, [pc, #224]	@ (8003edc <USB_SetTurnaroundTime+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d306      	bcc.n	8003e0e <USB_SetTurnaroundTime+0x56>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a37      	ldr	r2, [pc, #220]	@ (8003ee0 <USB_SetTurnaroundTime+0x128>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d202      	bcs.n	8003e0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e08:	230d      	movs	r3, #13
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e04c      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4a33      	ldr	r2, [pc, #204]	@ (8003ee0 <USB_SetTurnaroundTime+0x128>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d306      	bcc.n	8003e24 <USB_SetTurnaroundTime+0x6c>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4a32      	ldr	r2, [pc, #200]	@ (8003ee4 <USB_SetTurnaroundTime+0x12c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d802      	bhi.n	8003e24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e1e:	230c      	movs	r3, #12
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e041      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee4 <USB_SetTurnaroundTime+0x12c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d906      	bls.n	8003e3a <USB_SetTurnaroundTime+0x82>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee8 <USB_SetTurnaroundTime+0x130>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d802      	bhi.n	8003e3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e34:	230b      	movs	r3, #11
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e036      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee8 <USB_SetTurnaroundTime+0x130>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d906      	bls.n	8003e50 <USB_SetTurnaroundTime+0x98>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <USB_SetTurnaroundTime+0x134>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d802      	bhi.n	8003e50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e4a:	230a      	movs	r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e02b      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <USB_SetTurnaroundTime+0x134>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d906      	bls.n	8003e66 <USB_SetTurnaroundTime+0xae>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a25      	ldr	r2, [pc, #148]	@ (8003ef0 <USB_SetTurnaroundTime+0x138>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d202      	bcs.n	8003e66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e60:	2309      	movs	r3, #9
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e020      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4a21      	ldr	r2, [pc, #132]	@ (8003ef0 <USB_SetTurnaroundTime+0x138>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d306      	bcc.n	8003e7c <USB_SetTurnaroundTime+0xc4>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a20      	ldr	r2, [pc, #128]	@ (8003ef4 <USB_SetTurnaroundTime+0x13c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e76:	2308      	movs	r3, #8
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e015      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <USB_SetTurnaroundTime+0x13c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d906      	bls.n	8003e92 <USB_SetTurnaroundTime+0xda>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef8 <USB_SetTurnaroundTime+0x140>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d202      	bcs.n	8003e92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e8c:	2307      	movs	r3, #7
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e00a      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e92:	2306      	movs	r3, #6
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e007      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e9e:	2309      	movs	r3, #9
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e001      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ea4:	2309      	movs	r3, #9
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	029b      	lsls	r3, r3, #10
 8003ebc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	00d8acbf 	.word	0x00d8acbf
 8003ed8:	00e4e1c0 	.word	0x00e4e1c0
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	01067380 	.word	0x01067380
 8003ee4:	011a499f 	.word	0x011a499f
 8003ee8:	01312cff 	.word	0x01312cff
 8003eec:	014ca43f 	.word	0x014ca43f
 8003ef0:	016e3600 	.word	0x016e3600
 8003ef4:	01a6ab1f 	.word	0x01a6ab1f
 8003ef8:	01e84800 	.word	0x01e84800

08003efc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d115      	bne.n	8003f8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f6e:	200a      	movs	r0, #10
 8003f70:	f7fd f878 	bl	8001064 <HAL_Delay>
      ms += 10U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	330a      	adds	r3, #10
 8003f78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 f93f 	bl	80051fe <USB_GetMode>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d01e      	beq.n	8003fc4 <USB_SetCurrentMode+0x84>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f8a:	d9f0      	bls.n	8003f6e <USB_SetCurrentMode+0x2e>
 8003f8c:	e01a      	b.n	8003fc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fa0:	200a      	movs	r0, #10
 8003fa2:	f7fd f85f 	bl	8001064 <HAL_Delay>
      ms += 10U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	330a      	adds	r3, #10
 8003faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f001 f926 	bl	80051fe <USB_GetMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <USB_SetCurrentMode+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2bc7      	cmp	r3, #199	@ 0xc7
 8003fbc:	d9f0      	bls.n	8003fa0 <USB_SetCurrentMode+0x60>
 8003fbe:	e001      	b.n	8003fc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e005      	b.n	8003fd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2bc8      	cmp	r3, #200	@ 0xc8
 8003fc8:	d101      	bne.n	8003fce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fd8:	b084      	sub	sp, #16
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e009      	b.n	800400c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	3340      	adds	r3, #64	@ 0x40
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b0e      	cmp	r3, #14
 8004010:	d9f2      	bls.n	8003ff8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004012:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11c      	bne.n	8004054 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004028:	f043 0302 	orr.w	r3, r3, #2
 800402c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	639a      	str	r2, [r3, #56]	@ 0x38
 8004052:	e00b      	b.n	800406c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004072:	461a      	mov	r2, r3
 8004074:	2300      	movs	r3, #0
 8004076:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004078:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10d      	bne.n	800409c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004088:	2100      	movs	r1, #0
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f968 	bl	8004360 <USB_SetDevSpeed>
 8004090:	e008      	b.n	80040a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004092:	2101      	movs	r1, #1
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f963 	bl	8004360 <USB_SetDevSpeed>
 800409a:	e003      	b.n	80040a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800409c:	2103      	movs	r1, #3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f95e 	bl	8004360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040a4:	2110      	movs	r1, #16
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8fa 	bl	80042a0 <USB_FlushTxFifo>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f924 	bl	8004304 <USB_FlushRxFifo>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040cc:	461a      	mov	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d8:	461a      	mov	r2, r3
 80040da:	2300      	movs	r3, #0
 80040dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e4:	461a      	mov	r2, r3
 80040e6:	2300      	movs	r3, #0
 80040e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	e043      	b.n	8004178 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004106:	d118      	bne.n	800413a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411a:	461a      	mov	r2, r3
 800411c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e013      	b.n	800414c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004130:	461a      	mov	r2, r3
 8004132:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e008      	b.n	800414c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004146:	461a      	mov	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416a:	461a      	mov	r2, r3
 800416c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3301      	adds	r3, #1
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800417c:	461a      	mov	r2, r3
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4293      	cmp	r3, r2
 8004182:	d3b5      	bcc.n	80040f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e043      	b.n	8004212 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800419c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041a0:	d118      	bne.n	80041d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b4:	461a      	mov	r2, r3
 80041b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e013      	b.n	80041e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ca:	461a      	mov	r2, r3
 80041cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e008      	b.n	80041e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800420a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3301      	adds	r3, #1
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004216:	461a      	mov	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4293      	cmp	r3, r2
 800421c:	d3b5      	bcc.n	800418a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800422c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004230:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800423e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f043 0210 	orr.w	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	4b10      	ldr	r3, [pc, #64]	@ (800429c <USB_DevInit+0x2c4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004260:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f043 0208 	orr.w	r2, r3, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004274:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004298:	b004      	add	sp, #16
 800429a:	4770      	bx	lr
 800429c:	803c3800 	.word	0x803c3800

080042a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3301      	adds	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042ba:	d901      	bls.n	80042c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e01b      	b.n	80042f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	daf2      	bge.n	80042ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	019b      	lsls	r3, r3, #6
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042e4:	d901      	bls.n	80042ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e006      	b.n	80042f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d0f0      	beq.n	80042d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800431c:	d901      	bls.n	8004322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e018      	b.n	8004354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	daf2      	bge.n	8004310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2210      	movs	r2, #16
 8004332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004340:	d901      	bls.n	8004346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e006      	b.n	8004354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b10      	cmp	r3, #16
 8004350:	d0f0      	beq.n	8004334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]
 80043b6:	e00a      	b.n	80043ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d002      	beq.n	80043c4 <USB_GetDevSpeed+0x32>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d102      	bne.n	80043ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043c4:	2302      	movs	r3, #2
 80043c6:	75fb      	strb	r3, [r7, #23]
 80043c8:	e001      	b.n	80043ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043ca:	230f      	movs	r3, #15
 80043cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	785b      	ldrb	r3, [r3, #1]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d13a      	bne.n	800446e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	b29b      	uxth	r3, r3
 8004410:	68f9      	ldr	r1, [r7, #12]
 8004412:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004416:	4313      	orrs	r3, r2
 8004418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d155      	bne.n	80044dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800444c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	059b      	lsls	r3, r3, #22
 8004452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004454:	4313      	orrs	r3, r2
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e036      	b.n	80044dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800448c:	4313      	orrs	r3, r2
 800448e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11a      	bne.n	80044dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	791b      	ldrb	r3, [r3, #4]
 80044c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044c2:	430b      	orrs	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d161      	bne.n	80045cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800451a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800451e:	d11f      	bne.n	8004560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800453a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800453e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800455a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800455e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	2101      	movs	r1, #1
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	b29b      	uxth	r3, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004580:	4013      	ands	r3, r2
 8004582:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	2101      	movs	r1, #1
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	b29b      	uxth	r3, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a4:	4013      	ands	r3, r2
 80045a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0159      	lsls	r1, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	440b      	add	r3, r1
 80045be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c2:	4619      	mov	r1, r3
 80045c4:	4b35      	ldr	r3, [pc, #212]	@ (800469c <USB_DeactivateEndpoint+0x1b0>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
 80045ca:	e060      	b.n	800468e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045e2:	d11f      	bne.n	8004624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800461e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800462a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	2101      	movs	r1, #1
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	041b      	lsls	r3, r3, #16
 800463c:	43db      	mvns	r3, r3
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004644:	4013      	ands	r3, r2
 8004646:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	43db      	mvns	r3, r3
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004668:	4013      	ands	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	0159      	lsls	r1, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	440b      	add	r3, r1
 8004682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004686:	4619      	mov	r1, r3
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <USB_DeactivateEndpoint+0x1b4>)
 800468a:	4013      	ands	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	ec337800 	.word	0xec337800
 80046a0:	eff37800 	.word	0xeff37800

080046a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	@ 0x28
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	f040 817f 	bne.w	80049c4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d132      	bne.n	8004734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80046ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80046f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800470c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800472c:	0cdb      	lsrs	r3, r3, #19
 800472e:	04db      	lsls	r3, r3, #19
 8004730:	6113      	str	r3, [r2, #16]
 8004732:	e097      	b.n	8004864 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800474e:	0cdb      	lsrs	r3, r3, #19
 8004750:	04db      	lsls	r3, r3, #19
 8004752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800476e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004772:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004776:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11a      	bne.n	80047b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d903      	bls.n	8004792 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047b0:	6113      	str	r3, [r2, #16]
 80047b2:	e044      	b.n	800483e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4413      	add	r3, r2
 80047be:	1e5a      	subs	r2, r3, #1
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	8afb      	ldrh	r3, [r7, #22]
 80047da:	04d9      	lsls	r1, r3, #19
 80047dc:	4ba4      	ldr	r3, [pc, #656]	@ (8004a70 <USB_EPStartXfer+0x3cc>)
 80047de:	400b      	ands	r3, r1
 80047e0:	69b9      	ldr	r1, [r7, #24]
 80047e2:	0148      	lsls	r0, r1, #5
 80047e4:	69f9      	ldr	r1, [r7, #28]
 80047e6:	4401      	add	r1, r0
 80047e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80047ec:	4313      	orrs	r3, r2
 80047ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d122      	bne.n	800483e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004812:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004816:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	8afb      	ldrh	r3, [r7, #22]
 8004828:	075b      	lsls	r3, r3, #29
 800482a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	0148      	lsls	r0, r1, #5
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	4401      	add	r1, r0
 8004836:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800483a:	4313      	orrs	r3, r2
 800483c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004854:	69b9      	ldr	r1, [r7, #24]
 8004856:	0148      	lsls	r0, r1, #5
 8004858:	69f9      	ldr	r1, [r7, #28]
 800485a:	4401      	add	r1, r0
 800485c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004860:	4313      	orrs	r3, r2
 8004862:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d14b      	bne.n	8004902 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	791b      	ldrb	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d128      	bne.n	80048e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d110      	bne.n	80048c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e00f      	b.n	80048e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	e166      	b.n	8004bd0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800491c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004920:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	791b      	ldrb	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d015      	beq.n	8004956 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 814e 	beq.w	8004bd0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	2101      	movs	r1, #1
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	69f9      	ldr	r1, [r7, #28]
 800494c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004950:	4313      	orrs	r3, r2
 8004952:	634b      	str	r3, [r1, #52]	@ 0x34
 8004954:	e13c      	b.n	8004bd0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d110      	bne.n	8004988 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e00f      	b.n	80049a8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68d9      	ldr	r1, [r3, #12]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	b298      	uxth	r0, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4603      	mov	r3, r0
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f9b9 	bl	8004d34 <USB_WritePacket>
 80049c2:	e105      	b.n	8004bd0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049de:	0cdb      	lsrs	r3, r3, #19
 80049e0:	04db      	lsls	r3, r3, #19
 80049e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a06:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d132      	bne.n	8004a74 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	0148      	lsls	r0, r1, #5
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	4401      	add	r1, r0
 8004a44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a6a:	6113      	str	r3, [r2, #16]
 8004a6c:	e062      	b.n	8004b34 <USB_EPStartXfer+0x490>
 8004a6e:	bf00      	nop
 8004a70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d123      	bne.n	8004ac4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	69b9      	ldr	r1, [r7, #24]
 8004a94:	0148      	lsls	r0, r1, #5
 8004a96:	69f9      	ldr	r1, [r7, #28]
 8004a98:	4401      	add	r1, r0
 8004a9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004abc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ac0:	6113      	str	r3, [r2, #16]
 8004ac2:	e037      	b.n	8004b34 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	1e5a      	subs	r2, r3, #1
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	8afa      	ldrh	r2, [r7, #22]
 8004ae0:	fb03 f202 	mul.w	r2, r3, r2
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	8afb      	ldrh	r3, [r7, #22]
 8004af8:	04d9      	lsls	r1, r3, #19
 8004afa:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <USB_EPStartXfer+0x538>)
 8004afc:	400b      	ands	r3, r1
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	0148      	lsls	r0, r1, #5
 8004b02:	69f9      	ldr	r1, [r7, #28]
 8004b04:	4401      	add	r1, r0
 8004b06:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	0148      	lsls	r0, r1, #5
 8004b28:	69f9      	ldr	r1, [r7, #28]
 8004b2a:	4401      	add	r1, r0
 8004b2c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b30:	4313      	orrs	r3, r2
 8004b32:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d10d      	bne.n	8004b56 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	68d9      	ldr	r1, [r3, #12]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b52:	460a      	mov	r2, r1
 8004b54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	791b      	ldrb	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d128      	bne.n	8004bb0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d110      	bne.n	8004b90 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e00f      	b.n	8004bb0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004bce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	1ff80000 	.word	0x1ff80000

08004be0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d14a      	bne.n	8004c94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c16:	f040 8086 	bne.w	8004d26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d902      	bls.n	8004c78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
          break;
 8004c76:	e056      	b.n	8004d26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c90:	d0e7      	beq.n	8004c62 <USB_EPStopXfer+0x82>
 8004c92:	e048      	b.n	8004d26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cac:	d13b      	bne.n	8004d26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ccc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d902      	bls.n	8004d0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	75fb      	strb	r3, [r7, #23]
          break;
 8004d0a:	e00c      	b.n	8004d26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d24:	d0e7      	beq.n	8004cf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b089      	sub	sp, #36	@ 0x24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	460b      	mov	r3, r1
 8004d44:	71fb      	strb	r3, [r7, #7]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d123      	bne.n	8004da2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d5a:	88bb      	ldrh	r3, [r7, #4]
 8004d5c:	3303      	adds	r3, #3
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e018      	b.n	8004d9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	031a      	lsls	r2, r3, #12
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d74:	461a      	mov	r2, r3
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3301      	adds	r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d3e2      	bcc.n	8004d68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3724      	adds	r7, #36	@ 0x24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b08b      	sub	sp, #44	@ 0x2c
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	089b      	lsrs	r3, r3, #2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	623b      	str	r3, [r7, #32]
 8004dda:	e014      	b.n	8004e06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	3301      	adds	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	3301      	adds	r3, #1
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	3301      	adds	r3, #1
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	3301      	adds	r3, #1
 8004e04:	623b      	str	r3, [r7, #32]
 8004e06:	6a3a      	ldr	r2, [r7, #32]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d3e6      	bcc.n	8004ddc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e0e:	8bfb      	ldrh	r3, [r7, #30]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01e      	beq.n	8004e52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f107 0310 	add.w	r3, r7, #16
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	701a      	strb	r2, [r3, #0]
      i++;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	3301      	adds	r3, #1
 8004e44:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004e46:	8bfb      	ldrh	r3, [r7, #30]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e4c:	8bfb      	ldrh	r3, [r7, #30]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1ea      	bne.n	8004e28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	372c      	adds	r7, #44	@ 0x2c
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d12c      	bne.n	8004ed6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	db12      	blt.n	8004eb4 <USB_EPSetStall+0x54>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00f      	beq.n	8004eb4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004eb2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ece:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	e02b      	b.n	8004f2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	db12      	blt.n	8004f0e <USB_EPSetStall+0xae>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00f      	beq.n	8004f0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d128      	bne.n	8004faa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	791b      	ldrb	r3, [r3, #4]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d003      	beq.n	8004f88 <USB_EPClearStall+0x4c>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	791b      	ldrb	r3, [r3, #4]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d138      	bne.n	8004ffa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e027      	b.n	8004ffa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	791b      	ldrb	r3, [r3, #4]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d003      	beq.n	8004fda <USB_EPClearStall+0x9e>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	791b      	ldrb	r3, [r3, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d10f      	bne.n	8004ffa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005026:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800502a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005082:	f023 0302 	bic.w	r3, r3, #2
 8005086:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80050b0:	f023 0303 	bic.w	r3, r3, #3
 80050b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050f0:	68fb      	ldr	r3, [r7, #12]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	4013      	ands	r3, r2
 8005120:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	0c1b      	lsrs	r3, r3, #16
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	b29b      	uxth	r3, r3
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4013      	ands	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005194:	68bb      	ldr	r3, [r7, #8]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	01db      	lsls	r3, r3, #7
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051f0:	68bb      	ldr	r3, [r7, #8]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0301 	and.w	r3, r3, #1
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005234:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005238:	f023 0307 	bic.w	r3, r3, #7
 800523c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800524c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005250:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	460b      	mov	r3, r1
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	333c      	adds	r3, #60	@ 0x3c
 8005276:	3304      	adds	r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4a26      	ldr	r2, [pc, #152]	@ (8005318 <USB_EP0_OutStart+0xb8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d90a      	bls.n	800529a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005294:	d101      	bne.n	800529a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e037      	b.n	800530a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a0:	461a      	mov	r2, r3
 80052a2:	2300      	movs	r3, #0
 80052a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052c8:	f043 0318 	orr.w	r3, r3, #24
 80052cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80052e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052e2:	7afb      	ldrb	r3, [r7, #11]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10f      	bne.n	8005308 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ee:	461a      	mov	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005302:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	4f54300a 	.word	0x4f54300a

0800531c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005334:	d901      	bls.n	800533a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e022      	b.n	8005380 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	daf2      	bge.n	8005328 <USB_CoreReset+0xc>

  count = 10U;
 8005342:	230a      	movs	r3, #10
 8005344:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005346:	e002      	b.n	800534e <USB_CoreReset+0x32>
  {
    count--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3b01      	subs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f9      	bne.n	8005348 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f043 0201 	orr.w	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800536c:	d901      	bls.n	8005372 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e006      	b.n	8005380 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d0f0      	beq.n	8005360 <USB_CoreReset+0x44>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005398:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800539c:	f002 fcba 	bl	8007d14 <USBD_static_malloc>
 80053a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	32b0      	adds	r2, #176	@ 0xb0
 80053b2:	2100      	movs	r1, #0
 80053b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80053b8:	2302      	movs	r3, #2
 80053ba:	e0d4      	b.n	8005566 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80053bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80053c0:	2100      	movs	r1, #0
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f002 fcea 	bl	8007d9c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	32b0      	adds	r2, #176	@ 0xb0
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	32b0      	adds	r2, #176	@ 0xb0
 80053e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7c1b      	ldrb	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d138      	bne.n	8005466 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005570 <USBD_CDC_Init+0x1e4>)
 80053f6:	7819      	ldrb	r1, [r3, #0]
 80053f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053fc:	2202      	movs	r2, #2
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f002 fb65 	bl	8007ace <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005404:	4b5a      	ldr	r3, [pc, #360]	@ (8005570 <USBD_CDC_Init+0x1e4>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f003 020f 	and.w	r2, r3, #15
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	3323      	adds	r3, #35	@ 0x23
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800541e:	4b55      	ldr	r3, [pc, #340]	@ (8005574 <USBD_CDC_Init+0x1e8>)
 8005420:	7819      	ldrb	r1, [r3, #0]
 8005422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005426:	2202      	movs	r2, #2
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f002 fb50 	bl	8007ace <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800542e:	4b51      	ldr	r3, [pc, #324]	@ (8005574 <USBD_CDC_Init+0x1e8>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f003 020f 	and.w	r2, r3, #15
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800544a:	4b4b      	ldr	r3, [pc, #300]	@ (8005578 <USBD_CDC_Init+0x1ec>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f003 020f 	and.w	r2, r3, #15
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	331c      	adds	r3, #28
 8005460:	2210      	movs	r2, #16
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e035      	b.n	80054d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005466:	4b42      	ldr	r3, [pc, #264]	@ (8005570 <USBD_CDC_Init+0x1e4>)
 8005468:	7819      	ldrb	r1, [r3, #0]
 800546a:	2340      	movs	r3, #64	@ 0x40
 800546c:	2202      	movs	r2, #2
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f002 fb2d 	bl	8007ace <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005474:	4b3e      	ldr	r3, [pc, #248]	@ (8005570 <USBD_CDC_Init+0x1e4>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 020f 	and.w	r2, r3, #15
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	3323      	adds	r3, #35	@ 0x23
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800548e:	4b39      	ldr	r3, [pc, #228]	@ (8005574 <USBD_CDC_Init+0x1e8>)
 8005490:	7819      	ldrb	r1, [r3, #0]
 8005492:	2340      	movs	r3, #64	@ 0x40
 8005494:	2202      	movs	r2, #2
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f002 fb19 	bl	8007ace <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800549c:	4b35      	ldr	r3, [pc, #212]	@ (8005574 <USBD_CDC_Init+0x1e8>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80054b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005578 <USBD_CDC_Init+0x1ec>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f003 020f 	and.w	r2, r3, #15
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	331c      	adds	r3, #28
 80054ce:	2210      	movs	r2, #16
 80054d0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054d2:	4b29      	ldr	r3, [pc, #164]	@ (8005578 <USBD_CDC_Init+0x1ec>)
 80054d4:	7819      	ldrb	r1, [r3, #0]
 80054d6:	2308      	movs	r3, #8
 80054d8:	2203      	movs	r2, #3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f002 faf7 	bl	8007ace <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80054e0:	4b25      	ldr	r3, [pc, #148]	@ (8005578 <USBD_CDC_Init+0x1ec>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3323      	adds	r3, #35	@ 0x23
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	33b0      	adds	r3, #176	@ 0xb0
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005530:	2302      	movs	r3, #2
 8005532:	e018      	b.n	8005566 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	7c1b      	ldrb	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800553c:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <USBD_CDC_Init+0x1e8>)
 800553e:	7819      	ldrb	r1, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005546:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f002 fbae 	bl	8007cac <USBD_LL_PrepareReceive>
 8005550:	e008      	b.n	8005564 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005552:	4b08      	ldr	r3, [pc, #32]	@ (8005574 <USBD_CDC_Init+0x1e8>)
 8005554:	7819      	ldrb	r1, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800555c:	2340      	movs	r3, #64	@ 0x40
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f002 fba4 	bl	8007cac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000093 	.word	0x20000093
 8005574:	20000094 	.word	0x20000094
 8005578:	20000095 	.word	0x20000095

0800557c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005588:	4b3a      	ldr	r3, [pc, #232]	@ (8005674 <USBD_CDC_DeInit+0xf8>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f002 fac3 	bl	8007b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005594:	4b37      	ldr	r3, [pc, #220]	@ (8005674 <USBD_CDC_DeInit+0xf8>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 020f 	and.w	r2, r3, #15
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	3323      	adds	r3, #35	@ 0x23
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80055ae:	4b32      	ldr	r3, [pc, #200]	@ (8005678 <USBD_CDC_DeInit+0xfc>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f002 fab0 	bl	8007b1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80055ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005678 <USBD_CDC_DeInit+0xfc>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80055d6:	4b29      	ldr	r3, [pc, #164]	@ (800567c <USBD_CDC_DeInit+0x100>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f002 fa9c 	bl	8007b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80055e2:	4b26      	ldr	r3, [pc, #152]	@ (800567c <USBD_CDC_DeInit+0x100>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3323      	adds	r3, #35	@ 0x23
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80055fc:	4b1f      	ldr	r3, [pc, #124]	@ (800567c <USBD_CDC_DeInit+0x100>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	331c      	adds	r3, #28
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	32b0      	adds	r2, #176	@ 0xb0
 8005620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01f      	beq.n	8005668 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	33b0      	adds	r3, #176	@ 0xb0
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	32b0      	adds	r2, #176	@ 0xb0
 8005646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564a:	4618      	mov	r0, r3
 800564c:	f002 fb70 	bl	8007d30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	32b0      	adds	r2, #176	@ 0xb0
 800565a:	2100      	movs	r1, #0
 800565c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000093 	.word	0x20000093
 8005678:	20000094 	.word	0x20000094
 800567c:	20000095 	.word	0x20000095

08005680 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	32b0      	adds	r2, #176	@ 0xb0
 8005694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005698:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e0bf      	b.n	8005830 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d050      	beq.n	800575e <USBD_CDC_Setup+0xde>
 80056bc:	2b20      	cmp	r3, #32
 80056be:	f040 80af 	bne.w	8005820 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	88db      	ldrh	r3, [r3, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d03a      	beq.n	8005740 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	b25b      	sxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da1b      	bge.n	800570c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	33b0      	adds	r3, #176	@ 0xb0
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80056ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	88d2      	ldrh	r2, [r2, #6]
 80056f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	88db      	ldrh	r3, [r3, #6]
 80056f6:	2b07      	cmp	r3, #7
 80056f8:	bf28      	it	cs
 80056fa:	2307      	movcs	r3, #7
 80056fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	89fa      	ldrh	r2, [r7, #14]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fd69 	bl	80071dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800570a:	e090      	b.n	800582e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	785a      	ldrb	r2, [r3, #1]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	88db      	ldrh	r3, [r3, #6]
 800571a:	2b3f      	cmp	r3, #63	@ 0x3f
 800571c:	d803      	bhi.n	8005726 <USBD_CDC_Setup+0xa6>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	88db      	ldrh	r3, [r3, #6]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	e000      	b.n	8005728 <USBD_CDC_Setup+0xa8>
 8005726:	2240      	movs	r2, #64	@ 0x40
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005736:	461a      	mov	r2, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 fd7e 	bl	800723a <USBD_CtlPrepareRx>
      break;
 800573e:	e076      	b.n	800582e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	33b0      	adds	r3, #176	@ 0xb0
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	7850      	ldrb	r0, [r2, #1]
 8005756:	2200      	movs	r2, #0
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	4798      	blx	r3
      break;
 800575c:	e067      	b.n	800582e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b0b      	cmp	r3, #11
 8005764:	d851      	bhi.n	800580a <USBD_CDC_Setup+0x18a>
 8005766:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <USBD_CDC_Setup+0xec>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	0800579d 	.word	0x0800579d
 8005770:	08005819 	.word	0x08005819
 8005774:	0800580b 	.word	0x0800580b
 8005778:	0800580b 	.word	0x0800580b
 800577c:	0800580b 	.word	0x0800580b
 8005780:	0800580b 	.word	0x0800580b
 8005784:	0800580b 	.word	0x0800580b
 8005788:	0800580b 	.word	0x0800580b
 800578c:	0800580b 	.word	0x0800580b
 8005790:	0800580b 	.word	0x0800580b
 8005794:	080057c7 	.word	0x080057c7
 8005798:	080057f1 	.word	0x080057f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d107      	bne.n	80057b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057a8:	f107 030a 	add.w	r3, r7, #10
 80057ac:	2202      	movs	r2, #2
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fd13 	bl	80071dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057b6:	e032      	b.n	800581e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fc91 	bl	80070e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80057c0:	2303      	movs	r3, #3
 80057c2:	75fb      	strb	r3, [r7, #23]
          break;
 80057c4:	e02b      	b.n	800581e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d107      	bne.n	80057e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057d2:	f107 030d 	add.w	r3, r7, #13
 80057d6:	2201      	movs	r2, #1
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f001 fcfe 	bl	80071dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057e0:	e01d      	b.n	800581e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fc7c 	bl	80070e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80057ea:	2303      	movs	r3, #3
 80057ec:	75fb      	strb	r3, [r7, #23]
          break;
 80057ee:	e016      	b.n	800581e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d00f      	beq.n	800581c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fc6f 	bl	80070e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005804:	2303      	movs	r3, #3
 8005806:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005808:	e008      	b.n	800581c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fc68 	bl	80070e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005812:	2303      	movs	r3, #3
 8005814:	75fb      	strb	r3, [r7, #23]
          break;
 8005816:	e002      	b.n	800581e <USBD_CDC_Setup+0x19e>
          break;
 8005818:	bf00      	nop
 800581a:	e008      	b.n	800582e <USBD_CDC_Setup+0x1ae>
          break;
 800581c:	bf00      	nop
      }
      break;
 800581e:	e006      	b.n	800582e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fc5d 	bl	80070e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005828:	2303      	movs	r3, #3
 800582a:	75fb      	strb	r3, [r7, #23]
      break;
 800582c:	bf00      	nop
  }

  return (uint8_t)ret;
 800582e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800584a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	32b0      	adds	r2, #176	@ 0xb0
 8005856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800585e:	2303      	movs	r3, #3
 8005860:	e065      	b.n	800592e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	32b0      	adds	r2, #176	@ 0xb0
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	f003 020f 	and.w	r2, r3, #15
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3314      	adds	r3, #20
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d02f      	beq.n	80058ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 020f 	and.w	r2, r3, #15
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	3314      	adds	r3, #20
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 010f 	and.w	r1, r3, #15
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	460b      	mov	r3, r1
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	440b      	add	r3, r1
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4403      	add	r3, r0
 80058b4:	331c      	adds	r3, #28
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d112      	bne.n	80058ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	f003 020f 	and.w	r2, r3, #15
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	3314      	adds	r3, #20
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80058de:	78f9      	ldrb	r1, [r7, #3]
 80058e0:	2300      	movs	r3, #0
 80058e2:	2200      	movs	r2, #0
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f002 f9c0 	bl	8007c6a <USBD_LL_Transmit>
 80058ea:	e01f      	b.n	800592c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	33b0      	adds	r3, #176	@ 0xb0
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d010      	beq.n	800592c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	33b0      	adds	r3, #176	@ 0xb0
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	32b0      	adds	r2, #176	@ 0xb0
 800594c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005950:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	32b0      	adds	r2, #176	@ 0xb0
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005964:	2303      	movs	r3, #3
 8005966:	e01a      	b.n	800599e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f002 f9be 	bl	8007cee <USBD_LL_GetRxDataSize>
 8005972:	4602      	mov	r2, r0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	33b0      	adds	r3, #176	@ 0xb0
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005998:	4611      	mov	r1, r2
 800599a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	32b0      	adds	r2, #176	@ 0xb0
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e024      	b.n	8005a12 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	33b0      	adds	r3, #176	@ 0xb0
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d019      	beq.n	8005a10 <USBD_CDC_EP0_RxReady+0x6a>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80059e2:	2bff      	cmp	r3, #255	@ 0xff
 80059e4:	d014      	beq.n	8005a10 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	33b0      	adds	r3, #176	@ 0xb0
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80059fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	22ff      	movs	r2, #255	@ 0xff
 8005a0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a24:	2182      	movs	r1, #130	@ 0x82
 8005a26:	4818      	ldr	r0, [pc, #96]	@ (8005a88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a28:	f000 fd22 	bl	8006470 <USBD_GetEpDesc>
 8005a2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a2e:	2101      	movs	r1, #1
 8005a30:	4815      	ldr	r0, [pc, #84]	@ (8005a88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a32:	f000 fd1d 	bl	8006470 <USBD_GetEpDesc>
 8005a36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a38:	2181      	movs	r1, #129	@ 0x81
 8005a3a:	4813      	ldr	r0, [pc, #76]	@ (8005a88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a3c:	f000 fd18 	bl	8006470 <USBD_GetEpDesc>
 8005a40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2210      	movs	r2, #16
 8005a4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a5c:	711a      	strb	r2, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d006      	beq.n	8005a76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a70:	711a      	strb	r2, [r3, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2243      	movs	r2, #67	@ 0x43
 8005a7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a7c:	4b02      	ldr	r3, [pc, #8]	@ (8005a88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000050 	.word	0x20000050

08005a8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a94:	2182      	movs	r1, #130	@ 0x82
 8005a96:	4818      	ldr	r0, [pc, #96]	@ (8005af8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a98:	f000 fcea 	bl	8006470 <USBD_GetEpDesc>
 8005a9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	4815      	ldr	r0, [pc, #84]	@ (8005af8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005aa2:	f000 fce5 	bl	8006470 <USBD_GetEpDesc>
 8005aa6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005aa8:	2181      	movs	r1, #129	@ 0x81
 8005aaa:	4813      	ldr	r0, [pc, #76]	@ (8005af8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005aac:	f000 fce0 	bl	8006470 <USBD_GetEpDesc>
 8005ab0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2210      	movs	r2, #16
 8005abc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d006      	beq.n	8005ad2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	711a      	strb	r2, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f042 0202 	orr.w	r2, r2, #2
 8005ad0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d006      	beq.n	8005ae6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	711a      	strb	r2, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f042 0202 	orr.w	r2, r2, #2
 8005ae4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2243      	movs	r2, #67	@ 0x43
 8005aea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005aec:	4b02      	ldr	r3, [pc, #8]	@ (8005af8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000050 	.word	0x20000050

08005afc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b04:	2182      	movs	r1, #130	@ 0x82
 8005b06:	4818      	ldr	r0, [pc, #96]	@ (8005b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b08:	f000 fcb2 	bl	8006470 <USBD_GetEpDesc>
 8005b0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b0e:	2101      	movs	r1, #1
 8005b10:	4815      	ldr	r0, [pc, #84]	@ (8005b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b12:	f000 fcad 	bl	8006470 <USBD_GetEpDesc>
 8005b16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b18:	2181      	movs	r1, #129	@ 0x81
 8005b1a:	4813      	ldr	r0, [pc, #76]	@ (8005b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b1c:	f000 fca8 	bl	8006470 <USBD_GetEpDesc>
 8005b20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2210      	movs	r2, #16
 8005b2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d006      	beq.n	8005b42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b3c:	711a      	strb	r2, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b50:	711a      	strb	r2, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2243      	movs	r2, #67	@ 0x43
 8005b5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b5c:	4b02      	ldr	r3, [pc, #8]	@ (8005b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000050 	.word	0x20000050

08005b6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	220a      	movs	r2, #10
 8005b78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b7a:	4b03      	ldr	r3, [pc, #12]	@ (8005b88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	2000000c 	.word	0x2000000c

08005b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e009      	b.n	8005bb4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	33b0      	adds	r3, #176	@ 0xb0
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	32b0      	adds	r2, #176	@ 0xb0
 8005bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bda:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e008      	b.n	8005bf8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	32b0      	adds	r2, #176	@ 0xb0
 8005c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e004      	b.n	8005c32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	32b0      	adds	r2, #176	@ 0xb0
 8005c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	32b0      	adds	r2, #176	@ 0xb0
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e018      	b.n	8005ca0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7c1b      	ldrb	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca8 <USBD_CDC_ReceivePacket+0x68>)
 8005c78:	7819      	ldrb	r1, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f002 f811 	bl	8007cac <USBD_LL_PrepareReceive>
 8005c8a:	e008      	b.n	8005c9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <USBD_CDC_ReceivePacket+0x68>)
 8005c8e:	7819      	ldrb	r1, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c96:	2340      	movs	r3, #64	@ 0x40
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f002 f807 	bl	8007cac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000094 	.word	0x20000094

08005cac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e01f      	b.n	8005d04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	79fa      	ldrb	r2, [r7, #7]
 8005cf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f001 fe81 	bl	8007a00 <USBD_LL_Init>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e025      	b.n	8005d70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	32ae      	adds	r2, #174	@ 0xae
 8005d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00f      	beq.n	8005d60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	32ae      	adds	r2, #174	@ 0xae
 8005d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	f107 020e 	add.w	r2, r7, #14
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	4602      	mov	r2, r0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 fe89 	bl	8007a98 <USBD_LL_Start>
 8005d86:	4603      	mov	r3, r0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	460b      	mov	r3, r1
 8005db0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e04:	2303      	movs	r3, #3
 8005e06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 f922 	bl	800706e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d01a      	beq.n	8005e84 <USBD_LL_SetupStage+0x72>
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d822      	bhi.n	8005e98 <USBD_LL_SetupStage+0x86>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <USBD_LL_SetupStage+0x4a>
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d00a      	beq.n	8005e70 <USBD_LL_SetupStage+0x5e>
 8005e5a:	e01d      	b.n	8005e98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fb77 	bl	8006558 <USBD_StdDevReq>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6e:	e020      	b.n	8005eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fbdf 	bl	800663c <USBD_StdItfReq>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	73fb      	strb	r3, [r7, #15]
      break;
 8005e82:	e016      	b.n	8005eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fc41 	bl	8006714 <USBD_StdEPReq>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
      break;
 8005e96:	e00c      	b.n	8005eb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 fe56 	bl	8007b58 <USBD_LL_StallEP>
 8005eac:	4603      	mov	r3, r0
 8005eae:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb0:	bf00      	nop
  }

  return ret;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d177      	bne.n	8005fc4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005eda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	f040 80a1 	bne.w	800602a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	8992      	ldrh	r2, [r2, #12]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d91c      	bls.n	8005f2e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	8992      	ldrh	r2, [r2, #12]
 8005efc:	1a9a      	subs	r2, r3, r2
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	8992      	ldrh	r2, [r2, #12]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6919      	ldr	r1, [r3, #16]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	899b      	ldrh	r3, [r3, #12]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bf38      	it	cc
 8005f22:	4613      	movcc	r3, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f001 f9a8 	bl	800727c <USBD_CtlContinueRx>
 8005f2c:	e07d      	b.n	800602a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d014      	beq.n	8005f66 <USBD_LL_DataOutStage+0xaa>
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d81d      	bhi.n	8005f7c <USBD_LL_DataOutStage+0xc0>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <USBD_LL_DataOutStage+0x8e>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d003      	beq.n	8005f50 <USBD_LL_DataOutStage+0x94>
 8005f48:	e018      	b.n	8005f7c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f4e:	e018      	b.n	8005f82 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fa6e 	bl	800643c <USBD_CoreFindIF>
 8005f60:	4603      	mov	r3, r0
 8005f62:	75bb      	strb	r3, [r7, #22]
            break;
 8005f64:	e00d      	b.n	8005f82 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 fa70 	bl	8006456 <USBD_CoreFindEP>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75bb      	strb	r3, [r7, #22]
            break;
 8005f7a:	e002      	b.n	8005f82 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75bb      	strb	r3, [r7, #22]
            break;
 8005f80:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f82:	7dbb      	ldrb	r3, [r7, #22]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d119      	bne.n	8005fbc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d113      	bne.n	8005fbc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f94:	7dba      	ldrb	r2, [r7, #22]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	32ae      	adds	r2, #174	@ 0xae
 8005f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005fa4:	7dba      	ldrb	r2, [r7, #22]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005fac:	7dba      	ldrb	r2, [r7, #22]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	32ae      	adds	r2, #174	@ 0xae
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f001 f96e 	bl	800729e <USBD_CtlSendStatus>
 8005fc2:	e032      	b.n	800602a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fa41 	bl	8006456 <USBD_CoreFindEP>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fd8:	7dbb      	ldrb	r3, [r7, #22]
 8005fda:	2bff      	cmp	r3, #255	@ 0xff
 8005fdc:	d025      	beq.n	800602a <USBD_LL_DataOutStage+0x16e>
 8005fde:	7dbb      	ldrb	r3, [r7, #22]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d122      	bne.n	800602a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d117      	bne.n	8006020 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ff0:	7dba      	ldrb	r2, [r7, #22]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	32ae      	adds	r2, #174	@ 0xae
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00f      	beq.n	8006020 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006000:	7dba      	ldrb	r2, [r7, #22]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006008:	7dba      	ldrb	r2, [r7, #22]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	32ae      	adds	r2, #174	@ 0xae
 800600e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	7afa      	ldrb	r2, [r7, #11]
 8006016:	4611      	mov	r1, r2
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	4798      	blx	r3
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006026:	7dfb      	ldrb	r3, [r7, #23]
 8006028:	e000      	b.n	800602c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	460b      	mov	r3, r1
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006042:	7afb      	ldrb	r3, [r7, #11]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d178      	bne.n	800613a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3314      	adds	r3, #20
 800604c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006054:	2b02      	cmp	r3, #2
 8006056:	d163      	bne.n	8006120 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	8992      	ldrh	r2, [r2, #12]
 8006060:	4293      	cmp	r3, r2
 8006062:	d91c      	bls.n	800609e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	8992      	ldrh	r2, [r2, #12]
 800606c:	1a9a      	subs	r2, r3, r2
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	8992      	ldrh	r2, [r2, #12]
 800607a:	441a      	add	r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6919      	ldr	r1, [r3, #16]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	461a      	mov	r2, r3
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f001 f8c4 	bl	8007218 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006090:	2300      	movs	r3, #0
 8006092:	2200      	movs	r2, #0
 8006094:	2100      	movs	r1, #0
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f001 fe08 	bl	8007cac <USBD_LL_PrepareReceive>
 800609c:	e040      	b.n	8006120 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	899b      	ldrh	r3, [r3, #12]
 80060a2:	461a      	mov	r2, r3
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d11c      	bne.n	80060e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d316      	bcc.n	80060e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d20f      	bcs.n	80060e6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060c6:	2200      	movs	r2, #0
 80060c8:	2100      	movs	r1, #0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 f8a4 	bl	8007218 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060d8:	2300      	movs	r3, #0
 80060da:	2200      	movs	r2, #0
 80060dc:	2100      	movs	r1, #0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f001 fde4 	bl	8007cac <USBD_LL_PrepareReceive>
 80060e4:	e01c      	b.n	8006120 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d10f      	bne.n	8006112 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006112:	2180      	movs	r1, #128	@ 0x80
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f001 fd1f 	bl	8007b58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f001 f8d2 	bl	80072c4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d03a      	beq.n	80061a0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fe30 	bl	8005d90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006138:	e032      	b.n	80061a0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006140:	b2db      	uxtb	r3, r3
 8006142:	4619      	mov	r1, r3
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f986 	bl	8006456 <USBD_CoreFindEP>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2bff      	cmp	r3, #255	@ 0xff
 8006152:	d025      	beq.n	80061a0 <USBD_LL_DataInStage+0x16c>
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d122      	bne.n	80061a0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b03      	cmp	r3, #3
 8006164:	d11c      	bne.n	80061a0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006166:	7dfa      	ldrb	r2, [r7, #23]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	32ae      	adds	r2, #174	@ 0xae
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d014      	beq.n	80061a0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006176:	7dfa      	ldrb	r2, [r7, #23]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800617e:	7dfa      	ldrb	r2, [r7, #23]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	32ae      	adds	r2, #174	@ 0xae
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	7afa      	ldrb	r2, [r7, #11]
 800618c:	4611      	mov	r1, r2
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006196:	7dbb      	ldrb	r3, [r7, #22]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800619c:	7dbb      	ldrb	r3, [r7, #22]
 800619e:	e000      	b.n	80061a2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d014      	beq.n	8006210 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6852      	ldr	r2, [r2, #4]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	4611      	mov	r1, r2
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006210:	2340      	movs	r3, #64	@ 0x40
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fc59 	bl	8007ace <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2240      	movs	r2, #64	@ 0x40
 8006228:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800622c:	2340      	movs	r3, #64	@ 0x40
 800622e:	2200      	movs	r2, #0
 8006230:	2180      	movs	r1, #128	@ 0x80
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fc4b 	bl	8007ace <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2240      	movs	r2, #64	@ 0x40
 8006244:	841a      	strh	r2, [r3, #32]

  return ret;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	78fa      	ldrb	r2, [r7, #3]
 8006260:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b04      	cmp	r3, #4
 8006282:	d006      	beq.n	8006292 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800628a:	b2da      	uxtb	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d106      	bne.n	80062ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d110      	bne.n	800630e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32ae      	adds	r2, #174	@ 0xae
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006336:	2303      	movs	r3, #3
 8006338:	e01c      	b.n	8006374 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d115      	bne.n	8006372 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	32ae      	adds	r2, #174	@ 0xae
 8006350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	32ae      	adds	r2, #174	@ 0xae
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	4611      	mov	r1, r2
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	32ae      	adds	r2, #174	@ 0xae
 8006392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800639a:	2303      	movs	r3, #3
 800639c:	e01c      	b.n	80063d8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d115      	bne.n	80063d6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	32ae      	adds	r2, #174	@ 0xae
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32ae      	adds	r2, #174	@ 0xae
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	4611      	mov	r1, r2
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00e      	beq.n	8006432 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6852      	ldr	r2, [r2, #4]
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	4611      	mov	r1, r2
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800642e:	2303      	movs	r3, #3
 8006430:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006448:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006462:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	b29b      	uxth	r3, r3
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	4293      	cmp	r3, r2
 8006494:	d91f      	bls.n	80064d6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800649c:	e013      	b.n	80064c6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800649e:	f107 030a 	add.w	r3, r7, #10
 80064a2:	4619      	mov	r1, r3
 80064a4:	6978      	ldr	r0, [r7, #20]
 80064a6:	f000 f81b 	bl	80064e0 <USBD_GetNextDesc>
 80064aa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	d108      	bne.n	80064c6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	789b      	ldrb	r3, [r3, #2]
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d008      	beq.n	80064d4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	885b      	ldrh	r3, [r3, #2]
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	897b      	ldrh	r3, [r7, #10]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d8e5      	bhi.n	800649e <USBD_GetEpDesc+0x2e>
 80064d2:	e000      	b.n	80064d6 <USBD_GetEpDesc+0x66>
          break;
 80064d4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80064d6:	693b      	ldr	r3, [r7, #16]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	4413      	add	r3, r2
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	3301      	adds	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006536:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	b21a      	sxth	r2, r3
 800653e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006542:	4313      	orrs	r3, r2
 8006544:	b21b      	sxth	r3, r3
 8006546:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006548:	89fb      	ldrh	r3, [r7, #14]
}
 800654a:	4618      	mov	r0, r3
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800656e:	2b40      	cmp	r3, #64	@ 0x40
 8006570:	d005      	beq.n	800657e <USBD_StdDevReq+0x26>
 8006572:	2b40      	cmp	r3, #64	@ 0x40
 8006574:	d857      	bhi.n	8006626 <USBD_StdDevReq+0xce>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <USBD_StdDevReq+0x42>
 800657a:	2b20      	cmp	r3, #32
 800657c:	d153      	bne.n	8006626 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	32ae      	adds	r2, #174	@ 0xae
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
      break;
 8006598:	e04a      	b.n	8006630 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b09      	cmp	r3, #9
 80065a0:	d83b      	bhi.n	800661a <USBD_StdDevReq+0xc2>
 80065a2:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <USBD_StdDevReq+0x50>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065fd 	.word	0x080065fd
 80065ac:	08006611 	.word	0x08006611
 80065b0:	0800661b 	.word	0x0800661b
 80065b4:	08006607 	.word	0x08006607
 80065b8:	0800661b 	.word	0x0800661b
 80065bc:	080065db 	.word	0x080065db
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	0800661b 	.word	0x0800661b
 80065c8:	080065f3 	.word	0x080065f3
 80065cc:	080065e5 	.word	0x080065e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa3e 	bl	8006a54 <USBD_GetDescriptor>
          break;
 80065d8:	e024      	b.n	8006624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fba3 	bl	8006d28 <USBD_SetAddress>
          break;
 80065e2:	e01f      	b.n	8006624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fbe2 	bl	8006db0 <USBD_SetConfig>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]
          break;
 80065f0:	e018      	b.n	8006624 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fc85 	bl	8006f04 <USBD_GetConfig>
          break;
 80065fa:	e013      	b.n	8006624 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fcb6 	bl	8006f70 <USBD_GetStatus>
          break;
 8006604:	e00e      	b.n	8006624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fce5 	bl	8006fd8 <USBD_SetFeature>
          break;
 800660e:	e009      	b.n	8006624 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fd09 	bl	800702a <USBD_ClrFeature>
          break;
 8006618:	e004      	b.n	8006624 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fd60 	bl	80070e2 <USBD_CtlError>
          break;
 8006622:	bf00      	nop
      }
      break;
 8006624:	e004      	b.n	8006630 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fd5a 	bl	80070e2 <USBD_CtlError>
      break;
 800662e:	bf00      	nop
  }

  return ret;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop

0800663c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006652:	2b40      	cmp	r3, #64	@ 0x40
 8006654:	d005      	beq.n	8006662 <USBD_StdItfReq+0x26>
 8006656:	2b40      	cmp	r3, #64	@ 0x40
 8006658:	d852      	bhi.n	8006700 <USBD_StdItfReq+0xc4>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <USBD_StdItfReq+0x26>
 800665e:	2b20      	cmp	r3, #32
 8006660:	d14e      	bne.n	8006700 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006668:	b2db      	uxtb	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	2b02      	cmp	r3, #2
 800666e:	d840      	bhi.n	80066f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	889b      	ldrh	r3, [r3, #4]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b01      	cmp	r3, #1
 8006678:	d836      	bhi.n	80066e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	889b      	ldrh	r3, [r3, #4]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff feda 	bl	800643c <USBD_CoreFindIF>
 8006688:	4603      	mov	r3, r0
 800668a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	2bff      	cmp	r3, #255	@ 0xff
 8006690:	d01d      	beq.n	80066ce <USBD_StdItfReq+0x92>
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11a      	bne.n	80066ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006698:	7bba      	ldrb	r2, [r7, #14]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	32ae      	adds	r2, #174	@ 0xae
 800669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00f      	beq.n	80066c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066a8:	7bba      	ldrb	r2, [r7, #14]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066b0:	7bba      	ldrb	r2, [r7, #14]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32ae      	adds	r2, #174	@ 0xae
 80066b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066c6:	e004      	b.n	80066d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066cc:	e001      	b.n	80066d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80066ce:	2303      	movs	r3, #3
 80066d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	88db      	ldrh	r3, [r3, #6]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d110      	bne.n	80066fc <USBD_StdItfReq+0xc0>
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10d      	bne.n	80066fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fddc 	bl	800729e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066e6:	e009      	b.n	80066fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fcf9 	bl	80070e2 <USBD_CtlError>
          break;
 80066f0:	e004      	b.n	80066fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fcf4 	bl	80070e2 <USBD_CtlError>
          break;
 80066fa:	e000      	b.n	80066fe <USBD_StdItfReq+0xc2>
          break;
 80066fc:	bf00      	nop
      }
      break;
 80066fe:	e004      	b.n	800670a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fced 	bl	80070e2 <USBD_CtlError>
      break;
 8006708:	bf00      	nop
  }

  return ret;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	889b      	ldrh	r3, [r3, #4]
 8006726:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006730:	2b40      	cmp	r3, #64	@ 0x40
 8006732:	d007      	beq.n	8006744 <USBD_StdEPReq+0x30>
 8006734:	2b40      	cmp	r3, #64	@ 0x40
 8006736:	f200 8181 	bhi.w	8006a3c <USBD_StdEPReq+0x328>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02a      	beq.n	8006794 <USBD_StdEPReq+0x80>
 800673e:	2b20      	cmp	r3, #32
 8006740:	f040 817c 	bne.w	8006a3c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff fe84 	bl	8006456 <USBD_CoreFindEP>
 800674e:	4603      	mov	r3, r0
 8006750:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006752:	7b7b      	ldrb	r3, [r7, #13]
 8006754:	2bff      	cmp	r3, #255	@ 0xff
 8006756:	f000 8176 	beq.w	8006a46 <USBD_StdEPReq+0x332>
 800675a:	7b7b      	ldrb	r3, [r7, #13]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 8172 	bne.w	8006a46 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006762:	7b7a      	ldrb	r2, [r7, #13]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800676a:	7b7a      	ldrb	r2, [r7, #13]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	32ae      	adds	r2, #174	@ 0xae
 8006770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8165 	beq.w	8006a46 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800677c:	7b7a      	ldrb	r2, [r7, #13]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	32ae      	adds	r2, #174	@ 0xae
 8006782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
 800678e:	4603      	mov	r3, r0
 8006790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006792:	e158      	b.n	8006a46 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b03      	cmp	r3, #3
 800679a:	d008      	beq.n	80067ae <USBD_StdEPReq+0x9a>
 800679c:	2b03      	cmp	r3, #3
 800679e:	f300 8147 	bgt.w	8006a30 <USBD_StdEPReq+0x31c>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 809b 	beq.w	80068de <USBD_StdEPReq+0x1ca>
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d03c      	beq.n	8006826 <USBD_StdEPReq+0x112>
 80067ac:	e140      	b.n	8006a30 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d002      	beq.n	80067c0 <USBD_StdEPReq+0xac>
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d016      	beq.n	80067ec <USBD_StdEPReq+0xd8>
 80067be:	e02c      	b.n	800681a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00d      	beq.n	80067e2 <USBD_StdEPReq+0xce>
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	2b80      	cmp	r3, #128	@ 0x80
 80067ca:	d00a      	beq.n	80067e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 f9c1 	bl	8007b58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067d6:	2180      	movs	r1, #128	@ 0x80
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 f9bd 	bl	8007b58 <USBD_LL_StallEP>
 80067de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067e0:	e020      	b.n	8006824 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fc7c 	bl	80070e2 <USBD_CtlError>
              break;
 80067ea:	e01b      	b.n	8006824 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	885b      	ldrh	r3, [r3, #2]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10e      	bne.n	8006812 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <USBD_StdEPReq+0xfe>
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	2b80      	cmp	r3, #128	@ 0x80
 80067fe:	d008      	beq.n	8006812 <USBD_StdEPReq+0xfe>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	88db      	ldrh	r3, [r3, #6]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 f9a3 	bl	8007b58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fd43 	bl	800729e <USBD_CtlSendStatus>

              break;
 8006818:	e004      	b.n	8006824 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fc60 	bl	80070e2 <USBD_CtlError>
              break;
 8006822:	bf00      	nop
          }
          break;
 8006824:	e109      	b.n	8006a3a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d002      	beq.n	8006838 <USBD_StdEPReq+0x124>
 8006832:	2b03      	cmp	r3, #3
 8006834:	d016      	beq.n	8006864 <USBD_StdEPReq+0x150>
 8006836:	e04b      	b.n	80068d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <USBD_StdEPReq+0x146>
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	2b80      	cmp	r3, #128	@ 0x80
 8006842:	d00a      	beq.n	800685a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 f985 	bl	8007b58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800684e:	2180      	movs	r1, #128	@ 0x80
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f981 	bl	8007b58 <USBD_LL_StallEP>
 8006856:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006858:	e040      	b.n	80068dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fc40 	bl	80070e2 <USBD_CtlError>
              break;
 8006862:	e03b      	b.n	80068dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	885b      	ldrh	r3, [r3, #2]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d136      	bne.n	80068da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 f98b 	bl	8007b96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fd0c 	bl	800729e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff fde3 	bl	8006456 <USBD_CoreFindEP>
 8006890:	4603      	mov	r3, r0
 8006892:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006894:	7b7b      	ldrb	r3, [r7, #13]
 8006896:	2bff      	cmp	r3, #255	@ 0xff
 8006898:	d01f      	beq.n	80068da <USBD_StdEPReq+0x1c6>
 800689a:	7b7b      	ldrb	r3, [r7, #13]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d11c      	bne.n	80068da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80068a0:	7b7a      	ldrb	r2, [r7, #13]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068a8:	7b7a      	ldrb	r2, [r7, #13]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32ae      	adds	r2, #174	@ 0xae
 80068ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068b8:	7b7a      	ldrb	r2, [r7, #13]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	32ae      	adds	r2, #174	@ 0xae
 80068be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80068ce:	e004      	b.n	80068da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fc05 	bl	80070e2 <USBD_CtlError>
              break;
 80068d8:	e000      	b.n	80068dc <USBD_StdEPReq+0x1c8>
              break;
 80068da:	bf00      	nop
          }
          break;
 80068dc:	e0ad      	b.n	8006a3a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d002      	beq.n	80068f0 <USBD_StdEPReq+0x1dc>
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d033      	beq.n	8006956 <USBD_StdEPReq+0x242>
 80068ee:	e099      	b.n	8006a24 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <USBD_StdEPReq+0x1f2>
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	2b80      	cmp	r3, #128	@ 0x80
 80068fa:	d004      	beq.n	8006906 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fbef 	bl	80070e2 <USBD_CtlError>
                break;
 8006904:	e093      	b.n	8006a2e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800690a:	2b00      	cmp	r3, #0
 800690c:	da0b      	bge.n	8006926 <USBD_StdEPReq+0x212>
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	3310      	adds	r3, #16
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	3304      	adds	r3, #4
 8006924:	e00b      	b.n	800693e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	3304      	adds	r3, #4
 800693e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	330e      	adds	r3, #14
 800694a:	2202      	movs	r2, #2
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fc44 	bl	80071dc <USBD_CtlSendData>
              break;
 8006954:	e06b      	b.n	8006a2e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da11      	bge.n	8006982 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	f003 020f 	and.w	r2, r3, #15
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3323      	adds	r3, #35	@ 0x23
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d117      	bne.n	80069a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fbb1 	bl	80070e2 <USBD_CtlError>
                  break;
 8006980:	e055      	b.n	8006a2e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	f003 020f 	and.w	r2, r3, #15
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fb9e 	bl	80070e2 <USBD_CtlError>
                  break;
 80069a6:	e042      	b.n	8006a2e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da0b      	bge.n	80069c8 <USBD_StdEPReq+0x2b4>
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	3310      	adds	r3, #16
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	3304      	adds	r3, #4
 80069c6:	e00b      	b.n	80069e0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	3304      	adds	r3, #4
 80069e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <USBD_StdEPReq+0x2da>
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b80      	cmp	r3, #128	@ 0x80
 80069ec:	d103      	bne.n	80069f6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	739a      	strb	r2, [r3, #14]
 80069f4:	e00e      	b.n	8006a14 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 f8ea 	bl	8007bd4 <USBD_LL_IsStallEP>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	739a      	strb	r2, [r3, #14]
 8006a0c:	e002      	b.n	8006a14 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	330e      	adds	r3, #14
 8006a18:	2202      	movs	r2, #2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fbdd 	bl	80071dc <USBD_CtlSendData>
              break;
 8006a22:	e004      	b.n	8006a2e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fb5b 	bl	80070e2 <USBD_CtlError>
              break;
 8006a2c:	bf00      	nop
          }
          break;
 8006a2e:	e004      	b.n	8006a3a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb55 	bl	80070e2 <USBD_CtlError>
          break;
 8006a38:	bf00      	nop
      }
      break;
 8006a3a:	e005      	b.n	8006a48 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb4f 	bl	80070e2 <USBD_CtlError>
      break;
 8006a44:	e000      	b.n	8006a48 <USBD_StdEPReq+0x334>
      break;
 8006a46:	bf00      	nop
  }

  return ret;
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	885b      	ldrh	r3, [r3, #2]
 8006a6e:	0a1b      	lsrs	r3, r3, #8
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	2b06      	cmp	r3, #6
 8006a76:	f200 8128 	bhi.w	8006cca <USBD_GetDescriptor+0x276>
 8006a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <USBD_GetDescriptor+0x2c>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006a9d 	.word	0x08006a9d
 8006a84:	08006ab5 	.word	0x08006ab5
 8006a88:	08006af5 	.word	0x08006af5
 8006a8c:	08006ccb 	.word	0x08006ccb
 8006a90:	08006ccb 	.word	0x08006ccb
 8006a94:	08006c6b 	.word	0x08006c6b
 8006a98:	08006c97 	.word	0x08006c97
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	7c12      	ldrb	r2, [r2, #16]
 8006aa8:	f107 0108 	add.w	r1, r7, #8
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
 8006ab0:	60f8      	str	r0, [r7, #12]
      break;
 8006ab2:	e112      	b.n	8006cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	7c1b      	ldrb	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10d      	bne.n	8006ad8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	f107 0208 	add.w	r2, r7, #8
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4798      	blx	r3
 8006acc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ad6:	e100      	b.n	8006cda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	f107 0208 	add.w	r2, r7, #8
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	2202      	movs	r2, #2
 8006af0:	701a      	strb	r2, [r3, #0]
      break;
 8006af2:	e0f2      	b.n	8006cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	885b      	ldrh	r3, [r3, #2]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	f200 80ac 	bhi.w	8006c58 <USBD_GetDescriptor+0x204>
 8006b00:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <USBD_GetDescriptor+0xb4>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b21 	.word	0x08006b21
 8006b0c:	08006b55 	.word	0x08006b55
 8006b10:	08006b89 	.word	0x08006b89
 8006b14:	08006bbd 	.word	0x08006bbd
 8006b18:	08006bf1 	.word	0x08006bf1
 8006b1c:	08006c25 	.word	0x08006c25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	f107 0108 	add.w	r1, r7, #8
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b42:	e091      	b.n	8006c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 facb 	bl	80070e2 <USBD_CtlError>
            err++;
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	72fb      	strb	r3, [r7, #11]
          break;
 8006b52:	e089      	b.n	8006c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	7c12      	ldrb	r2, [r2, #16]
 8006b6c:	f107 0108 	add.w	r1, r7, #8
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b76:	e077      	b.n	8006c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fab1 	bl	80070e2 <USBD_CtlError>
            err++;
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	3301      	adds	r3, #1
 8006b84:	72fb      	strb	r3, [r7, #11]
          break;
 8006b86:	e06f      	b.n	8006c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	7c12      	ldrb	r2, [r2, #16]
 8006ba0:	f107 0108 	add.w	r1, r7, #8
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4798      	blx	r3
 8006ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006baa:	e05d      	b.n	8006c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa97 	bl	80070e2 <USBD_CtlError>
            err++;
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bba:	e055      	b.n	8006c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	7c12      	ldrb	r2, [r2, #16]
 8006bd4:	f107 0108 	add.w	r1, r7, #8
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4798      	blx	r3
 8006bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bde:	e043      	b.n	8006c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa7d 	bl	80070e2 <USBD_CtlError>
            err++;
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	3301      	adds	r3, #1
 8006bec:	72fb      	strb	r3, [r7, #11]
          break;
 8006bee:	e03b      	b.n	8006c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	7c12      	ldrb	r2, [r2, #16]
 8006c08:	f107 0108 	add.w	r1, r7, #8
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
 8006c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c12:	e029      	b.n	8006c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa63 	bl	80070e2 <USBD_CtlError>
            err++;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	72fb      	strb	r3, [r7, #11]
          break;
 8006c22:	e021      	b.n	8006c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7c12      	ldrb	r2, [r2, #16]
 8006c3c:	f107 0108 	add.w	r1, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c46:	e00f      	b.n	8006c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa49 	bl	80070e2 <USBD_CtlError>
            err++;
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	3301      	adds	r3, #1
 8006c54:	72fb      	strb	r3, [r7, #11]
          break;
 8006c56:	e007      	b.n	8006c68 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa41 	bl	80070e2 <USBD_CtlError>
          err++;
 8006c60:	7afb      	ldrb	r3, [r7, #11]
 8006c62:	3301      	adds	r3, #1
 8006c64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c66:	bf00      	nop
      }
      break;
 8006c68:	e037      	b.n	8006cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7c1b      	ldrb	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7a:	f107 0208 	add.w	r2, r7, #8
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4798      	blx	r3
 8006c82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c84:	e029      	b.n	8006cda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fa2a 	bl	80070e2 <USBD_CtlError>
        err++;
 8006c8e:	7afb      	ldrb	r3, [r7, #11]
 8006c90:	3301      	adds	r3, #1
 8006c92:	72fb      	strb	r3, [r7, #11]
      break;
 8006c94:	e021      	b.n	8006cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	7c1b      	ldrb	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	f107 0208 	add.w	r2, r7, #8
 8006caa:	4610      	mov	r0, r2
 8006cac:	4798      	blx	r3
 8006cae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	2207      	movs	r2, #7
 8006cb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cb8:	e00f      	b.n	8006cda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fa10 	bl	80070e2 <USBD_CtlError>
        err++;
 8006cc2:	7afb      	ldrb	r3, [r7, #11]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8006cc8:	e007      	b.n	8006cda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fa08 	bl	80070e2 <USBD_CtlError>
      err++;
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8006cd8:	bf00      	nop
  }

  if (err != 0U)
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d11e      	bne.n	8006d1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	88db      	ldrh	r3, [r3, #6]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d016      	beq.n	8006d16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ce8:	893b      	ldrh	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00e      	beq.n	8006d0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	88da      	ldrh	r2, [r3, #6]
 8006cf2:	893b      	ldrh	r3, [r7, #8]
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	bf28      	it	cs
 8006cf8:	4613      	movcs	r3, r2
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cfe:	893b      	ldrh	r3, [r7, #8]
 8006d00:	461a      	mov	r2, r3
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa69 	bl	80071dc <USBD_CtlSendData>
 8006d0a:	e009      	b.n	8006d20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9e7 	bl	80070e2 <USBD_CtlError>
 8006d14:	e004      	b.n	8006d20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fac1 	bl	800729e <USBD_CtlSendStatus>
 8006d1c:	e000      	b.n	8006d20 <USBD_GetDescriptor+0x2cc>
    return;
 8006d1e:	bf00      	nop
  }
}
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop

08006d28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	889b      	ldrh	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d131      	bne.n	8006d9e <USBD_SetAddress+0x76>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	88db      	ldrh	r3, [r3, #6]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d12d      	bne.n	8006d9e <USBD_SetAddress+0x76>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	885b      	ldrh	r3, [r3, #2]
 8006d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d48:	d829      	bhi.n	8006d9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	885b      	ldrh	r3, [r3, #2]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d104      	bne.n	8006d6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f9bc 	bl	80070e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6a:	e01d      	b.n	8006da8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7bfa      	ldrb	r2, [r7, #15]
 8006d70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 ff57 	bl	8007c2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa8d 	bl	800729e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d92:	e009      	b.n	8006da8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9c:	e004      	b.n	8006da8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f99e 	bl	80070e2 <USBD_CtlError>
  }
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	885b      	ldrh	r3, [r3, #2]
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006dc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d905      	bls.n	8006ddc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f985 	bl	80070e2 <USBD_CtlError>
    return USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e08c      	b.n	8006ef6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d002      	beq.n	8006dee <USBD_SetConfig+0x3e>
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d029      	beq.n	8006e40 <USBD_SetConfig+0x90>
 8006dec:	e075      	b.n	8006eda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006dee:	4b44      	ldr	r3, [pc, #272]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d020      	beq.n	8006e38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006df6:	4b42      	ldr	r3, [pc, #264]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e00:	4b3f      	ldr	r3, [pc, #252]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe ffcd 	bl	8005da6 <USBD_SetClassConfig>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f962 	bl	80070e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e26:	e065      	b.n	8006ef4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa38 	bl	800729e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2203      	movs	r2, #3
 8006e32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006e36:	e05d      	b.n	8006ef4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fa30 	bl	800729e <USBD_CtlSendStatus>
      break;
 8006e3e:	e059      	b.n	8006ef4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e40:	4b2f      	ldr	r3, [pc, #188]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d112      	bne.n	8006e6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006e50:	4b2b      	ldr	r3, [pc, #172]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e5a:	4b29      	ldr	r3, [pc, #164]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7fe ffbc 	bl	8005dde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa19 	bl	800729e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e6c:	e042      	b.n	8006ef4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e6e:	4b24      	ldr	r3, [pc, #144]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d02a      	beq.n	8006ed2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fe ffaa 	bl	8005dde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e94:	4b1a      	ldr	r3, [pc, #104]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fe ff83 	bl	8005da6 <USBD_SetClassConfig>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00f      	beq.n	8006eca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f918 	bl	80070e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe ff8f 	bl	8005dde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006ec8:	e014      	b.n	8006ef4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9e7 	bl	800729e <USBD_CtlSendStatus>
      break;
 8006ed0:	e010      	b.n	8006ef4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f9e3 	bl	800729e <USBD_CtlSendStatus>
      break;
 8006ed8:	e00c      	b.n	8006ef4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f900 	bl	80070e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ee2:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <USBD_SetConfig+0x150>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fe ff78 	bl	8005dde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef2:	bf00      	nop
  }

  return ret;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	2000040c 	.word	0x2000040c

08006f04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	88db      	ldrh	r3, [r3, #6]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d004      	beq.n	8006f20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f8e2 	bl	80070e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f1e:	e023      	b.n	8006f68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	dc02      	bgt.n	8006f32 <USBD_GetConfig+0x2e>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	dc03      	bgt.n	8006f38 <USBD_GetConfig+0x34>
 8006f30:	e015      	b.n	8006f5e <USBD_GetConfig+0x5a>
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d00b      	beq.n	8006f4e <USBD_GetConfig+0x4a>
 8006f36:	e012      	b.n	8006f5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3308      	adds	r3, #8
 8006f42:	2201      	movs	r2, #1
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f948 	bl	80071dc <USBD_CtlSendData>
        break;
 8006f4c:	e00c      	b.n	8006f68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	2201      	movs	r2, #1
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f940 	bl	80071dc <USBD_CtlSendData>
        break;
 8006f5c:	e004      	b.n	8006f68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f8be 	bl	80070e2 <USBD_CtlError>
        break;
 8006f66:	bf00      	nop
}
 8006f68:	bf00      	nop
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d81e      	bhi.n	8006fc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	88db      	ldrh	r3, [r3, #6]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d004      	beq.n	8006f9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8a5 	bl	80070e2 <USBD_CtlError>
        break;
 8006f98:	e01a      	b.n	8006fd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f043 0202 	orr.w	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f90c 	bl	80071dc <USBD_CtlSendData>
      break;
 8006fc4:	e004      	b.n	8006fd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f88a 	bl	80070e2 <USBD_CtlError>
      break;
 8006fce:	bf00      	nop
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d107      	bne.n	8006ffa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f953 	bl	800729e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ff8:	e013      	b.n	8007022 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d10b      	bne.n	800701a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	889b      	ldrh	r3, [r3, #4]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	b29b      	uxth	r3, r3
 800700a:	b2da      	uxtb	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f943 	bl	800729e <USBD_CtlSendStatus>
}
 8007018:	e003      	b.n	8007022 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f860 	bl	80070e2 <USBD_CtlError>
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800703a:	b2db      	uxtb	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	2b02      	cmp	r3, #2
 8007040:	d80b      	bhi.n	800705a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d10c      	bne.n	8007064 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f923 	bl	800729e <USBD_CtlSendStatus>
      }
      break;
 8007058:	e004      	b.n	8007064 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f840 	bl	80070e2 <USBD_CtlError>
      break;
 8007062:	e000      	b.n	8007066 <USBD_ClrFeature+0x3c>
      break;
 8007064:	bf00      	nop
  }
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	781a      	ldrb	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff fa3d 	bl	8006518 <SWAPBYTE>
 800709e:	4603      	mov	r3, r0
 80070a0:	461a      	mov	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff fa30 	bl	8006518 <SWAPBYTE>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fa23 	bl	8006518 <SWAPBYTE>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	80da      	strh	r2, [r3, #6]
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ec:	2180      	movs	r1, #128	@ 0x80
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fd32 	bl	8007b58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070f4:	2100      	movs	r1, #0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fd2e 	bl	8007b58 <USBD_LL_StallEP>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d042      	beq.n	80071a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800711e:	6938      	ldr	r0, [r7, #16]
 8007120:	f000 f842 	bl	80071a8 <USBD_GetLen>
 8007124:	4603      	mov	r3, r0
 8007126:	3301      	adds	r3, #1
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800712e:	d808      	bhi.n	8007142 <USBD_GetString+0x3e>
 8007130:	6938      	ldr	r0, [r7, #16]
 8007132:	f000 f839 	bl	80071a8 <USBD_GetLen>
 8007136:	4603      	mov	r3, r0
 8007138:	3301      	adds	r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	e001      	b.n	8007146 <USBD_GetString+0x42>
 8007142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	4413      	add	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	701a      	strb	r2, [r3, #0]
  idx++;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	3301      	adds	r3, #1
 800715a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	2203      	movs	r2, #3
 8007164:	701a      	strb	r2, [r3, #0]
  idx++;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	3301      	adds	r3, #1
 800716a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800716c:	e013      	b.n	8007196 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	4413      	add	r3, r2
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3301      	adds	r3, #1
 800717e:	613b      	str	r3, [r7, #16]
    idx++;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	3301      	adds	r3, #1
 8007184:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	4413      	add	r3, r2
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	3301      	adds	r3, #1
 8007194:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e7      	bne.n	800716e <USBD_GetString+0x6a>
 800719e:	e000      	b.n	80071a2 <USBD_GetString+0x9e>
    return;
 80071a0:	bf00      	nop
  }
}
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071b8:	e005      	b.n	80071c6 <USBD_GetLen+0x1e>
  {
    len++;
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	3301      	adds	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f5      	bne.n	80071ba <USBD_GetLen+0x12>
  }

  return len;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	2100      	movs	r1, #0
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fd2e 	bl	8007c6a <USBD_LL_Transmit>

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	2100      	movs	r1, #0
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fd1d 	bl	8007c6a <USBD_LL_Transmit>

  return USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2203      	movs	r2, #3
 800724a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	2100      	movs	r1, #0
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fd1d 	bl	8007cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	2100      	movs	r1, #0
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fd0c 	bl	8007cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2204      	movs	r2, #4
 80072aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fcd8 	bl	8007c6a <USBD_LL_Transmit>

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2205      	movs	r2, #5
 80072d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fce6 	bl	8007cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072f0:	2200      	movs	r2, #0
 80072f2:	4912      	ldr	r1, [pc, #72]	@ (800733c <MX_USB_DEVICE_Init+0x50>)
 80072f4:	4812      	ldr	r0, [pc, #72]	@ (8007340 <MX_USB_DEVICE_Init+0x54>)
 80072f6:	f7fe fcd9 	bl	8005cac <USBD_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007300:	f7f9 fcf2 	bl	8000ce8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007304:	490f      	ldr	r1, [pc, #60]	@ (8007344 <MX_USB_DEVICE_Init+0x58>)
 8007306:	480e      	ldr	r0, [pc, #56]	@ (8007340 <MX_USB_DEVICE_Init+0x54>)
 8007308:	f7fe fd00 	bl	8005d0c <USBD_RegisterClass>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007312:	f7f9 fce9 	bl	8000ce8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007316:	490c      	ldr	r1, [pc, #48]	@ (8007348 <MX_USB_DEVICE_Init+0x5c>)
 8007318:	4809      	ldr	r0, [pc, #36]	@ (8007340 <MX_USB_DEVICE_Init+0x54>)
 800731a:	f7fe fc37 	bl	8005b8c <USBD_CDC_RegisterInterface>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007324:	f7f9 fce0 	bl	8000ce8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007328:	4805      	ldr	r0, [pc, #20]	@ (8007340 <MX_USB_DEVICE_Init+0x54>)
 800732a:	f7fe fd25 	bl	8005d78 <USBD_Start>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007334:	f7f9 fcd8 	bl	8000ce8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007338:	bf00      	nop
 800733a:	bd80      	pop	{r7, pc}
 800733c:	200000b4 	.word	0x200000b4
 8007340:	20000410 	.word	0x20000410
 8007344:	20000018 	.word	0x20000018
 8007348:	200000a0 	.word	0x200000a0

0800734c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007350:	2200      	movs	r2, #0
 8007352:	4905      	ldr	r1, [pc, #20]	@ (8007368 <CDC_Init_FS+0x1c>)
 8007354:	4805      	ldr	r0, [pc, #20]	@ (800736c <CDC_Init_FS+0x20>)
 8007356:	f7fe fc33 	bl	8005bc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800735a:	4905      	ldr	r1, [pc, #20]	@ (8007370 <CDC_Init_FS+0x24>)
 800735c:	4803      	ldr	r0, [pc, #12]	@ (800736c <CDC_Init_FS+0x20>)
 800735e:	f7fe fc51 	bl	8005c04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200008ec 	.word	0x200008ec
 800736c:	20000410 	.word	0x20000410
 8007370:	200006ec 	.word	0x200006ec

08007374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800737a:	4618      	mov	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	71fb      	strb	r3, [r7, #7]
 8007390:	4613      	mov	r3, r2
 8007392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b23      	cmp	r3, #35	@ 0x23
 8007398:	f200 8098 	bhi.w	80074cc <CDC_Control_FS+0x148>
 800739c:	a201      	add	r2, pc, #4	@ (adr r2, 80073a4 <CDC_Control_FS+0x20>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080074cd 	.word	0x080074cd
 80073a8:	080074cd 	.word	0x080074cd
 80073ac:	080074cd 	.word	0x080074cd
 80073b0:	080074cd 	.word	0x080074cd
 80073b4:	080074cd 	.word	0x080074cd
 80073b8:	080074cd 	.word	0x080074cd
 80073bc:	080074cd 	.word	0x080074cd
 80073c0:	080074cd 	.word	0x080074cd
 80073c4:	080074cd 	.word	0x080074cd
 80073c8:	080074cd 	.word	0x080074cd
 80073cc:	080074cd 	.word	0x080074cd
 80073d0:	080074cd 	.word	0x080074cd
 80073d4:	080074cd 	.word	0x080074cd
 80073d8:	080074cd 	.word	0x080074cd
 80073dc:	080074cd 	.word	0x080074cd
 80073e0:	080074cd 	.word	0x080074cd
 80073e4:	080074cd 	.word	0x080074cd
 80073e8:	080074cd 	.word	0x080074cd
 80073ec:	080074cd 	.word	0x080074cd
 80073f0:	080074cd 	.word	0x080074cd
 80073f4:	080074cd 	.word	0x080074cd
 80073f8:	080074cd 	.word	0x080074cd
 80073fc:	080074cd 	.word	0x080074cd
 8007400:	080074cd 	.word	0x080074cd
 8007404:	080074cd 	.word	0x080074cd
 8007408:	080074cd 	.word	0x080074cd
 800740c:	080074cd 	.word	0x080074cd
 8007410:	080074cd 	.word	0x080074cd
 8007414:	080074cd 	.word	0x080074cd
 8007418:	080074cd 	.word	0x080074cd
 800741c:	080074cd 	.word	0x080074cd
 8007420:	080074cd 	.word	0x080074cd
 8007424:	08007435 	.word	0x08007435
 8007428:	08007479 	.word	0x08007479
 800742c:	080074cd 	.word	0x080074cd
 8007430:	080074cd 	.word	0x080074cd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	431a      	orrs	r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	3302      	adds	r3, #2
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	431a      	orrs	r2, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	3303      	adds	r3, #3
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	061b      	lsls	r3, r3, #24
 8007456:	4313      	orrs	r3, r2
 8007458:	461a      	mov	r2, r3
 800745a:	4b20      	ldr	r3, [pc, #128]	@ (80074dc <CDC_Control_FS+0x158>)
 800745c:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	791a      	ldrb	r2, [r3, #4]
 8007462:	4b1e      	ldr	r3, [pc, #120]	@ (80074dc <CDC_Control_FS+0x158>)
 8007464:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	795a      	ldrb	r2, [r3, #5]
 800746a:	4b1c      	ldr	r3, [pc, #112]	@ (80074dc <CDC_Control_FS+0x158>)
 800746c:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	799a      	ldrb	r2, [r3, #6]
 8007472:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <CDC_Control_FS+0x158>)
 8007474:	719a      	strb	r2, [r3, #6]
     break;
 8007476:	e02a      	b.n	80074ce <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8007478:	4b18      	ldr	r3, [pc, #96]	@ (80074dc <CDC_Control_FS+0x158>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	b2da      	uxtb	r2, r3
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8007482:	4b16      	ldr	r3, [pc, #88]	@ (80074dc <CDC_Control_FS+0x158>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	0a1a      	lsrs	r2, r3, #8
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8007490:	4b12      	ldr	r3, [pc, #72]	@ (80074dc <CDC_Control_FS+0x158>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	0c1a      	lsrs	r2, r3, #16
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	3302      	adds	r3, #2
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800749e:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <CDC_Control_FS+0x158>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	0e1a      	lsrs	r2, r3, #24
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	3303      	adds	r3, #3
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4a0a      	ldr	r2, [pc, #40]	@ (80074dc <CDC_Control_FS+0x158>)
 80074b2:	7912      	ldrb	r2, [r2, #4]
 80074b4:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	3305      	adds	r3, #5
 80074ba:	4a08      	ldr	r2, [pc, #32]	@ (80074dc <CDC_Control_FS+0x158>)
 80074bc:	7952      	ldrb	r2, [r2, #5]
 80074be:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	3306      	adds	r3, #6
 80074c4:	4a05      	ldr	r2, [pc, #20]	@ (80074dc <CDC_Control_FS+0x158>)
 80074c6:	7992      	ldrb	r2, [r2, #6]
 80074c8:	701a      	strb	r2, [r3, #0]
     break;
 80074ca:	e000      	b.n	80074ce <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074cc:	bf00      	nop
  }

  return (USBD_OK);
 80074ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000098 	.word	0x20000098

080074e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 80074ea:	4b0c      	ldr	r3, [pc, #48]	@ (800751c <CDC_Receive_FS+0x3c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 80074f2:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <CDC_Receive_FS+0x3c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	6812      	ldr	r2, [r2, #0]
 80074fa:	b292      	uxth	r2, r2
 80074fc:	4611      	mov	r1, r2
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4806      	ldr	r0, [pc, #24]	@ (8007520 <CDC_Receive_FS+0x40>)
 8007506:	f7fe fb7d 	bl	8005c04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800750a:	4805      	ldr	r0, [pc, #20]	@ (8007520 <CDC_Receive_FS+0x40>)
 800750c:	f7fe fb98 	bl	8005c40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007510:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000aec 	.word	0x20000aec
 8007520:	20000410 	.word	0x20000410

08007524 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8007550:	4a04      	ldr	r2, [pc, #16]	@ (8007564 <CDC_AttachRxData+0x1c>)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6013      	str	r3, [r2, #0]
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20000aec 	.word	0x20000aec

08007568 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	6039      	str	r1, [r7, #0]
 8007572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2212      	movs	r2, #18
 8007578:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800757a:	4b03      	ldr	r3, [pc, #12]	@ (8007588 <USBD_FS_DeviceDescriptor+0x20>)
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	200000d0 	.word	0x200000d0

0800758c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2204      	movs	r2, #4
 800759c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800759e:	4b03      	ldr	r3, [pc, #12]	@ (80075ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	200000e4 	.word	0x200000e4

080075b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	4907      	ldr	r1, [pc, #28]	@ (80075e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80075c6:	4808      	ldr	r0, [pc, #32]	@ (80075e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80075c8:	f7ff fd9c 	bl	8007104 <USBD_GetString>
 80075cc:	e004      	b.n	80075d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	4904      	ldr	r1, [pc, #16]	@ (80075e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80075d2:	4805      	ldr	r0, [pc, #20]	@ (80075e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80075d4:	f7ff fd96 	bl	8007104 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075d8:	4b02      	ldr	r3, [pc, #8]	@ (80075e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000af0 	.word	0x20000af0
 80075e8:	08007e0c 	.word	0x08007e0c

080075ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	4904      	ldr	r1, [pc, #16]	@ (800760c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075fc:	4804      	ldr	r0, [pc, #16]	@ (8007610 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075fe:	f7ff fd81 	bl	8007104 <USBD_GetString>
  return USBD_StrDesc;
 8007602:	4b02      	ldr	r3, [pc, #8]	@ (800760c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20000af0 	.word	0x20000af0
 8007610:	08007e24 	.word	0x08007e24

08007614 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	221a      	movs	r2, #26
 8007624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007626:	f000 f843 	bl	80076b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800762a:	4b02      	ldr	r3, [pc, #8]	@ (8007634 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	200000e8 	.word	0x200000e8

08007638 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d105      	bne.n	8007656 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4907      	ldr	r1, [pc, #28]	@ (800766c <USBD_FS_ConfigStrDescriptor+0x34>)
 800764e:	4808      	ldr	r0, [pc, #32]	@ (8007670 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007650:	f7ff fd58 	bl	8007104 <USBD_GetString>
 8007654:	e004      	b.n	8007660 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4904      	ldr	r1, [pc, #16]	@ (800766c <USBD_FS_ConfigStrDescriptor+0x34>)
 800765a:	4805      	ldr	r0, [pc, #20]	@ (8007670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800765c:	f7ff fd52 	bl	8007104 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007660:	4b02      	ldr	r3, [pc, #8]	@ (800766c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000af0 	.word	0x20000af0
 8007670:	08007e38 	.word	0x08007e38

08007674 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d105      	bne.n	8007692 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4907      	ldr	r1, [pc, #28]	@ (80076a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800768a:	4808      	ldr	r0, [pc, #32]	@ (80076ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800768c:	f7ff fd3a 	bl	8007104 <USBD_GetString>
 8007690:	e004      	b.n	800769c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4904      	ldr	r1, [pc, #16]	@ (80076a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007696:	4805      	ldr	r0, [pc, #20]	@ (80076ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007698:	f7ff fd34 	bl	8007104 <USBD_GetString>
  }
  return USBD_StrDesc;
 800769c:	4b02      	ldr	r3, [pc, #8]	@ (80076a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000af0 	.word	0x20000af0
 80076ac:	08007e44 	.word	0x08007e44

080076b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076b6:	4b0f      	ldr	r3, [pc, #60]	@ (80076f4 <Get_SerialNum+0x44>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076bc:	4b0e      	ldr	r3, [pc, #56]	@ (80076f8 <Get_SerialNum+0x48>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076c2:	4b0e      	ldr	r3, [pc, #56]	@ (80076fc <Get_SerialNum+0x4c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076d6:	2208      	movs	r2, #8
 80076d8:	4909      	ldr	r1, [pc, #36]	@ (8007700 <Get_SerialNum+0x50>)
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f814 	bl	8007708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076e0:	2204      	movs	r2, #4
 80076e2:	4908      	ldr	r1, [pc, #32]	@ (8007704 <Get_SerialNum+0x54>)
 80076e4:	68b8      	ldr	r0, [r7, #8]
 80076e6:	f000 f80f 	bl	8007708 <IntToUnicode>
  }
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	1fff7a10 	.word	0x1fff7a10
 80076f8:	1fff7a14 	.word	0x1fff7a14
 80076fc:	1fff7a18 	.word	0x1fff7a18
 8007700:	200000ea 	.word	0x200000ea
 8007704:	200000fa 	.word	0x200000fa

08007708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800771a:	2300      	movs	r3, #0
 800771c:	75fb      	strb	r3, [r7, #23]
 800771e:	e027      	b.n	8007770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	0f1b      	lsrs	r3, r3, #28
 8007724:	2b09      	cmp	r3, #9
 8007726:	d80b      	bhi.n	8007740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	0f1b      	lsrs	r3, r3, #28
 800772c:	b2da      	uxtb	r2, r3
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	4619      	mov	r1, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	440b      	add	r3, r1
 8007738:	3230      	adds	r2, #48	@ 0x30
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	e00a      	b.n	8007756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	0f1b      	lsrs	r3, r3, #28
 8007744:	b2da      	uxtb	r2, r3
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	4619      	mov	r1, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	440b      	add	r3, r1
 8007750:	3237      	adds	r2, #55	@ 0x37
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	3301      	adds	r3, #1
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	3301      	adds	r3, #1
 800776e:	75fb      	strb	r3, [r7, #23]
 8007770:	7dfa      	ldrb	r2, [r7, #23]
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	429a      	cmp	r2, r3
 8007776:	d3d3      	bcc.n	8007720 <IntToUnicode+0x18>
  }
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	@ 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007790:	f107 0314 	add.w	r3, r7, #20
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	609a      	str	r2, [r3, #8]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077a8:	d13a      	bne.n	8007820 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077aa:	2300      	movs	r3, #0
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 80077b4:	f043 0301 	orr.w	r3, r3, #1
 80077b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80077ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80077ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077cc:	2302      	movs	r3, #2
 80077ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077d4:	2303      	movs	r3, #3
 80077d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077d8:	230a      	movs	r3, #10
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077dc:	f107 0314 	add.w	r3, r7, #20
 80077e0:	4619      	mov	r1, r3
 80077e2:	4812      	ldr	r0, [pc, #72]	@ (800782c <HAL_PCD_MspInit+0xa4>)
 80077e4:	f7f9 ffe6 	bl	80017b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 80077ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 80077ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 80077fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 80077fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007802:	6453      	str	r3, [r2, #68]	@ 0x44
 8007804:	4b08      	ldr	r3, [pc, #32]	@ (8007828 <HAL_PCD_MspInit+0xa0>)
 8007806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007810:	2200      	movs	r2, #0
 8007812:	2100      	movs	r1, #0
 8007814:	2043      	movs	r0, #67	@ 0x43
 8007816:	f7f9 ff96 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800781a:	2043      	movs	r0, #67	@ 0x43
 800781c:	f7f9 ffaf 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007820:	bf00      	nop
 8007822:	3728      	adds	r7, #40	@ 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40023800 	.word	0x40023800
 800782c:	40020000 	.word	0x40020000

08007830 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fe fae3 	bl	8005e12 <USBD_LL_SetupStage>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	4619      	mov	r1, r3
 800787e:	f7fe fb1d 	bl	8005ebc <USBD_LL_DataOutStage>
}
 8007882:	bf00      	nop
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	4613      	mov	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	440b      	add	r3, r1
 80078aa:	3320      	adds	r3, #32
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	4619      	mov	r1, r3
 80078b2:	f7fe fbbf 	bl	8006034 <USBD_LL_DataInStage>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fd03 	bl	80062d8 <USBD_LL_SOF>
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078e2:	2301      	movs	r3, #1
 80078e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	79db      	ldrb	r3, [r3, #7]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d001      	beq.n	80078f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078ee:	f7f9 f9fb 	bl	8000ce8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078f8:	7bfa      	ldrb	r2, [r7, #15]
 80078fa:	4611      	mov	r1, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fca7 	bl	8006250 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe fc4e 	bl	80061aa <USBD_LL_Reset>
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fca2 	bl	8006270 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7adb      	ldrb	r3, [r3, #11]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800794c:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <HAL_PCD_SuspendCallback+0x48>)
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	4a03      	ldr	r2, [pc, #12]	@ (8007960 <HAL_PCD_SuspendCallback+0x48>)
 8007952:	f043 0306 	orr.w	r3, r3, #6
 8007956:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	e000ed00 	.word	0xe000ed00

08007964 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fc98 	bl	80062a8 <USBD_LL_Resume>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fcf0 	bl	800637c <USBD_LL_IsoOUTIncomplete>
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fcac 	bl	8006318 <USBD_LL_IsoINIncomplete>
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fd02 	bl	80063e0 <USBD_LL_DevConnected>
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fcff 	bl	80063f6 <USBD_LL_DevDisconnected>
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d13c      	bne.n	8007a8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a10:	4a20      	ldr	r2, [pc, #128]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a20:	4b1c      	ldr	r3, [pc, #112]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a28:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a2e:	4b19      	ldr	r3, [pc, #100]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a30:	2202      	movs	r2, #2
 8007a32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a34:	4b17      	ldr	r3, [pc, #92]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a3a:	4b16      	ldr	r3, [pc, #88]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a40:	4b14      	ldr	r3, [pc, #80]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a46:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a4c:	4b11      	ldr	r3, [pc, #68]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a58:	4b0e      	ldr	r3, [pc, #56]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a5e:	480d      	ldr	r0, [pc, #52]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a60:	f7fa f85f 	bl	8001b22 <HAL_PCD_Init>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a6a:	f7f9 f93d 	bl	8000ce8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a6e:	2180      	movs	r1, #128	@ 0x80
 8007a70:	4808      	ldr	r0, [pc, #32]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a72:	f7fb fa8c 	bl	8002f8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a76:	2240      	movs	r2, #64	@ 0x40
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4806      	ldr	r0, [pc, #24]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a7c:	f7fb fa40 	bl	8002f00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a80:	2280      	movs	r2, #128	@ 0x80
 8007a82:	2101      	movs	r1, #1
 8007a84:	4803      	ldr	r0, [pc, #12]	@ (8007a94 <USBD_LL_Init+0x94>)
 8007a86:	f7fb fa3b 	bl	8002f00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000cf0 	.word	0x20000cf0

08007a98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fa f946 	bl	8001d40 <HAL_PCD_Start>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 f942 	bl	8007d44 <USBD_Get_USB_Status>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	4608      	mov	r0, r1
 8007ad8:	4611      	mov	r1, r2
 8007ada:	461a      	mov	r2, r3
 8007adc:	4603      	mov	r3, r0
 8007ade:	70fb      	strb	r3, [r7, #3]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70bb      	strb	r3, [r7, #2]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007af6:	78bb      	ldrb	r3, [r7, #2]
 8007af8:	883a      	ldrh	r2, [r7, #0]
 8007afa:	78f9      	ldrb	r1, [r7, #3]
 8007afc:	f7fa fe1a 	bl	8002734 <HAL_PCD_EP_Open>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f91c 	bl	8007d44 <USBD_Get_USB_Status>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	4611      	mov	r1, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fa fe65 	bl	8002808 <HAL_PCD_EP_Close>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 f8fd 	bl	8007d44 <USBD_Get_USB_Status>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b72:	78fa      	ldrb	r2, [r7, #3]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fa ff1d 	bl	80029b6 <HAL_PCD_EP_SetStall>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f8de 	bl	8007d44 <USBD_Get_USB_Status>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fa ff61 	bl	8002a7c <HAL_PCD_EP_ClrStall>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f8bf 	bl	8007d44 <USBD_Get_USB_Status>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007be6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da0b      	bge.n	8007c08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	3316      	adds	r3, #22
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	e00b      	b.n	8007c20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007c1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fa fd4e 	bl	80026ec <HAL_PCD_SetAddress>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f874 	bl	8007d44 <USBD_Get_USB_Status>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
 8007c76:	460b      	mov	r3, r1
 8007c78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c88:	7af9      	ldrb	r1, [r7, #11]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	f7fa fe58 	bl	8002942 <HAL_PCD_EP_Transmit>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 f853 	bl	8007d44 <USBD_Get_USB_Status>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ca2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	607a      	str	r2, [r7, #4]
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007cca:	7af9      	ldrb	r1, [r7, #11]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	f7fa fde4 	bl	800289c <HAL_PCD_EP_Receive>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 f832 	bl	8007d44 <USBD_Get_USB_Status>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ce4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fa fe04 	bl	8002912 <HAL_PCD_EP_GetRxCount>
 8007d0a:	4603      	mov	r3, r0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d1c:	4b03      	ldr	r3, [pc, #12]	@ (8007d2c <USBD_static_malloc+0x18>)
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	200011d4 	.word	0x200011d4

08007d30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d817      	bhi.n	8007d88 <USBD_Get_USB_Status+0x44>
 8007d58:	a201      	add	r2, pc, #4	@ (adr r2, 8007d60 <USBD_Get_USB_Status+0x1c>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d77 	.word	0x08007d77
 8007d68:	08007d7d 	.word	0x08007d7d
 8007d6c:	08007d83 	.word	0x08007d83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73fb      	strb	r3, [r7, #15]
    break;
 8007d74:	e00b      	b.n	8007d8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d76:	2303      	movs	r3, #3
 8007d78:	73fb      	strb	r3, [r7, #15]
    break;
 8007d7a:	e008      	b.n	8007d8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d80:	e005      	b.n	8007d8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d82:	2303      	movs	r3, #3
 8007d84:	73fb      	strb	r3, [r7, #15]
    break;
 8007d86:	e002      	b.n	8007d8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d8c:	bf00      	nop
  }
  return usb_status;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <memset>:
 8007d9c:	4402      	add	r2, r0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d100      	bne.n	8007da6 <memset+0xa>
 8007da4:	4770      	bx	lr
 8007da6:	f803 1b01 	strb.w	r1, [r3], #1
 8007daa:	e7f9      	b.n	8007da0 <memset+0x4>

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4d0d      	ldr	r5, [pc, #52]	@ (8007de4 <__libc_init_array+0x38>)
 8007db0:	4c0d      	ldr	r4, [pc, #52]	@ (8007de8 <__libc_init_array+0x3c>)
 8007db2:	1b64      	subs	r4, r4, r5
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	2600      	movs	r6, #0
 8007db8:	42a6      	cmp	r6, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007dec <__libc_init_array+0x40>)
 8007dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007df0 <__libc_init_array+0x44>)
 8007dc0:	f000 f818 	bl	8007df4 <_init>
 8007dc4:	1b64      	subs	r4, r4, r5
 8007dc6:	10a4      	asrs	r4, r4, #2
 8007dc8:	2600      	movs	r6, #0
 8007dca:	42a6      	cmp	r6, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd4:	4798      	blx	r3
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dde:	4798      	blx	r3
 8007de0:	3601      	adds	r6, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	08007e6c 	.word	0x08007e6c
 8007de8:	08007e6c 	.word	0x08007e6c
 8007dec:	08007e6c 	.word	0x08007e6c
 8007df0:	08007e70 	.word	0x08007e70

08007df4 <_init>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	bf00      	nop
 8007df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfa:	bc08      	pop	{r3}
 8007dfc:	469e      	mov	lr, r3
 8007dfe:	4770      	bx	lr

08007e00 <_fini>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	bf00      	nop
 8007e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e06:	bc08      	pop	{r3}
 8007e08:	469e      	mov	lr, r3
 8007e0a:	4770      	bx	lr
